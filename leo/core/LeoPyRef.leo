<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20051031040240"><vh>Startup</vh>
<v t="ekr.20110607155823.16449"><vh>@chapters</vh></v>
<v t="ekr.20080412053100.5"><vh>@settings</vh>
<v t="ekr.20080412053100.4"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20100902154544.5872"><vh>@bool enable-abbreviations = True</vh></v>
<v t="ekr.20111123042248.12701"><vh>@@@enabled-plugins</vh></v>
<v t="ekr.20111031081007.9985"><vh>@shortcuts</vh></v>
</v>
</v>
<v t="EKR.20040430162943"><vh>Notes</vh>
<v t="ekr.20031218072017.329"><vh>@file ../doc/leoNotes.txt</vh></v>
</v>
<v t="ekr.20100120072650.6088"><vh>Projects</vh>
<v t="ekr.20100120072650.6089"><vh>@file ../doc/leoProjects.txt</vh></v>
</v>
<v t="EKR.20040519090151.2"><vh>To do</vh>
<v t="ekr.20100119205347.6015"
marks="ekr.20130806211959.17355,"
expanded="ekr.20130807203905.16655,ekr.20130807203905.16669,"><vh>@file ../doc/leoToDo.txt</vh></v>
</v>
<v t="ekr.20031218072017.2406"><vh>Code</vh>
<v t="ekr.20090802181029.5988"><vh>Version</vh>
<v t="ekr.20090717092906.12765"><vh>@file leoVersion.py</vh></v>
<v t="ekr.20111124095033.10203"><vh>@edit bzr_version.py</vh></v>
</v>
<v t="ekr.20090802181029.5989"><vh>Startup &amp; external files</vh>
<v t="ekr.20110310091639.14254"><vh>@file ../external/codewise.py</vh></v>
<v t="ekr.20100120092047.6087"><vh>@file ../external/ipy_leo.py</vh></v>
<v t="ville.20091010232339.6117"><vh>@file ../external/lproto.py</vh></v>
<v t="ekr.20120519121124.9919"><vh>@file ../external/leosax.py</vh></v>
<v t="ekr.20130805134749.12436"><vh>@file ../external/edb.py</vh></v>
<v t="ekr.20031218072017.2605"><vh>@file runLeo.py </vh></v>
</v>
<v t="ekr.20031218072017.2604"><vh>Core classes</vh>
<v t="ekr.20031218072017.2608"><vh>@file leoApp.py</vh></v>
<v t="ekr.20041005105605.1"><vh>@file leoAtFile.py</vh></v>
<v t="ekr.20070227091955.1"><vh>@file leoBridge.py</vh></v>
<v t="ekr.20100208065621.5894"><vh>@file leoCache.py</vh></v>
<v t="ekr.20070317085508.1"><vh>@file leoChapters.py</vh></v>
<v t="ekr.20031218072017.2794"><vh>@file leoColor.py</vh></v>
<v t="ekr.20031218072017.2810"><vh>@file leoCommands.py</vh></v>
<v t="ekr.20041117062700"><vh>@file leoConfig.py</vh></v>
<v t="ekr.20050710142719"><vh>@file leoEditCommands.py</vh></v>
<v t="ekr.20031218072017.3018"><vh>@file leoFileCommands.py</vh></v>
<v t="ekr.20031218072017.3093" descendentVnodeUnknownAttributes="7d71005506302e31352e3071017d71025808000000616e6e6f7461746571037d710473732e"><vh>@file leoGlobals.py</vh></v>
<v t="ekr.20031218072017.3206"><vh>@file leoImport.py</vh></v>
<v t="ekr.20111116103733.9817"><vh>@file leoInspect.py</vh></v>
<v t="ekr.20120401063816.10072"><vh>@file leoIPython.py</vh></v>
<v t="ekr.20031218072017.3320"><vh>@file leoNodes.py</vh></v>
<v t="ekr.20031218072017.3439"><vh>@file leoPlugins.py</vh></v>
<v t="ekr.20061024060248.1"><vh>@file leoPymacs.py</vh></v>
<v t="ekr.20090502071837.3"><vh>@file leoRst.py</vh></v>
<v t="ekr.20120420054855.14241" descendentVnodeUnknownAttributes="7d7100285505302e332e3271017d71022858090000007374725f6374696d657103580c000000313331393436303438332e30710458090000007374725f6d74696d657105580d000000313331393436373035302e3438710658090000007374725f6174696d657107580d000000313331393436373035302e34387108755505302e332e3371097d710a2858090000007374725f6374696d65710b580c000000313331393436303438332e30710c58090000007374725f6d74696d65710d580d000000313332303432323639302e3534710e58090000007374725f6174696d65710f580d000000313332303433343235372e33367110755505302e332e3071117d71122858090000007374725f6374696d657113580c000000313331393439313330362e30711458090000007374725f6d74696d657115580d000000313331393439323330312e3532711658090000007374725f6174696d657117580d000000313331393534393339302e38397118755505302e332e3171197d711a2858090000007374725f6374696d65711b580c000000313331393436303438332e30711c58090000007374725f6d74696d65711d580d000000313331393436373033382e3235711e58090000007374725f6174696d65711f580c000000313332303432323637302e397120755505302e332e3471217d71222858090000007374725f6374696d657123580c000000313331393633383634382e30712458090000007374725f6d74696d657125580d000000313331393634313038352e3038712658090000007374725f6174696d657127580c000000313331393634353330362e327128755505302e332e3571297d712a2858090000007374725f6374696d65712b580c000000313331393633383634382e30712c58090000007374725f6d74696d65712d580c000000313331393634313131372e39712e58090000007374725f6174696d65712f580d000000313331393634313435352e3937713075752e"><vh>@file leoSessions.py</vh></v>
<v t="ekr.20080708094444.1"><vh>@file leoShadow.py</vh></v>
<v t="ekr.20031218072017.3446"><vh>@file leoTangle.py</vh></v>
<v t="ekr.20031218072017.3603"><vh>@file leoUndo.py</vh></v>
</v>
<v t="ekr.20031218072017.3625"><vh>Gui base classes</vh>
<v t="ekr.20050721093241"><vh>&lt;&lt; about gui classes and gui plugins &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3630"><vh>@file leoCompare.py</vh></v>
<v t="ekr.20060123151617"><vh>@file leoFind.py</vh></v>
<v t="ekr.20031218072017.3655"><vh>@file leoFrame.py</vh></v>
<v t="ekr.20031218072017.3719"><vh>@file leoGui.py</vh></v>
<v t="ekr.20061031131434"><vh>@file leoKeys.py</vh></v>
<v t="ekr.20031218072017.3749"><vh>@file leoMenu.py</vh></v>
</v>
<v t="ekr.20110605121601.17862"><vh>Qt gui</vh>
<v t="ekr.20110605121601.17863"><vh>@file ../plugins/baseNativeTree.py</vh></v>
<v t="ekr.20120419093256.10048"><vh>@file ../plugins/free_layout.py</vh></v>
<v t="ekr.20110605121601.17954"><vh>@file ../plugins/nested_splitter.py</vh></v>
<v t="ekr.20110605121601.17996"><vh>@file ../plugins/qtframecommands.py</vh></v>
<v t="ekr.20110605121601.18002"><vh>@file ../plugins/qtGui.py</vh></v>
<v t="ekr.20130701072841.12673"><vh>@file qsyntaxhighlighter.py</vh></v>
<v t="ekr.20110605121601.18695"><vh>QDesigner files</vh>
<v t="ekr.20110605121601.18696"><vh>@auto ../test/qtui_generate.py</vh></v>
<v t="ekr.20110605121601.18698"><vh>@auto ../plugins/qt_main.py</vh></v>
<v t="ekr.20110605121601.18703"><vh>@auto ../plugins/qt_main.ui</vh></v>
<v t="ekr.20110605121601.18704"><vh>@auto ../plugins/qt_quicksearch.py</vh></v>
<v t="ekr.20110605121601.18709"><vh>@auto ../plugins/qt_quicksearch.ui</vh></v>
</v>
</v>
<v t="ekr.20080730161153.8"><vh>Testing</vh>
<v t="ekr.20100221142603.5638"><vh>@file ../../pylint-leo.py</vh></v>
<v t="ekr.20080730161153.2"><vh>@file leoBridgeTest.py</vh></v>
<v t="ekr.20080730161153.5"><vh>@file leoDynamicTest.py</vh></v>
<v t="ekr.20051104075904" descendentVnodeUnknownAttributes="7d710055013071017d71025808000000616e6e6f746174657103285808000000616e6e6f7461746571047d710574710673732e"><vh>@file leoTest.py</vh></v>
</v>
</v>
<v t="ekr.20130503155210.24812"><vh>To do: 4.11</vh>
<v t="ekr.20130806211959.17306"><vh>Items from mail: what to do about these?</vh>
<v t="ekr.20130806211959.17307"><vh>Help (Some might be good to document)</vh>
<v t="ekr.20130806211959.17308"><vh>Automated playback (done??)</vh>
<v t="ekr.20130806211959.17309"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130806211959.17310"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130806211959.17311"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130806211959.17312"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130806211959.17313"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130806211959.17314"><vh>Re: Automated playback</vh></v>
</v>
<v t="ekr.20130806211959.17315"><vh>Background Images in body pane?</vh>
<v t="ekr.20130806211959.17316"><vh>Re: Background Images in body pane?</vh></v>
<v t="ekr.20130806211959.17317"><vh>Re: Background Images in body pane?</vh></v>
<v t="ekr.20130806211959.17318"><vh>Re: Background Images in body pane?</vh></v>
</v>
<v t="ekr.20130806211959.17319"><vh>Best way to synchronize/update myLeoSettings.leo and leoSettings.leo ?</vh></v>
<v t="ekr.20130806211959.17320"><vh>Create Pane For matplotlib chart</vh>
<v t="ekr.20130806211959.17321"><vh>Re: Create Pane For matplotlib chart</vh></v>
<v t="ekr.20130806211959.17323"><vh>Re: Create Pane For matplotlib chart</vh></v>
<v t="ekr.20130806211959.17324"><vh>Re: Create Pane For matplotlib chart</vh></v>
</v>
<v t="ekr.20130806211959.17325"><vh>How to call functions from LeoPyRef.Leo</vh>
<v t="ekr.20130806211959.17326"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130806211959.17327"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130806211959.17328"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130806211959.17329"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130806211959.17330"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
</v>
<v t="ekr.20130806211959.17331"><vh>How to make body text insertion at cursor permanent?</vh>
<v t="ekr.20130806211959.17332"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130806211959.17333"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130806211959.17334"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130806211959.17335"><vh>Re: the workflow of write leo scripts?</vh></v>
</v>
<v t="ekr.20130806211959.17336"><vh>How to use leo to make mathematical notes?</vh></v>
<v t="ekr.20130806211959.17337"><vh>Indexing files for full text search</vh></v>
<v t="ekr.20130806211959.17339"><vh>Parameterized template nodes</vh>
<v t="ekr.20130806211959.17340"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130806211959.17341"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130806211959.17342"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130806211959.17343"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130806211959.17344"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130806211959.17345"><vh>Re: Parameterized template nodes</vh></v>
</v>
<v t="ekr.20130806211959.17346"><vh>Terry, how do you create the buttons with dropdown menus?</vh>
<v t="ekr.20130806211959.17347"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17348"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17349"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17350"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17351"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17352"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17353"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17354"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130806211959.17355" a="M"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
</v>
<v t="ekr.20130806211959.17356"><vh>the workflow of write leo scripts?</vh></v>
<v t="ekr.20130806211959.17357"><vh>Tool for diffing Leo files</vh>
<v t="ekr.20130806211959.17358"><vh>Re: Tool for diffing Leo files</vh></v>
</v>
</v>
<v t="ekr.20130806211959.17359"><vh>User comments</vh>
<v t="ekr.20130807090137.11464"><vh>From Vili</vh></v>
<v t="ekr.20130806211959.17360"><vh>Blog post about how Leo can improve organization of code bases</vh>
<v t="ekr.20130806211959.17361"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130806211959.17362"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130806211959.17363"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130806211959.17364"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
</v>
<v t="ekr.20130806211959.17365"><vh>Leo as PIM and authoring tool</vh></v>
<v t="ekr.20130806211959.17366"><vh>persistent state with json as a leo abbreviation</vh>
<v t="ekr.20130806211959.17369"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
</v>
<v t="ekr.20130806211959.17370"><vh>why Leo</vh>
<v t="ekr.20130806211959.17371"><vh>Fw: why Leo</vh>
<v t="ekr.20130806211959.17372"><vh>Re: Fw: why Leo</vh></v>
<v t="ekr.20130806211959.17373"><vh>Re: why Leo</vh></v>
<v t="ekr.20130806211959.17374"><vh>Re: why Leo</vh></v>
</v>
</v>
<v t="ekr.20130806211959.17375"><vh>Fidel's first post</vh></v>
</v>
<v t="ekr.20130807203905.16773"><vh>Leo for portableapps?</vh></v>
</v>
<v t="ekr.20130510070942.10606"><vh>Bugs (before 4.11b1)</vh>
<v t="ekr.20130503155210.24821"><vh>Update installation docs</vh></v>
<v t="ekr.20130503155210.24826"><vh>Script: Add Windows handler for .leo files</vh></v>
<v t="ekr.20130503155210.24827"><vh>Console script: Install Leo from scratch on Windows</vh></v>
<v t="ekr.20130530110446.12450"><vh>Fix syntax coloring bug involving multiple body editors</vh></v>
<v t="ekr.20130502102046.10578"><vh>Crash deleting body editor</vh></v>
<v t="ekr.20130510070942.10611"><vh>Can undo headline put focus in headline?</vh></v>
<v t="ekr.20130508084413.10645"><vh>Better find/replace dialog</vh></v>
<v t="ekr.20130805080841.21380"><vh>Fix javascript import bug</vh></v>
<v t="ekr.20130805134749.12435"><vh>Fix syntax coloring bug</vh></v>
</v>
<v t="ekr.20130806072439.20640"><vh>Installation</vh>
<v t="ekr.20130806072439.20732"><vh>** Runnable Leo in one .zip file.</vh>
<v t="ekr.20130806072439.20736"><vh>Re: Runnable Leo in one .zip file.</vh></v>
<v t="ekr.20130806072439.20744"><vh>Re: Runnable Leo in one .zip file.</vh></v>
</v>
<v t="ekr.20130807090137.11457"><vh>File association scripts</vh>
<v t="ekr.20130806072439.20669"><vh>Leo script to register .leo files with Windows</vh>
<v t="ekr.20130806072439.20670"><vh>Re: Leo script to register .leo files with Windows</vh></v>
</v>
<v t="ekr.20130806072439.20671"><vh>Leo script to set .leo association (Windows)</vh>
<v t="ekr.20130806072439.20672"><vh>Re: Leo script to set .leo association (Windows)</vh></v>
</v>
<v t="ekr.20130806072439.20668"><vh>Leo script to (almost) set .leo filetype icon</vh></v>
</v>
<v t="ekr.20130807090137.11461"><vh>Linux</vh>
<v t="ekr.20130806072439.20730"><vh>PyPi package: 4.11 test release: Matt</vh></v>
<v t="ekr.20130806072439.20664"><vh>finding debian package</vh></v>
<v t="ekr.20130806072439.20683"><vh>linux users: please test pip install</vh></v>
</v>
<v t="ekr.20130807090137.11459"><vh>MacOS</vh>
<v t="ekr.20130806072439.20688"><vh>Macintosh installation</vh>
<v t="ekr.20130806072439.20689"><vh>Re: Macintosh installation</vh></v>
<v t="ekr.20130806072439.20690"><vh>Re: Macintosh installation</vh></v>
</v>
<v t="ekr.20130806072439.20691"><vh>Macintosh Snow leopard installation</vh></v>
<v t="ekr.20130806072439.20686"><vh>Mac OS Lion installation instructions need updating</vh>
<v t="ekr.20130806072439.20687"><vh>Re: Mac OS Lion installation instructions need updating</vh></v>
</v>
<v t="ekr.20130806072439.20650"><vh>Wishlist: brew install leo</vh></v>
</v>
<v t="ekr.20130807090137.11462"><vh>Windows</vh>
<v t="ekr.20130806072439.20677"><vh>Installing pip on windows</vh></v>
<v t="ekr.20130806072439.20707"><vh>Portable Leo from scratch on Windows</vh>
<v t="ekr.20130807090137.11463"><vh>script</vh></v>
<v t="ekr.20130806072439.20712"><vh>Re: Portable Leo from scratch on Windows</vh></v>
</v>
<v t="ekr.20130806072439.20722"><vh>apt on windows</vh></v>
<v t="ekr.20130806072439.20643"><vh>Tip about install leo with EPD</vh></v>
<v t="ekr.20130806072439.20723"><vh>Problem saving changed/new .leo files on Windows</vh></v>
</v>
<v t="ekr.20130806072439.20679"><vh>Script: Add docutils to python3 </vh></v>
<v t="ekr.20130807203905.16594"><vh>Wishlist for newbies (Fidel)</vh></v>
<v t="ekr.20130807203905.16596"><vh>PortableFileAssociator</vh></v>
</v>
<v t="ekr.20130807203905.16649"><vh>Doc To do</vh>
<v t="ekr.20130807203905.16650"><vh>Leo in a nutshell</vh></v>
<v t="ekr.20130807203905.16800"><vh>Full tree preview: wishlist item? ... or am I missing something?</vh>
<v t="ekr.20130807203905.16801"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16802"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16803"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16804"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16805"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16806"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16807"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16808"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16809"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16810"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16811"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16812"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16813"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16814"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16815"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16816"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130807203905.16817"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
</v>
<v t="ekr.20130807203905.16651"><vh>Reference: Windows associations (To be deleted)</vh>
<v t="ekr.20130807203905.16652"><vh>Previous instructions</vh></v>
<v t="ekr.20130807203905.16653"><vh>create-leobat.bat</vh></v>
<v t="ekr.20130807203905.16654"><vh>Other ideas for setting file associations</vh></v>
</v>
<v t="ekr.20130807203905.16655"><vh>Tutorials &amp; how-to</vh>
<v t="ekr.20130807203905.16656"><vh>A beautiful pattern for composing large strings</vh>
<v t="ekr.20130807203905.16657"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16658"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16659"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16660"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16661"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16662"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130807203905.16663"><vh>Re: A beautiful pattern for composing large strings</vh></v>
</v>
<v t="ekr.20130807203905.16664"><vh>All about clone conflicts</vh>
<v t="ekr.20130807203905.16665"><vh>Re: All about clone conflicts</vh></v>
</v>
<v t="ekr.20130807203905.16666"><vh>Draft: Position tutorial</vh>
<v t="ekr.20130807203905.16667"><vh>other info</vh></v>
</v>
<v t="ekr.20130807203905.16668"><vh>Draft: unit-testing tutorial</vh></v>
<v t="ekr.20130807203905.16669"><vh>Tutorial scripts (To be written)</vh>
<v t="ekr.20130807203905.16670"><vh>What makes Leo special: shorter</vh></v>
<v t="ekr.20130807203905.16671"><vh>What makes Leo special</vh></v>
<v t="ekr.20130807203905.16672"><vh>Scripting</vh></v>
<v t="ekr.20130807203905.16673"><vh>External files</vh></v>
<v t="ekr.20130807203905.16674"><vh>The screenshots plugin</vh></v>
<v t="ekr.20130807203905.16675"><vh>The contextmenu plugin</vh></v>
<v t="ekr.20130807203905.16676"><vh>The bookmarks plugin</vh></v>
<v t="ekr.20130807203905.16677"><vh>The todo plugin</vh></v>
<v t="ekr.20130807203905.16818"><vh>The valuespace plugin (promised!)</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16678"><vh>For Implementors</vh>
<v t="ekr.20130807203905.16679"><vh>Centralizing focus handling (to make debugging easier)</vh>
<v t="ekr.20130807203905.16680"><vh>Re: Centralizing focus handling (to make debugging easier)</vh></v>
</v>
<v t="ekr.20130807203905.16681"><vh>Free "continuous integration" for Leo</vh>
<v t="ekr.20130807203905.16682"><vh>Re: Free "continuous integration" for Leo</vh></v>
</v>
<v t="ekr.20130807203905.16683"><vh>Notes to myself: fixing the key binding bug</vh></v>
<v t="ekr.20130807203905.16684"><vh>Toolkit independent apis</vh>
<v t="ekr.20130807203905.16685"><vh>Re: Toolkit independent apis</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20130808211520.15901"><vh>* encourage e-postcards from users</vh></v>
</vnodes>
<tnodes>
<t tx="EKR.20040430162943"></t>
<t tx="EKR.20040519090151.2"></t>
<t tx="ekr.20031218072017.2406" _bklnk="7d71002858010000007971014b0058010000007871024b00580400000074797065710358080000006e6f646552656374710458050000006c696e6b7371055d7106752e">@tabwidth -4
@pagewidth 70

@ 
This section contains all the source code of leo.py.

Leo's code uses the following conventions throughout:

c:  a commander.
ch: a character.
d:  a dialog or a dict.
f:  an open file.
fn: a file name.
g:  the leoGlobals module.
i, j, k: indices into a string.
p:  a position.
s:  a string.
t:  a text widget.
u:  an undoer.
w:  a gui widget.
v:  a vnode
z:  a local temp.

In more limited contexts, the following conventions apply:
    
si: a g.ShortcutInfo object.
ks: a g.KeyStroke object
stroke: a KeyStroke object.

The following are 'official' ivars that will always exist:

c.frame                 The frame containing the log,body,tree, etc.
c.frame.body            The body pane.
c.frame.body.bodyCtrl   The body widget.
c.frame.iconBar         The icon bar.
c.frame.log             The log pane.
c.frame.tree            The tree pane.
</t>
<t tx="ekr.20031218072017.2604">
</t>
<t tx="ekr.20031218072017.3625">&lt;&lt; about gui classes and gui plugins &gt;&gt;
</t>
<t tx="ekr.20050721093241">@nocolor

The following are notes for anyone who is interested in writing
alternate gui's for Leo.

Rule 1: Leo's core is (or should be) free of gui-specific code.

Core code calls 'gui wrapper methods' defined by gui-specific classes.
The base classes for these gui-specific classes are in the node
Code--&gt;Gui Base classes.

Rule 2: Gui-specific code should be localized.

The @file nodes contained in the node 'Code--&gt;Gui Tkinter classes' in
leoPy.leo contain all of Leo's Tkinter-specific code. Gui plugins
would typically put all similar code in a single file.

Rule 3: Gui-specific code can call gui methods directly.

There are no restrictions about the code in the gui-specific classes.

Rule 4: Gui-specific classes must implement the 'gui wrapper methods'
specified in the gui base classes.

This is the way that gui-specific classes provide gui-specific
services to Leo's core.

The alternative would be to implement all gui-specific commands
directly in the gui-specific code.  But this would be much more work
than needed.  For example, only a few gui-specific wrappers are needed
to implement all commands that deal with body text.  Implementing each
of these commands 'from scratch' would duplicate a lot of code
unnecessarily. 

Using the gui wrapper methods is a bit messy for two reasons:

1. It requires defining enough wrappers (both in the base gui classes
   and subclasses) so that all gui-specific services needed by Leo's
   core are available.  Adding a wrapper to a gui base class involves
   adding it to all gui-specific subclasses.  It's easy to forget to
   add a wrapper.  The gui base class defines all wrappers as a
   function that just calls oops().  This prints a warning that the
   wrapper should be defined in a subclass. 

2. The original wrappers assumed Tkinter-like indices.  Wrappers that
   were defined later assume Python indices (see Rule 5 below).  The
   newer style wrappers that use Python indices have 'Python' in their
   name.  Having two sets of wrappers is one of the ugliest features
   of the present code.  I find it hard to remember which wrappers
   exist and what exactly they do :-)

Rule 5: Leo's core should use Python indices, not gui-specific
indices.

Leo's core mostly follows this rule: there may be a few exceptions.

A Python index is an int that runs from 0 (beginning of text) to
len(s) (end of text s).  That is, there are exactly len(s) + 1 valid
indices.  In contrast, Tkinter indices run from "1.0" to "x.y" where
text s has x lines and where the length of the last line is y-1. 

Two (recently written) functions in leoGlobals.py support conversions
from Python indices to the row/column indices used by Tkinter.

- g.convertPythonIndexToRowCol converts a Python index to a row/column
  index used by Tkinter.
  
- g.convertRowColToPythonIndex does the reverse.

Important: the first Tkinter index is '1.0', not '0.0', but the row
returned by g.convertPythonIndexToRowCol is zero based, so the code
that actually creates Tkinter indices from row/col must add 1 to the
row.  Similar remarks apply when going in the reverse direction. 
</t>
<t tx="ekr.20051031040240"></t>
<t tx="ekr.20080412053100.4"></t>
<t tx="ekr.20080412053100.5"></t>
<t tx="ekr.20080730161153.8"></t>
<t tx="ekr.20090802181029.5988"></t>
<t tx="ekr.20090802181029.5989"></t>
<t tx="ekr.20100120072650.6088"></t>
<t tx="ekr.20100902154544.5872"></t>
<t tx="ekr.20110605121601.17862"># These files are true plugins, but it is more convenient to put them here.</t>
<t tx="ekr.20110605121601.18695"></t>
<t tx="ekr.20110607155823.16449"></t>
<t tx="ekr.20111031081007.9985">run-selected-unit-tests-externally = Alt-4 # Standard binding, unchanged.
run-marked-unit-tests-externally = Alt-5
run-marked-unit-tests-locally = Alt-6
</t>
<t tx="ekr.20111123042248.12701"># Leo loads plugins in the order they appear here.

# Highly-recommended plugins:

plugins_menu.py
free_layout.py # needs to be early
viewrendered.py
mod_scripting.py
bigdash.py
</t>
<t tx="ekr.20130502102046.10578"># Trying to delete a second body editor.

Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 560, in doCommand
    val = command(event)
  File "c:\leo.repo\trunk\leo\plugins\qtGui.py", line 2980, in deleteEditor
    name = w.leo_name
AttributeError: 'LeoQTextBrowser' object has no attribute 'leo_name'
</t>
<t tx="ekr.20130503155210.24812"></t>
<t tx="ekr.20130503155210.24821">@language rest

https://code.google.com/p/maphew/source/browse/other/create-leobat.bat
https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/bat$20file/leo-editor/li9ILUWuNAs/1zhjcNPWybEJ


as noted in the other thread, you've stumbled over an omission in the docs. Here is the manual recipe for benefit of the thread archives:
Installing Leo on Windows

    Install Python from http://www.python.org/download/releases/

    Install either Tk or Qt, as described above.

    Install Leo. Get Leo’s .zip file from http://sourceforge.net/projects/leo/ You can unpack the .zip file anywhere, including Python’s site-packages folder, for example, C:\Python26\Lib\site-packages

    [optional] Generate/update a junction link from unpacked leo folder to ...\site-packages\leo:

    cd C:\Python26\Lib\site-packages\
    junction leo leo-4-6-2-final

    Create windows shortcut (edit paths as necessary):

    Target   =  C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py"
    Start in =  D:\code

    Associate .leo filetype batch file:

    ftype LeoFile=C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" "%*"
    assoc .leo=LeoFile

    [optional] Put this leo.bat in %PATH%:

    @C:\Python26\python.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" %*

For more information see:

Junction links:
    http://technet.microsoft.com/en-gb/sysinternals/bb896768.aspx,
    http://groups.google.com/group/leo-editor/msg/30116f9193241dc4
ftype:
    http://ss64.com/nt/ftype.html
assoc:
    http://ss64.com/nt/assoc.html


From http://leoeditor.com/installing.html#installing-leo-on-windows and 
http://www.maphew.com/How_To/Installing_Leo_Editor_on_Windows.html
</t>
<t tx="ekr.20130503155210.24826"># https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/leo$20script/leo-editor/ANPuhuEIU9c/8lgid9MNKkAJ

@language python
@tabwidth -4

'''Tell Windows how to handle .leo files, enables double clicking on them to open.

To run: in Leo make this the active node and press [Ctrl-B] (execute-script)

It opens a command shell and uses `assoc` and `ftype` commands to inform Windows
where python.exe and the Leo launch script is. It's the equivalent of:

    assoc .leo=Leo.File
    ftype Leo.File="B:\Python27\pythonw.exe" "B:\apps\leo-editor\launchLeo.py" "%1" %*   
       
Requires elevated User Account Control (UAC) priviliges.
See http://superuser.com/questions/88491/force-cmd-exe-to-run-as-admin/
'''

pyexe = g.sys.executable
leo = g.os_path_finalize_join(g.computeLeoDir(), '../launchLeo.py')

tmp = g.os.environ['TEMP']

assoc_cmd = 'assoc .leo=Leo.File'
ftype_cmd = 'ftype Leo.File="{0}" "{1}" "%1" %*'.format(pyexe, leo)

g.es(leo)
g.es(pyexe)

g.es(tmp)
g.es(assoc_cmd)
g.es(ftype_cmd)

from subprocess import Popen
Popen('start "Shell from Leo" cmd.exe /k "{0} &amp;&amp; {1}" '.format(assoc_cmd, ftype_cmd),

    cwd=tmp, shell=True)
</t>
<t tx="ekr.20130503155210.24827">@language batch

mkdir X:\testing
pushd X:\testing

wget -O apt.exe --no-clobber http://download.osgeo.org/osgeo4w/release/apt/apt-r1193M.exe
SET OSGEO4W_ROOT=%~dp0\root
apt setup
apt update
apt install pyqt4 sip

call root\osgeo4w.bat

wget --no-check-certificate http://gist.github.com/maphew/5393935/raw/install-pip.py
python install-pip.py GO
python install-pip.py GO

pip install -i https://testpypi.python.org/pypi leo-editor

python apps\Python27\Scripts\leo
</t>
<t tx="ekr.20130508084413.10645">For newbies (and for power users too, for that matter), it may be helpful to
have a "Find and Replace" dialog box similar to the one below:

.. image: c:/prog/findReplace.jpg

</t>
<t tx="ekr.20130510070942.10606"></t>
<t tx="ekr.20130510070942.10611">This would fix a reported bug.
</t>
<t tx="ekr.20130530110446.12450"></t>
<t tx="ekr.20130805080841.21380">https://groups.google.com/forum/#!topic/leo-editor/dmC8iIKlF7g
</t>
<t tx="ekr.20130805134749.12435">@language python

def but_quotes_at_the_end_of_a_triple_quoted_string_are_still_tricky(self):
    string = """Hello "world\""""
    
what
</t>
<t tx="ekr.20130806072439.20640">@language rest
</t>
<t tx="ekr.20130806072439.20643">From: HaveF &lt;iamaplayer@gmail.com&gt;

I used python xy before. After I finish install python xy, the leo is ready
to use.

Today I try EPD(https://www.enthought.com/downloads/), and install pyqt4 at
its package manager.

After that, I try to start Leo, it failed, but I success at last.

the batch file should be:

C:\\Users\\HaveF\\AppData\\Local\\Enthought\\Canopy\\User\\Scripts\\python.exe
D:\\lib\\leo\\leo-editor-snapshot\\launchLeo.py %*

not:

C:\\Users\\HaveF\\AppData\\Local\\Enthought\\Canopy\\App\\python.exe
D:\\lib\\leo\\leo-editor-snapshot\\launchLeo.py %*

or:

C:\\Users\\HaveF\\AppData\\Local\\Enthought\\Canopy\\System\\Scripts\\python.exe
D:\\lib\\leo\\leo-editor-snapshot\\launchLeo.py %*

===== From: HaveF &lt;iamaplayer@gmail.com&gt;

the tip is for install Canopy just for yourself (per-user install)
</t>
<t tx="ekr.20130806072439.20650">From: Winn Dixie &lt;incredible0n3@gmail.com&gt;

Would be stellar to have a brew install leo (for Mac OSX 10.7.X) with
possible built in options to install vim bindings.
</t>
<t tx="ekr.20130806072439.20664">From: Geoff Evans &lt;gtevansai@nl.rogers.com&gt;

The Leo installation instructions for Ubuntu still say merely "find
and install the debian package".
Can someone tell me where to find it?  Several minutes searching on
google has not got me anywhere.

===== From: Matt Wilkie &lt;maphew@gmail.com&gt;

Please try the instructions here and report if they are still relevant:
https://groups.google.com/d/msg/leo-editor/9yqhWD90Vtg/yCR8O_FBvIwJ ?

===== From: Geoff Evans &lt;gtevansai@nl.rogers.com&gt;

Excellent! Thanks very much Matt (and Ville for creating it). There was one
error message about a signature that could not be verified, and a syntax
error while compiling /usr/lib/pymodules/python2.7/leo/external/edb.py but
they haven't stopped leo from opening files from my previous computer. The
new one is running precise, in case it matters.

Minor supplementary question: What search strategy would have led me there
on my own? I agree that "Leo now apt-gettable" is perfectly understandable
once I see it (and indeed I have a vague memory of having seen it before),
but I don't know how I would have arrived at it without your help.

</t>
<t tx="ekr.20130806072439.20668">From: Matt Wilkie &lt;maphew@gmail.com&gt;

The leo script below _almost_ adds an icon to .leo files in Windows. I say
almost in that on my system it runs without error, the associated registry
key is created and contains the right path, but Windows still doesn't know
what to do with the file.

It's intended to be run after "create-leobat" has been run and the Leo.File
filetype is already present.

Anyone else have some ideas how to improve it?

thanks!

-matt


{{{
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) --&gt;
&lt;?xml-stylesheet ekr_test?&gt;
&lt;leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" &gt;
&lt;leo_header file_format="2"/&gt;
&lt;vnodes&gt;
&lt;v t="maphew.20130509185752.1607"&gt;&lt;vh&gt;Set icon for .leo files&lt;/vh&gt;&lt;/v&gt;
&lt;/vnodes&gt;
&lt;tnodes&gt;
&lt;t tx="maphew.20130509185752.1607"&gt;from _winreg import *
def register_leo_icon():
    '''Tell Windows what icon to use for the  Leo.File filetype (.leo)

    Resources:

http://stackoverflow.com/questions/2331690/how-to-set-a-icon-file-while-creating-file

http://stackoverflow.com/questions/771689/how-can-i-set-an-icon-for-my-own-file-extension
    '''

    icon = "%s\\Icons\\LeoDoc.ico" % g.computeLeoDir()

    g.es("\\nAttempting to register leo icon with .leo files...")

    if g.os_path_exists(icon):
        g.es("Found:", icon)
        myTestKey = OpenKey(HKEY_CLASSES_ROOT, "Leo.File")
        iconKey= CreateKey(myTestKey, "DefaultIcon")
        CloseKey(myTestKey)

        SetValue(iconKey, None, REG_SZ, icon)
        CloseKey(iconKey)
        g.es("Registered!")
    else:
        g.es("LeoDoc.ico not in expected location, can't continue.")
&lt;/t&gt;
&lt;/tnodes&gt;
&lt;/leo_file&gt;
}}}
</t>
<t tx="ekr.20130806072439.20669">From: Matt Wilkie &lt;maphew@gmail.com&gt;

http://bazaar.launchpad.net/~maphew/leo-editor/pypi-packaging/view/head:/register-leo.leos

QQQQ
Tell Windows how to handle .leo files, enables double clicking on them to
open.

To run: in Leo make this the active node and press [Ctrl-B] (execute-script)

Requires elevated User Account Control (UAC) privileges.
QQQQ

It is only lightly tested (one machine), but it seems to work. If
successful, it takes over the need for the assoc and ftype commands and
batch files which have been bobbing about lately (mostly be myself
admittedly).

It's stored in an @file instead of .leo in order to make it easier to track
in bazaar. Is there a naming convention for leo script files? I used .leos
for "leo script", but it occurs to me that .leox might be better (leo
executable) as it sidesteps the inadvertent pluralizing association.
</t>
<t tx="ekr.20130806072439.20670">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c1a67459191904dc5b8b8c


On Fri, May 10, 2013 at 4:03 AM, Matt Wilkie &lt;maphew@gmail.com&gt; wrote:

It's stored in an @file instead of .leo in order to make it easier to track
&gt; in bazaar.
&gt;

which .leo file?

Edward

--001a11c1a67459191904dc5b8b8c


&lt;div dir="ltr"&gt;On Fri, May 10, 2013 at 4:03 AM, Matt Wilkie &lt;span dir="ltr"&gt;&amp;lt;&lt;a href="mailto:maphew@gmail.com" target="_blank"&gt;maphew@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;
&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;It&amp;#39;s stored in an @file instead of .leo in order to make it easier to track in bazaar. &lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;which .leo file?&lt;br&gt;&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--001a11c1a67459191904dc5b8b8c--
</t>
<t tx="ekr.20130806072439.20671">From: Matt Wilkie &lt;maphew@gmail.com&gt;

Here is a Leo script which attempts to tell Windows how to handle .leo
files, enabling 2x-click "some-workbook.leo" to start. On win7+ it requires
Leo be started with elevated admin privileges.


{{{
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) --&gt;
&lt;?xml-stylesheet ekr_test?&gt;
&lt;leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" &gt;
&lt;leo_header file_format="2"/&gt;
&lt;vnodes&gt;
&lt;v t="maphew.20130429234409.2286"&gt;&lt;vh&gt;assoc leo&lt;/vh&gt;&lt;/v&gt;
&lt;/vnodes&gt;
&lt;tnodes&gt;
&lt;t tx="maphew.20130429234409.2286"&gt;pyexe = g.sys.executable
tmp = g.os.environ['TEMP']

assoc_cmd = 'assoc .leo=Leo.File'
ftype_cmd = 'ftype Leo.File="{0}" "%1" %*'.format(pyexe)

#g.es(pyexe)
#g.es(tmp)
g.es(assoc_cmd)
g.es(ftype_cmd)

from subprocess import Popen
Popen('start "Shell from Leo" cmd.exe /k %s &amp;amp;&amp;amp; %s' % (assoc_cmd,
ftype_cmd),
    cwd=tmp, shell=True)
&lt;/t&gt;
&lt;/tnodes&gt;
&lt;/leo_file&gt;
}}}

</t>
<t tx="ekr.20130806072439.20672">From: Matt Wilkie &lt;maphew@gmail.com&gt;

whups, sent before ready!

to use select and copy text between braces, {{{  }}}, into a Leo outline,
select the new node and press Ctrl-B.

adapted from
http://stackoverflow.com/questions/8985925/how-to-control-what-version-of-python-is-run-when-double-clicking-a-file/

-matt

</t>
<t tx="ekr.20130806072439.20677">On Monday, 15 April 2013 13:06:39 UTC-7, Matt Wilkie wrote:

Installing pip on Windows is easy enough, but involves silly monkey work
(install this pre-requiste, copy this text and paste it there, twiddling
X,Y,Z for your machine. etc.) It's easy to make small stupid mistakes that
make one have to repeat parts of the operation. So I automated installing
pip all in one go. Nothing but an available python interpreter is required
(and an internet connection).

http://www.maphew.com/2013/install-pip-script/
</t>
<t tx="ekr.20130806072439.20679">@language python

@ Matt Wilkie &lt;maphew@gmail.com&gt;

Here is a recipe using the pip python installer, that adds docutils to
python 3 in about 5 minutes. Ideally the same template/process would be
extended for all of Leo, and wrapped up in a nice package.

Depends on win32 `curl.exe` being available,
http://curl.haxx.se/dlwiz/?type=bin&amp;os=Win32&amp;flav=-&amp;ver=-

There are lots of scary looking warnings and messages emitted to the
console, mostly about unicode and files looked for and not found. A couple
of places I needed to tap [enter] (with no prompt saying that was
necessary). At the "install docutils" stage there was a long pause with
nothing apparent happening, perhaps 3 minutes.

The command shell was a generic windows cmd.exe shell with no python
variables set (e.g. PYTHONPATH, PYTHONHOME, etc.)

Recipe adapted from http://trac.osgeo.org/osgeo4w/wiki/ExternalPythonPackages
@c

pushd c:\\python32

:: test for docutils
python -c "import docutils; dir(docutils)"

::Traceback (most recent call last):
::  File "&lt;string&gt;", line 1, in &lt;module&gt;
::ImportError: No module named docutils

:: install python `distribute`
curl http://python-distribute.org/distribute_setup.py | python

:: install pip
curl --insecure https://raw.github.com/pypa/pip/master/contrib/get-pip.py |
python

::install docutils
.\\scripts\\pip.exe install docutils

:: test that docutils is available
python -c "import docutils; help(docutils)"

::Help on package docutils:
::
::NAME
::    docutils - This is the Docutils (Python Documentation Utilities)
package.
::
::DESCRIPTION
::    Package Structure
::    =================
::: ...snip...
</t>
<t tx="ekr.20130806072439.20683">From: Matt Wilkie &lt;maphew@gmail.com&gt;

Can someone on linux please test whether

   pip install -i https://testpypi.python.org/pypi leo-editor

successfully installs a working Leo on their system?

You can use `virtualenv` to create an isolated test environment
http://www.virtualenv.org/en/latest/ if needed.

===== From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

seemed to work for my in a fresh python 3.3 virtualenv

i.e.
import leo
leo.run()
ImportError: No module named 'PyQt4'

so in the shell

cp -rv /usr/lib/python3/dist-packages/PyQt4 p3/lib/python3.3/site-packages/
cp -rv /usr/lib/python3/dist-packages/sip* p3/lib/python3.3/site-packages/

and then the above worked.

remember also:

https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/Runnable$20Leo$20in$20one$20.zip$20file./leo-editor/jnpkrQeo9Hk/Ds3QsUe1W-QJ

including HansBKK's good point.

===== Matt

The take away is that there is a pure python method to install pip, which
in turn can easily install Leo and docutils, meaning the two don't have to
be bundled.

There is still more work to do get PyQt + SIP install automated in a way
that integrates nicely with Start Menu etc., but we have proof of concept
that it is possible.

At the very least we have a recipe that can easily build a complete ready
to run all-in-one zip bundle for Windows. I'll work on this next, and then
dig more into the pyqt+sip aspect.

</t>
<t tx="ekr.20130806072439.20686">From: "kevin@ksvanhorn.com" &lt;kvanhorn@ksvanhorn.com&gt;

The instructions for installing Leo on Mac OS X 10.7 Lion say to run

/usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"

Actually, that doesn't work. If you run the curl command by itself,
you get a message that the script has moved to

https://github.com/mxcl/homebrew/blob/master/Library/Contributions/install_homebrew.rb

That actually gives you a web page instead of the script itself. I
ended up doing a copy and paste from the script shown on that page
into a newly created file, then running the script.
</t>
<t tx="ekr.20130806072439.20687">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Fri, Apr 6, 2012 at 12:51 AM, kevin@ksvanhorn.com
&lt;kvanhorn@ksvanhorn.com&gt; wrote:
&gt; The instructions for installing Leo on Mac OS X 10.7 Lion say to run
&gt;
&gt; /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"
&gt;
&gt; Actually, that doesn't work. If you run the curl command by itself,
&gt; you get a message that the script has moved to
&gt;
&gt; https://github.com/mxcl/homebrew/blob/master/Library/Contributions/install_homebrew.rb
&gt;
&gt; That actually gives you a web page instead of the script itself. I
&gt; ended up doing a copy and paste from the script shown on that page
&gt; into a newly created file, then running the script.

Thanks for this detailed report.  I'll look into it soon.

Edward
</t>
<t tx="ekr.20130806072439.20688">From: "JohnKStevenson@gmail.com" &lt;john.k.stevenson@gmail.com&gt;

Here is the question I posed and then sent to a user rather than the
qroup:

The instructions at Ed Ream's site, say to use brew to load pyqt and
sip, actually they don't say to load sip.

Why would the order be important? Are they not individual packages?

After failing to get it to run following the instructions,
I loaded QT from Troll Tech and it still failed.

My system:
 Xcode 3.2.6
 Python 2.6.1 is installed.
 gcc 4.2.1  is installed.
 QT installed under Developer/Tools and Developer/Applications
-- Clean /usr/local
-- chown -R me:admin /usr/local
-- Install homebrew

---  /usr/bin/ruby -e "$(curl -fsSL https://raw.github.com/gist/323731)"

Brew 0.9 is installed.
---       brew update

-- Install PyQT
--- brew install pyqt
pyqt-4.9.1 installed
---  brew install sip
sip-4.13.2 installed
--  Added to path, (.bash_profile)
 --- export $PYTHONPATH=/usr/local/lib/python:$PYTHONPATH

-- unzipped leo-4.10 somewhere
-- ran the script element "python launchLeo.py --gui=qt $1" result:
"no such option --qt"

I really wish there were a simple script or brew thing to load this
tool.

It seems that most "Leo People" are using Windoze or Linux, but Mac
people need good outlining too. (Bring in the CLONES!)

David Humphrey responded, thanks David, but still no joy.
</t>
<t tx="ekr.20130806072439.20689">From: David Humphrey &lt;david@dlkeh.net&gt;

John,

I'm definitely not a Qt specialist (or Leo specialist either), but I
wonder if your PyQt installation is working correctly.  Try importing
PyQt4 as Leo does and see if any error messages appear.  Here's how it
looked on my machine:

Deviant:~ dlh$ python
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34)
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import PyQt4.QtCore
&gt;&gt;&gt; import PyQt4.QtGUI
&gt;&gt;&gt;

i.e., clean imports, no complaints.  While this will only provide
clues, they might be enough to help move forward.

I find this same lack of support with other apps, e.g, Wikidpad, but,
let's face it: There are a lot more Windows and Linux boxes running
these non-commercial apps than OS X boxes.
</t>
<t tx="ekr.20130806072439.20690">From: Ludwig Schwardt &lt;ludwig.schwardt@gmail.com&gt;

--4fa8f601_7f01579b_93

Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hi John, 

I wrote the original instructions for using Homebrew to install Leo on the Mac. Unfortunately those instructions are a bit outdated by now. From your description I only see one problem: the PYTHONPATH you added to .bash_profile has changed to

export PYTHONPATH=3D/usr/local/lib/python2.6/site-packages:$PYTHONPATH

This is mentioned by brew after you install sip - reinstall sip to verify the correct incantation for you (I assume you are using Python 2.6 - change to python2.7 if necessary).

To answer some of your questions: pyqt depends on qt and sip, therefore installing the pyqt package will automatically install the rest. I've installed them separately in the instructions below to pick up the correct PYTHONPATH setting.

Here is a summary of what I did today on a reasonably clean Lion system to get Leo working (maybe Ed can put this on the web site):

- Read the Homebrew installation instructions at
  https://github.com/mxcl/homebrew/wiki/Installation

- Make sure you have Xcode installed (test it by confirming
  that "gcc" runs in the Terminal). You can either get the full
  Xcode beast or the lean-and-mean Command-Line Tools
  for Xcode, as suggested in the Homebrew installation
  instructions.


- In preparation for Homebrew, the best option in my opinion is
  to delete /usr/local via::

  sudo rm -rf /usr/local

  and install any software in it via Homebrew instead. If this step
  fills you with dread and you do not want to lose your beloved
  third-party software, the second-best option is to make sure you
  have write permission for the directory via::

  sudo chown -R &lt;your user name&gt;:admin /usr/local

  If you don't know your username, run "whoami". :-) This is
  useful because homebrew actually discourages you from
  installing third-party software as the superuser (the usual Mac
  apps in /Applications are also installed as the normal user,
  for that matter).


- Install Homebrew (http://mxcl.github.com/homebrew/) by running
the following command in the Terminal::


  /usr/bin/ruby -e "$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)"

- Run "brew doctor" and check any further suggestions to improve
your system.


- Run "brew update" to get the latest formulas

- Install sip and note the caveat::

  brew install sip

  This warns you to add the local python directory to your PYTHONPATH.
  Make a note of what this is (especially if you are not on Lion!).

- Add the following lines to your ~/.bash_profile
  (or ~/.profile on Leopard) - this is the default for LION::

  export PATH=3D/usr/local/bin:$PATH
  # This is for SIP (and PyQT) as suggested by Homebrew
  export PYTHONPATH=3D/usr/local/lib/python2.7/site-packages:$PYTHONPATH

- Install PyQT::

  brew install pyqt
 

- Open a new Terminal tab / window so that the above settings
  take effect, and install Leo. I downloaded the Leo-4.9-final-a.zip,
  unzipped it, and ran "python launchLeo.py" inside the Leo
  directory.


It would really be great to get a Leo formula going for Homebrew=85 As mentioned before, the main question is just where to place all the Leo files in the /usr/local hierarchy.

Regards,
Ludwig
</t>
<t tx="ekr.20130806072439.20691">From: "JohnKStevenson@gmail.com" &lt;john.k.stevenson@gmail.com&gt;

Many thanks to Ludwig Schwardt, he identified the missing element of
the $PYTHONPATH, for Snow Leopard it is "export PYTHONPATH=/usr/local/
lib/python2.6/site-packages" . Since I had an incorrect pythonpath, I
just set it. Once set, leo works.
It would be nice to have a script to install Leo.
The directory structure and placement should be the same as Linux?

I have not used Leo for a number of years, so this is a good reunion,
thanks all.
</t>
<t tx="ekr.20130806072439.20707">@language rest

Edward, Ville, please pay attention to this message even if just nodding at
the others passing by.

&gt;pip install -i https://testpypi.python.org/pypi leo-editor

I built and uploaded to this package to the pypi testing server. Other than
the fact it seems to work in so far as it installs without spewing errors
I've no idea if it was done properly. Or even if it was appropriate for me
to build a leo package. This is the first pypi package I've built.

The package page: https://testpypi.python.org/pypi/leo-editor/4.10-final

I'll upload the changed `setup.py` and the build recipe I used for your
inspection after I re-learn how to create a branch and issue a pull/merge
request in bazaar.


===== Matt

https://code.launchpad.net/~maphew/leo-editor/pypi-packaging/+merge/159561

Description of the Change

Updated `setup.py` for Leo-4.10-final, added "Classifiers" as made sense to
me. The resultant source build package was uploaded to the testing Python
Package Index server, from which `pip install leo-editor` is successful.

A windows binary distribution build does not appear to be necessary.

Known limitations: __py-cache__ files are included, but shouldn't be.

===== Matt

The created .zip file:

Here is the result of that recipe, with some very small hand edits,
packaged up in an all-in-one ready to go portable Leo zipfile (52mb).
Simply unpack somewhere and run Leo.bat.

https://googledrive.com/host/0BxjYoJ7VMm5VbE11NHM3Q3RIRVk/
</t>
<t tx="ekr.20130806072439.20712">From: Matt Wilkie &lt;maphew@gmail.com&gt;

&gt;call root\\osgeo4w.bat

Adds ...\\bin (for python) and ...\\apps\\python27\\scripts (for pip) to PATH,
and sets PYTHONHOME.

&gt;wget --no-check-certificate
http://gist.github.com/maphew/5393935/raw/install-pip.py
&gt;python install-pip.py GO
&gt;python install-pip.py GO

Download and install `distribute` and `pip`, the python tools which enable
automated downloading and installing of programs and modules from the
Python Package Index. `install-pip.py` is of my own devising. All it does
is reduce the dependency on curl or wget by one step, using native urlib
(py3) or urllib2 (py2) instead.

   http://pythonhosted.org/distribute/
   http://www.pip-installer.org/en/latest/
   https://pypi.python.org/pypi

&gt;pip install -i https://testpypi.python.org/pypi leo-editor

Install Leo (more background for this one in next message).

&gt; python apps\\Python27\\Scripts\\leo

All done, let's run Leo! :)
</t>
<t tx="ekr.20130806072439.20722">From: Matt Wilkie &lt;maphew@gmail.com&gt;

Use the `apt` command line package management tool from Osgeo4w
http://trac.osgeo.org/osgeo4w/ to install python and all the other
requirements that can't be installed with `pip` or `easy_install`, meaning
PyQt and SIP.

The resultant dir structure follows a cygwin model, which in turn follows
linux:

    \\apps\\Python27 - python libraries, site-packages, etc. This is PYTHONHOME.
    \\bin - exe's and dll's, including python.exe, qt*.dll, etc.

There are also `etc, include, lib, var` which can all be discarded, unless
you intend to use apt again or other programs from the osgeo4w ecosystem).
`var` in particular you might want to clean out, it is the local cache for
apt downloaded packages.


===== Whoa, apt on windows, cool.

Thanks! It's been the gravity well powering my plunge into python. It's a
testament to python's power that it enables someone like me, with no
programming background, to build something that does real work.

The original genius is Jan Nieuwenhuizen, who wrote `cyg-apt` in python but
made lots of calls to bash and tools like tar and curl. All I've done is
take each function and convert them as best I could to pure python, to the
point where it now has zero dependencies on cygwin (though it does still
use the cygwin package and mirror structure).

More history and details at http://trac.osgeo.org/osgeo4w/wiki/pkg-apt
</t>
<t tx="ekr.20130806072439.20723">EKR: This appears to be some weird key-related problem with Leo 4.10.

===== From: vili &lt;viljem.tisnikar@gmail.com&gt;

Installing (a new version) of Leo was allways a bit of challenge for
me. As a non-programmer I use Windows, I like automatic installers,
and I don't quite understand what binaries and other stuff is.

Today I wanted to upgrade from 4.9 to Leo-4.10-final, which is the
latest exe on SourceForge but I figured out that

Leo-4.10-final does not save any changes made to the file and it doesn't save also any new files!

I tried also with "a nightly snapshot from Leo's snapshots page" - the
same story. I reinstalled python and qt, but still the same problem. I
installed back the 4.9 version from SourceForge and that worked fine
again.

Some data from log:
Leo 4.10 final, build 5020, 2012-02-26 13:18:08 -0600
Python 3.2.3, qt version 4.8.0
Windows 6, 1, 7601, 2, Service Pack 1

Its kind of weird for me that no one reported this problem earlier.


===== From: Raj &lt;dsrajesh@gmail.com&gt;

I faced the same problem as well and my configuration is exactly
identical to yours.

Workaround I did was start the leo from command line::

C:\\Python32\\python.exe "C:\\Python32\\Lib\\site-packages\\Leo-4.10-final\\launchLeo.py"

Default is to start the pythonW.exe, which does not work for some reason
still trying to identify why it is behaving this way. Now I am able to save
like before.

===== From: Viljem Tisnikar &lt;viljem.tisnikar@gmail.com&gt;

This workaround of yours works for me also! It is not comfortable at all,
but it works!

===== From: Eoin &lt;eoinmccarthy@fastmail.fm&gt;

I also experienced this issue today after upgrading from Leo 4.8-final to
Leo 4.10-final.

The workaround still does the job.

===== From: Matt Wilkie &lt;maphew@gmail.com&gt;

To my knowledge this is the first report of this kind of issue. I
can't think of any explanation for this other than file permissions
(but I don't understand very much about how Leo works either; my
programming skills are very minimal).

Have you tried creating a new .leo file from scratch and saving it?

===== From: Viljem Tisnikar &lt;viljem.tisnikar@gmail.com&gt;

Yes, I have. It does not save.

===== Matt

And does the log window have any warnings or error messages?

===== From: Viljem Tisnikar &lt;viljem.tisnikar@gmail.com&gt;

No, in log window nothing happens when I pres "ctrl-s". And of course the
star near the name of the file does not disappear.

</t>
<t tx="ekr.20130806072439.20730">From: Matt Wilkie &lt;maphew@gmail.com&gt;

I've just uploaded Leo-4.11-devel-build-5769 to the Python Package Index:
https://pypi.python.org/pypi/leo

(todo: fix the readme, which is for 4.10, the 4.11 version remains to be
written)

It can be downloaded from there and installed manually or, better yet,
installed with `pip install leo`.

Pre-requisites are:

1. Python
2. PyQt
3. Distribute / Setuptools

Improvements over previous pypi package:

 - Sports Leo splash screen while installing on Windows

 - Installs "leo" and "leoc" wrappers to PYTHONHOME\\Scripts, so as long as
this directory is in PATH you don't need to create your own launcher (this
is the part that requires Distribute. I'm working an way to include this
automatically, http://stackoverflow.com/questions/16702658). It is common
for this to be set.

- all the other changes in trunk over the last couple of weeks (
http://bazaar.launchpad.net/~leo-editor-team/leo-editor/trunk3/changes)
</t>
<t tx="ekr.20130806072439.20732">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Summary - it's easy to make a .zip file containing Leo and all it's
dependencies.

Inspired by Matt's recipe, using VirtualBox throw away 1GB Windows XP
32 bit machines, I tried the following.

Install Python (installer from python.org) 2.7.2 to 

  C:\\Docouments and Settings\\someuser\\Desktop\\leo\\python27

Install PyQt (installer from Riverbank) 4.9 into the same folder (it
goes there by default)

Unzip http://www.greygreen.org/leo/leo-editor-latest.zip into

  C:\\Docouments and Settings\\someuser\\Desktop\\leo\\leo-editor-latest

Make leo.zip from C:\\Docouments and Settings\\someuser\\Desktop\\leo

Delete the virtual machine, purging any registry entries etc. created
by the two installers.

On a fresh machine, searched the registry for 'python' just to be sure,
found nothing.

Unzip the .zip file, then

  cd C:\\Docouments and Settings\\someuser\\Desktop\\leo
  python27\\python.exe leo-editor-latest\\launchLeo.py

And Leo opens a blank outline, after asking for an ID, as it's supposed
to.  Didn't test it beyond that.

So, the .zip file contains all Leo needs to run, and obviously
runLeo.bat could be added in the top level to actually launch it.

Of course this is for Windows, so I think it's an improvement over
asking people to install Python and PyQt first, but neither of those
steps was that hard in Windows anyway.

===== EKR

Is this a technique that we could use for official Windows releases?
If so, what exactly would we do?

===== Terry

I guess, perhaps as an all-in-one option with a system integrated
option for those who want to use system python/qt.  Don't know if it
violates and licensing on Python / Qt, everything's being distributed
unaltered, so I wouldn't think so.

So basically you'd give people a large .zip file and tell them to
extract it to a folder and run the batchfile at the top level.  If they
can't do that, they might not be ready for Leo :-)  I guess you could
make it a self-extracting .zip, for that matter.

Also, the daily snapshot could be made this way, seeing once Python and
Qt are installed in the folder the Leo version can just be copied in.

It's not uncommon for FLOSS to be distributed this way, both Blender
and Inkscape use this approach, particularly for recent builds.

===== From: HansBKK &lt;hansbkk@gmail.com&gt;

If something like this **is** done, it should IMO be packaged as an
alternative to the normal installation procedure.

You would definitely get marketing exposure by getting the specs from
PortableApps.com and let them host it there as  "Portable Leo", tracking
the "official" Portable Python (currently 2.7.2) as a dependency, obviously
including QT etc as well. But it would need to be kept up to date. . .

Most Windows users would be better served by following the normal
installation procedure and ending up with a
registry-and-environment-variables-complete install of Python et al which
they can use for other things beyond Leo. Ending up with multiple instances
of Python to maintain is likely to cause more problems.

And the normal Windows install just isn't that hard, really! Improving the
current instructions, by providing a step-by-step "cookbook" with direct
links to the download packages etc might make it a **little** easier (IMO
only for the clueless), but then of course that would be a doc that would
need pretty frequent updates, which if I may be so bold doesn't seem to
happen too quickly on the doc side.
</t>
<t tx="ekr.20130806072439.20736">From: Matt Wilkie &lt;maphew@gmail.com&gt;

Since this topical today, almost a year later, I thought I'd take a run at 
repeating this using Portable Python (http://www.portablepython.com) as a 
base. It didn't work, but I think it should. Maybe someone else knows why. 

I ran the installer for 2.7.3 since 3.2 doesn't include PyQt4. At install 
time I selected only the Python and PyQt4 packages. Then from a fresh 
command shell:

{{{
path=c:\\windows;c:\\windows\\system32
pushd x:\\portapy27\\App
path=%cd%;%cd%\\Scripts;%cd%\\Lib\\site-packages\\PyQt4;%path%
set pythonhome=%cd%
set pythonpath=%cd%\\Lib

popd

python --version
Python 2.7.3

python -c "import PyQt4"
:: no error returned, we're good.

python c:\\apps\\leo-editor-latest\\launchLeo.py
Leo requires Qt to be installed.
}}}

oh well.
</t>
<t tx="ekr.20130806072439.20744">From: HansBKK &lt;hansbkk@gmail.com&gt;

&gt; PortableApps version would be FANTASTIC!!

A couple of versions have been posted here already, including Terry's very
simple sequence in the first message of this thread. Of course, we're only
talking about Windows, but note that it works equally well either syncing
with whatever tool (I favor Unison over SSH) or carrying around on an
arbitrary-path'd external device, including flash drives (but they can be
slow).

Here's my more robust (hence more complex) version, xx indicating your 
python version (mine is 27):

Use the normal .MSI, setup.exe etc processes to Install a clean "canonical" 
version of your "python dev stack" to say C:\\PythonXX, reboot if needed, 
test thoroughly. Note any new environment variables pointing to your new 
binary locations.

Now create a corresponding PythonXX folder in your "PortableApps" location 
(I put it under "CommonFiles" along with GTK and Java) and copy everything 
from your installed location to the portable one.

You can then use the project-provided tools on the "master" computer to 
keep your binaries updated, and they will see any local Registry entries 
and the environment variables they created and operate normally wrt your 
installed location (e.g. C:\\PythonXX).

If you have a local folder sync tool (I use Unison and WinMerge) you can 
add to/remove from/configure your Python environment from either location, 
otherwise just keep your installed location as the "master" and just copy 
the whole stack over each time you do so.

The whole PortableApps tree can then be sync'd/copied to any other 
desktop(s) you like, either over the wire or via an external device, and 
the latter can be carried for use in say an Internet cafe or client-site 
situation.

====================

For use on those other computers, for running in portable mode, I use a
"portable start menu" (PStart) which allows for its own "autolaunch" batch
files, where I set some global environment variables to be used by
app-specific launch batch files, including :

%Path% (I add my batch folder and a general utility/tools folder)
%HOME% (usually "E:\\aasync\\Data\\H_HOME"
and a custom one called %h_pa%, which points to the root of my PortableApps 
parent (usually "D:\\aasync\\PortableApps")

Then for each environment that requires its own custom settings, I create a 
launch batch file that builds on that base. In the case of Python apps, 
here's an example that opens a CMD console window:

@ECHO OFF
set 
PATH=%PATH%;%h_pa%\\CommonFiles\\Python27;%h_pa%\\CommonFiles\\Python27\\Lib\\site-packages\\PyQt4;%h_pa%\\CommonFiles\\Python27\\Lib\\idlelib;%h_pa%\\CommonFiles\\Python27\\Scripts;
set PROMPT=$p_python$g
E:
cd \\aasync
CMD.exe

I'm not sure which if any of the environment stuff Leo requires, but I 
figure it might as well have the same environment as my Python CLI, since 
I'll be testing shell integration, including iPython. In my leo-win.bat, 
the last three lines above are replaced with:

D:
cd \\aasync\\PortableApps\\leo-editor
start "" "..\\CommonFiles\\Python27\\pythonw.exe" 
"..\\CommonFiles\\Python27\\Lib\\site-packages\\leo-editor4\\launchLeo.py" %*

====================

Note this is more than the minimum you need to just run Leo - you could of 
course simplify it; for example, only set the environment variables Leo 
requires, or you could just set the master computer' installation routines 
to use a single location under PortableApps, but I prefer to keep them 
separate for testing purposes.

I hope you (and others googling this later) find this useful.
</t>
<t tx="ekr.20130806211959.17306">@language rest
</t>
<t tx="ekr.20130806211959.17307"></t>
<t tx="ekr.20130806211959.17308">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The more I think about it, the more I think Leo needs an automated playback 
capability.  I had some initial thoughts in the thread, "PyOhio Leo Video 
up on youtube", 
https://groups.google.com/forum/?fromgroups=#!topic/leo-editor/nmBweM3wI3o.

There as several immediate applications for automated playback:

1. As a helper for those preparing demos of Leo.  It eliminates the need to 
think, talk and type at the same time ;-)  The hope is that the narrator 
would be more comfortable and relaxed during the recording, but perhaps 
that is wishful thinking.

2. As an automated, scripted, demo of what Leo can do.  You could even 
imagine the quickstart.leo would "create itself" when it was opened.  You 
would simply need to start the demo when the file was opened!

As I was thinking about playback, I considered how the playback would draw 
attention to various parts of the screen.  In other words, we need 
something akin to the big red arrows in the Leo slideshows. One easy way to 
do this would be with a DialogWithImage call, that would pop up a dialog 
showing, say, a magnified image of a dirty icon box.  Depending on options, 
the dialog might go away after a few seconds, or remain until the use hits 
any key.

The main question is, how easy will it be to create and edit playbacks?  
I'm not sure.  Any such playback capability would essentially be a 
(detailed!) script.  We can imagine a script that is essentially Python:  
Something like:

goto_sibling_node(&lt;&lt;node name&gt;&gt;)
dialog(&lt;&lt;dialog name&gt;&gt;,&lt;&lt; when dismissed&gt;&gt;)
edit_headline
type_individual_letters('This is the headline',&lt;&lt;delay between letters&gt;&gt;)
type_text('This is the headline')
insert_sibling_node()
insert_child_node()
select_find_tab()
etc! etc!

Leo already has most of the capability go generate this as we use Leo:  
it's the so-called "lossage" history in k.masterKeyHandler.  I'm thinking 
that there is no urgent need to capture the mouse: we might as well 
demonstrate mouseless Leo!

Actually, we might forgo capturing actions altogether, and just write the 
script directly.  We'll have to see whether that makes sense.

Your comments, please, Amigos.

Edward

</t>
<t tx="ekr.20130806211959.17309">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Wednesday, September 12, 2012 3:12:52 PM UTC-5, Edward K. Ream wrote:
&gt;
&gt; The more I think about it, the more I think Leo needs an automated 
&gt; playback capability. 
&gt;
... 

&gt; The main question is, how easy will it be to create and edit playbacks? 


Rev 5432 provides some answers.  test.leo contains the node, "Prototype of 
screencast script".  It took many hours of happy experimentation to get the 
script to work, but the results are worth all the futzing.  Here is the 
first script::

    s = p.b # This script.
    c = c.new()
    p = c.p
    p.h = ''
    n1,n2 = 0.01,0.2 # Small difference are important.
    head_keys('This is headline text',n1,n2)
    body_keys('This is some body text.\\n',0.0,0.0) # n1,n2)
    body_keys('Some more body text.\\n',0.0,0.0)
    body_keys(s,0.0,0.0)

The head_keys and body_keys (not shown) simulate typing, with a range of 
typing speed indicated by the n1 and n2 params.  The result is really fun 
to watch.  As you will see, there is a wait method that waits a variable 
number of seconds.  This will be useful in other contexts.

This is the most fun I've had in quite awhile. It's becoming clear that 
being able to generate screencasts from scripts will be an excellent tool 
for those trying to explain Leo.  Imo, creating screencasts from such 
scripts will be *much* simpler than making slideshows.

I've got lots of ideas for improvements to screencasts.  I should have 
something pretty cool to show in a week or so...

Edward

P.S.  The head_keys and body_keys methods cost me a *lot* of work.  It's 
tricky to show the typing immediately without flash.  These are the first 
of several planned helper methods for use in screencasts::

     def head_keys(s,n1=0.04,n2=0.1):
        import leo.core.leoGui as leoGui
        p = c.p
        tree = c.frame.tree
        c.editHeadline()
        w = tree.edit_widget(p)
        for ch in s:
            p.h = p.h + ch
            tree.repaint() # *not* tree.update.
            wait(n1,n2)
            event = leoGui.leoKeyEvent(c,ch,ch,w,x=0,y=0,x_root=0,y_root=0)
            c.k.masterKeyHandler(event)
        c.frame.tree.repaint()
        c.redraw()

    def body_keys(s,n1=0.04,n2=0.1):
        c.bodyWantsFocusNow()
        p = c.p
        w = c.frame.body.bodyCtrl.widget
        for ch in s:
            p.b = p.b + ch
            w.repaint()
            wait(n1,n2)
        c.redraw()

EKR

</t>
<t tx="ekr.20130806211959.17310">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;




On Friday, September 14, 2012 8:54:42 AM UTC-5, Edward K. Ream wrote:
&gt;
&gt;
&gt; Rev  5434 packages this into the new screencast plugin.  Yesterdays work, 
&gt; in screencast.py and the node "@command screencast @key=Alt-9" in test.leo 
&gt; taught me several things.  In the notes below, m is an instance of 
&gt; ScreenCastController.  m stands for "movie" :-)
&gt;

Screencasts promise to be easy to be *much* easier to create than 
slideshows, while also being more interesting, informative and flashy.  It 
is *so* much easier to write a screencast script than it is to lay out a 
slide, take a screenshot, and then manage resulting slide.

In particular, there are few continuity problems with screencasts.  
Continuity is a *huge* problem with slideshows!  If I change one slide, I 
am likely to want to change all following slides.  Which means I have to 
retake all the slides, and file the new versions in the proper places.  In 
contrast, any changes to screencasts naturally propagate forward.  There 
might be an effect on following screencasts scenes, but this will happen 
rarely with a reasonable scene design, and any problems should be easy to 
fix.

With screencasts, the *movie* script is also the *python* script!  There is 
no "translation" from one to the other.  Furthermore, all the work to 
produce a screencast is done (naturally!) within Leo.  No need to create 
and manage external data.  This is another huge advantage and it make 
producing screencasts much faster than producing slideshows.

Screencasts are likely to be the long-awaited tools that will allow me to 
show Leo in action so that other will finally be able to understand it 
easily.  This is an exciting prospect!

Edward

</t>
<t tx="ekr.20130806211959.17311">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;



On Fri, Sep 14, 2012 at 9:54 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Wednesday, September 12, 2012 10:57:35 PM UTC-5, Edward K. Ream wrote:
&gt;
&gt;     test.leo contains the node, "Prototype of screencast script".  It took
&gt; many hours of happy experimentation to get the script to work, but the
&gt; results are worth all the futzing.
&gt;
&gt; Rev  5434 packages this into the new screencast plugin.  Yesterdays work,
&gt; in screencast.py and the node "@command screencast @key=Alt-9" in test.leo
&gt; taught me several things.  In the notes below, m is an instance of
&gt; ScreenCastController.  m stands for "movie" :-)
&gt;
&gt; 1. It's probably best to not to open a new Leo window for screencasts.
&gt; This avoid problems with w.repaint occurring in a another repaint
&gt; operation, thereby freezing Leo.  This is not a major constraint: we
&gt; typically will want to have screencasts operate on the local .leo file.
&gt;
&gt; 2. I spent a lot of time trying to adjust the delay between
&gt; "transitions".  The arguments to m.wait specify the range of waiting
&gt; allowed.  The plugin multiplies these nominal factors by a **speed
&gt; factor**, initially 1.0.  m.set_speed sets this factor. To double the
&gt; presentation speed, set the factor to 0.5.
&gt;

This seems strange. In my intuition, if you want to double the speed, the
factor should be 2.0. (use new_factor = 1.0/old_factor instead?)

</t>
<t tx="ekr.20130806211959.17312">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Friday, September 14, 2012 9:31:33 AM UTC-5, HaveF wrote:
&gt;
&gt;
&gt; 2. I spent a lot of time trying to adjust the delay between 
&gt;&gt; "transitions".  The arguments to m.wait specify the range of waiting 
&gt;&gt; allowed.  The plugin multiplies these nominal factors by a **speed 
&gt;&gt; factor**, initially 1.0.  m.set_speed sets this factor. To double the 
&gt;&gt; presentation speed, set the factor to 0.5.
&gt;&gt;
&gt;
&gt; This seems strange. In my intuition, if you want to double the speed, the 
&gt; factor should be 2.0. (use new_factor = 1.0/old_factor instead?)
&gt;

But then how do you set the wait to zero? :-)

Anyway, it's a minor point: now that manual play is coming the speed factor 
will not be important.

EKR

</t>
<t tx="ekr.20130806211959.17313">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Wednesday, September 12, 2012 10:57:35 PM UTC-5, Edward K. Ream wrote:

    test.leo contains the node, "Prototype of screencast script".  It took 
many hours of happy experimentation to get the script to work, but the 
results are worth all the futzing. 

Rev  5434 packages this into the new screencast plugin.  Yesterdays work, 
in screencast.py and the node "@command screencast @key=Alt-9" in test.leo 
taught me several things.  In the notes below, m is an instance of 
ScreenCastController.  m stands for "movie" :-)

1. It's probably best to not to open a new Leo window for screencasts.  
This avoid problems with w.repaint occurring in a another repaint 
operation, thereby freezing Leo.  This is not a major constraint: we 
typically will want to have screencasts operate on the local .leo file.

2. I spent a lot of time trying to adjust the delay between "transitions".  
The arguments to m.wait specify the range of waiting allowed.  The plugin 
multiplies these nominal factors by a **speed factor**, initially 1.0.  
m.set_speed sets this factor. To double the presentation speed, set the 
factor to 0.5.

The m.log call writes a message to the log pane, with calls to m.wait(1) 
before and after inserting the text.  Both waits are important.  The 
"opening" wait allows the user to see the effect of the previous operation; 
the "closing" wait allows the user to read the new comment in the log pane 
before the next operation happens.

3. The futzing with speed and waits convinces me that specifying waits "by 
hand" isn't good enough.  Pre-specified waits will be useful only for an 
**unattended mode** that just plays the screencast from start to finish.  
But for most presentations we want the presenter to switch from one 
**scene** of the movie to the next by hitting the RightArrow key.  The 
LeftArrow key will go back to the previous scene. Thus, in **attended 
mode**, most calls to m.wait will have no effect.  (An exception will be 
the calls to m.wait in the code the simulates a person typing in headline 
or body text.  Thus calls should always have effect, so we will have a 
"force" arg to m.wait.)

It will be relatively straightforward to do the first draft of attended 
mode.  At the programming level, it will work like any minibuffer command 
that prompts for user input.  That is, the plugin will create a so-called 
state handler for the slideshow.

At the design level,  the main idea is to treat every node under the main 
@screencast node as a scene.  This natural division allows the screencast 
to organize the material using all of Leo's organizational capabilities.

The state handler will, when seeing the RightArrow key, "play" the next 
scene merely by moving to the next node and then executing the script in 
it's body text.  This script could contain *any* Leo script, but most often 
it will call ScreenCastController methods.   Moving to the previous scene 
can be done by Leo's undo command, automatically managed by the 
ScreenCastController.  This will be a bit tricky, but not hugely so.

4. Putting comments in the log pane is ok for a prototype, but it's pretty 
lame.  Instead, I'd like to use some kind of popup that can be associated 
with individual items on the screen and located with precision relative to 
those items. The popup should be able to contain both text and graphics. 
Does anyone have a suggestion for what Qt widget to use?

Your comments please, Amigos.

Edward

</t>
<t tx="ekr.20130806211959.17314">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Friday, September 14, 2012 8:54:42 AM UTC-5, Edward K. Ream wrote:

&gt; It will be relatively straightforward to do the first draft of attended 
mode. 

Indeed it was.  Rev  5435 contains the new code in screencast.py and new 
test code in test.leo.  To run the test, just do Alt-9, then hit the right 
arrow key until done.  Escape or Ctrl-g will abort the screencast.  All 
other keys get ignored.

**Warning**: the present screen cast insert a node in a somewhat random 
location.

The code that looks for the next node assumes that if it has a script if 
p.b.strip() is True.  Before making this check, it should strip off python 
comment lines so the speaker can add comments.

There is still lots of work to be done, but already we have a fun sandbox 
to play in.  As you will see, all the code in ScreenCastController is dead 
easy, which bodes well for future work.

Edward

</t>
<t tx="ekr.20130806211959.17315">@nocolor

From: tfer &lt;tfetherston@aol.com&gt;

I was wondering if the Qt widget used for body text has a provision for 
background images?

I'm thinking that it might be interesting to have some wallpapers/tiles to 
visually represent various categories of methods, e.g. initors, setters, 
getters, etc.  Maybe ones that hint at the uses of a particular design 
pattern.  Maybe us a uA to control setting?
</t>
<t tx="ekr.20130806211959.17316">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Fri, Jul 13, 2012 at 3:57 PM, tfer &lt;tfetherston@aol.com&gt; wrote:

&gt; I was wondering if the Qt widget used for body text has a provision for
&gt; background images?
&gt;

Sorry for the delay in responding.  Leo's body pane is a QTextBrowser:
http://qt-project.org/doc/qt-4.8/qtextbrowser.html
a subclass of QTextEdit.  QTextBrowser also inherits from QFrame and
QWidget, so there *might* be a way to have a background image "leak"
through the text.
</t>
<t tx="ekr.20130806211959.17317">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

--MP_/NJ5QIult88.7_K/HpvnV2eA

On Wed, 1 May 2013 04:19:52 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Fri, Jul 13, 2012 at 3:57 PM, tfer &lt;tfetherston@aol.com&gt; wrote:
&gt; 
&gt; &gt; I was wondering if the Qt widget used for body text has a provision for
&gt; &gt; background images?
&gt; &gt;
&gt; 
&gt; Sorry for the delay in responding.  Leo's body pane is a QTextBrowser:
&gt; http://qt-project.org/doc/qt-4.8/qtextbrowser.html
&gt; a subclass of QTextEdit.  QTextBrowser also inherits from QFrame and
&gt; QWidget, so there *might* be a way to have a background image "leak"
&gt; through the text.
&gt; 
&gt; Edward
&gt; 

QTextEdit#richTextEdit { background-image: url('/home/tbrown/Desktop/cow2.jpg'); }

in the stylesheet gives the effect attached (i.e. it works).

If you wanted node specific backgrounds Leo would have to start setting
an attribute on the body widget, probably the gnx, so you could do

QTextEdit#richTextEdit[leo_gnx='tbrown.20130430222443.19340'] { 
  background-image: url('/home/tbrown/Desktop/cow2.jpg'); 
}

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17318">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 1, 2013 at 8:42 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt;
&gt;
&gt; QTextEdit#richTextEdit { background-image:
&gt; url('/home/tbrown/Desktop/cow2.jpg'); }
&gt;
&gt; in the stylesheet gives the effect attached (i.e. it works).
&gt;
&gt; If you wanted node specific backgrounds Leo would have to start setting
&gt; an attribute on the body widget, probably the gnx, so you could do
&gt;
&gt; QTextEdit#richTextEdit[leo_gnx='tbrown.20130430222443.19340'] {
&gt;   background-image: url('/home/tbrown/Desktop/cow2.jpg');
&gt; }
&gt;

Wow!  Thanks for this.  LeoUser wrote a version of Leo in Jython (using the
Swing classes), and he claimed that he could watch *movies* in the body
pane :-)

I'll add this to the Leo/To Document list.  Not sure yet how that list is
going to get translated into action.  Still reading Getting Things Done :-)
</t>
<t tx="ekr.20130806211959.17319">From: wgw &lt;wgwinder@gmail.com&gt;

For the moment, I use Meld to compare/update myLeoSettings.leo file. That 
seems a bit error-prone. Is there a better way? By update, I mean that, for 
example, in the bzr copy of LeoSettings.leo, the code_wise node says :

True: use codewise completions.
False: use leo-specific completions.

This setting is no longer used!

But in my (now old) myLeoSettings.leo file it says: 

True: use codewise completions.
False: use leo-specific completions

I want to transfer that updated setting comment to myLeoSettings so that I 
don't have to refer to LeoSetttings.leo when I tweak my installation. 

Another example: the plugins list will change with new plugins or 
eliminated plugins, but those changes won't be noted in the myLeoSettings 
file. So you have to check both settings files to find/enable plugins.

In general, it would seem useful to be able to merge the two leo files 
(like bzr merge?) or somehow make note of differences in the myLeoSettings 
file. 

This is starting to sound complicated.... :) Sorry!

EKR

It is complicated.  One tiny workaround is to delete nodes from
myLeoSettings.leo if and when they become unused.  More generally, you only
have to put nodes in myLeoSettings.leo if they are different from the
defaults.  But you probably already know that :-)

Really, this is a special case of the fundamental problem the Leo
developers have been struggling with:  Leo is great for storing gobs of
data, but not so great at sharing.  As a result, everyone, including Leo's
developers, struggles to remember, access or browse all the great stuff
that is already present.

Requiring tags is no solution: it's hopeless to require volunteers to do
anything :-)  I'm not just making a joke.  Someone who contributes a script
to this Google Group is under no further obligation to somehow be
compatible with *any* other submission rules.  Somehow, it's up to me, or
the other core developers, to find a simple, reliable way of "indexing" the
submissions.  Right now I have no solutions.
</t>
<t tx="ekr.20130806211959.17320">From: felix74 &lt;hjuucy@googlemail.com&gt;

I'm trying to create a interactive chart in a embedded in a new leo pane 
using matplotlib. However, I am not sure about the the best way  to 
implement this. I would appreciate some guidance on this please? The 
questions I would like answered are:
1/ How do I create a new blank pane for embedding a chart as well as other 
QtWidgets.
2/ Can I do this in a script or do I need to work with leo source 

The context for wanting to do this is that I want to create a data 
processing and visualization tool kit in leo. Like Excel but using nodes 
instead of columns. As such I have data in nodes and can create new data 
nodes by applying python functions to data in existing nodes. The thing 
missing is the visualization within a leo pane (I can easily launch a chart 
in it's own window) .
</t>
<t tx="ekr.20130806211959.17321">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 18 Sep 2012 05:59:59 -0700 (PDT)
felix74 &lt;hjuucy@googlemail.com&gt; wrote:

&gt; Terry,
&gt;  
&gt; Thanks for your help with this it was very helpful and a lot simpler than I 
&gt; feared. I have managed to get a matplotlib graph embedded within a pane in 
&gt; leo as a widget. I now need some help with how to interact with the 
&gt; widget using scripts in leo. I am unsure about the following:
&gt;  
&gt; *1/ How do I expose the widget within th leo python environment?* 

If you were only going to have one and you weren't going to destroy it,
you could just do something simple like c._matplot = self in its
constrictor (assuming c was passed to the constructor).

If you're going to have more than one and they may be destroyed, it
might be simplest to let the free_layout / nested_splitter system manage
them.

ts = c.free_layout.get_top_splitter()
matplotters = ts.findChildren(myMatplotWidget)

should return a list of the widgets of your class in the layout, but
only if they're in the main window, widgets in extra windows opened
from the "Open window" context menu item would be missed, I can add a
find_children() method to complement the find_child() method the
splitters already have to account for this.

Detail: the above is just using Qt's QObject.findChildren(), the
nested_splitter find_child() and (not yet written) find_children()
versions search the extra windows as well.

&gt; Here I have created a self.mat in your MatplotPaneProvider class to make 
&gt; the windget accessible but it doesn't feel like the correct way to do this. 

It should probably provide a fresh myMatplotWidget every time it's
called, so don't construct one in the Provider's init, but in the
ns_provide method.

&gt; from PyQt4 import QtGui
&gt; class MatplotPaneProvider:
&gt; def __init__(self, c):
&gt;      self.c = c
&gt;     * self.mat = myMatplotWidget()*
&gt;      if hasattr(c, 'free_layout'):
[snip]  
&gt; *2/I would also like to make the widget accessible from any script within 
&gt; leo. What's the leo way of doing this?*

See above.

&gt; *3/ If I create more than 1 pane containing these widgest. How do I switch 
&gt; between them in scripts?*

Above again :-)
 
&gt; *4/ Running this script more than once creates multiple items for Add 
&gt; Matplot when pressing the Action button. How do I stop this from happening? 
&gt; I have alrewady tried returning a unique integer in * ns_provider_id *but 
&gt; that did not work.*

The value returned by ns_provider_id should be unique for the provider
class, but constant.  So it can just return "matplotlib provider ver 1"
or something.
</t>
<t tx="ekr.20130806211959.17323">From: felix74 &lt;hjuucy@googlemail.com&gt;




Terry,
 
Thanks for your help with this it was very helpful and a lot simpler than I 
feared. I have managed to get a matplotlib graph embedded within a pane in 
leo as a widget. I now need some help with how to interact with the 
widget using scripts in leo. I am unsure about the following:
 
*1/ How do I expose the widget within th leo python environment?* 
Here I have created a self.mat in your MatplotPaneProvider class to make 
the windget accessible but it doesn't feel like the correct way to do this. 
 
from PyQt4 import QtGui
class MatplotPaneProvider:
def __init__(self, c):
     self.c = c
    * self.mat = myMatplotWidget()*
     if hasattr(c, 'free_layout'):
         splitter = c.free_layout.get_top_splitter()
     if splitter:
         splitter.register_provider(self)
    def ns_provides(self):
         return[('Add matplot', '_add_matplot_pane')]
    def ns_provide(self, id_):
         if id_ == '_add_matplot_pane':
         c = self.c
         return self.mat
 
    def ns_provider_id(self):

# used by register_provider() to unregister previously registered
# providers of the same service
# provider ID is not the same as the service id_ above
return "completely unique value here"

 
*mat = MatplotPaneProvider(c)*
*mat.mat.someMethod()*
*mat.mat.someOtherMethod()*
 
*2/I would also like to make the widget accessible from any script within 
leo. What's the leo way of doing this?*
 
*3/ If I create more than 1 pane containing these widgest. How do I switch 
between them in scripts?*
** 
*4/ Running this script more than once creates multiple items for Add 
Matplot when pressing the Action button. How do I stop this from happening? 
I have alrewady tried returning a unique integer in * ns_provider_id *but 
that did not work.*
 
</t>
<t tx="ekr.20130806211959.17324">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Sep 2012 22:23:18 -0700 (PDT)
felix74 &lt;hjuucy@googlemail.com&gt; wrote:

&gt; I'm trying to create a interactive chart in a embedded in a new leo pane 
&gt; using matplotlib. However, I am not sure about the the best way  to 
&gt; implement this. I would appreciate some guidance on this please? The 
&gt; questions I would like answered are:
&gt; 1/ How do I create a new blank pane for embedding a chart as well as other 
&gt; QtWidgets.
&gt; 2/ Can I do this in a script or do I need to work with leo source 

You can run this script from any body pane:
---cut here---
from PyQt4 import QtGui
class MatplotPaneProvider:
    def __init__(self, c):
        self.c = c
        if hasattr(c, 'free_layout'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[('Add matplot', '_add_matplot_pane')]
    def ns_provide(self, id_):
        if id_ == '_add_matplot_pane':
            c = self.c
            w = QtGui.QSlider()
            return w
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        # provider ID is not the same as the service id_ above
        return "completely unique value here"

MatplotPaneProvider(c)
---cut here---

Paste just as above and run the script.  Nothing happens.  Right click
on one of the pane dividers and select Insert.  A new pane with a
button 'Action' appears.  Click it, and select "Add matplot" from the
context menu.

Instead of "w = QtGui.QSlider()", you want "w = myMatplotWidget()"
</t>
<t tx="ekr.20130806211959.17325">@nocolor

From: &lt;fidelperez@gmail.com&gt;

I am going through something similar Matt Wilkie went through in this
post&lt;https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/leopyref/leo-editor/pWyd5ae952I/kvxf_H-QBq4J&gt;
.

Basically I can find interesting functions in LeoPyRef.leo but I dont know 
how to access them from my new leo scripts.

I dont get the difference when I have to call them using g.Functionname(), 
c.functionname(), or when those wont do.

How can I call the function "insertIconFromFile"?
How can I know how to call functions found in LeoPyRef.leo?

Thanks!

Ps: When I get that, I will already have a bookmarks importer from 
chrome/mozilla which will also import the icons of the links! x)
I will prepare some more interesting utils (import mindmap, etc) then 
release them together with manuals oriented to noob users.

</t>
<t tx="ekr.20130806211959.17326">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;

Sounds great!
So, in the search results, will I be able to know how to call that function?
IE, if I find insertIconFromFile, will I be able to know that I can call it
through using c.editCommands.insertIconFromFile?


On Monday, May 20, 2013 3:47:35 PM UTC+2, Terry wrote:
&gt;
&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidel...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; Ok, in order to print icons, the code is this:
&gt; &gt;
&gt; &gt; c.editCommands.insertIconFromFile(path)
&gt; &gt;
&gt; &gt; Im quoting from this Leo manual&lt;
&gt; http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; &gt; "inserting and deleting icons" section -_-
&gt; &gt;
&gt; &gt; Although I still have a mess on which functions can be called how, and
&gt; &gt; where to find the list of classes that can be called such as
&gt; "editCommands"
&gt; &gt; and the rest that they might exist.
&gt;
&gt; I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).
&gt;
&gt; I've written an introspection function which lists the methods and
&gt; instance variables (and class variables) of an arbitrary object by name
&gt; and by type.  I should release it.  It builds its lists in a Leo
&gt; outline, so you can navigate around that outline and expand nodes by
&gt; introspection as needed.
&gt;
&gt; It occurs to me that the same code could be used to search Leo's
&gt; runtime object hierarchy for you, i.e. you enter 'insertIconFromFile'
&gt; and it recursively searches for it.
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130806211959.17327">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Mon, May 20, 2013 at 8:47 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=C3=A9rez &lt;fidelperez@gmail.com&gt; wrote:
&gt;

&gt; Although I still have a mess on which functions can be called how, and
&gt; where to find the list of classes that can be called such as
"editCommands"
&gt; and the rest that they might exist.

I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).
&gt;

I suppose you could say that there is no general solution, but the
situation isn't really all that difficult.

Start with c.  We know what that is:  it is a commander object representing
an open outline.

There are **official ivars** of c, all referring to wrapper classes defined
in leoFrame.py:

c.frame: an instance of leoFrame.
c.frame.tree: an instance of  leoTree.
c.frame.body: an instance of leoBody.
c.frame.log: an instance of leoLog.

The tree, body and log objects have a *ctrl* objects, which are *wrapper*
classes:

c.frame.tree.treeCtrl
c.frame.body.bodyCtrl
c.frame.log.logCtrl

In particular, see
http://leoeditor.com/scripting.html#c-frame-body-bodyctrlfor a
description of the high-level text interface supported by all
high-level text widgets, including the log and body classes.

These wrapper classes have a widget ivar, which is a reference to the
corresponding Qt widget object.  For example::

    import PyQt4.QtGui as QtGui
    w =3D c.frame.body.bodyCtrl.widget
    g.es(w)
    g.es(isinstance(w,QtGui.QTextBrowser)

yields::

    (LeoQTextBrowser) 62418136
    True

As shown, the LeoQTextBrowser class is a real (subclass of) QTextBrowser.

HTH.  I've made a note to discuss official ivars in more detail in the
scripting chapter.
</t>
<t tx="ekr.20130806211959.17328">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;
Content-Transfer-Encoding: quoted-printable

Ok, in order to print icons, the code is this:

c.editCommands.insertIconFromFile(path)

Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
"inserting and deleting icons" section -_-

Although I still have a mess on which functions can be called how, and
where to find the list of classes that can be called such as "editCommands"
and the rest that they might exist.
Thanks!

On Sunday, May 19, 2013 12:43:50 PM UTC+2, Fidel P=E9rez wrote:
&gt;
&gt; Hi, I am going through something similar Matt Wilkie went through in this
&gt; post&lt;https://groups.google.com/forum/?fromgroups=3D#!searchin/leo-editor/leopyref/leo-editor/pWyd5ae952I/kvxf_H-QBq4J&gt;
&gt; .
&gt;
&gt; Basically I can find interesting functions in LeoPyRef.leo but I dont know
&gt; how to access them from my new leo scripts.
&gt;
&gt; I dont get the difference when I have to call them using g.Functionname(),
&gt; c.functionname(), or when those wont do.
&gt;
&gt; How can I call the function "insertIconFromFile"?
&gt; How can I know how to call functions found in LeoPyRef.leo?
&gt;
&gt; Thanks!
&gt;
&gt; Pd: When I get that, I will already have a bookmarks importer from
&gt; chrome/mozilla which will also import the icons of the links! x)
&gt; I will prepare some more interesting utils (import mindmap, etc) then
&gt; release them together with manuals oriented to noob users.
&gt;

</t>
<t tx="ekr.20130806211959.17329">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Mon, 20 May 2013 04:00:59 -0700 (PDT) &lt;fidelperez@gmail.com&gt; wrote:

&gt; Ok, in order to print icons, the code is this:
&gt;
&gt; c.editCommands.insertIconFromFile(path)
&gt;
&gt; Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; "inserting and deleting icons" section -_-
&gt;
&gt; Although I still have a mess on which functions can be called how, and
&gt; where to find the list of classes that can be called such as "editCommands"
&gt; and the rest that they might exist.

I'm not aware of a general solution to the problem of finding the
various pieces of Leo's class structure.  Basically there are all these
classes defined in the source, and instances of these are attached to
each other in a hierarchical network (with loops).

I've written an introspection function which lists the methods and
instance variables (and class variables) of an arbitrary object by name
and by type.  I should release it.  It builds its lists in a Leo
outline, so you can navigate around that outline and expand nodes by
introspection as needed.

It occurs to me that the same code could be used to search Leo's
runtime object hierarchy for you, i.e. you enter 'insertIconFromFile'
and it recursively searches for it.

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17330">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Mon, 20 May 2013 08:47:35 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidelperez@gmail.com&gt; wrote:
&gt;
&gt; &gt; Ok, in order to print icons, the code is this:
&gt; &gt;
&gt; &gt; c.editCommands.insertIconFromFile(path)
&gt; &gt;
&gt; &gt; Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; &gt; "inserting and deleting icons" section -_-
&gt; &gt;
&gt; &gt; Although I still have a mess on which functions can be called how, and
&gt; &gt; where to find the list of classes that can be called such as "editCommands"
&gt; &gt; and the rest that they might exist.
&gt;
&gt; I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).

I didn't really finish the above para.  The problem is that it's hard
to guess what the names of the attachment points are, and the attaching
is done in a variety of places, sometimes by factory functions which
further obscure linkages.  Not a fault with Leo, just the way programs
work.  So the tool I've written may be the best approach to mapping
Leo's runtime structure. Another thing it could do, try and map 'major'
classes, or at least classes from leo.core.* - i.e. ignore the built in
types.
</t>
<t tx="ekr.20130806211959.17331">From: SegundoBob &lt;bhossley@ieee.org&gt;

This thread gives a recipe for inserting text into the body of a node
at the current cursor:

http://groups.google.com/group/leo-editor/browse_thread/thread/a08d122e0cf59359/60be2b02f3ef3e94

Unfortunately, this recipe has a problem:  When focus is moved away
from and then back to the modified node, the inserted text
disappears.  That is, Leo-Editor seems unaware of the insertion.

The following recipe fixes this problem:

http://pastebin.com/GAc15jRL

Is this recipe the right way to do it or is there a better way?
</t>
<t tx="ekr.20130806211959.17332">@nocolor

From: SegundoBob &lt;bhossley@ieee.org&gt;

I'm sorry no one has suggested a better way to make the changes
permanent.  How does Leo-Editor notice that typing has inserted a few
more characters?  Couldn't the same mechanism be used here?

On 04/17/2013 12:29 PM, Terry Brown wrote:&gt; I think that's the way,
see also:
&gt;
&gt; https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ
&gt;
Thanks.  I vaguely remembered this thread, but I couldn't find it.

&gt; Depending on your use you might want to
&gt;
&gt;     oldins = w.getInsertPoint()
&gt;
&gt;     ...
&gt;
&gt;     w.setInsertPoint(oldins+len(inserted_text))

http://pastebin.com/GAc15jRL  uses both w.getInsertPoint() and
w.setInsertPoint()

&gt;
&gt; to get the cursor where you want it afterwards, lots of variations how
&gt; the new position might be calculated.
&gt;
&gt; Other possibly useful methods:
&gt;
&gt;     i,j = w.getSelectionRange(sort=True)
&gt;     s = w.getSelectedText()

Yes, these are very useful.
</t>
<t tx="ekr.20130806211959.17333">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 12:09:52 -0700 (PDT)
SegundoBob &lt;bhossley@ieee.org&gt; wrote:

&gt; This thread gives a recipe for inserting text into the body of a node
&gt; at the current cursor:
&gt; 
&gt; http://groups.google.com/group/leo-editor/browse_thread/thread/a08d122e0cf59359/60be2b02f3ef3e94
&gt; 
&gt; Unfortunately, this recipe has a problem:  When focus is moved away
&gt; from and then back to the modified node, the inserted text
&gt; disappears.  That is, Leo-Editor seems unaware of the insertion.
&gt; 
&gt; The following recipe fixes this problem:
&gt; 
&gt; http://pastebin.com/GAc15jRL
&gt; 
&gt; Is this recipe the right way to do it or is there a better way?

I think that's the way, see also:

https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ

Depending on your use you might want to
   
    oldins = w.getInsertPoint() 

    ...

    w.setInsertPoint(oldins+len(inserted_text)) 

to get the cursor where you want it afterwards, lots of variations how
the new position might be calculated.

Other possibly useful methods:

    i,j = w.getSelectionRange(sort=True)
    s = w.getSelectedText()  

Cheers -Terry
</t>
<t tx="ekr.20130806211959.17334">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 16:53:10 -0700 (PDT)
SegundoBob &lt;bhossley@ieee.org&gt; wrote:

&gt; I'm sorry no one has suggested a better way to make the changes
&gt; permanent.  How does Leo-Editor notice that typing has inserted a few
&gt; more characters?  Couldn't the same mechanism be used here?

I don't think Leo constantly updates p.b from w.getAllText(), but just
does it when focus is lost - not sure about that though.

Here's a thought for a higher level interface.

c.get_edit_state() gives you an instance of a LeoEditState class with
these attributes:

  text attributes

  les.all_text
  les.text_before_select
  les.text_after_select
  les.selected_text
  les.text_before_cursor
  les.text_after_cursor

  integer attributes

  les.selection_start
  les.selection_end
  les.cursor_index

then you can either do

c.set_edit_state(les)

which sets the editor text and p.b to les.all_text and sets up
selection and insert position appropriately from the integers,

or c.set_edit_state(les, mode='selection')
or c.set_edit_state(les, mode='cursor')

which assembles things based on the selection or cursor text attributes.

Thoughts?  So long since I wrote any emacs text manipulation stuff I
can't remember the idiom it used.

Cheers -Terry



&gt; On 04/17/2013 12:29 PM, Terry Brown wrote:&gt; I think that's the way,
&gt; see also:
&gt; &gt;
&gt; &gt; https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ
&gt; &gt;
&gt; Thanks.  I vaguely remembered this thread, but I couldn't find it.
&gt; 
&gt; &gt; Depending on your use you might want to
&gt; &gt;
&gt; &gt;     oldins = w.getInsertPoint()
&gt; &gt;
&gt; &gt;     ...
&gt; &gt;
&gt; &gt;     w.setInsertPoint(oldins+len(inserted_text))
&gt; 
&gt; http://pastebin.com/GAc15jRL  uses both w.getInsertPoint() and
&gt; w.setInsertPoint()
&gt; 
&gt; &gt;
&gt; &gt; to get the cursor where you want it afterwards, lots of variations how
&gt; &gt; the new position might be calculated.
&gt; &gt;
&gt; &gt; Other possibly useful methods:
&gt; &gt;
&gt; &gt;     i,j = w.getSelectionRange(sort=True)
&gt; &gt;     s = w.getSelectedText()
&gt; 
&gt; Yes, these are very useful.
&gt; 
</t>
<t tx="ekr.20130806211959.17335">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 12 Apr 2013 10:09:40 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; My workflow is like this
&gt; [e.g., I want to select some text in the body and make transform, then
&gt; insert to the body again]:

Your workflow make sense for the general case of doing any arbitrary
thing with Leo.  For the specific case of manipulating text, I think
the API could be improved, or, seeing the existing API make sense for
what it is, we could have additional "easy text manipulation" API.
So long since I used Emacs I can't really remember its model, and if it
would apply here.

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17336">@nocolor

From: &lt;lzyerste@gmail.com&gt;

If I want to use leo to make mathematical notes, how can I type in some
special mathematical sysbols? Or is there a good way to make mathematical
notes using leo?

===== Terry

I use itex2MML with reStructuredText.  So within Leo you're looking at
LaTeX math markup, and you get outputs in PDF and XHTML, with MathML in
the latter.

===== &lt;jose.i.rojas@gmail.com&gt;

I've been doing this for about a year now.  I use the math docutils 
directive.  A custom .XCompose file (for example: 
https://github.com/kragen/xcompose)  also helps.

===== Terry

I think math was added to docutils after I started using itex2mml,
neater to use docutils built in math now I think.

Although having said that, playing with docutils math a bit suggests
itex2mml gives more complete support for both MathMML and perhaps LaTeX
math (with the PDF target).

===== jose

Terry, your setup is probably more flexible, but I haven't had any problems with 
docutils math. It seems to support all the syntax that I've found necessary.

I forgot to mention that the viewrendered plug-in doesn't display math 
correctly.  I'm not sure what the problem is, I remember trying to figure 
it out a while back, but I never got anywhere.  It's not really a big 
problem though, I have scripts to compile nodes to html/pdfs and open them 
in firefox/pdf reader; math works fine that way.

===== From: offray@riseup.net

Is not properly Leo, but is python related, tailored for math and with a
web interface and has leo bindings, check Ipython:

http://ipython.org/

I'm using it for all my math related writing and I think that point the
future of interactive writing in Python. I dream of a body pane on leo
with the features of the pyton qt console.
</t>
<t tx="ekr.20130806211959.17337">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Just pushed leo/external/leoftsindex.py:

Stand alone GUI free index builder for Leo's full text search system::

  python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...

If &lt;file&gt; does not contain '#' it's assumed to be a .leo file
to index, and is indexed.

If &lt;file&gt; does contain '#' it's assumed to be a .leo file
containing a list of .leo files to index, with the list in
the node indicated by the UNL after the #, e.g.::

   path/to/myfile.leo#Lists--&gt;List of outlines

In the latter case, if the node identified by the UNL has children,
the list of files to scan is built from the first line of the body
of each child node of the identified node (works well with bookmarks.py).
If the node identified by the UNL does not have children, the
node's body is assumed to be a simple text listing of paths to .leo files).

note::
    
    It may be necessary to quote the "file" on the command line,
    as the '#' may be interpreted as a comment delimiter::
        
        python leoftsindex.py "workbook.leo#Links"
</t>
<t tx="ekr.20130806211959.17339">From: =?UTF-8?Q?Jo=C3=A3o_Alexandre_Toledo?= &lt;jalexandretoledo@gmail.com&gt;

As I use Leo to write PL/SQL code, I need to write similar text several
times, changing only small parts of it. It would be great if I could create
a node with the "template" and then clone it everywhere it should be
written, and then providing the parameters to be used in this writing.

Let me try to clarify it. I'd like to create a tree like this:

 +- @file something.sql
           +- Section 1
              + &lt;&lt; Clone &gt;&gt; with Parameters A, B
           +- Section 2
              + &lt;&lt; Clone &gt;&gt; with Parameters C, D

In this tree, both "Clone" nodes would be generated from a template
specified somewhere in the tree, and would have parts of its text replaced
with values "A" and "B" in Section 1, and "C" and "D" in Section 2.

I've searched but couldn't find anything like this, then I've thought of
trying to write a hook to intercept the "save" command, but couldn't think
of a way to pass the parameters; I think the obvious way would be to put
the parameters after the "&lt;&lt; &gt;&gt;", but then all cloned nodes are changed, so
it wouldn't work.

Another alternative would be creating some kind of directive @something,
but I have no idea of how to do that.

Any ideas?
</t>
<t tx="ekr.20130806211959.17340">From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;



Content-Transfer-Encoding: quoted-printable

I know a programming IDE &lt;http://sourceforge.net/projects/doublesvsoop/&gt;which bases its existence in that concept:

You write "code Masks" and whenever you call a piece of code it will ask
only for the parameters, and write the rest of the code. There are already
some languages with most of the masks (all the primary functions and some
complex ones) and its growing.

For instance, if you write:

"window" it will add the window to the code and let you edit the params.

Their functionality would be awesome in Leo and when I know a bit better I
will try to emulate on it.
Sticking to Leo tho since it has a much superior way of managing data.


On Saturday, May 4, 2013 12:48:27 AM UTC+2, Jo=E3o Alexandre Toledo wrote:
&gt;
&gt; Hi,
&gt;
&gt; Sorry for the delay... I'll try it this weekend and see how it works.
&gt;
&gt; Thank you.
&gt;
&gt; Jo=E3o
</t>
<t tx="ekr.20130806211959.17341">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 5 May 2013 16:35:59 -0700 (PDT)
Fidel P=E9rez &lt;fidelperez@gmail.com&gt; wrote:

&gt; I know a programming IDE &lt;http://sourceforge.net/projects/doublesvsoop/&gt;which bases its existence in that concept:
&gt;
&gt; You write "code Masks" and whenever you call a piece of code it will ask
&gt; only for the parameters, and write the rest of the code. There are already
&gt; some languages with most of the masks (all the primary functions and some
&gt; complex ones) and its growing.

I suspect different people have different things in mind when they talk
about templates.

Leo's abbreviation system is already quite advanced when it comes to
filling in skeletons of common code layouts.  I type

  def;;

and I get

  def foo(this, that=3D3):
      """foo - Return
 
      :Parameters:
      - `this`: &lt;|describe this|&gt;
      - `that`: &lt;|describe that|&gt;
      """
 
      &lt;|code|&gt;

Two "parameters" are interactively requested, the function name, and
the list of arguments.  The node name is presented as the default for
the function name, and 'self' is included in the list of arguments, so,
assuming the node was already called 'foo', all I type is this, that=3D3.
The layout above is the rst form of the epydoc/sphinx docstring with
formally identified parameters.

The cursor is positioned after Return, where the was an empty &lt;||&gt;
placeholder.  Pressing ,, selects the next placeholder so that typing
replaces it.

There's more, see
https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/5ni2PwfmBz8
and the screencast linked from there
http://www.greygreen.org/tmp/leoabbrev.ogv

Other people, Jacob etc. I think, have been talking about templates
where the input parameters are stored in the outline, allowing for
some of them to be altered and the template generation step re-run.
More like generating a website from data etc.

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17342">From: =?UTF-8?Q?Jo=C3=A3o_Alexandre_Toledo?= &lt;jalexandretoledo@gmail.com&gt;

Hi,

Sorry for the delay... I'll try it this weekend and see how it works.

Thank you.

Jo=E3o

</t>
<t tx="ekr.20130806211959.17343">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c27f4813f73804dbad029f

Content-Transfer-Encoding: quoted-printable

On Wed, Nov 21, 2012 at 8:55 AM, Jo=E3o Alexandre Toledo &lt;
jalexandretoledo@gmail.com&gt; wrote:

&gt;
&gt; As I use Leo to write PL/SQL code, I need to write similar text several
&gt; times, changing only small parts of it. It would be great if I could create
&gt; a node with the "template" and then clone it everywhere it should be
&gt; written, and then providing the parameters to be used in this writing.
&gt;

Variants of this seem to be wanted by many people.  Most recently, there is
the thread, "Templates with macro expansions",
https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/nF2lUEUtaUE

Does that do what you want?

Edward

--001a11c27f4813f73804dbad029f

Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Wed, Nov 21, 2012 at 8:55 AM, Jo=E3o Alexandre Toledo &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:jalexandretoledo@gmail.com" target=3D"_blank"&gt;jalexandretoledo@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;
&lt;div class=3D"gmail_quote"&gt;&lt;blockquote class=3D"gmail_quote" style=3D"margin:0px 0px 0px 0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;br&gt;&lt;div&gt;As I use Leo to write PL/SQL code, I need to write similar text several times, changing only small parts of it. It would be great if I could create a node with the &amp;quot;template&amp;quot; and then clone it everywhere it should be written, and then providing the parameters to be used in this writing.&lt;/div&gt;
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Variants of this seem to be wanted by many people.=A0 Most recently, there is the thread, &amp;quot;Templates with macro expansions&amp;quot;, &lt;a href=3D"https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/nF2lUEUtaUE"&gt;https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/nF2lUEUtaUE&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/div&gt;&lt;div&gt;Does that do what you want?&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Edward&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--001a11c27f4813f73804dbad029f--
</t>
<t tx="ekr.20130806211959.17344">From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;



Content-Transfer-Encoding: quoted-printable

Thank you Terry, that is exactly what I would like meant.

Is there a website where abbreviation files are shared so newcomers can
quickly being to use advanced abbreviations?
Id love to download a python version x)

On Monday, May 6, 2013 5:13:42 AM UTC+2, Terry wrote:
&gt;
&gt; On Sun, 5 May 2013 16:35:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidel...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; I know a programming IDE &lt;http://sourceforge.net/projects/doublesvsoop/&gt;which
&gt; bases its existence in that concept:
&gt; &gt;
&gt; &gt; You write "code Masks" and whenever you call a piece of code it will ask
&gt; &gt; only for the parameters, and write the rest of the code. There are
&gt; already
&gt; &gt; some languages with most of the masks (all the primary functions and
&gt; some
&gt; &gt; complex ones) and its growing.
&gt;
&gt; I suspect different people have different things in mind when they talk
&gt; about templates.
&gt;
&gt; Leo's abbreviation system is already quite advanced when it comes to
&gt; filling in skeletons of common code layouts.  I type
&gt;
&gt;   def;;
&gt;
&gt; and I get
&gt;
&gt;   def foo(this, that=3D3):
&gt;       """foo - Return
&gt;  
&gt;       :Parameters:
&gt;       - `this`: &lt;|describe this|&gt;
&gt;       - `that`: &lt;|describe that|&gt;
&gt;       """
&gt;  
&gt;       &lt;|code|&gt;
&gt;
&gt; Two "parameters" are interactively requested, the function name, and
&gt; the list of arguments.  The node name is presented as the default for
&gt; the function name, and 'self' is included in the list of arguments, so,
&gt; assuming the node was already called 'foo', all I type is this, that=3D3.
&gt; The layout above is the rst form of the epydoc/sphinx docstring with
&gt; formally identified parameters.
&gt;
&gt; The cursor is positioned after Return, where the was an empty &lt;||&gt;
&gt; placeholder.  Pressing ,, selects the next placeholder so that typing
&gt; replaces it.
&gt;
&gt; There's more, see
&gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/5ni2PwfmBz8
&gt; and the screencast linked from there
&gt; http://www.greygreen.org/tmp/leoabbrev.ogv
&gt;
&gt; Other people, Jacob etc. I think, have been talking about templates
&gt; where the input parameters are stored in the outline, allowing for
&gt; some of them to be altered and the template generation step re-run.
&gt; More like generating a website from data etc.
&gt;
&gt; Cheers -Terry
&gt;
</t>
<t tx="ekr.20130806211959.17345">From: =?UTF-8?Q?Jo=C3=A3o_Alexandre_Toledo?= &lt;jalexandretoledo@gmail.com&gt;



Content-Transfer-Encoding: quoted-printable

Hi,

I've tried it and it's great, I think it will be useful, but it's not what
I was thinking of...

Let me try to explain what I had tougth about... What I would like to do is:

 1. create a new .leo file
 2. add a "template" node (eventually with sub nodes) with some ${schema}
and ${table} macro place holders in its contents
 3. add a @file node to the .leo file
 4. add to this @file node a new one with definitions such as
schema=3DSCHEMA_NAME and table=3DTABLE_NAME
 5. add as a sub node to this last one a clone from the "template" node;
 6. then, when I save everything, the @file would have "SCHEMA_NAME" and
"TABLE_NAME" everywhere a "${schema}" or a "${table}" were in the original
template node.

It would be important that, when I reopen the .leo file later, the macros
in the @file node where shown as ${schema} and ${table}, and not as it's
substituted text.

Now that I've described it, I can't see how it would be done... The
${macro} place holders should be on the contents of the @file node, so
after substitution, how could we recover it?

That's also why the code from Jacob is not what I need (but I'm already
thinking of other uses for it :) ): it will create a text when the button
is pressed, but the generated nodes will be just static text.


Thank you all.

Leo is great!


Jo=E3o


On Friday, May 3, 2013 7:48:27 PM UTC-3, Jo=E3o Alexandre Toledo wrote:
&gt;
&gt; Hi,
&gt;
&gt; Sorry for the delay... I'll try it this weekend and see how it works.
&gt;
&gt; Thank you.
&gt;
&gt; Jo=E3o
</t>
<t tx="ekr.20130806211959.17346">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

I have a note that it was an @rclick node handled by the context_menu.py 
plugin, but I am not able to see code or documentation anywhere.  This 
seems *well* hidden :-)
</t>
<t tx="ekr.20130806211959.17347">From: Kent Tenney &lt;ktenney@gmail.com&gt;

I don't have any visual indication of the existence of @rclick nodes,
it would be nice.

Something I've found useful is adding a @click node like:
@rclick -------------

that separates my entries from the ever present
'Remove Button' and 'Goto Script' entries

</t>
<t tx="ekr.20130806211959.17348">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Thu, Apr 11, 2013 at 8:38 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Thu, 11 Apr 2013 20:15:33 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.
&gt; &gt;
&gt; &gt; One more thing.  It's reasonable to have the top-level button just be a
&gt; &gt; placeholder for subsidiary @rclick nodes.  To do that without getting a
&gt; &gt; warning when clicking the top-level button, set its script to "empty
&gt; &gt; string".
&gt;
&gt; I think you mean set its script to a docstring describing the
&gt; functions it groups together for the tooltip hover text :-)
&gt;

Right.

EKR
</t>
<t tx="ekr.20130806211959.17349">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.

One more thing.  It's reasonable to have the top-level button just be a
placeholder for subsidiary @rclick nodes.  To do that without getting a
warning when clicking the top-level button, set its script to "empty
string".

EKR
</t>
<t tx="ekr.20130806211959.17350">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 00:56:51 -0700 (PDT)
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; I have a note that it was an @rclick node handled by the context_menu.py 
&gt; plugin, but I am not able to see code or documentation anywhere.  This 
&gt; seems *well* hidden :-)

:) It's in the core, not context_menu.py.  It was a long time ago, but
I remember finding the @button code tricky, so I'm not sure if it's an
ideal implementation.  OTOH it hasn't broken for 1-2 years.

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17351">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Apr 11, 2013 at 2:56 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

One more thing.  I can now put an @rclick node under an @button node, and
right-clicking the created top-level button work pretty much as expected.

But I remember that on your machine there was some indicator (a triangle?)
in the top-level button indicating that it had structure.  Is that the
case?  If so, how did you create such buttons?

Edward
</t>
<t tx="ekr.20130806211959.17352">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 13:50:25 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, Apr 11, 2013 at 2:56 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; One more thing.  I can now put an @rclick node under an @button node, and
&gt; right-clicking the created top-level button work pretty much as expected.
&gt;
&gt; But I remember that on your machine there was some indicator (a triangle?)
&gt; in the top-level button indicating that it had structure.  Is that the
&gt; case?  If so, how did you create such buttons?

@settings
   @string mod_scripting_subtext =3D =E2=96=BE

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17353">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 20:15:33 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.
&gt;
&gt; One more thing.  It's reasonable to have the top-level button just be a
&gt; placeholder for subsidiary @rclick nodes.  To do that without getting a
&gt; warning when clicking the top-level button, set its script to "empty
&gt; string".

I think you mean set its script to a docstring describing the
functions it groups together for the tooltip hover text :-)

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17354">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, Apr 11, 2013 at 2:24 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:


&gt;    @string mod_scripting_subtext =3D =E2=96=BE
&gt;

Thanks!  I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing
Triangle.

EKR
</t>
<t tx="ekr.20130806211959.17355">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, Apr 11, 2013 at 7:29 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Thu, 11 Apr 2013 00:56:51 -0700 (PDT)
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; I have a note that it was an @rclick node handled by the context_menu.py
&gt; &gt; plugin, but I am not able to see code or documentation anywhere.  This
&gt; &gt; seems *well* hidden :-)
&gt;
&gt; :) It's in the core, not context_menu.py.  It was a long time ago, but
&gt; I remember finding the @button code tricky, so I'm not sure if it's an
&gt; ideal implementation.  OTOH it hasn't broken for 1-2 years.
&gt;

Thanks.  I could have sworn I searched Leo's core for @rclick.  Must have
been a searching failure :-)  The code is in
qtIconBarClass.setCommandForButton.

I'll add documentation for this, in leoSettings.leo and also in the
customizing Leo chapter.
</t>
<t tx="ekr.20130806211959.17356">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

I have read the scripting chapter of leo-editor, and already make my daily
life easier with these quick dirty, but useful scripts.

And I just want to know your workflow of writing leo scripts.

My workflow is like this
[e.g., I want to select some text in the body and make transform, then
insert to the body again]:

1. Abstract the action of word.
[in this case, I choose "select" and "insert" as my key words]

2. search the words at http://leoeditor.com/scripting.html see if there is
existing some related topics.
[I have luck to find
i = w.getInsertPoint()              # Return the location of the cursor.
...
i,j = w.getSelectionRange(sort=True)
...
s = w.getSelectedText()             # Return the selected text, if any.
]

3. but I still don't know how to insert the text to body. So I search the
above function names in the scripts.leo to see the code.
[ I find in
scripts.leo#Scripts--&gt;@thin leoScripts.txt--&gt;Text editing scripts--&gt;insert
begin/endUpdate
...
w.insert(i,s1+'\\n\\t\\t\\n'+s2)
...
seems to help
]

4. test the scripts to see if it works, if it doesn't work, go to 3, to
find more example code.

Any suggestion to improve this workflow?
</t>
<t tx="ekr.20130806211959.17357">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

The script below is a tool for diffing two Leo files. The attached
screenshot illustrates the output for two different revisions of
LeoPyRef.leo.

``- nodename``
    indicates a node which disappeared
``+ nodename``
    a node which is new,
``!v nodename`` followed by ``!^ nodename``
    a node with an unchanged heading but changed content, the first
    linking to the old version, the second linking to the new version

If you have the bookmarks.py plugin active, you can double click nodes
to jump to the original(s).



from leo.core.leoNodes import vnode
if not hasattr(vnode, 'insertAsLastChild'):
    # add insertAsLastChild method to vnodes
    def ialc(self):
        vnode(self.context)._linkAsNthChild(self, len(self.children))
        return self.children[-1]
    vnode.insertAsLastChild = ialc

from_filename = g.app.gui.runOpenFileDialog('From (old) file', [('Leo', '*.leo')])
to_filename = g.app.gui.runOpenFileDialog('To (new) file', [('Leo', '*.leo')])

# from_filename = "/mnt/shuttle/bkup/usr1/2012-07-13/home/tbrown/.leo/.todo.leo"
# to_filename = "/mnt/shuttle/bkup/usr1/2012-07-15/home/tbrown/.leo/.todo.leo"

from_c = g.openWithFileName(from_filename, c)
to_c = g.openWithFileName(to_filename, c)

vf = from_c.hiddenRootNode
vt = to_c.hiddenRootNode

assert from_c != c
assert to_c != c
assert from_c != to_c

nd = c.rootPosition().insertAfter()
nd.copy().back().moveAfter(nd)
nd.h = 'diff @bookmarks'

def text_match(a, b):
    return (a.h == b.h, 
            a.h == b.h and a.b == b.b)
def gnx_match(a, b):
    return (a.h == b.h and a.gnx == b.gnx, 
            a.h == b.h and a.b == b.b and a.gnx == b.gnx)

def diff_trees(vf, vt, path):

    fonly = []  # nodes only in from tree
    tonly = []  # nodes only in to tree
    diffs = []  # nodes which occur in both but have different descendants

    # count number of times each headline occurs as a child of
    # each node being compared
    count_f = {}
    for cf in vf.children:
        count_f[cf.h] = count_f.get(cf.h, 0) + 1
    count_t = {}
    for ct in vt.children:
        count_t[ct.h] = count_t.get(ct.h, 0) + 1

    for cf in vf.children:
        
        for ct in vt.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            
            if body_eq:
                diffs.append(diff_trees(cf, ct, path+[vf.h]))
                
                break
            elif head_eq:
                d = diff_trees(cf, ct, path+[vf.h])
                if d:
                    d.h = '!v '+d.h
                else:
                    d = vnode(nd.v.context)
                    d.h = '!v '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    from_filename, 
                    '--&gt;'.join((path+[vf.h]+[cf.h])[1:]),
                    cf.b
                )
                diffs.append(d)
                d = vnode(nd.v.context)
                d.h = '!^ '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    to_filename, 
                    '--&gt;'.join((path+[vt.h]+[ct.h])[1:]),
                    ct.b
                )
                diffs.append(d)
                break
        else:
            fonly.append(cf)
            
    for ct in vt.children:
        
        for cf in vf.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            if head_eq or body_eq:
                # no need to recurse matches again
                break

        else:
            tonly.append(ct)

    if not any(diffs) and not fonly and not tonly:
        return None
        
    vd = vnode(nd.v.context)
    vd.h = vf.h
    for d in diffs:
        if d:
            vd.children.append(d)
    for f in fonly:
        n = vd.insertAsLastChild()
        n.h = '- '+f.h
        n.b = "file://%s/#%s" % (from_filename, '--&gt;'.join((path+[vf.h]+[f.h])[1:]))
    for t in tonly:
        n = vd.insertAsLastChild()
        n.h = '+ '+t.h
        n.b = "file://%s/#%s" % (to_filename, '--&gt;'.join((path+[vf.h]+[t.h])[1:]))
        
    return vd

v = diff_trees(vf, vt, [])
if v:
    nd.v.children.extend(v.children)  # snip off &lt;hidden root node&gt;

c.bringToFront()
c.redraw()
</t>
<t tx="ekr.20130806211959.17358">From: resi147 &lt;scalet@yebu.de&gt;




Hi Terry,

I tried this one and it seems to be very useful. What I would also like to 
have is a similar (or the same) script,
that does the same on two different nodes of a leo file. I admit, the 
changes should be minimal to be done by
myself, but as I'm not familiar with the internal leo api, I wanted to ask 
for how to best do this changes.

Probably somewhere here
"""
...
vf = from_c.hiddenRootNode 
vt = to_c.hiddenRootNode
...
"""
just to feed in the 2 nodes, Any quick idea how this can be done the best 
way?
</t>
<t tx="ekr.20130806211959.17359"></t>
<t tx="ekr.20130806211959.17360">@nocolor

From: Rickard Lindberg &lt;ricli85@gmail.com&gt;

I wrote a blog post about how Leo can be used to improve the organization 
of our code bases.

If you are interested, you can read it over here: 
http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/
</t>
<t tx="ekr.20130806211959.17361">@nocolor

From: Randy Kramer &lt;rhkramer@gmail.com&gt;

Rickard,

Very interesting--I'm happy to see someone thinking about how to make 
understanding code bases easier.  (I'm a rather old wannabee programmer, so 
I'm not sure it will ever be of much use to me, nor that I can offer cogent 
comments.)

I will add some comments or questions anyway: ;-)

   * Are you familiar with the concept of literate programming as espoused by 
Donald Knuth and others?  If so, did that influence you at all, and, if so 
how?  (Not that I think literate programming is the way forward, although I 
like the concept and have experimented with it--I once wrote a rather large 
Visual Basic (I know, what can I say, I was stuck in the Microsoft world at 
the time) program using a literate programming approach.  I got it working to 
a degree, but eventually had to devote more time to other things so never got 
it fully up to spec.

   * Darn, I know I had another comment, but I won't remember it until 
sometime after I hit "send" ;-)

The main purpose of my email is to encourage you--anything that can improve 
the understanding of a code base is a good thing--thanks for your efforts!

Randy Kramer





On Sunday 24 February 2013 6:12:16 am Rickard Lindberg wrote:
&gt; I wrote a blog post about how Leo can be used to improve the organization
&gt; of our code bases.
&gt;
&gt; If you are interested, you can read it over here:
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-tog
&gt;ether/
&gt;
&gt; /Rickard


</t>
<t tx="ekr.20130806211959.17362">@nocolor

From: Rickard Lindberg &lt;ricli85@gmail.com&gt;

On Sun, Feb 24, 2013 at 9:07 PM, Randy Kramer &lt;rhkramer@gmail.com&gt; wrote:
&gt; Rickard,
&gt;
&gt; Very interesting--I'm happy to see someone thinking about how to make
&gt; understanding code bases easier.  (I'm a rather old wannabee programmer, so
&gt; I'm not sure it will ever be of much use to me, nor that I can offer cogent
&gt; comments.)

Thank you. Glad you find it interesting.

&gt;    * Are you familiar with the concept of literate programming as espoused by
&gt; Donald Knuth and others?

Yes. I've read about literate programming and also tried it. I found that it
didn't work so well for me for the following reasons (At least that's what I
remember. It was many years since I tried.):

* Focus on text first instead of code made it harder for me to produce working
  code. I sometimes learn how to do something by trying it out and then
  refactor the solution.

* Unless you read the PDF (or whatever the final output is) you loose the
  structure. At least I did. It was just one big file with all kinds of things
  mixed together. An outline structure solves this problem.

&gt; If so, did that influence you at all, and, if so
&gt; how?  (Not that I think literate programming is the way forward, although I
&gt; like the concept and have experimented with it--I once wrote a rather large
&gt; Visual Basic (I know, what can I say, I was stuck in the Microsoft world at
&gt; the time) program using a literate programming approach.  I got it working to
&gt; a degree, but eventually had to devote more time to other things so never got
&gt; it fully up to spec.

It influenced me mostly in that I started to think about how to best present
programs so that humans can understand them. I'm not sure literate programming
like Knuth uses it is the best way (in particular, I think the programs are
harder to modify), but I also think that a folder with just source code is not
so good either.

&gt; The main purpose of my email is to encourage you--anything that can improve
&gt; the understanding of a code base is a good thing--thanks for your efforts!

Thanks for the encouragements.

/Rickard

</t>
<t tx="ekr.20130806211959.17363">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



Nice article Rickard, I think it captures the background problem well.

I'm not sure the images communicate clones effectively -- but don't really
have an alternative suggestion that would be an improvement. It's just
really hard to appreciate how well they work without experiencing them!

cheers,

-matt


On Sun, Feb 24, 2013 at 3:12 AM, Rickard Lindberg &lt;ricli85@gmail.com&gt; wrote:

&gt; I wrote a blog post about how Leo can be used to improve the organization
&gt; of our code bases.
&gt;
&gt; If you are interested, you can read it over here:
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/
&gt;
&gt; /Rickard
&gt;
&gt;
&gt;

</t>
<t tx="ekr.20130806211959.17364">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 24 Feb 2013 03:12:16 -0800 (PST)
Rickard Lindberg &lt;ricli85@gmail.com&gt; wrote:

&gt; I wrote a blog post about how Leo can be used to improve the organization 
&gt; of our code bases.
&gt; 
&gt; If you are interested, you can read it over here: 
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/

Interesting - the python web application framework Django is really
tough in that regard, you might simultaneously want to work on python,
html template, css, java-script, url-dispatch, tests, model definitions.
In fact I've just made some updates to the bookmarks display plugin
which make using it effectively smoother, for a mouse user, anyway, to
help with this.  Will push them soon.

Cheers -Terry

</t>
<t tx="ekr.20130806211959.17365">Josef &lt;joe_da@gmx.net&gt;
7/30/12
		
Recently I evaluated docear - a mind-mapping tool for collecting reference
data (written in Java). It automatically extracts bookmarks and annotations
from PDF files, and more, but it's support for authoring is still not up to
the task. I think it would be great if Leo could do some of the tasks
docear is doing.

Leo is primarily a literate programming editor, but also quite good at
organizing bits of information. Dragging a PDF into Leo currently just
creates an url to the PDF. This could be expanded to also extract data
(bookmarks, notes) from the PDF and to sync this data between Leo and the
PDF. This info could be placed in child nodes: bookmarks and notes could
even jump directly to the page in the PDF (although each PDF viewer seems
to have a different syntax for doing that). This would be a great way to
organize data sheets and specifications stemming from external sources.

Combining the above with an improved LaTeX support, one would get a very
powerful research and authoring tool - in my opinion with a much more
convenient interface than docear.

Perhaps it is too much work to duplicate all the work docear is doing. An
alternative may be to sync data somehow between docear and Leo. Docear
stores the data in a freeplane mind-map. Has anyone else thoughts about
this? Offray Vladimir Luna Cárdenas offray@riseup.net via googlegroups.com
	
7/30/12
		
I have been using Leo to write my thesis. I didn't know about Docear, but
my use was in some sense similar. I have a lot of @url links pointint to
the pdfs files and in a subtree I cut and paste the text of the pdf I want
to comment and made the comments inside the tree. These pdf were part of my
bibliographic entries and I'm now writing a .bib file for these, so I can
have in only one Leo tree all my thesis, with all the references to
external files and the annotations and bibtex entries for them. For me the
key point of Leo in academic writing is the tree view plus the clones and
ignore nodes. My thesis can have several layers, the external ones being
the actual writing and the deeper ones the references, texts, images, tools
that enable me to do that writing. Using clones and @rst-no-head directives
I can have the level of granularity of a paragraph, something that is not
possible on traditional word processor which are the writing tool of tools
like docear. This approach have some glitches:

* I still need to do some fine tunning to the LaTeX export for writing the
pdf as I want. I imagine that putting sphinx in the tool chain could change
that.

* I can not get much people of my companions using this advangages, besides
of myself, because of the difficult installation process of Leo in
Windows/Mac and the not so friendly interface for non-programmers. Other
light markup structured text writing programs like Nested[1] are more
easily used and understood despite of not having all the advantages and
flexibility of Leo.

So, in resume, may be the better approach is connecting Leo to Docear, so
you can have the advantages of both in terms of easy multiplataform
installation and friendly interface of the later and programmability,
flexibility and deeper organic structure of the former.

Offray

Terry Brown &lt;terry_n_brown@yahoo.com&gt;


&gt; Recently I evaluated docear - a mind-mapping tool for collecting reference
&gt; data (written in Java). It automatically extracts bookmarks and annotations
&gt; from PDF files, and more, but it's support for authoring is still not up to
&gt; the task. I think it would be great if Leo could do some of the tasks
&gt; docear is doing.
&gt;
&gt; Leo is primarily a literate programming editor, but also quite good at
&gt; organizing bits of information.

I would describe it as an general purpose outline that's very good at
editing code.

&gt; Dragging a PDF into Leo currently just
&gt; creates an url to the PDF. This could be expanded to also extract data
&gt; (bookmarks, notes) from the PDF and to sync this data between Leo and the
&gt; PDF. This info could be placed in child nodes: bookmarks and notes could
&gt; even jump directly to the page in the PDF (although each PDF viewer seems
&gt; to have a different syntax for doing that). This would be a great way to
&gt; organize data sheets and specifications stemming from external sources.

I'm not really sure how notes get embedded in PDFs.  As an aside, there
is also capability for using Leo to manage bookmarks to web pages, with
notes, tags, and snippets.  Look at the mod_http plugin.  It uses a
javascript bookmark button in your browser to communicate with Leo.

&gt; Combining the above with an improved LaTeX support, one would get a very
&gt; powerful research and authoring tool - in my opinion with a much more
&gt; convenient interface than docear.
&gt;
&gt; Perhaps it is too much work to duplicate all the work docear is doing. An
&gt; alternative may be to sync data somehow between docear and Leo. Docear
&gt; stores the data in a freeplane mind-map. Has anyone else thoughts about
&gt; this?

Syncing between the two sounds a little cumbersome to me.  I wonder if
the PDF stuff could be integrated with some sort of BibTeX .bib file
management?

Do you really need the mindmap UI of docear?  I used to use Freemind
which has a very similar interface, but switched to Leo.  I like what
http://cmap.ihmc.us/ does, but it only does idea organization, no
authoring etc.  To me cmaptools is better at idea organizing than
mindmaps.

There is also the backlinks plugin for Leo, which allows arbitrary
networks of links instead of just the directed tree, and graphcanvas,
which allows graph layout of nodes.  There aren't comparable with the
mindmap layouts, but they head in that direction.  Also note Leo's
hidden UI flexibility in the context menus on the pane dividers, you
can open a new window for the graphcanvas plugin, which gives it much
needed screen real estate.

Cheers -Terry

Josef &lt;joe_da@gmx.net&gt;
7/30/12
		
no, I do not need the mindmap stuff at all. I had a look at short look at
cmaptools, and I agree the generalized graph approach seems better than a
standard mindmap. But I am quite happy with the tree view in Leo and as you
already mentioned, this can be extended with backlinks etc. I have used Leo
already to organize reference documents and write documentation (using
Latex).

What I do want is links to a particular page of a PDF - links to just a
file are not enough when you refer to documents with 100+ pages.
Unfortunately this seems to be difficult to achieve in a cross-platform
way, particular when trying to support different PDF viewers. Docear is
solving this (and other compatibility problems) by developing its own
integrated viewer (I do not suggest to do this for Leo).

On second thought, I don't think that extracting the bookmark and
annotation info is really important to me - I would keep that info in the
PDF, anyhow. I would write inside Leo addional notes, and the output text
(in Latex).

Some integration of Bibtex may be a good thing and needs to be thought out
- perhaps by using JabRef for this, or by recycling some pyBibliographer
code, but this is also low on my priority list.

Offray seems to have a very similar use case as I - although I do not write
a thesis, but specifications for scientific instruments. The point about
cross-platform installation ease is also well taken, so I will look into
some inter-operability here (either with docear or cmaptools). I see Leo
mainly as a personal project / information manager: the leo tree is not
easily shared with others, while the files Leo points to with @url, @auto,
@file etc can be shared quite easily. In this I use Leo as *my personal*
view on the project.

Ville Vainio &lt;vivainio@gmail.com&gt;
7/30/12
		
It seems that e.g. w/ foxit reader, you can open selected page from command
line (-n 123). Abstracting this for other pdf readers that support such a
thing should be no problem.
 
On Monday, July 30, 2012 8:08:23 PM UTC+2, Ville M. Vainio wrote:
     
    It seems that e.g. w/ foxit reader, you can open selected page from
    command line (-n 123). Abstracting this for other pdf readers that
    support such a thing should be no problem.
    
Yes, I suppose one could translate from a canonical representation inside
Leo to whatever the tool needs (using @setting). Ideally, one would even
have a choice between opening the new page in a different or in the same
PDF viewer instance as the last page, but few viewers support that (Okular
does - but I don't know any cross-platform solution).
</t>
<t tx="ekr.20130806211959.17366">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've added an abbreviation to my myLeoSettings.leo abbreviations:
https://gist.github.com/tbnorth/5530059

It's the abbreviation "persist;;" and when you type that you get:

---cut here---
import json

json_state_file = "cache_info_file.json"
if not os.path.exists(json_state_file):
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    except:
        json.dump(cache_info, open(json_state_file, 'w'))
---cut here---

with appropriate interaction to customize all the parts which, in the
above example, include "cache_", i.e. the filename and the variable
name.

The point is it seems silly to create a module and hence a dependency
for what is barely 4 lines of actual code, but those 4 lines give you
very handy robust persistence, so something like an editor abbreviation
is the obvious way to make the available - nothing Leo specific here,
except that only serious editors have abbreviation like that ;-).
</t>
<t tx="ekr.20130806211959.17369">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;


&gt; How do you use the code inserted by the abbreviation? 

The corrected version is below for reference - I had `except` instead
of `finally` in the first version, so you data was only saved if
something went wrong :-)

It's just a framework for providing a dictionary the contents of which
persist between runs of the program.  I've used it for code that's
making lots of small url requests against a server, to cache the
results so that during development the crash / debug / re-run cycle is
faster because each piece of data is requested only once, ever, not once
every run.  More recently I was using it to store key value pairs of
filenames and a comment on the issue in the file, knowing that
completing the analysis of the issues in the files would take more than
one run of the program which was identifying the issues.

So in the example below, the content of the cache_info dictionary is
persistent, whatever main() does with it is seen next time the
program's run.  Nothing Leo specific except that it's really just an
import statement plus 5 lines of code and doesn't seem worth its own
file, but is more than you want to re-type all the time either, so
ideal for an abbreviation in your favorite editor.

I've added a couple of comments in the version below.

Cheers -Terry

---cut here---
import json

# name for persistent data store
json_state_file = "cache_info_file.json"   
if not os.path.exists(json_state_file):
    # create persistent data store if it doesn't exist
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
# load persistent data
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    finally:
        # save altered persistent data
        json.dump(cache_info, open(json_state_file, 'w'), indent=4)
---cut here---

</t>
<t tx="ekr.20130806211959.17370">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Because I have two nodes which were originally identical but are now
different and I want to see the differences.

My outline loads a @file called ~/.leo/t/gen which contains a @button
with several @rclick children for commonly used tasks.  So I add a new
one, @rclick diff

  selected = c.getSelectedPositions()
  open('/tmp/a_diff', 'w').write(selected[0].b)
  open('/tmp/b_diff', 'w').write(selected[1].b)
  import os
  os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")

which is horrible for a number of reasons but also took only moments
to write.  And now, not only does this Leo session have a visual node
diff capability, but also every future session which loads ~/.leo/t/gen.

When you can go from wanting to having a feature in less time than it
takes to write an email about it - well, that's "why Leo".

(I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
handling SQL and an XML dialect I use a lot, it's a great way to manage
little snippet functions)
</t>
<t tx="ekr.20130806211959.17371">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;



Begin forwarded message:

Date: Fri, 1 Feb 2013 13:08:30 -0600
From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;
To: leo-editor@googlegroups.com
Subject: why Leo


Because I have two nodes which were originally identical but are now
different and I want to see the differences.

My outline loads a @file called ~/.leo/t/gen which contains a @button
with several @rclick children for commonly used tasks.  So I add a new
one, @rclick diff

  selected = c.getSelectedPositions()
  open('/tmp/a_diff', 'w').write(selected[0].b)
  open('/tmp/b_diff', 'w').write(selected[1].b)
  import os
  os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")

which is horrible for a number of reasons but also took only moments
to write.  And now, not only does this Leo session have a visual node
diff capability, but also every future session which loads ~/.leo/t/gen.

When you can go from wanting to having a feature in less time than it
takes to write an email about it - well, that's "why Leo".

(I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
handling SQL and an XML dialect I use a lot, it's a great way to manage
little snippet functions)

Cheers -Terry
</t>
<t tx="ekr.20130806211959.17372">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Sun, Apr 7, 2013 at 11:21 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt;
&gt;
&gt; Begin forwarded message:
&gt;
&gt; Date: Fri, 1 Feb 2013 13:08:30 -0600
&gt; From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;
&gt; To: leo-editor@googlegroups.com
&gt; Subject: why Leo
&gt;
&gt;
&gt; Because I have two nodes which were originally identical but are now
&gt; different and I want to see the differences.
&gt;
&gt; My outline loads a @file called ~/.leo/t/gen which contains a @button
&gt; with several @rclick children for commonly used tasks.  So I add a new
&gt; one, @rclick diff
&gt;
&gt;   selected = c.getSelectedPositions()
&gt;   open('/tmp/a_diff', 'w').write(selected[0].b)
&gt;   open('/tmp/b_diff', 'w').write(selected[1].b)
&gt;   import os
&gt;   os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")
&gt;
&gt; which is horrible for a number of reasons but also took only moments
&gt; to write.  And now, not only does this Leo session have a visual node
&gt; diff capability, but also every future session which loads ~/.leo/t/gen.
&gt;
&gt; When you can go from wanting to having a feature in less time than it
&gt; takes to write an email about it - well, that's "why Leo".
&gt;
&gt; (I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
&gt; handling SQL and an XML dialect I use a lot, it's a great way to manage
&gt; little snippet functions)
&gt;
&gt; Cheers -Terry
&gt;

My present thinking is that such tidbits will be lost unless they get put
in an official place.

I have a Leo/To be documented mail folder, and this message is going there
:-)  However, I think this subject would make a good Leo blog entry.

Edward

</t>
<t tx="ekr.20130806211959.17373">@nocolor

From: Haroldo Stenger &lt;haroldo.stenger@gmail.com&gt;

I'm slowly trying to grok leo. I love meld, it's simply the best text
comparison I've ever seen. I wonder if a greater bit of integration between
meld and leo is possible, and in which ways. Undoubtedly calling it as an
external process is better than anything.
</t>
<t tx="ekr.20130806211959.17374">@nocolor

From: wgw &lt;wgwinder@gmail.com&gt;


Useful!

For fun (and perhaps of some use), here is a brute compare of trees. I use
meld, which has a great interface.

I think I will set up a pyflakes button as well; I haven't seen it as part
of Leo, though the Leo error python messages are good.

-----------------------

def add_text(nd):
    """recursively add to text"""
    text =3D "\\n\\n&gt;&gt; " + nd.h
    text +=3D "\\n\\n%s" % nd.b
    for child in nd.children():
        text +=3D add_text(child)
    return text

selected =3D c.getSelectedPositions()
open('/tmp/a_diff', 'w').write(add_text(selected[0]).encode("utf-8"))
open('/tmp/b_diff', 'w').write(add_text(selected[1]).encode("utf-8"))
import os
os.system("meld /tmp/a_diff /tmp/b_diff &amp;")

-------------


Le vendredi 1 f=E9vrier 2013 11:08:30 UTC-8, Terry a =E9crit :
&gt;
&gt; Because I have two nodes which were originally identical but are now
&gt; different and I want to see the differences.
&gt;
&gt; My outline loads a @file called ~/.leo/t/gen which contains a @button
&gt; with several @rclick children for commonly used tasks.  So I add a new
&gt; one, @rclick diff
&gt;
&gt;   selected =3D c.getSelectedPositions()
&gt;   open('/tmp/a_diff', 'w').write(selected[0].b)
&gt;   open('/tmp/b_diff', 'w').write(selected[1].b)
&gt;   import os
&gt;   os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")
&gt;
&gt; which is horrible for a number of reasons but also took only moments
&gt; to write.  And now, not only does this Leo session have a visual node
&gt; diff capability, but also every future session which loads ~/.leo/t/gen.

&gt;
&gt; When you can go from wanting to having a feature in less time than it
&gt; takes to write an email about it - well, that's "why Leo".
&gt;
&gt; (I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
&gt; handling SQL and an XML dialect I use a lot, it's a great way to manage=

&gt; little snippet functions)
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130806211959.17375">From: &lt;fidelperez@gmail.com&gt;

This is my first post on this group, as I discovered your software only 
yesterday, but I am already migrating all my data, weblinks, etc, to it. 
Love it.

I found it because I was planning on programming something similar (by far 
more primitive of course), but *luckily* I found it just while I was 
starting with my first steps. What I also mean by this is its a rather 
difficult software to find by non programer users who could also greatly 
benefit from it. Im so glad I found it.

The main reason for me wanting a tool which can track different types of 
information (images, videos, etc), is to make such a program able not only 
to track the information just in the way I like it, but to also operate 
with it avoiding repetitive tasks for me.

Thanks for your software, Im really excited to have found it.
</t>
<t tx="ekr.20130807090137.11457"></t>
<t tx="ekr.20130807090137.11459"></t>
<t tx="ekr.20130807090137.11461"></t>
<t tx="ekr.20130807090137.11462"></t>
<t tx="ekr.20130807090137.11463">@language python
@ Matt Wilkie &lt;maphew@gmail.com&gt;

Here is a recipe for installing Leo from scratch on Windows (Win7 tested).
The only prerequisites are command line `wget` in PATH and an internet
connection.

About 50mb of files are downloaded and 200mb consumed when done.

Run this script from a console.

After this the directory "X:\\testing\\root" can be renamed and/or moved
anywhere.

To run leo in future sessions, simply call "x:\\path\\to\\root\\osgeo4w.bat
python apps\\Python27\\Scripts\\leo", either as a batch file or windows
shortcut.

**Important**: this is just a proof of concept. It is not ready for prime
time. Feedback welcome.
@c

mkdir X:\\testing
pushd X:\\testing

wget -O apt.exe --no-clobber
http://download.osgeo.org/osgeo4w/release/apt/apt-r1193M.exe
SET OSGEO4W_ROOT=%~dp0\\root
apt setup
apt update
apt install pyqt4 sip

call root\\osgeo4w.bat

wget --no-check-certificate
http://gist.github.com/maphew/5393935/raw/install-pip.py
python install-pip.py GO
python install-pip.py GO

pip install -i https://testpypi.python.org/pypi leo-editor

python apps\\Python27\\Scripts\\leo
</t>
<t tx="ekr.20130807090137.11464">From: vili &lt;viljem.tisnikar@gmail.com&gt;

Despite I am no programmer, I have been using Leo for some years now
as my "Intelligent PIM" - I organize my (complex) life with Leo.

Many thanks to Edward and others for the great application.
</t>
<t tx="ekr.20130807203905.16594">@language rest

From the thread: "Associate .Leo files to open with Leo when double click"

From: &lt;fidelperez@gmail.com&gt;

I guess others have had this idea but It would be great to include a small
file within the Quickstart guide which would associate files automatically.
(Or maybe asking for imput, which can be done through a Leo node and this
way the user learns about its functionality).

Also, I miss some more buttons or scripts in quick start guide, preferably
before the "programming" section, so when a new user opens it, he has had
the opportunity to do Ctrl+B on several scripts (for instance, showing in
the log the name of all the nodes within the selected one, having some
subnodes with numbers and doing math on them and showing the result on the
log pane, and as much "silly" but visual functions as possible so the user,
by going pressing ctrl+b on each, gets a bigger chance to understand what
is Leo. In my oppinion some users will just stop in the quickguide if they
are not presented with such a thing before going to docs.leo etc.

Another thing is the plugin activation, the description of the plugins is
not as accessible as it should be (opinions here, focusing in new users,
and as I always say, appreciating and fully grateful for Leo as is now),and
a script for activating them easier, been a week using Leo and still cant
quite activate, find the descriptions or use them freely... And if each
plugin or script had an example of use that would be priceless, for
instance, including them all in quickstart (both scripts, plugins branchs)
and then the new user could just go through all clicking on the examples
and just seeing Leo work and show its potential. I know some of those are
done but as I said, after a week or so I still am very confused...

Also, quickstartguide should be open by default (instead of current
Leo workbook) at least until the user changes some config and prevents that
from happening. Is there any "load previous tabs" functionality? (IE open
the Leo files which where open when it was closed the last time)
  
</t>
<t tx="ekr.20130807203905.16596">From the thread: Cannot open Leo files by double-click in Windows Explorer?
From: HansBKK &lt;hansbkk@gmail.com&gt;

This is a bit OT, but: for those like me who work in "portable" mode, 
there's a very cool tool called "PortableFileAssociator" that allows you to 
create a set of windows file associations, icons etc and enable/disable the 
whole profile at one time, without messing with the local system's registry.

Also handy for those not in portable mode, but working on different windows 
boxes and bored with having to tweak each one separately.
</t>
<t tx="ekr.20130807203905.16649"></t>
<t tx="ekr.20130807203905.16650">
In a Nutshell, The Leo Editor...

- has had 8,373 commits made by 35 contributors
- representing 246,619 lines of codeis mostly written in Python
- with an average number of source code comments
- has a well established, mature codebase
- maintained by a large development team
- with decreasing Y-O-Y commits
- took an estimated 64 years of effort (COCOMO model)
- starting with its first commit in February, 2008
- ending with its most recent commit 3 days ago

and this is missing the earlier years, from 2001 to 2008, before moving to bazaar and Launchpad.
</t>
<t tx="ekr.20130807203905.16651"></t>
<t tx="ekr.20130807203905.16652">Installing Leo on Windows

    Install Python from http://www.python.org/download/releases/

    Install either Qt, as described above.

    Install Leo. Get Leo’s .zip file from http://sourceforge.net/projects/leo/ You can unpack the .zip file anywhere, including Python’s site-packages folder, for example, C:\Python26\Lib\site-packages

    [optional] Generate/update a junction link from unpacked leo folder to ...\site-packages\leo:

    cd C:\Python26\Lib\site-packages\
    junction leo leo-4-6-2-final

    Create windows shortcut (edit paths as necessary):

    Target   =  C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py"
    Start in =  D:\code

    Associate .leo filetype batch file:

    ftype LeoFile=C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" "%*"
    assoc .leo=LeoFile

    [optional] Put this leo.bat in %PATH%:

    @C:\Python26\python.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" %*

For more information see:

Junction links:
    http://technet.microsoft.com/en-gb/sysinternals/bb896768.aspx,
    http://groups.google.com/group/leo-editor/msg/30116f9193241dc4
ftype:
    http://ss64.com/nt/ftype.html
assoc:
    http://ss64.com/nt/assoc.html
</t>
<t tx="ekr.20130807203905.16653">From: Associate .Leo files to open with Leo when double click, and some more noob confussion
From: Matt Wilkie &lt;maphew@gmail.com&gt;

In any case, please try downloading "create-leobat.bat" batch file to the
Leo directory and running from an admin-level command prompt:

   create-leobat c:\\path\\to\\python27\\python.exe register

http://bazaar.launchpad.net/~maphew/leo-editor/pypi-packaging/view/head:/create-leobat.bat

I wrote a leo script that creates the file association, which I hope to
include in the next release or on the Leo blog as a sample:
https://groups.google.com/d/msg/leo-editor/ANPuhuEIU9c/GTcpLvVB_WoJ.

To use it, copy everything between the triple curly braces {{{...}}}, but
not including the braces, and paste into an Leo window, then press [Ctrl-B].

It requires that Leo is started from an Admin level command shell (or that UAC is turned off).
</t>
<t tx="ekr.20130807203905.16654">===== From: Eoin &lt;eoinmccarthy@fastmail.fm&gt;

I got the association working on Windows 7 using:

    ftype LeoFile="C:\\Python322\\pythonw.exe" "C:\\Program Files (x86)\\Leo-4.9-final\\launchLeo.py" "%1"
    assoc .leo=3DLeoFile
    regsvr32 /i shell32.dll
    
===== From: Matt Wilkie &lt;maphew@gmail.com&gt;

&gt;&gt;regsvr32 /i shell32.dll

Just note that this command does a lot more than update file
associations, and may undo some other customizations you've done
(default program for camera preview, shortcut wizard behaviour, ...)
http://www.pcworld.com/article/126116/windows_tips_fix_windows_glitches_by_reregistering_your_dlls.html

===== From: HansBKK &lt;hansbkk@gmail.com&gt;

Here's my launch batch. Note nothing's actually installed::

    set HOME=E:\\aasync\\Data\\H_HOME
    cd \\aasync\\PortableApps\\leo-editor
    start "" "..\\CommonFiles\\Python27\\pythonw.exe" 
    "..\\CommonFiles\\Python27\\Lib\\site-packages\\leo-editor4\\launchLeo.py" %*
    exit
</t>
<t tx="ekr.20130807203905.16655"></t>
<t tx="ekr.20130807203905.16656">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

I continue to work feverishly on various aspects of static type checking.

That work lead to a discovery that may benefit you.  It's one of the most 
beautiful patterns I've ever created: it allows a program to simply and 
naturally build up huge strings without using any string operations.  
Generating an html file with minimal stress on the gc is an obvious 
application.  You could also say that the pattern creates a Pythonic way of 
using lisp-like algorithms, but more safely than in lisp.

Full details at the stc documentation page::
http://webpages.charter.net/edreamleo/stc/stc.html#a-beautiful-pattern-for-building-large-strings

</t>
<t tx="ekr.20130807203905.16657">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 10:02:40 AM UTC-6, Edward K. Ream wrote:

ReportTraverser uses this pattern at rev 288.  It is a remarkable 
simplification.
 

&gt; The revised r.div method will be something like::
&gt;
&gt;     def div(self,aList):
&gt;         compute old and new indents
&gt;         return [
&gt;             &lt;div&gt;, with old indent,
&gt;             aList, with new indent,
&gt;             &lt;/div&gt;, with old indent,
&gt;         ]
&gt;

This doesn't work!  aList won't have the proper indentation.  In 
particular, the following won't work::

    [['  ',z] for z in aList],

flatten_list will add the two spaces before the line, that is, before a 
newline. Instead, a hack is needed:

    return [
        div,
        join_list(aList,indent='  '),
        '\\n&lt;/div&gt;'
    ]

The new 'indent' keyword tells flatten_list to add the given indentation 
(two spaces, here), to strings that start with a newline.  The new code in 
flatten_list is::

        for i,item in enumerate(aList):
            if leading:                  yield leading
            for s in flatten_list(item):
                if indent:
                    if s.startswith('\\n'):
                        yield '\\n'+indent+s[1:]
                    else:
                        yield s
                else:
                    yield s
            if sep and i &lt; len(aList)-1: yield sep
            if trailing:                 yield trailing

The point is that the indentation must be "moved behind the newline".

Edward

</t>
<t tx="ekr.20130807203905.16658">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 2:01:17 PM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; This seems like a spiritual relative of "rope" data structure:
&gt;
&gt; http://en.wikipedia.org/wiki/Rope_(data_structure)
&gt;
&gt; http://www.sgi.com/tech/stl/Rope.html
&gt;

Thanks for these links.  Yes, there is a similarity.  However, the real 
beauty of new pattern is the flatten_list method.  It's the combination of 
the lists and flatten_list that gives the pattern real power.  We've just 
seen how the 'indent' keyword hack allows sophisticated processing of the 
lists.  I wouldn't expect more hacks to be needed, but I've been surprised 
before ;-)

Edward

</t>
<t tx="ekr.20130807203905.16659">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This seems like a spiritual relative of "rope" data structure:

http://en.wikipedia.org/wiki/Rope_(data_structure)

http://www.sgi.com/tech/stl/Rope.html
</t>
<t tx="ekr.20130807203905.16660">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; Generating an html file with minimal stress on the gc is an obvious 
&gt; application.

Nice.  An HTML specific approach which avoids things like the
r.div_end() construct is the LXML element factory:
http://lxml.de/tutorial.html#the-e-factory

Cheers -Terry

</t>
<t tx="ekr.20130807203905.16661">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Yes, it's indeed an interesting pattern.

It would seem more useful in faster languages than python though; in
python, string operations (and gc) are faster in comparison to executing
other code, whereas in fast, more static languages (C++, Java, Go) avoiding
GC gives you great benefits (I saw 5x perf increase reported for some Go
app when eliminating GC).

</t>
<t tx="ekr.20130807203905.16662">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thursday, January 3, 2013 3:28:52 AM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; Yes, it's indeed an interesting pattern. 
&gt;
&gt; It would seem more useful in faster languages than python though; in 
&gt; python, string operations (and gc) are faster in comparison to executing 
&gt; other code, whereas in fast, more static languages (C++, Java, Go) avoiding 
&gt; GC gives you great benefits (I saw 5x perf increase reported for some Go 
&gt; app when eliminating GC).
&gt;

Thanks for these remarks.  I've enjoyed thinking about them.  A few 
responses:

1. This is a smallish pattern--it can't change the world, except insofar as 
something beautiful changes the world.

2. Otoh, the pattern changes the way I think about lisp and lisp-like 
patterns.  That's not nothing. For the first time, it makes list-oriented  
programming pattern completely safe.  It does this because it doesn't 
matter what each component list contains, nor does it matter *at all* what 
the shape of any part of the tree is.  This makes the pattern completely 
flexible.

3. The pattern can be generalized.  The pattern I described uses a tree of 
component strings to describe a (large) resulting string.  But one can 
easily imagine using lists to hold anything at all (of whatever tree shape) 
and then use another version of flatten_list to compose results of other 
types.  Alternatively, rather than composing a result, the analog of 
flatten_list could process the tree of lists in other ways.  So the most 
general version of the pattern is:

A) The tree of lists can contain any data whatever, especially including 
None,
B) The "producers" (visitors) can create subtrees of whatever shape,
C) The analog of flatten_list is free to do anything whatever with the 
resulting tree.

I suspect that these features are what appeal to lisp programmers ;-)

4. I'm not sure whether the pattern is more useful in "faster" languages or 
not.  True, anything that helps a feeble language like C++ will seem useful 
:-)  But points 1-3 above have nothing to do with speed: they just make 
programming simpler, more flexible, more powerful and more fun.

Imo, gc issues are important both in Python and in C++.  For stc, the only 
way to get reproducible timing statistics for tests was to do the following 
before running the test::

    for z in (0,1,2): gc.collect(z)

The ReportTraverser class no longer contains *any* calls to string.join, so 
one could imagine that all strings used in the code would be interned.  The 
generated tree actually contains nothing but *references* to strings, and 
if all strings are interned the references will not themselves cause any 
new strings to be allocated.

Naturally, gc issues are even more important in language like C++ without a 
gc.  Lol.  The preceding paragraph is more important for C++ than in 
Python.  So yes, in this sense I agree with you completely that the pattern 
is more useful for "fast" languages than for Python.

Thanks, Ville, for provoking all these pleasant thoughts :-)

Edward

</t>
<t tx="ekr.20130807203905.16663">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Jan 1, 2013 at 9:48 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; Generating an html file with minimal stress on the gc is an obvious
&gt; &gt; application.
&gt;
&gt; Nice.  An HTML specific approach which avoids things like the
&gt; r.div_end() construct is the LXML element factory:
&gt; http://lxml.de/tutorial.html#the-e-factory
&gt;

Beautiful.  With the list framework the revised r.div method would be
something like::

    def div(self,aList):
        compute old and new indents
        return [
            &lt;div&gt;, with old indent,
            aList, with new indent,
            &lt;/div&gt;, with old indent,
        ]

An example of the pattern in use::

    return [
        ...
        r.div([
            contents of the div,
        ]),
        ...
    ]

Similarly for span, etc. Thanks for pointing this out.  This is too good to
ignore.  I'll do it soon.

Edward
</t>
<t tx="ekr.20130807203905.16664">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

Some people seem to think that it is difficult to understand how Leo
handles "clone wars":  differing values for a cloned nodes that appear
in several external files.  That\'s not true.  The rule is::

    **The last clone that Leo reads wins.**

That is, for any cloned node C, Leo takes the value of C.h and C.b to
be the values specified by the last copy that Leo reads.

There is only one complication::

    **Leo reads the entire outline before reading any external
files.**

Thus, if C appears in x.leo, y.py and z.py, Leo will choose the value
for C in x.py or y.py, depending on which @&lt;file&gt; node appears later
in the outline.

Notes:

1. Whenever Leo detects multiple values for C when opening an outline, Leo
   creates a "Recovered nodes" tree. This tree contains all the various
   values for C, nicely formatted so that it is easy to determine where the
   differences are.

2. I\'ve just refreshed my memory by looking at the code.  The relevant methods are:

    fc.getLeoFile # Reads the outline, then calls at.readAll to read all external files.
    at.indicateNodeChanged # Adds data to c.nodeConflictList
    cacher.reportChangedClone # Adds data to c.nodeConflictList
    fc.handleNodeConflicts # Creates "Recovered Nodes" node and its children.

3. The present code is the simplest code that could possibly work. There is
no way Leo is going to do AI in order to implement complex rules for which
clones are "more important" than others. Thus, if you use cross-file
clones, it is up to *you* to know these rules and handle any resulting
conflicts. Imo, the "Recovered Nodes" feature is a big step forward for
Leo, and makes it impossible to lose data unless you willfully refuse to
examine the data.
</t>
<t tx="ekr.20130807203905.16665">From: Joon Ro &lt;joonpyro@gmail.com&gt;

Thanks for the explanation. As a matter of fact, I was having hard time 
understanding this. 

I had my source file in a @shadow node, and then I had a backup of that 
file as @file node, which had clones of the nodes of the source @shadow 
file and some other codes that I stashed. 

Whenever I changed the source code externally with leo closed, when I open 
leo, it made recovered nodes. The problem was since @file was placed 
"later" in the outline, leo kept putting the new changes I made to old, 
instead of new.

Now I understand how this works. but I think in multiple external file 
cases, it would make more sense if leo checks the file modification time 
when it makes decision which node is new, instead of just depending on the 
order of files in the outline. In above case, it is natural for me to have 
actual source nodes on the top of the outline and backup nodes on the 
bottom. Please let me know what you think. 
</t>
<t tx="ekr.20130807203905.16666">@language rest

A **position** object represents a specific node in a Leo outline.

Equivalently, a position represents the state of a Leo generator, that is,
a specific node during a traversal of a Leo outline.

Because of clones, a node may appear arbitrarily many times in an outline,
so a node may appear at arbitrarily many positions in the outline.

For any position p, **p.v** is the vnode at position p.

A node's vnode never changes, regardless of where the node appears in the
outline, and regardless of whether the node is cloned or not.

**Positions become invalid when the outline changes.**

You may save and and use positions *provided* the outline remains unchanged.

Leo's generators deliver positions, one after each other, using a *single*
(ever-changing) position. As a result, scripts must use p.copy() to create
lists of positions. For example::

    aList = [p.copy() for p in c.rootPosition().subtree()]
</t>
<t tx="ekr.20130807203905.16667">Consider this example, where nodes with the same names are clones of each other::

+ Root
    + A
        - B
    + A
        - B
    - B

Leo's c.all_nodes() iterator will deliver 9 positions:

    1: Root
    2: A
    3: B
    4: A
    5: B
    6: B

*All* positions returned by a traversal are distinct.  Some examples:

- Position 2: A is different from position 4: A
  The former is the first child of root; the latter is the second child of root.
  
- The parent of position 3: B is A at childIndex 0 of Root.
  The parent of position 5: B is A at childIndex 1 of Root.
  The parent of position 6: B is Root. The childIndex of 6: B is 2.

</t>
<t tx="ekr.20130807203905.16668">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The following is a first draft of a unit-testing tutorial.  It will form 
the basis of a new help-for-unit-testing command, and may also become the 
introduction to Leo unit-testing chapter.

All comments are welcome.  Please let me know if anything is unclear.

-----

Leo makes it easy to create and run unit tests from individual outline 
nodes or trees.

A node whose headline starts with @tests defines a unit test.

The body text of the @test node contains a **self-contained** unit test.

For example, this creates a complete unit test::

    @test fails  (headline)
    assert False (body text)

To run this test, select the @test node and do:
&lt;alt-x&gt;run-selected-unit-tests-locally.
Leo will create and run the unit test automatically.

To see all of Leo's unit testing commands, do:
&lt;alt-x&gt;run&lt;tab&gt;

Leo pre-defines 'c', 'g' and 'p' in unit tests just as in scripts.

For more details about unit testing, see: 
http://leoeditor.com/unitTesting.html

**Notes for Leo developers**

leo/test/unitTest.leo contains all of Leo's own unit tests.

Running all tests is not necessary.  Just select::

    Active Unit Tests

and then do Alt-4 (run-selected-unit-tests-locally).

**Note**: Some tests will likely fail on machines other than EKR's.
You only need to be concerned about unit tests that start failing after you 
make your changes.

</t>
<t tx="ekr.20130807203905.16669"></t>
<t tx="ekr.20130807203905.16670">@wrap
@language rest

.. |br| raw:: html

   &lt;br /&gt;
   
**Leo completely integrates scripting and outlines.** |br|
Leo outlines are true Python objects, not just text.

\1. **Headlines naturally define types**, such as:

**@file** trees create external files. |br|
**@test** nodes and trees create unit tests. |br|
**@button** nodes create **script buttons**. |br|
**@command** nodes create user-defined commands. |br|
**@html** trees create web pages. |br|
**@settings** trees contain Leo settings.

\2. **Any node may contain a Leo script**:

A simple outline-aware markup language creates scripts |br|
and external files from outline nodes and trees.

\3. **Leo scripts have *easy* access to all outline data**:

All Leo scripts execute with these **predefined symbols**: |br|
**c** gives access to all outline data and all of Leo's code. |br|
**p** is the presently selected node in the script. |br|
**p.h** is the headline text; **p.b** is the body text. |br|
**g** is a module containing utility functions &amp; classes.

\4. **All parts of Leo are scriptable**, including: |br|

.. In short, all outline data are completely scriptable.
</t>
<t tx="ekr.20130807203905.16671">@language rest

Leo looks like relatively ordinary outline editor,
but it has unique scripting and data-organizing abilities.

Scripting
---------

- Any node in the outline may contain a Leo script.
- Leo can *compose* scripts from a node and its descendants.
- Leo scripts can *easily* access all the data in any outline.

Leo scripts can do things that can't be *imagined* in other editors.

Data-organizing
---------------

- Cloned nodes may appear many times in the same outline.
- Clones create views of data that persist indefinitely.
  Any set of nodes may appear in arbitrirly many views of the data.
- Headlines naturally describe the data contained in nodes.


Script nodes
------------

There are many ways to combine these capabilities.
</t>
<t tx="ekr.20130807203905.16672"></t>
<t tx="ekr.20130807203905.16673"></t>
<t tx="ekr.20130807203905.16674"></t>
<t tx="ekr.20130807203905.16675">@language rest

Adds configurable right-click menu items to nodes.
</t>
<t tx="ekr.20130807203905.16676"></t>
<t tx="ekr.20130807203905.16677"></t>
<t tx="ekr.20130807203905.16678">@language rest

- Don't read code: use g.trace and g.pdb instead.
- Where the bodies are hidden.
    - self.w in leoEditCommands.py
- Complex code that *can't* be simplified.
- The top 20 methods.  You must understand these *in general*.
    - k.masterKeyHandler.
    - qt.eventFilter.
    - 
    
    
** Add mandatory _kind fields to all g.Bunches.
</t>
<t tx="ekr.20130807203905.16679">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--20cf303f69e843800e04d18af3ee
Content-Type: text/plain; charset=ISO-8859-1

I am having some problems wrapping my head around how focus behaves
throughout leo.

IMO it would be a good idea to have only one place in Leo where focus is
explicitly set. E.g. g.setFocus(widget). This implementetation would
suffice:

def setFocus(widget):
  widget.setFocus()

Reasoning: it would be handy to add debugging stuff here, to see why my
focus stuff is failing in alt-x go-anywhere handling.

(My guess is treeFocusHelper only understanding focus being either in tree
or body, but no time to explore further now)



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


--20cf303f69e843800e04d18af3ee
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;I am having some problems wrapping my head around how focu=
s behaves throughout leo.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;IMO it would be a good i=
dea to have only one place in Leo where focus is explicitly set. E.g. g.set=
Focus(widget). This implementetation would suffice:&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;def setFocus(widget):&lt;/div&gt;&lt;div style&gt;=A0 w=
idget.setFocus()&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Reasoning: it would b=
e handy to add debugging stuff here, to see why my focus stuff is failing i=
n alt-x go-anywhere handling.&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;(My guess is treeFocusHelper only understan=
ding focus being either in tree or body, but no time to explore further now=
)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



--20cf303f69e843800e04d18af3ee--
</t>
<t tx="ekr.20130807203905.16680">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--047d7b417ed10845b104dba8f551
Content-Type: text/plain; charset=ISO-8859-1

On Sun, Dec 23, 2012 at 2:30 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; I am having some problems wrapping my head around how focus behaves
&gt; throughout leo.
&gt;
&gt; IMO it would be a good idea to have only one place in Leo where focus is
&gt; explicitly set. E.g. g.setFocus(widget). This implementetation would
&gt; suffice:
&gt;
&gt; def setFocus(widget):
&gt;   widget.setFocus()
&gt;
&gt; Reasoning: it would be handy to add debugging stuff here, to see why my
&gt; focus stuff is failing in alt-x go-anywhere handling.
&gt;
&gt; (My guess is treeFocusHelper only understanding focus being either in tree
&gt; or body, but no time to explore further now)
&gt;

In fact, there is only one such place: c.outerUpdate.  The various
xWantsFocus methods simply set ivars, which c.outerUpdate uses to set the
focus when a command completes.

The various xWantsFocusNow methods call c.outerUpdate immediately.  Usually
we don\'t want to do this, because it could cause screen flash, but
sometimes the immediate update is essential.

I\'ve marked this thread as a topic for implementers.  Such things will form
the basis for documentation for my successors.

Edward

--047d7b417ed10845b104dba8f551
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Sun, Dec 23, 2012 at 2:30 PM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;I am having some problems w=
rapping my head around how focus behaves throughout leo.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=
&gt;IMO it would be a good idea to have only one place in Leo where focus is e=
xplicitly set. E.g. g.setFocus(widget). This implementetation would suffice=
:&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;def setFocus(widget):&lt;/div&gt;&lt;div&gt;=A0 widget.setFocus()&lt;/=
div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Reasoning: it would be handy to add debugging stuff=
 here, to see why my focus stuff is failing in alt-x go-anywhere handling.&lt;=
/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(My guess is treeFocusHelper only understanding focus b=
eing either in tree or body, but no time to explore further now)&lt;/div&gt;&lt;/div=
&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In fact, there is only one such place: c.=
outerUpdate.=A0 The various xWantsFocus methods simply set ivars, which c.o=
uterUpdate uses to set the focus when a command completes.&lt;br&gt;
&lt;br&gt;The various xWantsFocusNow methods call c.outerUpdate immediately.=A0 U=
sually we don&amp;#39;t want to do this, because it could cause screen flash, b=
ut sometimes the immediate update is essential.&lt;br&gt;&lt;br&gt;I&amp;#39;ve marked this=
 thread as a topic for implementers.=A0 Such things will form the basis for=
 documentation for my successors.&lt;br&gt;
&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--047d7b417ed10845b104dba8f551--
</t>
<t tx="ekr.20130807203905.16681">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--089e0122f80868cb1b04dce55d84
Content-Type: text/plain; charset=ISO-8859-1

Someone may be interested in investigating a free CI system for Leo:

https://travis-ci.org/

This could e.g. create debian packages for daily builds, run unit tests,
check stuff with lint, try compiling with python3 so we (*cough*) wouldn\'t
have accidental print statements in the source...


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



--089e0122f80868cb1b04dce55d84
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div&gt;Someone may be interested in investigating a free CI system for Leo:&lt;/=
div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"https://travis-ci.org/"&gt;https://travis-c=
i.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This could e.g. create debian packages =
for daily builds, run unit tests, check stuff with lint, try compiling with=
 python3 so we (*cough*) wouldn&amp;#39;t have accidental print statements in t=
he source...&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den-US"&gt;http://groups.google.com/group/leo-editor?hl=3Den-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--089e0122f80868cb1b04dce55d84--
</t>
<t tx="ekr.20130807203905.16682">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--14dae9cce074f39ccd04dce8d585
Content-Type: text/plain; charset=UTF-8

On Fri, May 17, 2013 at 2:59 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Someone may be interested in investigating a free CI system for Leo:
&gt;
&gt; https://travis-ci.org/
&gt;

Thanks for the link.  Looks like we would need a github repo.

Edward

--14dae9cce074f39ccd04dce8d585
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Fri, May 17, 2013 at 2:59 AM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div&gt;Someone may be interested in investigat=
ing a free CI system for Leo:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"https://t=
ravis-ci.org/" target=3D"_blank"&gt;https://travis-ci.org/&lt;/a&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the link.=C2=A0 Looks like we w=
ould need a github repo.&lt;br&gt;&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--14dae9cce074f39ccd04dce8d585--
</t>
<t tx="ekr.20130807203905.16683">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

As the title indicates, this thread will consist of what could be
called an online engineering notebook.  Please feel free to ignore.

Key bindings are one of the most difficult and complex parts of Leo.
This can't be helped: Leo's goals for key bindings are ambitious.

The present bug, https://bugs.launchpad.net/leo-editor/+bug/879331, is
due to a significant design oversight.  Redefining a binding for a
command x to key y affects not just command x but all other commands
presently bound to y!

Alas, the present binding tables are already complex.  I am almost at
the limit of what I can hold in working memory as it is.  Adding
significant additional complexity risks creating virtually impossible-
to-understand code.

There are two conflicting desires in play here:

1. To make the minimum changes needed.  While reasonable in itself,
this promises to increase overall complexity.

2. To decrease overall complexity.  While reasonable in itself, this
promises significant overall changes to the code.

Combining these two desires yields a strategy of finding a minimal
change that reduces overall complexity :-)  It's a big ask.
</t>
<t tx="ekr.20130807203905.16684">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ramblings relevant to Leo, by the PyQt lead developer:

http://www.riverbankcomputing.co.uk/static/Docs/dip/architecture.html#the-realities-of-software-development

esp "The Myth of Toolkit Independence"



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.
</t>
<t tx="ekr.20130807203905.16685">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Fri, Apr 27, 2012 at 1:49 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Ramblings relevant to Leo, by the PyQt lead developer:...esp "The Myth of Toolkit Independence"

Leo\'s core benefits greatly from toolkit independence, despite some
(usually minor) extra complexity. Obviously, this has not constrained
what plugins can do.

This is pretty much a non-issue for Leo.  The reason is clear enough:
the hundreds of commands defined in Leo\'s core are mostly
straightforward renditions of emacs text commands.  There, the
constraints of an abstraction layer do not pinch.  Furthermore, using
common gui-level code is a good application of the DRY (Don\'t Repeat
Yourself) principle, as recent bug fixes in the common code
illustrate.

The code for ensuring that the outline and body text are updated
properly (and in synch!) is much more difficult, but the difficulties
are fundamental: they have almost nothing to do with actual guis.

In short, I think Leo\'s design uses the best of the gui-dependent and
gui-independent approaches.

Edward
</t>
<t tx="ekr.20130807203905.16773"></t>
<t tx="ekr.20130807203905.16800">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_153_552152.1360113254750
Content-Type: text/plain; charset=ISO-8859-1

I would like to see a fuller outline view of Leo trees. So instead of 
seeing one body only and the tree of headlines, I want to display all the 
parts of the tree (all bodies and subheadings) as continuous text, much 
like a word processor outline. 

I can almost do that myself in the preview panel. Here is a  very sloppy 
"preview-tree" script (good for a laugh for anyone who does much Leo 
programming!). 

result = ["\\n\\n&gt;"+p.h,"\\n"+p.b]
for p2 in p.subtree():
    result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )
    for i in p2.b.split(\'\\n\'):    
        result.append("\\n|  " + i)
s = \'\'.join(result)

g.app.gui.runScrolledMessageDialog(c=c, msg = g.u(\'rst:\\n\') + s )


This needs a total redesign, but it does give an idea of the results I want 
to get: the whole tree (not necessarily in rst format).

I think I could probably get this to work correctly, but the really tough 
part, I think, is being able to click somewhere on the tree preview and go 
to the pertinent node in the headline/body panels. 

This looks like a feature that Word has, but that Leo doesn\'t, as far as I 
can tell. Or am I missing something (besides the fact that such things can 
be done in Leo almost magically!) ?

Any suggestions for a full tree preview ? 
</t>
<t tx="ekr.20130807203905.16801">@language rest

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 22:43:30 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; It wouldn\'t be hard to do something with HTML formatting and links to
&gt; display the outline and jump to a node when you click on the display,
&gt; I\'ll try and get to it.

1) Paste the code below into a node, then hit the "run-script"
button.

2) Then select a node with some hierarchy, not too much.

3) Then right click on the panel dividers between the tree / body / log
panes, you should see a context menu with an "Open Window" sub-menu,
which should contain an "Overview" item.  

You should get a continuous view of the hierarchy with clickable
headlines which take you to the node.

You can select multiple nodes in step 2 above, with normal list Ctrl-
or Shift- click operations.  Nodes are shown in the overview in the
order selected.  This is how you\'d generate the overview for a whole
outline - i.e. contract the whole outline, click the first top level
node, shift click the last top level node, and then step 3.

You can also embed the overview in a pane in the Leo window by select
"Insert" rather than "Open window" in step 3, click the action button
and select Overview.

This was the low hanging fruit, based on code used in bookmarks.py.  A
refresh button for the outline wouldn\'t be too hard, but right now
you need to close the window / pane and open it again to refresh.

Cheer -Terry

--- cut here ---
@language python

from PyQt4 import QtGui, QtCore
from xml.sax.saxutils import escape

def add_html(html, nd):
    """recursively add to an html list with links to nodes"""
    
    unl = nd.get_UNL()
    html.append("&lt;div class=\'level\'&gt;"
        "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" %
        (unl, unl, escape(nd.h)))
    html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b))
    for child in nd.children():
        add_html(html, child)
    html.append("&lt;/div&gt;")

def make_overview(c):
    """build the overview widget"""

    te = QtGui.QTextBrowser()
    te.setReadOnly(True)
    te.setOpenLinks(False)
    
    def anchorClicked(url, c=c):
        url = str(url.toString())
        g.handleUrl(url,c=c,p=c.p)
    
    te.anchorClicked.connect(anchorClicked)
    
    html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt;
    .level .level {margin-left: 1.5em}
    a {text-decoration: none; font-size: 120%}
    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""]
    
    for nd in c.getSelectedPositions():
        add_html(html, nd)

    html.append("&lt;/body&gt;&lt;/html&gt;") 
    
    html = \'\\n\'.join(html)
    
    te.setHtml(html)
    
    return te

class OverviewPaneProvider:
    def __init__(self, c):
        self.c = c
        # Careful: we may be unit testing.
        if hasattr(c, \'free_layout\'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[(\'Overview\', \'_add_overview_pane\')]
    def ns_provide(self, id_):
        if id_ == \'_add_overview_pane\':
            w = make_overview(c)
            return w
    def ns_title(self, id_):
        if id_ == \'_add_overview_pane\':
            return "Leo Outline Overview"
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        return "outline overview window"

OverviewPaneProvider(c)

--- cut here ---
</t>
<t tx="ekr.20130807203905.16802">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

There is a separate option when editing @file nodes
</t>
<t tx="ekr.20130807203905.16803">From: "william.winder@ubc.ca" &lt;wgwinder@gmail.com&gt;

Great! Thanks for looking into this. I think it would be a nice feature --
it would make an overview of the tree one of the possible views.
</t>
<t tx="ekr.20130807203905.16804">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 17:14:14 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I would like to see a fuller outline view of Leo trees. So instead of 
&gt; seeing one body only and the tree of headlines, I want to display all the 
&gt; parts of the tree (all bodies and subheadings) as continuous text, much 
&gt; like a word processor outline. 
&gt; 
&gt; I can almost do that myself in the preview panel. Here is a  very sloppy 
&gt; "preview-tree" script (good for a laugh for anyone who does much Leo 
&gt; programming!). 
&gt; 
&gt; result = ["\\n\\n&gt;"+p.h,"\\n"+p.b]
&gt; for p2 in p.subtree():
&gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )
&gt;     for i in p2.b.split(\'\\n\'):    
&gt;         result.append("\\n|  " + i)
&gt; s = \'\'.join(result)
&gt; 
&gt; g.app.gui.runScrolledMessageDialog(c=c, msg = g.u(\'rst:\\n\') + s )
&gt; 
&gt; 
&gt; This needs a total redesign, but it does give an idea of the results I want 
&gt; to get: the whole tree (not necessarily in rst format).
&gt; 
&gt; I think I could probably get this to work correctly, but the really tough 
&gt; part, I think, is being able to click somewhere on the tree preview and go 
&gt; to the pertinent node in the headline/body panels. 
&gt; 
&gt; This looks like a feature that Word has, but that Leo doesn\'t, as far as I 
&gt; can tell. Or am I missing something (besides the fact that such things can 
&gt; be done in Leo almost magically!) ?
&gt; 
&gt; Any suggestions for a full tree preview ? 

I think this has been requested before and Ville did something possibly
using QtQuick or something, a scrolley flicky thing :-)

Ah yes,
https://groups.google.com/forum/?fromgroups=#!topic/leo-editor/Zs-5jKjPAB0

...and... I think I\'m going to have to kill me Leo session after doing
nb-all on a large outline, so be warned - nb-subtree is probably
smarter.
</t>
<t tx="ekr.20130807203905.16805">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_281_10283940.1360256002248
Content-Type: text/plain; charset=ISO-8859-1


On Thursday, February 7, 2013 6:21:51 AM UTC-8, Terry wrote:
&gt;
&gt; On Wed, 6 Feb 2013 22:28:38 -0800 
&gt; Matt Wilkie &lt;map...@gmail.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; neat! Thanks Terry. 
&gt; &gt; 
&gt; &gt; Are the links in the overview supposed to open up a browser window? The 
&gt; &gt; alt-tip text gives an in-Leo hiearchy, e.g. 
&gt; "B:\\code\\dropbox-code.leo#leo 
&gt; &gt; stuff--&gt;Overview of selected nodes" but clicking goes to 
&gt; &gt; http://www.google.ca/, and in Internet Explorer even though Firefox is 
&gt; my 
&gt; &gt; default browser. 
&gt;
&gt; No, that\'s not right, they\'re supposed to just select the node they 
&gt; belong to.  I assume it was working for Bill the OP, and it works for 
&gt; me. 
&gt;
&gt; Bill - which OS are you using?  I wonder if it\'s a unix/windows path 
&gt; thing, I\'m using Ubuntu. 


Me too -- ubuntu 12.04. Everything works great. Whenever I click a headline 
link, the window hides and I go to the leo node, as expected. 

My tooltip gives the leo hierarchy of the node (path/leo file -&gt; tree -&gt; 
node).

 


&gt; &gt; And, more generally, can these hover-over-pane-divider-then-right-click 
&gt; &gt; actions be made available any other way? Like a drop down menu from a 
&gt; &gt; button or alt-x command or something. 
&gt;
&gt; What, you mean instead of being completely hidden where no one will 
&gt; ever find them?  :-)  Most of them (not the Open Window variants of 
&gt; course) rely on the context provided by your selection of a particular 
&gt; divider, insert-where, delete-which etc. 
&gt;

I wonder whether a rclick on the overview button might remember the window 
id and close it.... (but I am way beyond my depth here...)
 
</t>
<t tx="ekr.20130807203905.16806">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--f46d0444029a613ce104d5088100
Content-Type: text/plain; charset=ISO-8859-1

On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I would like to see a fuller outline view of Leo trees. So instead of
&gt; seeing one body only and the tree of headlines, I want to display all the
&gt; parts of the tree (all bodies and subheadings) as continuous text, much
&gt; like a word processor outline.


I use *"r-click &gt; Edit in ..."*  for this purpose. It\'s a poor man\'s
workaround. Something integrated would be much nicer. Just thought I\'d
mention it for anyone looking for something they might be able to use right
away.

-matt


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d0444029a613ce104d5088100
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto=
:wgwinder@gmail.com" target=3D"_blank"&gt;wgwinder@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wr=
ote:&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;&lt;blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;

I would like to see a fuller outline view of Leo trees. So instead of seein=
g one body only and the tree of headlines, I want to display all the parts =
of the tree (all bodies and subheadings) as continuous text, much like a wo=
rd processor outline.=A0&lt;/blockquote&gt;

&lt;/div&gt;&lt;br&gt;I use &lt;i&gt;&amp;quot;r-click &amp;gt; Edit in ...&amp;quot;&lt;/i&gt;=A0 for this pur=
pose. It&amp;#39;s a poor man&amp;#39;s workaround. Something integrated would be m=
uch nicer. Just thought I&amp;#39;d mention it for anyone looking for something=
 they might be able to use right away.&lt;br&gt;

&lt;br&gt;-matt&lt;br&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d0444029a613ce104d5088100--
</t>
<t tx="ekr.20130807203905.16807">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 7 Feb 2013 08:53:22 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I wonder whether a rclick on the overview button might remember the window 
&gt; id and close it.... (but I am way beyond my depth here...)

So this got way more complicated than I thought real fast, but got done
in the end anyway.

 - rclick / mclick don\'t activate the anchorClicked event, only lclick
 - ok, so use Ctrl-lclick to close, but
 - anchorClicked doesn\'t know the keyboard modifiers like a regular
   event, only the url
 - so change the script (new version below) to track modifiers
   separately
 - but closing the overview window still leaves the top level
   window with a placeholder in it, so I had to modify
   nested_splitter, new version pushed to launchpad / available
   in snap-shot tomorrow

Cheers -Terry

--- cut here ---
@language python

from PyQt4 import QtGui, QtCore
from xml.sax.saxutils import escape

def add_html(html, nd):
    """recursively add to an html list with links to nodes"""
    
    unl = nd.get_UNL()
    html.append("&lt;div class=\'level\'&gt;"
        "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" %
        (unl, unl, escape(nd.h)))
    html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b))
    for child in nd.children():
        add_html(html, child)
    html.append("&lt;/div&gt;")

def make_overview(c):
    """build the overview widget"""

    te = QtGui.QTextBrowser()
    te.setReadOnly(True)
    te.setOpenLinks(False)
    
    def anchorClicked(url, c=c, te=te):
        
        url = str(url.toString())
        g.handleUrl(url,c=c,p=c.p)
        
        if te.ctrl_click:
            te.deleteLater()
        
    te.anchorClicked.connect(anchorClicked)
    
    def mousePressEvent(event, te=te, original=te.mousePressEvent):
        te.ctrl_click = bool(event.modifiers() &amp; QtCore.Qt.ControlModifier)
        original(event)
    
    te.mousePressEvent = mousePressEvent
    
    html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt;
    .level .level {margin-left: 1.5em}
    a {text-decoration: none; font-size: 120%}
    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""]
    
    for nd in c.getSelectedPositions():
        add_html(html, nd)

    html.append("&lt;/body&gt;&lt;/html&gt;") 
    
    html = \'\\n\'.join(html)
    
    te.setHtml(html)
    
    return te

class OverviewPaneProvider:
    def __init__(self, c):
        self.c = c
        # Careful: we may be unit testing.
        if hasattr(c, \'free_layout\'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[(\'Overview\', \'_add_overview_pane\')]
    def ns_provide(self, id_):
        if id_ == \'_add_overview_pane\':
            w = make_overview(c)
            return w
    def ns_title(self, id_):
        if id_ == \'_add_overview_pane\':
            return "Leo Outline Overview"
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        return "outline overview window"

OverviewPaneProvider(c)

--- cut here ---


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16808">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--047d7b621a64dd83b804d51c8e3c
Content-Type: text/plain; charset=ISO-8859-1

neat! Thanks Terry.

Are the links in the overview supposed to open up a browser window? The
alt-tip text gives an in-Leo hiearchy, e.g. "B:\\code\\dropbox-code.leo#leo
stuff--&gt;Overview of selected nodes" but clicking goes to
http://www.google.ca/, and in Internet Explorer even though Firefox is my
default browser.

And, more generally, can these hover-over-pane-divider-then-right-click
actions be made available any other way? Like a drop down menu from a
button or alt-x command or something.

cheers,

-matt


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--047d7b621a64dd83b804d51c8e3c
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

neat! Thanks Terry.&lt;br&gt;&lt;br&gt;Are the links in the overview supposed to open u=
p a browser window? The alt-tip text gives an in-Leo hiearchy, e.g. &amp;quot;B=
:\\code\\dropbox-code.leo#leo stuff--&amp;gt;Overview of selected nodes&amp;quot; but=
 clicking goes to &lt;a href=3D"http://www.google.ca/"&gt;http://www.google.ca/&lt;/=
a&gt;, and in Internet Explorer even though Firefox is my default browser.&lt;br&gt;

&lt;br&gt;And, more generally, can these hover-over-pane-divider-then-right-click=
 actions be made available any other way? Like a drop down menu from a butt=
on or alt-x command or something.&lt;br&gt;&lt;br&gt;cheers,&lt;br&gt;&lt;br&gt;-matt&lt;br&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--047d7b621a64dd83b804d51c8e3c--
</t>
<t tx="ekr.20130807203905.16809">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 11:25:05 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; Makes me think that Shift-Ctrl-Click should close the panel it\'s on
&gt; instead of all this futzing.

Turns out to be harder than I thought, so I\'ve settled for a minor
re-ordering of the submenu items to make Remove easier to find.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16810">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_1781_12150916.1360123251546
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks! That plugin does both more and less than I want: more, because I=20
get a full and nicely formatted window with editable text boxes; less,=20
since it doesn\'t write any edited text back to the tree.=20

My fumbling tinkering would go towards not editing in the preview=20
window/pane at all, and just having a keystroke or click scroll the editing=
=20
pane to the right node in Leo. But that would mean that the preview panel=
=20
would have have to be properly indexed so that from the cursor position in=
=20
the panel the plugin could find the proper node back in the Leo panel.=20
 (Kludgy way: put the node id in the text!)
=20
Thanks for the suggestion.

Bill=20

Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :
&gt;
&gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)=20
&gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:=20
&gt;
&gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of=
=20
&gt; &gt; seeing one body only and the tree of headlines, I want to display all=
=20
&gt; the=20
&gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, much=
=20
&gt; &gt; like a word processor outline.=20
&gt; &gt;=20
&gt; &gt; I can almost do that myself in the preview panel. Here is a  very slopp=
y=20
&gt; &gt; "preview-tree" script (good for a laugh for anyone who does much Leo=20
&gt; &gt; programming!).=20
&gt; &gt;=20
&gt; &gt; result =3D ["\\n\\n&gt;"+p.h,"\\n"+p.b]=20
&gt; &gt; for p2 in p.subtree():=20
&gt; &gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )=20
&gt; &gt;     for i in p2.b.split(\'\\n\'):    =20
&gt; &gt;         result.append("\\n|  " + i)=20
&gt; &gt; s =3D \'\'.join(result)=20
&gt; &gt;=20
&gt; &gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n\') + s )=
=20
&gt; &gt;=20
&gt; &gt;=20
&gt; &gt; This needs a total redesign, but it does give an idea of the results I=
=20
&gt; want=20
&gt; &gt; to get: the whole tree (not necessarily in rst format).=20
&gt; &gt;=20
&gt; &gt; I think I could probably get this to work correctly, but the really=20
&gt; tough=20
&gt; &gt; part, I think, is being able to click somewhere on the tree preview and=
=20
&gt; go=20
&gt; &gt; to the pertinent node in the headline/body panels.=20
&gt; &gt;=20
&gt; &gt; This looks like a feature that Word has, but that Leo doesn\'t, as far a=
s=20
&gt; I=20
&gt; &gt; can tell. Or am I missing something (besides the fact that such things=
=20
&gt; can=20
&gt; &gt; be done in Leo almost magically!) ?=20
&gt; &gt;=20
&gt; &gt; Any suggestions for a full tree preview ?=20
&gt;
&gt; I think this has been requested before and Ville did something possibly=
=20
&gt; using QtQuick or something, a scrolley flicky thing :-)=20
&gt;
&gt; Ah yes,=20
&gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/Zs-5jKjP=
AB0=20
&gt;
&gt; ...and... I think I\'m going to have to kill me Leo session after doing=20
&gt; nb-all on a large outline, so be warned - nb-subtree is probably=20
&gt; smarter.=20
&gt;
&gt; Cheers -Terry=20
&gt;
&gt; &gt; Bill=20
&gt; &gt;=20
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_1781_12150916.1360123251546
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks! That plugin does both more and less than I want: more, because I ge=
t a full and nicely formatted window with editable text boxes; less, since =
it doesn\'t write any edited text back to the tree.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=
&gt;My fumbling tinkering would go towards not editing in the preview window/p=
ane at all, and just having a keystroke or click scroll the editing pane to=
 the right node in Leo. But that would mean that the preview panel would ha=
ve have to be properly indexed so that from the cursor position in the pane=
l the plugin could find the proper node back in the Leo panel. &amp;nbsp;(Kludg=
y way: put the node id in the text!)&lt;/div&gt;&lt;div&gt;&lt;span style=3D"font-size: 13=
px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the suggestion.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=
/div&gt;&lt;div&gt;Bill&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8=
, Terry a =E9crit&amp;nbsp;:&lt;blockquote class=3D"gmail_quote" style=3D"margin: =
0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;On Tue=
, 5 Feb 2013 17:14:14 -0800 (PST)
&lt;br&gt;wgw &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscated-mailto=
=3D"r7mA7oaRx2cJ"&gt;wgwi...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; I would like to see a fuller outline view of Leo trees. So instead=
 of=20
&lt;br&gt;&amp;gt; seeing one body only and the tree of headlines, I want to display =
all the=20
&lt;br&gt;&amp;gt; parts of the tree (all bodies and subheadings) as continuous text,=
 much=20
&lt;br&gt;&amp;gt; like a word processor outline.=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; I can almost do that myself in the preview panel. Here is a &amp;nbsp;=
very sloppy=20
&lt;br&gt;&amp;gt; "preview-tree" script (good for a laugh for anyone who does much L=
eo=20
&lt;br&gt;&amp;gt; programming!).=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; result =3D ["\\n\\n&amp;gt;"+p.h,"\\n"+p.b]
&lt;br&gt;&amp;gt; for p2 in p.subtree():
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; result.append("\\n\\n&amp;gt;&amp;gt;"+p2.h + "\\n\\n" )
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; for i in p2.b.split(\'\\n\'): &amp;nbsp; &amp;nbsp;
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result.append("\\n| &amp;nbsp;" + i)
&lt;br&gt;&amp;gt; s =3D \'\'.join(result)
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; g.app.gui.&lt;wbr&gt;runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n=
\') + s )
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; This needs a total redesign, but it does give an idea of the resul=
ts I want=20
&lt;br&gt;&amp;gt; to get: the whole tree (not necessarily in rst format).
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; I think I could probably get this to work correctly, but the reall=
y tough=20
&lt;br&gt;&amp;gt; part, I think, is being able to click somewhere on the tree previe=
w and go=20
&lt;br&gt;&amp;gt; to the pertinent node in the headline/body panels.=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; This looks like a feature that Word has, but that Leo doesn\'t, as =
far as I=20
&lt;br&gt;&amp;gt; can tell. Or am I missing something (besides the fact that such th=
ings can=20
&lt;br&gt;&amp;gt; be done in Leo almost magically!) ?
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; Any suggestions for a full tree preview ?=20
&lt;br&gt;
&lt;br&gt;I think this has been requested before and Ville did something possibly
&lt;br&gt;using QtQuick or something, a scrolley flicky thing :-)
&lt;br&gt;
&lt;br&gt;Ah yes,
&lt;br&gt;&lt;a href=3D"https://groups.google.com/forum/?fromgroups=3D#!topic/leo-ed=
itor/Zs-5jKjPAB0" target=3D"_blank"&gt;https://groups.google.com/&lt;wbr&gt;forum/?f=
romgroups=3D#!topic/leo-&lt;wbr&gt;editor/Zs-5jKjPAB0&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;...and... I think I\'m going to have to kill me Leo session after doing
&lt;br&gt;nb-all on a large outline, so be warned - nb-subtree is probably
&lt;br&gt;smarter.
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;
&lt;br&gt;&amp;gt; Bill=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_1781_12150916.1360123251546--
</t>
<t tx="ekr.20130807203905.16811">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 09:01:23 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; One question: is there a  way to delete an inserted pane?  It  looks useful 
&gt; to have an inserted pane, but refreshing will require killing the pane and 
&gt; reinserting....

Yes, although a bit putzy.  Right click on the panel divider adjacent
to the pane, it may be above or below or left or right of it.  The panes
either side of the divider will be highlighted blue and orange.  There
will be an option to "Delete 1 left" or "Delete 1 below" or similar, if
that seems to refer to the panel you want to delete, that\'s your option.

If the target panel seems to be joined with another (i.e. 2 not 1
above) try right clicking a different divider to start with.

Makes me think that Shift-Ctrl-Click should close the panel it\'s on
instead of all this futzing.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16812">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 7 Feb 2013 08:21:51 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Wed, 6 Feb 2013 22:28:38 -0800
&gt; Matt Wilkie &lt;maphew@gmail.com&gt; wrote:
...
&gt; &gt; And, more generally, can these hover-over-pane-divider-then-right-click
&gt; &gt; actions be made available any other way? Like a drop down menu from a
&gt; &gt; button or alt-x command or something.  
&gt; 
&gt; What, you mean instead of being completely hidden where no one will
&gt; ever find them?  :-)  Most of them (not the Open Window variants of
&gt; course)

But it occurs to me that it might be the open window variants you want,
specifically the code to make a button / command to open a window with
a particular panel in it.  That would be this:

if hasattr(c, \'free_layout\'):
    splitter = c.free_layout.get_top_splitter()
    if splitter:
        splitter.open_window(action=\'_add_overview_pane\')

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16813">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 22:28:38 -0800
Matt Wilkie &lt;maphew@gmail.com&gt; wrote:

&gt; neat! Thanks Terry.
&gt; 
&gt; Are the links in the overview supposed to open up a browser window? The
&gt; alt-tip text gives an in-Leo hiearchy, e.g. "B:\\code\\dropbox-code.leo#leo
&gt; stuff--&gt;Overview of selected nodes" but clicking goes to
&gt; http://www.google.ca/, and in Internet Explorer even though Firefox is my
&gt; default browser.

No, that\'s not right, they\'re supposed to just select the node they
belong to.  I assume it was working for Bill the OP, and it works for
me.

Bill - which OS are you using?  I wonder if it\'s a unix/windows path
thing, I\'m using Ubuntu.

&gt; And, more generally, can these hover-over-pane-divider-then-right-click
&gt; actions be made available any other way? Like a drop down menu from a
&gt; button or alt-x command or something.

What, you mean instead of being completely hidden where no one will
ever find them?  :-)  Most of them (not the Open Window variants of
course) rely on the context provided by your selection of a particular
divider, insert-where, delete-which etc.

Probably the most friendly would be a button which pops up an overlay
over the UI where you can select which pane to delete, or where to
insert, etc.  But that would be hard.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16814">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_198_11760886.1360170083672
Content-Type: text/plain; charset=ISO-8859-1

Excellent! This is really a great help for me. I\'m still experimenting, but 
one thing I will find useful is that I can open several of these panes and 
navigate through each of the "views". Plus (and this has been a longtime 
wishlist item for those with fading sight), I can increase the text size 
for reading big chunks of text. 

(Another plus, and this is a big one, I can actually read your code well 
enough that I start to have some inkling about how to do this kind of 
addition to Leo. I could never begin to write it myself, but Leo makes it 
accessible even for shambling hackers.)

One question: is there a  way to delete an inserted pane?  It  looks useful 
to have an inserted pane, but refreshing will require killing the pane and 
reinserting.... 

I\'m going to use this a lot -- many thanks!

Bill

On Wednesday, February 6, 2013 7:36:41 AM UTC-8, Terry wrote:
&gt;
&gt; On Tue, 5 Feb 2013 22:43:30 -0600 
&gt; Terry Brown &lt;terry_...@yahoo.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; It wouldn\'t be hard to do something with HTML formatting and links to 
&gt; &gt; display the outline and jump to a node when you click on the display, 
&gt; &gt; I\'ll try and get to it. 
&gt;
&gt; 1) Paste the code below into a node, then hit the "run-script" 
&gt; button. 
&gt;
&gt; 2) Then select a node with some hierarchy, not too much. 
&gt;
&gt; 3) Then right click on the panel dividers between the tree / body / log 
&gt; panes, you should see a context menu with an "Open Window" sub-menu, 
&gt; which should contain an "Overview" item.   
&gt;
&gt; You should get a continuous view of the hierarchy with clickable 
&gt; headlines which take you to the node. 
&gt;
&gt; You can select multiple nodes in step 2 above, with normal list Ctrl- 
&gt; or Shift- click operations.  Nodes are shown in the overview in the 
&gt; order selected.  This is how you\'d generate the overview for a whole 
&gt; outline - i.e. contract the whole outline, click the first top level 
&gt; node, shift click the last top level node, and then step 3. 
&gt;
&gt; You can also embed the overview in a pane in the Leo window by select 
&gt; "Insert" rather than "Open window" in step 3, click the action button 
&gt; and select Overview. 
&gt;
&gt; This was the low hanging fruit, based on code used in bookmarks.py.  A 
&gt; refresh button for the outline wouldn\'t be too hard, but right now 
&gt; you need to close the window / pane and open it again to refresh. 
&gt;
&gt; Cheer -Terry 
&gt;
&gt; --- cut here --- 
&gt; @language python 
&gt;
&gt; from PyQt4 import QtGui, QtCore 
&gt; from xml.sax.saxutils import escape 
&gt;
&gt; def add_html(html, nd): 
&gt;     """recursively add to an html list with links to nodes""" 
&gt;     
&gt;     unl = nd.get_UNL() 
&gt;     html.append("&lt;div class=\'level\'&gt;" 
&gt;         "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" % 
&gt;         (unl, unl, escape(nd.h))) 
&gt;     html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b)) 
&gt;     for child in nd.children(): 
&gt;         add_html(html, child) 
&gt;     html.append("&lt;/div&gt;") 
&gt;
&gt; def make_overview(c): 
&gt;     """build the overview widget""" 
&gt;
&gt;     te = QtGui.QTextBrowser() 
&gt;     te.setReadOnly(True) 
&gt;     te.setOpenLinks(False) 
&gt;     
&gt;     def anchorClicked(url, c=c): 
&gt;         url = str(url.toString()) 
&gt;         g.handleUrl(url,c=c,p=c.p) 
&gt;     
&gt;     te.anchorClicked.connect(anchorClicked) 
&gt;     
&gt;     html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt; 
&gt;     .level .level {margin-left: 1.5em} 
&gt;     a {text-decoration: none; font-size: 120%} 
&gt;     &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""] 
&gt;     
&gt;     for nd in c.getSelectedPositions(): 
&gt;         add_html(html, nd) 
&gt;
&gt;     html.append("&lt;/body&gt;&lt;/html&gt;") 
&gt;     
&gt;     html = \'\\n\'.join(html) 
&gt;     
&gt;     te.setHtml(html) 
&gt;     
&gt;     return te 
&gt;
&gt; class OverviewPaneProvider: 
&gt;     def __init__(self, c): 
&gt;         self.c = c 
&gt;         # Careful: we may be unit testing. 
&gt;         if hasattr(c, \'free_layout\'): 
&gt;             splitter = c.free_layout.get_top_splitter() 
&gt;             if splitter: 
&gt;                 splitter.register_provider(self) 
&gt;     def ns_provides(self): 
&gt;         return[(\'Overview\', \'_add_overview_pane\')] 
&gt;     def ns_provide(self, id_): 
&gt;         if id_ == \'_add_overview_pane\': 
&gt;             w = make_overview(c) 
&gt;             return w 
&gt;     def ns_title(self, id_): 
&gt;         if id_ == \'_add_overview_pane\': 
&gt;             return "Leo Outline Overview" 
&gt;     def ns_provider_id(self): 
&gt;         # used by register_provider() to unregister previously registered 
&gt;         # providers of the same service 
&gt;         return "outline overview window" 
&gt;
&gt; OverviewPaneProvider(c) 
&gt;
&gt; --- cut here --- 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_198_11760886.1360170083672
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Excellent! This is really a great help for me. I\'m still experimenting, but=
 one thing I will find useful is that I can open several of these panes and=
 navigate through each of the "views". Plus (and this has been a longtime w=
ishlist item for those with fading sight), I can increase the text size for=
 reading big chunks of text.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(Another plus, and th=
is is a big one, I can actually read your code well enough that I start to =
have some inkling about how to do this kind of addition to Leo. I could nev=
er begin to write it myself, but Leo makes it accessible even for shambling=
 hackers.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One question: is there a &amp;nbsp;way to d=
elete an inserted&lt;span style=3D"font-size: 13px;"&gt;&amp;nbsp;pane? &amp;nbsp;It &amp;nbs=
p;looks useful to have an inserted pane, but refreshing will require killin=
g the pane and reinserting....&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I\'m go=
ing to use this a lot -- many thanks!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bill&lt;br&gt;&lt;br&gt;=
On Wednesday, February 6, 2013 7:36:41 AM UTC-8, Terry wrote:&lt;blockquote cl=
ass=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px =
#ccc solid;padding-left: 1ex;"&gt;On Tue, 5 Feb 2013 22:43:30 -0600
&lt;br&gt;Terry Brown &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscate=
d-mailto=3D"RPoL56l-t1QJ"&gt;terry_...@yahoo.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; It wouldn\'t be hard to do something with HTML formatting and links=
 to
&lt;br&gt;&amp;gt; display the outline and jump to a node when you click on the displ=
ay,
&lt;br&gt;&amp;gt; I\'ll try and get to it.
&lt;br&gt;
&lt;br&gt;1) Paste the code below into a node, then hit the "run-script"
&lt;br&gt;button.
&lt;br&gt;
&lt;br&gt;2) Then select a node with some hierarchy, not too much.
&lt;br&gt;
&lt;br&gt;3) Then right click on the panel dividers between the tree / body / log
&lt;br&gt;panes, you should see a context menu with an "Open Window" sub-menu,
&lt;br&gt;which should contain an "Overview" item. &amp;nbsp;
&lt;br&gt;
&lt;br&gt;You should get a continuous view of the hierarchy with clickable
&lt;br&gt;headlines which take you to the node.
&lt;br&gt;
&lt;br&gt;You can select multiple nodes in step 2 above, with normal list Ctrl-
&lt;br&gt;or Shift- click operations. &amp;nbsp;Nodes are shown in the overview in th=
e
&lt;br&gt;order selected. &amp;nbsp;This is how you\'d generate the overview for a who=
le
&lt;br&gt;outline - i.e. contract the whole outline, click the first top level
&lt;br&gt;node, shift click the last top level node, and then step 3.
&lt;br&gt;
&lt;br&gt;You can also embed the overview in a pane in the Leo window by select
&lt;br&gt;"Insert" rather than "Open window" in step 3, click the action button
&lt;br&gt;and select Overview.
&lt;br&gt;
&lt;br&gt;This was the low hanging fruit, based on code used in bookmarks.py. &amp;nb=
sp;A
&lt;br&gt;refresh button for the outline wouldn\'t be too hard, but right now
&lt;br&gt;you need to close the window / pane and open it again to refresh.
&lt;br&gt;
&lt;br&gt;Cheer -Terry
&lt;br&gt;
&lt;br&gt;--- cut here ---
&lt;br&gt;@language python
&lt;br&gt;
&lt;br&gt;from PyQt4 import QtGui, QtCore
&lt;br&gt;from xml.sax.saxutils import escape
&lt;br&gt;
&lt;br&gt;def add_html(html, nd):
&lt;br&gt;&amp;nbsp; &amp;nbsp; """recursively add to an html list with links to nodes"""
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; unl =3D nd.get_UNL()
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;div class=3D\'level\'&amp;gt;"
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "&amp;lt;div&amp;gt;&amp;lt;a href=3D\'%s\' title=3D\'%s\'&amp;=
gt;%s&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;" %
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (unl, unl, escape(nd.h)))
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;pre&amp;gt;%s&amp;lt;/pre&amp;gt;"%&lt;wbr&gt;escape(nd.b)=
)
&lt;br&gt;&amp;nbsp; &amp;nbsp; for child in nd.children():
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; add_html(html, child)
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;/div&amp;gt;")
&lt;br&gt;
&lt;br&gt;def make_overview(c):
&lt;br&gt;&amp;nbsp; &amp;nbsp; """build the overview widget"""
&lt;br&gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; te =3D QtGui.QTextBrowser()
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setReadOnly(True)
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setOpenLinks(False)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; def anchorClicked(url, c=3Dc):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; url =3D str(url.toString())
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; g.handleUrl(url,c=3Dc,p=3Dc.p)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.anchorClicked.connect(&lt;wbr&gt;anchorClicked)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; html =3D ["""&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;style&amp;gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; .level .level {margin-left: 1.5em}
&lt;br&gt;&amp;nbsp; &amp;nbsp; a {text-decoration: none; font-size: 120%}
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;"""]
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; for nd in c.getSelectedPositions():
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; add_html(html, nd)
&lt;br&gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;")=20
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; html =3D \'\\n\'.join(html)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setHtml(html)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; return te
&lt;br&gt;
&lt;br&gt;class OverviewPaneProvider:
&lt;br&gt;&amp;nbsp; &amp;nbsp; def __init__(self, c):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.c =3D c
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Careful: we may be unit testing.
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if hasattr(c, \'free_layout\'):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter =3D c.free_layout.ge=
t_top_&lt;wbr&gt;splitter()
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if splitter:
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter.regist=
er_provider(&lt;wbr&gt;self)
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provides(self):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return[(\'Overview\', \'_add_overview_pane\')]
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provide(self, id_):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if id_ =3D=3D \'_add_overview_pane\':
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; w =3D make_overview(c)
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return w
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_title(self, id_):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if id_ =3D=3D \'_add_overview_pane\':
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return "Leo Outline Overview"
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provider_id(self):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # used by register_provider() to unregister=
 previously registered
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # providers of the same service
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return "outline overview window"
&lt;br&gt;
&lt;br&gt;OverviewPaneProvider(c)
&lt;br&gt;
&lt;br&gt;--- cut here ---
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_198_11760886.1360170083672--
</t>
<t tx="ekr.20130807203905.16815">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_65_6159566.1360277477776
Content-Type: text/plain; charset=ISO-8859-1

Thanks Terry for all this work. I will pull the new code tomorrow (if bzr 
will agree without sending me to places I, and perhaps no man has ever been 
before!). 

This looks nifty -- I want it to go in automatically for all the leo files 
I load. Very useful!

Best,

Bill 

On Thursday, February 7, 2013 10:00:40 AM UTC-8, Terry wrote:
&gt;
&gt; On Thu, 7 Feb 2013 08:21:51 -0600 
&gt; Terry Brown &lt;terry_...@yahoo.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; On Wed, 6 Feb 2013 22:28:38 -0800 
&gt; &gt; Matt Wilkie &lt;map...@gmail.com &lt;javascript:&gt;&gt; wrote: 
&gt; ... 
&gt; &gt; &gt; And, more generally, can these 
&gt; hover-over-pane-divider-then-right-click 
&gt; &gt; &gt; actions be made available any other way? Like a drop down menu from a 
&gt; &gt; &gt; button or alt-x command or something.   
&gt; &gt; 
&gt; &gt; What, you mean instead of being completely hidden where no one will 
&gt; &gt; ever find them?  :-)  Most of them (not the Open Window variants of 
&gt; &gt; course) 
&gt;
&gt; But it occurs to me that it might be the open window variants you want, 
&gt; specifically the code to make a button / command to open a window with 
&gt; a particular panel in it.  That would be this: 
&gt;
&gt; if hasattr(c, \'free_layout\'): 
&gt;     splitter = c.free_layout.get_top_splitter() 
&gt;     if splitter: 
&gt;         splitter.open_window(action=\'_add_overview_pane\') 
&gt;
&gt; Cheers -Terry 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_65_6159566.1360277477776
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks Terry for all this work. I will pull the new code tomorrow (if bzr w=
ill agree without sending me to places I, and perhaps no man has ever been =
before!).&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This looks nifty -- I want it to go in a=
utomatically for all the leo files I load. Very useful!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div=
&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bill&amp;nbsp;&lt;br&gt;&lt;br&gt;On Thursday, Februar=
y 7, 2013 10:00:40 AM UTC-8, Terry wrote:&lt;blockquote class=3D"gmail_quote" =
style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-l=
eft: 1ex;"&gt;On Thu, 7 Feb 2013 08:21:51 -0600
&lt;br&gt;Terry Brown &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscate=
d-mailto=3D"o7FnHaIWfDwJ"&gt;terry_...@yahoo.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; On Wed, 6 Feb 2013 22:28:38 -0800
&lt;br&gt;&amp;gt; Matt Wilkie &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfu=
scated-mailto=3D"o7FnHaIWfDwJ"&gt;map...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;...
&lt;br&gt;&amp;gt; &amp;gt; And, more generally, can these hover-over-pane-divider-then-&lt;=
wbr&gt;right-click
&lt;br&gt;&amp;gt; &amp;gt; actions be made available any other way? Like a drop down men=
u from a
&lt;br&gt;&amp;gt; &amp;gt; button or alt-x command or something. &amp;nbsp;
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; What, you mean instead of being completely hidden where no one wil=
l
&lt;br&gt;&amp;gt; ever find them? &amp;nbsp;:-) &amp;nbsp;Most of them (not the Open Window =
variants of
&lt;br&gt;&amp;gt; course)
&lt;br&gt;
&lt;br&gt;But it occurs to me that it might be the open window variants you want,
&lt;br&gt;specifically the code to make a button / command to open a window with
&lt;br&gt;a particular panel in it. &amp;nbsp;That would be this:
&lt;br&gt;
&lt;br&gt;if hasattr(c, \'free_layout\'):
&lt;br&gt;&amp;nbsp; &amp;nbsp; splitter =3D c.free_layout.get_top_&lt;wbr&gt;splitter()
&lt;br&gt;&amp;nbsp; &amp;nbsp; if splitter:
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter.open_window(action=3D\'_&lt;wbr&gt;add_ov=
erview_pane\')
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_65_6159566.1360277477776--
</t>
<t tx="ekr.20130807203905.16816">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 22:33:13 -0800
Matt Wilkie &lt;maphew@gmail.com&gt; wrote:

&gt; On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;wgwinder@gmail.com&gt; wrote:
&gt; 
&gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of
&gt; &gt; seeing one body only and the tree of headlines, I want to display all the
&gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, much
&gt; &gt; like a word processor outline.
&gt;  
&gt; I use *"r-click &gt; Edit in ..."*  for this purpose. It\'s a poor man\'s
&gt; workaround. Something integrated would be much nicer. Just thought I\'d
&gt; mention it for anyone looking for something they might be able to use right
&gt; away.

When I try that it only edits the one node, none of its children.
Which is what I thought it did.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16817">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 20:00:51 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; Thanks! That plugin does both more and less than I want: more, because I=
=20
&gt; get a full and nicely formatted window with editable text boxes; less,=20
&gt; since it doesn\'t write any edited text back to the tree.=20
&gt;=20
&gt; My fumbling tinkering would go towards not editing in the preview=20
&gt; window/pane at all, and just having a keystroke or click scroll the editi=
ng=20
&gt; pane to the right node in Leo. But that would mean that the preview panel=
=20
&gt; would have have to be properly indexed so that from the cursor position i=
n=20
&gt; the panel the plugin could find the proper node back in the Leo panel.=20
&gt;  (Kludgy way: put the node id in the text!)

Yes, I think nb-* is in some ways more of a tech. demonstration.

It wouldn\'t be hard to do something with HTML formatting and links to
display the outline and jump to a node when you click on the display,
I\'ll try and get to it.

Cheers -Terry

&gt; Thanks for the suggestion.
&gt;=20
&gt; Bill=20
&gt;=20
&gt; Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :
&gt; &gt;
&gt; &gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)=20
&gt; &gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:=20
&gt; &gt;
&gt; &gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of=
=20
&gt; &gt; &gt; seeing one body only and the tree of headlines, I want to display all=
=20
&gt; &gt; the=20
&gt; &gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, mu=
ch=20
&gt; &gt; &gt; like a word processor outline.=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; I can almost do that myself in the preview panel. Here is a  very slo=
ppy=20
&gt; &gt; &gt; "preview-tree" script (good for a laugh for anyone who does much Leo=
=20
&gt; &gt; &gt; programming!).=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; result =3D ["\\n\\n&gt;"+p.h,"\\n"+p.b]=20
&gt; &gt; &gt; for p2 in p.subtree():=20
&gt; &gt; &gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )=20
&gt; &gt; &gt;     for i in p2.b.split(\'\\n\'):    =20
&gt; &gt; &gt;         result.append("\\n|  " + i)=20
&gt; &gt; &gt; s =3D \'\'.join(result)=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n\') + s )=
=20
&gt; &gt; &gt;=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; This needs a total redesign, but it does give an idea of the results =
I=20
&gt; &gt; want=20
&gt; &gt; &gt; to get: the whole tree (not necessarily in rst format).=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; I think I could probably get this to work correctly, but the really=
=20
&gt; &gt; tough=20
&gt; &gt; &gt; part, I think, is being able to click somewhere on the tree preview a=
nd=20
&gt; &gt; go=20
&gt; &gt; &gt; to the pertinent node in the headline/body panels.=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; This looks like a feature that Word has, but that Leo doesn\'t, as far=
 as=20
&gt; &gt; I=20
&gt; &gt; &gt; can tell. Or am I missing something (besides the fact that such thing=
s=20
&gt; &gt; can=20
&gt; &gt; &gt; be done in Leo almost magically!) ?=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; Any suggestions for a full tree preview ?=20
&gt; &gt;
&gt; &gt; I think this has been requested before and Ville did something possibly=
=20
&gt; &gt; using QtQuick or something, a scrolley flicky thing :-)=20
&gt; &gt;
&gt; &gt; Ah yes,=20
&gt; &gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/Zs-5jK=
jPAB0=20
&gt; &gt;
&gt; &gt; ...and... I think I\'m going to have to kill me Leo session after doing=
=20
&gt; &gt; nb-all on a large outline, so be warned - nb-subtree is probably=20
&gt; &gt; smarter.=20
&gt; &gt;
&gt; &gt; Cheers -Terry=20
&gt; &gt;
&gt; &gt; &gt; Bill=20
&gt; &gt; &gt;=20
&gt; &gt;
&gt;=20

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130807203905.16818"></t>
<t tx="ekr.20130808211520.15901"></t>
</tnodes>
</leo_file>
