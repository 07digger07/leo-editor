<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070610174018"><vh>Startup</vh>
<v t="ekr.20050407144417"><vh>@settings</vh>
<v t="ekr.20111108052738.5507"><vh>@shortcuts</vh></v>
<v t="ekr.20100907092300.4440"><vh>Inkscape options</vh>
<v t="ekr.20100907092300.4441"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20100907092300.4442"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20101009114830.4724"><vh>File options</vh>
<v t="ekr.20080923182326.1"><vh>@@bool create_nonexistent_directories = True</vh></v>
<v t="ekr.20080412124815.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20101009114830.4723"><vh>@bool put_expansion_bits_in_leo_files = False</vh></v>
</v>
<v t="ekr.20101009114830.4725"><vh>Plugins options</vh>
<v t="ekr.20050407144342"><vh>@page http plugin</vh>
<v t="ekr.20050407144342.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050407144342.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050407144342.3"><vh>@string rst_http_attributename = rst_http_attribute</vh></v>
</v>
<v t="ekr.20050812123002"><vh>@page rst3 options</vh>
<v t="ekr.20050812123002.1"><vh>Http options...</vh>
<v t="ekr.20050812123002.2"><vh>@bool rst3_clear_http_attributes = False</vh></v>
<v t="ekr.20050812123002.3"><vh>@string rst3_http_attributename = 'rst_http_attribute'</vh></v>
<v t="ekr.20050812123002.4"><vh>@bool rst3_http_server_support = False</vh></v>
<v t="ekr.20050812123002.5"><vh>@string rst3_node_begin_marker = 'http-node-marker-'</vh></v>
</v>
<v t="ekr.20050812123002.6"><vh>@bool rst3_massage_body = False</vh></v>
<v t="ekr.20050812123002.7"><vh>@bool rst3_format_headlines = True</vh></v>
<v t="ekr.20050812123002.8"><vh>@bool rst3_write_intermediate_file = True</vh></v>
<v t="sps.20100708213227.44914"><vh>@string rst3_write_intermediate_extension = .html.txt</vh></v>
<v t="ekr.20051202072010"><vh>@string rst3_default_path =</vh></v>
</v>
</v>
</v>
<v t="ekr.20101028112631.4959" descendentVnodeUnknownAttributes="7d7100550b302e312e302e302e302e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473732e"><vh>@file doc-startup.txt</vh></v>
</v>
<v t="ekr.20050831195449"><vh>Read me first</vh></v>
<v t="ekr.20100805171546.4412"><vh>Files, including home page</vh>
<v t="ekr.20130327143919.5868"><vh>@@file front.html (old home page)</vh></v>
<v t="ville.20090609182215.5676"><vh>@auto-rst treecaching.txt</vh></v>
<v t="ekr.20090428133936.2"><vh>@edit html\conf.py</vh></v>
<v t="ekr.20090428102353.1"><vh>@edit html\leo_toc.html.txt</vh></v>
<v t="ekr.20101025080245.5800"><vh>@edit leo_toc.html</vh></v>
<v t="ekr.20101112045055.5064"><vh>@file plugin_catalog.py</vh></v>
<v t="ekr.20100808060203.4273"><vh>@file html/index.html</vh></v>
<v t="ekr.20101025080245.5801"><vh>@url modified toc</vh></v>
<v t="ekr.20101026081737.5531"><vh>Links that replace those in actual built page</vh></v>
<v t="ekr.20101112045055.5065"><vh>@url docs generated from plugin_catalog.py</vh></v>
</v>
<v t="ekr.20040414161647"><vh>Users Guide</vh>
<v t="ekr.20101104024804.4898"><vh> Generating the Users Guide</vh>
<v t="sps.20100708203040.19008"><vh>@@button generate-full-userguide</vh>
<v t="sps.20100708203040.19009"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="sps.20100708203040.19010"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
<v t="ville.20090705224948.5734"><vh>@@button generate-userguide</vh>
<v t="ville.20090705225609.5736"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="ville.20090705225609.5738"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5794"><vh>Preliminaries</vh>
<v t="ekr.20050831184021.3"><vh>Front matter</vh>
<v t="ekr.20100805165051.7148"><vh>@file frontMatter.txt</vh></v>
</v>
<v t="ekr.20070701101808"><vh>Preface</vh>
<v t="ekr.20100805165051.7149"><vh>@file preface.txt</vh></v>
</v>
<v t="ekr.20050831184021.4"><vh>What people are saying about Leo</vh>
<v t="ekr.20100805165051.7150"><vh>@file testimonials.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5795"><vh>Basics</vh>
<v t="ekr.20050831195331.1"><vh>FAQ</vh>
<v t="ekr.20100805165051.7151"><vh>@file FAQ.txt</vh></v>
</v>
<v t="ekr.20101007100904.4372"><vh>Slideshows page</vh>
<v t="ekr.20100821182153.4344"><vh>@file screen-shots.txt</vh></v>
</v>
<v t="ekr.20100731112744.7267"><vh>Installing Leo</vh>
<v t="ekr.20100805165051.7152" descendentVnodeUnknownAttributes="7d71005507302e302e342e3171017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e710558040000003c2f613e71065d71072858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e710858060000003c2f6469763e71095d710a28584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e710b58060000003c2f6469763e710c5d710d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710e58060000003c2f6469763e710f5d71102858060000003c626f64793e711158070000003c2f626f64793e71125d71132858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711458070000003c2f68746d6c3e71154e656565656558070000003c2f6469763e0a711658070000003c2f6469763e0a711758350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7118586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a71196573732e"><vh>@file installing.txt</vh></v>
</v>
<v t="ekr.20091130111843.6787"><vh>The Leo Tutorial</vh>
<v t="ekr.20100805165051.7146"><vh>@file intro.txt</vh></v>
<v t="ekr.20100808120531.4280"><vh>@file outline-commands.txt</vh></v>
<v t="ekr.20100808120531.4283"><vh>@file nutshell.txt</vh></v>
</v>
<v t="EKR.20040524104904.99"><vh>Using Leo</vh>
<v t="ekr.20100805165051.7155"><vh>@file commands.txt</vh></v>
</v>
<v t="EKR.20040524104904.211"><vh>Customizing Leo</vh>
<v t="ekr.20100805165051.7158"><vh>@file customizing.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5799"><vh>Intermediate Topics</vh>
<v t="ekr.20060430221745"><vh>Controlling syntax coloring</vh>
<v t="ekr.20100805165051.7165"><vh>@file coloring.txt</vh></v>
</v>
<v t="ekr.20050831184021.1"><vh>Creating documents with Leo</vh>
<v t="ekr.20100805165051.7164"><vh>@file rstplugin3.txt</vh></v>
</v>
<v t="ekr.20050831195331.4"><vh>Scripting Leo with Python</vh>
<v t="ekr.20100805165051.7157" descendentVnodeUnknownAttributes="7d7100285509302e302e312e372e3371017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313922206e616d653d22687474702d6e6f64652d6d61726b65722d3139223e710558040000003c2f613e71065d71072858450000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e710858060000003c2f6469763e71095d710a28582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710b58060000003c2f6469763e710c5d710d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710e58060000003c2f6469763e710f5d71102858060000003c626f64793e711158070000003c2f626f64793e71125d71132858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711458070000003c2f68746d6c3e71154e656565656558070000003c2f6469763e0a711658490000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e0a711758940000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313022206e616d653d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e702e7369626c696e67735f6974657220616e6420702e666f6c6c6f77696e675f7369626c696e67735f697465723c2f613e3c2f68323e0a711865735509302e302e312e372e3271197d711a58120000007273745f687474705f617474726962757465711b5d711c2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313722206e616d653d22687474702d6e6f64652d6d61726b65722d3137223e711d58040000003c2f613e711e5d711f28582a0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e712058060000003c2f6469763e71215d712228582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e712358060000003c2f6469763e71245d712528583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e712658060000003c2f6469763e71275d71282858060000003c626f64793e712958070000003c2f626f64793e712a5d712b2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e712c58070000003c2f68746d6c3e712d4e656565656558070000003c2f6469763e0a712e58460000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e0a712f588d0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643922206e616d653d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e702e706172656e74735f6974657220616e6420702e73656c665f616e645f706172656e74735f697465723c2f613e3c2f68323e0a713065735509302e302e312e372e3171317d713258120000007273745f687474705f61747472696275746571335d71342858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313522206e616d653d22687474702d6e6f64652d6d61726b65722d3135223e713558040000003c2f613e71365d713728582a0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e713858060000003c2f6469763e71395d713a28582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e713b58060000003c2f6469763e713c5d713d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e713e58060000003c2f6469763e713f5d71402858060000003c626f64793e714158070000003c2f626f64793e71425d71432858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e714458070000003c2f68746d6c3e71454e656565656558070000003c2f6469763e0a7146582b0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e0a714758570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643822206e616d653d22702d6368696c6472656e2d69746572223e702e6368696c6472656e5f697465723c2f613e3c2f68323e0a714865735509302e302e312e372e3071497d714a58120000007273745f687474705f617474726962757465714b5d714c2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313322206e616d653d22687474702d6e6f64652d6d61726b65722d3133223e714d58040000003c2f613e714e5d714f28582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e715058060000003c2f6469763e71515d715228583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e715358060000003c2f6469763e71545d71552858060000003c626f64793e715658070000003c2f626f64793e71575d71582858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e715958070000003c2f68746d6c3e715a4e65656565582b0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e0a715b58570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643722206e616d653d22632d616c6c6e6f6465732d69746572223e632e616c6c4e6f6465735f697465723c2f613e3c2f68323e0a715c65735507302e302e332e37715d7d715e58120000007273745f687474705f617474726962757465715f5d71602858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323922206e616d653d22687474702d6e6f64652d6d61726b65722d3239223e716158040000003c2f613e71625d71632858390000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e716458060000003c2f6469763e71655d716628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e716758060000003c2f6469763e71685d71692858060000003c626f64793e716a58070000003c2f626f64793e716b5d716c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e716d58070000003c2f68746d6c3e716e4e6565656558070000003c2f6469763e0a716f583b0000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e0a717058780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313522206e616d653d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e47657474696e6720616e642073657474696e6720707265666572656e6365733c2f613e3c2f68313e0a717165735509302e302e312e372e3471727d717358120000007273745f687474705f61747472696275746571745d71752858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323122206e616d653d22687474702d6e6f64652d6d61726b65722d3231223e717658040000003c2f613e71775d71782858480000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e717958060000003c2f6469763e717a5d717b28582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e717c58060000003c2f6469763e717d5d717e28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e717f58060000003c2f6469763e71805d71812858060000003c626f64793e718258070000003c2f626f64793e71835d71842858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e718558070000003c2f68746d6c3e71864e656565656558070000003c2f6469763e0a718758460000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e0a7188588e0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313122206e616d653d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e702e737562747265655f6974657220616e6420702e73656c665f616e645f737562747265655f697465723c2f613e3c2f68323e0a718965735507302e302e332e30718a7d718b58120000007273745f687474705f617474726962757465718c5d718d2858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3722206e616d653d22687474702d6e6f64652d6d61726b65722d37223e718e58040000003c2f613e718f5d71902858350000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e719158060000003c2f6469763e71925d719328583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e719458060000003c2f6469763e71955d71962858060000003c626f64793e719758070000003c2f626f64793e71985d71992858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e719a58070000003c2f68746d6c3e719b4e6565656558070000003c2f6469763e0a719c58460000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e0a719d588e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643422206e616d653d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e6170702e77696e646f774c6973743a20746865206c697374206f6620616c6c206f70656e206672616d65733c2f613e3c2f68313e0a719e65735507302e302e332e38719f7d71a058120000007273745f687474705f61747472696275746571a15d71a22858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333922206e616d653d22687474702d6e6f64652d6d61726b65722d3339223e71a358040000003c2f613e71a45d71a52858340000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e71a658060000003c2f6469763e71a75d71a828583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71a958060000003c2f6469763e71aa5d71ab2858060000003c626f64793e71ac58070000003c2f626f64793e71ad5d71ae2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71af58070000003c2f68746d6c3e71b04e6565656558070000003c2f6469763e0a71b1583e0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e0a71b2587e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323022206e616d653d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e46756e6374696f6e7320646566696e656420696e206c656f476c6f62616c732e70793c2f613e3c2f68313e0a71b365735507302e302e332e3571b47d71b558120000007273745f687474705f61747472696275746571b65d71b72858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323722206e616d653d22687474702d6e6f64652d6d61726b65722d3237223e71b858040000003c2f613e71b95d71ba28582e0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e71bb58060000003c2f6469763e71bc5d71bd28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71be58060000003c2f6469763e71bf5d71c02858060000003c626f64793e71c158070000003c2f626f64793e71c25d71c32858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71c458070000003c2f68746d6c3e71c54e6565656558070000003c2f6469763e0a71c6583a0000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e0a71c758760000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313422206e616d653d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e496e766f6b696e6720636f6d6d616e64732066726f6d20736372697074733c2f613e3c2f68313e0a71c86573550a302e302e312e31322e3271c97d71ca58120000007273745f687474705f61747472696275746571cb5d71cc2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343922206e616d653d22687474702d6e6f64652d6d61726b65722d3439223e71cd58040000003c2f613e71ce5d71cf2858220000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e71d058060000003c2f6469763e71d15d71d22858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e71d358060000003c2f6469763e71d45d71d528583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71d658060000003c2f6469763e71d75d71d82858060000003c626f64793e71d958070000003c2f626f64793e71da5d71db2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71dc58070000003c2f68746d6c3e71dd4e656565656558070000003c2f6469763e0a71de58230000003c64697620636c6173733d2273656374696f6e222069643d2273657474657273223e0a71df58480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323522206e616d653d2273657474657273223e536574746572733c2f613e3c2f68323e0a71e065735508302e302e312e313271e17d71e258120000007273745f687474705f61747472696275746571e35d71e42858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343322206e616d653d22687474702d6e6f64652d6d61726b65722d3433223e71e558040000003c2f613e71e65d71e728583a0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e71e858060000003c2f6469763e71e95d71ea28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71eb58060000003c2f6469763e71ec5d71ed2858060000003c626f64793e71ee58070000003c2f626f64793e71ef5d71f02858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71f158070000003c2f68746d6c3e71f24e6565656558070000003c2f6469763e0a71f358450000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e0a71f4588c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323222206e616d653d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e53756d6d617279206f662074686520766e6f646520616e6420706f736974696f6e20636c61737365733c2f613e3c2f68313e0a71f565735507302e302e312e3271f67d71f758120000007273745f687474705f61747472696275746571f85d71f92858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3122206e616d653d22687474702d6e6f64652d6d61726b65722d31223e71fa58040000003c2f613e71fb5d71fc28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71fd58060000003c2f6469763e71fe5d71ff2858060000003c626f64793e720001000058070000003c2f626f64793e72010100005d72020100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e720301000058070000003c2f68746d6c3e72040100004e65656558240000003c64697620636c6173733d2273656374696f6e222069643d226f76657276696577223e0a720501000058490000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643122206e616d653d226f76657276696577223e4f766572766965773c2f613e3c2f68313e0a720601000065735507302e302e312e3372070100007d720801000058120000007273745f687474705f61747472696275746572090100005d720a0100002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3522206e616d653d22687474702d6e6f64652d6d61726b65722d35223e720b01000058040000003c2f613e720c0100005d720d0100002858400000003c64697620636c6173733d2273656374696f6e222069643d22672d746f702d7468652d636f6d6d616e6465722d6f662d7468652d746f702d77696e646f77223e720e01000058060000003c2f6469763e720f0100005d721001000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e721101000058060000003c2f6469763e72120100005d72130100002858060000003c626f64793e721401000058070000003c2f626f64793e72150100005d72160100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e721701000058070000003c2f68746d6c3e72180100004e6565656558070000003c2f6469763e0a721901000058360000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e0a721a01000058700000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643322206e616d653d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e672e657328293a20777269746520746f20746865206c6f672070616e653c2f613e3c2f68313e0a721b01000065735507302e302e312e34721c0100007d721d01000058120000007273745f687474705f617474726962757465721e0100005d721f0100002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3922206e616d653d22687474702d6e6f64652d6d61726b65722d39223e722001000058040000003c2f613e72210100005d72220100002858450000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e722301000058060000003c2f6469763e72240100005d722501000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e722601000058060000003c2f6469763e72270100005d72280100002858060000003c626f64793e722901000058070000003c2f626f64793e722a0100005d722b0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e722c01000058070000003c2f68746d6c3e722d0100004e6565656558070000003c2f6469763e0a722e01000058460000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e0a722f010000588d0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643522206e616d653d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e47657474696e6720616e642073657474696e6720686561646c696e6520616e6420626f647920746578743c2f613e3c2f68313e0a723001000065735507302e302e312e3572310100007d723201000058120000007273745f687474705f61747472696275746572330100005d72340100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323522206e616d653d22687474702d6e6f64652d6d61726b65722d3235223e723501000058040000003c2f613e72360100005d723701000028583e0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e723801000058060000003c2f6469763e72390100005d723a01000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e723b01000058060000003c2f6469763e723c0100005d723d01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e723e01000058060000003c2f6469763e723f0100005d72400100002858060000003c626f64793e724101000058070000003c2f626f64793e72420100005d72430100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e724401000058070000003c2f68746d6c3e72450100004e656565656558070000003c2f6469763e0a724601000058070000003c2f6469763e0a7247010000582f0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e0a724801000058600000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313322206e616d653d227570646174696e672d7468652d73637265656e223e5570646174696e67207468652073637265656e3c2f613e3c2f68313e0a72490100006573550a302e302e312e31322e30724a0100007d724b01000058120000007273745f687474705f617474726962757465724c0100005d724d0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343522206e616d653d22687474702d6e6f64652d6d61726b65722d3435223e724e01000058040000003c2f613e724f0100005d72500100002858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e725101000058060000003c2f6469763e72520100005d725301000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e725401000058060000003c2f6469763e72550100005d72560100002858060000003c626f64793e725701000058070000003c2f626f64793e72580100005d72590100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e725a01000058070000003c2f68746d6c3e725b0100004e6565656558250000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e0a725c010000584c0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323322206e616d653d226974657261746f7273223e4974657261746f72733c2f613e3c2f68323e0a725d01000065735507302e302e312e37725e0100007d725f01000058120000007273745f687474705f61747472696275746572600100005d72610100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313122206e616d653d22687474702d6e6f64652d6d61726b65722d3131223e726201000058040000003c2f613e72630100005d72640100002858450000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e726501000058060000003c2f6469763e72660100005d726701000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e726801000058060000003c2f6469763e72690100005d726a0100002858060000003c626f64793e726b01000058070000003c2f626f64793e726c0100005d726d0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e726e01000058070000003c2f68746d6c3e726f0100004e6565656558070000003c2f6469763e0a7270010000582f0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e0a7271010000585f0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643622206e616d653d2274726176657273696e672d6f75746c696e6573223e54726176657273696e67206f75746c696e65733c2f613e3c2f68313e0a727201000065735507302e302e312e3872730100007d727401000058120000007273745f687474705f61747472696275746572750100005d72760100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323322206e616d653d22687474702d6e6f64652d6d61726b65722d3233223e727701000058040000003c2f613e72780100005d72790100002858450000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e727a01000058060000003c2f6469763e727b0100005d727c01000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e727d01000058060000003c2f6469763e727e0100005d727f01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e728001000058060000003c2f6469763e72810100005d72820100002858060000003c626f64793e728301000058070000003c2f626f64793e72840100005d72850100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e728601000058070000003c2f68746d6c3e72870100004e656565656558070000003c2f6469763e0a7288010000583f0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e0a728901000058800000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313222206e616d653d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e54657374696e672077686574686572206120706f736974696f6e2069732076616c69643c2f613e3c2f68323e0a728a0100006573550a302e302e312e31322e31728b0100007d728c01000058120000007273745f687474705f617474726962757465728d0100005d728e0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343722206e616d653d22687474702d6e6f64652d6d61726b65722d3437223e728f01000058040000003c2f613e72900100005d72910100002858240000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e729201000058060000003c2f6469763e72930100005d72940100002858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e729501000058060000003c2f6469763e72960100005d729701000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e729801000058060000003c2f6469763e72990100005d729a0100002858060000003c626f64793e729b01000058070000003c2f626f64793e729c0100005d729d0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e729e01000058070000003c2f68746d6c3e729f0100004e656565656558070000003c2f6469763e0a72a001000058230000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e0a72a101000058480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323422206e616d653d2267657474657273223e476574746572733c2f613e3c2f68323e0a72a201000065735508302e302e332e313672a30100007d72a401000058120000007273745f687474705f61747472696275746572a50100005d72a60100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e72a701000058040000003c2f613e72a80100005d72a90100002858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e72aa01000058060000003c2f6469763e72ab0100005d72ac01000028584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e72ad01000058060000003c2f6469763e72ae0100005d72af01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e72b001000058060000003c2f6469763e72b10100005d72b20100002858060000003c626f64793e72b301000058070000003c2f626f64793e72b40100005d72b50100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e72b601000058070000003c2f68746d6c3e72b70100004e656565656558070000003c2f6469763e0a72b801000058070000003c2f6469763e0a72b901000058350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a72ba010000586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a72bb01000065735508302e302e332e313072bc0100007d72bd01000058120000007273745f687474705f61747472696275746572be0100005d72bf0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343122206e616d653d22687474702d6e6f64652d6d61726b65722d3431223e72c001000058040000003c2f613e72c10100005d72c201000028583d0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e72c301000058060000003c2f6469763e72c40100005d72c501000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e72c601000058060000003c2f6469763e72c70100005d72c80100002858060000003c626f64793e72c901000058070000003c2f626f64793e72ca0100005d72cb0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e72cc01000058070000003c2f68746d6c3e72cd0100004e6565656558070000003c2f6469763e0a72ce010000583b0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e0a72cf01000058780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323122206e616d653d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e5265646972656374696e67206f75747075742066726f6d20736372697074733c2f613e3c2f68313e0a72d00100006573752e"><vh>@file scripting.txt</vh></v>
</v>
<v t="ekr.20050912125144"><vh>Plugins</vh>
<v t="ekr.20100805165051.7162"><vh>@file plugins.txt</vh></v>
</v>
<v t="ekr.20060612102055"><vh>Writing Plugins</vh>
<v t="ekr.20100805165051.7163"><vh>@file writingPlugins.txt</vh></v>
</v>
<v t="ekr.20070628083442"><vh>Unit testing with Leo</vh>
<v t="ekr.20100805165051.7170"><vh>@file unitTesting.txt</vh></v>
</v>
<v t="ekr.20060527105211"><vh>Debugging with Leo</vh>
<v t="ekr.20100805165051.7166"><vh>@file debuggers.txt</vh></v>
</v>
<v t="ekr.20080730212711.14"><vh>Using @shadow</vh>
<v t="ekr.20100805165051.7173"><vh>@file atShadow.txt</vh></v>
</v>
<v t="ekr.20120315101404.14224"><vh>The leoInspect Module</vh>
<v t="ekr.20120315101404.14225"><vh>@file leoInspect.txt</vh></v>
</v>
<v t="tbrown.20120821215353.22854"><vh>Abbreviations / templates</vh></v>
</v>
<v t="ekr.20101025080245.5798"><vh>Leo and Other Programs</vh>
<v t="ekr.20061025065357"><vh>Leo and Emacs</vh>
<v t="ekr.20100805165051.7168"><vh>@file emacs.txt</vh></v>
</v>
<v t="ekr.20080203101507"><vh>ILeo - the IPython bridge</vh>
<v t="ekr.20100805165051.7171"><vh>@file IpythonBridge.txt</vh></v>
</v>
<v t="ekr.20070317033759"><vh>Embedding Leo with the leoBridge module</vh>
<v t="ekr.20100805165051.7169"><vh>@file leoBridge.txt</vh></v>
</v>
<v t="TL.20080804095315.1"><vh>Using Vim with Leo</vh>
<v t="ekr.20100805165051.7172"><vh>@file vimBindings.txt</vh></v>
</v>
<v t="ekr.20060913164304"><vh>Using ZODB with Leo</vh>
<v t="ekr.20100805165051.7167"><vh>@file zodb.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5796"><vh>Reference</vh>
<v t="ekr.20050831184021.5"><vh>Leo's Reference</vh>
<v t="ekr.20100805001344.7253"><vh>@file directives.txt</vh></v>
</v>
<v t="EKR.20040524104904.161"><vh>Designing with Leo</vh>
<v t="ekr.20100805165051.7156"><vh>@file design.txt</vh></v>
</v>
<v t="EKR.20040524104904.245"><vh>History of Leo</vh>
<v t="ekr.20100805165051.7159"><vh>@file history.txt</vh></v>
</v>
<v t="EKR.20040524104904.261"><vh>Theory of Operation</vh>
<v t="ekr.20100805165051.7160"><vh>@file theory.txt</vh></v>
</v>
<v t="ekr.20050901084134"><vh>White papers</vh>
<v t="ekr.20100805165051.7161"><vh>@file whitepapers.txt</vh></v>
</v>
<v t="EKR.20040524104904.274"><vh>Appendices</vh>
<v t="ekr.20100805165051.7174"><vh>@file appendices.txt</vh></v>
</v>
<v t="ekr.20091111112709.6671"><vh>Glossary</vh>
<v t="ekr.20100805165051.7147"><vh>@file glossary.txt</vh></v>
</v>
</v>
<v t="ekr.20060620094033"><vh>What's New...</vh>
<v t="ekr.20100805165051.7175"><vh>@file whatsnew.txt</vh></v>
</v>
<v t="ekr.20111127144911.5545"><vh>Other pages</vh>
<v t="ekr.20111127144911.5546"><vh>@file download.txt</vh></v>
</v>
</v>
<v t="ekr.20090717084250.10702"><vh>Other docs</vh>
<v t="ekr.20100805165051.7176"><vh>@file other_docs.txt</vh></v>
</v>
<v t="ekr.20100821182153.4341"><vh>Slideshows</vh>
<v t="ekr.20101028110015.8271" descendentVnodeUnknownAttributes="7d710028550b302e312e312e382e342e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473550b302e312e312e382e332e3171057d7106580b0000007374725f6c656f5f706f737107680473550b302e312e312e382e352e3171087d7109580b0000007374725f6c656f5f706f73710a680473550b302e312e312e382e322e31710b7d710c580b0000007374725f6c656f5f706f73710d680473752e"><vh>@file slideshows.txt</vh></v>
</v>
<v t="ekr.20101026082911.5536"><vh>Release notes</vh>
<v t="ekr.20100805165051.7177"><vh>@file release_notes.txt</vh></v>
</v>
<v t="ekr.20130806072439.19990"><vh>Leo 4.11 Release notes (TO DO)</vh>
<v t="ekr.20130806072439.19991"><vh>Bugs</vh>
<v t="ekr.20130806072439.19992"><vh>Significant bugs</vh>
<v t="ekr.20130806072439.19993"><vh>Fixed ancient hanger in paste-retaining-clones</vh></v>
<v t="ekr.20130806072439.19994"><vh>Fixed serious atFile read bug</vh></v>
<v t="ekr.20130806072439.19995"><vh>Fixed bug: @button @key=x does not override x</vh></v>
<v t="ekr.20130806072439.19996"><vh>Fixed the wretched scrolling bug</vh></v>
<v t="ekr.20130806072439.19997"><vh>Fixed several node-selection bugs related to hoists &amp; chaptesr</vh>
<v t="ekr.20130806072439.19998"><vh>Fixed bug 823267: when a tab is closed focus may go to a tab other than the visible one</vh></v>
<v t="ekr.20130806072439.19999"><vh>Fixed bug 875327: Positioning outside of hoisted outline" usually causes problems</vh></v>
<v t="ekr.20130806072439.20000"><vh>Fixed bug 917814: Switching Log Pane tabs is done incompletely</vh></v>
<v t="ekr.20130806072439.20001"><vh>Fixed bug 875323: Hoist an @chapter node leaves a non-visible node selected</vh></v>
<v t="ekr.20130806072439.20002"><vh>Fixed bug 831658: @url doesn't leave Chapter</vh></v>
</v>
</v>
<v t="ekr.20130806072439.20003"><vh>Minor bugs</vh>
<v t="ekr.20130806072439.20004"><vh>Fixed bug in p.setAllAncestorAtFileNodesDirty</vh></v>
<v t="ekr.20130806072439.20005"><vh>Fixed double-click problem</vh></v>
<v t="ekr.20130806072439.20006"><vh>Fixed url focus issues</vh></v>
<v t="ekr.20130806072439.20007"><vh>Fixed p1 &gt; p2</vh></v>
<v t="ekr.20130806072439.20008"><vh>Fixed cacher problem</vh></v>
<v t="ekr.20130806072439.20009"><vh>Fixed encoding problem with @shadow</vh></v>
<v t="ekr.20130806072439.20010"><vh>Fixed a major DnD bug</vh></v>
<v t="ekr.20130806072439.20011"><vh>Regularized slashes in @edit/@file</vh></v>
<v t="ekr.20130806072439.20012"><vh>Made sure Leo's write code auto-detects file extension</vh></v>
<v t="ekr.20130806072439.20013"><vh>Fixed cycle-editor-focus bug</vh></v>
<v t="ekr.20130806072439.20014"><vh>Fixed Py3k crash in quicksearch.py</vh></v>
<v t="ekr.20130806072439.20015"><vh>Macro expansion now forces a full recolor</vh></v>
<v t="ekr.20130806072439.20016"><vh>Fixed unicode bugs with @shadow</vh></v>
<v t="ekr.20130806072439.20017"><vh>Recompute width of hard tabs depending on @tabwidth</vh></v>
<v t="ekr.20130806072439.20018"><vh>Applied patch for Bug 800311: Undo: Word granularity should recognize cursor movements</vh></v>
<v t="ekr.20130806072439.20019"><vh>Applied patch for Bug 800312: Collapsing node moves should be optional</vh></v>
<v t="ekr.20130806072439.20020"><vh>Fixed Bug 880975: Binding Meta and print-bindings</vh></v>
<v t="ekr.20130806072439.20021"><vh>Fixed bug 823601: cascade-windows fails</vh></v>
<v t="ekr.20130806072439.20022"><vh>Fixed html colorizing by fixing a bad bug in g.importFromPath</vh></v>
<v t="ekr.20130806072439.20023"><vh>Allow lower case keywords in colorizer</vh></v>
<v t="ekr.20130806072439.20024"><vh>Fixed rst3 pdf problem</vh></v>
<v t="ekr.20130806072439.20025"><vh>Removed traceback when cancelling a write</vh></v>
<v t="ekr.20130806072439.20026"><vh>Fixed removeBlankLinesTokens</vh></v>
<v t="ekr.20130806072439.20027"><vh>Fixed crasher in config.set</vh></v>
<v t="ekr.20130806072439.20028"><vh>Fixed resize-to-screen and minimize-all</vh></v>
<v t="ekr.20130806072439.20029"><vh>Fixed html import problems</vh></v>
<v t="ekr.20130806072439.20030"><vh>Removed extra newlines in g.trace</vh></v>
<v t="ekr.20130806072439.20031"><vh>Fixed crash in compareTokens</vh></v>
<v t="ekr.20130806072439.20032"><vh>Finished import work</vh></v>
<v t="ekr.20130806072439.20033"><vh>Fixed hard crash when deleting body editor 3 times</vh></v>
<v t="ekr.20130806072439.20034"><vh>Fixed add/delete html comments</vh></v>
<v t="ekr.20130806072439.20035"><vh>Fixed bug that prevented text bindings from working in log tabs</vh></v>
<v t="ekr.20130806072439.20036"><vh>Fixed cycle-all-focus command</vh></v>
<v t="ekr.20130806072439.20037"><vh>Fixed crashers involving calls to w.setSelectionRange</vh></v>
<v t="ekr.20130806072439.20038"><vh>Fixed hang in cycleAllFocus</vh></v>
<v t="ekr.20130806072439.20039"><vh>Fixed crasher in k.handleDefaultChar</vh></v>
<v t="ekr.20130806072439.20040"><vh>Fixed bug: Focus lost after opening or closing tab</vh></v>
<v t="ekr.20130806072439.20041"><vh>Ignore unbound Alt/Ctrl keys, especially Alt/Ctrl-N</vh></v>
<v t="ekr.20130806072439.20042"><vh>Fixed bug: ensure global @buttons work</vh></v>
<v t="ekr.20130806072439.20043"><vh>Fixed bug in p.moveToFirstChild</vh></v>
<v t="ekr.20130806072439.20044"><vh>Fixed bug 804960: Refreshing unlinks clones, just reopening connects them again</vh></v>
<v t="ekr.20130806072439.20045"><vh>Fixed crasher in reportMismatch</vh></v>
<v t="ekr.20130806072439.20046"><vh>Fix bug: Allow @all only in top-level @&lt;file&gt; nodes (test2.leo)</vh></v>
<v t="ekr.20130806072439.20047"><vh>Fixed erroneous "file changed" message</vh></v>
<v t="ekr.20130806072439.20048"><vh>Fixed bug 889175: Changing @auto paths overwrites files without warning</vh></v>
<v t="ekr.20130806072439.20049"><vh>Fixed bug in DynamicWindow.setGeometry</vh></v>
<v t="ekr.20130806072439.20050"><vh>Fixed bug 87933: Redefining a key binding breaks menu items with same binding</vh>
<v t="ekr.20130806072439.20051"><vh> Report</vh></v>
<v t="ekr.20130806072439.20052"><vh>Bug 815564: Plugin Menu-Keystroke binding can prevent plugin help display</vh></v>
<v t="ekr.20130806072439.20053"><vh>Updating dependent dicts</vh></v>
</v>
<v t="ekr.20130806072439.20054"><vh>Fixed Bug: @mark-for-unit-tests nodes</vh></v>
<v t="ekr.20130806072439.20055"><vh>The recent files commands now work</vh></v>
<v t="ekr.20130806072439.20056"><vh>Fixed bug: @int pagewidth now set c.page_width</vh></v>
<v t="ekr.20130806072439.20057"><vh>Fixed bug: goto end line handler is broken</vh></v>
<v t="ekr.20130806072439.20058"><vh>Removed unused color tags</vh></v>
<v t="ekr.20130806072439.20059"><vh>Fixed bug: End only goes to physical line</vh></v>
<v t="ekr.20130806072439.20060"><vh>Fixed bug 87933 with major key reorg</vh></v>
<v t="ekr.20130806072439.20061"><vh>Fixed Bug 930726 re expandNodeAndGoToFirstChild</vh></v>
<v t="ekr.20130806072439.20062"><vh>Fixed Bug 869429 (undo &amp; redo when deleting nodes from contextmenu)</vh></v>
<v t="ekr.20130806072439.20063"><vh>Fixed bug 924123: Some SyntaxError's thrown when compiling the whole source with Python 3</vh></v>
<v t="ekr.20130806072439.20064"><vh>Fixed bug 501636: Leo's import code should support non-ascii xml tags</vh></v>
<v t="ekr.20130806072439.20065"><vh>Fixed bug 799695: colorizer bug after move-lines-up into a docstring</vh></v>
<v t="ekr.20130806072439.20066"><vh>Fixed bug 824087: Alt+F4 is not the same as Alt+F, c</vh></v>
<v t="ekr.20130806072439.20067"><vh>Fixed bug 923301: Unicode error when executing 'rst3' command</vh></v>
<v t="ekr.20130806072439.20068"><vh>Fixed g.os_startfile on Linux</vh></v>
<v t="ekr.20130806072439.20069"><vh>Fixed Bug: multiple @language directive not colored correctly</vh></v>
<v t="ekr.20130806072439.20070"><vh>Fixed Bug: multiple @language directives mess up add-comments command</vh></v>
<v t="ekr.20130806072439.20071"><vh>Fixed bug 952365: Leo-Editor can't write a file created from the command line</vh></v>
<v t="ekr.20130806072439.20072"><vh>Fixed bug 951921: Opening myLeoSettings.leo can clutter the console unworthwhile messages</vh></v>
<v t="ekr.20130806072439.20073"><vh>Fixed crasher in flattenOutline</vh></v>
<v t="ekr.20130806072439.20074"><vh>Fix viewrendered crash</vh></v>
<v t="ekr.20130806072439.20075"><vh>Fixed most scrolling problem with multiple editors</vh></v>
<v t="ekr.20130806072439.20076"><vh>Ensure selected @test node is run</vh></v>
<v t="ekr.20130806072439.20077"><vh>fixed problem with file:/// url's on Windows</vh></v>
</v>
<v t="ekr.20130806072439.20078"><vh>Unfixed bugs</vh>
<v t="ekr.20130806072439.20079"><vh>Failed to fix bug 844953: copy-clone-pasted node appears in other tab</vh></v>
</v>
</v>
<v t="ekr.20130806072439.20080"><vh>Code improvements</vh>
<v t="ekr.20130806072439.20081"><vh>Leo's new classes</vh>
<v t="ekr.20130806072439.20082"><vh>LoadManager</vh></v>
<v t="ekr.20130806072439.20083"><vh>ModeController &amp; ModeInfo (not used yet)</vh></v>
<v t="ekr.20130806072439.20084"><vh>LogManager (not used yet)</vh></v>
<v t="ekr.20130806072439.20085"><vh>KeyStroke &amp; ShortcutInfo</vh></v>
<v t="ekr.20130806072439.20086"><vh>EditCommandsManager</vh></v>
</v>
<v t="ekr.20130806072439.20087"><vh>Most files now import just leo.core.leoGlobals</vh></v>
<v t="ekr.20130806072439.20088"><vh>Global switches are now all in leoGlobals.py</vh></v>
<v t="ekr.20130806072439.20089"><vh>version.py now uses bzr_version.py</vh></v>
<v t="ekr.20130806072439.20090"><vh>Minor</vh>
<v t="ekr.20130806072439.20091"><vh>Eliminated the low-level interface</vh></v>
<v t="ekr.20130806072439.20092"><vh>Removed unused cruft from high-level interface</vh></v>
<v t="ekr.20130806072439.20093"><vh>Unified the high-level interface</vh></v>
<v t="ekr.20130806072439.20094"><vh>Create properties for logCtrl &amp; bodyCtrl</vh></v>
<v t="ekr.20130806072439.20095"><vh>Added eventFilters to top-level frames</vh></v>
<v t="ekr.20130806072439.20096"><vh>Added log.orderedTabNames</vh></v>
<v t="ekr.20130806072439.20097"><vh>Created the TestManager class</vh></v>
<v t="ekr.20130806072439.20098"><vh>Created the LoadManager class (docs)</vh></v>
<v t="ekr.20130806072439.20099"><vh>Removed c argument from g.app.config getters</vh></v>
<v t="ekr.20130806072439.20100"><vh>Delay "reading settings" message until after signon</vh></v>
<v t="ekr.20130806072439.20101"><vh>Use at.readOneAtAutoNode instead of ic.readOneAtAutoNode</vh></v>
<v t="ekr.20130806072439.20102"><vh>Added p.positionAfterDeletedTree</vh></v>
<v t="ekr.20130806072439.20103"><vh>Removed Leo's old syntax coloring code</vh></v>
<v t="ekr.20130806072439.20104"><vh>Rewrote shell-command commands</vh></v>
<v t="ekr.20130806072439.20105"><vh>Added g.app.isExternalUnitTest</vh></v>
<v t="ekr.20130806072439.20106"><vh>Added c.config.set</vh></v>
<v t="ekr.20130806072439.20107"><vh>help-for-command now uses g.getDocStringFromFunction</vh></v>
</v>
<v t="ekr.20130806072439.20108"><vh>Investigations</vh>
<v t="ekr.20130806072439.20109"><vh>Investigated unicode problems with print</vh></v>
<v t="ekr.20130806072439.20110"><vh>Investigated autocomplete popup bug</vh></v>
</v>
</v>
<v t="ekr.20130806072439.20111"><vh>Major new features</vh>
<v t="ekr.20130806072439.20112"><vh>Improved handling of URL's</vh></v>
<v t="ekr.20130806072439.20113"><vh>Tab completion shows all @command/@button commands</vh></v>
<v t="ekr.20130806072439.20114"><vh>Weightless unit testsing</vh></v>
<v t="ekr.20130806072439.20115"><vh>Leo's File:Open With command now works with Qt</vh></v>
<v t="ekr.20130806072439.20116"><vh>Added quick edit/save mode</vh></v>
<v t="ekr.20130806072439.20117"><vh>Detached windows</vh></v>
<v t="ekr.20130806072439.20118"><vh>The leoInspect module</vh></v>
<v t="ekr.20130806072439.20119"><vh>Instant abbreviations (~a)</vh></v>
</v>
<v t="ekr.20130806072439.20120"><vh>Minor new features</vh>
<v t="ekr.20130806072439.20121"><vh>Improved Leo's home page</vh></v>
<v t="ekr.20130806072439.20122"><vh>Generalized stylesheet handling</vh></v>
<v t="ekr.20130806072439.20123"><vh>Leo now raises a dialog on @ignore @&lt;file&gt; nodes</vh></v>
<v t="ekr.20130806072439.20124"><vh>@ignore now prevents local @button/@command node definitions</vh></v>
<v t="ekr.20130806072439.20125"><vh>Added support for tags in @button nodes</vh></v>
<v t="ekr.20130806072439.20126"><vh>bridgeController.initLeo now kills events if plugins not loaded</vh></v>
<v t="ekr.20130806072439.20127"><vh>Call unselect1 hook only once</vh></v>
<v t="ekr.20130806072439.20128"><vh>Improved scannerUnitTest</vh></v>
<v t="ekr.20130806072439.20129"><vh>Leo supports @ignore when scanning for @command and @button nodes.</vh></v>
<v t="ekr.20130806072439.20130"><vh>Support @ignore when installing @command/@button nodes</vh></v>
<v t="ekr.20130806072439.20131"><vh>set g.app.execute_script during script execution</vh></v>
<v t="ekr.20130806072439.20132"><vh>Support single-line nodes like &lt;node/&gt; xml import code</vh></v>
<v t="ekr.20130806072439.20133"><vh>The Find tab now scrolls</vh></v>
<v t="ekr.20130806072439.20134"><vh>Warn when importing/reading/writing @ignored nodes</vh></v>
<v t="ekr.20130806072439.20135"><vh>Disabled section-reference handling in @auto files</vh></v>
<v t="ekr.20130806072439.20136"><vh>Dragging a binary file to Leo creates an @url node</vh></v>
<v t="ekr.20130806072439.20137"><vh>Alt-left-arrow collapses all children when selecting the parent</vh></v>
<v t="ekr.20130806072439.20138"><vh>Reinstated warnings for conflicting definitions</vh></v>
<v t="ekr.20130806072439.20139"><vh>Searches from Leo's web pages now work</vh></v>
<v t="ekr.20130806072439.20140"><vh>Leo's home page now shows the latest postings from leo-editor.</vh></v>
<v t="ekr.20130806072439.20141"><vh>Alt-Home &amp; Alt-End collapse all possible nodes</vh></v>
</v>
<v t="ekr.20130806072439.20142"><vh>New &amp; improved commands</vh>
<v t="ekr.20130806072439.20143"><vh>Added @button split-defs</vh></v>
<v t="ekr.20130806072439.20144"><vh>Added beautify-c command</vh></v>
<v t="ekr.20130806072439.20145"><vh>Added c-to-python command</vh></v>
<v t="ekr.20130806072439.20146"><vh>Added clone-find-all-flattened command</vh></v>
<v t="ekr.20130806072439.20147"><vh>Added clone/move/delete-marked-nodes commands</vh></v>
<v t="ekr.20130806072439.20148"><vh>Added run-marked-unit-tests-locally/externally</vh></v>
<v t="ekr.20130806072439.20149"><vh>Added select-to-matching-bracket command</vh></v>
<v t="ekr.20130806072439.20150"><vh>Improved add/delete-comments</vh></v>
<v t="ekr.20130806072439.20151"><vh>Improved open command</vh></v>
<v t="ekr.20130806072439.20152"><vh>Improved page-up &amp; page-down commands</vh></v>
<v t="ekr.20130806072439.20153"><vh>Improved presentation of autocompletion list</vh></v>
<v t="ekr.20130806072439.20154"><vh>Improved print-bindings &amp; print-commands</vh></v>
<v t="ekr.20130806072439.20155"><vh>Improved rst3 command</vh></v>
<v t="ekr.20130806072439.20156"><vh>Improved word jumps/deletes</vh></v>
</v>
<v t="ekr.20130806072439.20157"><vh>Plugins</vh>
<v t="ekr.20130806072439.20158"><vh>Improved quicksearch plugin</vh></v>
<v t="ekr.20130806072439.20159"><vh>New bigdash plugin</vh></v>
<v t="ekr.20130806072439.20160"><vh>Removed scrolledmessage plugin</vh></v>
<v t="ekr.20130806072439.20161"><vh>vim and xemacs plugins now work smoothly with contextmenu plugin.</vh></v>
<v t="ekr.20130806072439.20162"><vh>Supported auto-hide in viewrendered plugin</vh></v>
</v>
<v t="ekr.20130806072439.20163"><vh>Scripts</vh>
<v t="ekr.20130806072439.20164"><vh>Improved create @auto nodes script</vh></v>
<v t="ekr.20130806072439.20165"><vh>Added import-org-mode script</vh></v>
<v t="ekr.20130806072439.20166"><vh>Code for displaying a function call hierarchy in Leo</vh>
<v t="ekr.20130806072439.20167"><vh>call tree</vh>
<v t="ekr.20130806072439.20168"><vh>displayCalltree</vh></v>
<v t="ekr.20130806072439.20169"><vh>trace session</vh></v>
</v>
</v>
<v t="ekr.20130806072439.20170"><vh>Improved recursive import script</vh></v>
<v t="ekr.20130806072439.20171"><vh>Replacing Qt stylesheets on the fly</vh></v>
<v t="ekr.20130806072439.20172"><vh>Terry added bookmark scripts</vh></v>
<v t="ekr.20130806072439.20173"><vh>Document Terry's magic refactor button</vh>
<v t="ekr.20130806072439.20174"><vh>@button fac</vh></v>
</v>
<v t="ekr.20130806072439.20175"><vh>Changed calling signatures of g.openWithFileName and g.app.newCommander</vh></v>
<v t="ekr.20130806072439.20176"><vh>The open-with event now has a new format</vh></v>
</v>
<v t="ekr.20130806072439.20177"><vh>Settings</vh>
<v t="ekr.20130806072439.20178"><vh>Added @bool indent_added_comments setting</vh></v>
<v t="ekr.20130806072439.20179"><vh>Added @bool use_body_focus_border</vh></v>
<v t="ekr.20130806072439.20180"><vh>Added border around selected pane</vh></v>
<v t="ekr.20130806072439.20181"><vh>Added shell commands to Cmds menu</vh></v>
<v t="ekr.20130806072439.20182"><vh>Added show-decoration-selected: 1 to stylesheet</vh></v>
<v t="ekr.20130806072439.20183"><vh>Added stylesheets for Log &amp; Find tabs</vh></v>
<v t="ekr.20130806072439.20184"><vh>Eliminated the -c option</vh></v>
<v t="ekr.20130806072439.20185"><vh>New default settings for run unit tests commands</vh></v>
<v t="ekr.20130806072439.20186"><vh>New format for @openwith settings nodes</vh></v>
<v t="ekr.20130806072439.20187"><vh>New search order for leoSettings.leo &amp; myLeoSettings.leo</vh></v>
</v>
</v>
<v t="ekr.20130526065545.14924"><vh>To be documented (do not delete!!)</vh>
<v t="ekr.20130806072439.20200"><vh>Videos</vh></v>
<v t="ekr.20130803073926.17113"><vh>Features</vh>
<v t="ekr.20130526065545.17594"><vh>@wrap now suppresses horizontal scrolling</vh>
<v t="ekr.20130526065545.17593"><vh>Re: @wrap now suppresses horizontal scrolling</vh></v>
</v>
<v t="ekr.20130806072439.19486"><vh>About @testsetup</vh>
<v t="ekr.20130526065545.17428"><vh>Eureka! @testsetup</vh>
<v t="ekr.20130526065545.17427"><vh>Re: Eureka! @testsetup</vh></v>
</v>
</v>
<v t="ekr.20130526065545.17495"><vh>ANN: zoom-in/out commands</vh>
<v t="ekr.20130526065545.17494"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17496"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17497"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17498"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17499"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17500"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17501"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17502"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17503"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17504"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17505"><vh>body text zooming pushed</vh></v>
</v>
<v t="ekr.20130806211959.17093"><vh>Dumping leo docs to excel</vh></v>
<v t="ekr.20130526065545.14925"><vh>Full text searches</vh></v>
<v t="ekr.20130526065545.17445"><vh>Major additions to abbreviations</vh>
<v t="ekr.20130526065545.17442"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17443"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17444"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17446"><vh>Re: Major additions to abbreviations</vh></v>
</v>
<v t="ekr.20130526065545.14927"><vh>outline-otl Leo as a web app</vh>
<v t="ekr.20130526065545.14928"><vh>NEW: LeoReader, as web app</vh></v>
</v>
<v t="ekr.20130526065545.17634"><vh>persistent state with json as a leo abbreviation</vh>
<v t="ekr.20130526065545.17633"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17635"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17636"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17637"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17638"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
</v>
<v t="ekr.20130806211959.17078"><vh>QML notebook (in contrib branch)</vh>
<v t="ekr.20130806211959.17079"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17080"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17081"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17082"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17083"><vh>RE: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17084"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17085"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17086"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17087"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
</v>
<v t="ekr.20130806175854.17068"><vh>Rev 5488: importing IPython .ipynb to Leo outlines</vh></v>
<v t="ekr.20130806211959.17094"><vh>Script to export full contents</vh>
<v t="ekr.20130806211959.17095"><vh>script</vh></v>
</v>
<v t="ekr.20130806072439.19631"><vh>sublime text &amp; other themes</vh>
<v t="ekr.20130526065545.17514"><vh>New theme in leoSettings.leo: Sublime Text...</vh></v>
<v t="ekr.20130526065545.17589"><vh>go-anywhere a'la sublime text: first light"</vh>
<v t="ekr.20130526065545.17590"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
<v t="ekr.20130526065545.17592"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
</v>
<v t="ekr.20130526065545.17515"><vh>ANN: Sublime Text 2 like dark theme</vh></v>
<v t="ekr.20130526065545.17459"><vh>ANN: dark theme pushed to trunk</vh>
<v t="ekr.20130526065545.17451"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17452"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17453"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17454"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17455"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17456"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17457"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17458"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17460"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17461"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17462"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17463"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17464"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17465"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
</v>
</v>
<v t="ekr.20130526065545.17576"><vh>Templates with macro expansions</vh>
<v t="ekr.20130526065545.17575"><vh>Re: Templates with macro expansions</vh></v>
<v t="ekr.20130526065545.17577"><vh>Re: Templates with macro expansions</vh></v>
</v>
</v>
<v t="ekr.20130404104418.5951"><vh>For Implementors</vh>
<v t="ekr.20130806072439.19788"><vh>Centralizing focus handling (to make debugging easier)</vh>
<v t="ekr.20130806072439.19787"><vh>Re: Centralizing focus handling (to make debugging easier)</vh></v>
</v>
<v t="ekr.20130806072439.19790"><vh>Free "continuous integration" for Leo</vh>
<v t="ekr.20130806072439.19791"><vh>Re: Free "continuous integration" for Leo</vh></v>
</v>
<v t="ekr.20130806211959.16740"><vh>Notes to myself: fixing the key binding bug</vh></v>
<v t="ekr.20130806072439.19785"><vh>Toolkit independent apis</vh>
<v t="ekr.20130806072439.19786"><vh>Re: Toolkit independent apis</vh></v>
</v>
</v>
<v t="ekr.20130803073926.17115"><vh>Scripts</vh>
<v t="ekr.20130526065545.14929"><vh>Rev 5378: cleanup-imported-nodes script in scripts.leo &amp; an Aha</vh></v>
<v t="ekr.20130526065545.14930"><vh>Revised recursive import script</vh></v>
<v t="ekr.20130526065545.17546"><vh>Tool for diffing Leo files</vh>
<v t="ekr.20130526065545.17545"><vh>Re: Tool for diffing Leo files</vh></v>
</v>
<v t="ekr.20130526065545.17487"><vh>Indexing files for full text search</vh>
<v t="ekr.20130526065545.17488"><vh>Re: Indexing files for full text search</vh></v>
<v t="ekr.20130526065545.17489"><vh>Re: Idea/needed: system command queue</vh></v>
<v t="ekr.20130526065545.17490"><vh>Re: Idea/needed: system command queue</vh></v>
</v>
<v t="ekr.20130803125244.17095"><vh>position script (put in scripting chapter?)</vh></v>
</v>
<v t="ekr.20130803073926.17114"><vh>Plugins</vh>
<v t="ekr.20130806072439.18495"><vh>ANN: in body python calculations commands</vh>
<v t="ekr.20130806072439.18496"><vh>Re: ANN: in body python calculations commands</vh></v>
<v t="ekr.20130806072439.18497"><vh>Re: ANN: in body python calculations commands</vh></v>
<v t="ekr.20130806072439.18498"><vh>Re: ANN: in body python calculations commands</vh></v>
</v>
<v t="ekr.20130526065545.14926"><vh>bookmarks.py</vh>
<v t="ekr.20130806072439.18499"><vh>ANN: more fluid bookmark pane control</vh></v>
</v>
<v t="ekr.20130806072439.18508"><vh>Cross-outline node editing</vh>
<v t="ekr.20130806072439.18509"><vh>Re: Cross-outline node editing</vh></v>
<v t="ekr.20130806072439.18510"><vh>Re: Cross-outline node editing</vh></v>
<v t="ekr.20130806072439.18511"><vh>Re: Cross-outline node editing</vh></v>
</v>
<v t="ekr.20130806072439.18512"><vh>Full tree preview: wishlist item? ... or am I missing something?</vh>
<v t="ekr.20130806072439.18513"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18514"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18515"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18516"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18517"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18518"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18519"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18520"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18521"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18522"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18523"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18524"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18525"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18526"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18527"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18528"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18529"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
<v t="ekr.20130806072439.18530"><vh>Re: Full tree preview: wishlist item? ... or am I missing something?</vh></v>
</v>
<v t="ekr.20130806072439.18531"><vh>Gauging interest: markdown processing addition to viewrendered?</vh>
<v t="ekr.20130806072439.18532"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18533"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18534"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18535"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18536"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18537"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18538"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18539"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18540"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
</v>
<v t="ekr.20130806072439.18541"><vh>Ipython now has cell magic</vh></v>
<v t="ekr.20130806072439.18542"><vh>new jump to error command for leoscreen</vh></v>
<v t="ekr.20130526065545.17620"><vh>printing.py</vh>
<v t="ekr.20130806072439.18804"><vh>[ANN] New plugin - printing.py</vh>
<v t="ekr.20130806072439.18805"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130806072439.18806"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130806072439.18807"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130806072439.18808"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17621"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17622"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17623"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17624"><vh>Re: [ANN] New plugin - printing.py</vh></v>
</v>
</v>
<v t="ekr.20130806072439.18543"><vh>Read / write json files added to valuespace.py plugin</vh>
<v t="ekr.20130806072439.18544"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18545"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18546"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18547"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18548"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18549"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18550"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18551"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
</v>
<v t="ekr.20130526065545.17435"><vh>screen_capture.py</vh>
<v t="ekr.20130526065545.17429"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17430"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17431"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17432"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17433"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17434"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17436"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
</v>
<v t="ekr.20130806072439.18552"><vh>should add "refresh from disk" at parent node is a good idea?</vh>
<v t="ekr.20130806072439.18553"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
<v t="ekr.20130806072439.18554"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
<v t="ekr.20130806072439.18555"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
<v t="ekr.20130806072439.18556"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
</v>
<v t="ekr.20130803073926.17123"><vh>valuespace.py</vh>
<v t="ekr.20130526065545.17506"><vh>Quick valuespace.py update: it now support...</vh></v>
<v t="ekr.20130803125244.17094"><vh>Document valuespace from Ville's blog</vh></v>
<v t="ekr.20130806072439.18889"><vh>Blog post about valuespace up on leo-editor.github.io</vh>
<v t="ekr.20130806072439.18890"><vh>Re: update about Leo google group</vh></v>
<v t="ekr.20130806072439.18891"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130806072439.18892"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130806072439.18893"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130806072439.18894"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
</v>
</v>
<v t="ekr.20130806072439.18557"><vh>Ville, please help make leoIPython.py work with legacy IPython</vh>
<v t="ekr.20130806072439.18558"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18559"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18560"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18561"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18562"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18563"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18564"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18565"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18566"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18567"><vh>"Mylyn" with the new hooks</vh>
<v t="ekr.20130806072439.18568"><vh>Re: "Mylyn" with the new hooks</vh></v>
</v>
</v>
</v>
<v t="ekr.20130803073926.17122"><vh>Tutorials &amp; how-to</vh>
<v t="ekr.20130806072439.19664"><vh>A beautiful pattern for composing large strings</vh>
<v t="ekr.20130806072439.19665"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19666"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19667"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19668"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19669"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19670"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130806072439.19671"><vh>Re: A beautiful pattern for composing large strings</vh></v>
</v>
<v t="ekr.20130806072439.19654"><vh>All about clone conflicts</vh>
<v t="ekr.20130806072439.19655"><vh>Re: All about clone conflicts</vh></v>
</v>
<v t="ekr.20130803125244.17092"><vh>Draft: Position tutorial</vh>
<v t="ekr.20130803125244.17093"><vh>other info</vh></v>
</v>
<v t="ekr.20130526065545.17595"><vh>Draft: unit-testing tutorial</vh></v>
<v t="ekr.20130411023340.5976"><vh>Tutorial scripts (To be written)</vh>
<v t="ekr.20130413153344.14589"><vh>What makes Leo special: shorter</vh></v>
<v t="ekr.20130411135403.5972"><vh>What makes Leo special</vh></v>
<v t="ekr.20130411023340.5978"><vh>Scripting</vh></v>
<v t="ekr.20130411023340.5979"><vh>External files</vh></v>
<v t="ekr.20130411023340.5980"><vh>The screenshots plugin</vh></v>
<v t="ekr.20130411023340.5981"><vh>The contextmenu plugin</vh></v>
<v t="ekr.20130411023340.5982"><vh>The bookmarks plugin</vh></v>
<v t="ekr.20130411023340.5983"><vh>The todo plugin</vh></v>
</v>
</v>
</v>
<v t="ekr.20130803073926.17124"><vh>Doc bugs</vh>
<v t="ekr.20130806072439.20195"><vh>* Leo's home page moving to leoeditor.com</vh></v>
<v t="ekr.20130803125244.17080"><vh>* Document Windows associations</vh></v>
<v t="ekr.20130805080841.17066"><vh>Update list of commands in the docs</vh></v>
<v t="ekr.20130526065545.14931"><vh>Suggestion for docs: Find and replace, missing a step</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040524104904.161"></t>
<t tx="EKR.20040524104904.211"></t>
<t tx="EKR.20040524104904.245"></t>
<t tx="EKR.20040524104904.261"></t>
<t tx="EKR.20040524104904.274"></t>
<t tx="EKR.20040524104904.99"></t>
<t tx="TL.20080804095315.1"></t>
<t tx="ekr.20040414161647">@pagewidth 70
@language rest

These are the sources for Leo's users guide.

They contain sphinx markup. See::
    
    http://sphinx.pocoo.org/
    http://docutils.sourceforge.net/docs/user/rst/quickstart.html
    
To generate these docs, see the next node: "Generating the Users Guide"
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20050407144342">



</t>
<t tx="ekr.20050407144342.1"></t>
<t tx="ekr.20050407144342.2"></t>
<t tx="ekr.20050407144342.3"></t>
<t tx="ekr.20050407144417"></t>
<t tx="ekr.20050812123002"></t>
<t tx="ekr.20050812123002.1"></t>
<t tx="ekr.20050812123002.2">Deletes p.v.rst2_http_attributename from all nodes after writing.

Deletes p.v.unknownAttributes if it then becomes empty.
</t>
<t tx="ekr.20050812123002.3"></t>
<t tx="ekr.20050812123002.4">@nocolor

If False, add_node_marker and http_support_main  do nothing.  Otherwise add_node_marker does the following:

1. add_node_marker writes a string using generate_node_marker.

Generates 'http-node-marker-'+str(number), where number is config.node_counter
(incremented each time add_node_marker is called.

2. Enables the following code in :
@color

    if config.tag == 'open2':
        http_map = self.http_map
    else:
        http_map = {}
        config.anchormap = {}
        # maps v nodes to markers.
        config.node_counter = 0
    # [snip] code to write the tree
    if config.rst2_http_server_support:
        self.http_map = http_map
</t>
<t tx="ekr.20050812123002.5"></t>
<t tx="ekr.20050812123002.6">True: call body_filter to massage text.

Removes @ignore, @nocolor, @wrap directives.
</t>
<t tx="ekr.20050812123002.7">Used differently.  See rst2_pure_document.
</t>
<t tx="ekr.20050812123002.8"></t>
<t tx="ekr.20050831184021.1"></t>
<t tx="ekr.20050831184021.3"></t>
<t tx="ekr.20050831184021.4"></t>
<t tx="ekr.20050831184021.5"></t>
<t tx="ekr.20050831195331.1"></t>
<t tx="ekr.20050831195331.4"></t>
<t tx="ekr.20050831195449">@language rest

For instruction about installing Leo see:
http://leoeditor.com/installing.html

For everything a beginner needs to know about Leo see:
http://leoeditor.com/intro.html

For help, please ask questions at:
http://groups.google.com/group/leo-editor</t>
<t tx="ekr.20050901084134"></t>
<t tx="ekr.20050912125144"></t>
<t tx="ekr.20051202072010"></t>
<t tx="ekr.20060430221745"></t>
<t tx="ekr.20060527105211"></t>
<t tx="ekr.20060612102055"></t>
<t tx="ekr.20060620094033"></t>
<t tx="ekr.20060913164304"></t>
<t tx="ekr.20061025065357"></t>
<t tx="ekr.20070317033759"></t>
<t tx="ekr.20070610174018"></t>
<t tx="ekr.20070628083442"></t>
<t tx="ekr.20070701101808"></t>
<t tx="ekr.20080203101507"></t>
<t tx="ekr.20080412124815.1"></t>
<t tx="ekr.20080730212711.14"></t>
<t tx="ekr.20080923182326.1">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.
</t>
<t tx="ekr.20090717084250.10702"></t>
<t tx="ekr.20091111112709.6671"></t>
<t tx="ekr.20091130111843.6787"></t>
<t tx="ekr.20100731112744.7267">@pagewidth 75</t>
<t tx="ekr.20100805171546.4412"># This section contains important files used to generate Leo's web site.</t>
<t tx="ekr.20100821182153.4341"></t>
<t tx="ekr.20100907092300.4440"></t>
<t tx="ekr.20100907092300.4441">Path to inkscape template file
</t>
<t tx="ekr.20100907092300.4442">Path to Inkscape executable
</t>
<t tx="ekr.20101007100904.4372"></t>
<t tx="ekr.20101009114830.4723">@nocolor-node

Formerly, this had to be on because the expansion bits
of @screenshot trees were significant.

Happily, this is no longer true.

True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101009114830.4724"></t>
<t tx="ekr.20101009114830.4725"></t>
<t tx="ekr.20101025080245.5794"></t>
<t tx="ekr.20101025080245.5795"></t>
<t tx="ekr.20101025080245.5796"></t>
<t tx="ekr.20101025080245.5798"></t>
<t tx="ekr.20101025080245.5799"></t>
<t tx="ekr.20101025080245.5801">c:/leo.repo/trunk/leo/doc/leo_toc.html</t>
<t tx="ekr.20101026081737.5531">@language html

&lt;!-- EKR: changed these by hand to give the toc some structure --&gt;

&lt;p&gt;Preliminaries&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="frontMatter.html"&gt;Front Matter&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="preface.html"&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="testimonials.html"&gt;What People Are Saying About Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="FAQ.html"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="slides.html"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="installing.html"&gt;Installing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="intro.html"&gt;The Leo Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="outlines.html"&gt;Using Outlines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intermediate Topics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="commands.html"&gt;Using Leo&amp;#8217;s Commands&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="customizing.html"&gt;Customizing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="coloring.html"&gt;Controlling Syntax Coloring&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="rstplugin3.html"&gt;Creating Documents with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="scripting.html"&gt;Scripting Leo with Python&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="plugins.html"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="writingPlugins.html"&gt;Writing Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="unitTesting.html"&gt;Unit testing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="debuggers.html"&gt;Debugging with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="atShadow.html"&gt;Using &amp;#64;shadow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leo and Other Programs&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="emacs.html"&gt;Leo and Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="IPythonBridge.html"&gt;IPython and Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="leoBridge.html"&gt;Embedding Leo with the leoBridge module&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="vimBindings.html"&gt;Using Vim Bindings with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="zodb.html"&gt;Using ZODB with Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="directives.html"&gt;Leo&amp;#8217;s Reference&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="design.html"&gt;Designing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="history.html"&gt;History of Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="theory.html"&gt;Theory of Operation&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="whitepapers.html"&gt;White Papers&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="appendices.html"&gt;Appendices&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="glossary.html"&gt;Glossary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Release Notes

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="what-is-new.html"&gt;What&amp;#8217;s New in Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</t>
<t tx="ekr.20101026082911.5536"></t>
<t tx="ekr.20101104024804.4898">@nocolor-node

The children of this node contain two @button scripts. These are disabled, but
you can execute them by selecting them and hitting Ctrl-B (execute-script).

To generate these docs by hand:

    - From this file, run rst3 on desired tree.
    - cd leo\doc\html
    - make html

To create pdf (probably easiest on Linux, with necessary latex packages installed):

    - make latex
    - cd _build/latex
    - make all-pdf
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20101112045055.5065">http://www.greygreen.org/tmp/plugins.html</t>
<t tx="ekr.20111108052738.5507">run-marked-unit-tests-externally = Alt-4
run-all-unit-tests-externally = Alt-5
</t>
<t tx="ekr.20111127144911.5545"></t>
<t tx="ekr.20120315101404.14224">@pagewidth 70</t>
<t tx="ekr.20130327143919.5868">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Leo's home page has moved&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Leo's home page has moved.&lt;/h1&gt;
&lt;p&gt;This page has moved to &lt;a href="http://leoeditor.com"&gt;http://leoeditor.com&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20130404104418.5951">@language rest

- Don't read code: use g.trace and g.pdb instead.
- Where the bodies are hidden.
    - self.w in leoEditCommands.py
- Complex code that *can't* be simplified.
- The top 20 methods.  You must understand these *in general*.
    - k.masterKeyHandler.
    - qt.eventFilter.
    - 
    
    
** Add mandatory _kind fields to all g.Bunches.</t>
<t tx="ekr.20130411023340.5976"></t>
<t tx="ekr.20130411023340.5978"></t>
<t tx="ekr.20130411023340.5979"></t>
<t tx="ekr.20130411023340.5980"></t>
<t tx="ekr.20130411023340.5981">@language rest

Adds configurable right-click menu items to nodes.
</t>
<t tx="ekr.20130411023340.5982"></t>
<t tx="ekr.20130411023340.5983"></t>
<t tx="ekr.20130411135403.5972">@language rest

Leo looks like relatively ordinary outline editor,
but it has unique scripting and data-organizing abilities.

Scripting
---------

- Any node in the outline may contain a Leo script.
- Leo can *compose* scripts from a node and its descendants.
- Leo scripts can *easily* access all the data in any outline.

Leo scripts can do things that can't be *imagined* in other editors.

Data-organizing
---------------

- Cloned nodes may appear many times in the same outline.
- Clones create views of data that persist indefinitely.
  Any set of nodes may appear in arbitrirly many views of the data.
- Headlines naturally describe the data contained in nodes.


Script nodes
------------

There are many ways to combine these capabilities.
</t>
<t tx="ekr.20130413153344.14589">@wrap
@language rest

.. |br| raw:: html

   &lt;br /&gt;
   
**Leo completely integrates scripting and outlines.** |br|
Leo outlines are true Python objects, not just text.

\1. **Headlines naturally define types**, such as:

**@file** trees create external files. |br|
**@test** nodes and trees create unit tests. |br|
**@button** nodes create **script buttons**. |br|
**@command** nodes create user-defined commands. |br|
**@html** trees create web pages. |br|
**@settings** trees contain Leo settings.

\2. **Any node may contain a Leo script**:

A simple outline-aware markup language creates scripts |br|
and external files from outline nodes and trees.

\3. **Leo scripts have *easy* access to all outline data**:

All Leo scripts execute with these **predefined symbols**: |br|
**c** gives access to all outline data and all of Leo's code. |br|
**p** is the presently selected node in the script. |br|
**p.h** is the headline text; **p.b** is the body text. |br|
**g** is a module containing utility functions &amp; classes.

\4. **All parts of Leo are scriptable**, including: |br|

.. In short, all outline data are completely scriptable.</t>
<t tx="ekr.20130526065545.14924">@language rest
</t>
<t tx="ekr.20130526065545.14925">4/16/12

Apart from the full text search indexing script I just added, I've made
a bunch of basically cosmetic changes to Ville's multi outline full text
search tool.  There's a new @setting, @int fts_max_hits, which controls
the max hits returned, instead of the hardwired default of 30.

With any sensible value for fts_max_hits, searches for terms which
generate many hits in many outlines won't return the full list of
outlines containing hits, because the search stops when fts_max_hits is
reached.  I set fts_max_hits to a non-sensible 1200 to get around this,
it seems to work fine.  Obviously terms which generate that many hits
are bad search terms anyway, but it's helpful to get as close to the
full list of outlines containing hits as possible.

Also most of my changes apply only to the "f target" find command, not
the simpler "s target" search command.</t>
<t tx="ekr.20130526065545.14926">10/2/11

Can also be used for bookmarking directly from the browser to Leo.  To
do this, add a bookmark to the browser with the following URL / Location:

    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&amp;name=' + escape(d.title) + '&amp;selection=' + escape(window.getSelection()) + '&amp;url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)

and edit the port (8130 in the example above) to match the port you're using
for mod_http.

Bookmarks are created as the first node in the outline which has been opened longest.
You can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,
e.g.::

    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming

to place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.

The headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.
If the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.

The browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true
in ``about:config`` in Firefox.</t>
<t tx="ekr.20130526065545.14927">As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
imports of .otl files.

**Warning**: the new code is simply a prototype.  Play with these
features *only* on files you can afford to be corrupted.

To use @auto-otl:

1.  The easy, and relatively safe way:

- Use Leo's import-file command to create and populate an @auto-otl
node.
- Save the .leo file.

2. The manual, less safe way:

- Create a node called @auto-otl x.y
  x can be an absolute path or a path relative to the directory
containing the .leo file.

- Save the .leo file, but **do not** overwrite the existing .otl file
when prompted.

Either way, you should now have an @auto-otl node whose **children**
represent the contents of the external .otl file.  (The actual @auto-
otl node is *not* written to the external file.  This allows you to
put Leo directives in the node.) Changing the children in Leo will
change the external file.  Changing the external file outside of Leo
will update the outline the next time you restart the .leo file
containing the @auto-otl node.

**Important**: as with all kinds of @auto nodes, clone links will
break the next time you load Leo if the @auto-otl tree contains any
kind of cloned nodes.  This is pretty much a fundamental limitation of
@auto trees.

However, if the VO people wanted to *retain* gnx's when editing in
vim, it would, in theory, be possible to retain clone links when Leo
read the external .otl file.  I don't plan to do this any time soon,
and it would require and extension to the VO file format, but I wanted
to point out the possibilities.


&gt; **Important**: as with all kinds of @auto nodes, clone links will
&gt; break the next time you load Leo if the @auto-otl tree contains any
&gt; kind of cloned nodes.  This is pretty much a fundamental limitation of
&gt; @auto trees.

I'd like to add two points to this discussion:

1. This limitation instantly disappears when you convert from (any
kind of) @auto to @file.  The reason is that the sentinels that Leo
writes "carry" both outline structure *and* node identity.  It is this
unique, immutable node identity which provides for robust linking of
clones.

I hinted in another thread that a smallish addition to the otl format
would allow .otl files to carry identity.  For example, suppose that
headlines were optionally represented in the file format as::

    &lt;indentation: hard tabs&gt; :: gnx :: headline

The VO folks could do this in an upward compatible manner without
changing vim's core in any way.  True, it doesn't give VO Leo's clone
capabilities, but it *retains* the information necessary to use clones
*in Leo*.

2. Unlike .otl, the external files produced by Leo can be used
*unchanged* as program source files.  Indeed, all of Leo's Python
source files contain outline structure and node identity--Leo
sentinels are simply comment lines in the appropriate language.  In
contrast, the format of .otl files ensures that body text can not be
used untranslated as source code.  It is the ability to *be* source
code, even more than cloning, that makes Leo's external file format so
useful.

&gt; As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
&gt; imports of .otl files.

Rev 5310 contains a rewrite of the scanHelper method.  As before, this
code should be considered experimental.

The scanHelper method now parses each line of the .otl independently:
any combination of headline and body lines should now be valid,
regardless of indentation level.  If necessary, the parser will insert
intermediate nodes so as to allow lines that are indented more than
one more than the previous node. This is the most general scheme that
I can imagine.</t>
<t tx="ekr.20130526065545.14928">From Ville:

.... aaaaand we are live :).

Test it out at:

http://koti.kapsi.fi/vivainio/t/LeoReader/main.html

Sources here:

https://github.com/vivainio/LeoReader

Pretty much all the relevant stuff is in these files:

https://github.com/vivainio/LeoReader/blob/master/leoaccess.coffee

https://github.com/vivainio/LeoReader/blob/master/main.html


On Sat, May 12, 2012 at 12:01 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I want to do some technology evaluation, so I will start doing a Leo
&gt; file reader for mobile devices using:
&gt;
&gt; - jQuery mobile
&gt; - CoffeeScript
&gt;
&gt; This can be deployed on web or locally. Interesting use cases are
&gt; browsing Leo notes you composed elsewhere on your tablet, and
&gt; publishing leo docs on the web (e.g. we could host fully browseable
&gt; leo source outline on Leo website)
&gt;
&gt; I will notify the mailing list on the progress; it may be slow since I
&gt; don't have much contiguous time slots for hobby projects at the
&gt; moment. If someone wants to hop along, all the better; I'll probably
&gt; start the project at github once I have something that runs on a
&gt; desktop browser properly.

btw, noted that it doesn't work with IE (didn't test it at the time, it's easyfix TBD later).

Works ok in Firefox and Chrome.</t>
<t tx="ekr.20130526065545.14929">Edward K. Ream &lt;edreamleo@gmail.com&gt;

A new script, now in scripts.leo, cleans up imported @file nodes as follows:

- Moves a shebang line from the first child to the root.
- Moves a leading docstring in the first child to the root.
- Uses a section reference for declarations.
- Removes leading and trailing blank lines from all nodes.
- Merges a node containing nothing but comments with the next node.
- Merges a node containing no class or def lines with the previous node.

The Aha: dealing with trees *after* they have been created is much
easier than creating the tree in the first place.

It would be impossible to conceive of this script in any other environment.
Leo's node structure drastically simplifies the patterns to be discovered.
</t>
<t tx="ekr.20130526065545.14930">6/2/12

The recursive import script now contains a suite of post-processing fixes:

- Replacing backslashes with forward slashes in headlines.
- Removing empty nodes.
- Adding @path directives that reduce the needed path specifiers in descendant nodes.
- Adding @file to nodes or replacing @file with @@file.


No matter how good Leo's importers are, (and they are now quite good),
there will *always* be cases where thoughtful human intervention will be
required.

Some import mistakes can *only* be found by running tests.  For
complex programs like 2to3, the only truly safe way to check imports
is by running the 2to3 test suite.
</t>
<t tx="ekr.20130526065545.14931">7/11/12
Daniel Rairigh danielrairigh@gmail.com via googlegroups.com 
	
I have been working on learning it this week, and am building quite a list
of questions, but am trying first to answer them from the documentation.

Which leads me to my suggestion:

I read the find and replace instructions here:
http://webpages.charter.net/edreamleo/FAQ.html?highlight=replace#how-can-i-do-a-simple-find-and-replace

And followed the &lt;Ctrl-shift-r&gt;find-pattern&lt;return&gt;replace-text&lt;return&gt;
pattern. But was stumped for quite a while, because the FAQ missed the next
two crucial steps: Ctrl+= &amp; F3

I imagine it would help other newbies like me if those two steps were added
to the FAQ.

Terry Brown &lt;terry_n_brown@yahoo.com&gt;
	
&gt; And followed the &lt;Ctrl-shift-r&gt;find-pattern&lt;return&gt;replace-text&lt;return&gt;
&gt; pattern. But was stumped for quite a while, because the FAQ missed the next
&gt; two crucial steps: Ctrl+= &amp; F3

Ctrl+- combines the effect of Ctrl+= &amp; F3, so you typically only use
Ctrl+= when you know your on the last entry of interest and don't want
to just to the next.

But you're right about the docs, something this basic should be clear.
</t>
<t tx="ekr.20130526065545.17427">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

(Possibly uninteresting ramblings)

I'm currently doing some stuff with Angular.js which is using Jasmine for
test cases by default.

Jasmine is using interesting "friendly" terminology for unit testing
concepts.

setup is "beforeEach", teardown is "afterEach".

Test cases and suites are declared with "describe", and "it"; have to say
it looks great in coffeescript:

http://coffeescriptcookbook.com/chapters/testing/testing_with_jasmine

describe 'Calculator', -&gt; it 'can add two positive numbers', -&gt; calculator
= new Calculator() result = calculator.add 2, 3 expect(result).toBe 5 it 'can
handle negative number addition', -&gt; calculator = new Calculator() result
calculator.add -10, 5 expect(result).toBe -5

</t>
<t tx="ekr.20130526065545.17428">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

As of rev 5650, Leo contains support for @testsetup nodes.  At present, I 
am pretty sure they work only when running unit tests locally.

In effect, @testsetup nodes provide common setup code for all following 
@test and @suite nodes.  Such common setup code is the real reason for 
having custom subclasses of unittest.TestCase.  This is a superb Leonine 
solution.  It is much than either

a) @testclass nodes (which I never use) or
b) "injecting" common test code using exec(g.findTestScript(c,'@common 
name-of-common-test-code'))

Leo's test-execution code prepends the body text of an @testsetup node to 
all following @test and @suite nodes.  Multiple @testsetup nodes may appear 
in an outline--the range of an @testsetup node extends over all following 
@test and @suite nodes until the next @testsetup node is seen (in outline 
order).  

This pattern is a direct result of the problems I have been having in the 
static type checking project.  The simplification of test code that has 
resulted is truly remarkable.  A single @testsetup node replaces &lt;&lt;setup&gt;&gt; 
sections that had to be present in every single test.  Hurray!

Edward

</t>
<t tx="ekr.20130526065545.17429">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 23 Apr 2013 05:08:47 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; Hi Terry,
&gt; 
&gt; I just enabled the plugin and tried 'screen-capture-now'. 
&gt; It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
&gt; png file written in the folder.
&gt; I may have missed something? :)

Thanks for the report, I just pushed the fix, you can't have ':' in a
Windows file name.

As for the feedback appearing in the log rather than the console, do
you have a console open?  It may depend on whether you start Leo
with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console
opens, and the filename appears there.

Cheers -Terry

&gt; Here is the log:
&gt; Leo Log Window
&gt; Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
&gt; Python 3.3.1, qt version 4.8.4
&gt; Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
&gt; C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png
&gt; 
&gt; At the leo blog http://leo-editor.github.io/screen_capture.html it says 
&gt; "The only feedback is in the console, as messages in the log would be 
&gt; distracting in the captured image."
&gt; All my feedback is in the log and none in the console.
&gt; 
&gt; Regards
&gt; Lewis
&gt; 

</t>
<t tx="ekr.20130526065545.17430">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Thanks it's working nicely :)
I use console (sourceforge.net/projects/console ) to open leo. I run 
launchleo.py from the leo directory so I'm not sure if python.exe or pythonw.exe are used.
</t>
<t tx="ekr.20130526065545.17431">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;

if you start Leo (or any .py file) by double-clicking on it it's likely
`pythonw.exe` is being used. You can find out for sure with `assoc` and
`ftype` from a command shell:

{{{
C:\\&gt;assoc .py
.py=Python.File

C:\\&gt;ftype Python.File
Python.File="E:\\Python27\\ArcGIS10.1\\pythonw.exe" "%1" %*

C:\\&gt;assoc .leo
.leo=LeoFile

C:\\&gt;ftype LeoFile
LeoFile=b:\\bin\\leo.bat "%1"
}}}

more info: http://ss64.com/nt/ftype.html

</t>
<t tx="ekr.20130526065545.17432">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 21 Apr 2013 08:59:51 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; hi, Terry,
&gt; 
&gt; It seems a great plugin! It is useful for people who write posts about leo.
&gt; 
&gt; 1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
&gt; be updated ;-)

Thanks - Matt has pointed that out too - hard part was searching
through three machines with two accounts on each to find where that
snapshot is actually generated :-)

&gt; 2. btw, can this plugin set a different path to save captured image?

I just pushed

Settings
--------

``@string screen-capture-save-path``
  Save screen shots here instead of ~/.leo/screen_captures
</t>
<t tx="ekr.20130526065545.17433">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

I just enabled the plugin and tried 'screen-capture-now'. 
It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
png file written in the folder.
I may have missed something? :)

Here is the log:
Leo Log Window
Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
Python 3.3.1, qt version 4.8.4
Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png

At the leo blog http://leo-editor.github.io/screen_capture.html it says 
"The only feedback is in the console, as messages in the log would be 
distracting in the captured image."
All my feedback is in the log and none in the console.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17434">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

It seems a great plugin! It is useful for people who write posts about leo.

1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
be updated ;-)
2. btw, can this plugin set a different path to save captured image?
</t>
<t tx="ekr.20130526065545.17435">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

See http://leo-editor.github.io/screen_capture.html

... "screen_capture_now captures an image immediately,
screen_capture_5sec waits five seconds, so you can position the
pointer, open menus etc. The only feedback is in the console, as
messages in the log would be distracting in the captured image."...
</t>
<t tx="ekr.20130526065545.17436">@nocolor

From: tfer &lt;tfetherston@aol.com&gt;

That's how I run Leo, (console is great for windows).  Unless you 
specifically call pythonw.exe it should use python.exe located through your 
"Path" system enbironment variable.  Here is what I use in the shell 
setting for a console "leo" tab:
    cmd.exe /k C:\\entPY27\\python.exe 
"C:\\VC\\Bzr\\leo-editor\\trunk\\launchLeo.py"
the cmd.exe /k portion creates a dos window that the rest of the command 
line is run in, (the dos window is hidden offscreen and console uses its 
magic to present it inside of its buffer.  This now serves as stdio, (and 
stderr) and catches messages written by leo.

Adjust your shell command to where python and leo lives on your machine, 
(found in Edit-&gt;Setting-&gt;Tabs).

Tom

On Wednesday, April 24, 2013 8:41:02 PM UTC-4, lewis wrote:
&gt;
&gt; Terry,
&gt;
&gt; Thanks it's working nicely :)
&gt; I use console (sourceforge.net/projects/console ) to open leo. I run 
&gt; launchleo.py from the leo directory so I'm not sure if  \\python.exe or 
&gt; \\pythonw.exe are used.
&gt;
&gt; Regards
&gt; Lewis
&gt;
&gt; On Tuesday, April 23, 2013 11:24:00 PM UTC+10, Terry wrote:
&gt;&gt;
&gt;&gt;
&gt;&gt; As for the feedback appearing in the log rather than the console, do 
&gt;&gt; you have a console open?  It may depend on whether you start Leo 
&gt;&gt; with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console 
&gt;&gt; opens, and the filename appears there. 
&gt;&gt;
&gt;&gt; Cheers -Terry 
&gt;&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17442">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 2. The same exec statement appears to allow the execution of arbitrary
&gt; Python code.  I'm not sure how comfortable I am with that.  Any
&gt; comments?

That's why enabling requires @bool scripting-at-script-nodes = True as
well as the abbreviation specific stuff.  The risk seems equivalent to
the scripting-at-script-nodes = True risk.

&gt; &gt; Here's a quick screencast of the template expansions:  
&gt; 
&gt; I loved this screencast.  Could you tell us the tool chain that you
&gt; used to produce it?

I used (gtk-)recordmydesktop.  I used the non-gui version,
recordmydesktop, with the window ID, after hitting some snag I can't
remember with the gui version, gtk-recordmydesktop.  But I couldn't
work out avconv parameters to convert the ogv format to something more
common, and although vimeo seemed to understand it well enough to
upload the video and present the first frame, it wasn't viewable
there.  recordmydesktop "just worked", which was nice.

I'll look at the Python 3 issues.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17443">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Wed, Aug 22, 2012 at 8:52 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; Abbreviations can, in the branch
&gt; http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test
&gt; include computed values and place holders which you can step through,
&gt; filling in a template.  Edward, these changes involve some core code,
&gt; although I think they're quite benign, but pls. see change notes at
&gt; the bottom of this email.

This is great work, Terry.  Many thanks for it.

Just installed the leo_test branch and have taken a careful look at
the log.  Here are my comments.

1. The exec statement in abbrevClass.finishCreate should be rewritten
for Python3.  Please make sure the code passes all unit tests when
unitTest.leo is run with Python3.

2. The same exec statement appears to allow the execution of arbitrary
Python code.  I'm not sure how comfortable I am with that.  Any
comments?

Aside from that, all looks well.  Feel free to merge with the trunk
after ensuring that the code works with Python 3.

&gt; Here's a quick screencast of the template expansions:

I loved this screencast.  Could you tell us the tool chain that you
used to produce it?

&gt; Here are the draft docs. for abbreviations:

Good work.  I see that you merged them into LeoDocs.leo, which I like.

Edward
"</t>
<t tx="ekr.20130526065545.17444">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wed, Aug 29, 2012 at 2:33 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; On Tue, 28 Aug 2012 08:48:54 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt;&gt; 1. The exec statement in abbrevClass.finishCreate should be rewritten
&gt;&gt; for Python3.  Please make sure the code passes all unit tests when
&gt;&gt; unitTest.leo is run with Python3.
&gt;
&gt; Done, added g.do_exec for this.

Thanks Terry.  Looks good.

Edward
</t>
<t tx="ekr.20130526065545.17445">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Abbreviations can, in the branch
http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test
include computed values and place holders which you can step through,
filling in a template.  Edward, these changes involve some core code,
although I think they're quite benign, but pls. see change notes at
the bottom of this email.

Here's a quick screencast of the template expansions:
http://www.greygreen.org/tmp/leoabbrev.ogv
I tried uploading it to Vimeo, but that seems to have failed
(http://www.vimeo.com/48019375)

Here are the draft docs. for abbreviations:

Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand your input
(just ``"some_function"`` and ``"one, two, three=4"`` to something
like:: 
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;

        Created: Wed Aug 22 10:32:54 CDT 2012
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

They can also close XML tags, enter balanced indented markup for
various languages, etc.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in
individual .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in
@data # global-abbreviation nodes. Typically you would define @data
abbreviation nodes # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \\:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \\|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.


Edward - to look at the changes in theory you could go to

http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test/revision/5430?compare_revid=5424

but in practice I think the lack of context there makes that useless,
an you might want to just pull
http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test and look at
it with `bzr qlog`.

Some of the code is in masterCommand, which is why I wanted you to look
at it, but it's guarded by if c.abbrev_subst_start:, so it won't do
anything unless enabled.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17446">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 1. The exec statement in abbrevClass.finishCreate should be rewritten
&gt; for Python3.  Please make sure the code passes all unit tests when
&gt; unitTest.leo is run with Python3.

Done, added g.do_exec for this.

So the new abbreviations with template expansion and evaluated
expressions are on the trunk, view the screencast
http://www.greygreen.org/tmp/leoabbrev.ogv
with `vlc` or some such to see them in action.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17451">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:06 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed the solarized dark theme to trunk.


Spectacular.  It looks like you've completed the coding part of the
sprint.  Well done!

Edward
</t>
<t tx="ekr.20130526065545.17452">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, I'm slightly bothered by the fact that color variable names have
"solarized" in them. You are supposed to create new themes by changing
their values in the "config" node, after which the theme is not "solarized"
any more.

how about "@leotheme-c-0" (for color 0) etc.
</t>
<t tx="ekr.20130526065545.17453">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Thanks! Leo feels like a new program now :).
</t>
<t tx="ekr.20130526065545.17454">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Re: "toggle between the custom and default leosettings"

This only occurs when the leo session in which I edited the
myLeoSettings file remains in session - I can then cause the toggle to
occur. Once you leave the the leo session, it always loads 
myLeoSettings.leo as expected. 

It took me quite some time to reproduce; when I finally realised how I 
managed to toggle themes
in leo I thought it would be a nice feature to have :)

Regards
Lewis


On Sunday, April 14, 2013 6:35:31 PM UTC+10, lewis wrote:
&gt;
&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
&gt; custom and default leosettings.
&gt; Is that toggle intended? I would have expected that leo should behave 
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;
&gt; Regards
&gt; Lewis
&gt;

</t>
<t tx="ekr.20130526065545.17455">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Sun, Apr 14, 2013 at 3:35 AM, lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the
&gt; custom and default leosettings.
&gt;


&gt; Is that toggle intended? I would have expected that leo should behave
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;

Thanks for asking a question, rather than immediately filing a bug report
:-)

The general idea is that opening either of the two settings files must be
handled as something of a special case.  Furthermore, certain settings
(like enabled plugins) are inherently "cumulative": the add to what is
already in effect, rather than override what is in effect.

Settings probably work as one would naively expect when you open a clean
copy of Leo, but there may be some glitches when you open additional
files.  If there is specific behavior that you find dubious, please
describe exactly what it is.  We can discuss it, and you can then file a
bug report if you like.

Edward

</t>
<t tx="ekr.20130526065545.17456">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 22:08:19 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; BTW, I'm slightly bothered by the fact that color variable names have
&gt; "solarized" in them. You are supposed to create new themes by changing
&gt; their values in the "config" node, after which the theme is not "solarized"
&gt; any more.
&gt; 
&gt; how about "@leotheme-c-0" (for color 0) etc.

The variable replacement runs up to ten levels deep, after which it
bails assuming you've created a loop :-)

So there's nothing wrong with 

  @solarized-yellow = #abcdef

the issue is that `@solarized-yellow` is used in the guts of the
stylesheet definition.  Instead, ideally, but I didn't get to it, in
the config node you'd have

  @solarized-yellow = #abcdef
  ...
  @highlight-hot = @solarized-yellow

and then use `@highlight-hot` in the guts of the
stylesheet definition.

Note - you can't create new themes simply by editing the config
node, it's not possible to create enough constants for every style
element that can be addressed by a stylesheet.

But it would be nice to move all the color and numeric constants out of
the stylesheet and into the config node as I've described above, just a
find and replace operation.

</t>
<t tx="ekr.20130526065545.17457">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Mar 28, 2013 at 7:51 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:


&gt; Maybe the theme shouldn't be called 'solarized', although the color
&gt; definitions in the config node may as well retain their names.


I agree.  Otoh, I am willing to look into creating a true solarized
configuration.  It should look great, and it would allow Leo to appear on
the solarized web page.
</t>
<t tx="ekr.20130526065545.17458">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 27 Mar 2013 20:06:57 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt;  - see the README - if you're already running a dark theme there's a
&gt;    `base` node which can be switched to `@ignore base` to take more
&gt;    advantage of your desktop theme.

p.s. along these lines someone wanted a dark body only, you can get
that by just adding @ignore to all the color related nodes other than
body, or moving all of them under an @ignore node.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17459">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed the solarized dark theme to trunk.  There were some
changes to core code, but nothing too major, and I've been using it for
some time.

In leoSettings.leo there's a new top-level node called 'Themes', which
contains a single theme node at the moment, you can copy that to you
myLeoSettings.leo file under @settings.  Read the README node of the
theme node for more instructions.

The theme is far from perfect - it's relatively easy to get it looking
ok if you're already running a dark desktop theme, which is what I'm
doing, but much harder if you want Leo dark in a light desktop theme,
as you need to theme everything.

 - see the README - if you're already running a dark theme there's a
   `base` node which can be switched to `@ignore base` to take more
   advantage of your desktop theme.

 - note that the new theme system includes a stylesheet authoring 
   tool with macro substitutions :-) you no longer edit
   @data qt-gui-plugin-style-sheet directly but edit a more comfortable
   Leo tree version and then run-script on the appropriate node to
   "compile" to @data qt-gui-plugin-style-sheet

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17460">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;


Hi Terry,

Many thanks for your work on the dark theme.
I noticed that the behaviour of the theme is affected by it's up/down 
position in the @settings tree:
If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
dark all over as intended.
It may be helpful to document the behaviour.

A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
custom and default leosettings.
Is that toggle intended? I would have expected that leo should behave 
according to the users preferred settings in their myLeoSettings.leo file.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17461">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, if you prefer the bigger contrast that e.g. Sublime Text 2 has, try
this "config":

https://gist.github.com/vivainio/5261207
</t>
<t tx="ekr.20130526065545.17462">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 14 Apr 2013 01:35:31 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; I noticed that the behaviour of the theme is affected by it's up/down 
&gt; position in the @settings tree:
&gt; If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
&gt; dark all over as intended.

Thanks - the docs. in the theme node do mention moving other @data
qt-gui-plugin-style-sheet and @color nodes out of the way, but I've
added a couple of notes about putting it at the bottom of the @setting
list to ensure it overrides other settings.  The problem is when the 
default theme's @data qt-gui-plugin-style-sheet node comes after
the dark theme's.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17463">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 05:33:45 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; 
&gt; &gt; It appears that the border around the body pane has disappeared.
&gt; 
&gt; Haha.  There is an interesting tie-in here.
&gt; 
&gt; At present, highlighted text doesn't have the correct colors.  To truly be
&gt; called a solarized scheme, the foreground color of all text must *not*
&gt; change when text is highlighted.  This is the insight and unifying

Maybe the theme shouldn't be called 'solarized', although the color
definitions in the config node may as well retain their names.  I
wasn't really paying attention to the rules for the solarized system,
just using it's palette.  It could be renamed 'leo_dark_zero' or
something.

It did also reveal a code execution pathway anomaly.  When headline
editing is initiated by keyboard (Insert, Ctrl-H) the font-styling on
the edit widget is different than when it's initiated by double
clicking.

Cheers -Terry

&gt; principle of the solarized scheme.  Presumably, this is possible with
&gt; Terry's code.
&gt; 
&gt; The tie in is this:  the border colors *should* also be two of the
&gt; solarized foreground colors: this would make them maximally contrasting
&gt; with either the usual dark background or the light background used when
&gt; text is selected.
&gt; 
&gt; Using a true solarized scheme means:
&gt; 
&gt; a) using the designated solarized background colors: dark by default and
&gt; light for selected text and
&gt; 
&gt; b) using the designated foreground colors for syntax-colored text.
&gt; 
&gt; Imo, this would significantly improve the appearance, and it would honor
&gt; Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
&gt; screen shot of Leo's main window on his web site.
&gt; 
&gt; I won't be able to get around to this today, but I'd like to do it asap.
&gt; Feel free to beat me to the punch ;-)
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130526065545.17464">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; It appears that the border around the body pane has disappeared.

Haha.  There is an interesting tie-in here.

At present, highlighted text doesn't have the correct colors.  To truly be
called a solarized scheme, the foreground color of all text must *not*
change when text is highlighted.  This is the insight and unifying
principle of the solarized scheme.  Presumably, this is possible with
Terry's code.

The tie in is this:  the border colors *should* also be two of the
solarized foreground colors: this would make them maximally contrasting
with either the usual dark background or the light background used when
text is selected.

Using a true solarized scheme means:

a) using the designated solarized background colors: dark by default and
light for selected text and

b) using the designated foreground colors for syntax-colored text.

Imo, this would significantly improve the appearance, and it would honor
Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
screen shot of Leo's main window on his web site.

I won't be able to get around to this today, but I'd like to do it asap.
Feel free to beat me to the punch ;-)
</t>
<t tx="ekr.20130526065545.17465">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;




On Wednesday, March 27, 2013 8:06:57 PM UTC-5, Terry wrote:
&gt;
&gt;
&gt; The theme is far from perfect - it's relatively easy to get it looking 
&gt; ok if you're already running a dark desktop theme, which is what I'm 
&gt; doing, but much harder if you want Leo dark in a light desktop theme, 
&gt; as you need to theme everything. 
&gt;

There is one glitch that I see.  It appears that the border around the body 
pane has disappeared.  I think the border is always important, and the 
proper border color will likely change in the solarized version.  But 
perhaps this is an artifact of my settings--I really haven't investigated 
properly yet. 

&gt;
&gt;  - note that the new theme system includes a stylesheet authoring 
&gt;    tool with macro substitutions :-) you no longer edit 
&gt;    @data qt-gui-plugin-style-sheet directly but edit a more comfortable 
&gt;    Leo tree version and then run-script on the appropriate node to 
&gt;    "compile" to @data qt-gui-plugin-style-sheet 
&gt;

Very cool.  Many thanks for all this work.

Edward

</t>
<t tx="ekr.20130526065545.17487">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Just pushed leo/external/leoftsindex.py:

Stand alone GUI free index builder for Leo's full text search system::

  python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...

If &lt;file&gt; does not contain '#' it's assumed to be a .leo file
to index, and is indexed.

If &lt;file&gt; does contain '#' it's assumed to be a .leo file
containing a list of .leo files to index, with the list in
the node indicated by the UNL after the #, e.g.::

   path/to/myfile.leo#Lists--&gt;List of outlines

In the latter case, if the node identified by the UNL has children,
the list of files to scan is built from the first line of the body
of each child node of the identified node (works well with bookmarks.py).
If the node identified by the UNL does not have children, the
node's body is assumed to be a simple text listing of paths to .leo files).

.. note::
    
    It may be necessary to quote the "file" on the command line,
    as the '#' may be interpreted as a comment delimiter::
        
        python leoftsindex.py "workbook.leo#Links"

</t>
<t tx="ekr.20130526065545.17488">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Mon, Apr 16, 2012 at 5:13 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; Just pushed leo/external/leoftsindex.py:
&gt;
&gt; Stand alone GUI free index builder for Leo's full text search system::
&gt;
&gt;   python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...
&gt;

Should this be in the blog?  I've filed this under Leo/To Document.

Edward
</t>
<t tx="ekr.20130526065545.17489">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Now I have basic functionality pushed to trunk.

If you want to "spawn" (posibbly several) system commands to background,
use g.procs.add(), like this ctrl+b script:

def L(*args):
    g.es("callback", args)

g.procs.add(['sleep', '4'], "que1")
g.procs.add(['sleep', '3'], "que1", L)
g.procs.add(['sleep', '2'], "que1")
g.procs.add(['sleep', '2'], "que2")

Note how que2 completes first. Idea is that commands in same queue depend
on each other, and thus need to run in sequential order.

This should make waiting for long lasting operations easier as the whole
Leo won't freeze until they are over (but you can still use the stdout /
stderr output from these calls, thanks to the optional callback)

API may change once I start using it (soon).



On Wed, Apr 17, 2013 at 2:48 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt;
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.
&gt;
&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt;

</t>
<t tx="ekr.20130526065545.17490">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 14:48:59 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt; 
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.

There's the leoscreen stuff for integration with the GNU `screen`
terminal switcher / manager.  Push lines from the body to the terminal,
pull lines back the other way.  But more for interactive interaction
with terminal programs than batch oriented work.  Leo doesn't block.

Cheers -Terry

&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt; 

</t>
<t tx="ekr.20130526065545.17494">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:


&gt; Is anyone depending on
&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;

Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

Edward

</t>
<t tx="ekr.20130526065545.17495">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed two new commands, zoom-in and zoom-out, which increase
or decrease the body text font size by one point size.  They probably
deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'

They leverage the new theme "engine" by manipulating a constant
"@font-size-body".  I've set it up in the default theme, anyone using
the new dark theme will need to add

   @font-size-body = 18px

in the config node for that theme, 

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config

and replace the literal "18px" with "@font-size-body" in the node

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17496">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
web browsers?  Unless those already have default keybindings that I'm 
unaware of.

Also, does this work with the default theme?

--&gt;Jake

On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;     @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17497">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

+1. We should do a massive cleanup of keybindings to free up binding space.

On Fri, Apr 12, 2013 at 12:52 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:

&gt; Would you consider moving some bindings from config/leoSettings.leo to
&gt; your myLeoSettings.leo?
&gt;
&gt; It would free up some bindings for folks, and it's one way to survey how
&gt; many others are using them :-]
</t>
<t tx="ekr.20130526065545.17498">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

Would you consider moving some bindings from config/leoSettings.leo to
your myLeoSettings.leo?

It would free up some bindings for folks, and it's one way to survey how many
others are using them :-]

On Thu, Apr 11, 2013 at 1:14 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:
&gt;
&gt;&gt;
&gt;&gt; Is anyone depending on
&gt;&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;
&gt;
&gt; Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
&gt; don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

</t>
<t tx="ekr.20130526065545.17499">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



My vote is for Ctrl-plus/minus, and to Ctrl-scroll-wheel, because these are
consistent across a great many other programs.

It's unfortunate Ctrl-- is already used for for "replace and continue
search", but like others I didn't know about it so haven't become
habituated to it. Who experience pain if this was changed?

-matt

</t>
<t tx="ekr.20130526065545.17500">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

On Thu, Apr 11, 2013 at 7:28 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:
&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and web
&gt; browsers?  Unless those already have default keybindings

I can't find the thread, but I thought we once discussed reducing the number
of bindings defined by default.

running &lt;alt-x&gt; print-bindings makes it clear why it's a challenge to identify
unused bindings.

Maybe each binding has users, but I would expect that most don't.

Is anyone depending on
alt-ctrl-a = toggle-find-wrap-around-option ?

The fewer bindings out of the box, the easier it is for folks extending Leo.

I think a painless way to simplify Leo would be to have a more concise
set of default bindings.

Thanks,
Kent

</t>
<t tx="ekr.20130526065545.17501">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Can we bind them to ctrl+scroll wheel?


On Thu, Apr 11, 2013 at 7:46 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;    @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp;
&gt; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

</t>
<t tx="ekr.20130526065545.17502">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 4/11/2013 8:33 AM, Terry Brown wrote:
&gt; Ctrl-- is replace...
Well then.  Shows how much I use that feature... :p
&gt; Yes, out of the box only with the default theme, you need to make the
&gt; minor edits I described below to get it working in the dark theme.
&gt;
&gt; Cheers -Terry
&gt;
Good to know.  I've been looking for a feature like this for a while.  
Thanks!
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17503">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 08:28:59 -0400
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
&gt; web browsers?  Unless those already have default keybindings that I'm 
&gt; unaware of.

Ctrl-- is replace...

&gt; Also, does this work with the default theme?

Yes, out of the box only with the default theme, you need to make the
minor edits I described below to get it working in the dark theme.

Cheers -Terry

&gt; --&gt;Jake
&gt; 
&gt; On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; &gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; &gt; or decrease the body text font size by one point size.  They probably
&gt; &gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt; &gt;
&gt; &gt; They leverage the new theme "engine" by manipulating a constant
&gt; &gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; &gt; the new dark theme will need to add
&gt; &gt;
&gt; &gt;     @font-size-body = 18px
&gt; &gt;
&gt; &gt; in the config node for that theme,
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt; &gt;
&gt; &gt; and replace the literal "18px" with "@font-size-body" in the node
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt; &gt;
&gt; &gt; Cheers -Terry
&gt; &gt;
&gt; 

</t>
<t tx="ekr.20130526065545.17504">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, Apr 12, 2013 at 1:47 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; +1. We should do a massive cleanup of keybindings to free up binding space.
&gt;

This can always be done in myLeoSettings.leo, but I share your concern.

I have the lurking feeling that it would be possible to do some lightweight
modes that define temporary bindings.  This is theoretically possible now
with @mode, but I doubt anyone uses it.  I sure don't.

This could be an important addition to Leo, but for now I've filed it under
Leo/Later :-)

Edward
</t>
<t tx="ekr.20130526065545.17505">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

really, this time.

commit log:

  zoom-in / zoom-out commands
  
  ctrl-mouse wheel scrolling for same
  
  replace old focused pane border highlight with pure stylesheet
  version
  
  rename solarized_dark theme leo_dark_0

Edward, and anyone else using

  @bool use_focus_border = True

this no longer does anything...

now you need to edit

  @data qt-gui-plugin-style-sheet

and change

  @focused-border-style = none

to

  @focused-border-style = solid

for the default theme, if you're using the dark theme, now known as
leo_dark_0, same deal but after editing as above remember to select
and run the 'stylesheet &amp; source' node of that theme.

Cheers -Terry

  

</t>
<t tx="ekr.20130526065545.17506">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;

Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2F103097156557482112329%2Fposts%2F1GjKYTUSTMA&amp;dt=1366183753416&amp;ub=63

You're receiving this email because you are subscribed to Leo Editor on  
Google+.

Leo Editor
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2Fcommunities%2F104562683923003520885&amp;dt=1366183753416&amp;ub=63
</t>
<t tx="ekr.20130526065545.17514">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;



Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CNiN2Nzuz7YCFWR8TAodWDAAAA&amp;path=%2F103097156557482112329%2Fposts%2F6D9GPRCdXVh&amp;dt=1366138560104&amp;ub=63
</t>
<t tx="ekr.20130526065545.17515">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Link to G+: https://plus.google.com/103097156557482112329/posts/6D9GPRCdXVh

</t>
<t tx="ekr.20130526065545.17545">@nocolor

From: resi147 &lt;scalet@yebu.de&gt;

I tried this one and it seems to be very useful. What I would also like to 
have is a similar (or the same) script,
that does the same on two different nodes of a leo file. I admit, the 
changes should be minimal to be done by
myself, but as I'm not familiar with the internal leo api, I wanted to ask 
for how to best do this changes.

Probably somewhere here
"""
...
vf = from_c.hiddenRootNode 
vt = to_c.hiddenRootNode
...
"""
just to feed in the 2 nodes, Any quick idea how this can be done the best 
way?

Cheers,
Karl.

</t>
<t tx="ekr.20130526065545.17546">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

The script below is a tool for diffing two Leo files. The attached
screenshot illustrates the output for two different revisions of
LeoPyRef.leo.

``- nodename``
    indicates a node which disappeared
``+ nodename``
    a node which is new,
``!v nodename`` followed by ``!^ nodename``
    a node with an unchanged heading but changed content, the first
    linking to the old version, the second linking to the new version

If you have the bookmarks.py plugin active, you can double click nodes
to jump to the original(s).



from leo.core.leoNodes import vnode
if not hasattr(vnode, 'insertAsLastChild'):
    # add insertAsLastChild method to vnodes
    def ialc(self):
        vnode(self.context)._linkAsNthChild(self, len(self.children))
        return self.children[-1]
    vnode.insertAsLastChild = ialc

from_filename = g.app.gui.runOpenFileDialog('From (old) file', [('Leo', '*.leo')])
to_filename = g.app.gui.runOpenFileDialog('To (new) file', [('Leo', '*.leo')])

# from_filename = "/mnt/shuttle/bkup/usr1/2012-07-13/home/tbrown/.leo/.todo.leo"
# to_filename = "/mnt/shuttle/bkup/usr1/2012-07-15/home/tbrown/.leo/.todo.leo"

from_c = g.openWithFileName(from_filename, c)
to_c = g.openWithFileName(to_filename, c)

vf = from_c.hiddenRootNode
vt = to_c.hiddenRootNode

assert from_c != c
assert to_c != c
assert from_c != to_c

nd = c.rootPosition().insertAfter()
nd.copy().back().moveAfter(nd)
nd.h = 'diff @bookmarks'

def text_match(a, b):
    return (a.h == b.h, 
            a.h == b.h and a.b == b.b)
def gnx_match(a, b):
    return (a.h == b.h and a.gnx == b.gnx, 
            a.h == b.h and a.b == b.b and a.gnx == b.gnx)

def diff_trees(vf, vt, path):

    fonly = []  # nodes only in from tree
    tonly = []  # nodes only in to tree
    diffs = []  # nodes which occur in both but have different descendants

    # count number of times each headline occurs as a child of
    # each node being compared
    count_f = {}
    for cf in vf.children:
        count_f[cf.h] = count_f.get(cf.h, 0) + 1
    count_t = {}
    for ct in vt.children:
        count_t[ct.h] = count_t.get(ct.h, 0) + 1

    for cf in vf.children:
        
        for ct in vt.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            
            if body_eq:
                diffs.append(diff_trees(cf, ct, path+[vf.h]))
                
                break
            elif head_eq:
                d = diff_trees(cf, ct, path+[vf.h])
                if d:
                    d.h = '!v '+d.h
                else:
                    d = vnode(nd.v.context)
                    d.h = '!v '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    from_filename, 
                    '--&gt;'.join((path+[vf.h]+[cf.h])[1:]),
                    cf.b
                )
                diffs.append(d)
                d = vnode(nd.v.context)
                d.h = '!^ '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    to_filename, 
                    '--&gt;'.join((path+[vt.h]+[ct.h])[1:]),
                    ct.b
                )
                diffs.append(d)
                break
        else:
            fonly.append(cf)
            
    for ct in vt.children:
        
        for cf in vf.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            if head_eq or body_eq:
                # no need to recurse matches again
                break

        else:
            tonly.append(ct)

    if not any(diffs) and not fonly and not tonly:
        return None
        
    vd = vnode(nd.v.context)
    vd.h = vf.h
    for d in diffs:
        if d:
            vd.children.append(d)
    for f in fonly:
        n = vd.insertAsLastChild()
        n.h = '- '+f.h
        n.b = "file://%s/#%s" % (from_filename, '--&gt;'.join((path+[vf.h]+[f.h])[1:]))
    for t in tonly:
        n = vd.insertAsLastChild()
        n.h = '+ '+t.h
        n.b = "file://%s/#%s" % (to_filename, '--&gt;'.join((path+[vf.h]+[t.h])[1:]))
        
    return vd

v = diff_trees(vf, vt, [])
if v:
    nd.v.children.extend(v.children)  # snip off &lt;hidden root node&gt;

c.bringToFront()
c.redraw()

</t>
<t tx="ekr.20130526065545.17575">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 1, 2013 at 12:20 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

Haven't looked at it hard enough to evaluate code, but it doesn't seem
&gt; too excessive for what it does.


I agree. Code can usually be improved.  Your interesting ideas are what are
important.

Once again, we have a problem: how to make this code available to those who
might benefit from it?  More importantly, how to tell others about the work
you have done when we have all forgotten the details of this conversation.
My interim solution is to file this under Leo/To Document, but that is
something of a delaying tactic.

Edward

</t>
<t tx="ekr.20130526065545.17576">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I implemented something in a Leo outline yesterday, but I feel my code 
is absolutely atrocious.

One of the ways I use Leo is as an information management/database for 
when I'm running tabletop RPGs.  Such games involve a fair amount of 
similarly structure data.  I set out to make a way of defining a 
template, and providing macro expansions within the template, so that 
the user could click a script button, be prompted for data, and be 
rewarded with a fully-populated copy of the template.  I've managed to 
accomplish this with the code below:

https://gist.github.com/gatesphere/2be5030506a364ee6ec1

Now, that seems like an atrocious amount of code, and a lot of it feels 
like too much work... but it was a hack, and it works.

How it works is like this:

- Create a `@template` node.  This is the parent node for your template.

- Create a `@destination` node as a child of the @template node. This 
node's headline is the name of a top level node where your completed 
template will be placed.  `@destination Sessions` will place the 
finished product under the top-level "Sessions" node.

- Populate the @template node with various `@item` nodes - these keep 
their structure in the filled template.  Anything that needs to be a 
part of the final product has to be an @item node.

All of that is fine and dandy if you just want to copy and paste... but 
that's already baked into Leo.  So I added macro expansion.  The script 
gathers up all instances of anything that fits the regex "&lt;\\$\\w+&gt;" is a 
macro variable name.  Something like `&lt;$name&gt;` or `&lt;$date&gt;`.  The script 
gathers up all of these variable names, and prompts the user (ala 
todo.py's "Redistribute Priorities" function) for values for each of 
them. They are global with respect to the template, so using the same 
macro variable in multiple places in the same template will result in 
all of them being filled in with the same value.

In addition, there is one more type of node that can go under @template 
nodes - @default.  @default nodes provide a default value for a macro 
variable.  The node with a headline of `@default &lt;$name&gt;` and a body of 
"This is my body" gives the `&lt;$name&gt;` macro a value of "This is my body" 
everywhere within the template, and that macro will not be prompted for 
a value.  This is handy if you're copying templates between Leo 
worksheets, and want them flexible, but don't want them to fill in the 
same value for every single invocation of copy-template.

Here's an example template:

@template &lt;$campaign&gt; Session #&lt;$num&gt; ($date)
       @destination Sessions
       @default &lt;$campaign&gt;
       @item Who's Coming?
       @item In-World Start Date
       @item Log
       @item Threads
             @item High Priority
             @item Low Priority
       @item News
             @item Out of Character
             @item In Character

The body of `@default &lt;$campaign&gt;` is "World of Ka'rim".  The body of 
`@item Who's Coming?` is "John, Jane, Jack, Jenny, Jeremy".

Running copy-template on this template, and filling the values prompted 
for (&lt;$num&gt; and &lt;$date&gt;) gives the following under the top-level node 
Sessions:

World of Ka'rim Session #1 (01 May 2013)
       Who's Coming?
       In-World Start Date
       Log
       Threads
             High Priority
             Low Priority
       News
             Out of Character
             In Character

The headlines bodies are correctly filled in with macro expansions, and 
other text is verbatim copied from the respective headlines and bodies.

So... two questions:

1.) Did I re-implement something Leo already does?
2.) Anyone have any suggestions on reducing the amount of code/any fixes?

Also, hope someone else finds this useful.  Once it's cleaned up, I 
might do a leo-editor blog post about it.

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17577">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 01 May 2013 13:07:26 -0400
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; similarly structure data.  I set out to make a way of defining a 
&gt; template, and providing macro expansions within the template, so that 
&gt; the user could click a script button, be prompted for data, and be 
&gt; rewarded with a fully-populated copy of the template.  I've managed to 
&gt; accomplish this with the code below:
[snip[
&gt; 1.) Did I re-implement something Leo already does?
&gt; 2.) Anyone have any suggestions on reducing the amount of code/any fixes?

Haven't looked at it hard enough to evaluate code, but it doesn't seem
too excessive for what it does.  I've just been fiddling with the
abbreviations code which does template expansion, but it's aimed at
being more interactive, not having the content stored in the outline,
which makes more sense for you seeing you want to be able to re-run the
template fill-in easily if you make a mistake, without entering
everything again.

I'm not sure how much of this you could achieve with the value-space
plugin, can't remember if that uses Jinja templates for something or
not.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17589">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Trunk now has alt-x go-anywhere command handy

It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
does live search on headline (you have to press enter to force search of
bodies as well)

Once the hits are shows, you can navigate them by pressing up/down while
focus is still in line editor &amp; you can keep on typing (sort of like
sublime text)

Screenshot is attached, yes, positioning etc still looks like crap :)

</t>
<t tx="ekr.20130526065545.17590">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



BTW, this has a very clever hack (even if I say so myself) - spaces in
search string are replaced with * wild card.

So if you search for, say "file txt", it will search for "file*txt",
matching e.g. @file readme.txt


On Tue, Nov 20, 2012 at 11:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; Trunk now has alt-x go-anywhere command handy
&gt;
&gt; It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
&gt; does live search on headline (you have to press enter to force search of
&gt; bodies as well)
&gt;
&gt; Once the hits are shows, you can navigate them by pressing up/down while
&gt; focus is still in line editor &amp; you can keep on typing (sort of like
&gt; sublime text)
&gt;
&gt; Screenshot is attached, yes, positioning etc still looks like crap :)
&gt;

</t>
<t tx="ekr.20130526065545.17592">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Nov 20, 2012 at 3:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Trunk now has alt-x go-anywhere command handy


Ah.  This answers the question I just asked.  I'll put this on the list of
things to document.

Edward

</t>
<t tx="ekr.20130526065545.17593">@nocolor

From: redla &lt;radim.halir@gmail.com&gt;


On Wednesday, December 5, 2012 4:46:34 PM UTC+1, Edward K. Ream wrote:
&gt;
&gt; The title pretty much says it all.  This is a significant improvement, and 
&gt; makes Leo suitable for authoring text.  It should have been done ages ago. 
&gt; Please let me know immediately if this new behavior causes problems for you.
&gt;
 
There is one problem which is (IMHO) caused by this change: I have @wrap 
active and see my "plain" text wrapped properly. But if there is any "long 
enough" URL on the page (i.e. longer than the screen width), this is not 
wrapped (as there is no space in the string) nor I can see the end of it 
(as there is no horizontal scrollbar either) ;-(

</t>
<t tx="ekr.20130526065545.17594">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


The title pretty much says it all.  This is a significant improvement, and 
makes Leo suitable for authoring text.  It should have been done ages ago. 
Please let me know immediately if this new behavior causes problems for you.

There is one glitch.  If you add @wrap, the directive won't be in effect 
until you leave the node and revisit it.

Edward

</t>
<t tx="ekr.20130526065545.17595">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The following is a first draft of a unit-testing tutorial.  It will form 
the basis of a new help-for-unit-testing command, and may also become the 
introduction to Leo unit-testing chapter.

All comments are welcome.  Please let me know if anything is unclear.

-----

Leo makes it easy to create and run unit tests from individual outline 
nodes or trees.

A node whose headline starts with @tests defines a unit test.

The body text of the @test node contains a **self-contained** unit test.

For example, this creates a complete unit test::

    @test fails  (headline)
    assert False (body text)

To run this test, select the @test node and do:
&lt;alt-x&gt;run-selected-unit-tests-locally.
Leo will create and run the unit test automatically.

To see all of Leo's unit testing commands, do:
&lt;alt-x&gt;run&lt;tab&gt;

Leo pre-defines 'c', 'g' and 'p' in unit tests just as in scripts.

For more details about unit testing, see: 
http://leoeditor.com/unitTesting.html

**Notes for Leo developers**

leo/test/unitTest.leo contains all of Leo's own unit tests.

Running all tests is not necessary.  Just select::

    Active Unit Tests

and then do Alt-4 (run-selected-unit-tests-locally).

**Note**: Some tests will likely fail on machines other than EKR's.
You only need to be concerned about unit tests that start failing after you 
make your changes.

</t>
<t tx="ekr.20130526065545.17620">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've added a new plugin to Leo, that adds printing support when using 
the Qt GUI.  Available from rev 5779.

Here's the docscring:

'''Supports printing from the Qt GUI.

Jacob M. Peck, 2013

Commands
=======
This plugin supports the following twelve commands:

print-selected-node
-------------------

Opens up the print dialog to print the selected headline and node.

print-preview-selected-node
---------------------------

Opens up the print preview dialog to preview the selected headline
and node.

print-selected-node-body
------------------------

Opens up the print dialog to print the selected node body.

print-preview-selected-node-body
--------------------------------

Opens up the print preview dialog to preview the selected node body.

print-expanded-node
-------------------

Opens up the print dialog to print the expanded contents of the
selected node, with top-level headline.

print-preview-expanded-node
---------------------------

Opens up the print preview dialog to preview the expanded contents
of theselected node, with top-level headline.

print-expanded-node-body
------------------------

Opens up the print dialog to print the expanded node body.

print-preview-expanded-node-body
--------------------------------

Opens up the print preview dialog to preview the expanded node
body.

print-marked-nodes
------------------

Opens up the print dialog to print all marked nodes in the current
outline, with headlines.

print-preview-marked-nodes
--------------------------

Opens up the print preview dialog to preview all marked nodes in \\
the current outline, with headlines.

print-marked-node-bodies
------------------------

Opens up the print dialog to print the bodies of all marked nodes
in the current outline.

print-preview-marked-node-bodies
--------------------------------

Opens up the print preview dialog to preview the bodies of all
marked nodes in the current outline.

Settings
=======
- ``@string printing-font-family = DejaVu Sans Mono``
   The font family for printing.  A monospaced font is recommended.

- ``@string printing-font-size = 12``
   The font size for printing bodies, in px.  Due to limitations
   of PyQt, the size of headlines cannot be changed.
'''

To use it, be sure to add `printing.py` to your @enabled-plugins.

Future work may have more printing modes available, and I intend on 
doing a blog post on the leoblog about creating custom printing modes in 
scripts.

This addresses bug 1132804: 
https://bugs.launchpad.net/leo-editor/+bug/1132804

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17621">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 5/15/2013 9:04 AM, Kent Tenney wrote:
&gt; It just works! Nice.
&gt; Being able to preview is great, less paper wasted.
&gt;
&gt; I rely entirely on command completion as a memory aid, too
&gt; bad the info listing commands also start with 'print'. I would
&gt; think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
&gt; situation now we have print.
&gt;
&gt; Too late?
&gt;
I agree completely w/r/t 'list-&lt;attribute&gt;', but it most likely is too 
late.  Those are probably in use by some script somewhere.  :(

Thanks for the comments, though!  To be fair, this whole thing was crazy 
simple to throw together - Qt does *all* the heavy lifting. Just throw 
together an HTML string, wrap it in a QTextDocument, and call print_, 
and Bob's your uncle.  I can see why Leo uses PyQt now... it's awesome.
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17622">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;


Thank you for this plugin, very useful!

On Wednesday, May 15, 2013 2:41:19 PM UTC+2, Jacob Peck wrote:
&gt;
&gt; Hello all, 
&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using 
&gt; the Qt GUI.  Available from rev 5779. 
&gt;
&gt; Here's the docscring: 
&gt;
&gt; '''Supports printing from the Qt GUI. 
&gt;
&gt; Jacob M. Peck, 2013 
&gt;
&gt; Commands 
&gt; ======== 
&gt;
&gt; This plugin supports the following twelve commands: 
&gt;
&gt; print-selected-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the selected headline and node. 
&gt;
&gt; print-preview-selected-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected headline 
&gt; and node. 
&gt;
&gt; print-selected-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the selected node body. 
&gt;
&gt; print-preview-selected-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected node body. 
&gt;
&gt; print-expanded-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the expanded contents of the 
&gt; selected node, with top-level headline. 
&gt;
&gt; print-preview-expanded-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded contents 
&gt; of theselected node, with top-level headline. 
&gt;
&gt; print-expanded-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the expanded node body. 
&gt;
&gt; print-preview-expanded-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded node 
&gt; body. 
&gt;
&gt; print-marked-nodes 
&gt; ------------------ 
&gt;
&gt; Opens up the print dialog to print all marked nodes in the current 
&gt; outline, with headlines. 
&gt;
&gt; print-preview-marked-nodes 
&gt; -------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview all marked nodes in \\ 
&gt; the current outline, with headlines. 
&gt;
&gt; print-marked-node-bodies 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the bodies of all marked nodes 
&gt; in the current outline. 
&gt;
&gt; print-preview-marked-node-bodies 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the bodies of all 
&gt; marked nodes in the current outline. 
&gt;
&gt; Settings 
&gt; ======== 
&gt;
&gt; - ``@string printing-font-family = DejaVu Sans Mono`` 
&gt;    The font family for printing.  A monospaced font is recommended. 
&gt;
&gt; - ``@string printing-font-size = 12`` 
&gt;    The font size for printing bodies, in px.  Due to limitations 
&gt;    of PyQt, the size of headlines cannot be changed. 
&gt; ''' 
&gt;
&gt; To use it, be sure to add `printing.py` to your @enabled-plugins. 
&gt;
&gt; Future work may have more printing modes available, and I intend on 
&gt; doing a blog post on the leoblog about creating custom printing modes in 
&gt; scripts. 
&gt;
&gt; This addresses bug 1132804: 
&gt; https://bugs.launchpad.net/leo-editor/+bug/1132804 
&gt;
&gt; --&gt;Jake 
&gt;

</t>
<t tx="ekr.20130526065545.17623">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using the
&gt; Qt GUI.  Available from rev 5779.
&gt;

Excellent work.  Many thanks for this contribution.
</t>
<t tx="ekr.20130526065545.17624">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

It just works! Nice.
Being able to preview is great, less paper wasted.

I rely entirely on command completion as a memory aid, too
bad the info listing commands also start with 'print'. I would
think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
situation now we have print.

Too late?

</t>
<t tx="ekr.20130526065545.17633">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I've added [an abbreviation] "persist;;"


[snip]

How do you use the code inserted by the abbreviation?  I suspect I'm not
the only one who doesn't understand what you are trying to do...
</t>
<t tx="ekr.20130526065545.17634">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've added an abbreviation to my myLeoSettings.leo abbreviations:
https://gist.github.com/tbnorth/5530059

It's the abbreviation "persist;;" and when you type that you get:

---cut here---
import json

json_state_file = "cache_info_file.json"
if not os.path.exists(json_state_file):
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    except:
        json.dump(cache_info, open(json_state_file, 'w'))
---cut here---

with appropriate interaction to customize all the parts which, in the
above example, include "cache_", i.e. the filename and the variable
name.

The point is it seems silly to create a module and hence a dependency
for what is barely 4 lines of actual code, but those 4 lines give you
very handy robust persistence, so something like an editor abbreviation
is the obvious way to make the available - nothing Leo specific here,
except that only serious editors have abbreviation like that ;-).
</t>
<t tx="ekr.20130526065545.17635">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, May 24, 2013 at 8:29 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Fri, 24 May 2013 16:35:59 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;


&gt; &gt; How do you use the code inserted by the abbreviation?  I suspect I'm not
&gt;
&gt;  It's just a framework for providing a dictionary the contents of which
&gt; persist between runs of the program.  I've used it for code that's
&gt; making lots of small url requests against a server, to cache the
&gt; results so that during development the crash / debug / re-run cycle is
&gt; faster because each piece of data is requested only once, ever, not once
&gt; every run.  More recently I was using it to store key value pairs of
&gt; filenames and a comment on the issue in the file, knowing that
&gt; completing the analysis of the issues in the files would take more than
&gt; one run of the program which was identifying the issues.
&gt;
&gt; So in the example below, the content of the cache_info dictionary is
&gt; persistent, whatever main() does with it is seen next time the
&gt; program's run.  Nothing Leo specific except that it's really just an
&gt; import statement plus 5 lines of code and doesn't seem worth its own
&gt; file, but is more than you want to re-type all the time either, so
&gt; ideal for an abbreviation in your favorite editor.
&gt;

Thanks for the explanation.
</t>
<t tx="ekr.20130526065545.17636">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

This is a multi-part message in MIME format.


On 5/24/2013 5:35 PM, Edward K. Ream wrote:
&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com 
&gt; &lt;mailto:terry_n_brown@yahoo.com&gt;&gt; wrote:
&gt;
&gt;     I've added [an abbreviation] "persist;;"
&gt;
&gt;
&gt; [snip]
&gt;
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm 
&gt; not the only one who doesn't understand what you are trying to do...
&gt;
&gt; Edward
&gt;
Seconded.

</t>
<t tx="ekr.20130526065545.17637">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

p.s. the 'except:' in the code below should have been 'finally:', fixed
on the gist now.

On Thu, 23 May 2013 14:41:31 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; I've added an abbreviation to my myLeoSettings.leo abbreviations:
&gt; https://gist.github.com/tbnorth/5530059
&gt; 
&gt; It's the abbreviation "persist;;" and when you type that you get:
&gt; 
&gt; ---cut here---
&gt; import json
&gt; 
&gt; json_state_file = "cache_info_file.json"
&gt; if not os.path.exists(json_state_file):
&gt;     json.dump({'cache_items':{}}, open(json_state_file, 'w'))
&gt; cache_info = json.load(open(json_state_file))
&gt; 
&gt; def main():
&gt; 
&gt;     # do stuff with cache_info...
&gt; 
&gt; if __name__ == '__main__':
&gt; 
&gt;     try:
&gt;         main()
&gt;     except:
&gt;         json.dump(cache_info, open(json_state_file, 'w'))
&gt; ---cut here---
&gt; 
&gt; with appropriate interaction to customize all the parts which, in the
&gt; above example, include "cache_", i.e. the filename and the variable
&gt; name.
&gt; 
&gt; The point is it seems silly to create a module and hence a dependency
&gt; for what is barely 4 lines of actual code, but those 4 lines give you
&gt; very handy robust persistence, so something like an editor abbreviation
&gt; is the obvious way to make the available - nothing Leo specific here,
&gt; except that only serious editors have abbreviation like that ;-).
&gt; 
&gt; Cheers -Terry
&gt; 

</t>
<t tx="ekr.20130526065545.17638">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 24 May 2013 16:35:59 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:
&gt; 
&gt; &gt; I've added [an abbreviation] "persist;;"
&gt; 
&gt; 
&gt; [snip]
&gt; 
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm not

The corrected version is below for reference - I had `except` instead
of `finally` in the first version, so you data was only saved if
something went wrong :-)

It's just a framework for providing a dictionary the contents of which
persist between runs of the program.  I've used it for code that's
making lots of small url requests against a server, to cache the
results so that during development the crash / debug / re-run cycle is
faster because each piece of data is requested only once, ever, not once
every run.  More recently I was using it to store key value pairs of
filenames and a comment on the issue in the file, knowing that
completing the analysis of the issues in the files would take more than
one run of the program which was identifying the issues.

So in the example below, the content of the cache_info dictionary is
persistent, whatever main() does with it is seen next time the
program's run.  Nothing Leo specific except that it's really just an
import statement plus 5 lines of code and doesn't seem worth its own
file, but is more than you want to re-type all the time either, so
ideal for an abbreviation in your favorite editor.

I've added a couple of comments in the version below.

Cheers -Terry

---cut here---
import json

# name for persistent data store
json_state_file = "cache_info_file.json"   
if not os.path.exists(json_state_file):
    # create persistent data store if it doesn't exist
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
# load persistent data
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    finally:
        # save altered persistent data
        json.dump(cache_info, open(json_state_file, 'w'), indent=4)
---cut here---

&gt; the only one who doesn't understand what you are trying to do...
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130803073926.17113"></t>
<t tx="ekr.20130803073926.17114"></t>
<t tx="ekr.20130803073926.17115"></t>
<t tx="ekr.20130803073926.17122"></t>
<t tx="ekr.20130803073926.17123"></t>
<t tx="ekr.20130803073926.17124">@language rest
</t>
<t tx="ekr.20130803125244.17080">Installing Leo on Windows

    Install Python from http://www.python.org/download/releases/

    Install either Tk or Qt, as described above.

    Install Leo. Get Leo’s .zip file from http://sourceforge.net/projects/leo/ You can unpack the .zip file anywhere, including Python’s site-packages folder, for example, C:\Python26\Lib\site-packages

    [optional] Generate/update a junction link from unpacked leo folder to ...\site-packages\leo:

    cd C:\Python26\Lib\site-packages\
    junction leo leo-4-6-2-final

    Create windows shortcut (edit paths as necessary):

    Target   =  C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py"
    Start in =  D:\code

    Associate .leo filetype batch file:

    ftype LeoFile=C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" "%*"
    assoc .leo=LeoFile

    [optional] Put this leo.bat in %PATH%:

    @C:\Python26\python.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" %*

For more information see:

Junction links:
    http://technet.microsoft.com/en-gb/sysinternals/bb896768.aspx,
    http://groups.google.com/group/leo-editor/msg/30116f9193241dc4
ftype:
    http://ss64.com/nt/ftype.html
assoc:
    http://ss64.com/nt/assoc.html

</t>
<t tx="ekr.20130803125244.17092">@language rest

A **position** object represents a specific node in a Leo outline.

Equivalently, a position represents the state of a Leo generator, that is,
a specific node during a traversal of a Leo outline.

Because of clones, a node may appear arbitrarily many times in an outline,
so a node may appear at arbitrarily many positions in the outline.

For any position p, **p.v** is the vnode at position p.

A node's vnode never changes, regardless of where the node appears in the
outline, and regardless of whether the node is cloned or not.

**Positions become invalid when the outline changes.**

You may save and and use positions *provided* the outline remains unchanged.

Leo's generators deliver positions, one after each other, using a *single*
(ever-changing) position. As a result, scripts must use p.copy() to create
lists of positions. For example::

    aList = [p.copy() for p in c.rootPosition().subtree()]
</t>
<t tx="ekr.20130803125244.17093">Consider this example, where nodes with the same names are clones of each other::

+ Root
    + A
        - B
    + A
        - B
    - B

Leo's c.all_nodes() iterator will deliver 9 positions:

    1: Root
    2: A
    3: B
    4: A
    5: B
    6: B

*All* positions returned by a traversal are distinct.  Some examples:

- Position 2: A is different from position 4: A
  The former is the first child of root; the latter is the second child of root.
  
- The parent of position 3: B is A at childIndex 0 of Root.
  The parent of position 5: B is A at childIndex 1 of Root.
  The parent of position 6: B is Root. The childIndex of 6: B is 2.

</t>
<t tx="ekr.20130803125244.17094">http://leo-editor.github.io/valuespace-intro.html
</t>
<t tx="ekr.20130803125244.17095">g.cls()
# root = g.findNodeAnywhere(c,'root')
root = c.rootPosition()
assert root
line = 0
for p in root.self_and_subtree():
    line += 1
    print('%s: %4s @ %d p._childIndex: %d p.stack: %s' % (
        line,
        p.cleanHeadString(),
        id(p.v),
        p._childIndex,
        # p.level(),p.key(),
        # p.stack,
        '[%s]' % ', '.join(['(v:%s @ %s, %s)' % (v.h,id(v),i) for v,i in p.stack]),
    ))
</t>
<t tx="ekr.20130805080841.17066">https://groups.google.com/forum/#!topic/leo-editor/zLYKksm4btM

It appears that there are a lot of commands listed on the commands web
page that do not exist (any longer?) in leo.

For example:

collect-garbage
disable-gc-trace
dump-all-objects
dump-new-objects
enable-gc-trace
free-tree-widgets
verbose-dump-objects
apropos-autocompletion
apropos-bindings
apropos-find-commands

enable-autocompleter
            enable-calltips
            enter-apropos-mode
            enter-commands-mode
            enter-edit-mode
            enter-emacs-mode
            enter-extract-mode
            enter-file-mode
            enter-gui-mode
            enter-help-mode
            enter-kill-mode
            enter-modes-mode
            enter-move-outline-mode
            enter-outline-mode
            enter-toggle-find-mode

Also these appear to exist in leo but they do not appear in commands.html:

   help-for-abbreviations
   help-for-autocompletion
   help-for-bindings
   help-for-debugging-commands
   help-for-find-commands
   help-for-minibuffer
   help-for-regular-expressions

I am particularly interested in the various enter-x-mode commands. Have
these been moved to @mode nodes in leoSettings files? Where can I find
them? </t>
<t tx="ekr.20130806072439.18495">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

--===============6499910529404615799==
Content-Type: text/plain; charset=ISO-8859-1
MIME-Version: 1.0

I\'ve added ``vs-eval``, ``vs-last``, and ``vs-last-pretty`` commands to
the ``valuespace.py`` plug-in.  Update docs below.

Ville - if you don\'t want them in there, let me know and I\'ll move them
- I put them in there to avoid creating yet another plug-in, they\'re
sort of a light weight local calculation tool, vs. ``valuespace.py``\'s
outline wide calcs.

valuespace.py
=============

vs-eval
-------

Execute the selected text, if any.  Select next line of text.
    
Tries hard to capture the result of from the last expression in the
selected text::
    
    import datetime
    today = datetime.date.today()
    
will captue the value of ``today`` even though the last line is a
statement, not an expression.
    
Stores results in ``c.vs[\'_last\']`` for insertion
into body by ``vs-last`` or ``vs-last-pretty``.

Removes common indentation (``textwrap.dedent()``) before executing,
allowing execution of indented code.

``g``, ``c``, and ``p`` are available to executing code, assignments
are made in the ``c.vs`` namespace and persist for the life of ``c``.
    
vs-last
-------

Insert the last result from ``vs-eval``.  Inserted as a string,
so ``"1\\n2\\n3\\n4"`` will cover four lines and insert no quotes,
for ``repr()`` style insertion use ``vs-last-pretty``.
    
vs-last-pretty
--------------

Insert the last result from ``vs-eval``.  Formatted by
``pprint.pformat()``,  so ``"1\\n2\\n3\\n4"`` will appear as
\'``"1\\n2\\n3\\n4"``\', see all ``vs-last``.


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--===============6499910529404615799==
Content-Type: text/html; charset=ISO-8859-1
MIME-Version: 1.0

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils 0.8.1: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;

/*
TNB mods.

:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 6194 2009-11-11 12:05:10Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em; margin-left: 2em }

dl.docutils dt {
  font-weight: bold }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left{
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: left }

/* div.align-center * { */
/*   text-align: left } */

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document"&gt;


&lt;p&gt;I\'ve added &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last&lt;/span&gt;&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last-pretty&lt;/span&gt;&lt;/tt&gt; commands to
the &lt;tt class="docutils literal"&gt;valuespace.py&lt;/tt&gt; plug-in.  Update docs below.&lt;/p&gt;
&lt;p&gt;Ville - if you don\'t want them in there, let me know and I\'ll move them
- I put them in there to avoid creating yet another plug-in, they\'re
sort of a light weight local calculation tool, vs. &lt;tt class="docutils literal"&gt;valuespace.py&lt;/tt&gt;\'s
outline wide calcs.&lt;/p&gt;
&lt;div class="section" id="valuespace-py"&gt;
&lt;h1&gt;valuespace.py&lt;/h1&gt;
&lt;div class="section" id="vs-eval"&gt;
&lt;h2&gt;vs-eval&lt;/h2&gt;
&lt;p&gt;Execute the selected text, if any.  Select next line of text.&lt;/p&gt;
&lt;p&gt;Tries hard to capture the result of from the last expression in the
selected text:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
import datetime
today = datetime.date.today()
&lt;/pre&gt;
&lt;p&gt;will captue the value of &lt;tt class="docutils literal"&gt;today&lt;/tt&gt; even though the last line is a
statement, not an expression.&lt;/p&gt;
&lt;p&gt;Stores results in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;c.vs[\'_last\']&lt;/span&gt;&lt;/tt&gt; for insertion
into body by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last-pretty&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Removes common indentation (&lt;tt class="docutils literal"&gt;textwrap.dedent()&lt;/tt&gt;) before executing,
allowing execution of indented code.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;c&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;p&lt;/tt&gt; are available to executing code, assignments
are made in the &lt;tt class="docutils literal"&gt;c.vs&lt;/tt&gt; namespace and persist for the life of &lt;tt class="docutils literal"&gt;c&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vs-last"&gt;
&lt;h2&gt;vs-last&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Inserted as a string,
so &lt;tt class="docutils literal"&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will cover four lines and insert no quotes,
for &lt;tt class="docutils literal"&gt;repr()&lt;/tt&gt; style insertion use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last-pretty&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vs-last-pretty"&gt;
&lt;h2&gt;vs-last-pretty&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Formatted by
&lt;tt class="docutils literal"&gt;pprint.pformat()&lt;/tt&gt;,  so &lt;tt class="docutils literal"&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will appear as
\'&lt;tt class="docutils literal"&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt;\', see all &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;vs-last&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href="http://groups.google.com/group/leo-editor?hl=en"&gt;http://groups.google.com/group/leo-editor?hl=en&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--===============6499910529404615799==--</t>
<t tx="ekr.20130806072439.18496">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--f46d04339d40de1c7b04d6cde5b1
Content-Type: text/plain; charset=ISO-8859-1

Tried it out.

vs-last didn\'t work (returned None every time), vs-last-pretty did. I
pushed a fix to bzr.


On Thu, Feb 28, 2013 at 4:59 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; ** **
&gt;
&gt; I\'ve added vs-eval, vs-last, and vs-last-pretty commands to the
&gt; valuespace.py plug-in. Update docs below.
&gt;
&gt; Ville - if you don\'t want them in there, let me know and I\'ll move them -
&gt; I put them in there to avoid creating yet another plug-in, they\'re sort of
&gt; a light weight local calculation tool, vs. valuespace.py\'s outline wide
&gt; calcs.
&gt;  valuespace.py
&gt; vs-eval
&gt;
&gt; Execute the selected text, if any. Select next line of text.
&gt;
&gt; Tries hard to capture the result of from the last expression in the
&gt; selected text:
&gt;
&gt; import datetime
&gt; today = datetime.date.today()
&gt;
&gt; will captue the value of today even though the last line is a statement,
&gt; not an expression.
&gt;
&gt; Stores results in c.vs[\'_last\'] for insertion into body by vs-last or
&gt; vs-last-pretty.
&gt;
&gt; Removes common indentation (textwrap.dedent()) before executing, allowing
&gt; execution of indented code.
&gt;
&gt; g, c, and p are available to executing code, assignments are made in the
&gt; c.vs namespace and persist for the life of c.
&gt;  vs-last
&gt;
&gt; Insert the last result from vs-eval. Inserted as a string, so "1\\n2\\n3\\n4"will cover four lines and insert no quotes, for
&gt; repr() style insertion use vs-last-pretty.
&gt;  vs-last-pretty
&gt;
&gt; Insert the last result from vs-eval. Formatted by pprint.pformat(), so
&gt; "1\\n2\\n3\\n4" will appear as \'"1\\n2\\n3\\n4"\', see all vs-last.
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d04339d40de1c7b04d6cde5b1
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;&lt;div style&gt;Tried it out.&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;vs-last=
 didn&amp;#39;t work (returned None every time), vs-last-pretty did. I pushed a=
 fix to bzr.&lt;/div&gt;&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_qu=
ote"&gt;
On Thu, Feb 28, 2013 at 4:59 PM, Terry Brown &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=
=3D"mailto:terry_n_brown@yahoo.com" target=3D"_blank"&gt;terry_n_brown@yahoo.c=
om&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D"gmail_quote" style=3D"marg=
in:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;
&lt;u&gt;&lt;/u&gt;
&lt;u&gt;&lt;/u&gt;







&lt;div&gt;
&lt;div&gt;


&lt;p&gt;I&amp;#39;ve added &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;, &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;&lt;/=
tt&gt;, and &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/span&gt;&lt;/tt&gt; commands to
the &lt;tt&gt;valuespace.py&lt;/tt&gt; plug-in.  Update docs below.&lt;/p&gt;
&lt;p&gt;Ville - if you don&amp;#39;t want them in there, let me know and I&amp;#39;ll mo=
ve them
- I put them in there to avoid creating yet another plug-in, they&amp;#39;re
sort of a light weight local calculation tool, vs. &lt;tt&gt;valuespace.py&lt;/tt&gt;&amp;#=
39;s
outline wide calcs.&lt;/p&gt;
&lt;div&gt;
&lt;h1&gt;valuespace.py&lt;/h1&gt;
&lt;div&gt;
&lt;h2&gt;vs-eval&lt;/h2&gt;
&lt;p&gt;Execute the selected text, if any.  Select next line of text.&lt;/p&gt;
&lt;p&gt;Tries hard to capture the result of from the last expression in the
selected text:&lt;/p&gt;
&lt;pre&gt;import datetime
today =3D datetime.date.today()
&lt;/pre&gt;
&lt;p&gt;will captue the value of &lt;tt&gt;today&lt;/tt&gt; even though the last line is a
statement, not an expression.&lt;/p&gt;
&lt;p&gt;Stores results in &lt;tt&gt;&lt;span&gt;c.vs[&amp;#39;_last&amp;#39;]&lt;/span&gt;&lt;/tt&gt; for insert=
ion
into body by &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;&lt;/tt&gt; or &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/spa=
n&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Removes common indentation (&lt;tt&gt;textwrap.dedent()&lt;/tt&gt;) before executing=
,
allowing execution of indented code.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;g&lt;/tt&gt;, &lt;tt&gt;c&lt;/tt&gt;, and &lt;tt&gt;p&lt;/tt&gt; are available to executing code, =
assignments
are made in the &lt;tt&gt;c.vs&lt;/tt&gt; namespace and persist for the life of &lt;tt&gt;c&lt;/=
tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;vs-last&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Inserted as =
a string,
so &lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will cover four lines and insert no quot=
es,
for &lt;tt&gt;repr()&lt;/tt&gt; style insertion use &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/span&gt;&lt;/tt=
&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;vs-last-pretty&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Formatted by
&lt;tt&gt;pprint.pformat()&lt;/tt&gt;,  so &lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will appear =
as
&amp;#39;&lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt;&amp;#39;, see all &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;=
&lt;/tt&gt;.&lt;/p&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;


&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com" target=
=3D"_blank"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
=A0&lt;br&gt;
=A0&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d04339d40de1c7b04d6cde5b1--</t>
<t tx="ekr.20130806072439.18497">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--14dae9340445204cf904d6ca318a
Content-Type: text/plain; charset=ISO-8859-1

No, I think they make sense in valuespace plugin since you can use them to
execute stuff in the vs namespace.


On Thu, Feb 28, 2013 at 4:59 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; ** **
&gt;
&gt; I\'ve added vs-eval, vs-last, and vs-last-pretty commands to the
&gt; valuespace.py plug-in. Update docs below.
&gt;
&gt; Ville - if you don\'t want them in there, let me know and I\'ll move them -
&gt; I put them in there to avoid creating yet another plug-in, they\'re sort of
&gt; a light weight local calculation tool, vs. valuespace.py\'s outline wide
&gt; calcs.
&gt;  valuespace.py
&gt; vs-eval
&gt;
&gt; Execute the selected text, if any. Select next line of text.
&gt;
&gt; Tries hard to capture the result of from the last expression in the
&gt; selected text:
&gt;
&gt; import datetime
&gt; today = datetime.date.today()
&gt;
&gt; will captue the value of today even though the last line is a statement,
&gt; not an expression.
&gt;
&gt; Stores results in c.vs[\'_last\'] for insertion into body by vs-last or
&gt; vs-last-pretty.
&gt;
&gt; Removes common indentation (textwrap.dedent()) before executing, allowing
&gt; execution of indented code.
&gt;
&gt; g, c, and p are available to executing code, assignments are made in the
&gt; c.vs namespace and persist for the life of c.
&gt;  vs-last
&gt;
&gt; Insert the last result from vs-eval. Inserted as a string, so "1\\n2\\n3\\n4"will cover four lines and insert no quotes, for
&gt; repr() style insertion use vs-last-pretty.
&gt;  vs-last-pretty
&gt;
&gt; Insert the last result from vs-eval. Formatted by pprint.pformat(), so
&gt; "1\\n2\\n3\\n4" will appear as \'"1\\n2\\n3\\n4"\', see all vs-last.
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--14dae9340445204cf904d6ca318a
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;No, I think they make sense in valuespace plugin since you=
 can use them to execute stuff in the vs namespace.&lt;/div&gt;&lt;div class=3D"gmai=
l_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Thu, Feb 28, 2013 at 4:59 PM=
, Terry Brown &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:terry_n_brown@yahoo.c=
om" target=3D"_blank"&gt;terry_n_brown@yahoo.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;u&gt;&lt;/u&gt;
&lt;u&gt;&lt;/u&gt;







&lt;div&gt;
&lt;div&gt;


&lt;p&gt;I&amp;#39;ve added &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;, &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;&lt;/=
tt&gt;, and &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/span&gt;&lt;/tt&gt; commands to
the &lt;tt&gt;valuespace.py&lt;/tt&gt; plug-in.  Update docs below.&lt;/p&gt;
&lt;p&gt;Ville - if you don&amp;#39;t want them in there, let me know and I&amp;#39;ll mo=
ve them
- I put them in there to avoid creating yet another plug-in, they&amp;#39;re
sort of a light weight local calculation tool, vs. &lt;tt&gt;valuespace.py&lt;/tt&gt;&amp;#=
39;s
outline wide calcs.&lt;/p&gt;
&lt;div&gt;
&lt;h1&gt;valuespace.py&lt;/h1&gt;
&lt;div&gt;
&lt;h2&gt;vs-eval&lt;/h2&gt;
&lt;p&gt;Execute the selected text, if any.  Select next line of text.&lt;/p&gt;
&lt;p&gt;Tries hard to capture the result of from the last expression in the
selected text:&lt;/p&gt;
&lt;pre&gt;import datetime
today =3D datetime.date.today()
&lt;/pre&gt;
&lt;p&gt;will captue the value of &lt;tt&gt;today&lt;/tt&gt; even though the last line is a
statement, not an expression.&lt;/p&gt;
&lt;p&gt;Stores results in &lt;tt&gt;&lt;span&gt;c.vs[&amp;#39;_last&amp;#39;]&lt;/span&gt;&lt;/tt&gt; for insert=
ion
into body by &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;&lt;/tt&gt; or &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/spa=
n&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Removes common indentation (&lt;tt&gt;textwrap.dedent()&lt;/tt&gt;) before executing=
,
allowing execution of indented code.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;g&lt;/tt&gt;, &lt;tt&gt;c&lt;/tt&gt;, and &lt;tt&gt;p&lt;/tt&gt; are available to executing code, =
assignments
are made in the &lt;tt&gt;c.vs&lt;/tt&gt; namespace and persist for the life of &lt;tt&gt;c&lt;/=
tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;vs-last&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Inserted as =
a string,
so &lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will cover four lines and insert no quot=
es,
for &lt;tt&gt;repr()&lt;/tt&gt; style insertion use &lt;tt&gt;&lt;span&gt;vs-last-pretty&lt;/span&gt;&lt;/tt=
&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;h2&gt;vs-last-pretty&lt;/h2&gt;
&lt;p&gt;Insert the last result from &lt;tt&gt;&lt;span&gt;vs-eval&lt;/span&gt;&lt;/tt&gt;.  Formatted by
&lt;tt&gt;pprint.pformat()&lt;/tt&gt;,  so &lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt; will appear =
as
&amp;#39;&lt;tt&gt;&amp;quot;1\\n2\\n3\\n4&amp;quot;&lt;/tt&gt;&amp;#39;, see all &lt;tt&gt;&lt;span&gt;vs-last&lt;/span&gt;=
&lt;/tt&gt;.&lt;/p&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;


&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com" target=
=3D"_blank"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
=A0&lt;br&gt;
=A0&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--14dae9340445204cf904d6ca318a--</t>
<t tx="ekr.20130806072439.18498">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Feb 2013 21:28:39 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; vs-last didn\'t work (returned None every time), vs-last-pretty did. I
&gt; pushed a fix to bzr.

Thanks, nice timing, I had just noticed but was dealing with another
email first :-)

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18499">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

--===============5479120180738723609==
Content-Type: text/plain; charset=ISO-8859-1
MIME-Version: 1.0

Here\'s the updated docs. for the bookmarks.py plugin - it provides a
pane with colored links to nodes, they can now be added and removed
with mouse clicks, making navigation back and forward between related
nodes quick and easy.

bookmarks.py
------------

Open bookmarks in a list, and show bookmarks in a pane.

Adds the ``bookmarks-open-bookmark`` command which opens the bookmark in the
selected node **if** the node has an ancestor which contains ``@bookmarks``
in its heading.  Useful for binding to double-click.

Also ``bookmarks-open-node``, like ``bookmarks-open-bookmark`` but without
the ancestor requirement.

*Note:* bookmarks treats file urls missing the ``file://`` part as urls,
which deviates from Leo\'s behavior elsewhere.  It also recognizes local UNLs
like ``#ToDo--&gt;Critical`` as urls.

The ``bookmarks-show`` command will add a tab or pane (if free_layout is enabled)
showing the bookmarks **in the current subtree** with unique colors. You can
very quickly jump around between nodes in a file using this. 

Nodes can be added and removed from the display with the following mouse actions:
    
**left-click on node**
    Jump to that node.
**left-click on background**
    Add a bookmark at the position clicked, unless already present,
    in which case the existing link is highlighted.
**control-left-click on node**
    Remove node.
**alt-left-click on node**
    Edit clicked node in bookmark list, to change link text.
**alt-left-click on background**
    Edit bookmark list.
    
The ``quickMove.py`` plugin also provides actions for adding nodes to a bookmark list.

The free_layout Action button context menu will also allow you to add one of
these bookmark panes, and they will be saved and loaded again if the layout is
saved and loaded.


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--===============5479120180738723609==
Content-Type: text/html; charset=ISO-8859-1
MIME-Version: 1.0

&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils 0.8.1: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;

/*
TNB mods.

:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 6194 2009-11-11 12:05:10Z milde $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em; margin-left: 2em }

dl.docutils dt {
  font-weight: bold }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left, .figure.align-left{
  clear: left ;
  float: left ;
  margin-right: 1em }

img.align-right, .figure.align-right {
  clear: right ;
  float: right ;
  margin-left: 1em }

img.align-center, .figure.align-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.align-left {
  text-align: left }

.align-center {
  clear: both ;
  text-align: center }

.align-right {
  text-align: right }

/* reset inner alignment in figures */
div.align-right {
  text-align: left }

/* div.align-center * { */
/*   text-align: left } */

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font: inherit }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document"&gt;


&lt;p&gt;Here\'s the updated docs. for the bookmarks.py plugin - it provides a
pane with colored links to nodes, they can now be added and removed
with mouse clicks, making navigation back and forward between related
nodes quick and easy.&lt;/p&gt;
&lt;div class="section" id="bookmarks-py"&gt;
&lt;h1&gt;bookmarks.py&lt;/h1&gt;
&lt;p&gt;Open bookmarks in a list, and show bookmarks in a pane.&lt;/p&gt;
&lt;p&gt;Adds the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bookmarks-open-bookmark&lt;/span&gt;&lt;/tt&gt; command which opens the bookmark in the
selected node &lt;strong&gt;if&lt;/strong&gt; the node has an ancestor which contains &lt;tt class="docutils literal"&gt;&amp;#64;bookmarks&lt;/tt&gt;
in its heading.  Useful for binding to double-click.&lt;/p&gt;
&lt;p&gt;Also &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bookmarks-open-node&lt;/span&gt;&lt;/tt&gt;, like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bookmarks-open-bookmark&lt;/span&gt;&lt;/tt&gt; but without
the ancestor requirement.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; bookmarks treats file urls missing the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;file://&lt;/span&gt;&lt;/tt&gt; part as urls,
which deviates from Leo\'s behavior elsewhere.  It also recognizes local UNLs
like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;#ToDo--&amp;gt;Critical&lt;/span&gt;&lt;/tt&gt; as urls.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bookmarks-show&lt;/span&gt;&lt;/tt&gt; command will add a tab or pane (if free_layout is enabled)
showing the bookmarks &lt;strong&gt;in the current subtree&lt;/strong&gt; with unique colors. You can
very quickly jump around between nodes in a file using this.&lt;/p&gt;
&lt;p&gt;Nodes can be added and removed from the display with the following mouse actions:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;strong&gt;left-click on node&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Jump to that node.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;left-click on background&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Add a bookmark at the position clicked, unless already present,
in which case the existing link is highlighted.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;control-left-click on node&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Remove node.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;alt-left-click on node&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Edit clicked node in bookmark list, to change link text.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;alt-left-click on background&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Edit bookmark list.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;quickMove.py&lt;/tt&gt; plugin also provides actions for adding nodes to a bookmark list.&lt;/p&gt;
&lt;p&gt;The free_layout Action button context menu will also allow you to add one of
these bookmark panes, and they will be saved and loaded again if the layout is
saved and loaded.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href="http://groups.google.com/group/leo-editor?hl=en"&gt;http://groups.google.com/group/leo-editor?hl=en&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--===============5479120180738723609==--</t>
<t tx="ekr.20130806072439.18508">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I\'ve found that having edits on a node in one outline simultaneously
reflected in another node in another outline works surprisingly well.

I do a lot of to-do item project managing with Leo, with lists of todo
items (managed with the todo plugin) in each projects outline.

A script rapidly assembles a global list of todo items using
the .../external/leosax.py parser to scan all the project files without
leo having to fully load them.  The script builds a tree of todo items
which uses the UNLs to make them into bookmarks which can jump to the
corresponding node in the project\'s outline, opening it if necessary.

Which works fine for general "what should I work on next" use, but is
still clumsy if you want to edit a lot of todo items at once, adjusting
due date or priority etc.  You have to double-click the item in the
global view to jump to its source in its project\'s outline, edit it
there, switch back to the main outline, etc.

So now the script which generates the global view tags the items with a
marker which, when seen by the todo plugin, causes it to apply todo
item edits in the global view to the corresponding node in the
project\'s file as well.  This means the first time you edit a todo item
there may be a pause while that project\'s outline is loaded, but
everything carries on as it should afterwards, and on-going todo item
editing is quick once the outlines are loaded.

I\'ll push the updated todo.py code which checks for a
v.u[\'annotate\'][\'src_unl\'] marker to know if a todo item is a proxy for
one in another file and propagate the edits, but unless you have a
script which assembles todo items from diverse files and tags them as
proxies it doesn\'t really do anything.

Really I just wanted to highlight how this approach, edits on a proxy
node causing the opening and editing of a node in another outline,
really can work in a usable way - I\'m sure there are all sorts of
possible applications.

Cheers -Terry



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18509">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--f46d0447882d3a9afa04cfb07423
Content-Type: text/plain; charset=ISO-8859-1

Kent, I echo your thoughts :)

as I was reading Terry\'s post I kept thinking I\'d like to watch him work
sometime. A few times I\'ve tried setting up a Todo system in Leo for
myself, but I\'ve thus far always abandoned the project as it turned into
more work than a simpe pad and pen kept close at hand. (Albeit with
drawbacks. There\'s a pad at work, another at home, a 3rd in my jacket
sometimes, and content intermixed between them "on the wrong one").

cheers,

-matt

On Thu, Nov 29, 2012 at 12:19 PM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:

&gt; That flow would sure make a great webcast!
&gt;
&gt; (ie: I don\'t get it, but I can tell it\'s cool)
&gt;
&gt; On Thu, Nov 29, 2012 at 1:28 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;
&gt; wrote:
&gt; &gt; I\'ve found that having edits on a node in one outline simultaneously
&gt; &gt; reflected in another node in another outline works surprisingly well.
&gt; &gt;
&gt; &gt; I do a lot of to-do item project managing with Leo, with lists of todo
&gt; &gt; items (managed with the todo plugin) in each projects outline.
&gt; &gt;
&gt; &gt; A script rapidly assembles a global list of todo items using
&gt; &gt; the .../external/leosax.py parser to scan all the project files without
&gt; &gt; leo having to fully load them.  The script builds a tree of todo items
&gt; &gt; which uses the UNLs to make them into bookmarks which can jump to the
&gt; &gt; corresponding node in the project\'s outline, opening it if necessary.
&gt; &gt;
&gt; &gt; Which works fine for general "what should I work on next" use, but is
&gt; &gt; still clumsy if you want to edit a lot of todo items at once, adjusting
&gt; &gt; due date or priority etc.  You have to double-click the item in the
&gt; &gt; global view to jump to its source in its project\'s outline, edit it
&gt; &gt; there, switch back to the main outline, etc.
&gt; &gt;
&gt; &gt; So now the script which generates the global view tags the items with a
&gt; &gt; marker which, when seen by the todo plugin, causes it to apply todo
&gt; &gt; item edits in the global view to the corresponding node in the
&gt; &gt; project\'s file as well.  This means the first time you edit a todo item
&gt; &gt; there may be a pause while that project\'s outline is loaded, but
&gt; &gt; everything carries on as it should afterwards, and on-going todo item
&gt; &gt; editing is quick once the outlines are loaded.
&gt; &gt;
&gt; &gt; I\'ll push the updated todo.py code which checks for a
&gt; &gt; v.u[\'annotate\'][\'src_unl\'] marker to know if a todo item is a proxy for
&gt; &gt; one in another file and propagate the edits, but unless you have a
&gt; &gt; script which assembles todo items from diverse files and tags them as
&gt; &gt; proxies it doesn\'t really do anything.
&gt; &gt;
&gt; &gt; Really I just wanted to highlight how this approach, edits on a proxy
&gt; &gt; node causing the opening and editing of a node in another outline,
&gt; &gt; really can work in a usable way - I\'m sure there are all sorts of
&gt; &gt; possible applications.
&gt; &gt;
&gt; &gt; Cheers -Terry
&gt; &gt;
&gt; &gt; --
&gt; &gt; You received this message because you are subscribed to the Google
&gt; Groups "leo-editor" group.
&gt; &gt; 
&gt; &gt; To unsubscribe from this group, send email to
&gt; leo-editor+unsubscribe@googlegroups.com.
&gt; &gt; For more options, visit this group at
&gt; http://groups.google.com/group/leo-editor?hl=en.
&gt; &gt;
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to
&gt; leo-editor+unsubscribe@googlegroups.com.
&gt; For more options, visit this group at
&gt; http://groups.google.com/group/leo-editor?hl=en.
&gt;
&gt;


-- 
-matt



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


--f46d0447882d3a9afa04cfb07423
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Kent, I echo your thoughts :)&lt;br&gt;&lt;br&gt;as I was reading Terry&amp;#39;s post I ke=
pt thinking I&amp;#39;d like to watch him work sometime. A few times I&amp;#39;ve t=
ried setting up a Todo system in Leo for myself, but I&amp;#39;ve thus far alwa=
ys abandoned the project as it turned into more work than a simpe pad and p=
en kept close at hand. (Albeit with drawbacks. There&amp;#39;s a pad at work, a=
nother at home, a 3rd in my jacket sometimes, and content intermixed betwee=
n them &amp;quot;on the wrong one&amp;quot;).&lt;br&gt;


&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;cheers,&lt;br&gt;&lt;br&gt;-matt&lt;br&gt;&lt;br&gt;&lt;div class=3D"gm=
ail_quote"&gt;On Thu, Nov 29, 2012 at 12:19 PM, Kent Tenney &lt;span dir=3D"ltr"&gt;=
&amp;lt;&lt;a href=3D"mailto:ktenney@gmail.com" target=3D"_blank"&gt;ktenney@gmail.co=
m&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;


&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;That flow would sure make a great webcast!&lt;b=
r&gt;
&lt;br&gt;
(ie: I don&amp;#39;t get it, but I can tell it&amp;#39;s cool)&lt;br&gt;
&lt;div&gt;&lt;div&gt;&lt;br&gt;
On Thu, Nov 29, 2012 at 1:28 PM, Terry Brown &amp;lt;&lt;a href=3D"mailto:terry_n_=
brown@yahoo.com" target=3D"_blank"&gt;terry_n_brown@yahoo.com&lt;/a&gt;&amp;gt; wrote:&lt;b=
r&gt;
&amp;gt; I&amp;#39;ve found that having edits on a node in one outline simultaneous=
ly&lt;br&gt;
&amp;gt; reflected in another node in another outline works surprisingly well.&lt;=
br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; I do a lot of to-do item project managing with Leo, with lists of todo=
&lt;br&gt;
&amp;gt; items (managed with the todo plugin) in each projects outline.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; A script rapidly assembles a global list of todo items using&lt;br&gt;
&amp;gt; the .../external/leosax.py parser to scan all the project files withou=
t&lt;br&gt;
&amp;gt; leo having to fully load them. =A0The script builds a tree of todo ite=
ms&lt;br&gt;
&amp;gt; which uses the UNLs to make them into bookmarks which can jump to the&lt;=
br&gt;
&amp;gt; corresponding node in the project&amp;#39;s outline, opening it if necessa=
ry.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Which works fine for general &amp;quot;what should I work on next&amp;quot; us=
e, but is&lt;br&gt;
&amp;gt; still clumsy if you want to edit a lot of todo items at once, adjustin=
g&lt;br&gt;
&amp;gt; due date or priority etc. =A0You have to double-click the item in the&lt;=
br&gt;
&amp;gt; global view to jump to its source in its project&amp;#39;s outline, edit i=
t&lt;br&gt;
&amp;gt; there, switch back to the main outline, etc.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; So now the script which generates the global view tags the items with =
a&lt;br&gt;
&amp;gt; marker which, when seen by the todo plugin, causes it to apply todo&lt;br=
&gt;
&amp;gt; item edits in the global view to the corresponding node in the&lt;br&gt;
&amp;gt; project&amp;#39;s file as well. =A0This means the first time you edit a to=
do item&lt;br&gt;
&amp;gt; there may be a pause while that project&amp;#39;s outline is loaded, but&lt;b=
r&gt;
&amp;gt; everything carries on as it should afterwards, and on-going todo item&lt;=
br&gt;
&amp;gt; editing is quick once the outlines are loaded.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; I&amp;#39;ll push the updated todo.py code which checks for a&lt;br&gt;
&amp;gt; v.u[&amp;#39;annotate&amp;#39;][&amp;#39;src_unl&amp;#39;] marker to know if a todo it=
em is a proxy for&lt;br&gt;
&amp;gt; one in another file and propagate the edits, but unless you have a&lt;br&gt;
&amp;gt; script which assembles todo items from diverse files and tags them as&lt;=
br&gt;
&amp;gt; proxies it doesn&amp;#39;t really do anything.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Really I just wanted to highlight how this approach, edits on a proxy&lt;=
br&gt;
&amp;gt; node causing the opening and editing of a node in another outline,&lt;br&gt;
&amp;gt; really can work in a usable way - I&amp;#39;m sure there are all sorts of&lt;=
br&gt;
&amp;gt; possible applications.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Cheers -Terry&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; --&lt;br&gt;
&amp;gt; You received this message because you are subscribed to the Google Gro=
ups &amp;quot;leo-editor&amp;quot; group.&lt;br&gt;
&amp;gt; To post to this group, send email to &lt;a href=3D"mailto:leo-editor@goog=
legroups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
&amp;gt; To unsubscribe from this group, send email to &lt;a href=3D"mailto:leo-ed=
itor%2Bunsubscribe@googlegroups.com" target=3D"_blank"&gt;leo-editor+unsubscri=
be@googlegroups.com&lt;/a&gt;.&lt;br&gt;
&amp;gt; For more options, visit this group at &lt;a href=3D"http://groups.google.=
com/group/leo-editor?hl=3Den" target=3D"_blank"&gt;http://groups.google.com/gr=
oup/leo-editor?hl=3Den&lt;/a&gt;.&lt;br&gt;
&amp;gt;&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To unsubscribe from this group, send email to &lt;a href=3D"mailto:leo-editor%=
2Bunsubscribe@googlegroups.com" target=3D"_blank"&gt;leo-editor+unsubscribe@go=
oglegroups.com&lt;/a&gt;.&lt;br&gt;
For more options, visit this group at &lt;a href=3D"http://groups.google.com/g=
roup/leo-editor?hl=3Den" target=3D"_blank"&gt;http://groups.google.com/group/l=
eo-editor?hl=3Den&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=3D"all"&gt;&lt;br&gt;-- &lt;br&gt;-matt&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



--f46d0447882d3a9afa04cfb07423--</t>
<t tx="ekr.20130806072439.18510">From: "F.S." &lt;speech.free@gmail.com&gt;

------=_Part_259_5710838.1354220609176
Content-Type: text/plain; charset=ISO-8859-1

It appears that the F-35 program could have benefited from your approach:
http://www.nytimes.com/2012/11/29/us/in-federal-budget-cutting-f-35-fighter-jet-is-at-risk.html?ref=us

They are still pasting paper on a wall to manage the project. Imagine if 
the project manager learned to use Leo.

On Thursday, November 29, 2012 11:28:46 AM UTC-8, Terry wrote:
&gt;
&gt; I\'ve found that having edits on a node in one outline simultaneously 
&gt; reflected in another node in another outline works surprisingly well. 
&gt;
&gt; I do a lot of to-do item project managing with Leo, with lists of todo 
&gt; items (managed with the todo plugin) in each projects outline. 
&gt;
&gt; A script rapidly assembles a global list of todo items using 
&gt; the .../external/leosax.py parser to scan all the project files without 
&gt; leo having to fully load them.  The script builds a tree of todo items 
&gt; which uses the UNLs to make them into bookmarks which can jump to the 
&gt; corresponding node in the project\'s outline, opening it if necessary. 
&gt;
&gt; Which works fine for general "what should I work on next" use, but is 
&gt; still clumsy if you want to edit a lot of todo items at once, adjusting 
&gt; due date or priority etc.  You have to double-click the item in the 
&gt; global view to jump to its source in its project\'s outline, edit it 
&gt; there, switch back to the main outline, etc. 
&gt;
&gt; So now the script which generates the global view tags the items with a 
&gt; marker which, when seen by the todo plugin, causes it to apply todo 
&gt; item edits in the global view to the corresponding node in the 
&gt; project\'s file as well.  This means the first time you edit a todo item 
&gt; there may be a pause while that project\'s outline is loaded, but 
&gt; everything carries on as it should afterwards, and on-going todo item 
&gt; editing is quick once the outlines are loaded. 
&gt;
&gt; I\'ll push the updated todo.py code which checks for a 
&gt; v.u[\'annotate\'][\'src_unl\'] marker to know if a todo item is a proxy for 
&gt; one in another file and propagate the edits, but unless you have a 
&gt; script which assembles todo items from diverse files and tags them as 
&gt; proxies it doesn\'t really do anything. 
&gt;
&gt; Really I just wanted to highlight how this approach, edits on a proxy 
&gt; node causing the opening and editing of a node in another outline, 
&gt; really can work in a usable way - I\'m sure there are all sorts of 
&gt; possible applications. 
&gt;
&gt; Cheers -Terry 
&gt;


To view this discussion on the web visit https://groups.google.com/d/msg/leo-editor/-/d7KkTsWVEgIJ.

To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


------=_Part_259_5710838.1354220609176
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

It appears that the F-35 program could have benefited from your approach:&lt;d=
iv&gt;http://www.nytimes.com/2012/11/29/us/in-federal-budget-cutting-f-35-figh=
ter-jet-is-at-risk.html?ref=3Dus&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;They are still pa=
sting paper on a wall to manage the project. Imagine if the project manager=
 learned to use Leo.&lt;br&gt;&lt;br&gt;On Thursday, November 29, 2012 11:28:46 AM UTC-=
8, Terry wrote:&lt;blockquote class=3D"gmail_quote" style=3D"margin: 0;margin-=
left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;I\'ve found that=
 having edits on a node in one outline simultaneously
&lt;br&gt;reflected in another node in another outline works surprisingly well.
&lt;br&gt;
&lt;br&gt;I do a lot of to-do item project managing with Leo, with lists of todo
&lt;br&gt;items (managed with the todo plugin) in each projects outline.
&lt;br&gt;
&lt;br&gt;A script rapidly assembles a global list of todo items using
&lt;br&gt;the .../external/leosax.py parser to scan all the project files without
&lt;br&gt;leo having to fully load them. &amp;nbsp;The script builds a tree of todo i=
tems
&lt;br&gt;which uses the UNLs to make them into bookmarks which can jump to the
&lt;br&gt;corresponding node in the project\'s outline, opening it if necessary.
&lt;br&gt;
&lt;br&gt;Which works fine for general "what should I work on next" use, but is
&lt;br&gt;still clumsy if you want to edit a lot of todo items at once, adjusting
&lt;br&gt;due date or priority etc. &amp;nbsp;You have to double-click the item in th=
e
&lt;br&gt;global view to jump to its source in its project\'s outline, edit it
&lt;br&gt;there, switch back to the main outline, etc.
&lt;br&gt;
&lt;br&gt;So now the script which generates the global view tags the items with a
&lt;br&gt;marker which, when seen by the todo plugin, causes it to apply todo
&lt;br&gt;item edits in the global view to the corresponding node in the
&lt;br&gt;project\'s file as well. &amp;nbsp;This means the first time you edit a todo=
 item
&lt;br&gt;there may be a pause while that project\'s outline is loaded, but
&lt;br&gt;everything carries on as it should afterwards, and on-going todo item
&lt;br&gt;editing is quick once the outlines are loaded.
&lt;br&gt;
&lt;br&gt;I\'ll push the updated todo.py code which checks for a
&lt;br&gt;v.u[\'annotate\'][\'src_unl\'] marker to know if a todo item is a proxy for
&lt;br&gt;one in another file and propagate the edits, but unless you have a
&lt;br&gt;script which assembles todo items from diverse files and tags them as
&lt;br&gt;proxies it doesn\'t really do anything.
&lt;br&gt;
&lt;br&gt;Really I just wanted to highlight how this approach, edits on a proxy
&lt;br&gt;node causing the opening and editing of a node in another outline,
&lt;br&gt;really can work in a usable way - I\'m sure there are all sorts of
&lt;br&gt;possible applications.
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
To view this discussion on the web visit &lt;a href=3D"https://groups.google.c=
om/d/msg/leo-editor/-/d7KkTsWVEgIJ"&gt;https://groups.google.com/d/msg/leo-edi=
tor/-/d7KkTsWVEgIJ&lt;/a&gt;.&lt;br /&gt;=20
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



------=_Part_259_5710838.1354220609176--</t>
<t tx="ekr.20130806072439.18511">From: Kent Tenney &lt;ktenney@gmail.com&gt;

That flow would sure make a great webcast!

(ie: I don\'t get it, but I can tell it\'s cool)

On Thu, Nov 29, 2012 at 1:28 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; I\'ve found that having edits on a node in one outline simultaneously
&gt; reflected in another node in another outline works surprisingly well.
&gt;
&gt; I do a lot of to-do item project managing with Leo, with lists of todo
&gt; items (managed with the todo plugin) in each projects outline.
&gt;
&gt; A script rapidly assembles a global list of todo items using
&gt; the .../external/leosax.py parser to scan all the project files without
&gt; leo having to fully load them.  The script builds a tree of todo items
&gt; which uses the UNLs to make them into bookmarks which can jump to the
&gt; corresponding node in the project\'s outline, opening it if necessary.
&gt;
&gt; Which works fine for general "what should I work on next" use, but is
&gt; still clumsy if you want to edit a lot of todo items at once, adjusting
&gt; due date or priority etc.  You have to double-click the item in the
&gt; global view to jump to its source in its project\'s outline, edit it
&gt; there, switch back to the main outline, etc.
&gt;
&gt; So now the script which generates the global view tags the items with a
&gt; marker which, when seen by the todo plugin, causes it to apply todo
&gt; item edits in the global view to the corresponding node in the
&gt; project\'s file as well.  This means the first time you edit a todo item
&gt; there may be a pause while that project\'s outline is loaded, but
&gt; everything carries on as it should afterwards, and on-going todo item
&gt; editing is quick once the outlines are loaded.
&gt;
&gt; I\'ll push the updated todo.py code which checks for a
&gt; v.u[\'annotate\'][\'src_unl\'] marker to know if a todo item is a proxy for
&gt; one in another file and propagate the edits, but unless you have a
&gt; script which assembles todo items from diverse files and tags them as
&gt; proxies it doesn\'t really do anything.
&gt;
&gt; Really I just wanted to highlight how this approach, edits on a proxy
&gt; node causing the opening and editing of a node in another outline,
&gt; really can work in a usable way - I\'m sure there are all sorts of
&gt; possible applications.
&gt;
&gt; Cheers -Terry
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
&gt; For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt;



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18512">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_153_552152.1360113254750
Content-Type: text/plain; charset=ISO-8859-1

I would like to see a fuller outline view of Leo trees. So instead of 
seeing one body only and the tree of headlines, I want to display all the 
parts of the tree (all bodies and subheadings) as continuous text, much 
like a word processor outline. 

I can almost do that myself in the preview panel. Here is a  very sloppy 
"preview-tree" script (good for a laugh for anyone who does much Leo 
programming!). 

result = ["\\n\\n&gt;"+p.h,"\\n"+p.b]
for p2 in p.subtree():
    result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )
    for i in p2.b.split(\'\\n\'):    
        result.append("\\n|  " + i)
s = \'\'.join(result)

g.app.gui.runScrolledMessageDialog(c=c, msg = g.u(\'rst:\\n\') + s )


This needs a total redesign, but it does give an idea of the results I want 
to get: the whole tree (not necessarily in rst format).

I think I could probably get this to work correctly, but the really tough 
part, I think, is being able to click somewhere on the tree preview and go 
to the pertinent node in the headline/body panels. 

This looks like a feature that Word has, but that Leo doesn\'t, as far as I 
can tell. Or am I missing something (besides the fact that such things can 
be done in Leo almost magically!) ?

Any suggestions for a full tree preview ? 

Bill 


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_153_552152.1360113254750
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I would like to see a fuller outline view of Leo trees. So instead of seein=
g one body only and the tree of headlines, I want to display all the parts =
of the tree (all bodies and subheadings) as continuous text, much like a wo=
rd processor outline.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I can almost do that myself =
in the preview panel. Here is a &amp;nbsp;very sloppy "preview-tree" script (go=
od for a laugh for anyone who does much Leo programming!).&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/=
div&gt;&lt;blockquote style=3D"margin: 0 0 0 40px; border: none; padding: 0px;"&gt;&lt;=
div&gt;&lt;div&gt;result =3D ["\\n\\n&amp;gt;"+p.h,"\\n"+p.b]&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;for p2 i=
n p.subtree():&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; result.append("\\n\\n&amp;gt;&amp;g=
t;"+p2.h + "\\n\\n" )&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; for i in p2.b.split(=
\'\\n\'): &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; resul=
t.append("\\n| &amp;nbsp;" + i)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;s =3D \'\'.join(result)&lt;/div&gt;=
&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;g.app.gui.runScrolledMessageDialo=
g(c=3Dc, msg =3D g.u(\'rst:\\n\') + s )&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div=
&gt;&lt;div&gt;This needs a total redesign, but it does give an idea of the results =
I want to get: the whole tree (not necessarily in rst format).&lt;/div&gt;&lt;div&gt;&lt;b=
r&gt;&lt;/div&gt;&lt;div&gt;I think I could probably get this to work correctly, but the r=
eally tough part, I think, is being able to click somewhere on the tree pre=
view and go to the pertinent node in the headline/body panels.&amp;nbsp;&lt;/div&gt;&lt;=
div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This looks like a feature that Word has, but that Leo do=
esn\'t, as far as I can tell. Or am I missing something (besides the fact th=
at such things can be done in Leo almost magically!) ?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;=
&lt;div&gt;Any suggestions for a full tree preview ?&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=
iv&gt;Bill&amp;nbsp;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_153_552152.1360113254750--</t>
<t tx="ekr.20130806072439.18513">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 22:43:30 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; It wouldn\'t be hard to do something with HTML formatting and links to
&gt; display the outline and jump to a node when you click on the display,
&gt; I\'ll try and get to it.

1) Paste the code below into a node, then hit the "run-script"
button.

2) Then select a node with some hierarchy, not too much.

3) Then right click on the panel dividers between the tree / body / log
panes, you should see a context menu with an "Open Window" sub-menu,
which should contain an "Overview" item.  

You should get a continuous view of the hierarchy with clickable
headlines which take you to the node.

You can select multiple nodes in step 2 above, with normal list Ctrl-
or Shift- click operations.  Nodes are shown in the overview in the
order selected.  This is how you\'d generate the overview for a whole
outline - i.e. contract the whole outline, click the first top level
node, shift click the last top level node, and then step 3.

You can also embed the overview in a pane in the Leo window by select
"Insert" rather than "Open window" in step 3, click the action button
and select Overview.

This was the low hanging fruit, based on code used in bookmarks.py.  A
refresh button for the outline wouldn\'t be too hard, but right now
you need to close the window / pane and open it again to refresh.

Cheer -Terry

--- cut here ---
@language python

from PyQt4 import QtGui, QtCore
from xml.sax.saxutils import escape

def add_html(html, nd):
    """recursively add to an html list with links to nodes"""
    
    unl = nd.get_UNL()
    html.append("&lt;div class=\'level\'&gt;"
        "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" %
        (unl, unl, escape(nd.h)))
    html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b))
    for child in nd.children():
        add_html(html, child)
    html.append("&lt;/div&gt;")

def make_overview(c):
    """build the overview widget"""

    te = QtGui.QTextBrowser()
    te.setReadOnly(True)
    te.setOpenLinks(False)
    
    def anchorClicked(url, c=c):
        url = str(url.toString())
        g.handleUrl(url,c=c,p=c.p)
    
    te.anchorClicked.connect(anchorClicked)
    
    html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt;
    .level .level {margin-left: 1.5em}
    a {text-decoration: none; font-size: 120%}
    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""]
    
    for nd in c.getSelectedPositions():
        add_html(html, nd)

    html.append("&lt;/body&gt;&lt;/html&gt;") 
    
    html = \'\\n\'.join(html)
    
    te.setHtml(html)
    
    return te

class OverviewPaneProvider:
    def __init__(self, c):
        self.c = c
        # Careful: we may be unit testing.
        if hasattr(c, \'free_layout\'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[(\'Overview\', \'_add_overview_pane\')]
    def ns_provide(self, id_):
        if id_ == \'_add_overview_pane\':
            w = make_overview(c)
            return w
    def ns_title(self, id_):
        if id_ == \'_add_overview_pane\':
            return "Leo Outline Overview"
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        return "outline overview window"

OverviewPaneProvider(c)

--- cut here ---


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18514">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--14dae934113d103af904d50fedf7
Content-Type: text/plain; charset=ISO-8859-1

There is a separate option when editing @file nodes


On Wed, Feb 6, 2013 at 4:47 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Tue, 5 Feb 2013 22:33:13 -0800
&gt; Matt Wilkie &lt;maphew@gmail.com&gt; wrote:
&gt;
&gt; &gt; On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;wgwinder@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of
&gt; &gt; &gt; seeing one body only and the tree of headlines, I want to display all
&gt; the
&gt; &gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, much
&gt; &gt; &gt; like a word processor outline.
&gt; &gt;
&gt; &gt; I use *"r-click &gt; Edit in ..."*  for this purpose. It\'s a poor man\'s
&gt; &gt; workaround. Something integrated would be much nicer. Just thought I\'d
&gt; &gt; mention it for anyone looking for something they might be able to use
&gt; right
&gt; &gt; away.
&gt;
&gt; When I try that it only edits the one node, none of its children.
&gt; Which is what I thought it did.
&gt;
&gt; Cheers -Terry
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--14dae934113d103af904d50fedf7
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;There is a separate option when editing @file nodes&lt;/div&gt;&lt;=
div class=3D"gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Wed, Feb 6,=
 2013 at 4:47 PM, Terry Brown &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:terry=
_n_brown@yahoo.com" target=3D"_blank"&gt;terry_n_brown@yahoo.com&lt;/a&gt;&amp;gt;&lt;/span=
&gt; wrote:&lt;br&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div class=3D"im"&gt;On Tue, 5 Feb 2013 22:33:1=
3 -0800&lt;br&gt;
Matt Wilkie &amp;lt;&lt;a href=3D"mailto:maphew@gmail.com"&gt;maphew@gmail.com&lt;/a&gt;&amp;gt=
; wrote:&lt;br&gt;
&lt;br&gt;
&amp;gt; On Tue, Feb 5, 2013 at 5:14 PM, wgw &amp;lt;&lt;a href=3D"mailto:wgwinder@gma=
il.com"&gt;wgwinder@gmail.com&lt;/a&gt;&amp;gt; wrote:&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; I would like to see a fuller outline view of Leo trees. So instea=
d of&lt;br&gt;
&amp;gt; &amp;gt; seeing one body only and the tree of headlines, I want to display=
 all the&lt;br&gt;
&amp;gt; &amp;gt; parts of the tree (all bodies and subheadings) as continuous text=
, much&lt;br&gt;
&amp;gt; &amp;gt; like a word processor outline.&lt;br&gt;
&amp;gt;&lt;br&gt;
&lt;/div&gt;&amp;gt; I use *&amp;quot;r-click &amp;gt; Edit in ...&amp;quot;* =A0for this purpose=
. It&amp;#39;s a poor man&amp;#39;s&lt;br&gt;
&lt;div class=3D"im"&gt;&amp;gt; workaround. Something integrated would be much nicer=
. Just thought I&amp;#39;d&lt;br&gt;
&amp;gt; mention it for anyone looking for something they might be able to use =
right&lt;br&gt;
&amp;gt; away.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;When I try that it only edits the one node, none of its children.&lt;br&gt;
Which is what I thought it did.&lt;br&gt;
&lt;br&gt;
Cheers -Terry&lt;br&gt;
&lt;div class=3D"HOEnZb"&gt;&lt;div class=3D"h5"&gt;&lt;br&gt;
--&lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com"&gt;leo-ed=
itor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--14dae934113d103af904d50fedf7--</t>
<t tx="ekr.20130806072439.18515">From: "william.winder@ubc.ca" &lt;wgwinder@gmail.com&gt;

--f46d04478905cac12604d5073b60
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Great! Thanks for looking into this. I think it would be a nice feature --
it would make an overview of the tree one of the possible views.

Thanks!

Bill


On Tue, Feb 5, 2013 at 8:43 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote=
:

&gt; On Tue, 5 Feb 2013 20:00:51 -0800 (PST)
&gt; wgw &lt;wgwinder@gmail.com&gt; wrote:
&gt;
&gt; &gt; Thanks! That plugin does both more and less than I want: more, because =
I
&gt; &gt; get a full and nicely formatted window with editable text boxes; less,
&gt; &gt; since it doesn\'t write any edited text back to the tree.
&gt; &gt;
&gt; &gt; My fumbling tinkering would go towards not editing in the preview
&gt; &gt; window/pane at all, and just having a keystroke or click scroll the
&gt; editing
&gt; &gt; pane to the right node in Leo. But that would mean that the preview pan=
el
&gt; &gt; would have have to be properly indexed so that from the cursor position
&gt; in
&gt; &gt; the panel the plugin could find the proper node back in the Leo panel.
&gt; &gt;  (Kludgy way: put the node id in the text!)
&gt;
&gt; Yes, I think nb-* is in some ways more of a tech. demonstration.
&gt;
&gt; It wouldn\'t be hard to do something with HTML formatting and links to
&gt; display the outline and jump to a node when you click on the display,
&gt; I\'ll try and get to it.
&gt;
&gt; Cheers -Terry
&gt;
&gt; &gt; Thanks for the suggestion.
&gt; &gt;
&gt; &gt; Bill
&gt; &gt;
&gt; &gt; Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :
&gt; &gt; &gt;
&gt; &gt; &gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)
&gt; &gt; &gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; I would like to see a fuller outline view of Leo trees. So instead =
of
&gt; &gt; &gt; &gt; seeing one body only and the tree of headlines, I want to display a=
ll
&gt; &gt; &gt; the
&gt; &gt; &gt; &gt; parts of the tree (all bodies and subheadings) as continuous text,
&gt; much
&gt; &gt; &gt; &gt; like a word processor outline.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; I can almost do that myself in the preview panel. Here is a  very
&gt; sloppy
&gt; &gt; &gt; &gt; "preview-tree" script (good for a laugh for anyone who does much Le=
o
&gt; &gt; &gt; &gt; programming!).
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; result =3D ["\\n\\n&gt;"+p.h,"\\n"+p.b]
&gt; &gt; &gt; &gt; for p2 in p.subtree():
&gt; &gt; &gt; &gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )
&gt; &gt; &gt; &gt;     for i in p2.b.split(\'\\n\'):
&gt; &gt; &gt; &gt;         result.append("\\n|  " + i)
&gt; &gt; &gt; &gt; s =3D \'\'.join(result)
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n\') + s=
 )
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; This needs a total redesign, but it does give an idea of the result=
s
&gt; I
&gt; &gt; &gt; want
&gt; &gt; &gt; &gt; to get: the whole tree (not necessarily in rst format).
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; I think I could probably get this to work correctly, but the really
&gt; &gt; &gt; tough
&gt; &gt; &gt; &gt; part, I think, is being able to click somewhere on the tree preview
&gt; and
&gt; &gt; &gt; go
&gt; &gt; &gt; &gt; to the pertinent node in the headline/body panels.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; This looks like a feature that Word has, but that Leo doesn\'t, as
&gt; far as
&gt; &gt; &gt; I
&gt; &gt; &gt; &gt; can tell. Or am I missing something (besides the fact that such
&gt; things
&gt; &gt; &gt; can
&gt; &gt; &gt; &gt; be done in Leo almost magically!) ?
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; Any suggestions for a full tree preview ?
&gt; &gt; &gt;
&gt; &gt; &gt; I think this has been requested before and Ville did something possib=
ly
&gt; &gt; &gt; using QtQuick or something, a scrolley flicky thing :-)
&gt; &gt; &gt;
&gt; &gt; &gt; Ah yes,
&gt; &gt; &gt;
&gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/Zs-5jKjP=
AB0
&gt; &gt; &gt;
&gt; &gt; &gt; ...and... I think I\'m going to have to kill me Leo session after doin=
g
&gt; &gt; &gt; nb-all on a large outline, so be warned - nb-subtree is probably
&gt; &gt; &gt; smarter.
&gt; &gt; &gt;
&gt; &gt; &gt; Cheers -Terry
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; Bill
&gt; &gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt;
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


--=20
W.Winder
faculty.arts.ubc.ca/winder

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d04478905cac12604d5073b60
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;Great! Thanks for looking into this. I think it would be a=
 nice feature -- it would make an overview of the tree one of the possible =
views.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Thanks!&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div styl=
e&gt;

Bill=A0&lt;/div&gt;&lt;/div&gt;&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_q=
uote"&gt;On Tue, Feb 5, 2013 at 8:43 PM, Terry Brown &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a =
href=3D"mailto:terry_n_brown@yahoo.com" target=3D"_blank"&gt;terry_n_brown@yah=
oo.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div class=3D"im"&gt;On Tue, 5 Feb 2013 20:00:5=
1 -0800 (PST)&lt;br&gt;
wgw &amp;lt;&lt;a href=3D"mailto:wgwinder@gmail.com"&gt;wgwinder@gmail.com&lt;/a&gt;&amp;gt; wr=
ote:&lt;br&gt;
&lt;br&gt;
&amp;gt; Thanks! That plugin does both more and less than I want: more, because=
 I&lt;br&gt;
&amp;gt; get a full and nicely formatted window with editable text boxes; less,=
&lt;br&gt;
&amp;gt; since it doesn&amp;#39;t write any edited text back to the tree.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; My fumbling tinkering would go towards not editing in the preview&lt;br&gt;
&amp;gt; window/pane at all, and just having a keystroke or click scroll the ed=
iting&lt;br&gt;
&amp;gt; pane to the right node in Leo. But that would mean that the preview pa=
nel&lt;br&gt;
&amp;gt; would have have to be properly indexed so that from the cursor positio=
n in&lt;br&gt;
&amp;gt; the panel the plugin could find the proper node back in the Leo panel.=
&lt;br&gt;
&amp;gt; =A0(Kludgy way: put the node id in the text!)&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;Yes, I think nb-* is in some ways more of a tech. demonstration.&lt;br&gt;
&lt;br&gt;
It wouldn&amp;#39;t be hard to do something with HTML formatting and links to&lt;b=
r&gt;
display the outline and jump to a node when you click on the display,&lt;br&gt;
I&amp;#39;ll try and get to it.&lt;br&gt;
&lt;br&gt;
Cheers -Terry&lt;br&gt;
&lt;div class=3D"im HOEnZb"&gt;&lt;br&gt;
&amp;gt; Thanks for the suggestion.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Bill&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)&lt;br&gt;
&lt;/div&gt;&lt;div class=3D"HOEnZb"&gt;&lt;div class=3D"h5"&gt;&amp;gt; &amp;gt; wgw &amp;lt;&lt;a href=3D"=
mailto:wgwi...@gmail.com"&gt;wgwi...@gmail.com&lt;/a&gt; &amp;lt;javascript:&amp;gt;&amp;gt; wro=
te:&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; I would like to see a fuller outline view of Leo trees. So i=
nstead of&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; seeing one body only and the tree of headlines, I want to di=
splay all&lt;br&gt;
&amp;gt; &amp;gt; the&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; parts of the tree (all bodies and subheadings) as continuous=
 text, much&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; like a word processor outline.&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; I can almost do that myself in the preview panel. Here is a =
=A0very sloppy&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; &amp;quot;preview-tree&amp;quot; script (good for a laugh for anyone=
 who does much Leo&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; programming!).&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; result =3D [&amp;quot;\\n\\n&amp;gt;&amp;quot;+p.h,&amp;quot;\\n&amp;quot;+p.b]&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; for p2 in p.subtree():&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; =A0 =A0 result.append(&amp;quot;\\n\\n&amp;gt;&amp;gt;&amp;quot;+p2.h + &amp;quot;=
\\n\\n&amp;quot; )&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; =A0 =A0 for i in p2.b.split(&amp;#39;\\n&amp;#39;):&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; =A0 =A0 =A0 =A0 result.append(&amp;quot;\\n| =A0&amp;quot; + i)&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; s =3D &amp;#39;&amp;#39;.join(result)&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(&amp;#39;r=
st:\\n&amp;#39;) + s )&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; This needs a total redesign, but it does give an idea of the=
 results I&lt;br&gt;
&amp;gt; &amp;gt; want&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; to get: the whole tree (not necessarily in rst format).&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; I think I could probably get this to work correctly, but the=
 really&lt;br&gt;
&amp;gt; &amp;gt; tough&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; part, I think, is being able to click somewhere on the tree =
preview and&lt;br&gt;
&amp;gt; &amp;gt; go&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; to the pertinent node in the headline/body panels.&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; This looks like a feature that Word has, but that Leo doesn&amp;=
#39;t, as far as&lt;br&gt;
&amp;gt; &amp;gt; I&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; can tell. Or am I missing something (besides the fact that s=
uch things&lt;br&gt;
&amp;gt; &amp;gt; can&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; be done in Leo almost magically!) ?&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; Any suggestions for a full tree preview ?&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; I think this has been requested before and Ville did something po=
ssibly&lt;br&gt;
&amp;gt; &amp;gt; using QtQuick or something, a scrolley flicky thing :-)&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; Ah yes,&lt;br&gt;
&amp;gt; &amp;gt; &lt;a href=3D"https://groups.google.com/forum/?fromgroups=3D#!topic/=
leo-editor/Zs-5jKjPAB0" target=3D"_blank"&gt;https://groups.google.com/forum/?=
fromgroups=3D#!topic/leo-editor/Zs-5jKjPAB0&lt;/a&gt;&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; ...and... I think I&amp;#39;m going to have to kill me Leo session af=
ter doing&lt;br&gt;
&amp;gt; &amp;gt; nb-all on a large outline, so be warned - nb-subtree is probably&lt;=
br&gt;
&amp;gt; &amp;gt; smarter.&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; Cheers -Terry&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt; Bill&lt;br&gt;
&amp;gt; &amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt;&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com"&gt;leo-ed=
itor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear=3D"all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;=
W.Winder&lt;br&gt;&lt;a href=3D"http://faculty.arts.ubc.ca/winder"&gt;faculty.arts.ubc.=
ca/winder&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d04478905cac12604d5073b60--</t>
<t tx="ekr.20130806072439.18516">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_716_32159962.1360172982407
Content-Type: text/plain; charset=ISO-8859-1

Got it. Thanks! 

(I do think that a rich vein of views could be derived from this code. For 
instance, it could generate an overview of marked nodes, or nodes that 
matched given search criteria, or n to m levels of the tree. That would 
give a number of very flexible, on the fly views of the tree, which is what 
clones do too. But this clones the views. Clones on steroids, in the sense 
that the views can be generated algorithmically.)

On Wednesday, February 6, 2013 9:25:05 AM UTC-8, Terry wrote:
&gt;
&gt; On Wed, 6 Feb 2013 09:01:23 -0800 (PST) 
&gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; One question: is there a  way to delete an inserted pane?  It  looks 
&gt; useful 
&gt; &gt; to have an inserted pane, but refreshing will require killing the pane 
&gt; and 
&gt; &gt; reinserting.... 
&gt;
&gt; Yes, although a bit putzy.  Right click on the panel divider adjacent 
&gt; to the pane, it may be above or below or left or right of it.  The panes 
&gt; either side of the divider will be highlighted blue and orange.  There 
&gt; will be an option to "Delete 1 left" or "Delete 1 below" or similar, if 
&gt; that seems to refer to the panel you want to delete, that\'s your option. 
&gt;
&gt; If the target panel seems to be joined with another (i.e. 2 not 1 
&gt; above) try right clicking a different divider to start with. 
&gt;
&gt; Makes me think that Shift-Ctrl-Click should close the panel it\'s on 
&gt; instead of all this futzing. 
&gt;
&gt; Cheers -Terry 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_716_32159962.1360172982407
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Got it. Thanks!&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(I do think that a rich vein of vi=
ews could be derived from this code. For instance, it could generate an ove=
rview of marked nodes, or nodes that matched given search criteria, or n to=
 m levels of the tree. That would give a number of very flexible, on the fl=
y views of the tree, which is what clones do too. But this clones the views=
. Clones on steroids, in the sense that the views can be generated algorith=
mically.)&lt;br&gt;&lt;br&gt;On Wednesday, February 6, 2013 9:25:05 AM UTC-8, Terry wro=
te:&lt;blockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;=
border-left: 1px #ccc solid;padding-left: 1ex;"&gt;On Wed, 6 Feb 2013 09:01:23=
 -0800 (PST)
&lt;br&gt;wgw &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscated-mailto=
=3D"tdb8gci1FhYJ"&gt;wgwi...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; One question: is there a &amp;nbsp;way to delete an inserted pane? &amp;nb=
sp;It &amp;nbsp;looks useful=20
&lt;br&gt;&amp;gt; to have an inserted pane, but refreshing will require killing the =
pane and=20
&lt;br&gt;&amp;gt; reinserting....
&lt;br&gt;
&lt;br&gt;Yes, although a bit putzy. &amp;nbsp;Right click on the panel divider adjac=
ent
&lt;br&gt;to the pane, it may be above or below or left or right of it. &amp;nbsp;The=
 panes
&lt;br&gt;either side of the divider will be highlighted blue and orange. &amp;nbsp;T=
here
&lt;br&gt;will be an option to "Delete 1 left" or "Delete 1 below" or similar, if
&lt;br&gt;that seems to refer to the panel you want to delete, that\'s your option=
.
&lt;br&gt;
&lt;br&gt;If the target panel seems to be joined with another (i.e. 2 not 1
&lt;br&gt;above) try right clicking a different divider to start with.
&lt;br&gt;
&lt;br&gt;Makes me think that Shift-Ctrl-Click should close the panel it\'s on
&lt;br&gt;instead of all this futzing.
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_716_32159962.1360172982407--</t>
<t tx="ekr.20130806072439.18517">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 17:14:14 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I would like to see a fuller outline view of Leo trees. So instead of 
&gt; seeing one body only and the tree of headlines, I want to display all the 
&gt; parts of the tree (all bodies and subheadings) as continuous text, much 
&gt; like a word processor outline. 
&gt; 
&gt; I can almost do that myself in the preview panel. Here is a  very sloppy 
&gt; "preview-tree" script (good for a laugh for anyone who does much Leo 
&gt; programming!). 
&gt; 
&gt; result = ["\\n\\n&gt;"+p.h,"\\n"+p.b]
&gt; for p2 in p.subtree():
&gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )
&gt;     for i in p2.b.split(\'\\n\'):    
&gt;         result.append("\\n|  " + i)
&gt; s = \'\'.join(result)
&gt; 
&gt; g.app.gui.runScrolledMessageDialog(c=c, msg = g.u(\'rst:\\n\') + s )
&gt; 
&gt; 
&gt; This needs a total redesign, but it does give an idea of the results I want 
&gt; to get: the whole tree (not necessarily in rst format).
&gt; 
&gt; I think I could probably get this to work correctly, but the really tough 
&gt; part, I think, is being able to click somewhere on the tree preview and go 
&gt; to the pertinent node in the headline/body panels. 
&gt; 
&gt; This looks like a feature that Word has, but that Leo doesn\'t, as far as I 
&gt; can tell. Or am I missing something (besides the fact that such things can 
&gt; be done in Leo almost magically!) ?
&gt; 
&gt; Any suggestions for a full tree preview ? 

I think this has been requested before and Ville did something possibly
using QtQuick or something, a scrolley flicky thing :-)

Ah yes,
https://groups.google.com/forum/?fromgroups=#!topic/leo-editor/Zs-5jKjPAB0

...and... I think I\'m going to have to kill me Leo session after doing
nb-all on a large outline, so be warned - nb-subtree is probably
smarter.

Cheers -Terry

&gt; Bill 
&gt; 


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18518">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_281_10283940.1360256002248
Content-Type: text/plain; charset=ISO-8859-1


On Thursday, February 7, 2013 6:21:51 AM UTC-8, Terry wrote:
&gt;
&gt; On Wed, 6 Feb 2013 22:28:38 -0800 
&gt; Matt Wilkie &lt;map...@gmail.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; neat! Thanks Terry. 
&gt; &gt; 
&gt; &gt; Are the links in the overview supposed to open up a browser window? The 
&gt; &gt; alt-tip text gives an in-Leo hiearchy, e.g. 
&gt; "B:\\code\\dropbox-code.leo#leo 
&gt; &gt; stuff--&gt;Overview of selected nodes" but clicking goes to 
&gt; &gt; http://www.google.ca/, and in Internet Explorer even though Firefox is 
&gt; my 
&gt; &gt; default browser. 
&gt;
&gt; No, that\'s not right, they\'re supposed to just select the node they 
&gt; belong to.  I assume it was working for Bill the OP, and it works for 
&gt; me. 
&gt;
&gt; Bill - which OS are you using?  I wonder if it\'s a unix/windows path 
&gt; thing, I\'m using Ubuntu. 


Me too -- ubuntu 12.04. Everything works great. Whenever I click a headline 
link, the window hides and I go to the leo node, as expected. 

My tooltip gives the leo hierarchy of the node (path/leo file -&gt; tree -&gt; 
node).

 


&gt; &gt; And, more generally, can these hover-over-pane-divider-then-right-click 
&gt; &gt; actions be made available any other way? Like a drop down menu from a 
&gt; &gt; button or alt-x command or something. 
&gt;
&gt; What, you mean instead of being completely hidden where no one will 
&gt; ever find them?  :-)  Most of them (not the Open Window variants of 
&gt; course) rely on the context provided by your selection of a particular 
&gt; divider, insert-where, delete-which etc. 
&gt;

I wonder whether a rclick on the overview button might remember the window 
id and close it.... (but I am way beyond my depth here...)
 

&gt;
&gt; Probably the most friendly would be a button which pops up an overlay 
&gt; over the UI where you can select which pane to delete, or where to 
&gt; insert, etc.  But that would be hard. 
&gt;
&gt; Cheers -Terry 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_281_10283940.1360256002248
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;br&gt;On Thursday, February 7, 2013 6:21:51 AM UTC-8, Terry wrote:&lt;blockquote=
 class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1=
px #ccc solid;padding-left: 1ex;"&gt;On Wed, 6 Feb 2013 22:28:38 -0800
&lt;br&gt;Matt Wilkie &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscate=
d-mailto=3D"GzjQItheAN4J"&gt;map...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; neat! Thanks Terry.
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; Are the links in the overview supposed to open up a browser window=
? The
&lt;br&gt;&amp;gt; alt-tip text gives an in-Leo hiearchy, e.g. "B:\\code\\dropbox-code.=
leo#leo
&lt;br&gt;&amp;gt; stuff--&amp;gt;Overview of selected nodes" but clicking goes to
&lt;br&gt;&amp;gt; &lt;a href=3D"http://www.google.ca/" target=3D"_blank"&gt;http://www.goo=
gle.ca/&lt;/a&gt;, and in Internet Explorer even though Firefox is my
&lt;br&gt;&amp;gt; default browser.
&lt;br&gt;
&lt;br&gt;No, that\'s not right, they\'re supposed to just select the node they
&lt;br&gt;belong to. &amp;nbsp;I assume it was working for Bill the OP, and it works =
for
&lt;br&gt;me.
&lt;br&gt;
&lt;br&gt;Bill - which OS are you using? &amp;nbsp;I wonder if it\'s a unix/windows pa=
th
&lt;br&gt;thing, I\'m using Ubuntu. &lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Me too -- ubu=
ntu 12.04. Everything works great. Whenever I click a headline link, the wi=
ndow hides and I go to the leo node, as expected.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div=
&gt;&lt;div&gt;My tooltip gives the leo hierarchy of the node (path/leo file -&amp;gt; t=
ree -&amp;gt; node).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class=3D"gmail_quote" styl=
e=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left:=
 1ex;"&gt;&lt;span style=3D"font-size: 13px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquo=
te class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left:=
 1px #ccc solid;padding-left: 1ex;"&gt;
&lt;br&gt;&amp;gt; And, more generally, can these hover-over-pane-divider-then-&lt;wbr&gt;r=
ight-click
&lt;br&gt;&amp;gt; actions be made available any other way? Like a drop down menu fro=
m a
&lt;br&gt;&amp;gt; button or alt-x command or something.
&lt;br&gt;
&lt;br&gt;What, you mean instead of being completely hidden where no one will
&lt;br&gt;ever find them? &amp;nbsp;:-) &amp;nbsp;Most of them (not the Open Window varia=
nts of
&lt;br&gt;course) rely on the context provided by your selection of a particular
&lt;br&gt;divider, insert-where, delete-which etc.
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I wonder whether a rclick on the overv=
iew button might remember the window id and close it.... (but I am way beyo=
nd my depth here...)&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;blockquote class=3D"gmail_quote=
" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding=
-left: 1ex;"&gt;
&lt;br&gt;Probably the most friendly would be a button which pops up an overlay
&lt;br&gt;over the UI where you can select which pane to delete, or where to
&lt;br&gt;insert, etc. &amp;nbsp;But that would be hard.
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_281_10283940.1360256002248--</t>
<t tx="ekr.20130806072439.18519">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--f46d0444029a613ce104d5088100
Content-Type: text/plain; charset=ISO-8859-1

On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I would like to see a fuller outline view of Leo trees. So instead of
&gt; seeing one body only and the tree of headlines, I want to display all the
&gt; parts of the tree (all bodies and subheadings) as continuous text, much
&gt; like a word processor outline.


I use *"r-click &gt; Edit in ..."*  for this purpose. It\'s a poor man\'s
workaround. Something integrated would be much nicer. Just thought I\'d
mention it for anyone looking for something they might be able to use right
away.

-matt


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d0444029a613ce104d5088100
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto=
:wgwinder@gmail.com" target=3D"_blank"&gt;wgwinder@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wr=
ote:&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;&lt;blockquote class=3D"gmail_quote" style=
=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;

I would like to see a fuller outline view of Leo trees. So instead of seein=
g one body only and the tree of headlines, I want to display all the parts =
of the tree (all bodies and subheadings) as continuous text, much like a wo=
rd processor outline.=A0&lt;/blockquote&gt;

&lt;/div&gt;&lt;br&gt;I use &lt;i&gt;&amp;quot;r-click &amp;gt; Edit in ...&amp;quot;&lt;/i&gt;=A0 for this pur=
pose. It&amp;#39;s a poor man&amp;#39;s workaround. Something integrated would be m=
uch nicer. Just thought I&amp;#39;d mention it for anyone looking for something=
 they might be able to use right away.&lt;br&gt;

&lt;br&gt;-matt&lt;br&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d0444029a613ce104d5088100--</t>
<t tx="ekr.20130806072439.18520">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 7 Feb 2013 08:53:22 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; I wonder whether a rclick on the overview button might remember the window 
&gt; id and close it.... (but I am way beyond my depth here...)

So this got way more complicated than I thought real fast, but got done
in the end anyway.

 - rclick / mclick don\'t activate the anchorClicked event, only lclick
 - ok, so use Ctrl-lclick to close, but
 - anchorClicked doesn\'t know the keyboard modifiers like a regular
   event, only the url
 - so change the script (new version below) to track modifiers
   separately
 - but closing the overview window still leaves the top level
   window with a placeholder in it, so I had to modify
   nested_splitter, new version pushed to launchpad / available
   in snap-shot tomorrow

Cheers -Terry

--- cut here ---
@language python

from PyQt4 import QtGui, QtCore
from xml.sax.saxutils import escape

def add_html(html, nd):
    """recursively add to an html list with links to nodes"""
    
    unl = nd.get_UNL()
    html.append("&lt;div class=\'level\'&gt;"
        "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" %
        (unl, unl, escape(nd.h)))
    html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b))
    for child in nd.children():
        add_html(html, child)
    html.append("&lt;/div&gt;")

def make_overview(c):
    """build the overview widget"""

    te = QtGui.QTextBrowser()
    te.setReadOnly(True)
    te.setOpenLinks(False)
    
    def anchorClicked(url, c=c, te=te):
        
        url = str(url.toString())
        g.handleUrl(url,c=c,p=c.p)
        
        if te.ctrl_click:
            te.deleteLater()
        
    te.anchorClicked.connect(anchorClicked)
    
    def mousePressEvent(event, te=te, original=te.mousePressEvent):
        te.ctrl_click = bool(event.modifiers() &amp; QtCore.Qt.ControlModifier)
        original(event)
    
    te.mousePressEvent = mousePressEvent
    
    html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt;
    .level .level {margin-left: 1.5em}
    a {text-decoration: none; font-size: 120%}
    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""]
    
    for nd in c.getSelectedPositions():
        add_html(html, nd)

    html.append("&lt;/body&gt;&lt;/html&gt;") 
    
    html = \'\\n\'.join(html)
    
    te.setHtml(html)
    
    return te

class OverviewPaneProvider:
    def __init__(self, c):
        self.c = c
        # Careful: we may be unit testing.
        if hasattr(c, \'free_layout\'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[(\'Overview\', \'_add_overview_pane\')]
    def ns_provide(self, id_):
        if id_ == \'_add_overview_pane\':
            w = make_overview(c)
            return w
    def ns_title(self, id_):
        if id_ == \'_add_overview_pane\':
            return "Leo Outline Overview"
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        return "outline overview window"

OverviewPaneProvider(c)

--- cut here ---


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18521">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--047d7b621a64dd83b804d51c8e3c
Content-Type: text/plain; charset=ISO-8859-1

neat! Thanks Terry.

Are the links in the overview supposed to open up a browser window? The
alt-tip text gives an in-Leo hiearchy, e.g. "B:\\code\\dropbox-code.leo#leo
stuff--&gt;Overview of selected nodes" but clicking goes to
http://www.google.ca/, and in Internet Explorer even though Firefox is my
default browser.

And, more generally, can these hover-over-pane-divider-then-right-click
actions be made available any other way? Like a drop down menu from a
button or alt-x command or something.

cheers,

-matt


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--047d7b621a64dd83b804d51c8e3c
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

neat! Thanks Terry.&lt;br&gt;&lt;br&gt;Are the links in the overview supposed to open u=
p a browser window? The alt-tip text gives an in-Leo hiearchy, e.g. &amp;quot;B=
:\\code\\dropbox-code.leo#leo stuff--&amp;gt;Overview of selected nodes&amp;quot; but=
 clicking goes to &lt;a href=3D"http://www.google.ca/"&gt;http://www.google.ca/&lt;/=
a&gt;, and in Internet Explorer even though Firefox is my default browser.&lt;br&gt;

&lt;br&gt;And, more generally, can these hover-over-pane-divider-then-right-click=
 actions be made available any other way? Like a drop down menu from a butt=
on or alt-x command or something.&lt;br&gt;&lt;br&gt;cheers,&lt;br&gt;&lt;br&gt;-matt&lt;br&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--047d7b621a64dd83b804d51c8e3c--</t>
<t tx="ekr.20130806072439.18522">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 11:25:05 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; Makes me think that Shift-Ctrl-Click should close the panel it\'s on
&gt; instead of all this futzing.

Turns out to be harder than I thought, so I\'ve settled for a minor
re-ordering of the submenu items to make Remove easier to find.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18523">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_1781_12150916.1360123251546
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks! That plugin does both more and less than I want: more, because I=20
get a full and nicely formatted window with editable text boxes; less,=20
since it doesn\'t write any edited text back to the tree.=20

My fumbling tinkering would go towards not editing in the preview=20
window/pane at all, and just having a keystroke or click scroll the editing=
=20
pane to the right node in Leo. But that would mean that the preview panel=
=20
would have have to be properly indexed so that from the cursor position in=
=20
the panel the plugin could find the proper node back in the Leo panel.=20
 (Kludgy way: put the node id in the text!)
=20
Thanks for the suggestion.

Bill=20

Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :
&gt;
&gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)=20
&gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:=20
&gt;
&gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of=
=20
&gt; &gt; seeing one body only and the tree of headlines, I want to display all=
=20
&gt; the=20
&gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, much=
=20
&gt; &gt; like a word processor outline.=20
&gt; &gt;=20
&gt; &gt; I can almost do that myself in the preview panel. Here is a  very slopp=
y=20
&gt; &gt; "preview-tree" script (good for a laugh for anyone who does much Leo=20
&gt; &gt; programming!).=20
&gt; &gt;=20
&gt; &gt; result =3D ["\\n\\n&gt;"+p.h,"\\n"+p.b]=20
&gt; &gt; for p2 in p.subtree():=20
&gt; &gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )=20
&gt; &gt;     for i in p2.b.split(\'\\n\'):    =20
&gt; &gt;         result.append("\\n|  " + i)=20
&gt; &gt; s =3D \'\'.join(result)=20
&gt; &gt;=20
&gt; &gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n\') + s )=
=20
&gt; &gt;=20
&gt; &gt;=20
&gt; &gt; This needs a total redesign, but it does give an idea of the results I=
=20
&gt; want=20
&gt; &gt; to get: the whole tree (not necessarily in rst format).=20
&gt; &gt;=20
&gt; &gt; I think I could probably get this to work correctly, but the really=20
&gt; tough=20
&gt; &gt; part, I think, is being able to click somewhere on the tree preview and=
=20
&gt; go=20
&gt; &gt; to the pertinent node in the headline/body panels.=20
&gt; &gt;=20
&gt; &gt; This looks like a feature that Word has, but that Leo doesn\'t, as far a=
s=20
&gt; I=20
&gt; &gt; can tell. Or am I missing something (besides the fact that such things=
=20
&gt; can=20
&gt; &gt; be done in Leo almost magically!) ?=20
&gt; &gt;=20
&gt; &gt; Any suggestions for a full tree preview ?=20
&gt;
&gt; I think this has been requested before and Ville did something possibly=
=20
&gt; using QtQuick or something, a scrolley flicky thing :-)=20
&gt;
&gt; Ah yes,=20
&gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/Zs-5jKjP=
AB0=20
&gt;
&gt; ...and... I think I\'m going to have to kill me Leo session after doing=20
&gt; nb-all on a large outline, so be warned - nb-subtree is probably=20
&gt; smarter.=20
&gt;
&gt; Cheers -Terry=20
&gt;
&gt; &gt; Bill=20
&gt; &gt;=20
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_1781_12150916.1360123251546
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks! That plugin does both more and less than I want: more, because I ge=
t a full and nicely formatted window with editable text boxes; less, since =
it doesn\'t write any edited text back to the tree.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=
&gt;My fumbling tinkering would go towards not editing in the preview window/p=
ane at all, and just having a keystroke or click scroll the editing pane to=
 the right node in Leo. But that would mean that the preview panel would ha=
ve have to be properly indexed so that from the cursor position in the pane=
l the plugin could find the proper node back in the Leo panel. &amp;nbsp;(Kludg=
y way: put the node id in the text!)&lt;/div&gt;&lt;div&gt;&lt;span style=3D"font-size: 13=
px;"&gt;&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the suggestion.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;=
/div&gt;&lt;div&gt;Bill&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8=
, Terry a =E9crit&amp;nbsp;:&lt;blockquote class=3D"gmail_quote" style=3D"margin: =
0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;On Tue=
, 5 Feb 2013 17:14:14 -0800 (PST)
&lt;br&gt;wgw &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscated-mailto=
=3D"r7mA7oaRx2cJ"&gt;wgwi...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; I would like to see a fuller outline view of Leo trees. So instead=
 of=20
&lt;br&gt;&amp;gt; seeing one body only and the tree of headlines, I want to display =
all the=20
&lt;br&gt;&amp;gt; parts of the tree (all bodies and subheadings) as continuous text,=
 much=20
&lt;br&gt;&amp;gt; like a word processor outline.=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; I can almost do that myself in the preview panel. Here is a &amp;nbsp;=
very sloppy=20
&lt;br&gt;&amp;gt; "preview-tree" script (good for a laugh for anyone who does much L=
eo=20
&lt;br&gt;&amp;gt; programming!).=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; result =3D ["\\n\\n&amp;gt;"+p.h,"\\n"+p.b]
&lt;br&gt;&amp;gt; for p2 in p.subtree():
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; result.append("\\n\\n&amp;gt;&amp;gt;"+p2.h + "\\n\\n" )
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; for i in p2.b.split(\'\\n\'): &amp;nbsp; &amp;nbsp;
&lt;br&gt;&amp;gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; result.append("\\n| &amp;nbsp;" + i)
&lt;br&gt;&amp;gt; s =3D \'\'.join(result)
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; g.app.gui.&lt;wbr&gt;runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n=
\') + s )
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; This needs a total redesign, but it does give an idea of the resul=
ts I want=20
&lt;br&gt;&amp;gt; to get: the whole tree (not necessarily in rst format).
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; I think I could probably get this to work correctly, but the reall=
y tough=20
&lt;br&gt;&amp;gt; part, I think, is being able to click somewhere on the tree previe=
w and go=20
&lt;br&gt;&amp;gt; to the pertinent node in the headline/body panels.=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; This looks like a feature that Word has, but that Leo doesn\'t, as =
far as I=20
&lt;br&gt;&amp;gt; can tell. Or am I missing something (besides the fact that such th=
ings can=20
&lt;br&gt;&amp;gt; be done in Leo almost magically!) ?
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; Any suggestions for a full tree preview ?=20
&lt;br&gt;
&lt;br&gt;I think this has been requested before and Ville did something possibly
&lt;br&gt;using QtQuick or something, a scrolley flicky thing :-)
&lt;br&gt;
&lt;br&gt;Ah yes,
&lt;br&gt;&lt;a href=3D"https://groups.google.com/forum/?fromgroups=3D#!topic/leo-ed=
itor/Zs-5jKjPAB0" target=3D"_blank"&gt;https://groups.google.com/&lt;wbr&gt;forum/?f=
romgroups=3D#!topic/leo-&lt;wbr&gt;editor/Zs-5jKjPAB0&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;...and... I think I\'m going to have to kill me Leo session after doing
&lt;br&gt;nb-all on a large outline, so be warned - nb-subtree is probably
&lt;br&gt;smarter.
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;
&lt;br&gt;&amp;gt; Bill=20
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_1781_12150916.1360123251546--</t>
<t tx="ekr.20130806072439.18524">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 09:01:23 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; One question: is there a  way to delete an inserted pane?  It  looks useful 
&gt; to have an inserted pane, but refreshing will require killing the pane and 
&gt; reinserting....

Yes, although a bit putzy.  Right click on the panel divider adjacent
to the pane, it may be above or below or left or right of it.  The panes
either side of the divider will be highlighted blue and orange.  There
will be an option to "Delete 1 left" or "Delete 1 below" or similar, if
that seems to refer to the panel you want to delete, that\'s your option.

If the target panel seems to be joined with another (i.e. 2 not 1
above) try right clicking a different divider to start with.

Makes me think that Shift-Ctrl-Click should close the panel it\'s on
instead of all this futzing.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18525">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 7 Feb 2013 08:21:51 -0600
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Wed, 6 Feb 2013 22:28:38 -0800
&gt; Matt Wilkie &lt;maphew@gmail.com&gt; wrote:
...
&gt; &gt; And, more generally, can these hover-over-pane-divider-then-right-click
&gt; &gt; actions be made available any other way? Like a drop down menu from a
&gt; &gt; button or alt-x command or something.  
&gt; 
&gt; What, you mean instead of being completely hidden where no one will
&gt; ever find them?  :-)  Most of them (not the Open Window variants of
&gt; course)

But it occurs to me that it might be the open window variants you want,
specifically the code to make a button / command to open a window with
a particular panel in it.  That would be this:

if hasattr(c, \'free_layout\'):
    splitter = c.free_layout.get_top_splitter()
    if splitter:
        splitter.open_window(action=\'_add_overview_pane\')

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18526">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 6 Feb 2013 22:28:38 -0800
Matt Wilkie &lt;maphew@gmail.com&gt; wrote:

&gt; neat! Thanks Terry.
&gt; 
&gt; Are the links in the overview supposed to open up a browser window? The
&gt; alt-tip text gives an in-Leo hiearchy, e.g. "B:\\code\\dropbox-code.leo#leo
&gt; stuff--&gt;Overview of selected nodes" but clicking goes to
&gt; http://www.google.ca/, and in Internet Explorer even though Firefox is my
&gt; default browser.

No, that\'s not right, they\'re supposed to just select the node they
belong to.  I assume it was working for Bill the OP, and it works for
me.

Bill - which OS are you using?  I wonder if it\'s a unix/windows path
thing, I\'m using Ubuntu.

&gt; And, more generally, can these hover-over-pane-divider-then-right-click
&gt; actions be made available any other way? Like a drop down menu from a
&gt; button or alt-x command or something.

What, you mean instead of being completely hidden where no one will
ever find them?  :-)  Most of them (not the Open Window variants of
course) rely on the context provided by your selection of a particular
divider, insert-where, delete-which etc.

Probably the most friendly would be a button which pops up an overlay
over the UI where you can select which pane to delete, or where to
insert, etc.  But that would be hard.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18527">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_198_11760886.1360170083672
Content-Type: text/plain; charset=ISO-8859-1

Excellent! This is really a great help for me. I\'m still experimenting, but 
one thing I will find useful is that I can open several of these panes and 
navigate through each of the "views". Plus (and this has been a longtime 
wishlist item for those with fading sight), I can increase the text size 
for reading big chunks of text. 

(Another plus, and this is a big one, I can actually read your code well 
enough that I start to have some inkling about how to do this kind of 
addition to Leo. I could never begin to write it myself, but Leo makes it 
accessible even for shambling hackers.)

One question: is there a  way to delete an inserted pane?  It  looks useful 
to have an inserted pane, but refreshing will require killing the pane and 
reinserting.... 

I\'m going to use this a lot -- many thanks!

Bill

On Wednesday, February 6, 2013 7:36:41 AM UTC-8, Terry wrote:
&gt;
&gt; On Tue, 5 Feb 2013 22:43:30 -0600 
&gt; Terry Brown &lt;terry_...@yahoo.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; It wouldn\'t be hard to do something with HTML formatting and links to 
&gt; &gt; display the outline and jump to a node when you click on the display, 
&gt; &gt; I\'ll try and get to it. 
&gt;
&gt; 1) Paste the code below into a node, then hit the "run-script" 
&gt; button. 
&gt;
&gt; 2) Then select a node with some hierarchy, not too much. 
&gt;
&gt; 3) Then right click on the panel dividers between the tree / body / log 
&gt; panes, you should see a context menu with an "Open Window" sub-menu, 
&gt; which should contain an "Overview" item.   
&gt;
&gt; You should get a continuous view of the hierarchy with clickable 
&gt; headlines which take you to the node. 
&gt;
&gt; You can select multiple nodes in step 2 above, with normal list Ctrl- 
&gt; or Shift- click operations.  Nodes are shown in the overview in the 
&gt; order selected.  This is how you\'d generate the overview for a whole 
&gt; outline - i.e. contract the whole outline, click the first top level 
&gt; node, shift click the last top level node, and then step 3. 
&gt;
&gt; You can also embed the overview in a pane in the Leo window by select 
&gt; "Insert" rather than "Open window" in step 3, click the action button 
&gt; and select Overview. 
&gt;
&gt; This was the low hanging fruit, based on code used in bookmarks.py.  A 
&gt; refresh button for the outline wouldn\'t be too hard, but right now 
&gt; you need to close the window / pane and open it again to refresh. 
&gt;
&gt; Cheer -Terry 
&gt;
&gt; --- cut here --- 
&gt; @language python 
&gt;
&gt; from PyQt4 import QtGui, QtCore 
&gt; from xml.sax.saxutils import escape 
&gt;
&gt; def add_html(html, nd): 
&gt;     """recursively add to an html list with links to nodes""" 
&gt;     
&gt;     unl = nd.get_UNL() 
&gt;     html.append("&lt;div class=\'level\'&gt;" 
&gt;         "&lt;div&gt;&lt;a href=\'%s\' title=\'%s\'&gt;%s&lt;/a&gt;&lt;/div&gt;" % 
&gt;         (unl, unl, escape(nd.h))) 
&gt;     html.append("&lt;pre&gt;%s&lt;/pre&gt;"%escape(nd.b)) 
&gt;     for child in nd.children(): 
&gt;         add_html(html, child) 
&gt;     html.append("&lt;/div&gt;") 
&gt;
&gt; def make_overview(c): 
&gt;     """build the overview widget""" 
&gt;
&gt;     te = QtGui.QTextBrowser() 
&gt;     te.setReadOnly(True) 
&gt;     te.setOpenLinks(False) 
&gt;     
&gt;     def anchorClicked(url, c=c): 
&gt;         url = str(url.toString()) 
&gt;         g.handleUrl(url,c=c,p=c.p) 
&gt;     
&gt;     te.anchorClicked.connect(anchorClicked) 
&gt;     
&gt;     html = ["""&lt;html&gt;&lt;head&gt;&lt;style&gt; 
&gt;     .level .level {margin-left: 1.5em} 
&gt;     a {text-decoration: none; font-size: 120%} 
&gt;     &lt;/style&gt;&lt;/head&gt;&lt;body&gt;"""] 
&gt;     
&gt;     for nd in c.getSelectedPositions(): 
&gt;         add_html(html, nd) 
&gt;
&gt;     html.append("&lt;/body&gt;&lt;/html&gt;") 
&gt;     
&gt;     html = \'\\n\'.join(html) 
&gt;     
&gt;     te.setHtml(html) 
&gt;     
&gt;     return te 
&gt;
&gt; class OverviewPaneProvider: 
&gt;     def __init__(self, c): 
&gt;         self.c = c 
&gt;         # Careful: we may be unit testing. 
&gt;         if hasattr(c, \'free_layout\'): 
&gt;             splitter = c.free_layout.get_top_splitter() 
&gt;             if splitter: 
&gt;                 splitter.register_provider(self) 
&gt;     def ns_provides(self): 
&gt;         return[(\'Overview\', \'_add_overview_pane\')] 
&gt;     def ns_provide(self, id_): 
&gt;         if id_ == \'_add_overview_pane\': 
&gt;             w = make_overview(c) 
&gt;             return w 
&gt;     def ns_title(self, id_): 
&gt;         if id_ == \'_add_overview_pane\': 
&gt;             return "Leo Outline Overview" 
&gt;     def ns_provider_id(self): 
&gt;         # used by register_provider() to unregister previously registered 
&gt;         # providers of the same service 
&gt;         return "outline overview window" 
&gt;
&gt; OverviewPaneProvider(c) 
&gt;
&gt; --- cut here --- 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_198_11760886.1360170083672
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Excellent! This is really a great help for me. I\'m still experimenting, but=
 one thing I will find useful is that I can open several of these panes and=
 navigate through each of the "views". Plus (and this has been a longtime w=
ishlist item for those with fading sight), I can increase the text size for=
 reading big chunks of text.&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(Another plus, and th=
is is a big one, I can actually read your code well enough that I start to =
have some inkling about how to do this kind of addition to Leo. I could nev=
er begin to write it myself, but Leo makes it accessible even for shambling=
 hackers.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One question: is there a &amp;nbsp;way to d=
elete an inserted&lt;span style=3D"font-size: 13px;"&gt;&amp;nbsp;pane? &amp;nbsp;It &amp;nbs=
p;looks useful to have an inserted pane, but refreshing will require killin=
g the pane and reinserting....&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I\'m go=
ing to use this a lot -- many thanks!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bill&lt;br&gt;&lt;br&gt;=
On Wednesday, February 6, 2013 7:36:41 AM UTC-8, Terry wrote:&lt;blockquote cl=
ass=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px =
#ccc solid;padding-left: 1ex;"&gt;On Tue, 5 Feb 2013 22:43:30 -0600
&lt;br&gt;Terry Brown &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscate=
d-mailto=3D"RPoL56l-t1QJ"&gt;terry_...@yahoo.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; It wouldn\'t be hard to do something with HTML formatting and links=
 to
&lt;br&gt;&amp;gt; display the outline and jump to a node when you click on the displ=
ay,
&lt;br&gt;&amp;gt; I\'ll try and get to it.
&lt;br&gt;
&lt;br&gt;1) Paste the code below into a node, then hit the "run-script"
&lt;br&gt;button.
&lt;br&gt;
&lt;br&gt;2) Then select a node with some hierarchy, not too much.
&lt;br&gt;
&lt;br&gt;3) Then right click on the panel dividers between the tree / body / log
&lt;br&gt;panes, you should see a context menu with an "Open Window" sub-menu,
&lt;br&gt;which should contain an "Overview" item. &amp;nbsp;
&lt;br&gt;
&lt;br&gt;You should get a continuous view of the hierarchy with clickable
&lt;br&gt;headlines which take you to the node.
&lt;br&gt;
&lt;br&gt;You can select multiple nodes in step 2 above, with normal list Ctrl-
&lt;br&gt;or Shift- click operations. &amp;nbsp;Nodes are shown in the overview in th=
e
&lt;br&gt;order selected. &amp;nbsp;This is how you\'d generate the overview for a who=
le
&lt;br&gt;outline - i.e. contract the whole outline, click the first top level
&lt;br&gt;node, shift click the last top level node, and then step 3.
&lt;br&gt;
&lt;br&gt;You can also embed the overview in a pane in the Leo window by select
&lt;br&gt;"Insert" rather than "Open window" in step 3, click the action button
&lt;br&gt;and select Overview.
&lt;br&gt;
&lt;br&gt;This was the low hanging fruit, based on code used in bookmarks.py. &amp;nb=
sp;A
&lt;br&gt;refresh button for the outline wouldn\'t be too hard, but right now
&lt;br&gt;you need to close the window / pane and open it again to refresh.
&lt;br&gt;
&lt;br&gt;Cheer -Terry
&lt;br&gt;
&lt;br&gt;--- cut here ---
&lt;br&gt;@language python
&lt;br&gt;
&lt;br&gt;from PyQt4 import QtGui, QtCore
&lt;br&gt;from xml.sax.saxutils import escape
&lt;br&gt;
&lt;br&gt;def add_html(html, nd):
&lt;br&gt;&amp;nbsp; &amp;nbsp; """recursively add to an html list with links to nodes"""
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; unl =3D nd.get_UNL()
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;div class=3D\'level\'&amp;gt;"
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "&amp;lt;div&amp;gt;&amp;lt;a href=3D\'%s\' title=3D\'%s\'&amp;=
gt;%s&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;" %
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; (unl, unl, escape(nd.h)))
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;pre&amp;gt;%s&amp;lt;/pre&amp;gt;"%&lt;wbr&gt;escape(nd.b)=
)
&lt;br&gt;&amp;nbsp; &amp;nbsp; for child in nd.children():
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; add_html(html, child)
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;/div&amp;gt;")
&lt;br&gt;
&lt;br&gt;def make_overview(c):
&lt;br&gt;&amp;nbsp; &amp;nbsp; """build the overview widget"""
&lt;br&gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; te =3D QtGui.QTextBrowser()
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setReadOnly(True)
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setOpenLinks(False)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; def anchorClicked(url, c=3Dc):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; url =3D str(url.toString())
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; g.handleUrl(url,c=3Dc,p=3Dc.p)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.anchorClicked.connect(&lt;wbr&gt;anchorClicked)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; html =3D ["""&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;style&amp;gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; .level .level {margin-left: 1.5em}
&lt;br&gt;&amp;nbsp; &amp;nbsp; a {text-decoration: none; font-size: 120%}
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;"""]
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; for nd in c.getSelectedPositions():
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; add_html(html, nd)
&lt;br&gt;
&lt;br&gt;&amp;nbsp; &amp;nbsp; html.append("&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;")=20
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; html =3D \'\\n\'.join(html)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; te.setHtml(html)
&lt;br&gt;&amp;nbsp; &amp;nbsp;=20
&lt;br&gt;&amp;nbsp; &amp;nbsp; return te
&lt;br&gt;
&lt;br&gt;class OverviewPaneProvider:
&lt;br&gt;&amp;nbsp; &amp;nbsp; def __init__(self, c):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.c =3D c
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # Careful: we may be unit testing.
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if hasattr(c, \'free_layout\'):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter =3D c.free_layout.ge=
t_top_&lt;wbr&gt;splitter()
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if splitter:
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter.regist=
er_provider(&lt;wbr&gt;self)
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provides(self):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return[(\'Overview\', \'_add_overview_pane\')]
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provide(self, id_):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if id_ =3D=3D \'_add_overview_pane\':
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; w =3D make_overview(c)
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return w
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_title(self, id_):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if id_ =3D=3D \'_add_overview_pane\':
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return "Leo Outline Overview"
&lt;br&gt;&amp;nbsp; &amp;nbsp; def ns_provider_id(self):
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # used by register_provider() to unregister=
 previously registered
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # providers of the same service
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return "outline overview window"
&lt;br&gt;
&lt;br&gt;OverviewPaneProvider(c)
&lt;br&gt;
&lt;br&gt;--- cut here ---
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_198_11760886.1360170083672--</t>
<t tx="ekr.20130806072439.18528">From: wgw &lt;wgwinder@gmail.com&gt;

------=_Part_65_6159566.1360277477776
Content-Type: text/plain; charset=ISO-8859-1

Thanks Terry for all this work. I will pull the new code tomorrow (if bzr 
will agree without sending me to places I, and perhaps no man has ever been 
before!). 

This looks nifty -- I want it to go in automatically for all the leo files 
I load. Very useful!

Best,

Bill 

On Thursday, February 7, 2013 10:00:40 AM UTC-8, Terry wrote:
&gt;
&gt; On Thu, 7 Feb 2013 08:21:51 -0600 
&gt; Terry Brown &lt;terry_...@yahoo.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; On Wed, 6 Feb 2013 22:28:38 -0800 
&gt; &gt; Matt Wilkie &lt;map...@gmail.com &lt;javascript:&gt;&gt; wrote: 
&gt; ... 
&gt; &gt; &gt; And, more generally, can these 
&gt; hover-over-pane-divider-then-right-click 
&gt; &gt; &gt; actions be made available any other way? Like a drop down menu from a 
&gt; &gt; &gt; button or alt-x command or something.   
&gt; &gt; 
&gt; &gt; What, you mean instead of being completely hidden where no one will 
&gt; &gt; ever find them?  :-)  Most of them (not the Open Window variants of 
&gt; &gt; course) 
&gt;
&gt; But it occurs to me that it might be the open window variants you want, 
&gt; specifically the code to make a button / command to open a window with 
&gt; a particular panel in it.  That would be this: 
&gt;
&gt; if hasattr(c, \'free_layout\'): 
&gt;     splitter = c.free_layout.get_top_splitter() 
&gt;     if splitter: 
&gt;         splitter.open_window(action=\'_add_overview_pane\') 
&gt;
&gt; Cheers -Terry 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_65_6159566.1360277477776
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks Terry for all this work. I will pull the new code tomorrow (if bzr w=
ill agree without sending me to places I, and perhaps no man has ever been =
before!).&amp;nbsp;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This looks nifty -- I want it to go in a=
utomatically for all the leo files I load. Very useful!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div=
&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bill&amp;nbsp;&lt;br&gt;&lt;br&gt;On Thursday, Februar=
y 7, 2013 10:00:40 AM UTC-8, Terry wrote:&lt;blockquote class=3D"gmail_quote" =
style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-l=
eft: 1ex;"&gt;On Thu, 7 Feb 2013 08:21:51 -0600
&lt;br&gt;Terry Brown &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfuscate=
d-mailto=3D"o7FnHaIWfDwJ"&gt;terry_...@yahoo.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;
&lt;br&gt;&amp;gt; On Wed, 6 Feb 2013 22:28:38 -0800
&lt;br&gt;&amp;gt; Matt Wilkie &amp;lt;&lt;a href=3D"javascript:" target=3D"_blank" gdf-obfu=
scated-mailto=3D"o7FnHaIWfDwJ"&gt;map...@gmail.com&lt;/a&gt;&amp;gt; wrote:
&lt;br&gt;...
&lt;br&gt;&amp;gt; &amp;gt; And, more generally, can these hover-over-pane-divider-then-&lt;=
wbr&gt;right-click
&lt;br&gt;&amp;gt; &amp;gt; actions be made available any other way? Like a drop down men=
u from a
&lt;br&gt;&amp;gt; &amp;gt; button or alt-x command or something. &amp;nbsp;
&lt;br&gt;&amp;gt;=20
&lt;br&gt;&amp;gt; What, you mean instead of being completely hidden where no one wil=
l
&lt;br&gt;&amp;gt; ever find them? &amp;nbsp;:-) &amp;nbsp;Most of them (not the Open Window =
variants of
&lt;br&gt;&amp;gt; course)
&lt;br&gt;
&lt;br&gt;But it occurs to me that it might be the open window variants you want,
&lt;br&gt;specifically the code to make a button / command to open a window with
&lt;br&gt;a particular panel in it. &amp;nbsp;That would be this:
&lt;br&gt;
&lt;br&gt;if hasattr(c, \'free_layout\'):
&lt;br&gt;&amp;nbsp; &amp;nbsp; splitter =3D c.free_layout.get_top_&lt;wbr&gt;splitter()
&lt;br&gt;&amp;nbsp; &amp;nbsp; if splitter:
&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; splitter.open_window(action=3D\'_&lt;wbr&gt;add_ov=
erview_pane\')
&lt;br&gt;
&lt;br&gt;Cheers -Terry
&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_65_6159566.1360277477776--</t>
<t tx="ekr.20130806072439.18529">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 22:33:13 -0800
Matt Wilkie &lt;maphew@gmail.com&gt; wrote:

&gt; On Tue, Feb 5, 2013 at 5:14 PM, wgw &lt;wgwinder@gmail.com&gt; wrote:
&gt; 
&gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of
&gt; &gt; seeing one body only and the tree of headlines, I want to display all the
&gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, much
&gt; &gt; like a word processor outline.
&gt;  
&gt; I use *"r-click &gt; Edit in ..."*  for this purpose. It\'s a poor man\'s
&gt; workaround. Something integrated would be much nicer. Just thought I\'d
&gt; mention it for anyone looking for something they might be able to use right
&gt; away.

When I try that it only edits the one node, none of its children.
Which is what I thought it did.

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18530">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 5 Feb 2013 20:00:51 -0800 (PST)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; Thanks! That plugin does both more and less than I want: more, because I=
=20
&gt; get a full and nicely formatted window with editable text boxes; less,=20
&gt; since it doesn\'t write any edited text back to the tree.=20
&gt;=20
&gt; My fumbling tinkering would go towards not editing in the preview=20
&gt; window/pane at all, and just having a keystroke or click scroll the editi=
ng=20
&gt; pane to the right node in Leo. But that would mean that the preview panel=
=20
&gt; would have have to be properly indexed so that from the cursor position i=
n=20
&gt; the panel the plugin could find the proper node back in the Leo panel.=20
&gt;  (Kludgy way: put the node id in the text!)

Yes, I think nb-* is in some ways more of a tech. demonstration.

It wouldn\'t be hard to do something with HTML formatting and links to
display the outline and jump to a node when you click on the display,
I\'ll try and get to it.

Cheers -Terry

&gt; Thanks for the suggestion.
&gt;=20
&gt; Bill=20
&gt;=20
&gt; Le mardi 5 f=E9vrier 2013 18:46:56 UTC-8, Terry a =E9crit :
&gt; &gt;
&gt; &gt; On Tue, 5 Feb 2013 17:14:14 -0800 (PST)=20
&gt; &gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:=20
&gt; &gt;
&gt; &gt; &gt; I would like to see a fuller outline view of Leo trees. So instead of=
=20
&gt; &gt; &gt; seeing one body only and the tree of headlines, I want to display all=
=20
&gt; &gt; the=20
&gt; &gt; &gt; parts of the tree (all bodies and subheadings) as continuous text, mu=
ch=20
&gt; &gt; &gt; like a word processor outline.=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; I can almost do that myself in the preview panel. Here is a  very slo=
ppy=20
&gt; &gt; &gt; "preview-tree" script (good for a laugh for anyone who does much Leo=
=20
&gt; &gt; &gt; programming!).=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; result =3D ["\\n\\n&gt;"+p.h,"\\n"+p.b]=20
&gt; &gt; &gt; for p2 in p.subtree():=20
&gt; &gt; &gt;     result.append("\\n\\n&gt;&gt;"+p2.h + "\\n\\n" )=20
&gt; &gt; &gt;     for i in p2.b.split(\'\\n\'):    =20
&gt; &gt; &gt;         result.append("\\n|  " + i)=20
&gt; &gt; &gt; s =3D \'\'.join(result)=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; g.app.gui.runScrolledMessageDialog(c=3Dc, msg =3D g.u(\'rst:\\n\') + s )=
=20
&gt; &gt; &gt;=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; This needs a total redesign, but it does give an idea of the results =
I=20
&gt; &gt; want=20
&gt; &gt; &gt; to get: the whole tree (not necessarily in rst format).=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; I think I could probably get this to work correctly, but the really=
=20
&gt; &gt; tough=20
&gt; &gt; &gt; part, I think, is being able to click somewhere on the tree preview a=
nd=20
&gt; &gt; go=20
&gt; &gt; &gt; to the pertinent node in the headline/body panels.=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; This looks like a feature that Word has, but that Leo doesn\'t, as far=
 as=20
&gt; &gt; I=20
&gt; &gt; &gt; can tell. Or am I missing something (besides the fact that such thing=
s=20
&gt; &gt; can=20
&gt; &gt; &gt; be done in Leo almost magically!) ?=20
&gt; &gt; &gt;=20
&gt; &gt; &gt; Any suggestions for a full tree preview ?=20
&gt; &gt;
&gt; &gt; I think this has been requested before and Ville did something possibly=
=20
&gt; &gt; using QtQuick or something, a scrolley flicky thing :-)=20
&gt; &gt;
&gt; &gt; Ah yes,=20
&gt; &gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/Zs-5jK=
jPAB0=20
&gt; &gt;
&gt; &gt; ...and... I think I\'m going to have to kill me Leo session after doing=
=20
&gt; &gt; nb-all on a large outline, so be warned - nb-subtree is probably=20
&gt; &gt; smarter.=20
&gt; &gt;
&gt; &gt; Cheers -Terry=20
&gt; &gt;
&gt; &gt; &gt; Bill=20
&gt; &gt; &gt;=20
&gt; &gt;
&gt;=20

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=3Den.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130806072439.18531">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

Hello,

I\'m contemplating adding markdown rendering to viewrendered.  I use 
github daily for personal projects, and both my blog and in-progress 
website redesign use markdown for content.  I think having a preview 
pane that can render markdown would be handy.

Would anyone else be interested in this?  I was going to plug the 
Markdown module (http://packages.python.org/Markdown/) into 
viewrendered.  It shouldn\'t be too difficult, because viewrendered 
already renders rst by converting it to html first, so this would just 
be an additional update method and dictionary binding, I think.

Anyways, if anyone else thinks this would be handy, I would be glad to 
start hacking it together.  Plus, it\'d give me a bit of experience with 
bzr and launchpad, neither of which I\'ve ever used before.

Let me know if you\'re interested, or have any other suggestions.

Thanks!
--&gt;Jake


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18532">From: tfer &lt;tfetherston@aol.com&gt;

------=_Part_117_12470807.1360564128586
Content-Type: text/plain; charset=ISO-8859-1



On Sunday, February 10, 2013 7:06:23 PM UTC-5, Jacob Peck wrote:
&gt;
&gt; On 2/10/2013 6:58 PM, tfer wrote: 
&gt; &gt; I downloaded it to give a try, but to tell the truth the workflow 
&gt; &gt; eludes me.  I think there used to be some stuff on using rst in the 
&gt; &gt; user manual, but there does not seem to be anything there now, was it 
&gt; &gt; lost when rst went from being a plugin to being part of core? 
&gt; No idea, I\'m pretty new to Leo myself. 
&gt;
&gt; To use the markdown feature I added in my branch, I make an \'@file 
&gt; myfile.md\' node with the contents: 
&gt; @color 
&gt; @language md 
&gt; @tabwidth -2 
&gt; @others 
&gt;
&gt; And then I make child @md nodes, containing the markdown that I desire.   
&gt; The @md is a signifier to the viewrendered plugin to render that node as 
&gt; markdown.  To get a live preview, I run the command "vr", and type 
&gt; away... works fine here. 
&gt;
Ah, the @rst outline directive lets all of its subnodes be rendered as if 
they contain rst markup text, no matter how they are named, (even imported 
files, "@files"), without needing to be labeled @rst again.  Following your 
tips I got this to work, but I noticed the following:

1. With a document containing both md and rst, Leo with only the  rst 
renderer will run render the @md nodes when the node is selected, (actually 
any node with text other than pure directives).

2. When the md capable version is loaded and alt-x vr is run, them @md 
headlined nodes are rendered correctly, (mostly), but the rst renderer is 
still active, and will work on any node with non-directive body text. 
 

&gt; &gt; I manged to get Markdown installed, (pip failed, but easy_install 
&gt; &gt; worked).  Trying to use listed alt-x commands does not seem to be 
&gt; &gt; working for me, there is no tab completion for those commands, and if 
&gt; &gt; I enter by typing cracking a return on the mini-buffer appears to do 
&gt; &gt; nothing, not even clear it or change focus. 
&gt; Python 2 or 3?  I tested on Python 2.6 and 2.7. 
&gt;
&gt; Also, I didn\'t add any commands, nor modify any.  I just modified the 
&gt; viewrendered plugin that ships with the current version of Leo... if 
&gt; those commands aren\'t working, you might want to do some debugging with 
&gt; your setup. 
&gt; &gt; additionally @md is not colorized. 
&gt; The colorizer I hacked together just highlights comments.  I really 
&gt; didn\'t know what to do as a keyword, operator, etc.  I\'ll probably hack 
&gt; together a better version some day. 
&gt; &gt; Tom 
&gt; Thanks for giving it a shot!  I\'m sorry it didn\'t work for you. Perhaps 
&gt; someone else has a better idea than me what\'s going on here? 
&gt;
&gt; --&gt;Jake 
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_117_12470807.1360564128586
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;br&gt;&lt;br&gt;On Sunday, February 10, 2013 7:06:23 PM UTC-5, Jacob Peck wrote:&lt;bl=
ockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border=
-left: 1px #ccc solid;padding-left: 1ex;"&gt;On 2/10/2013 6:58 PM, tfer wrote:
&lt;br&gt;&amp;gt; I downloaded it to give a try, but to tell the truth the workflow=
=20
&lt;br&gt;&amp;gt; eludes me. &amp;nbsp;I think there used to be some stuff on using rst =
in the=20
&lt;br&gt;&amp;gt; user manual, but there does not seem to be anything there now, was=
 it=20
&lt;br&gt;&amp;gt; lost when rst went from being a plugin to being part of core?
&lt;br&gt;No idea, I\'m pretty new to Leo myself.
&lt;br&gt;
&lt;br&gt;To use the markdown feature I added in my branch, I make an \'@file=20
&lt;br&gt;&lt;a href=3D"http://myfile.md" target=3D"_blank"&gt;myfile.md&lt;/a&gt;\' node with=
 the contents:
&lt;br&gt;@color
&lt;br&gt;@language md
&lt;br&gt;@tabwidth -2
&lt;br&gt;@others
&lt;br&gt;
&lt;br&gt;And then I make child @md nodes, containing the markdown that I desire.=
 &amp;nbsp;
&lt;br&gt;The @md is a signifier to the viewrendered plugin to render that node a=
s=20
&lt;br&gt;markdown. &amp;nbsp;To get a live preview, I run the command "vr", and type=
=20
&lt;br&gt;away... works fine here.
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;Ah, the @rst outline directive lets all of its subnod=
es be rendered as if they contain rst markup text, no matter how they are n=
amed, (even imported files, "@files"), without needing to be labeled @rst a=
gain. &amp;nbsp;Following your tips I got this to work, but I noticed the follo=
wing:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. With a document containing both md and rs=
t, Leo with only the &amp;nbsp;rst renderer will run render the @md nodes when =
the node is selected, (actually any node with text other than pure directiv=
es).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. When the md capable version is loaded and =
alt-x vr is run, them @md headlined nodes are rendered correctly, (mostly),=
 but the rst renderer is still active, and will work on any node with non-d=
irective body text.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;blockquote class=3D"gmail_=
quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;pa=
dding-left: 1ex;"&gt;&amp;gt; I manged to get Markdown installed, (pip failed, but=
 easy_install=20
&lt;br&gt;&amp;gt; worked). &amp;nbsp;Trying to use listed alt-x commands does not seem t=
o be=20
&lt;br&gt;&amp;gt; working for me, there is no tab completion for those commands, and=
 if=20
&lt;br&gt;&amp;gt; I enter by typing cracking a return on the mini-buffer appears to =
do=20
&lt;br&gt;&amp;gt; nothing, not even clear it or change focus.
&lt;br&gt;Python 2 or 3? &amp;nbsp;I tested on Python 2.6 and 2.7.
&lt;br&gt;
&lt;br&gt;Also, I didn\'t add any commands, nor modify any. &amp;nbsp;I just modified =
the=20
&lt;br&gt;viewrendered plugin that ships with the current version of Leo... if=20
&lt;br&gt;those commands aren\'t working, you might want to do some debugging with=
=20
&lt;br&gt;your setup.
&lt;br&gt;&amp;gt; additionally @md is not colorized.
&lt;br&gt;The colorizer I hacked together just highlights comments. &amp;nbsp;I reall=
y=20
&lt;br&gt;didn\'t know what to do as a keyword, operator, etc. &amp;nbsp;I\'ll probably=
 hack=20
&lt;br&gt;together a better version some day.
&lt;br&gt;&amp;gt; Tom
&lt;br&gt;Thanks for giving it a shot! &amp;nbsp;I\'m sorry it didn\'t work for you. Pe=
rhaps=20
&lt;br&gt;someone else has a better idea than me what\'s going on here?
&lt;br&gt;
&lt;br&gt;--&amp;gt;Jake
&lt;br&gt;
&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_117_12470807.1360564128586--</t>
<t tx="ekr.20130806072439.18533">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 2/11/2013 1:28 AM, tfer wrote:
&gt; Ah, the @rst outline directive lets all of its subnodes be rendered as 
&gt; if they contain rst markup text, no matter how they are named, (even 
&gt; imported files, "@files"), without needing to be labeled @rst again. 
&gt;  Following your tips I got this to work, but I noticed the following:
&gt;
&gt; 1. With a document containing both md and rst, Leo with only the  rst 
&gt; renderer will run render the @md nodes when the node is selected, 
&gt; (actually any node with text other than pure directives).
This is because there\'s a guard to make sure the user has the \'markdown\' 
module installed.  If, for example, you had \'markdown\' but not 
\'docutils\' installed, you\'d be able to render the @md nodes!

You can change this default of rst rendering by changing `@string 
view-rendered-default-kind = rst` by replacing `rst` with `md`, `html`, 
or I would imagine `plain` would work to not have a default renderer.  
Put this setting in your myLeoSettings.leo file.
&gt; 2. When the md capable version is loaded and alt-x vr is run, them @md 
&gt; headlined nodes are rendered correctly, (mostly), but the rst renderer 
&gt; is still active, and will work on any node with non-directive body text.
Could you possibly provide an example where it doesn\'t render correctly?

As mentioned above, the default renderer for all nodes is rst.

Also, I\'m going to have to tweak this a bit.  There are some settings 
that should be exposed via myLeoSettings.leo that currently arent.  I\'ll 
be working on this.

I just pushed a new rev (5606) to my branch that has a fancier 
colorizer.  You might wish to check that out.

Thanks!
--&gt;Jake


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18534">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 2/7/2013 11:13 AM, Terry Brown wrote:
&gt; Purely out of curiosity, can github use reStructuredText as well as 
&gt; MD? Cheers -Terry 
As far as I can tell, if you upload a README.rst instead of a README.md, 
it\'ll work.

(source: https://github.com/github/markup)

--&gt;Jake


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18535">From: tfer &lt;tfetherston@aol.com&gt;

------=_Part_51_33528898.1360600598380
Content-Type: text/plain; charset=ISO-8859-1



On Monday, February 11, 2013 9:58:17 AM UTC-5, Jacob Peck wrote:
&gt;
&gt; On 2/11/2013 1:28 AM, tfer wrote: 
&gt; &gt; Ah, the @rst outline directive lets all of its subnodes be rendered as 
&gt; &gt; if they contain rst markup text, no matter how they are named, (even 
&gt; &gt; imported files, "@files"), without needing to be labeled @rst again. 
&gt; &gt;  Following your tips I got this to work, but I noticed the following: 
&gt; &gt; 
&gt; &gt; 1. With a document containing both md and rst, Leo with only the  rst 
&gt; &gt; renderer will run render the @md nodes when the node is selected, 
&gt; &gt; (actually any node with text other than pure directives). 
&gt; This is because there\'s a guard to make sure the user has the \'markdown\' 
&gt; module installed.  If, for example, you had \'markdown\' but not 
&gt; \'docutils\' installed, you\'d be able to render the @md nodes! 
&gt;
&gt; You can change this default of rst rendering by changing `@string 
&gt; view-rendered-default-kind = rst` by replacing `rst` with `md`, `html`, 
&gt; or I would imagine `plain` would work to not have a default renderer.   
&gt; Put this setting in your myLeoSettings.leo file. 
&gt;
I\'ll try that.
 

&gt; &gt; 2. When the md capable version is loaded and alt-x vr is run, them @md 
&gt; &gt; headlined nodes are rendered correctly, (mostly), but the rst renderer 
&gt; &gt; is still active, and will work on any node with non-directive body text. 
&gt; Could you possibly provide an example where it doesn\'t render correctly? 
&gt;
What I did was to download the text of some markdown cheatsheets that were 
written in markdown.  I look them up and shoot you some links later.

I\'ve also run into some stuff that throws and error, (in the converter 
stuff, not your stuff if I\'m recalling correctly).  Once that error is 
thrown, you have to exit leo and restart in order to do any more 
converting/viewing.

&gt;
&gt; As mentioned above, the default renderer for all nodes is rst. 
&gt;
&gt; Also, I\'m going to have to tweak this a bit.  There are some settings 
&gt; that should be exposed via myLeoSettings.leo that currently arent.  I\'ll 
&gt; be working on this. 
&gt;
&gt; I just pushed a new rev (5606) to my branch that has a fancier 
&gt; colorizer.  You might wish to check that out. 
&gt;
I\'ll grab it.

Not really having worked with any of the renderers before, I\'m not sure of 
their full usage so I can\'t compare it to the built in rst stuff.  Working 
with it so far it looks like once a "view-render-pane" is open any selected 
node that has some non-directive text will be run through the rst2html 
converter and sent to the vr-pane.  If the node has an @md starting its 
headline the md2html converter is run and output is sent to the vr-pane. 
 Any node without such text does not trigger either converter and the 
vr-pane just displays the last successfully conertered node, (probably 
should be blanked or something to indicate that the currently selected node 
is not the one in the vr-pane).

At the moment, all the markdown text I\'ve got is from files slurped off the 
net and they are not strung out  in a subtree and then collected via 
directive/sections into a document, but that is where I want to go with 
this as the advantages of outlining to created your documents are numerous. 
 In that case I\'m guessing that there is no current method of seeing the 
document rendered as a whole, just the individual nodes?  I guess some of 
the stuff in the current "pre-view subtree" discussion would be useful.

Not a lot of time to look at this today, I\'m off to Detroit this afternoon, 
I\'ll be able to play with this some more later this week.

&gt;
&gt; Thanks! 
&gt; --&gt;Jake 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_51_33528898.1360600598380
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;br&gt;&lt;br&gt;On Monday, February 11, 2013 9:58:17 AM UTC-5, Jacob Peck wrote:&lt;bl=
ockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border=
-left: 1px #ccc solid;padding-left: 1ex;"&gt;On 2/11/2013 1:28 AM, tfer wrote:
&lt;br&gt;&amp;gt; Ah, the @rst outline directive lets all of its subnodes be rendere=
d as=20
&lt;br&gt;&amp;gt; if they contain rst markup text, no matter how they are named, (ev=
en=20
&lt;br&gt;&amp;gt; imported files, "@files"), without needing to be labeled @rst agai=
n.=20
&lt;br&gt;&amp;gt; &amp;nbsp;Following your tips I got this to work, but I noticed the fo=
llowing:
&lt;br&gt;&amp;gt;
&lt;br&gt;&amp;gt; 1. With a document containing both md and rst, Leo with only the &amp;=
nbsp;rst=20
&lt;br&gt;&amp;gt; renderer will run render the @md nodes when the node is selected,=
=20
&lt;br&gt;&amp;gt; (actually any node with text other than pure directives).
&lt;br&gt;This is because there\'s a guard to make sure the user has the \'markdown=
\'=20
&lt;br&gt;module installed. &amp;nbsp;If, for example, you had \'markdown\' but not=20
&lt;br&gt;\'docutils\' installed, you\'d be able to render the @md nodes!
&lt;br&gt;
&lt;br&gt;You can change this default of rst rendering by changing `@string=20
&lt;br&gt;view-rendered-default-kind =3D rst` by replacing `rst` with `md`, `html=
`,=20
&lt;br&gt;or I would imagine `plain` would work to not have a default renderer. &amp;=
nbsp;
&lt;br&gt;Put this setting in your myLeoSettings.leo file.
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;I\'ll try that.&lt;/div&gt;&lt;div&gt;&amp;nbsp;&lt;/div&gt;&lt;blockquote clas=
s=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-left: 1px #c=
cc solid;padding-left: 1ex;"&gt;&amp;gt; 2. When the md capable version is loaded =
and alt-x vr is run, them @md=20
&lt;br&gt;&amp;gt; headlined nodes are rendered correctly, (mostly), but the rst rend=
erer=20
&lt;br&gt;&amp;gt; is still active, and will work on any node with non-directive body=
 text.
&lt;br&gt;Could you possibly provide an example where it doesn\'t render correctly=
?
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;What I did was to download the text of some markdown =
cheatsheets that were written in markdown. &amp;nbsp;I look them up and shoot y=
ou some links later.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I\'ve also run into some stuff=
 that throws and error, (in the converter stuff, not your stuff if I\'m reca=
lling correctly). &amp;nbsp;Once that error is thrown, you have to exit leo and=
 restart&amp;nbsp;in order&amp;nbsp;to do any more converting/viewing.&lt;/div&gt;&lt;blockq=
uote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-lef=
t: 1px #ccc solid;padding-left: 1ex;"&gt;
&lt;br&gt;As mentioned above, the default renderer for all nodes is rst.
&lt;br&gt;
&lt;br&gt;Also, I\'m going to have to tweak this a bit. &amp;nbsp;There are some setti=
ngs=20
&lt;br&gt;that should be exposed via myLeoSettings.leo that currently arent. &amp;nbs=
p;I\'ll=20
&lt;br&gt;be working on this.
&lt;br&gt;
&lt;br&gt;I just pushed a new rev (5606) to my branch that has a fancier=20
&lt;br&gt;colorizer. &amp;nbsp;You might wish to check that out.
&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;I\'ll grab it.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Not really hav=
ing worked with any of the renderers before, I\'m not sure of their full usa=
ge so I can\'t compare it to the built in rst stuff. &amp;nbsp;Working with it s=
o far it looks like once a "view-render-pane" is open any selected node tha=
t has some non-directive text will be run through the rst2html converter an=
d sent to the vr-pane. &amp;nbsp;If the node has an @md starting its headline t=
he md2html converter is run and output is sent to the vr-pane. &amp;nbsp;Any no=
de without such text does not trigger either converter and the vr-pane just=
 displays the last successfully conertered node, (probably should be blanke=
d or something to indicate that the currently selected node is not the one =
in the vr-pane).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;At the moment, all the markdown t=
ext I\'ve got is from files slurped off the net and they are not strung out =
&amp;nbsp;in a subtree and then collected via directive/sections into a documen=
t, but that is where I want to go with this as the advantages of outlining =
to created your documents are numerous. &amp;nbsp;In that case I\'m guessing tha=
t there is no current method of seeing the document rendered as a whole, ju=
st the individual nodes? &amp;nbsp;I guess some of the stuff in the current "pr=
e-view subtree" discussion would be useful.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Not a =
lot of time to look at this today, I\'m off to Detroit this afternoon, I\'ll =
be able to play with this&amp;nbsp;some more&amp;nbsp;later this week.&lt;/div&gt;&lt;blockq=
uote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0.8ex;border-lef=
t: 1px #ccc solid;padding-left: 1ex;"&gt;
&lt;br&gt;Thanks!
&lt;br&gt;--&amp;gt;Jake
&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_51_33528898.1360600598380--</t>
<t tx="ekr.20130806072439.18536">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 07 Feb 2013 10:55:42 -0500
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; I\'m contemplating adding markdown rendering to viewrendered.  I use 
&gt; github daily for personal projects

Purely out of curiosity, can github use reStructuredText as well as MD?

Cheers -Terry


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18537">From: gatesphere &lt;gatesphere@gmail.com&gt;

On 2/10/2013 6:58 PM, tfer wrote:
&gt; I downloaded it to give a try, but to tell the truth the workflow 
&gt; eludes me.  I think there used to be some stuff on using rst in the 
&gt; user manual, but there does not seem to be anything there now, was it 
&gt; lost when rst went from being a plugin to being part of core?
No idea, I\'m pretty new to Leo myself.

To use the markdown feature I added in my branch, I make an \'@file 
myfile.md\' node with the contents:
@color
@language md
@tabwidth -2
@others

And then I make child @md nodes, containing the markdown that I desire.  
The @md is a signifier to the viewrendered plugin to render that node as 
markdown.  To get a live preview, I run the command "vr", and type 
away... works fine here.
&gt; I manged to get Markdown installed, (pip failed, but easy_install 
&gt; worked).  Trying to use listed alt-x commands does not seem to be 
&gt; working for me, there is no tab completion for those commands, and if 
&gt; I enter by typing cracking a return on the mini-buffer appears to do 
&gt; nothing, not even clear it or change focus.
Python 2 or 3?  I tested on Python 2.6 and 2.7.

Also, I didn\'t add any commands, nor modify any.  I just modified the 
viewrendered plugin that ships with the current version of Leo... if 
those commands aren\'t working, you might want to do some debugging with 
your setup.
&gt; additionally @md is not colorized.
The colorizer I hacked together just highlights comments.  I really 
didn\'t know what to do as a keyword, operator, etc.  I\'ll probably hack 
together a better version some day.
&gt; Tom
Thanks for giving it a shot!  I\'m sorry it didn\'t work for you. Perhaps 
someone else has a better idea than me what\'s going on here?

--&gt;Jake


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18538">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c38d0e77f5fc04dbad8639
Content-Type: text/plain; charset=ISO-8859-1

On Thu, Feb 7, 2013 at 1:45 PM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt;  I\'ve coded it up.
&gt;
&gt; While I was at it, I added colorizer and comment support for .md files as
&gt; best as I understood.
&gt;
&gt; If someone wants to examine my code for possible inclusion in trunk2, it\'s
&gt; on launchpad:
&gt;
&gt; lp:~gatesphere/**leo-editor/**markdown_**support&lt;https://code.launchpad.net/%7Egatesphere/leo-editor/markdown_support&gt;
&gt;
&gt;
Hi Jake.  What\'s the present status of this code?

Edward

--001a11c38d0e77f5fc04dbad8639
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Thu, Feb 7, 2013 at 1:45 PM, Jacob Peck &lt;span dir=3D"lt=
r"&gt;&amp;lt;&lt;a href=3D"mailto:gatesphere@gmail.com" target=3D"_blank"&gt;gatesphere=
@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;
 =20
   =20
 =20
  &lt;div bgcolor=3D"#FFFFFF" text=3D"#000000"&gt;
    I&amp;#39;ve coded it up.&lt;br&gt;
    &lt;br&gt;
    While I was at it, I added colorizer and comment support for .md
    files as best as I understood.&lt;br&gt;
    &lt;br&gt;
    If someone wants to examine my code for possible inclusion in
    trunk2, it&amp;#39;s on launchpad:&lt;br&gt;
    &lt;br&gt;
    &lt;a href=3D"https://code.launchpad.net/%7Egatesphere/leo-editor/markdown=
_support" target=3D"_blank"&gt;lp:~gatesphere/&lt;u&gt;&lt;/u&gt;leo-editor/&lt;u&gt;&lt;/u&gt;markdow=
n_&lt;u&gt;&lt;/u&gt;support&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi Jake.=A0 What&amp;#39;s the p=
resent status of this code? &lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/di=
v&gt;

--001a11c38d0e77f5fc04dbad8639--</t>
<t tx="ekr.20130806072439.18539">From: tfer &lt;tfetherston@aol.com&gt;

------=_Part_1575_9584356.1360540724303
Content-Type: text/plain; charset=ISO-8859-1

I downloaded it to give a try, but to tell the truth the workflow eludes 
me.  I think there used to be some stuff on using rst in the user manual, 
but there does not seem to be anything there now, was it lost when rst went 
from being a plugin to being part of core?

I manged to get Markdown installed, (pip failed, but easy_install worked). 
 Trying to use listed alt-x commands does not seem to be working for me, 
there is no tab completion for those commands, and if I enter by typing 
cracking a return on the mini-buffer appears to do nothing, not even clear 
it or change focus.

additionally @md is not colorized.

Tom

On Thursday, February 7, 2013 2:45:01 PM UTC-5, Jacob Peck wrote:
&gt;
&gt;  I\'ve coded it up.
&gt;
&gt; While I was at it, I added colorizer and comment support for .md files as 
&gt; best as I understood.
&gt;
&gt; If someone wants to examine my code for possible inclusion in trunk2, it\'s 
&gt; on launchpad:
&gt;
&gt; lp:~gatesphere/leo-editor/markdown_support&lt;https://code.launchpad.net/%7Egatesphere/leo-editor/markdown_support&gt;
&gt;
&gt; Thanks!
&gt; --&gt;Jake
&gt;  


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_1575_9584356.1360540724303
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I downloaded it to give a try, but to tell the truth the workflow eludes me=
. &amp;nbsp;I think there used to be some stuff on using rst in the user manual=
, but there does not seem to be anything there now, was it lost when rst we=
nt from being a plugin to being part of core?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I manged t=
o get Markdown installed, (pip failed, but easy_install worked). &amp;nbsp;Tryi=
ng to use listed alt-x commands does not seem to be working for me, there i=
s no tab completion for those commands, and if I enter by typing cracking a=
 return on the mini-buffer appears to do nothing, not even clear it or chan=
ge focus.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;additionally @md is not colorized.&lt;/div&gt;=
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tom&lt;br&gt;&lt;br&gt;On Thursday, February 7, 2013 2:45:01 PM UTC=
-5, Jacob Peck wrote:&lt;blockquote class=3D"gmail_quote" style=3D"margin: 0;m=
argin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;
 =20
   =20
 =20
  &lt;div bgcolor=3D"#FFFFFF" text=3D"#000000"&gt;
    I\'ve coded it up.&lt;br&gt;
    &lt;br&gt;
    While I was at it, I added colorizer and comment support for .md
    files as best as I understood.&lt;br&gt;
    &lt;br&gt;
    If someone wants to examine my code for possible inclusion in
    trunk2, it\'s on launchpad:&lt;br&gt;
    &lt;br&gt;
    &lt;a href=3D"https://code.launchpad.net/%7Egatesphere/leo-editor/markdown=
_support" target=3D"_blank"&gt;lp:~gatesphere/leo-editor/&lt;wbr&gt;markdown_support=
&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
    Thanks!&lt;br&gt;
    --&amp;gt;Jake&lt;br&gt;
  &lt;/div&gt;

&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_1575_9584356.1360540724303--</t>
<t tx="ekr.20130806072439.18540">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

This is a multi-part message in MIME format.
--------------050006000207080103090109
Content-Type: text/plain; charset=ISO-8859-1; format=flowed

I\'ve coded it up.

While I was at it, I added colorizer and comment support for .md files 
as best as I understood.

If someone wants to examine my code for possible inclusion in trunk2, 
it\'s on launchpad:

lp:~gatesphere/leo-editor/markdown_support 
&lt;https://code.launchpad.net/%7Egatesphere/leo-editor/markdown_support&gt;

Thanks!
--&gt;Jake


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--------------050006000207080103090109
Content-Type: text/html; charset=ISO-8859-1

&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    I\'ve coded it up.&lt;br&gt;
    &lt;br&gt;
    While I was at it, I added colorizer and comment support for .md
    files as best as I understood.&lt;br&gt;
    &lt;br&gt;
    If someone wants to examine my code for possible inclusion in
    trunk2, it\'s on launchpad:&lt;br&gt;
    &lt;br&gt;
    &lt;a class="sprite branch"
href="https://code.launchpad.net/%7Egatesphere/leo-editor/markdown_support"
      style="background-image:
      url(https://code.launchpad.net/+icing/rev16482/inline-sprites-1.png);
      color: rgb(0, 51, 170); text-decoration: underline; padding: 0px
      0px 6px 18px; line-height: 18px; font-family: Ubuntu, \'Bitstream
      Vera Sans\', \'DejaVu Sans\', Tahoma, sans-serif; font-size: 12px;
      font-style: normal; font-variant: normal; font-weight: normal;
      letter-spacing: normal; orphans: auto; text-align: left;
      text-indent: 0px; text-transform: none; white-space: normal;
      widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto;
      -webkit-text-stroke-width: 0px; background-color: rgb(255, 255,
      255); background-position: 0px -2052px; background-repeat:
      no-repeat no-repeat;"&gt;lp:~gatesphere/&lt;wbr&gt;leo-editor/&lt;wbr&gt;markdown_&lt;wbr&gt;support&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
    Thanks!&lt;br&gt;
    --&amp;gt;Jake&lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href="http://groups.google.com/group/leo-editor?hl=en"&gt;http://groups.google.com/group/leo-editor?hl=en&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--------------050006000207080103090109--</t>
<t tx="ekr.20130806072439.18541">From: Alia K &lt;alia_khouri@yahoo.com&gt;

Fernando Perez of IPython fame just announced recently that IPython
trunk has the cell magic functionality that was discussed earlier
[http://groups.google.com/group/leo-editor/browse_thread/thread/
7d910a68072dda1/b14e84fc3cfddbf6?lnk=gst&amp;q=ipython#b14e84fc3cfddbf6].
As this could work very nicely with leo as an ipython editor, I will
include his text verbatim here:

&lt;snip&gt;

Hi folks,


I\'m excited to report that we now have cell magics in IPython... PR
1732 [1] has just been merged [2], which implements the design
discussed in IPEP 1 [3]. This is probably one of the largest PRs we\'ve
had so far, with over 100 commits, over 100 comments and a diff that\'s
almost 11000 lines long (a lot of it moving code around, obviously
it\'s not all new code).  But it brings two very important thigns:

1) a refactor of the magic system to finally remove the old mixin
class we\'d had since the very first days of IPython in 2001.  This is
a cleanup I\'ve been wanting to do for over 10 years!  The new setup
makes the magic system have  a very clean api, that is easy to use
both for the implementation of core features and for users to create
their own magics.

2) the new concept of cell magics: these are magics that get not only
the line they\'re on, but the entire cell body as well.  And while
these are most naturally used in the notebook, as you would expect
we\'ve built them at the core of IPython, so you can use them with all
the clients (terminal, qt console, notebook).  For example, this is a
Cython magic that Brian just prototyped out (we\'ll have a production
version of it soon included).  Note that this was copied *from a
regular text terminal*, not from the notebook:

In [3]: from IPython.core.magic import register_line_cell_magic

In [4]: @register_line_cell_magic
   ...: def cython(line, cell):
   ...:     """Compile and import a cell as a .pyx file."""
   ...:     import sys
   ...:     from importlib import import_module
   ...:     module = line.strip()
   ...:     fname = module + \'.pyx\'
   ...:     with open(fname,\'w\') as f:
   ...:         f.write(cell)
   ...:     if \'pyximport\' not in sys.modules:
   ...:         import pyximport
   ...:         pyximport.install(reload_support=True)
   ...:     globals()[module] = import_module(module)
   ...:

In [5]: %%cython bam
   ...: def f(x):
   ...:     return 2.0*x
   ...:

In [6]: bam.f(10)
Out[6]: 20.0

In a similar spirit, Jonathan Taylor recently created one to call R
transparently in the notebook:

https://github.com/jonathan-taylor/Rmagic

This one hasn\'t been fully updated to the final API, but the core code
is there and now it should be a trivial matter to update it.


I want to thank everyone who pitched in with ideas during the
discussion and review period, and I hope you\'ll all enjoy this and
come up with great ways to use the system.  For now, you can see how
the system works by playing with %%timeit and %%prun, the only two
builtins that I extended to work also as cell magics.

For more details, see the documentation where we\'ve added also a long
new section with details and examples of how to create your own [4].

Cheers,

f

[1] https://github.com/ipython/ipython/pull/1732
[2] https://github.com/ipython/ipython/commit/61eb2ffeebb91a94fe9befe2c30e7839781ddc52
[2] https://github.com/ipython/ipython/issues/1611
[3] http://ipython.org/ipython-doc/dev/interactive/reference.html#magic-command-system

&lt;/snip&gt;

Exciting days indeed!

AK



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18542">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I assume all *nix shell users use the screen shell multiplexer, 
and hopefully *nix shell users who use Leo know about the leoscreen
plugin which passes text back and forth between Leo and the shell
(provided you\'re running screen), which is very handy for build scripts
and SQL hacking etc. etc.

Anyway, if you\'re in that sliver on the Venn diagram :-) there\'s a new
command leoscreen-jump-to-error which scans the output in the shell for
the offending line in the last python traceback, handy if you\'re coding
python in Leo and running/debugging in the shell.

leoscreen-jump-to-error
    Jump to the python error reported in the shell window, if the
    file\'s loaded in the current Leo session. Just looks for a line:

        File "somefile.py", line NNN, in xxx

    and looks for a node starting with "@" and ending with "somefile.py",
    then jumps to line NNN in that file.

Cheers -Terry



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18543">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--90e6ba614ef27ad2aa04da5805d6
Content-Type: text/plain; charset=ISO-8859-1

I\'m doing some research now, that requires storing inputs in json, I use
those inputs to calculate some outputs and store them in .json files.

I added a few directives to valuespace.py plugin to bring native json data
support.

@vsi foo.json

reads in file foo.json, and stores the parsed data structure to vs /
ipython variable "foo"

@vso bar.json

serializes content of variable "bar" to json file.

@vsi gets executed during pass 1 of vs-update, @vso gets executed in phase
2.

Body text gets assigned with json content in both cases.


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--90e6ba614ef27ad2aa04da5805d6
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;I&amp;#39;m doing some research now, that requires storing inp=
uts in json, I use those inputs to calculate some outputs and store them in=
 .json files.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;I added a few directives to valuespa=
ce.py plugin to bring native json data support.=A0&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;@vsi foo.json&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;di=
v style&gt;reads in file foo.json, and stores the parsed data structure to vs =
/ ipython variable &amp;quot;foo&amp;quot;&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;
@vso bar.json&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;serializes content of va=
riable &amp;quot;bar&amp;quot; to json file.&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;@=
vsi gets executed during pass 1 of vs-update, @vso gets executed in phase 2=
.&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Body text gets assigned with json content i=
n both cases.&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--90e6ba614ef27ad2aa04da5805d6--</t>
<t tx="ekr.20130806072439.18544">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--047d7b417ed137447904da7cc07e
Content-Type: text/plain; charset=ISO-8859-1

On Mon, Apr 15, 2013 at 9:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; For now, the best way to study it is valuespage_example.py in contrib
&gt; branch.
&gt;
&gt; I\'m being very succesful in using it + new ipython support as "ipython
&gt; notebook" workalike.
&gt;
&gt; Ipython notebook is better for quick experiments, but I\'m doing long term
&gt; (multi-week) research, where Leo + IPython + valuespace is doing a great
&gt; job so far.
&gt;

That\'s great news.  Imo, this is a truly important path for Leo to take.
Have you reported your experiences to the IPython people?

Edward

--047d7b417ed137447904da7cc07e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;On Mon, Apr 15, 2013 at 9:2=
6 AM, Ville M. Vainio &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmai=
l.com" target=3D"_blank"&gt;vivainio@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div c=
lass=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;For now, the best way to st=
udy it is valuespage_example.py in contrib branch.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&amp;#39=
;m being very succesful in using it + new ipython support as &amp;quot;ipython =
notebook&amp;quot; workalike.&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ipython notebook is better for quick experiments, but I=
&amp;#39;m doing long term (multi-week) research, where Leo + IPython + valuesp=
ace is doing a great job so far.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;div&gt;That&amp;#39;s great news.=A0 Imo, this is a truly important path for Leo =
to take.=A0 Have you reported your experiences to the IPython people?&lt;br&gt;&lt;b=
r&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--047d7b417ed137447904da7cc07e--</t>
<t tx="ekr.20130806072439.18545">From: Kent Tenney &lt;ktenney@gmail.com&gt;

my mouth is watering ...

I just hope the install / setup is as idiot-proof as possible,
This happens to me too often:

- I get the occasional hour to do some coding
- I decide to try the latest-greatest Leo feature
- I spend the hour futzing with settings

Next time I get an hour to code, I use Gvim ...

Not meaning to complain, just my story.

Thanks,
Kent

On Tue, Apr 16, 2013 at 11:20 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; On Mon, Apr 15, 2013 at 9:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; For now, the best way to study it is valuespage_example.py in contrib
&gt;&gt; branch.
&gt;&gt;
&gt;&gt; I\'m being very succesful in using it + new ipython support as "ipython
&gt;&gt; notebook" workalike.
&gt;&gt;
&gt;&gt; Ipython notebook is better for quick experiments, but I\'m doing long term
&gt;&gt; (multi-week) research, where Leo + IPython + valuespace is doing a great job
&gt;&gt; so far.
&gt;
&gt;
&gt; That\'s great news.  Imo, this is a truly important path for Leo to take.
&gt; Have you reported your experiences to the IPython people?
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18546">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--047d7b6248c48216ec04da66dff5
Content-Type: text/plain; charset=ISO-8859-1

On Sun, Apr 14, 2013 at 3:31 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt;
&gt; I added a few directives to valuespace.py plugin to bring native json data
&gt; support.
&gt;

Thanks for this work.  The valuespace plugin is one of the plugins for
which I\'d like to create a screencast-style tutorial script.

Edward

--047d7b6248c48216ec04da66dff5
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Sun, Apr 14, 2013 at 3:31 PM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;&lt;br&gt;&lt;div&gt;I added a few dire=
ctives to valuespace.py plugin to bring native json data support.=A0&lt;/div&gt;&lt;=
/div&gt;
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for this work.=A0 The valuespace pl=
ugin is one of the plugins for which I&amp;#39;d like to create a screencast-st=
yle tutorial script. &lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--047d7b6248c48216ec04da66dff5--</t>
<t tx="ekr.20130806072439.18547">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--047d7b343be018073604da7ef565
Content-Type: text/plain; charset=ISO-8859-1

&gt; Next time I get an hour to code, I use Gvim ...
&gt; Not meaning to complain, just my story.

mine too I\'m afraid.

...but not just with Leo. It happens to me all over the place. There\'s just
too damn many cool new things out there. If people would just stop being so
damn creative for a year or two I might be able to catch up. a little. :-/

-matt


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--047d7b343be018073604da7ef565
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&amp;gt; Next time I get an hour to code, I use=
 Gvim ...&lt;br&gt;&amp;gt; Not meaning to complain, just my story.&lt;br&gt;&lt;br&gt;&lt;/div&gt;mine=
 too I&amp;#39;m afraid.&lt;br&gt;&lt;/div&gt;&lt;br&gt;...but not just with Leo. It happens to m=
e all over the place. There&amp;#39;s just too damn many cool new things out th=
ere. If people would just stop being so damn creative for a year or two I m=
ight be able to catch up. a little. :-/ &lt;br&gt;

&lt;/div&gt;&lt;br&gt;-matt&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;&lt;/div=
&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--047d7b343be018073604da7ef565--</t>
<t tx="ekr.20130806072439.18548">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--089e013d08d428758304da7f0e0f
Content-Type: text/plain; charset=ISO-8859-1

I haven\'t advertised it yet. Maybe a blog post about leo + ipython
integration in general could be in order (that I could point to).


On Tue, Apr 16, 2013 at 7:20 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt;
&gt; On Mon, Apr 15, 2013 at 9:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:
&gt;
&gt;&gt; For now, the best way to study it is valuespage_example.py in contrib
&gt;&gt; branch.
&gt;&gt;
&gt;&gt; I\'m being very succesful in using it + new ipython support as "ipython
&gt;&gt; notebook" workalike.
&gt;&gt;
&gt;&gt; Ipython notebook is better for quick experiments, but I\'m doing long term
&gt;&gt; (multi-week) research, where Leo + IPython + valuespace is doing a great
&gt;&gt; job so far.
&gt;&gt;
&gt;
&gt; That\'s great news.  Imo, this is a truly important path for Leo to take.
&gt; Have you reported your experiences to the IPython people?
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--089e013d08d428758304da7f0e0f
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;I haven&amp;#39;t advertised it yet. Maybe a blog post about l=
eo + ipython integration in general could be in order (that I could point t=
o).&lt;/div&gt;&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On T=
ue, Apr 16, 2013 at 7:20 PM, Edward K. Ream &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=
=3D"mailto:edreamleo@gmail.com" target=3D"_blank"&gt;edreamleo@gmail.com&lt;/a&gt;&amp;g=
t;&lt;/span&gt; wrote:&lt;br&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;&lt;br&gt;&lt;div class=3D"gmail_ext=
ra"&gt;&lt;div class=3D"im"&gt;On Mon, Apr 15, 2013 at 9:26 AM, Ville M. Vainio &lt;spa=
n dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;v=
ivainio@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;
&lt;/div&gt;&lt;div class=3D"gmail_quote"&gt;&lt;div class=3D"im"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;For now, the best way to st=
udy it is valuespage_example.py in contrib branch.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&amp;#39=
;m being very succesful in using it + new ipython support as &amp;quot;ipython =
notebook&amp;quot; workalike.&lt;/div&gt;


&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ipython notebook is better for quick experiments, but I=
&amp;#39;m doing long term (multi-week) research, where Leo + IPython + valuesp=
ace is doing a great job so far.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;

&lt;/div&gt;&lt;div&gt;That&amp;#39;s great news.=A0 Imo, this is a truly important path fo=
r Leo to take.=A0 Have you reported your experiences to the IPython people?=
&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;&lt;br&gt;&lt;br&gt;Edward&lt;/font&gt;&lt;/span&gt;=
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D"HOEnZb"&gt;&lt;div class=3D"h5"&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com" target=
=3D"_blank"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
=A0&lt;br&gt;
=A0&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--089e013d08d428758304da7f0e0f--</t>
<t tx="ekr.20130806072439.18549">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--f46d0447f38251451d04da580c4e
Content-Type: text/plain; charset=ISO-8859-1

Some further notes:

- yes, the .json extension is explicitly special cased in the code. The
idea is that e.g. @vso foo.csv would serialize the contents of variable
"foo" as csv, .yml would use yaml etc.

- vsi and vso stand for value space input and value space output,
respectively



On Sun, Apr 14, 2013 at 11:31 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; I\'m doing some research now, that requires storing inputs in json, I use
&gt; those inputs to calculate some outputs and store them in .json files.
&gt;
&gt; I added a few directives to valuespace.py plugin to bring native json data
&gt; support.
&gt;
&gt; @vsi foo.json
&gt;
&gt; reads in file foo.json, and stores the parsed data structure to vs /
&gt; ipython variable "foo"
&gt;
&gt; @vso bar.json
&gt;
&gt; serializes content of variable "bar" to json file.
&gt;
&gt; @vsi gets executed during pass 1 of vs-update, @vso gets executed in phase
&gt; 2.
&gt;
&gt; Body text gets assigned with json content in both cases.
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d0447f38251451d04da580c4e
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;Some further notes:=A0&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- yes, the .json=
 extension is explicitly special cased in the code. The idea is that e.g. @=
vso foo.csv would serialize the contents of variable &amp;quot;foo&amp;quot; as csv=
, .yml would use yaml etc.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;- vsi and vso stand for value space input and val=
ue space output, respectively&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=3D"gmail=
_extra"&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Sun, Apr 14, 2013 at 11:31 PM=
, Ville M. Vainio &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.co=
m" target=3D"_blank"&gt;vivainio@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;I&amp;#39;m doing some research=
 now, that requires storing inputs in json, I use those inputs to calculate=
 some outputs and store them in .json files.&lt;div&gt;
&lt;br&gt;&lt;/div&gt;&lt;div&gt;I added a few directives to valuespace.py plugin to bring na=
tive json data support.=A0&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@vsi foo.json&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;reads in file fo=
o.json, and stores the parsed data structure to vs / ipython variable &amp;quot=
;foo&amp;quot;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;
@vso bar.json&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;serializes content of variable &amp;quot=
;bar&amp;quot; to json file.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@vsi gets executed during=
 pass 1 of vs-update, @vso gets executed in phase 2.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Body text gets assigned with json content in both cases=
.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d0447f38251451d04da580c4e--</t>
<t tx="ekr.20130806072439.18550">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--f46d04339d4090232204da670a3d
Content-Type: text/plain; charset=ISO-8859-1

For now, the best way to study it is valuespage_example.py in contrib
branch.

I\'m being very succesful in using it + new ipython support as "ipython
notebook" workalike.

Ipython notebook is better for quick experiments, but I\'m doing long term
(multi-week) research, where Leo + IPython + valuespace is doing a great
job so far.


On Mon, Apr 15, 2013 at 5:14 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Sun, Apr 14, 2013 at 3:31 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:
&gt;
&gt;&gt;
&gt;&gt; I added a few directives to valuespace.py plugin to bring native json
&gt;&gt; data support.
&gt;&gt;
&gt;
&gt; Thanks for this work.  The valuespace plugin is one of the plugins for
&gt; which I\'d like to create a screencast-style tutorial script.
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.



--f46d04339d4090232204da670a3d
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;For now, the best way to study it is valuespage_example.py=
 in contrib branch.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I&amp;#39;m being very succesful in usin=
g it + new ipython support as &amp;quot;ipython notebook&amp;quot; workalike.&lt;/div&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ipython notebook is better for quick experiments, but I=
&amp;#39;m doing long term (multi-week) research, where Leo + IPython + valuesp=
ace is doing a great job so far.&lt;/div&gt;&lt;/div&gt;&lt;div class=3D"gmail_extra"&gt;&lt;br&gt;
&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Mon, Apr 15, 2013 at 5:14 PM, Edward K. R=
eam &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:edreamleo@gmail.com" target=3D"=
_blank"&gt;edreamleo@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D"g=
mail_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-l=
eft:1ex"&gt;
&lt;div dir=3D"ltr"&gt;&lt;div class=3D"im"&gt;On Sun, Apr 14, 2013 at 3:31 PM, Ville M=
. Vainio &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=
=3D"_blank"&gt;vivainio@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;div class=3D=
"gmail_extra"&gt;
&lt;div class=3D"gmail_quote"&gt;&lt;div class=3D"im"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;&lt;br&gt;&lt;div&gt;I added a few dire=
ctives to valuespace.py plugin to bring native json data support.=A0&lt;/div&gt;&lt;=
/div&gt;

&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Thanks for this work.=A0 The valuesp=
ace plugin is one of the plugins for which I&amp;#39;d like to create a screenc=
ast-style tutorial script. &lt;br&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#88888=
8"&gt;&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;&lt;div&gt;Edw=
ard&lt;/div&gt;&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=
=3D"#888888"&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com" target=
=3D"_blank"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;=
/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
=A0&lt;br&gt;
=A0&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den"&gt;http://groups.google.com/group/leo-editor?hl=3Den&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--f46d04339d4090232204da670a3d--</t>
<t tx="ekr.20130806072439.18551">From: Kent Tenney &lt;ktenney@gmail.com&gt;

Might this work:

a new top level menu: \'Extensions\'

Entries in this menu would refer to scripts which did all
the behind the scene work required to enable a feature,
with a small tutorial to boot.

It might even find myLeoSettings.leo, insert the required nodes
and prompt for restarting the file, IE: mechanize what the user
needs to do.

Or some other scheme to minimize the extraneous cognitive load.*

Thanks,
Kent

* see 2:20 of http://pyvideo.org/video/1744/teaching-with-the-ipython-notebook

3 kinds of cognitive load:
intrinsic
extraneous
germane

On Tue, Apr 16, 2013 at 1:58 PM, Matt Wilkie &lt;maphew@gmail.com&gt; wrote:
&gt;&gt; Next time I get an hour to code, I use Gvim ...
&gt;&gt; Not meaning to complain, just my story.
&gt;
&gt; mine too I\'m afraid.
&gt;
&gt; ...but not just with Leo. It happens to me all over the place. There\'s just
&gt; too damn many cool new things out there. If people would just stop being so
&gt; damn creative for a year or two I might be able to catch up. a little. :-/
&gt;
&gt; -matt
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en.
For more options, visit https://groups.google.com/groups/opt_out.</t>
<t tx="ekr.20130806072439.18552">From: HaveF &lt;iamaplayer@gmail.com&gt;

--047d7b622520ccea1304d0f00744
Content-Type: text/plain; charset=ISO-8859-1

sometimes, I need to refresh files one by one under some parent node...

so I just wonder, should add "refresh from disk" at parent node is a good
idea?

-- 
--
Sincerely,

HaveF



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


--047d7b622520ccea1304d0f00744
Content-Type: text/html; charset=ISO-8859-1

sometimes, I need to refresh files one by one under some parent node...&lt;br&gt;&lt;br&gt;so I just wonder, should add &amp;quot;refresh from disk&amp;quot; at parent node is a good idea?&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;--&lt;br&gt;Sincerely,&lt;br&gt;&lt;br&gt;HaveF&lt;br&gt;


&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.&lt;br /&gt;



--047d7b622520ccea1304d0f00744--</t>
<t tx="ekr.20130806072439.18553">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--e89a8fb206a8c7f81304d0f9ba65
Content-Type: text/plain; charset=ISO-8859-1

Unless I\'m mistaken, "refresh from disk" currently refresh all files from
disk, even if it only looks like it only applies to selected file.

Double check to be sure.


On Sun, Dec 16, 2012 at 5:40 AM, HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; sometimes, I need to refresh files one by one under some parent node...
&gt;
&gt; so I just wonder, should add "refresh from disk" at parent node is a good
&gt; idea?
&gt;
&gt; --
&gt; --
&gt; Sincerely,
&gt;
&gt; HaveF
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to
&gt; leo-editor+unsubscribe@googlegroups.com.
&gt; For more options, visit this group at
&gt; http://groups.google.com/group/leo-editor?hl=en.
&gt;



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


--e89a8fb206a8c7f81304d0f9ba65
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Unless I&amp;#39;m mistaken, &amp;quot;refresh from disk&amp;quot; currently refresh al=
l files from disk, even if it only looks like it only applies to selected f=
ile.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Double check to be sure.&lt;/div&gt;&lt;div class=3D"gmail_e=
xtra"&gt;
&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Sun, Dec 16, 2012 at 5:40 AM, HaveF &lt;=
span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:iamaplayer@gmail.com" target=3D"_bla=
nk"&gt;iamaplayer@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote class=3D"gmai=
l_quote" style=3D"margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left=
:1ex"&gt;
sometimes, I need to refresh files one by one under some parent node...&lt;br&gt;=
&lt;br&gt;so I just wonder, should add &amp;quot;refresh from disk&amp;quot; at parent no=
de is a good idea?&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;&lt;br clear=
=3D"all"&gt;
&lt;br&gt;-- &lt;br&gt;--&lt;br&gt;Sincerely,&lt;br&gt;&lt;br&gt;HaveF&lt;br&gt;


&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To unsubscribe from this group, send email to &lt;a href=3D"mailto:leo-editor%=
2Bunsubscribe@googlegroups.com" target=3D"_blank"&gt;leo-editor+unsubscribe@go=
oglegroups.com&lt;/a&gt;.&lt;br&gt;

For more options, visit this group at &lt;a href=3D"http://groups.google.com/g=
roup/leo-editor?hl=3Den" target=3D"_blank"&gt;http://groups.google.com/group/l=
eo-editor?hl=3Den&lt;/a&gt;.&lt;br&gt;


&lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



--e89a8fb206a8c7f81304d0f9ba65--</t>
<t tx="ekr.20130806072439.18554">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Dec 2012 11:40:18 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; sometimes, I need to refresh files one by one under some parent node...
&gt; 
&gt; so I just wonder, should add "refresh from disk" at parent node is a good
&gt; idea?

I\'ve just pushed a change so that "refresh from disk" is done for all
selected nodes.  You can either

ctrl-click each @&lt;file&gt; node you want refreshed, then "refresh from
disk" to refresh all of them, or

shift-click the first and last @&lt;file&gt; node you want refreshed, to
select the entries in between, then "refresh from
disk" to refresh all of them.

(i.e. standard UI list multi item selection)

But be aware of this bug:

https://bugs.launchpad.net/leo-editor/+bug/1090950

using refresh from disk immediately after cutting nodes from the
outline has odd effects.

Cheers -Terry



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18555">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Dec 2012 17:15:05 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Unless I\'m mistaken, "refresh from disk" currently refresh all files from
&gt; disk, even if it only looks like it only applies to selected file.
&gt; 
&gt; Double check to be sure.

I think it only does the selected node, I\'m sure it would have messed
me up before if it did otherwise - I would expect only the selected
node.

contextmenu.py does

    action = menu.addAction("Refresh from disk")

    def refresh_rclick_cb():
        if typ.startswith(\'@auto\'):
            c.readAtAutoNodes()
        elif typ ==\'@thin\' or typ == \'@file\':
            c.readAtFileNodes()
        elif typ ==\'@shadow\':
            c.readAtShadowNodes()
        else:
            c.readAtFileNodes()

however when you start tracing those c.*() methods they seem to operate
on c.p (c.currentPosition()).

Cheers -Terry

&gt; On Sun, Dec 16, 2012 at 5:40 AM, HaveF &lt;iamaplayer@gmail.com&gt; wrote:
&gt; 
&gt; &gt; sometimes, I need to refresh files one by one under some parent node...
&gt; &gt;
&gt; &gt; so I just wonder, should add "refresh from disk" at parent node is a good
&gt; &gt; idea?
&gt; &gt;
&gt; &gt; --
&gt; &gt; --
&gt; &gt; Sincerely,
&gt; &gt;
&gt; &gt; HaveF
&gt; &gt;
&gt; &gt; --
&gt; &gt; You received this message because you are subscribed to the Google Groups
&gt; &gt; "leo-editor" group.
&gt; &gt; 
&gt; &gt; To unsubscribe from this group, send email to
&gt; &gt; leo-editor+unsubscribe@googlegroups.com.
&gt; &gt; For more options, visit this group at
&gt; &gt; http://groups.google.com/group/leo-editor?hl=en.
&gt; &gt;
&gt; 



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18556">From: HaveF &lt;iamaplayer@gmail.com&gt;

--047d7b3a7ff80a7def04d103e999
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

=E5=9C=A8 2012-12-17 =E4=B8=8A=E5=8D=881:17=EF=BC=8C"Terry Brown" &lt;terry_n_=
brown@yahoo.com&gt;=E5=86=99=E9=81=93=EF=BC=9A
&gt;
&gt; On Sun, 16 Dec 2012 11:40:18 +0800
&gt; HaveF &lt;iamaplayer@gmail.com&gt; wrote:
&gt;
&gt; &gt; sometimes, I need to refresh files one by one under some parent node...
&gt; &gt;
&gt; &gt; so I just wonder, should add "refresh from disk" at parent node is a
good
&gt; &gt; idea?
&gt;
&gt; I\'ve just pushed a change so that "refresh from disk" is done for all
&gt; selected nodes.  You can either
&gt;
&gt; ctrl-click each @&lt;file&gt; node you want refreshed, then "refresh from
&gt; disk" to refresh all of them, or
&gt;
&gt; shift-click the first and last @&lt;file&gt; node you want refreshed, to
&gt; select the entries in between, then "refresh from
&gt; disk" to refresh all of them.
hi, terry, thanks for your work!
it is convenient when have this function:)

&gt;
&gt; (i.e. standard UI list multi item selection)
&gt;
&gt; But be aware of this bug:
&gt;
&gt; https://bugs.launchpad.net/leo-editor/+bug/1090950
&gt;
&gt; using refresh from disk immediately after cutting nodes from the
&gt; outline has odd effects.
&gt;
&gt; Cheers -Terry
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
"leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to
leo-editor+unsubscribe@googlegroups.com.
&gt; For more options, visit this group at
http://groups.google.com/group/leo-editor?hl=3Den.
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.

To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.
For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.


--047d7b3a7ff80a7def04d103e999
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;p&gt;&lt;br&gt;
=E5=9C=A8 2012-12-17 =E4=B8=8A=E5=8D=881:17=EF=BC=8C&amp;quot;Terry Brown&amp;quot;=
 &amp;lt;&lt;a href=3D"mailto:terry_n_brown@yahoo.com"&gt;terry_n_brown@yahoo.com&lt;/a&gt;=
&amp;gt;=E5=86=99=E9=81=93=EF=BC=9A&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; On Sun, 16 Dec 2012 11:40:18 +0800&lt;br&gt;
&amp;gt; HaveF &amp;lt;&lt;a href=3D"mailto:iamaplayer@gmail.com"&gt;iamaplayer@gmail.com=
&lt;/a&gt;&amp;gt; wrote:&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; sometimes, I need to refresh files one by one under some parent n=
ode...&lt;br&gt;
&amp;gt; &amp;gt;&lt;br&gt;
&amp;gt; &amp;gt; so I just wonder, should add &amp;quot;refresh from disk&amp;quot; at par=
ent node is a good&lt;br&gt;
&amp;gt; &amp;gt; idea?&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; I&amp;#39;ve just pushed a change so that &amp;quot;refresh from disk&amp;quot; is=
 done for all&lt;br&gt;
&amp;gt; selected nodes. =C2=A0You can either&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; ctrl-click each @&amp;lt;file&amp;gt; node you want refreshed, then &amp;quot;refr=
esh from&lt;br&gt;
&amp;gt; disk&amp;quot; to refresh all of them, or&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; shift-click the first and last @&amp;lt;file&amp;gt; node you want refreshed, =
to&lt;br&gt;
&amp;gt; select the entries in between, then &amp;quot;refresh from&lt;br&gt;
&amp;gt; disk&amp;quot; to refresh all of them.&lt;br&gt;
hi, terry, thanks for your work!&lt;br&gt;
it is convenient when have this function:)&lt;br&gt;
 &lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; (i.e. standard UI list multi item selection)&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; But be aware of this bug:&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; &lt;a href=3D"https://bugs.launchpad.net/leo-editor/+bug/1090950"&gt;https:/=
/bugs.launchpad.net/leo-editor/+bug/1090950&lt;/a&gt;&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; using refresh from disk immediately after cutting nodes from the&lt;br&gt;
&amp;gt; outline has odd effects.&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; Cheers -Terry&lt;br&gt;
&amp;gt;&lt;br&gt;
&amp;gt; --&lt;br&gt;
&amp;gt; You received this message because you are subscribed to the Google Gro=
ups &amp;quot;leo-editor&amp;quot; group.&lt;br&gt;
&amp;gt; To post to this group, send email to &lt;a href=3D"mailto:leo-editor@goog=
legroups.com"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
&amp;gt; To unsubscribe from this group, send email to &lt;a href=3D"mailto:leo-ed=
itor%2Bunsubscribe@googlegroups.com"&gt;leo-editor+unsubscribe@googlegroups.co=
m&lt;/a&gt;.&lt;br&gt;
&amp;gt; For more options, visit this group at &lt;a href=3D"http://groups.google.=
com/group/leo-editor?hl=3Den"&gt;http://groups.google.com/group/leo-editor?hl=
=3Den&lt;/a&gt;.&lt;br&gt;
&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



--047d7b3a7ff80a7def04d103e999--</t>
<t tx="ekr.20130806072439.18557">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The new leoIPython.py module is now fully (?) integrated with Leo.
IPython gets started when (and only when) the --ipython command-line
switch is in effect.

However, the push-to-ipython command does not work, and there are
enough mysteries in the code that I really don\'t know how to proceed.

Ville, it might be that just a few minutes of work on your part would
get the project moving forward again.  I\'ll understand if you don\'t
have the time, but in that case I\'ll start asking you a lot of
questions ;-)

It will be a good start if we could just get the push-to-ipython
command working with the legacy IPython code.  That\'s likely to get us
90% of the way to getting things working with the new-style api.

Let me know if I can do anything to assist.

Edward



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18558">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Sun, Apr 15, 2012 at 2:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Observation one: the new minibuffer completion stuff makes typing in
&gt; the minibuffer very slow. It\'s as if it\'s not waiting for "tab" keys
&gt; anymore, but completes on every keystroke.

Odd.  I don\'t see the problem.  But I can see how there might be a
problem, depending on your autocompletion setup.  It should be easy to
fix.  I\'ll do so sometime today.

Edward</t>
<t tx="ekr.20130806072439.18559">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Observation two:

push-to-ipython already works ;-).

Try it out:

Start with launchLeo.py --ipython
alt-x start-ipython

... go to some node with python statuements, e.g.

=3D=3D=3D=3D
a=3D1+1
print a+12
=3D=3D=3D=3D

altx-x push-to-ipython

Observe the output in console:

                    &lt;4&gt; 2
----------------------&gt; print(a+12)
14


On Sun, Apr 15, 2012 at 10:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrot=
e:
&gt; I\'m trying to do this on windows.
&gt;
&gt; Observation one: the new minibuffer completion stuff makes typing in
&gt; the minibuffer very slow. It\'s as if it\'s not waiting for "tab" keys
&gt; anymore, but completes on every keystroke.
&gt;
&gt; On Sat, Apr 14, 2012 at 5:44 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wro=
te:
&gt;&gt; The new leoIPython.py module is now fully (?) integrated with Leo.
&gt;&gt; IPython gets started when (and only when) the --ipython command-line
&gt;&gt; switch is in effect.
&gt;&gt;
&gt;&gt; However, the push-to-ipython command does not work, and there are
&gt;&gt; enough mysteries in the code that I really don\'t know how to proceed.
&gt;&gt;
&gt;&gt; Ville, it might be that just a few minutes of work on your part would
&gt;&gt; get the project moving forward again. =A0I\'ll understand if you don\'t
&gt;&gt; have the time, but in that case I\'ll start asking you a lot of
&gt;&gt; questions ;-)
&gt;&gt;
&gt;&gt; It will be a good start if we could just get the push-to-ipython
&gt;&gt; command working with the legacy IPython code. =A0That\'s likely to get us
&gt;&gt; 90% of the way to getting things working with the new-style api.
&gt;&gt;
&gt;&gt; Let me know if I can do anything to assist.
&gt;&gt;
&gt;&gt; Edward
&gt;&gt;
&gt;&gt; --
&gt;&gt; You received this message because you are subscribed to the Google Group=
s "leo-editor" group.
&gt;&gt; 
&gt;&gt; To unsubscribe from this group, send email to leo-editor+unsubscribe@goo=
glegroups.com.
&gt;&gt; For more options, visit this group at http://groups.google.com/group/leo=
-editor?hl=3Den.
&gt;&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.

To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.
For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.</t>
<t tx="ekr.20130806072439.18560">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Sat, Apr 14, 2012 at 10:19 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Ok, let's sort the ipython story out by the end of next week, as I'm
&gt; taking some time off work.

Excellent.  Thanks very much.

Edward
"</t>
<t tx="ekr.20130806072439.18561">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Sun, Apr 15, 2012 at 2:34 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Observation two:
&gt;
&gt; push-to-ipython already works ;-).

Oh!  I didn\'t realize that the start-ipython command was needed in
addition to the --ipython option.

Could we have the push-to-ipython command switch g_c commander to the
commander of the outline from which the push-to-ipython command was
invoked?  That would be one less command to worry about.

It looks like the only remaining task is to eliminate the ip.IP var
when using the new api.  I assume that the way to do that is as
suggested by the deprecated IPython.core.ipapi.get() method, which is
just::

    def get():
        """Get the global InteractiveShell instance."""
        from IPython.core.interactiveshell import InteractiveShell
        return InteractiveShell.instance()

I\'ll look into this later today...

Edward</t>
<t tx="ekr.20130806072439.18562">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I\'m trying to do this on windows.

Observation one: the new minibuffer completion stuff makes typing in
the minibuffer very slow. It\'s as if it\'s not waiting for "tab" keys
anymore, but completes on every keystroke.

On Sat, Apr 14, 2012 at 5:44 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote=
:
&gt; The new leoIPython.py module is now fully (?) integrated with Leo.
&gt; IPython gets started when (and only when) the --ipython command-line
&gt; switch is in effect.
&gt;
&gt; However, the push-to-ipython command does not work, and there are
&gt; enough mysteries in the code that I really don\'t know how to proceed.
&gt;
&gt; Ville, it might be that just a few minutes of work on your part would
&gt; get the project moving forward again. =A0I\'ll understand if you don\'t
&gt; have the time, but in that case I\'ll start asking you a lot of
&gt; questions ;-)
&gt;
&gt; It will be a good start if we could just get the push-to-ipython
&gt; command working with the legacy IPython code. =A0That\'s likely to get us
&gt; 90% of the way to getting things working with the new-style api.
&gt;
&gt; Let me know if I can do anything to assist.
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups=
 "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to leo-editor+unsubscribe@goog=
legroups.com.
&gt; For more options, visit this group at http://groups.google.com/group/leo-=
editor?hl=3Den.
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.

To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.
For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.</t>
<t tx="ekr.20130806072439.18563">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Mon, May 28, 2012 at 2:33 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I found this problem - every time you press backspace, it updates the
&gt; list of completions. When you have only one or zero characters, it's
&gt; just slow to fetch the list of completions (as there is a lot of
&gt; them). Pressing backspace should just delete the list if the line
&gt; becomes empty, instead of showing all commands.

Thanks for this suggestion.  I'll see what can be done.

Edward
"</t>
<t tx="ekr.20130806072439.18564">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Sun, Apr 15, 2012 at 1:54 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote=
:

&gt; Odd. =A0I don't see the problem. =A0But I can see how there might be a
&gt; problem, depending on your autocompletion setup. =A0It should be easy to
&gt; fix. =A0I'll do so sometime today.

Does rev 5255 help?

EKR
"</t>
<t tx="ekr.20130806072439.18565">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ok, let\'s sort the ipython story out by the end of next week, as I\'m
taking some time off work.

On Sat, Apr 14, 2012 at 5:44 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote=
:
&gt; The new leoIPython.py module is now fully (?) integrated with Leo.
&gt; IPython gets started when (and only when) the --ipython command-line
&gt; switch is in effect.
&gt;
&gt; However, the push-to-ipython command does not work, and there are
&gt; enough mysteries in the code that I really don\'t know how to proceed.
&gt;
&gt; Ville, it might be that just a few minutes of work on your part would
&gt; get the project moving forward again. =A0I\'ll understand if you don\'t
&gt; have the time, but in that case I\'ll start asking you a lot of
&gt; questions ;-)
&gt;
&gt; It will be a good start if we could just get the push-to-ipython
&gt; command working with the legacy IPython code. =A0That\'s likely to get us
&gt; 90% of the way to getting things working with the new-style api.
&gt;
&gt; Let me know if I can do anything to assist.
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups=
 "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to leo-editor+unsubscribe@goog=
legroups.com.
&gt; For more options, visit this group at http://groups.google.com/group/leo-=
editor?hl=3Den.
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.

To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.
For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.</t>
<t tx="ekr.20130806072439.18566">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I found this problem - every time you press backspace, it updates the
list of completions. When you have only one or zero characters, it\'s
just slow to fetch the list of completions (as there is a lot of
them). Pressing backspace should just delete the list if the line
becomes empty, instead of showing all commands.

On Sun, Apr 15, 2012 at 9:54 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote=
:
&gt; On Sun, Apr 15, 2012 at 2:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wro=
te:
&gt;
&gt;&gt; Observation one: the new minibuffer completion stuff makes typing in
&gt;&gt; the minibuffer very slow. It\'s as if it\'s not waiting for "tab" keys
&gt;&gt; anymore, but completes on every keystroke.
&gt;
&gt; Odd. =A0I don\'t see the problem. =A0But I can see how there might be a
&gt; problem, depending on your autocompletion setup. =A0It should be easy to
&gt; fix. =A0I\'ll do so sometime today.
&gt;
&gt; Edward
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups=
 "leo-editor" group.
&gt; 
&gt; To unsubscribe from this group, send email to leo-editor+unsubscribe@goog=
legroups.com.
&gt; For more options, visit this group at http://groups.google.com/group/leo-=
editor?hl=3Den.
&gt;

--=20
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.

To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.
For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.</t>
<t tx="ekr.20130806072439.18567">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Hey, I went on to start a "leo mylyn" plugin to excercise using the
childrenModified and contentModified signals.

If you want to play with it, pull, enable leomylyn.py, modify stuff
around the tree and do alt-x mylyn-scores.

Of course as it is useless in this state, but becomes useful when it
has a proper gui (maybe in Nav pane), where you would then have a list
of "most interesting" nodes.

In the future, this could be able to remember the scores through the
sessions, degrade the old scores by time, etc. Also, a scoreset would
be associated with a "project" (e.g."own research", "work project
foo"), each of them having their own typical node working set.

Mylyn was a nice boost back in the eclipse days, it could work for Leo
too. My main motivation right now was to demonstare the signals with
something that is much simpler than using them in qmlnotebook.



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.18568">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, May 3, 2012 at 3:42 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I went on to start a "leo mylyn" plugin to exercise using the childrenModified and contentModified signals.

This could an extremely important plugin--project management is close
to the heart of how I use clones.

My guess is that the scoring function is a  (semi?) automatic  way of
suggesting which nodes would naturally be part of a project.  This
would (partly?) eliminate the need to create clones by hand.

In this way of thinking, a project is simply a node whose children
represent sub-parts of the project.  Often, those children are clones.
 This suggest commands such as the following:

    project-new:  create a node representing a project and make it the
**present project**.
    project-select: choose a node to be the present project.
    project-add-node: add a clone of the present node to the present project.
    project-add-recent: add (clones of) nodes with "high enough" score
to the present project.
    project-add-found: search for nodes and add clones of the found
nodes to the present project.
    project-add-marked: add clones of marked nodes to the present project.

These are just ideas.

Unlike in Eclipse/mylyn, Leo\'s node structure is available to all
parts of the project.  For example, scripts could be applied to the
(nodes of) a project in various ways.  In other words, the "project
structure" is not hard-wired, as it is in mylyn, but can be extended
in any way the user (or plugin writer) desires.

Your comments please.

Edward</t>
<t tx="ekr.20130806072439.18804">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've added a new plugin to Leo, that adds printing support when using 
the Qt GUI.  Available from rev 5779.

Here's the docscring:

'''Supports printing from the Qt GUI.

Jacob M. Peck, 2013

Commands
========

This plugin supports the following twelve commands:

print-selected-node
-------------------

Opens up the print dialog to print the selected headline and node.

print-preview-selected-node
---------------------------

Opens up the print preview dialog to preview the selected headline
and node.

print-selected-node-body
------------------------

Opens up the print dialog to print the selected node body.

print-preview-selected-node-body
--------------------------------

Opens up the print preview dialog to preview the selected node body.

print-expanded-node
-------------------

Opens up the print dialog to print the expanded contents of the
selected node, with top-level headline.

print-preview-expanded-node
---------------------------

Opens up the print preview dialog to preview the expanded contents
of theselected node, with top-level headline.

print-expanded-node-body
------------------------

Opens up the print dialog to print the expanded node body.

print-preview-expanded-node-body
--------------------------------

Opens up the print preview dialog to preview the expanded node
body.

print-marked-nodes
------------------

Opens up the print dialog to print all marked nodes in the current
outline, with headlines.

print-preview-marked-nodes
--------------------------

Opens up the print preview dialog to preview all marked nodes in \\
the current outline, with headlines.

print-marked-node-bodies
------------------------

Opens up the print dialog to print the bodies of all marked nodes
in the current outline.

print-preview-marked-node-bodies
--------------------------------

Opens up the print preview dialog to preview the bodies of all
marked nodes in the current outline.

Settings
========

- ``@string printing-font-family = DejaVu Sans Mono``
   The font family for printing.  A monospaced font is recommended.

- ``@string printing-font-size = 12``
   The font size for printing bodies, in px.  Due to limitations
   of PyQt, the size of headlines cannot be changed.
'''

To use it, be sure to add `printing.py` to your @enabled-plugins.

Future work may have more printing modes available, and I intend on 
doing a blog post on the leoblog about creating custom printing modes in 
scripts.

This addresses bug 1132804: 
https://bugs.launchpad.net/leo-editor/+bug/1132804

</t>
<t tx="ekr.20130806072439.18805">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 5/15/2013 9:04 AM, Kent Tenney wrote:
&gt; It just works! Nice.
&gt; Being able to preview is great, less paper wasted.
&gt;
&gt; I rely entirely on command completion as a memory aid, too
&gt; bad the info listing commands also start with \'print\'. I would
&gt; think that \'list-&lt;attribute&gt;\' would have nicely disambiguated the
&gt; situation now we have print.
&gt;
&gt; Too late?
&gt;
I agree completely w/r/t \'list-&lt;attribute&gt;\', but it most likely is too 
late.  Those are probably in use by some script somewhere.  :(

Thanks for the comments, though!  To be fair, this whole thing was crazy 
simple to throw together - Qt does *all* the heavy lifting. Just throw 
together an HTML string, wrap it in a QTextDocument, and call print_, 
and Bob\'s your uncle.  I can see why Leo uses PyQt now... it\'s awesome.
</t>
<t tx="ekr.20130806072439.18806">From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;

------=_Part_340_2876503.1368623529463
Content-Type: text/plain; charset=ISO-8859-1

Thank you for this plugin, very useful!

On Wednesday, May 15, 2013 2:41:19 PM UTC+2, Jacob Peck wrote:
&gt;
&gt; Hello all, 
&gt;
&gt; I\'ve added a new plugin to Leo, that adds printing support when using 
&gt; the Qt GUI.  Available from rev 5779. 
&gt;
&gt; Here\'s the docscring: 
&gt;
&gt; \'\'\'Supports printing from the Qt GUI. 
&gt;
&gt; Jacob M. Peck, 2013 
&gt;
&gt; Commands 
&gt; ======== 
&gt;
&gt; This plugin supports the following twelve commands: 
&gt;
&gt; print-selected-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the selected headline and node. 
&gt;
&gt; print-preview-selected-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected headline 
&gt; and node. 
&gt;
&gt; print-selected-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the selected node body. 
&gt;
&gt; print-preview-selected-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected node body. 
&gt;
&gt; print-expanded-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the expanded contents of the 
&gt; selected node, with top-level headline. 
&gt;
&gt; print-preview-expanded-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded contents 
&gt; of theselected node, with top-level headline. 
&gt;
&gt; print-expanded-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the expanded node body. 
&gt;
&gt; print-preview-expanded-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded node 
&gt; body. 
&gt;
&gt; print-marked-nodes 
&gt; ------------------ 
&gt;
&gt; Opens up the print dialog to print all marked nodes in the current 
&gt; outline, with headlines. 
&gt;
&gt; print-preview-marked-nodes 
&gt; -------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview all marked nodes in \\ 
&gt; the current outline, with headlines. 
&gt;
&gt; print-marked-node-bodies 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the bodies of all marked nodes 
&gt; in the current outline. 
&gt;
&gt; print-preview-marked-node-bodies 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the bodies of all 
&gt; marked nodes in the current outline. 
&gt;
&gt; Settings 
&gt; ======== 
&gt;
&gt; - ``@string printing-font-family = DejaVu Sans Mono`` 
&gt;    The font family for printing.  A monospaced font is recommended. 
&gt;
&gt; - ``@string printing-font-size = 12`` 
&gt;    The font size for printing bodies, in px.  Due to limitations 
&gt;    of PyQt, the size of headlines cannot be changed. 
&gt; \'\'\' 
&gt;
&gt; To use it, be sure to add `printing.py` to your @enabled-plugins. 
&gt;
&gt; Future work may have more printing modes available, and I intend on 
&gt; doing a blog post on the leoblog about creating custom printing modes in 
&gt; scripts. 
&gt;
&gt; This addresses bug 1132804: 
&gt; https://bugs.launchpad.net/leo-editor/+bug/1132804 
&gt;
&gt; --&gt;Jake 
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_340_2876503.1368623529463
Content-Type: text/html; charset=ISO-8859-1

Thank you for this plugin, very useful!&lt;br&gt;&lt;br&gt;On Wednesday, May 15, 2013 2:41:19 PM UTC+2, Jacob Peck wrote:&lt;blockquote class="gmail_quote" style="margin: 0;margin-left: 0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;Hello all,
&lt;br&gt;
&lt;br&gt;I\'ve added a new plugin to Leo, that adds printing support when using 
&lt;br&gt;the Qt GUI. &amp;nbsp;Available from rev 5779.
&lt;br&gt;
&lt;br&gt;Here\'s the docscring:
&lt;br&gt;
&lt;br&gt;\'\'\'Supports printing from the Qt GUI.
&lt;br&gt;
&lt;br&gt;Jacob M. Peck, 2013
&lt;br&gt;
&lt;br&gt;Commands
&lt;br&gt;========
&lt;br&gt;
&lt;br&gt;This plugin supports the following twelve commands:
&lt;br&gt;
&lt;br&gt;print-selected-node
&lt;br&gt;-------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print the selected headline and node.
&lt;br&gt;
&lt;br&gt;print-preview-selected-node
&lt;br&gt;---------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview the selected headline
&lt;br&gt;and node.
&lt;br&gt;
&lt;br&gt;print-selected-node-body
&lt;br&gt;------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print the selected node body.
&lt;br&gt;
&lt;br&gt;print-preview-selected-node-&lt;wbr&gt;body
&lt;br&gt;------------------------------&lt;wbr&gt;--
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview the selected node body.
&lt;br&gt;
&lt;br&gt;print-expanded-node
&lt;br&gt;-------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print the expanded contents of the
&lt;br&gt;selected node, with top-level headline.
&lt;br&gt;
&lt;br&gt;print-preview-expanded-node
&lt;br&gt;---------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview the expanded contents
&lt;br&gt;of theselected node, with top-level headline.
&lt;br&gt;
&lt;br&gt;print-expanded-node-body
&lt;br&gt;------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print the expanded node body.
&lt;br&gt;
&lt;br&gt;print-preview-expanded-node-&lt;wbr&gt;body
&lt;br&gt;------------------------------&lt;wbr&gt;--
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview the expanded node
&lt;br&gt;body.
&lt;br&gt;
&lt;br&gt;print-marked-nodes
&lt;br&gt;------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print all marked nodes in the current
&lt;br&gt;outline, with headlines.
&lt;br&gt;
&lt;br&gt;print-preview-marked-nodes
&lt;br&gt;--------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview all marked nodes in \\
&lt;br&gt;the current outline, with headlines.
&lt;br&gt;
&lt;br&gt;print-marked-node-bodies
&lt;br&gt;------------------------
&lt;br&gt;
&lt;br&gt;Opens up the print dialog to print the bodies of all marked nodes
&lt;br&gt;in the current outline.
&lt;br&gt;
&lt;br&gt;print-preview-marked-node-&lt;wbr&gt;bodies
&lt;br&gt;------------------------------&lt;wbr&gt;--
&lt;br&gt;
&lt;br&gt;Opens up the print preview dialog to preview the bodies of all
&lt;br&gt;marked nodes in the current outline.
&lt;br&gt;
&lt;br&gt;Settings
&lt;br&gt;========
&lt;br&gt;
&lt;br&gt;- ``@string printing-font-family = DejaVu Sans Mono``
&lt;br&gt;&amp;nbsp; &amp;nbsp;The font family for printing. &amp;nbsp;A monospaced font is recommended.
&lt;br&gt;
&lt;br&gt;- ``@string printing-font-size = 12``
&lt;br&gt;&amp;nbsp; &amp;nbsp;The font size for printing bodies, in px. &amp;nbsp;Due to limitations
&lt;br&gt;&amp;nbsp; &amp;nbsp;of PyQt, the size of headlines cannot be changed.
&lt;br&gt;\'\'\'
&lt;br&gt;
&lt;br&gt;To use it, be sure to add `printing.py` to your @enabled-plugins.
&lt;br&gt;
&lt;br&gt;Future work may have more printing modes available, and I intend on 
&lt;br&gt;doing a blog post on the leoblog about creating custom printing modes in 
&lt;br&gt;scripts.
&lt;br&gt;
&lt;br&gt;This addresses bug 1132804: 
&lt;br&gt;&lt;a href="https://bugs.launchpad.net/leo-editor/+bug/1132804" target="_blank"&gt;https://bugs.launchpad.net/&lt;wbr&gt;leo-editor/+bug/1132804&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;--&amp;gt;Jake
&lt;br&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href="http://groups.google.com/group/leo-editor?hl=en-US"&gt;http://groups.google.com/group/leo-editor?hl=en-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_340_2876503.1368623529463--</t>
<t tx="ekr.20130806072439.18807">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c3659e39178e04dcc40c9d
Content-Type: text/plain; charset=UTF-8

On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt;
&gt; I\'ve added a new plugin to Leo, that adds printing support when using the
&gt; Qt GUI.  Available from rev 5779.
&gt;

Excellent work.  Many thanks for this contribution.

Edward

--001a11c3659e39178e04dcc40c9d
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;span dir=3D"l=
tr"&gt;&amp;lt;&lt;a href=3D"mailto:gatesphere@gmail.com" target=3D"_blank"&gt;gatespher=
e@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;
&lt;br&gt;
I&amp;#39;ve added a new plugin to Leo, that adds printing support when using t=
he Qt GUI. =C2=A0Available from rev 5779.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;d=
iv&gt;Excellent work.=C2=A0 Many thanks for this contribution.&lt;br&gt;&lt;br&gt;Edward&lt;/=
div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;

--001a11c3659e39178e04dcc40c9d--</t>
<t tx="ekr.20130806072439.18808">From: Kent Tenney &lt;ktenney@gmail.com&gt;

It just works! Nice.
Being able to preview is great, less paper wasted.

I rely entirely on command completion as a memory aid, too
bad the info listing commands also start with \'print\'. I would
think that \'list-&lt;attribute&gt;\' would have nicely disambiguated the
situation now we have print.

Too late?



On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:
&gt; Hello all,
&gt;
&gt; I\'ve added a new plugin to Leo, that adds printing support when using the Qt
&gt; GUI.  Available from rev 5779.
&gt;
&gt; Here\'s the docscring:
&gt;
&gt; \'\'\'Supports printing from the Qt GUI.
&gt;
&gt; Jacob M. Peck, 2013
&gt;
&gt; Commands
&gt; ========
&gt;
&gt; This plugin supports the following twelve commands:
&gt;
&gt; print-selected-node
&gt; -------------------
&gt;
&gt; Opens up the print dialog to print the selected headline and node.
&gt;
&gt; print-preview-selected-node
&gt; ---------------------------
&gt;
&gt; Opens up the print preview dialog to preview the selected headline
&gt; and node.
&gt;
&gt; print-selected-node-body
&gt; ------------------------
&gt;
&gt; Opens up the print dialog to print the selected node body.
&gt;
&gt; print-preview-selected-node-body
&gt; --------------------------------
&gt;
&gt; Opens up the print preview dialog to preview the selected node body.
&gt;
&gt; print-expanded-node
&gt; -------------------
&gt;
&gt; Opens up the print dialog to print the expanded contents of the
&gt; selected node, with top-level headline.
&gt;
&gt; print-preview-expanded-node
&gt; ---------------------------
&gt;
&gt; Opens up the print preview dialog to preview the expanded contents
&gt; of theselected node, with top-level headline.
&gt;
&gt; print-expanded-node-body
&gt; ------------------------
&gt;
&gt; Opens up the print dialog to print the expanded node body.
&gt;
&gt; print-preview-expanded-node-body
&gt; --------------------------------
&gt;
&gt; Opens up the print preview dialog to preview the expanded node
&gt; body.
&gt;
&gt; print-marked-nodes
&gt; ------------------
&gt;
&gt; Opens up the print dialog to print all marked nodes in the current
&gt; outline, with headlines.
&gt;
&gt; print-preview-marked-nodes
&gt; --------------------------
&gt;
&gt; Opens up the print preview dialog to preview all marked nodes in \\
&gt; the current outline, with headlines.
&gt;
&gt; print-marked-node-bodies
&gt; ------------------------
&gt;
&gt; Opens up the print dialog to print the bodies of all marked nodes
&gt; in the current outline.
&gt;
&gt; print-preview-marked-node-bodies
&gt; --------------------------------
&gt;
&gt; Opens up the print preview dialog to preview the bodies of all
&gt; marked nodes in the current outline.
&gt;
&gt; Settings
&gt; ========
&gt;
&gt; - ``@string printing-font-family = DejaVu Sans Mono``
&gt;   The font family for printing.  A monospaced font is recommended.
&gt;
&gt; - ``@string printing-font-size = 12``
&gt;   The font size for printing bodies, in px.  Due to limitations
&gt;   of PyQt, the size of headlines cannot be changed.
&gt; \'\'\'
&gt;
&gt; To use it, be sure to add `printing.py` to your @enabled-plugins.
&gt;
&gt; Future work may have more printing modes available, and I intend on doing a
&gt; blog post on the leoblog about creating custom printing modes in scripts.
&gt;
&gt; This addresses bug 1132804:
&gt; https://bugs.launchpad.net/leo-editor/+bug/1132804
&gt;
&gt; --&gt;Jake
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.
</t>
<t tx="ekr.20130806072439.18889">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This one is not "exhaustive", but in the interest of time management, I
decided to push it as is. I\'ll blog about more features later on.

http://leo-editor.github.io/valuespace-intro.html

Hope it already helps alleviate the mystery of what it\'s all about :)</t>
<t tx="ekr.20130806072439.18890">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c2674c1dc3d604dc99267a
Content-Type: text/plain; charset=UTF-8

On Sat, May 11, 2013 at 9:58 PM, ne1uno &lt;eltronis@gmail.com&gt; wrote:

&gt; http://groups.google.com/group/leo-editor/about
&gt; still has the old home page
&gt; webpages.charter.net
&gt;

Thanks for this.  At present, I don\'t see any way to change the old home
page!  Anyone know how?

Edward

--001a11c2674c1dc3d604dc99267a
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Sat, May 11, 2013 at 9:58 PM, ne1uno &lt;span dir=3D"ltr"&gt;=
&amp;lt;&lt;a href=3D"mailto:eltronis@gmail.com" target=3D"_blank"&gt;eltronis@gmail.=
com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=3D"gmail=
_quote"&gt;&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border=
-left:1px #ccc solid;padding-left:1ex"&gt;
&lt;a href=3D"http://groups.google.com/group/leo-editor/about" target=3D"_blan=
k"&gt;http://groups.google.com/group/leo-editor/about&lt;/a&gt;&lt;br&gt;
still has the old home page&lt;br&gt;
&lt;a href=3D"http://webpages.charter.net" target=3D"_blank"&gt;webpages.charter.=
net&lt;/a&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for this.=C2=A0 At prese=
nt, I don&amp;#39;t see any way to change the old home page!=C2=A0 Anyone know =
how?&lt;br&gt;&lt;br&gt;
Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--001a11c2674c1dc3d604dc99267a--</t>
<t tx="ekr.20130806072439.18891">From: gatesphere &lt;gatesphere@gmail.com&gt;

This is a multi-part message in MIME format.
--------------070407080106060909030203
Content-Type: text/plain; charset=ISO-8859-1; format=flowed

Looks really interesting, Ville!  Thanks for sharing, looking forward to 
diving in.

I\'m thinking of some uses for in a rulebook and a few blog posts I\'m 
writing right now.  Being able to have my document be executable seems 
awesome.

--&gt;Jake
&gt; On Tuesday, May 14, 2013 4:15:12 AM UTC+8, Ville M. Vainio wrote:
&gt;
&gt;     This one is not "exhaustive", but in the interest of time
&gt;     management, I decided to push it as is. I\'ll blog about more
&gt;     features later on.
&gt;
&gt;     http://leo-editor.github.io/valuespace-intro.html
&gt;     &lt;http://leo-editor.github.io/valuespace-intro.html&gt;
&gt;
&gt;     Hope it already helps alleviate the mystery of what it\'s all about :)
&gt;
&gt; -- 
&gt; You received this message because you are subscribed to the Google 
&gt; Groups "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send 
&gt; an email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



--------------070407080106060909030203
Content-Type: text/html; charset=ISO-8859-1

&lt;html&gt;
  &lt;head&gt;
    &lt;meta content="text/html; charset=ISO-8859-1"
      http-equiv="Content-Type"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    Looks really interesting, Ville!&amp;nbsp; Thanks for sharing, looking
    forward to diving in.&lt;br&gt;
    &lt;br&gt;
    I\'m thinking of some uses for in a rulebook and a few blog posts I\'m
    writing right now.&amp;nbsp; Being able to have my document be executable
    seems awesome.&lt;br&gt;
    &lt;br&gt;
    --&amp;gt;Jake&lt;br&gt;
    &lt;blockquote
      cite="mid:496ec8fb-4a2a-4ad9-90e2-121abc2743b6@googlegroups.com"
      type="cite"&gt;
      &lt;div&gt;
        &lt;div&gt;On Tuesday, May 14, 2013 4:15:12 AM UTC+8, Ville M. Vainio
          wrote:
          &lt;blockquote class="gmail_quote" style="margin: 0;margin-left:
            0.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;This
            one is not "exhaustive", but in the interest of time
            management, I decided to push it as is. I\'ll blog about more
            features later on.
            &lt;div&gt;&lt;br&gt;
            &lt;/div&gt;
            &lt;div&gt;&lt;a moz-do-not-send="true"
                href="http://leo-editor.github.io/valuespace-intro.html"
                target="_blank"&gt;http://leo-editor.github.io/&lt;wbr&gt;valuespace-intro.html&lt;/a&gt;&lt;/div&gt;
            &lt;div&gt;&lt;br&gt;
            &lt;/div&gt;
            &lt;div&gt;Hope it already helps alleviate the mystery of what
              it\'s all about :)&lt;/div&gt;
          &lt;/blockquote&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      -- &lt;br&gt;
      You received this message because you are subscribed to the Google
      Groups "leo-editor" group.&lt;br&gt;
      To unsubscribe from this group and stop receiving emails from it,
      send an email to &lt;a class="moz-txt-link-abbreviated" href="mailto:leo-editor+unsubscribe@googlegroups.com"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
      To post to this group, send email to &lt;a class="moz-txt-link-abbreviated" href="mailto:leo-editor@googlegroups.com"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
      Visit this group at &lt;a moz-do-not-send="true"
        href="http://groups.google.com/group/leo-editor?hl=en-US"&gt;http://groups.google.com/group/leo-editor?hl=en-US&lt;/a&gt;.&lt;br&gt;
      For more options, visit &lt;a moz-do-not-send="true"
        href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
      &amp;nbsp;&lt;br&gt;
      &amp;nbsp;&lt;br&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href="http://groups.google.com/group/leo-editor?hl=en-US"&gt;http://groups.google.com/group/leo-editor?hl=en-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href="https://groups.google.com/groups/opt_out"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--------------070407080106060909030203--</t>
<t tx="ekr.20130806072439.18892">From: HaveF &lt;iamaplayer@gmail.com&gt;

------=_Part_9_11281089.1368496772614
Content-Type: text/plain; charset=ISO-8859-1

Thanks!

Although it beyond my current requirements, maybe, 
I need to read valuespace_example.leo to find more typical usage.

On Tuesday, May 14, 2013 4:15:12 AM UTC+8, Ville M. Vainio wrote:
&gt;
&gt; This one is not "exhaustive", but in the interest of time management, I 
&gt; decided to push it as is. I\'ll blog about more features later on.
&gt;
&gt; http://leo-editor.github.io/valuespace-intro.html
&gt;
&gt; Hope it already helps alleviate the mystery of what it\'s all about :)
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



------=_Part_9_11281089.1368496772614
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thanks!&lt;div&gt;&lt;br&gt;&lt;div&gt;Although it beyond my current requirements, maybe,&amp;nbs=
p;&lt;/div&gt;&lt;div&gt;I need to read valuespace_example.leo to find more typical usa=
ge.&lt;/div&gt;&lt;div&gt;&lt;br&gt;On Tuesday, May 14, 2013 4:15:12 AM UTC+8, Ville M. Vaini=
o wrote:&lt;blockquote class=3D"gmail_quote" style=3D"margin: 0;margin-left: 0=
.8ex;border-left: 1px #ccc solid;padding-left: 1ex;"&gt;This one is not "exhau=
stive", but in the interest of time management, I decided to push it as is.=
 I\'ll blog about more features later on.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"http=
://leo-editor.github.io/valuespace-intro.html" target=3D"_blank"&gt;http://leo=
-editor.github.io/&lt;wbr&gt;valuespace-intro.html&lt;/a&gt;&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hope it already helps alleviate the mystery of what it\'=
s all about :)&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den-US"&gt;http://groups.google.com/group/leo-editor?hl=3Den-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

------=_Part_9_11281089.1368496772614--</t>
<t tx="ekr.20130806072439.18893">From: Matt Wilkie &lt;maphew@gmail.com&gt;

--001a11c26ed617905b04dc9facbf
Content-Type: text/plain; charset=ISO-8859-1

Thank you so much Ville.

That looks awesomely powerful. And I have a use for the json slurper right
now! I can\'t wait to try it out.

-matt


On Mon, May 13, 2013 at 1:15 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; This one is not "exhaustive", but in the interest of time management, I
&gt; decided to push it as is. I\'ll blog about more features later on.
&gt;
&gt; http://leo-editor.github.io/valuespace-intro.html
&gt;
&gt; Hope it already helps alleviate the mystery of what it\'s all about :)
&gt;
&gt; --
&gt; You received this message because you are subscribed to the Google Groups
&gt; "leo-editor" group.
&gt; To unsubscribe from this group and stop receiving emails from it, send an
&gt; email to leo-editor+unsubscribe@googlegroups.com.
&gt; 
&gt; Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
&gt; For more options, visit https://groups.google.com/groups/opt_out.
&gt;
&gt;
&gt;


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



--001a11c26ed617905b04dc9facbf
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Thank you so much Ville. &lt;br&gt;&lt;br&gt;That looks awesomely powerful. And I have =
a use for the json slurper right now! I can&amp;#39;t wait to try it out.&lt;br&gt;&lt;b=
r&gt;-matt&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div class=3D"gmail_quote"&gt;On Mon, May 13, 2013 at 1:15 =
PM, Ville M. Vainio &lt;span dir=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.=
com" target=3D"_blank"&gt;vivainio@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;

&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;This one is not &amp;quot;exhaustive&amp;quot;, but =
in the interest of time management, I decided to push it as is. I&amp;#39;ll bl=
og about more features later on.&lt;div&gt;

&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"http://leo-editor.github.io/valuespace-intro.html=
" target=3D"_blank"&gt;http://leo-editor.github.io/valuespace-intro.html&lt;/a&gt;&lt;/=
div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hope it already helps alleviate the mystery of what it&amp;=
#39;s all about :)&lt;/div&gt;&lt;span class=3D"HOEnZb"&gt;&lt;font color=3D"#888888"&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to &lt;a href=3D"mailto:leo-editor%2Bunsubscribe@googlegroups.com" target=
=3D"_blank"&gt;leo-editor+unsubscribe@googlegroups.com&lt;/a&gt;.&lt;br&gt;
To post to this group, send email to &lt;a href=3D"mailto:leo-editor@googlegro=
ups.com" target=3D"_blank"&gt;leo-editor@googlegroups.com&lt;/a&gt;.&lt;br&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den-US" target=3D"_blank"&gt;http://groups.google.com/group/leo-editor?hl=3D=
en-US&lt;/a&gt;.&lt;br&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
" target=3D"_blank"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br&gt;
=A0&lt;br&gt;
=A0&lt;br&gt;
&lt;/font&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den-US"&gt;http://groups.google.com/group/leo-editor?hl=3Den-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--001a11c26ed617905b04dc9facbf--</t>
<t tx="ekr.20130806072439.18894">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--001a11c24b284b73f004dcadddd6
Content-Type: text/plain; charset=UTF-8

On Mon, May 13, 2013 at 3:15 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; This one is not "exhaustive", but in the interest of time management, I
&gt; decided to push it as is. I\'ll blog about more features later on.
&gt;
&gt; http://leo-editor.github.io/valuespace-intro.html
&gt;

Thanks Ville, I\'ll look at it in detail later today.

Edward

--001a11c24b284b73f004dcadddd6
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Mon, May 13, 2013 at 3:15 PM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;This one is not &amp;quot;exhaustive&amp;quot;, but =
in the interest of time management, I decided to push it as is. I&amp;#39;ll bl=
og about more features later on.&lt;div&gt;
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"http://leo-editor.github.io/valuespace-intro.html=
" target=3D"_blank"&gt;http://leo-editor.github.io/valuespace-intro.html&lt;/a&gt;&lt;/=
div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks Ville, I&amp;#39;ll look at it in d=
etail later today.&lt;br&gt;
&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--001a11c24b284b73f004dcadddd6--</t>
<t tx="ekr.20130806072439.19486">As of rev 5650, Leo contains support for \@testsetup nodes. At present, they
work only when running unit tests locally.

In effect, @testsetup nodes provide common setup code for all following 
@test and @suite nodes.  Such common setup code is the real reason for 
having custom subclasses of unittest.TestCase.  This Leonine 
solution is much than either:

a) @testclass nodes (which I never use) or

b) "injecting" common test code using::

    exec(g.findTestScript(c,\'@common name-of-common-test-code\'))

Leo's test-execution code prepends the body text of an @testsetup node to
all following @test and @suite nodes. Multiple @testsetup nodes may appear
in an outline. The range of an @testsetup node extends over all following
@test and @suite nodes until the next @testsetup node is seen (in outline 
order).
</t>
<t tx="ekr.20130806072439.19631"></t>
<t tx="ekr.20130806072439.19654">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

Some people seem to think that it is difficult to understand how Leo
handles "clone wars":  differing values for a cloned nodes that appear
in several external files.  That\'s not true.  The rule is::

    **The last clone that Leo reads wins.**

That is, for any cloned node C, Leo takes the value of C.h and C.b to
be the values specified by the last copy that Leo reads.

There is only one complication::

    **Leo reads the entire outline before reading any external
files.**

Thus, if C appears in x.leo, y.py and z.py, Leo will choose the value
for C in x.py or y.py, depending on which @&lt;file&gt; node appears later
in the outline.

Notes:

1. Whenever Leo detects multiple values for C when opening an outline, Leo
   creates a "Recovered nodes" tree. This tree contains all the various
   values for C, nicely formatted so that it is easy to determine where the
   differences are.

2. I\'ve just refreshed my memory by looking at the code.  The relevant methods are:

    fc.getLeoFile # Reads the outline, then calls at.readAll to read all external files.
    at.indicateNodeChanged # Adds data to c.nodeConflictList
    cacher.reportChangedClone # Adds data to c.nodeConflictList
    fc.handleNodeConflicts # Creates "Recovered Nodes" node and its children.

3. The present code is the simplest code that could possibly work. There is
no way Leo is going to do AI in order to implement complex rules for which
clones are "more important" than others. Thus, if you use cross-file
clones, it is up to *you* to know these rules and handle any resulting
conflicts. Imo, the "Recovered Nodes" feature is a big step forward for
Leo, and makes it impossible to lose data unless you willfully refuse to
examine the data.
</t>
<t tx="ekr.20130806072439.19655">From: Joon Ro &lt;joonpyro@gmail.com&gt;

Thanks for the explanation. As a matter of fact, I was having hard time 
understanding this. 

I had my source file in a @shadow node, and then I had a backup of that 
file as @file node, which had clones of the nodes of the source @shadow 
file and some other codes that I stashed. 

Whenever I changed the source code externally with leo closed, when I open 
leo, it made recovered nodes. The problem was since @file was placed 
"later" in the outline, leo kept putting the new changes I made to old, 
instead of new.

Now I understand how this works. but I think in multiple external file 
cases, it would make more sense if leo checks the file modification time 
when it makes decision which node is new, instead of just depending on the 
order of files in the outline. In above case, it is natural for me to have 
actual source nodes on the top of the outline and backup nodes on the 
bottom. Please let me know what you think. 
</t>
<t tx="ekr.20130806072439.19664">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

I continue to work feverishly on various aspects of static type checking.

That work lead to a discovery that may benefit you.  It's one of the most 
beautiful patterns I've ever created: it allows a program to simply and 
naturally build up huge strings without using any string operations.  
Generating an html file with minimal stress on the gc is an obvious 
application.  You could also say that the pattern creates a Pythonic way of 
using lisp-like algorithms, but more safely than in lisp.

Full details at the stc documentation page::
http://webpages.charter.net/edreamleo/stc/stc.html#a-beautiful-pattern-for-building-large-strings

</t>
<t tx="ekr.20130806072439.19665">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 10:02:40 AM UTC-6, Edward K. Ream wrote:

ReportTraverser uses this pattern at rev 288.  It is a remarkable 
simplification.
 

&gt; The revised r.div method will be something like::
&gt;
&gt;     def div(self,aList):
&gt;         compute old and new indents
&gt;         return [
&gt;             &lt;div&gt;, with old indent,
&gt;             aList, with new indent,
&gt;             &lt;/div&gt;, with old indent,
&gt;         ]
&gt;

This doesn't work!  aList won't have the proper indentation.  In 
particular, the following won't work::

    [['  ',z] for z in aList],

flatten_list will add the two spaces before the line, that is, before a 
newline. Instead, a hack is needed:

    return [
        div,
        join_list(aList,indent='  '),
        '\\n&lt;/div&gt;'
    ]

The new 'indent' keyword tells flatten_list to add the given indentation 
(two spaces, here), to strings that start with a newline.  The new code in 
flatten_list is::

        for i,item in enumerate(aList):
            if leading:                  yield leading
            for s in flatten_list(item):
                if indent:
                    if s.startswith('\\n'):
                        yield '\\n'+indent+s[1:]
                    else:
                        yield s
                else:
                    yield s
            if sep and i &lt; len(aList)-1: yield sep
            if trailing:                 yield trailing

The point is that the indentation must be "moved behind the newline".

Edward

</t>
<t tx="ekr.20130806072439.19666">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 2:01:17 PM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; This seems like a spiritual relative of "rope" data structure:
&gt;
&gt; http://en.wikipedia.org/wiki/Rope_(data_structure)
&gt;
&gt; http://www.sgi.com/tech/stl/Rope.html
&gt;

Thanks for these links.  Yes, there is a similarity.  However, the real 
beauty of new pattern is the flatten_list method.  It's the combination of 
the lists and flatten_list that gives the pattern real power.  We've just 
seen how the 'indent' keyword hack allows sophisticated processing of the 
lists.  I wouldn't expect more hacks to be needed, but I've been surprised 
before ;-)

Edward

</t>
<t tx="ekr.20130806072439.19667">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This seems like a spiritual relative of "rope" data structure:

http://en.wikipedia.org/wiki/Rope_(data_structure)

http://www.sgi.com/tech/stl/Rope.html


On Wed, Jan 2, 2013 at 3:03 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; I continue to work feverishly on various aspects of static type checking.
&gt;
&gt; That work lead to a discovery that may benefit you.  It's one of the most
&gt; beautiful patterns I've ever created: it allows a program to simply and
&gt; naturally build up huge strings without using any string operations.
&gt; Generating an html file with minimal stress on the gc is an obvious
&gt; application.  You could also say that the pattern creates a Pythonic way of
&gt; using lisp-like algorithms, but more safely than in lisp.
&gt;
&gt; Full details at the stc documentation page::
&gt;
&gt; http://webpages.charter.net/edreamleo/stc/stc.html#a-beautiful-pattern-for-building-large-strings
&gt;
</t>
<t tx="ekr.20130806072439.19668">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; Generating an html file with minimal stress on the gc is an obvious 
&gt; application.

Nice.  An HTML specific approach which avoids things like the
r.div_end() construct is the LXML element factory:
http://lxml.de/tutorial.html#the-e-factory

Cheers -Terry

</t>
<t tx="ekr.20130806072439.19669">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Yes, it's indeed an interesting pattern.

It would seem more useful in faster languages than python though; in
python, string operations (and gc) are faster in comparison to executing
other code, whereas in fast, more static languages (C++, Java, Go) avoiding
GC gives you great benefits (I saw 5x perf increase reported for some Go
app when eliminating GC).

</t>
<t tx="ekr.20130806072439.19670">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thursday, January 3, 2013 3:28:52 AM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; Yes, it's indeed an interesting pattern. 
&gt;
&gt; It would seem more useful in faster languages than python though; in 
&gt; python, string operations (and gc) are faster in comparison to executing 
&gt; other code, whereas in fast, more static languages (C++, Java, Go) avoiding 
&gt; GC gives you great benefits (I saw 5x perf increase reported for some Go 
&gt; app when eliminating GC).
&gt;

Thanks for these remarks.  I've enjoyed thinking about them.  A few 
responses:

1. This is a smallish pattern--it can't change the world, except insofar as 
something beautiful changes the world.

2. Otoh, the pattern changes the way I think about lisp and lisp-like 
patterns.  That's not nothing. For the first time, it makes list-oriented  
programming pattern completely safe.  It does this because it doesn't 
matter what each component list contains, nor does it matter *at all* what 
the shape of any part of the tree is.  This makes the pattern completely 
flexible.

3. The pattern can be generalized.  The pattern I described uses a tree of 
component strings to describe a (large) resulting string.  But one can 
easily imagine using lists to hold anything at all (of whatever tree shape) 
and then use another version of flatten_list to compose results of other 
types.  Alternatively, rather than composing a result, the analog of 
flatten_list could process the tree of lists in other ways.  So the most 
general version of the pattern is:

A) The tree of lists can contain any data whatever, especially including 
None,
B) The "producers" (visitors) can create subtrees of whatever shape,
C) The analog of flatten_list is free to do anything whatever with the 
resulting tree.

I suspect that these features are what appeal to lisp programmers ;-)

4. I'm not sure whether the pattern is more useful in "faster" languages or 
not.  True, anything that helps a feeble language like C++ will seem useful 
:-)  But points 1-3 above have nothing to do with speed: they just make 
programming simpler, more flexible, more powerful and more fun.

Imo, gc issues are important both in Python and in C++.  For stc, the only 
way to get reproducible timing statistics for tests was to do the following 
before running the test::

    for z in (0,1,2): gc.collect(z)

The ReportTraverser class no longer contains *any* calls to string.join, so 
one could imagine that all strings used in the code would be interned.  The 
generated tree actually contains nothing but *references* to strings, and 
if all strings are interned the references will not themselves cause any 
new strings to be allocated.

Naturally, gc issues are even more important in language like C++ without a 
gc.  Lol.  The preceding paragraph is more important for C++ than in 
Python.  So yes, in this sense I agree with you completely that the pattern 
is more useful for "fast" languages than for Python.

Thanks, Ville, for provoking all these pleasant thoughts :-)

Edward

</t>
<t tx="ekr.20130806072439.19671">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Jan 1, 2013 at 9:48 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; Generating an html file with minimal stress on the gc is an obvious
&gt; &gt; application.
&gt;
&gt; Nice.  An HTML specific approach which avoids things like the
&gt; r.div_end() construct is the LXML element factory:
&gt; http://lxml.de/tutorial.html#the-e-factory
&gt;

Beautiful.  With the list framework the revised r.div method would be
something like::

    def div(self,aList):
        compute old and new indents
        return [
            &lt;div&gt;, with old indent,
            aList, with new indent,
            &lt;/div&gt;, with old indent,
        ]

An example of the pattern in use::

    return [
        ...
        r.div([
            contents of the div,
        ]),
        ...
    ]

Similarly for span, etc. Thanks for pointing this out.  This is too good to
ignore.  I'll do it soon.

Edward</t>
<t tx="ekr.20130806072439.19785">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ramblings relevant to Leo, by the PyQt lead developer:

http://www.riverbankcomputing.co.uk/static/Docs/dip/architecture.html#the-realities-of-software-development

esp "The Myth of Toolkit Independence"



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.</t>
<t tx="ekr.20130806072439.19786">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Fri, Apr 27, 2012 at 1:49 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Ramblings relevant to Leo, by the PyQt lead developer:...esp "The Myth of Toolkit Independence"

Leo\'s core benefits greatly from toolkit independence, despite some
(usually minor) extra complexity. Obviously, this has not constrained
what plugins can do.

This is pretty much a non-issue for Leo.  The reason is clear enough:
the hundreds of commands defined in Leo\'s core are mostly
straightforward renditions of emacs text commands.  There, the
constraints of an abstraction layer do not pinch.  Furthermore, using
common gui-level code is a good application of the DRY (Don\'t Repeat
Yourself) principle, as recent bug fixes in the common code
illustrate.

The code for ensuring that the outline and body text are updated
properly (and in synch!) is much more difficult, but the difficulties
are fundamental: they have almost nothing to do with actual guis.

In short, I think Leo\'s design uses the best of the gui-dependent and
gui-independent approaches.

Edward</t>
<t tx="ekr.20130806072439.19787">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--047d7b417ed10845b104dba8f551
Content-Type: text/plain; charset=ISO-8859-1

On Sun, Dec 23, 2012 at 2:30 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; I am having some problems wrapping my head around how focus behaves
&gt; throughout leo.
&gt;
&gt; IMO it would be a good idea to have only one place in Leo where focus is
&gt; explicitly set. E.g. g.setFocus(widget). This implementetation would
&gt; suffice:
&gt;
&gt; def setFocus(widget):
&gt;   widget.setFocus()
&gt;
&gt; Reasoning: it would be handy to add debugging stuff here, to see why my
&gt; focus stuff is failing in alt-x go-anywhere handling.
&gt;
&gt; (My guess is treeFocusHelper only understanding focus being either in tree
&gt; or body, but no time to explore further now)
&gt;

In fact, there is only one such place: c.outerUpdate.  The various
xWantsFocus methods simply set ivars, which c.outerUpdate uses to set the
focus when a command completes.

The various xWantsFocusNow methods call c.outerUpdate immediately.  Usually
we don\'t want to do this, because it could cause screen flash, but
sometimes the immediate update is essential.

I\'ve marked this thread as a topic for implementers.  Such things will form
the basis for documentation for my successors.

Edward

--047d7b417ed10845b104dba8f551
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Sun, Dec 23, 2012 at 2:30 PM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div dir=3D"ltr"&gt;I am having some problems w=
rapping my head around how focus behaves throughout leo.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div=
&gt;IMO it would be a good idea to have only one place in Leo where focus is e=
xplicitly set. E.g. g.setFocus(widget). This implementetation would suffice=
:&lt;/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;def setFocus(widget):&lt;/div&gt;&lt;div&gt;=A0 widget.setFocus()&lt;/=
div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Reasoning: it would be handy to add debugging stuff=
 here, to see why my focus stuff is failing in alt-x go-anywhere handling.&lt;=
/div&gt;

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(My guess is treeFocusHelper only understanding focus b=
eing either in tree or body, but no time to explore further now)&lt;/div&gt;&lt;/div=
&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In fact, there is only one such place: c.=
outerUpdate.=A0 The various xWantsFocus methods simply set ivars, which c.o=
uterUpdate uses to set the focus when a command completes.&lt;br&gt;
&lt;br&gt;The various xWantsFocusNow methods call c.outerUpdate immediately.=A0 U=
sually we don&amp;#39;t want to do this, because it could cause screen flash, b=
ut sometimes the immediate update is essential.&lt;br&gt;&lt;br&gt;I&amp;#39;ve marked this=
 thread as a topic for implementers.=A0 Such things will form the basis for=
 documentation for my successors.&lt;br&gt;
&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--047d7b417ed10845b104dba8f551--</t>
<t tx="ekr.20130806072439.19788">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--20cf303f69e843800e04d18af3ee
Content-Type: text/plain; charset=ISO-8859-1

I am having some problems wrapping my head around how focus behaves
throughout leo.

IMO it would be a good idea to have only one place in Leo where focus is
explicitly set. E.g. g.setFocus(widget). This implementetation would
suffice:

def setFocus(widget):
  widget.setFocus()

Reasoning: it would be handy to add debugging stuff here, to see why my
focus stuff is failing in alt-x go-anywhere handling.

(My guess is treeFocusHelper only understanding focus being either in tree
or body, but no time to explore further now)



To unsubscribe from this group, send email to leo-editor+unsubscribe@googlegroups.com.
For more options, visit this group at http://groups.google.com/group/leo-editor?hl=en.


--20cf303f69e843800e04d18af3ee
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;I am having some problems wrapping my head around how focu=
s behaves throughout leo.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;IMO it would be a good i=
dea to have only one place in Leo where focus is explicitly set. E.g. g.set=
Focus(widget). This implementetation would suffice:&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;def setFocus(widget):&lt;/div&gt;&lt;div style&gt;=A0 w=
idget.setFocus()&lt;/div&gt;&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;Reasoning: it would b=
e handy to add debugging stuff here, to see why my focus stuff is failing i=
n alt-x go-anywhere handling.&lt;/div&gt;
&lt;div style&gt;&lt;br&gt;&lt;/div&gt;&lt;div style&gt;(My guess is treeFocusHelper only understan=
ding focus being either in tree or body, but no time to explore further now=
)&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups "=
leo-editor" group.&lt;br /&gt;
&lt;br /&gt;
To unsubscribe from this group, send email to leo-editor+unsubscribe@google=
groups.com.&lt;br /&gt;

For more options, visit this group at http://groups.google.com/group/leo-ed=
itor?hl=3Den.&lt;br /&gt;



--20cf303f69e843800e04d18af3ee--</t>
<t tx="ekr.20130806072439.19790">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

--089e0122f80868cb1b04dce55d84
Content-Type: text/plain; charset=ISO-8859-1

Someone may be interested in investigating a free CI system for Leo:

https://travis-ci.org/

This could e.g. create debian packages for daily builds, run unit tests,
check stuff with lint, try compiling with python3 so we (*cough*) wouldn\'t
have accidental print statements in the source...


To unsubscribe from this group and stop receiving emails from it, send an email to leo-editor+unsubscribe@googlegroups.com.

Visit this group at http://groups.google.com/group/leo-editor?hl=en-US.
For more options, visit https://groups.google.com/groups/opt_out.



--089e0122f80868cb1b04dce55d84
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

&lt;div&gt;Someone may be interested in investigating a free CI system for Leo:&lt;/=
div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"https://travis-ci.org/"&gt;https://travis-c=
i.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This could e.g. create debian packages =
for daily builds, run unit tests, check stuff with lint, try compiling with=
 python3 so we (*cough*) wouldn&amp;#39;t have accidental print statements in t=
he source...&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

-- &lt;br /&gt;
You received this message because you are subscribed to the Google Groups &amp;=
quot;leo-editor&amp;quot; group.&lt;br /&gt;
To unsubscribe from this group and stop receiving emails from it, send an e=
mail to leo-editor+unsubscribe@googlegroups.com.&lt;br /&gt;
&lt;br /&gt;
Visit this group at &lt;a href=3D"http://groups.google.com/group/leo-editor?hl=
=3Den-US"&gt;http://groups.google.com/group/leo-editor?hl=3Den-US&lt;/a&gt;.&lt;br /&gt;
For more options, visit &lt;a href=3D"https://groups.google.com/groups/opt_out=
"&gt;https://groups.google.com/groups/opt_out&lt;/a&gt;.&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;
&amp;nbsp;&lt;br /&gt;

--089e0122f80868cb1b04dce55d84--</t>
<t tx="ekr.20130806072439.19791">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

--14dae9cce074f39ccd04dce8d585
Content-Type: text/plain; charset=UTF-8

On Fri, May 17, 2013 at 2:59 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Someone may be interested in investigating a free CI system for Leo:
&gt;
&gt; https://travis-ci.org/
&gt;

Thanks for the link.  Looks like we would need a github repo.

Edward

--14dae9cce074f39ccd04dce8d585
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

&lt;div dir=3D"ltr"&gt;On Fri, May 17, 2013 at 2:59 AM, Ville M. Vainio &lt;span dir=
=3D"ltr"&gt;&amp;lt;&lt;a href=3D"mailto:vivainio@gmail.com" target=3D"_blank"&gt;vivain=
io@gmail.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;div class=3D"gmail_extra"&gt;&lt;div class=
=3D"gmail_quote"&gt;
&lt;blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex"&gt;&lt;div&gt;Someone may be interested in investigat=
ing a free CI system for Leo:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=3D"https://t=
ravis-ci.org/" target=3D"_blank"&gt;https://travis-ci.org/&lt;/a&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for the link.=C2=A0 Looks like we w=
ould need a github repo.&lt;br&gt;&lt;br&gt;Edward&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

--14dae9cce074f39ccd04dce8d585--</t>
<t tx="ekr.20130806072439.19990">@language rest

Leo 4.11 a1                                     August 16, 2013

Leo 4.11 a1 is now available at: http://sourceforge.net/projects/leo/files/Leo/4.10%20final/

Leo is a text editor, data organizer, project manager and much more.
See http://leoeditor.com/intro.html

Leo 4.11 contains over a year's work on Leo.

The highlights of Leo 4.11:
--------------------------



Links:
------
Leo:      http://leoeditor.com
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/projects/leo/files/
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20130806072439.19991"></t>
<t tx="ekr.20130806072439.19992"></t>
<t tx="ekr.20130806072439.19993">https://bugs.launchpad.net/leo-editor/+bug/800157

Fixed at rev 5077.</t>
<t tx="ekr.20130806072439.19994">Changed at.readEndOthers and at.readEndRef so that they
always set at.inCode = True
</t>
<t tx="ekr.20130806072439.19995">Created k.kill_one_shortcut, called from k.remove_conflicting_definitions.
</t>
<t tx="ekr.20130806072439.19996">The fix was to save/restore YScroll position in body.setSelectionAreas.

Failure case 1:
    - Search for something.
    - Manually scroll the pane.
    - Click scrolls the pane again.
    
Failure case 2:
    - reformat-paragraph.
</t>
<t tx="ekr.20130806072439.19997"></t>
<t tx="ekr.20130806072439.19998">https://bugs.launchpad.net/leo-editor/+bug/823267

When tabs are closed with the close tab 'X' on the tab, focus
should go to whichever tab becomes visible, but it does not,
it goes to an arbitrary tab which may not be visible. If you
then hit Alt-X expecting to cut the highlighted node in the
visible tab, you cut a node you can not see in a different
commander.

What I did:
    
- Refactored part of g.app.closeLeoWindow into g.app.selectLeoWindow.
- Added the new_c argument to g.app.closeLeoWindow and c.close.
- Changed several event handlers in TabbedFrameFactor so that they
  call g.app.selectLeoWindow as appropriate.</t>
<t tx="ekr.20130806072439.19999">https://bugs.launchpad.net/leo-editor/+bug/875327
</t>
<t tx="ekr.20130806072439.20000">https://bugs.launchpad.net/leo-editor/+bug/917814
</t>
<t tx="ekr.20130806072439.20001">https://bugs.launchpad.net/leo-editor/+bug/875323
</t>
<t tx="ekr.20130806072439.20002">https://bugs.launchpad.net/leo-editor/+bug/831658
</t>
<t tx="ekr.20130806072439.20003"></t>
<t tx="ekr.20130806072439.20004">The code that marks descendant @&lt;file&gt; nodes dirty now tests
p2.isAnyAtFileNode().  The old code tested p2.isAtThinFileNode().
</t>
<t tx="ekr.20130806072439.20005">CAUTION: new double click handling code

http://groups.google.com/group/leo-editor/browse_thread/thread/dbd63b9b38911906

The problem isn't single/double, but double click not stopping the
event processing.  It has the correct form:

if g.doHook('doubleClick1') is None:
   do-normal-double-click-stuff
g.doHook('doubleClick2')

but I think some other route through the code, or additional processing
of the event means that even thought the handler registered on
doubleClick1 returns non-None, the node goes into headline edit mode,
with focus.

This is bad, because the doubleClick1 on an @url node attempts to
select and raise a different commander (tab), so now you're looking at
one commander but focus is in another, so what you type trashes the
headline in the original commander.

The timer shouldn't be needed - a 'doubleClick1' hook which returns
non-None should stop the headline going into edit mode.  If you can
make that be the case, all is well.
</t>
<t tx="ekr.20130806072439.20006"></t>
<t tx="ekr.20130806072439.20007"></t>
<t tx="ekr.20130806072439.20008">- leoCommands.__init__ now sets self.db = {}
- initGlobalDB now returns {} instead of None if there is no cacher.
</t>
<t tx="ekr.20130806072439.20009">readOpenFile reads the private shadow file, detecting the encoding.
</t>
<t tx="ekr.20130806072439.20010"></t>
<t tx="ekr.20130806072439.20011">Examples:
    
    @edit C:/leo.repo/ipython-0.12/IPython/frontend/qt/console/pygments_highlighter.py
        # The filename comes from g.app.gui.runOpenFileDialog
    
    @file C:\leo.repo\ipython-0.12\IPython\frontend\qt\console\pygments_highlighter.py
        # Created by import.
        
The problem was the call to g.os_path_normpath in importDerived files:
it converts slashes to backslashes on windows (!!)
</t>
<t tx="ekr.20130806072439.20012">- Added getLanguageFromAncestorAtFileNode.

- Revised code in at.scanAllDirectives &amp; leoQtColorizer.scanColorDirectives.
</t>
<t tx="ekr.20130806072439.20013">qtBody can use the leoBody code.
</t>
<t tx="ekr.20130806072439.20014">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 187, in returnPressed
    self.scon.doSearch(t)
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 289, in doSearch
    self.addBodyMatches(bm)
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 257, in addBodyMatches
    self.its[it] = (p, None)
TypeError: unhashable type: 'QListWidgetItem'
</t>
<t tx="ekr.20130806072439.20015"></t>
<t tx="ekr.20130806072439.20016">Fixed several encoding problems related to this thread: @shadow - @encoding windows-1250 - problem
http://groups.google.com/group/leo-editor/browse_thread/thread/a4ba80559447218a/9a37a4ed6c44d452

There were several real problems fixed.  The summary: @encoding directives were always required.

In detail:

1. at.initWriteIvars now checks for a Python # -*- coding: line.
   If present, it must be the very first line.
   If present, it will override any @encoding directives.

2. g.getPythonEncodingFromString now can deal with either of the following lines:

    @first # -*- coding: utf-8 -*-
    # -*- coding: utf-8 -*-

That is, g.getPythonEncodingFromString can strip the leading @first.

3. g.readlineForceUnixNewline and x.propagate_changes now catch UnicodeDecodeError.
   This is very important: previously decoding errors crashed Leo!.

All unit tests pass with both Python 2.x and 3.x.

</t>
<t tx="ekr.20130806072439.20017">Added configure_hard_tab_width method.
</t>
<t tx="ekr.20130806072439.20018">https://bugs.launchpad.net/leo-editor/+bug/800311

Having set undo to word granularity, I often change something, move to a
different line and continue editing there. When I want to undo my last change,
Leo also undoes the change in the other place, as word granularity currently
only recognizes a new undo step when a new word is started, no matter if we
moved to a completely different position first.

The attached patch fixes the issue by remembering the previous cursor position.

Something else about the undo code:

- oldSel and newSel are never set to None in the constructor -&gt; it's quite hard
  to know they are there without reading the whole code

- It would be cool if there could be some more comments in that section; e.g. to
  tell that oldSel and newSel from which old_row, old_col, new_row and new_col
  actually mean: old = "the position right before doing the change" and new =
  "the position right after doing the change" and that old != "the position
  after the change before" (which I added as prevSel) - it took me ages to
  discover this

- There are duplicate "The new and old characters are not contiguous." checks.
  Are they different/necessary?

- The "We have just inserted a line." section is not only entered on a new line
  (see other attached patch)
</t>
<t tx="ekr.20130806072439.20019">https://bugs.launchpad.net/leo-editor/+bug/800312
</t>
<t tx="ekr.20130806072439.20020">https://bugs.launchpad.net/leo-editor/+bug/880975

Bug: The Meta+Ctrl section [of print-bindings] is always empty and this makes it
misleading.

Fix: the prefix list in k.printBindings must be sure that if two prefixes have a
common leading part the longer prefix appears first in the lists.
</t>
<t tx="ekr.20130806072439.20021">https://bugs.launchpad.net/leo-editor/+bug/823601
</t>
<t tx="ekr.20130806072439.20022">g.importFromPath ('html','C:/leo.repo/trunk/leo/modes/html.py')
returned the standard Python html module!

</t>
<t tx="ekr.20130806072439.20023">The fix was to use lowercase versions of docPart,leoKeyword,nameBrackets.
</t>
<t tx="ekr.20130806072439.20024">Worked around docutils problem in writeToDocutils.
</t>
<t tx="ekr.20130806072439.20025">not written: c:\recent\data3.html
exception removing: 
Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoAtFile.py", line 5280, in remove
    os.remove(fileName)
WindowsError: [Error 3] The system cannot find the path specified: ''
</t>
<t tx="ekr.20130806072439.20026">There were two bugs:
    
- baseScannerClass.skipWsToken must not skip newlines!
- tokenize must add any remaining whitespace at the end of the loop.
</t>
<t tx="ekr.20130806072439.20027">The code didn't work for c == None.
</t>
<t tx="ekr.20130806072439.20028"></t>
<t tx="ekr.20130806072439.20029">http://groups.google.com/group/leo-editor/browse_thread/thread/3c319daba37cd0ef

- Created a separate html importer, a very simple subclass of the xml scanner
  whose only difference is that it uses @data import_html_tags instead of @data
  import_xml_tags.

- The case of tags in @data import_html_tags and @data import_xml_tags no longer matters.

- checkTrialWrite now writes a file *with* sentinels, to handle @others correctly.
  It then removes the sentinels.
  
  This means that the import tests must use the correct @language directives.
  
- The import check now uses a token-based comparison.  
</t>
<t tx="ekr.20130806072439.20030">The fix was in g.pr:
    
Restored the call to sys.stdout.write(s2) (instead of print)

sys.stdout.write(s2) writes no additional newline at the end of s2.

Aha!  At last I know how to unit test g.pr, g.trace, etc.: redirect stdout!
</t>
<t tx="ekr.20130806072439.20031"> File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2074, in
scanAndCompare
   n1,n2,ok = self.compareTokens(tokens1,tokens2)
 File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2094, in
compareTokens
   else:      kind1,val1 = 'eof','',n1
ValueError: too many values to unpack
</t>
<t tx="ekr.20130806072439.20032">- Created stand-alone unit tests from @test import dataN.html.
- All leoImport unit tests may now be run externally.
    The Python unit tests were failing because of intermixed tabs and blanks.
    This was fixed by putting @tabwidth -4 in all @test nodes for Python.
- Made sure lines are printed when unit tests fail unexpectedly.
- Added .js &amp; javascript entries to global data structures for javascript unit tests.
- Completed xmlScanner.filterTokens.
- Don't create declaration nodes for html.
- Make sure html tags are as expected.
- Ignore case of html/xml tags.

Rev 4774.1.1:

Fixed all known html-import problems in a clean way. Unit tests exists, but they
use external files. They will be converted soon.

Important changes:

1. Added hasNestedClasses ivar in the baseScannerClass, True only for xml/html scanners.

When True, scanHelper and skipDecls allocate a substring to be used for all further scanning.
This is the *only* way to limit Leo's scanners properly.

This was, in essence, the fix for duplicate code generation arising from unbalanced tags:
skipToEndOfTag and skipToMatchingTag can't match outside the present tag because
the 's' argument passed to those methods has already been truncated.

This is a simple, elegant solution, and in essence the *only* proper solution.
For example, it would not work to past an 'end' argument to skipToEndOfTag and skipToMatchingTag
because the scanners inside those methods do not understand an 'end' argument.

Thus, the simplest, most efficient solution is for scanHelper and skipDecls to truncate the
string to be scanned. That way, the truncation happens at most once per "class".

2. Added hasDecls in the baseScannerClass, False only for xml/html scanners.

Various methods call skipDecls only if this ivar is True.

Rev 4773:

Fixed recent botch: both single and double quotes are allowed in html. 

Rev 4772:

Solved "between element" problem by extending classes up to the next class.
data.html imports "correctly", but not perfectly due to tag mismatches in
skipToMatchingTag.
</t>
<t tx="ekr.20130806072439.20033">http://groups.google.com/group/leo-editor/browse_thread/thread/421ebf4c3f2d5f59

Adding/deleting body editor 3 times hard-crashed Python

The changes were straightforward:
    
- set w.leo_label to None when calling unpackWidget.

- Test for w.leo_label before using it.

Added a minitest.  To test by hand, add the following @button nodes:
    
    @button add-ed
    w = c.frame.body.addEditor()
    
    @button del-ed
    w = c.frame.body.deleteEditor()
    
Click away in any order...</t>
<t tx="ekr.20130806072439.20034">The new add-comments command adds the comment character at the leftmost column.

The new delete-comments command will remove the comment characters inserted by
either the old or new version of the add-comments command.
</t>
<t tx="ekr.20130806072439.20035">Example: ctrl-shift-home.

The fix was to set self.widget = contents in leoQtLog.selectTab.
</t>
<t tx="ekr.20130806072439.20036">- Added disabled code to inject event filter in TabbedFrameFactory.createFrame.

- Added cycle-tab-focus command.

- cycle-all-focus command uses cycleTabFocus as a helper: this greatly simplifies the code.
    
- Added binding for "Find" tab in leoQtLog.createTab.

- DynamicWindow.createFindTab injects leo_find_widget ivar for leoQtLog.createTab.

- Added isLogWidget to leoQtLog and nullLog classes.  They are helpers for cycleAllFocus.

- Revised leoQtLog.selectHelper: selecting a new tab does *not* change logCtrl (log.widget).

- Added bindings to Find tab
</t>
<t tx="ekr.20130806072439.20037"></t>
<t tx="ekr.20130806072439.20038">The safe default pane is the body pane.  It's also the simplest code.
</t>
<t tx="ekr.20130806072439.20039">The code must be careful that the log widget supports the HighLevelInterface.
</t>
<t tx="ekr.20130806072439.20040"></t>
<t tx="ekr.20130806072439.20041">The bug was in k.handleDefaultChar.  No substantial change made to eventFilter.
</t>
<t tx="ekr.20130806072439.20042">What I did:
    
1. Fixed major bug in settingsTreeParser.visitNode.
   It now does p.copy() to protect the callers traverals.
   This could have significant impacts on people's settings.
   
2. Added g.app.unitTestDict for unit testing.

3. Leo now extends the list of @buttons and @commands, rather than replacing them.
   This is reasonable only because leoSettings.leo should never define *active*
   buttons or commands.
</t>
<t tx="ekr.20130806072439.20043"></t>
<t tx="ekr.20130806072439.20044">https://bugs.launchpad.net/leo-editor/+bug/804960

When we clone a node inside an @shadow (containing @others) node and then
refresh the @shadow node from file, the clone is unlinked and marked as changed.
If we now save, close the .leo file and open it again, the nodes are linked
again! (showing "cloned" symbol) User's thought: "How the heck can the file
change _between save and re-open_ when I changed nothing?"

I think what should be done about this is the check that Leo does when it opens
the file again, and that check should be done immediately after the "refresh
node from file" operation. Also, at this point, the "Recovered nodes" node
should appear (if file and node have both changed), not only after the next .leo
file close/reopen (as that happens quite infrequently, I guess, e.g. once a day
for me). Otherwise, the user can easily lose data.
</t>
<t tx="ekr.20130806072439.20045">&gt;  File "/path/to/leo/core/leoImport.py", line 2070, in reportMismatch
&gt;    line = repr(lines2[i])
&gt; IndexError: list index out of range
</t>
<t tx="ekr.20130806072439.20046">The fix was to at.putBody.
</t>
<t tx="ekr.20130806072439.20047">http://groups.google.com/group/leo-editor/browse_thread/thread/daf581ace0de871e

"has been modified outside of Leo. Overwrite this file?"

Steps to reproduce:

- Create a node "@edit ~/aaa.txt" assuming aaa.txt does not exist
- Ctrl-S save outline, log reports creating ~/aaa.txt
- Edit text in body
- Ctrl-S save outline, pop-up pops-up erroneously.

The problem was that replaceTargetFileIfDifferent should set root.v.at_read.
Now it does.

Note: both replaceFileWithString methods are part of the @shadow logic,
so there is no need to set any at_read bit in those methods.
</t>
<t tx="ekr.20130806072439.20048">https://bugs.launchpad.net/leo-editor/+bug/889175

I loaded an outline with @auto nodes pointing to an out of date path. So body
texts were empty. I updated the paths in the node headlines and saved the file,
expecting to be prompted for overwriting the existing files (now the paths were
correct again), but they were over-written with the blank content without
warning. Damn.

Steps to reproduce in a simpler way below, but don't write the
below of as contrived, because the above is the real problem.

Create @auto /home/tbrown/text.txt

enter text, save file

Edit headline to @auto /home/tbrown/Desktop/text.txt

enter text, save file

Edit headline back to /home/tbrown/text.txt

-----

I now see this happens also if the path change is in a @path node ancestor of the @auto node.
</t>
<t tx="ekr.20130806072439.20049">DynamicWindow.setGeometry now does *not* change the window size when using the qttabs gui.

Added a comment to this effect in leoSettings.leo.
</t>
<t tx="ekr.20130806072439.20050">https://bugs.launchpad.net/leo-editor/+bug/87933
    
- Fixed the Shift-Tab buglet by adding lower-case entries in app.tkNamesList
    This matches what is done in k.settingsNameDict.
- Created &lt;&lt; define global key dicts &gt;&gt; in leoApp.py.
- Changed si.val to si.stroke.
- Replaced g.bunch by GeneralSetting &amp; ShortcutInfo.
- Replaced bunchList by aList.
- Removed dynamic_menus "compile-time" constant.
- onAboutToShow now recomputes the contents of menus whenever menus are invoked.
- leo_update_shortcut now shows all shortcuts for a command.
- Wrote and tested merge_settings_dict.
</t>
<t tx="ekr.20130806072439.20051">Bug 879331: Redefining a key binding breaks menu items with same binding

https://bugs.launchpad.net/leo-editor/+bug/879331

&gt; Now I understand.  If I override the shortcut associated with the menu
&gt; item, in this case Alt-A, the menu breaks.

This is a serious bug!  The menu item now executes the command bound
to Alt-A!  Very bad.

=========

http://groups.google.com/group/leo-editor/browse_thread/thread/762e832909c3c530/d99d48eed45d1061

http://mail.google.com/mail/#inbox/1331909dd653f3c9

Redefining a binding, say for Alt-a, in x.leo will cause the sort-siblings menu
(bound to alt-a) to execute the command specified by the command bound to Alt-a!

https://bugs.launchpad.net/leo-editor/+bug/815564

This anomaly only occurs when all of the following conditions are true:

1) There is a global command name X that is the "same" as the root name of the
file containing a plugin Y. Here, "same" means equal after the command name is
converted to lower case and all underlines in the root name are replaced by
dashes.

2) A shortcut (a.k.a. keystroke) is bound to command name X.

When these conditions are true, then the Plugins dropdown menu shows the key
binding next to the plugin name and left-clicking the plugin name executes the
global command--and, there is no way to display the plugin's help.

Plugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not
by the old scrolledmessage.py plugin.

Leo-editor revision: 4433
OS: Ubuntu 11.04 (natty)

Startup log pane:
Leo Log Window
Leo 4.9 final, build 4411, June 21, 2011
Python 2.7.1, qt version 4.7.2
linux2
</t>
<t tx="ekr.20130806072439.20052">https://bugs.launchpad.net/leo-editor/+bug/815564

===== Probably the same as bug 879331 =====

This anomaly only occurs when all of the following conditions are true:

1) There is a global command name X that is the "same" as the root name of the
file containing a plugin Y. Here, "same" means equal after the command name is
converted to lower case and all underlines in the root name are replaced by
dashes.

2) A shortcut (a.k.a. keystroke) is bound to command name X.

When these conditions are true, then the Plugins dropdown menu shows the key
binding next to the plugin name and left-clicking the plugin name executes the
global command--and, there is no way to display the plugin's help.

Plugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not
by the old scrolledmessage.py plugin.

Leo-editor revision: 4433
OS: Ubuntu 11.04 (natty)

Startup log pane:
Leo Log Window
Leo 4.9 final, build 4411, June 21, 2011
Python 2.7.1, qt version 4.7.2
linux2
</t>
<t tx="ekr.20130806072439.20053">k.computeInversBinding() called by print-commands and for auto-completion.

k.bindKey sets k.bindingsDict.

k.bindKeyToDict sets k.masterBindingDict.
</t>
<t tx="ekr.20130806072439.20054">The new TM.findMarkForUnitTestNodes allows both
TM.FindAllUnitTestsNodes and createOutline to be much simpler.
</t>
<t tx="ekr.20130806072439.20055"></t>
<t tx="ekr.20130806072439.20056">Fixing this bug is important: it allows you to set a default
page width in myLeoSettings.leo for use, for example, in the
reformat-paragraph command.

Without a proper default c.page_width setting, you would have
to use @page_width instead, which is much less convenient.

The fix was the following lines in c.initConfigSettings:
    
    c.page_width = getInt('page_width') or 132
        # 2012/02/27: this appears to be a fix of an *ancient* bug.
</t>
<t tx="ekr.20130806072439.20057">The fix was easy: moveWithinLineHelper does *not* call
leoMoveCursorHelper for the case spot == 'end-line'
</t>
<t tx="ekr.20130806072439.20058">The following tabs remain.  They are Leo-specific, not jEdit specific:
blank, docpart, leokeyword, link, name, nameBrackets, tab, url.
</t>
<t tx="ekr.20130806072439.20059">End going to only physical line and not to the logical (wrapped) one)... 
</t>
<t tx="ekr.20130806072439.20060">http://groups.google.com/group/leo-editor/browse_thread/thread/c933b28c27d3b9a7

Ref 4952 of the trunk fixes bug 87933:
"Redefining a key binding breaks menu items with same binding"

This was a difficult bug to fix--I rewrote significant parts of Leo's
code that deals with settings for key binding.

Besides fixing the bug, Leo computes accelerators in menu items
dynamically when the user activates a menu.  The accelerator shows
*all* keys bound to the command associated with the menu item.

From the checkin log:

A major reorganization of the configuration code that fixes bug 87933
Redefining a key binding breaks menu items with same binding

- Replaced g.bunches with ShortcutInfo objects...

- Wrote and tested make_settings_dict and its helpers,
  merge_settings_dicts, invert and uninvert.

- Leo computes menu texts dynamically in onAboutToShow.

- leo_update_shortcut now shows all shortcuts for a command.

- leoMenu.define_enable_dict encapsulates data used to enable/disable
  commands regardless of where those commands appear in Leo's menu. The old
  code assumed that a fixed menu location for all commands that could be
  enabled or disabled.</t>
<t tx="ekr.20130806072439.20061">https://bugs.launchpad.net/leo-editor/+bug/930726

Bug: If the node is not expanded already, then the position
is left on the parent, not the first child.

Function expandNodeAndGoToFirstChild() is referenced only
once in LeoPyRef.leo. This reference is in table of public
Leo commands.

The node in which expandNodeAndGoToFirstChild() is defined
also contains the definition of function
expandNodeOrGoToFirstChild(). At present these two functions
are equivalent. The comments including the header for the
node imply that they should not be equivalent and that
expandNodeAndGoToFirstChild() is not correctly implemented.
</t>
<t tx="ekr.20130806072439.20062">https://bugs.launchpad.net/leo-editor/+bug/869429
Undo and Redo delete from context menu does not redo properly

The fix was to deletenodes_rclick in contextmenu.py.
The fallback position should be c.rootPosition()</t>
<t tx="ekr.20130806072439.20063">https://bugs.launchpad.net/leo-editor/+bug/924123

These syntax errors were minor in the sense that they had no
effect on Leo's users, but they were a significant
distribution issue because Linux packages are not to have
such errors.

I removed the following files. Apparently, they are used nowhere in Leo. 
    
    leo/core/leo_Debugger.py
    leo/core/leo_FileList.py"
    leo/core/leo_RemoteDebugger.py
    leo/core/leo_Shell.py
    leo/core/leo_run.py

This files no longer exists:

    leosax.py</t>
<t tx="ekr.20130806072439.20064">https://bugs.launchpad.net/leo-editor/+bug/501636
</t>
<t tx="ekr.20130806072439.20065">https://bugs.launchpad.net/leo-editor/+bug/799695

The fix was simply to call c.recolor_now(incremental=False)
</t>
<t tx="ekr.20130806072439.20066">https://bugs.launchpad.net/leo-editor/+bug/824087

The fix was to bind Ctrl-F4 to close-window, instead of Alt-F4.

I instantly like this new binding.
</t>
<t tx="ekr.20130806072439.20067">https://bugs.launchpad.net/leo-editor/+bug/923301
</t>
<t tx="ekr.20130806072439.20068"></t>
<t tx="ekr.20130806072439.20069">@language rest

Example: typing in this rest section recolors as *Python*.
The correct coloring is restored when the entire text is recolored.

In this case, a workaround, and a performance improvement, would be to put
the ``@language python`` directive before the ``language rest``.

@language python


</t>
<t tx="ekr.20130806072439.20070">- Added scanToCursor argument to c.scanAllDirectives in c.insert/removedComments.

- Added scanToCursor argument to get_directives_dict_list in c.scanAllDirectives.

- get_directives_dict_list sets scanToCursor only for the initial (root) node.

- g.get_directives_dict scans to cursor for @language directives is scanToCursor is True.
</t>
<t tx="ekr.20130806072439.20071">https://bugs.launchpad.net/leo-editor/+bug/952365

Improved error reporting and checking, but the file won't be created if
createActualFile takes an IOError.
</t>
<t tx="ekr.20130806072439.20072">https://bugs.launchpad.net/leo-editor/+bug/951921
</t>
<t tx="ekr.20130806072439.20073">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 553, in doCommand
    val = command(event)
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 2120, in flattenOutline
    c.importCommands.flattenOutline(fileName)
  File "c:\leo.repo\trunk\leo\core\leoImport.py", line 479, in flattenOutline
    theFile.write(s)
TypeError: must be str, not bytes
</t>
<t tx="ekr.20130806072439.20074">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoPlugins.py", line 337, in callTagHandler
    result = handler(tag,keywords)
  File "c:\leo.repo\trunk\leo\plugins\viewrendered.py", line 560, in update
    f(s,keywords)
  File "c:\leo.repo\trunk\leo\plugins\viewrendered.py", line 655, in update_graphics_script
    pc.gs = QtGui.QGraphicsScene(pc.splitter)
AttributeError: 'ViewRenderedController' object has no attribute 'splitter'
</t>
<t tx="ekr.20130806072439.20075">Selecting body editor with clicks doesn't save/restore visual ivars.
The solution would be to create a new onClick event handler...
</t>
<t tx="ekr.20130806072439.20076">In earlier version of Leo if one runs test externally with the selected
position under @test node, that @test was executed with (run-marked-unit-tests-externally)

The fix was to the "important special case" in TM.findAllUnitTestNodes.
</t>
<t tx="ekr.20130806072439.20077">http://groups.google.com/group/leo-editor/browse_thread/thread/bb063866875a81c3#

The fix is simply to special-case file:/// on Windows in g.computeFileUrl.
</t>
<t tx="ekr.20130806072439.20078"></t>
<t tx="ekr.20130806072439.20079">https://bugs.launchpad.net/leo-editor/+bug/844953

1. Open two empty files with the LEO revision 4451/trunk using the qttabs GUI and save them both.
2. Create a new node and write "Abc" in its head.
3. Select "Copy Node" from the outline menu.
4. Select "Paste Node As Clone" from the outline menu:
   Node is not inserted as clone, but inserted as a copy in the second file/tab.

Sometimes even a standard Copy-Paste action results in the node being inserted in the other file.

EKR: This a unity menu problem, not a problem with the paste commands per se.

http://qt-project.org/forums/viewthread/15366/

</t>
<t tx="ekr.20130806072439.20080"></t>
<t tx="ekr.20130806072439.20081">http://groups.google.com/group/leo-editor/browse_thread/thread/808ba29fec64e590

For almost 15 years Leo has been written using a limited set of classes.
These were "big" classes, implementing major modules of Leo. There is
nothing wrong with these classes, and they will remain unchanged, except
insofar as they will be simplified by the classes I am about to discuss.

Recently, I have become aware that Leo's code could be considerably
simplified by adding "smallish" classes. Indeed, I now think the
distinction between big and small classes is unhelpful. The most important
part of the design of a class is simply whether a class implements an
understandable concept.

With this introduction, here is a short summary of Leo's new classes. Some
have not been fully implemented. Getting them all to work is a big part of
the rewrite of Leo's config, loading and key-handling code.

</t>
<t tx="ekr.20130806072439.20082">This class handles all the messy details of loading .leo files at startup.
This class encapsulates almost all the code in runLeo.py, as well as some
methods in leoGlobals.py that really belong somewhere else.

Creating a class simplifies the code to a surprising degree: 5 or 6 ivars
of the class represent command-line options. These ivars are always
available: there is no need to pass them around as arguments.
</t>
<t tx="ekr.20130806072439.20083">The ModeController class represents a collection of modes. The ModeInfo
class represents a single mode.

Without these classes, the code in leoKeys.py is extremely hard to
understand. In fact, the old code was a perfect example of the problems
with procedural programming: client code was burdened with knowing way too
many details about matters that it shouldn't have to know about.
Furthermore, that data itself is hard to understand: it's too "raw". These
classes provide "identity" for data. repr(aModeInfo) is surprisingly
useful.</t>
<t tx="ekr.20130806072439.20084">This class represents the global log.  It hides the details of the log
from the g.app class and several other pieces of code.

At present, the interface to this class is procedural.  That is, the
present g.app methods that will be moved into this class have a
procedural rather than descriptive nature.  I'm not sure how much this
will change, but creating this class may create opportunities that
were not apparently previously.

</t>
<t tx="ekr.20130806072439.20085">The KeyStroke class is a wrapper for plain strings. It's most important
attribute is its *identity*. It announces that its contents is a
canonicalized value, not a raw user settings string or any other kind of
data associated with key handling.

Similar remarks apply to ShortcutInfo objects. Their identity clarifies the
code. The former code used g.bunches. In complex code such as leoKeys.py,
such anonymous objects really obfuscate matters.

</t>
<t tx="ekr.20130806072439.20086">This class solves a problem that has been annoying me ever since I created
leoEditCommands.py. The problem is this: without this class the classesList
has to be defined at the end of the module, after all classes have been
imported. Worse, several module-level methods were needed to manage the
classesList.

In the new scheme, each Commander creates an EditCommandsManager, and the
code that previously had to call the module-level method
leoEditCommands.x(c) now simply calls c.editCommandManager.x(). This is
much cleaner and avoids several very ugly imports. Which brings me to...
</t>
<t tx="ekr.20130806072439.20087">Now, most modules import only leo.core.leoGlobals. This simplifies Leo's
startup process considerably. This is something that I've wanted to do for
a long time. To make this work, it is *essential* that leoGlobals.py import
*no* other Leo modules.

However, Leo's core still imports leo.core.leoNodes in order to create
positions, vnodes, etc. It would be straightforward to eliminate these by
creating g.app factory methods, but there is no urgent reason to do so.

The ctor for the Commands class imports many modules. This is essential to
break what would otherwise be circular dependencies among Python imports.
We can extend this pattern by creating more classes, as was done with the
EditCommandsManager class.
</t>
<t tx="ekr.20130806072439.20088">leoGlobals.py now contains a section called ``&lt;&lt; global switches &gt;&gt;``

This contains global tracing switches. Experience shows that leoGlobals.py
is the most convenient place for such switches. This section also contains
switches that enable new code bases. Recent examples were::

   new_load = False # True: .leo files are loaded at most once.
   if new_load: print('***** new_load')

   new_modes = False # True: use ModeController and ModeInfo classes.
   if new_modes: print('***** new_modes')
</t>
<t tx="ekr.20130806072439.20089">http://groups.google.com/group/leo-editor/browse_thread/thread/5fdadfba113e12d9/fa329534654ecfec

Leo now reports bzr version numbers and dates automatically.  Very important.
</t>
<t tx="ekr.20130806072439.20090"></t>
<t tx="ekr.20130806072439.20091">Only the high-level interface (baseTextWidget) used the low-level interface.
</t>
<t tx="ekr.20130806072439.20092">Removed the following unused methods::
    
    bind                c.bind also removed.
    configure
    cget
    event_generate      g.app.gui.event_generate does exist.
    getWidth
    indexIsVisible      Also removed for leoEditCommands: scrollHelper and measure.
    mark_set
    onChar              Fortunately, never used anywhere
    pack                Used only in Tk code
    scrollLines
    set_width           Removed do-nothing calls in Leo's core.
    tag_add             Removed do-nothing calls in qt colorizer.
    tag_bind            Removed do-nothing calls in qt colorizer.
    tag_delete          Removed do-nothing calls in qt colorizer.
    tag_names
    tag_ranges
    tag_remove
    update
    update_idletasks
    xyToPythonIndex
    yview
</t>
<t tx="ekr.20130806072439.20093">leoQTextEditWidget overrides base toPythonIndex toPythonIndexRowCol.

The versions that call g.toPythonIndex are much slower than
leoQTextEditWidget.toPythonIndex.

The following classes have a toPythonIndex method:

leoQTextEditWidget (fast)

HighLevelInterface: calls g.toPythonIndex.
baseTextWidget: calls g.toPythonIndex.
leoFind: calls g.toPytonIndex.
leoQtBaseTextWidget: calls g.toPythonIndex.
</t>
<t tx="ekr.20130806072439.20094">This is an important addition to reliability.

It ensures that body/log.widget and body.bodyCtrl/log.logCtrl are always in synch.
</t>
<t tx="ekr.20130806072439.20095">Added eventFilter in createFrame in SDI/TabbedFrameFactory classes
</t>
<t tx="ekr.20130806072439.20096"></t>
<t tx="ekr.20130806072439.20097">All top-level code in leoTest.py now resides in the
TestManager class.

The c.testManager object eliminates the need for imports of
leo.core.leoTest within unitTest.leo, an excellent
simplification.

Furthermore, there is no need to access the testUtils class:
everything is in c.testManager.

The TestManager class substantially clarifies *all* the code
in leoTest.leo. This is surprisingly important because the
testing code is hardly straightforward.
</t>
<t tx="ekr.20130806072439.20098">This is a major restructuring of Leo's code:
    
Initing settings files and local files is now as simple as possible.

g.openWithFileName now simply calls lm.loadLocalFile.

Commands.__init__ now calls c.finshCreate.

g.app.newCommander now simply calls Commands.__init__,
a *huge* collapse in complexity.

===== Details

The g.app.config class is now substantially simpler:
complex methods have moved to the LoadManager.

The new LoadManager class handles all aspects of Leo's
complex startup process, including most importantly the very
complex process by which Leo reads user settings.

As a side effect, c.config.get is now *much* simpler than
before: it search one, and *only* one dictionary to discover
settings.

Reading local files must be done *twice*. The first read
discovers settings, the second read uses those settings to
open the file. The first read always uses a null gui; the
second read uses g.app.gui, whatever that happens to be.

LM.openLocalFile embodies all aspects of the complex
strategy necessary for opening a local file twice. The first
read creates a PreviousSetting object, which is then passed
to LM.openFileByName, which in turn passes the
PreviousSetting object to the ctor for the Commander.
Finally, the PreviousSetting object inits c.config.

Because of the previousSettings object, the call to
LM.openFileByName does *not* need to "synthesize" a link to
c1 using c.hash. This stamps out bug 568452 at its source.

The crucial point is the previous settings get passed along
to the Commander ctor, *before* LM.openFileByName calls
c.fileCommands.openLeoFile to create the outline.

</t>
<t tx="ekr.20130806072439.20099">- Moved findSettingsPosition to LocalConfigManager.

- Moved printSettings to LocalConfigManager.
</t>
<t tx="ekr.20130806072439.20100"></t>
<t tx="ekr.20130806072439.20101">It's important to use only one version of the code.
</t>
<t tx="ekr.20130806072439.20102">This important new method allows scripts to traverse an outline, deleting nodes
during the traversal. The pattern is::

    p = c.rootPosition()
    while p:
    if &lt;delete p?&gt;:
        next = p.positionAfterDeletedTree()
        p.doDelete()
        p = next
    else:
        p.moveToThreadNext()
        
This method also allows scripts to *move* nodes during a traversal, **provided**
that nodes are moved to a "safe" spot so that moving a node does not change the
position of any other nodes.

For example, the move-marked-nodes command first creates a **move node**, called
'Clones of marked nodes'. All moved nodes become children of this node.
**Inserting** these nodes as children of the "move node" does not change the
positions of other nodes. **Deleting** these nodes *may* change the position of
nodes, but the pattern above handles this complication cleanly.
</t>
<t tx="ekr.20130806072439.20103">This was Tk code, and so can not possibly be useful now.

Also removed the settings specific to the Tk colorizer.
</t>
<t tx="ekr.20130806072439.20104">Rewrote the shellCommand, shellCommandOnRegion and executeSubprocess methods.
</t>
<t tx="ekr.20130806072439.20105">Unit tests can test this ivar.
</t>
<t tx="ekr.20130806072439.20106">An useful convenience method now that external unit tests can use config settings.
</t>
<t tx="ekr.20130806072439.20107"></t>
<t tx="ekr.20130806072439.20108"></t>
<t tx="ekr.20130806072439.20109">After so many years of confusion the problem is now apparent:
the Windows console uses code page 437: which is just extended ascii.

chcp 65001 is equivalent to utf-8, and it would be good to use,
but at present bzr goes nuts and changes to another code page!

So for the moment I'll have to live with what is, in effect, plain ascii.
</t>
<t tx="ekr.20130806072439.20110">On Ubuntu only, the auto complete popup is system-wide modal, it should only be modal over Leo windows.

However, there does not seem to be any fix:
http://groups.google.com/group/leo-editor/browse_thread/thread/171aaf79e0bea256

All works well on Windows 7.  I do see the "system-wide" model
behavior on Ubuntu.

This appears to be a Ubuntu-specific bug.  Indeed, the popup is a
QListWidget.  Such widgets have a setWindowModality method::

    setWindowModality ( Qt::WindowModality windowModality )

The valid modalities are at: http://doc.qt.nokia.com/4.7-snapshot/qt.html#WindowModality-enum

NonModal: The window is not modal and does not block input to other
windows.

WindowModal: The window is modal to a single window hierarchy and
blocks input to its parent window, all grandparent windows, and all
siblings of its parent and grandparent windows.

ApplicationModal: The window is modal to the application and blocks
input to all windows.

None of these would appear to be a system-wide modality, and
furthermore, the default is supposed to be NonModal.

Anyway, calling setWindowModality(QtCore.Qt.NonModal) does not seem to
have much effect on Ubuntu, so I think I can safely say there is
nothing more I can do. 
</t>
<t tx="ekr.20130806072439.20111"></t>
<t tx="ekr.20130806072439.20112">Leo's core now supports opening URL's in several ways:

1. By Control-Clicking the headline of a node containing a URL in its
   headline or the *first* line of its body text.
   
2. The open-url command opens a URL in a nodes headline or the first
   line of its body text.
   
3. By Control-Clicking any URL in the body text.

Notes::

- URL's may optionally start with ``@url``.  Leo removes this prefix
  before trying to open the URL.

- Names of existing files are considered valid URL's. In that case, Leo
  prepends ``file://`` to the file name.
  
- Relative file names are resolved to c.openDirectory, the directory of the
  .leo file.
  
- You may use the {{expression}} syntax in any ``file://`` URL, including
  ``file://`` URL's created from file names.
  
- The bookmarks.py plugin supports all of the features listed above.</t>
<t tx="ekr.20130806072439.20113">Wouldn't it be great if we all could remember what we, and others, have
already done? Now there is an easy way to do so: just put your
commonly-used scripts in global @command nodes. You do this by placing each
@command node as a child of an @commands node in your @settings tree in
myLeoSettings.leo.

Leo's tab completion now shows you all @command nodes, all @button nodes
and all the commands associated with those nodes.  To see the list of
all your @command nodes, simply type::

    &lt;Alt-X&gt;@c&lt;Tab&gt;
    
When I do that, I see::

    @command-align-eq-signs
    @command-c-to-python-clean-docs
    @command-clean-all-blank-lines
    @command-clean-body
    @command-clean-diff
    @command-clean-spellpyx
    @command-cls
    @command-count-pages
    @command-create-@auto-nodes
    @command-create-def-list
    @command-flatten-script
    @command-join-node-above
    @command-join-node-below
    @command-load-all-leo-files
    @command-preview-node
    @command-preview-tree
    @command-print-cmd-docstrings
    @command-promote-bodies
    @command-remove-newlines
    @command-split-defs
    
For each @command (and @button node) Leo creates the correspond commands
without the leading "@command-", so you can use typing completion on the
shorter command name. For example, when writing documentation, I often use
the promote-bodies script. After the reminder above, I can execute the
script with::

    &lt;Alt-X&gt;prom&lt;Tab&gt;-&lt;Tab&gt;&lt;Return&gt;
    
Of course, to rexecute the command later, I can use repeat-complex-command
(Ctrl-P).

Summary
=======

If you put all your commonly-used scripts in @command nodes, you can use
&lt;Alt-X&gt;@c&lt;Tab&gt; to remind yourself of their names. That is, Leo's typing
completion eliminates the need for memory-intensive retrieval. I'm not
likely ever to forget typing completion.

This scheme takes full advantage of Leo's organization strengths and
*concentrates* those strengths by putting all the to-be-organized material
in one place. This allows for easy reorganization: changing command-name
prefixes, for instance, would be straightforward.
</t>
<t tx="ekr.20130806072439.20114">Small improvements the unit testing framework created big results. They
completely eliminate the overhead in running unit tests:

    - The run-marked-unit-tests-externally (Alt-4) command runs all marked
      @test nodes. To choose tests, just mark them.
    - Alt-4 now saves the .leo file first.
    - Almost all unit tests may now be run externally:
        - External unit tests always read config settings.
        - The nullGui now uses a fully capable string-based body widget.
        - The nullGui now uses the regular undoer.
    - Unit tests now always have the sources available.
    - Disabled messages on external unit tests.
    - The unit test commands always run a selected @test node.

These improvements mean that almost all unit tests may be run externally.
In turn, this creates a remarkable work flow::

    Edit
    Alt-4
    Edit
    Alt-4
    ...

The energy difference between weightless and heavy is astounding. Try the
new way: you will surely like it.

**Notes**:

Experience shows that being able to run the desired unit tests *without*
selecting any particular node makes an amazingly large difference. Being
able to run all and only marked unit tests is a big step forward.

If a marked node is neither an @test node nor an @suite node, all nodes in
the tree are considered to be marked.
</t>
<t tx="ekr.20130806072439.20115">Support for the open-with command is now part of Leo's core.</t>
<t tx="ekr.20130806072439.20116">Leo can act like a drop-in replacement for SciTe. Suppose you do::
    
    leo x.y
    
where y is not "leo". Leo now opens an unnamed .leo file consisting of
@edit x.y. if x.y exists, the @edit node contains the entire file;
otherwise the node is empty.

When you save the .leo files or close the Leo window Leo saves x.y if it
has been changed, but Leo does *not* prompt you to save the "temporary"
.leo file.

https://bugs.launchpad.net/leo-editor/+bug/381527</t>
<t tx="ekr.20130806072439.20117">http://groups.google.com/group/leo-editor/browse_thread/thread/3666397da2a0d05f/758071d6d9516ab9

The right-click context menu on the tabs in the tabbed window mode (the
default) has a 'Detach' option, if there's more than one outline/tab, and a
Re-attach all option, if there's a detached outline window out there.

Now there's also 'Horizontal tile', and 'Vertical tile', which detach the
tab and then tile its window with the window from which it was detached.

This is very helpful for moving nodes between outlines, I was rearranging
the windows by hand and setting one to 'always on top' with the window
manager before. Note: there's a @setting to determine whether dragging
nodes between outlines copies or moves them.

Depending on your OS / window manager, tiling / placement may be somewhat
off, and may work better with or without the window being maximized before
tiling, you'll have to experiment.

When you close an outline window created by detaching a tab the outline is
just re-attached as a tab. This means it's now possible to reattach just
one outline, rather than having to use the 'reattach all' option.
</t>
<t tx="ekr.20130806072439.20118">The leoInspect module provides answers to questions about Python source
code. leoInspect is an elegant and easy-to-use front end for Python's AST
(Abstract Syntax Tree) trees *and* a window into a richly connected set of
semantic data built *from* AST trees.

For details, see http://leoeditor.com/leoInspect.html</t>
<t tx="ekr.20130806072439.20119">Leo's abbreviation code is now simpler and more general than before. The
downside is that you will likely have to revise your abbreviations. I
believe the extra work will be well worthwhile.

Here are the changes:

1. Abbreviations may consist of *any* sequence of characters, including
whitespace or "special" characters. You may include whitespace characters
in definitions using the '\t' and '\n' escapes. However, whitespace may
only appear at the *end* of definitions.

2. You must take care to disambiguate abbreviations if one is a prefix of
   another.

Here is an example of both points.  As always, you define
abbreviations in the body of an @global-abbreviation node or
@abbreviation node::

    nc =@nocolor\n
    nc\n=@nocolor\n
    nc\t=@nocolor\n

    ncn=@nocolor-node\n

As you can see, the definitions uses whitespace at the end
of the definition of "nc" to prevent it from being expanded
when typing "ncn".

3. The reason I call these abbreviations "instant" is that they can be
triggered on *any* keystroke, not just the end of a "word".  This
allows you to define::

    teh=the

Hurray!

4. Two rules limit scans.  They are useful and shouldn't cause
hardships.

A.  The backspace and delete characters *never* trigger substitutions.

B. The scan for definitions ends at the first newline
character. Therefore, whitespace will have effect only at
the *end* of a definition.

**Important**: these rules can cause problems when *defining*
abbreviations:  it's easy to trigger an unwanted definition.  The
solution is to use rule 4B:

I want to type::

    ncn=@nocolor-node\n

But I **cant** type this directly if nc is already defined!  The trick
is to type::

   nxcn=@nocolor-node\n

and then delete the leading x with a backspace character.

Of course, you could also turn abbrevions off while defining abbreviations...

Instant abbreviations solve the problems with Brazilian
keyboards. Just define::

    ~a=ã
    ~A=Ã
    etc.

This works regardless of keyboard, regardless of OS, etc.
You might want to define::

    ~\a=~a
    ~\A=~A

in the somewhat unlikely event that you want to type ~a rather than,
say, ~+a.  Of course, you don't need these, provided you remember to
type ~xa &lt;Right&gt;&lt;Delete&gt; :-)
</t>
<t tx="ekr.20130806072439.20120"></t>
<t tx="ekr.20130806072439.20121">http://leoeditor.com

- Added link to home page from the TOC.

- Removed online-tutorial link.

- Added search box to Leo's home page.

- Added link to glossary from Leo's home page.

- Added scaled screen shot to Leo's home page.

- Brought screen shots up to date.
</t>
<t tx="ekr.20130806072439.20122">Code that wants to set a particular part of a widget's style sheet calls::

   g.app.gui.update_style_sheet(w,key,value)

where w is the widget whose stylesheet is to be changed, key is unique
to the method (or group of methods), and value is the new version of
the stylesheet **for the particular key** to be added.  Examples::

   # In setEditorColors.
   sheet = 'background-color: %s; color: %s' % (bg,fg)
   g.app.gui.update_style_sheet(obj,'colors',sheet)

   # In add_border.
   sheet = "border: %spx solid %s" % (
       c.focus_border_width,c.focus_border_color)
   self.update_style_sheet(w,'border',sheet)

   # In remove_border.
   sheet = "border: %spx solid white" % (c.focus_border_width)
   self.update_style_sheet(w,'border',sheet)

So add_border and remove_border work together because they use the
same 'border' key.

g.app.gui.update_style_sheet is straightforward: it injects a Python
dict called leo_stylesheet_dict into the widget, and computes the
total stylesheet as follows::

   # Step one: update the dict.
   d = hasattr(w,'leo_styles_dict') and w.leo_styles_dict or {}
   d[key] = value
   w.leo_styles_dict = d

   # Step two: update the stylesheet.
   aList = [d.get(key) for key in list(d.keys())]
   s = ';'.join(aList)
   w.setStyleSheet(s)
</t>
<t tx="ekr.20130806072439.20123">http://groups.google.com/group/leo-editor/browse_thread/thread/b49d23010703aa61/32e1271d25ba2cfb
</t>
<t tx="ekr.20130806072439.20124">There is no longer any need for @@button, etc.: just put under an @ignore node.</t>
<t tx="ekr.20130806072439.20125">The mod_scripting plugin so that the name of the command created by an @button
nodes does not include any [&lt;tag&gt;] that immediately follows @button. Examples::

    @button [ekr] x
    @button [edit] y
    @button [important] z

These buttons create commands named x, y and z, and the name of the buttons are
x, y and z.

Note that the '[' must be the first non-blank after @button to be recognized and
removed.

The code is a straightforward addition to cleanButtonText in mod_scripting.py:
it is unlikely to have any impact whatsoever to existing @button nodes.

The intended use is for searches of the form @button [some tag].
</t>
<t tx="ekr.20130806072439.20126">The new code monkey-patches g.doHook to a do-nothing::
    
    if not self.loadPlugins:
        def dummyDoHook(tag,*args,**keys):
            pass
        g.doHook = dummyDoHook
</t>
<t tx="ekr.20130806072439.20127">http://groups.google.com/group/leo-editor/browse_thread/thread/e2980a2b86af913e

I see the following
- when a file is opened
  - one message listing the root node
  - 7 repeats of the message for the current node

- when the file is saved in a session with several tabs
  - a message is generated for each current node in each tab

- shifting focus from body to headline doesn't generate the message,
  shifting focus with &lt;Ctrl-H&gt; does

- switching from one tab to another doesn't generate the message 
</t>
<t tx="ekr.20130806072439.20128">The error message is now part of the failed assert.  Very helpful.
</t>
<t tx="ekr.20130806072439.20129">There no need to disable buttons and commands with \@@button or \@@command.
</t>
<t tx="ekr.20130806072439.20130">Changed doButtons and doCommands kind handlers.

This allows us to put example nodes in leoSettings.leo.
</t>
<t tx="ekr.20130806072439.20131">This allows the following pattern to appear in Leo source files::

    class myClass:
        @others
        
    if g.app.testing:
        myClass(c).test()
        
This is better than enabling the test with "if 1:" because c is not defined
while importing the module, so the import will fail if I forget to change
"if 1:" to "if 0" when saving the .leo file.
</t>
<t tx="ekr.20130806072439.20132">The single-line nodes should end in a newline. Otherwise the created node
will add a newline, and the checkers will complain.

The new class is xmlScanner and htmlScanner in leoImport.py.
</t>
<t tx="ekr.20130806072439.20133">The change was to DynamicWindow.createLogPane.
</t>
<t tx="ekr.20130806072439.20134">What I did:
    
1. Created c.init_error_dialogs &amp; c.raise_error_dialogs.

These are called from the following methods:
    
c.importAnyFile
c.open
c.readAtAutoNodes
c.readAtFileNodes
at.readAll
c.save
c.saveAs
c.saveTo
fc.writeAtFileNodes
fc.writeAtShadowNodes
fc.writeDirtyAtFileNodes

2. Disabled log messages in several of the above methods during unit testing.

3. Disabled runOpenFileDialog and runSaveFileDialog during unit testing.
</t>
<t tx="ekr.20130806072439.20135"></t>
<t tx="ekr.20130806072439.20136">https://bugs.launchpad.net/leo-editor/+bug/807561

The isBinaryFile helper returns True if the file's extension is not known.
This isn't great, but it's safe. The list of known text types includes:
    
1. '.css','.html','.leo','.txt'
2. All extensions in g.app.extension_dict.keys().
</t>
<t tx="ekr.20130806072439.20137">Under control of @bool collapse_on_lt_arrow option, default *True*.
</t>
<t tx="ekr.20130806072439.20138">k.remove_conflicting_definitions always gives the warning, not just when tracing.

The warning isn't the best, and it is usually duplicated, but it is much better than nothing.
</t>
<t tx="ekr.20130806072439.20139">Updating Sphinx and using new .js files did the trick.
</t>
<t tx="ekr.20130806072439.20140">Leo's home page now shows the latest postings on the leo-editor group.
</t>
<t tx="ekr.20130806072439.20141"></t>
<t tx="ekr.20130806072439.20142"></t>
<t tx="ekr.20130806072439.20143"></t>
<t tx="ekr.20130806072439.20144">Added class CPrettyPrinter &amp; beatifyCCode
</t>
<t tx="ekr.20130806072439.20145">This command is a rewrapping of the first Python script I ever wrote. It
takes much of the scut work away from the task of converting C code to
Python code.</t>
<t tx="ekr.20130806072439.20146">The clone-find-all command includes nodes only once: if a node's ancestor
appears in the list, the node is not include again in the top-level list.
The new clone-find-all-flattened command includes every found node in the
top-level list of nodes. I find this less confusing.
</t>
<t tx="ekr.20130806072439.20147">http://groups.google.com/group/leo-editor/browse_thread/thread/4686ebad81bb1ea1
</t>
<t tx="ekr.20130806072439.20148">The new command names and default bindings are::

    run-all-unit-tests-externally       = None
    run-all-unit-tests-locally          = None
    run-marked-unit-tests-externally    = Alt-4 # The new standard
    run-marked-unit-tests-locally       = None
    run-selected-unit-tests-externally  = Alt-5 # The new standard
    run-selected-unit-tests-locally     = None
</t>
<t tx="ekr.20130806072439.20149"></t>
<t tx="ekr.20130806072439.20150">add-comments preserves trailing whitespace.

delete-comments now works whether or not blanks surround comments delims.
</t>
<t tx="ekr.20130806072439.20151">Leo creates @file nodes (not @thin nodes) when opening an external file.

Changed g.openWrapperLeoFile to create @file instead of @edit when possible.

Open now shows all files. This is a cue that *any* file may be opened:
non-Leo files are opened in @edit nodes.</t>
<t tx="ekr.20130806072439.20152"></t>
<t tx="ekr.20130806072439.20153">- don't print 'all' in bindings.

- pad bindings properly, as is done in print-commands/bindings.
</t>
<t tx="ekr.20130806072439.20154">- print-bindings: Alt/Ctrl+Key+N now printed with plain Alt/Ctrl keys and shown as Alt/Ctrl+N.

- print-commands: Alt/Ctrl+Key+N now printed as Alt/Ctrl+N.

- print-commands &amp; print-bindings do not print 'all'.</t>
<t tx="ekr.20130806072439.20155">**Important**: This was all done in Leo 4.9, but not properly documented.

Allow section references in rst3 command.

http://groups.google.com/group/leo-editor/browse_thread/thread/3cd5cb06d32264d

- Added support for the following options:
    - expand_noweb_references:  default False for compatibility.
    - ignore_noweb definitions: default False for compatibility.

- When expand_noweb_references is True, definitions (typically clones)
  must be descendants of the referencing node (in the @rst tree)
</t>
<t tx="ekr.20130806072439.20156">Many editors allow you to jump over, select and delete words, especially
those containing or surrounded by special characters, in a smarter way than
just "going to the beginning of the word before" (back-word) or "going to
the end of the next word" (forward-word).

Patches add "-smart" equivalents of the jump, select and delete commands.
Users wanting to use these commands can set in their myLeoSettings.leo::

  back-word-smart                  = Ctrl-LtArrow
  back-word-smart-extend-selection = Ctrl-Shift-LtArrow

  forward-word-smart                  = Ctrl-RtArrow
  forward-word-smart-extend-selection = Ctrl-Shift-RtArrow

  delete-word-smart          = Ctrl-Delete
  backward-delete-word-smart = Ctrl-BackSpace</t>
<t tx="ekr.20130806072439.20157"></t>
<t tx="ekr.20130806072439.20158">- Selecting any node using arrow keys shows the node in the outline immediately.

- Clicking a node or hitting &lt;return&gt; puts focus in body pane.
</t>
<t tx="ekr.20130806072439.20159">http://groups.google.com/group/leo-editor/browse_thread/thread/f7eaf4dd4e84a535

Screenshot here:

https://plus.google.com/103097156557482112329/posts/6qSngscG38Y

Instructions (with current trunk):

- enable bigdash.py plugin
- alt-x global-search
- Enter "s somesearch" in the line editor and press enter
- Browse the hits. Click on link to navigate to the node.

Caveat:

If the document is not in currently active tab, the navigation is
done "in the background". Correct implementation would be to activate
the tab in order to bring attention to it. 
</t>
<t tx="ekr.20130806072439.20160">The scrolledmessage plugin no longer exists. The runScrolledMessageDialog
*does* still exist, but it now uses the viewrendered plugin.
</t>
<t tx="ekr.20130806072439.20161"></t>
<t tx="ekr.20130806072439.20162"></t>
<t tx="ekr.20130806072439.20163"></t>
<t tx="ekr.20130806072439.20164"></t>
<t tx="ekr.20130806072439.20165"></t>
<t tx="ekr.20130806072439.20166">From Brian Theado

The other day I stumbled across Ville's code in scripts.leo which displays the
output of python's trace module in a leo outline. The output of the trace module
is not very friendly and I didn't find the result very usable. I was inspired to
write some code to translate the output so the tree of function calls is
displayed via Leo headlines. Thanks to Ville for sharing that code. I never
would have figure this out without that starting point.

Just copy (Ctrl-Shift-V) the child outline into a leo outline and hit ctrl-b on
the "call tree" node. The execution tree of the 'scroll-outline-up-line'
minibuffer command will be displayed to stdout and also as a tree of leo
headlines.
</t>
<t tx="ekr.20130806072439.20167">import trace

@language python
@others

# http://docs.python.org/library/trace.html for documentation
# on the trace module
tracer = trace.Trace(countcallers=1)

# Trace a minibuffer command.

# Any function call will work. Leo's minibuffer commands are easily discoverable
# via tab completion and the 'print-commands' command.

#tracer.runfunc(c.executeMinibufferCommand, 'goto-prev-node')
tracer.runfunc(c.executeMinibufferCommand, 'scroll-outline-up-line')

top = p.insertAsLastChild().copy()
top.h = 'trace session'
displayCalltree(top, tracer.results().callers.keys())
c.redraw()
</t>
<t tx="ekr.20130806072439.20168">def displayCalltree(p, callinfo):
   '''
   Converts the function call hierarchy in 'callinfo' into a tree of function
   calls.  The function call tree is displayed to stdout as indented text
   and is inserted as a tree of leo nodes rooted at the given position 'p'
   '''
   callers = [k[0] for k in callinfo]
   callees = [k[1] for k in callinfo]

   # The first set of children will be those that don't have any callers
   # listed in callinfo
   toplevels = list(set(callers) - set(callees))
   positions = {}
   path = []

   # Depth-first traversal of the call hierarchy represented by 'callinfo'
   # 'levels' is a stack which grows during descend and shrinks
   # during ascend.  Each element of 'levels' is a list of unprocessed
   # siblings of each other
   levels = [toplevels]
   while len(levels) &gt; 0:
       while len(levels[-1]) &gt; 0:
           # Process the first element in the 'deepest' (i.e. last) list of siblings
           cur = levels[-1][0]
           levels[-1] = levels[-1][1:]
           indent = " " * 4 * (len(levels)-1)
           if cur not in path:
               if cur in positions.keys():
                   # Function already seen, so make a clone
                   clone = positions[cur].clone()
                   clone.moveToLastChildOf(p)
                   print (indent + "%s %s ..." % cur[1:])
               else:
                   # Haven't seen this function, so insert a new headline
                   p = p.insertAsLastChild().copy()
                   p.h = "%s %s" % cur[1:]
                   print (indent + p.h)

                   # Remember the position so it can be cloned if seen again
                   positions[cur] = p

                   # Find all callees of this function and descend
                   levels.append([c[1] for c in callinfo if c[0] == cur])
                   path.append(cur)
           else:
               r = p.insertAsLastChild().copy()
               r.h = "(recursive call) %s %s" % (cur[1], cur[2])
               print(indent + r.h + "...")

       # Ascend back up one level
       path = path[0:-1]
       p = p.parent()
       levels = levels[0:-1]
</t>
<t tx="ekr.20130806072439.20169"></t>
<t tx="ekr.20130806072439.20170">- Generates only @auto, does not do an actual import.

- Creates @path nodes so actual @auto nodes are short.
</t>
<t tx="ekr.20130806072439.20171">http://groups.google.com/group/leo-editor/browse_thread/thread/ba9eb63337467d42/a3f3750d0ce6e847

&gt; Here's a one line @button node you can add to myLeoSettings.leo
&gt;
&gt; @button set-style
&gt;    c.frame.top.leo_ui.setStyleSheet(p.b)

Cool.  I've added this to my "pre-writing" pile of things to be
included in the next set of docs.

Important:  setStyleSheet *replaces* the previous stylesheet with the
new stylesheet, so you had best set all the attributes of Leo's
default stylesheet.

As an alternative, if w is any Qt widget, w.setStyleSheet(p.b) will
set the stylesheet for that widget only: the top-level stylesheet (the
stylesheet for c.frame.top.leo_ui) remains unchanged.
</t>
<t tx="ekr.20130806072439.20172">http://groups.google.com/group/leo-editor/browse_thread/thread/b17d140b7ceb8fc9

I've added web page bookmarking from your browser to Leo.

Docs., appended to the mod_http plugin, where this functionality lives,
are pasted below.

Screen shot of the form which pops up when you click the Bookmark
button in your browser attached.  The body text of the corresponding
bookmark node created in Leo is:

    Leo's Home Page
        http://leoeditor.com

        Tags: leo, python

        Leo's Home Page

        Collected: Sun 02 Oct 2011 02:52:51 PM CDT

        Keep this under your pillow.

If you had some text selected on the page in your browser that would
also appear in the above, and repeatedly bookmarking the same page with
different selections incrementally adds such quotes to the bookmark
node.

Here are the docs.:

Can also be used for bookmarking directly from the browser to Leo.  To
do this, add a bookmark to the browser with the following URL / Location:

    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&amp;name=' + escape(d.title) + '&amp;selection=' + escape(window.getSelection()) + '&amp;url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)

and edit the port (8130 in the example above) to match the port you're using
for mod_http.

Bookmarks are created as the first node in the outline which has been opened longest.
You can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,
e.g.::

    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming

to place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.

The headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.
If the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.

The browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true
in ``about:config`` in Firefox. 
</t>
<t tx="ekr.20130806072439.20173">http://groups.google.com/group/leo-editor/browse_thread/thread/d21349c52dabd066

Ever find that you have a whole lot of:

.. sourcecode:: py

  rec[f['analyte']] ... rec[f['sample_type']] ...

expressions in your code, and now things have changed and you want them
all to be:

.. sourcecode:: py

  row.Analyte ... row.Sample_Type ...

basically if str variable s was::

  rec[f['analyte']]

then you want to perform:

.. sourcecode:: py

  s = "row."+s.split("'")[1].title()

on each one.  In general it would be nice to be able to use a python
expression when search and replace doesn't cut it.

The button code below creates a button, ``fac``, which, when pressed,
creates another button, with some name you choose, which, when pressed,
executes some python code to fix the selected text in the body.

You can define the code to be executed in two ways, either in its own
node:

 - insert a new node with a headline which describes the refactor
 - enter code in the node which modifies the string variable ``s``,
   which is initially set to the selected text in the body
 - press the ``fac`` button, which creates a new button named
   after this code node
 - select each offending piece of text and press the button created
   in the previous step to fix

or

 - type some code modifying ``s`` right in the body you're working on
 - press the ``fac`` button, which creates a new button named "fix"
 - select each offending piece of text and press the button created
   in the previous step to fix

Note:

 - unlike regular button nodes, changing the code after the
   button's created (first option above) doesn't change the code
   executed by the button
 - replacing selection text makes Leo reposition the insert point at
   the top of the window, this is annoying but unrelated to this code

Here's the button code:

.. sourcecode:: py

  @button fac
    from leo.plugins.mod_scripting import scriptingController

    sc = scriptingController(c)

    if c.frame.body.hasSelection():
        code = c.frame.body.getSelectedText()
        heading = 'fix'
    else:
        code = p.b
        heading = p.h

    def transform(c=c, code=code):
        s = c.frame.body.getSelectedText()
        g.es(s)
        exec code
        g.es(s)
        c.frame.body.deleteTextSelection()
        i = c.frame.body.getInsertPoint()
        c.frame.body.insert(i, s)
        p.b = c.frame.body.getAllText()
        c.frame.body.setInsertPoint(i)

    b = sc.createIconButton(
        heading,
        command = transform,
        shortcut = None,
        statusLine = 'Make filter button',
        bg = "LightBlue"
    ) </t>
<t tx="ekr.20130806072439.20174">@language python

from leo.plugins.mod_scripting import scriptingController

sc = scriptingController(c)

if c.frame.body.hasSelection():
    code = c.frame.body.getSelectedText()
    heading = 'fix'
else:
    code,heading = p.b,p.h

def transform(c=c,code=code):
    w = c.frame.body
    s = w.getSelectedText()
    g.es(s)
    exec(code)
    g.es(s)
    w.deleteTextSelection()
    i = w.getInsertPoint()
    w.insert(i,s)
    p.b = w.getAllText()
    w.setInsertPoint(i)

sc.createIconButton(
    heading,
    command = transform,
    shortcut = None,
    statusLine = 'Make filter button',
    bg = "LightBlue"
)</t>
<t tx="ekr.20130806072439.20175">Note: in rev 4990, the g.app.newCommander method (formerly called
g.app.newLeoCommanderAndFrame) also returns a single value (a
Commander) rather than the tuple (c,c.frame). 
</t>
<t tx="ekr.20130806072439.20176">- open-with hook has changed: it now uses a "d" arg.</t>
<t tx="ekr.20130806072439.20177"></t>
<t tx="ekr.20130806072439.20178">The default, True, is the legacy operation, which I recommend.

</t>
<t tx="ekr.20130806072439.20179"></t>
<t tx="ekr.20130806072439.20180">Configurable and optional::

    @color focus_border_color = red
    @int focus_border_width = 1
    @bool use_body_focus_border  = True
    @bool use_focus_border = True</t>
<t tx="ekr.20130806072439.20181"></t>
<t tx="ekr.20130806072439.20182">Added show-decoration-selected: 1 to QTreeWidget stylesheet.

This causes the entire headline row to be shown when select, a big improvement, imo.
</t>
<t tx="ekr.20130806072439.20183"></t>
<t tx="ekr.20130806072439.20184"></t>
<t tx="ekr.20130806072439.20185">The new command names and default bindings are::

    run-all-unit-tests-externally       = None
    run-all-unit-tests-locally          = None
    run-marked-unit-tests-externally    = Alt-4 # The new standard
    run-marked-unit-tests-locally       = None
    run-selected-unit-tests-externally  = Alt-5 # The new standard
    run-selected-unit-tests-locally     = None
</t>
<t tx="ekr.20130806072439.20186">http://groups.google.com/group/leo-editor/browse_thread/thread/dd5907529208ee98

The body of @openwith nodes contains one or more lines of the following
form::

   tag: value

The possible tags are::

    kind: &lt;a string&gt;

The value specifies the **opener logic**, that is, the method used to
launch the external editor, one of 'subprocess.Popen', 'os.startfile',
'os.spawnl', 'os.spawnv', 'exec'.

    arg: &lt;a string&gt;

There may be many such arg lines. Each line will be a string to be passed
as an argument to the opener logic, in a format that is compatible with the
specified opener logic.

Quotes in &lt;a string&gt; will be *retained*, allowing the user to specify
exactly the arguments to be passed to opener logic.

..  custom: &lt;a string&gt;
..  Here, &lt;a string&gt; *will* be eval'd, yielding an object to be used as
..  the opener logic.
</t>
<t tx="ekr.20130806072439.20187">leoSettings.leo:

table = (
        # First, leoSettings.leo in the home directories.
        join(g.app.homeDir,     settings_fn),
        join(g.app.homeLeoDir,  settings_fn),

        # Next, &lt;machine-name&gt;leoSettings.leo in the home directories.
        # join(g.app.homeDir,     machine_fn),
        # join(g.app.homeLeoDir,  machine_fn),

        # Last, leoSettings.leo in leo/config directory.
        join(g.app.globalConfigDir, settings_fn)
    )

myLeoSettings.leo:

    table = (
        # First, myLeoSettings.leo in the local directory
        join(localDir,          settings_fn),

        # Next, myLeoSettings.leo in the home directories.
        join(g.app.homeDir,     settings_fn),
        join(g.app.homeLeoDir,  settings_fn),
    
        # Next, &lt;machine-name&gt;myLeoSettings.leo in the home directories.
        join(g.app.homeDir,     machine_fn),
        join(g.app.homeLeoDir,  machine_fn),

        # Last, leoSettings.leo in leo/config directory.
        join(g.app.globalConfigDir, settings_fn),
    )
</t>
<t tx="ekr.20130806072439.20195">From: Matt Wilkie &lt;maphew@gmail.com&gt;

web bug: the search form at http://leoeditor.com/ tries to search 
charter.net

From: lewis &lt;lewisneal@operamail.com&gt;

The Leo wikipedia entry http://en.wikipedia.org/wiki/Leo_(text_editor)
should be updated with the new website url.

These Help menu items need updating:
    
    about Leo   (lists charter.net)
    Online Home Page  (the redirect http://leoeditor.com/front.html is not found)
    Open Online Tutorial  (doesn't launch)
    Open Users Guide  (links to http://webpages.charter.net/edreamleo/leo_toc.html)
</t>
<t tx="ekr.20130806072439.20200">From: tfer &lt;tfetherston@aol.com&gt;

Mines on youtube, it is from a presentation at PyOhio last year.
  http://www.youtube.com/watch?v=JgJ89ekGj-s

Ville's is also there:
  http://www.youtube.com/watch?v=Zu6J-J0qFi0
</t>
<t tx="ekr.20130806175854.17068">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

Rev 5488 contains a prototype for importing IPython notebook (.ipynb) files 
into Leo.  In theory, this would allow two-way interchanges between Leo 
outlines and the outlines in IPython notebooks.

At present, the prototype simply converts a string containing the contents 
of a .ipynb file to a Leo outline.  A few details remain, but it shows that 
such conversion is straightforward.  Otoh, this is just a first step: we 
would like the Leo outline to support most of the features of IPython 
notebooks, including embedded images, etc.

===== From: Alia K &lt;alia_khouri@yahoo.com&gt;

May a suggest a radical thought exercise that only occurred to me after 
seeing what can be achieved in terms of in-browser editing with 
http://codemirror.net/: 

Why not create an ipython notebook "plugin" version of leo which would only 
provide core leo functionality: outlines, literate programming, and clones, 
but would not be burdened by having to support legacy leo plugins. 

You could leverage all the mad goodness and momentum that is happening with 
ipython right now (interactivity, parallelism, networking and 
collaboration, interactive access to javascript libs like d3.js, etc.., 
inline images, and movies, and cell magic, etc..). Since ipython is pretty 
much pervasively used ... it could be a good thing for leo (-:
</t>
<t tx="ekr.20130806211959.16740">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

As the title indicates, this thread will consist of what could be
called an online engineering notebook.  Please feel free to ignore.

Key bindings are one of the most difficult and complex parts of Leo.
This can't be helped: Leo's goals for key bindings are ambitious.

The present bug, https://bugs.launchpad.net/leo-editor/+bug/879331, is
due to a significant design oversight.  Redefining a binding for a
command x to key y affects not just command x but all other commands
presently bound to y!

Alas, the present binding tables are already complex.  I am almost at
the limit of what I can hold in working memory as it is.  Adding
significant additional complexity risks creating virtually impossible-
to-understand code.

There are two conflicting desires in play here:

1. To make the minimum changes needed.  While reasonable in itself,
this promises to increase overall complexity.

2. To decrease overall complexity.  While reasonable in itself, this
promises significant overall changes to the code.

Combining these two desires yields a strategy of finding a minimal
change that reduces overall complexity :-)  It's a big ask.
</t>
<t tx="ekr.20130806211959.17078">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ok, I now created a toy UI demo for how "cell" based leo (like ipython
notebook) could operate.

It's probably the first stab at using QML to solve a problem in Leo.
It doesnt' run from leo yet (it's not a plugin, more protoing needed
before it's worthwhile to make it a plugin.

When you add and delete text, the cells resize naturally.

To try it, launch the launchqmlnb.py script that I pushed to bzr.

bzr pull, and paste this into a node and press ctrl+b:

https://gist.github.com/2517158

Result is as attached. What it currently does is putting every node
wrapper in a list of QObjects, and use that as the model in QML side
(model is just a container that has the list of stuff to show in
Repeater).

So you can edit every node in a leo document in this "notebook".
Future version will probably only allow editing a subtree.

Note how headlines are "toned down" with small, grey font. Intention
is that e.g. with ipython notebook, the headline will just be a
running, uneditable sequence number basically.

BTW, forgot to mention that I put the NodeWrapper stuff under
leo.core. We can move it out eventually, but right now it seemed like
a natural place for this kind of cross-plugin utility.

And on related note: remember that with QML, sky is the limit as far
as the styling goes :). So if you have wild ideas about adding
customizable images, animated checkboxes, or other weird stuff next to
the nodes, fire away.




</t>
<t tx="ekr.20130806211959.17079">From: Kent Tenney &lt;ktenney@gmail.com&gt;

Interesting ...

Am I correct: this is POC, edits in your serialized pane don't reflect
in the Leo file?

This is a hint of something I've long wanted, what I have called
'slurped' vs 'chunked'
Something I miss with Leo is the capability get an overview of a file,
I find myself
needing to 'open file with gvim' to grok at file level.

The pane you are generating offers both at once, I can see the linear
view of the file,
retaining the 'chunk' metadata (node headlines)
</t>
<t tx="ekr.20130806211959.17080">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 27 Apr 2012 00:47:05 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Ok, I now created a toy UI demo for how "cell" based leo (like ipython
&gt; notebook) could operate.
&gt; 
&gt; It's probably the first stab at using QML to solve a problem in Leo.
&gt; It doesnt' run from leo yet (it's not a plugin, more protoing needed
&gt; before it's worthwhile to make it a plugin.
&gt; 
&gt; When you add and delete text, the cells resize naturally.
&gt; 
&gt; To try it, launch the launchqmlnb.py script that I pushed to bzr.

Played with it.  I guess the next step would be demo of python handling
events from the QML UI elements, and of python finding and manipulating
the QML UI elements.

I'm wondering about the advantages of this approach over the "regular"
QWidget approach.  QML is perhaps a more terse and elegant language for
defining a UI, and it has scripting of UI behavior in javascript.  And
perhaps it has a more tablet friendly widget set?

But I wonder what it lets you do that you can't do with the QWidget
stack, given that mixing the two seems to mean that Leo is using two
GUI systems - they may be very tightly integrated, but mind-space wise
it's two complex systems instead of one.

Which isn't a reason not to use QML, just wondering if it has
advantages I'm missing.
</t>
<t tx="ekr.20130806211959.17081">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Some modifications done, attached is screenshot with tree level
nesting as well. I moved the headistring to the left edge, since on
the right edge the tree structure looked weird.

</t>
<t tx="ekr.20130806211959.17082">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This leo script is more polished version of the earlier work (ctrl+b
script). It uses QStandardItemModel to host the entries in the
notebook, so you can add / remove / modify items and the changes
reflect in the notebook in real time.

https://gist.github.com/2540690
</t>
<t tx="ekr.20130806211959.17083">From: Ville Vainio &lt;vivainio@gmail.com&gt;

Qml version was the one I got done quickly, since it has better layout
mechanism. If we come up with qwidget way, let's use that :). I tried
to find one, but didn't

Sent from my Windows Phone
From: Terry Brown
Sent: 4/27/2012 5:55 PM
To: leo-editor@googlegroups.com
Re: QML notebook - phase zero - toy ui ;-)
On Fri, 27 Apr 2012 00:47:05 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Ok, I now created a toy UI demo for how "cell" based leo (like ipython
&gt; notebook) could operate.
&gt;
&gt; It's probably the first stab at using QML to solve a problem in Leo.
&gt; It doesnt' run from leo yet (it's not a plugin, more protoing needed
&gt; before it's worthwhile to make it a plugin.
&gt;
&gt; When you add and delete text, the cells resize naturally.
&gt;
&gt; To try it, launch the launchqmlnb.py script that I pushed to bzr.

Played with it.  I guess the next step would be demo of python handling
events from the QML UI elements, and of python finding and manipulating
the QML UI elements.

I'm wondering about the advantages of this approach over the "regular"
QWidget approach.  QML is perhaps a more terse and elegant language for
defining a UI, and it has scripting of UI behavior in javascript.  And
perhaps it has a more tablet friendly widget set?

But I wonder what it lets you do that you can't do with the QWidget
stack, given that mixing the two seems to mean that Leo is using two
GUI systems - they may be very tightly integrated, but mind-space wise
it's two complex systems instead of one.

Which isn't a reason not to use QML, just wondering if it has
advantages I'm missing.
</t>
<t tx="ekr.20130806211959.17084">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Update: qmlnotebook.leo (ctrl+b script + test outline) is now at
contrib branch. If you want to try it, open the .leo file, ensure you
are running latest Leo from trunk, and press ctrl+b on the first node.
</t>
<t tx="ekr.20130806211959.17085">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Here's a demo to run Ville's QML thing in a free_layout pane.
Requires rev. 5284 so the .qml file in leo/plugins/qmlnb/ is available.

Paste this into a node, run-script on the node, right click a splitter
handle, Insert, click the Action button, select "Add QML shower".

Note that you can flick the text boxes it shows up and down with the
mouse, in a tablet / phone ui kind of way.

---cut here---
from PyQt4.QtCore import QUrl
from PyQt4.QtDeclarative import QDeclarativeView
class QMLShower:
    def __init__(self, c):
        self.c = c
        c._qml_shower = self
        self.w = None
        c.free_layout.get_top_splitter().register_provider(self)
    def ns_provider_id(self):  # allow for re-registering, mainly for dev.
        return '__qml_shower'
    def ns_provides(self):  # what we can provide
        return [("Add QML shower", '__add_qml_shower')]
    def ns_provide(self, id_):  # provide it
        if id_ == '__add_qml_shower':
            g.unregisterHandler('select2', self.update)
            g.registerHandler('select2', self.update)
            if not self.w:
                self.w = self.make_widget()
            return self.w
    def make_widget(self):
        view = QDeclarativeView()
        path = g.os_path_join(g.computeLeoDir(), 'plugins', 'qmlnb', 'qml', 'leonbmain.qml')
        view.setSource(QUrl(path))
        view.setResizeMode(QDeclarativeView.SizeRootObjectToView)
        # Display the user interface and allow the user to interact with it.
        view.setGeometry(100, 100, 400, 240)
        view.show()
        # rootObject = view.rootObject()
        return view   
    def update(self, tag, kwords):
        pass
    def closed(self, event):
        g.unregisterHandler('select2', self.update)

QMLShower(c)
---cut here---

</t>
<t tx="ekr.20130806211959.17086">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Yes, modifications are not saved yet. Also, modifications in normal body
editors are not copied over to the notebook yet.  This is probably going to
end up like tabula and stickynotes in this regard.

Getting an overview of a file could be an interesting extra usecase, my
main interest is still in using it for interactive programming/computation
(like ipython notebook) .
On Apr 28, 2012 4:22 PM, "Kent Tenney" &lt;ktenney@gmail.com&gt; wrote:
</t>
<t tx="ekr.20130806211959.17087">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ok, this should serve as a basis for ipython nicely.

However, a problem - it worked once, but now (after restarting leo,
many times) I always get this traceback;

Traceback (most recent call last):
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
489, in cb
    self.place_provided(id_, index)
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
502, in place_provided
    provided =3D self.get_provided(id_)
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
960, in get_provided
    provided =3D provider.ns_provide(id_)
  File "/home/ville/.leo/scriptFile.py", line 18, in ns_provide
    g.unregisterHandler('select2', self.update)
  File "/home/ville/b/leo-editor/leo/core/leoGlobals.py", line 2529,
in unregisterHandler
    return pc.unregisterHandler(tags,fn)
  File "/home/ville/b/leo-editor/leo/core/leoPlugins.py", line 730, in
unregisterHandler
    self.unregisterOneHandler(tags,fn)
  File "/home/ville/b/leo-editor/leo/core/leoPlugins.py", line 735, in
unregisterOneHandler
    bunches =3D [bunch for bunch in bunches if bunch.fn !=3D fn]
TypeError: 'NoneType' object is not iterable

</t>
<t tx="ekr.20130806211959.17093">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I created a proof of concept for dumping leo trees to excel.

Demo outline is in collab branch,

/Projects/excel_integration

Screenshot attached.

My usage is that I collect and organize findings (of technology studies) in
leo, and then dump the report to excel, to be read and actioned upon by
other ppl.

I haven't yet polished this workflow in that there is a bunch of manual
work in formatting the report...
 
</t>
<t tx="ekr.20130806211959.17094">From: Terry &lt;webtourist@gmail.com&gt;

I need to present to people who don't have leo installation, in easily 
readable format, the full content of a .leo file, not just the outline, but 
all nodes and all contents.

What do I need to do ?

===== Terry

You could run this script (below):

It only exports selected nodes, so if you want to export everything,
you have to select all the top level nodes, i.e. collapse all the nodes
so only the top level is visible, click the first one, and shift-click
the last one.

It exports to plain text... although you might be able to use the
template to describe HTML, not sure.

&gt; Terry, how do i run it ?  I'm guessing it's not at the cmdline like "python 
&gt; this_script.py" 

Right.  Paste the content into a node, then click the script-button
button to create a new button for running this script.  The button's
name will be the node's name, what it is doesn't matter but 'export'
would be an obvious choice.  Then select the node(s) you want exported
- presumably not including the node containing the script :)

Then it will ask for a file name and whether to include unexpanded
nodes.\

</t>
<t tx="ekr.20130806211959.17095">@language python

# template is everything between r""" and second """
# placeholders are H heading B body C children
# use \\n in B and C lines for conditional blank lines

template = r"""H
    B
  * C"""

lines=[]
exp_only = g.app.gui.runAskYesNoCancelDialog(
    c, 'Expanded nodes only?', 'Expanded nodes only?')
if exp_only == 'no':
    exp_only = False
    
def export_text(p, indent=''):
    
    spaces = ' '*(len(indent) - len(indent.lstrip(' ')))
    
    for line in template.split('\\n'):
        
        if 'H' in line:
            lines.append(indent + line.replace('H', p.h))
        elif 'B' in line and p.b.strip():
            prefix = line[:line.find('B')].replace('\\\\n', '\\n')
            for i in p.b.strip().split('\\n'):
                lines.append(spaces + prefix + i)
                prefix = line[:line.find('B')].replace('\\\\n', '')
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' in line and (not exp_only or p.isExpanded()):
            prefix = line[:line.find('C')].replace('\\\\n', '\\n')
            for child in p.children():
                export_text(child, indent=spaces + prefix)
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' not in line and 'B' not in line:
            lines.append(line)

if exp_only != 'cancel':
    for i in c.getSelectedPositions():
        export_text(i)
    
    filename = g.app.gui.runSaveFileDialog('Save to file')
    # filename = '/home/tbrown/del.txt'
    
    if filename is not None:
        open(filename,'w').write('\\n'.join(lines))
</t>
<t tx="sps.20100708203040.19008">@language python
import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
&lt;&lt; pdf manual &gt;&gt;
</t>
<t tx="sps.20100708203040.19009">d = c.scanAllDirectives(p)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="sps.20100708203040.19010"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('../../fixup.pl &lt; Leodocumentation.tex &gt; LeoDoc.tex')
os.system('make LeoDoc.pdf')
</t>
<t tx="sps.20100708213227.44914"></t>
<t tx="tbrown.20120821215353.22854">Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand you input
(just ``"some_function"`` and ``"one, two, three=4"`` to something like::
    
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in individual
    .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in @data
    # global-abbreviation nodes. Typically you would define @data abbreviation nodes
    # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.
</t>
<t tx="ville.20090705224948.5734">import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
# no pdf manual creation, perhaps too "involved" for many
</t>
<t tx="ville.20090705225609.5736">mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="ville.20090705225609.5738"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('make all-pdf')
</t>
</tnodes>
</leo_file>
