<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070610174018"><vh>Startup</vh>
<v t="ekr.20050407144417"><vh>@settings</vh>
<v t="ekr.20111108052738.5507"><vh>@shortcuts</vh></v>
<v t="ekr.20100907092300.4440"><vh>Inkscape options</vh>
<v t="ekr.20100907092300.4441"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20100907092300.4442"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20101009114830.4724"><vh>File options</vh>
<v t="ekr.20080923182326.1"><vh>@@bool create_nonexistent_directories = True</vh></v>
<v t="ekr.20080412124815.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20101009114830.4723"><vh>@bool put_expansion_bits_in_leo_files = False</vh></v>
</v>
<v t="ekr.20101009114830.4725"><vh>Plugins options</vh>
<v t="ekr.20050407144342"><vh>@page http plugin</vh>
<v t="ekr.20050407144342.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050407144342.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050407144342.3"><vh>@string rst_http_attributename = rst_http_attribute</vh></v>
</v>
<v t="ekr.20050812123002"><vh>@page rst3 options</vh>
<v t="ekr.20050812123002.1"><vh>Http options...</vh>
<v t="ekr.20050812123002.2"><vh>@bool rst3_clear_http_attributes = False</vh></v>
<v t="ekr.20050812123002.3"><vh>@string rst3_http_attributename = 'rst_http_attribute'</vh></v>
<v t="ekr.20050812123002.4"><vh>@bool rst3_http_server_support = False</vh></v>
<v t="ekr.20050812123002.5"><vh>@string rst3_node_begin_marker = 'http-node-marker-'</vh></v>
</v>
<v t="ekr.20050812123002.6"><vh>@bool rst3_massage_body = False</vh></v>
<v t="ekr.20050812123002.7"><vh>@bool rst3_format_headlines = True</vh></v>
<v t="ekr.20050812123002.8"><vh>@bool rst3_write_intermediate_file = True</vh></v>
<v t="sps.20100708213227.44914"><vh>@string rst3_write_intermediate_extension = .html.txt</vh></v>
<v t="ekr.20051202072010"><vh>@string rst3_default_path =</vh></v>
</v>
</v>
</v>
<v t="ekr.20101028112631.4959" descendentVnodeUnknownAttributes="7d7100550b302e312e302e302e302e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473732e"><vh>@file doc-startup.txt</vh></v>
</v>
<v t="ekr.20050831195449"><vh>Read me first</vh></v>
<v t="ekr.20100805171546.4412"><vh>Files, including home page</vh>
<v t="ekr.20130327143919.5868"><vh>@@file front.html (old home page)</vh></v>
<v t="ville.20090609182215.5676"><vh>@auto-rst treecaching.txt</vh></v>
<v t="ekr.20090428133936.2"><vh>@edit html\conf.py</vh></v>
<v t="ekr.20090428102353.1"><vh>@edit html\leo_toc.html.txt</vh></v>
<v t="ekr.20101025080245.5800"><vh>@edit leo_toc.html</vh></v>
<v t="ekr.20101112045055.5064"><vh>@file plugin_catalog.py</vh></v>
<v t="ekr.20100808060203.4273"><vh>@file html/index.html</vh></v>
<v t="ekr.20130807203905.16606"><vh>@edit html/leoLinks.html</vh></v>
<v t="ekr.20101025080245.5801"><vh>@url modified toc</vh></v>
<v t="ekr.20101026081737.5531"><vh>Links that replace those in actual built page</vh></v>
<v t="ekr.20101112045055.5065"><vh>@url docs generated from plugin_catalog.py</vh></v>
</v>
<v t="ekr.20040414161647"><vh>Users Guide</vh>
<v t="ekr.20101104024804.4898"><vh> Generating the Users Guide</vh>
<v t="sps.20100708203040.19008"><vh>@@button generate-full-userguide</vh>
<v t="sps.20100708203040.19009"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="sps.20100708203040.19010"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
<v t="ville.20090705224948.5734"><vh>@@button generate-userguide</vh>
<v t="ville.20090705225609.5736"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="ville.20090705225609.5738"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5794"><vh>Preliminaries</vh>
<v t="ekr.20050831184021.3"><vh>Front matter</vh>
<v t="ekr.20100805165051.7148"><vh>@file frontMatter.txt</vh></v>
</v>
<v t="ekr.20070701101808"><vh>Preface</vh>
<v t="ekr.20100805165051.7149"><vh>@file preface.txt</vh></v>
</v>
<v t="ekr.20050831184021.4"><vh>What people are saying about Leo</vh>
<v t="ekr.20100805165051.7150"><vh>@file testimonials.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5795"><vh>Basics</vh>
<v t="ekr.20050831195331.1"><vh>FAQ</vh>
<v t="ekr.20100805165051.7151"><vh>@file FAQ.txt</vh></v>
</v>
<v t="ekr.20101007100904.4372"><vh>Slideshows page</vh>
<v t="ekr.20100821182153.4344"><vh>@file screen-shots.txt</vh></v>
</v>
<v t="ekr.20100731112744.7267"><vh>Installing Leo</vh>
<v t="ekr.20100805165051.7152" descendentVnodeUnknownAttributes="7d71005507302e302e332e3171017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e710558040000003c2f613e71065d71072858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e710858060000003c2f6469763e71095d710a28584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e710b58060000003c2f6469763e710c5d710d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710e58060000003c2f6469763e710f5d71102858060000003c626f64793e711158070000003c2f626f64793e71125d71132858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711458070000003c2f68746d6c3e71154e656565656558070000003c2f6469763e0a711658070000003c2f6469763e0a711758350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7118586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a71196573732e"><vh>@file installing.txt</vh></v>
</v>
<v t="ekr.20091130111843.6787"><vh>The Leo Tutorial</vh>
<v t="ekr.20100805165051.7146"><vh>@file intro.txt</vh></v>
<v t="ekr.20100808120531.4280"><vh>@file outline-commands.txt</vh></v>
<v t="ekr.20100808120531.4283"><vh>@file nutshell.txt</vh></v>
</v>
<v t="EKR.20040524104904.99"><vh>Using Leo</vh>
<v t="ekr.20100805165051.7155"><vh>@file commands.txt</vh></v>
</v>
<v t="EKR.20040524104904.211"><vh>Customizing Leo</vh>
<v t="ekr.20100805165051.7158"><vh>@file customizing.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5799"><vh>Intermediate Topics</vh>
<v t="ekr.20060430221745"><vh>Controlling syntax coloring</vh>
<v t="ekr.20100805165051.7165"><vh>@file coloring.txt</vh></v>
</v>
<v t="ekr.20050831184021.1"><vh>Creating documents with Leo</vh>
<v t="ekr.20100805165051.7164"><vh>@file rstplugin3.txt</vh></v>
</v>
<v t="ekr.20050831195331.4"><vh>Scripting Leo with Python</vh>
<v t="ekr.20100805165051.7157" descendentVnodeUnknownAttributes=""><vh>@file scripting.txt</vh></v>
</v>
<v t="ekr.20050912125144"><vh>Plugins</vh>
<v t="ekr.20100805165051.7162"><vh>@file plugins.txt</vh></v>
</v>
<v t="ekr.20060612102055"><vh>Writing Plugins</vh>
<v t="ekr.20100805165051.7163"><vh>@file writingPlugins.txt</vh></v>
</v>
<v t="ekr.20070628083442"><vh>Unit testing with Leo</vh>
<v t="ekr.20100805165051.7170"><vh>@file unitTesting.txt</vh></v>
</v>
<v t="ekr.20060527105211"><vh>Debugging with Leo</vh>
<v t="ekr.20100805165051.7166"><vh>@file debuggers.txt</vh></v>
</v>
<v t="ekr.20080730212711.14"><vh>Using @shadow</vh>
<v t="ekr.20100805165051.7173"><vh>@file atShadow.txt</vh></v>
</v>
<v t="ekr.20120315101404.14224"><vh>The leoInspect Module</vh>
<v t="ekr.20120315101404.14225"><vh>@file leoInspect.txt</vh></v>
</v>
<v t="tbrown.20120821215353.22854"><vh>Abbreviations / templates</vh></v>
</v>
<v t="ekr.20101025080245.5798"><vh>Leo and Other Programs</vh>
<v t="ekr.20061025065357"><vh>Leo and Emacs</vh>
<v t="ekr.20100805165051.7168"><vh>@file emacs.txt</vh></v>
</v>
<v t="ekr.20080203101507"><vh>ILeo - the IPython bridge</vh>
<v t="ekr.20100805165051.7171"><vh>@file IpythonBridge.txt</vh></v>
</v>
<v t="ekr.20070317033759"><vh>Embedding Leo with the leoBridge module</vh>
<v t="ekr.20100805165051.7169"><vh>@file leoBridge.txt</vh></v>
</v>
<v t="TL.20080804095315.1"><vh>Using Vim with Leo</vh>
<v t="ekr.20100805165051.7172"><vh>@file vimBindings.txt</vh></v>
</v>
<v t="ekr.20060913164304"><vh>Using ZODB with Leo</vh>
<v t="ekr.20100805165051.7167"><vh>@file zodb.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5796"><vh>Reference</vh>
<v t="ekr.20050831184021.5"><vh>Leo's Reference</vh>
<v t="ekr.20100805001344.7253"><vh>@file directives.txt</vh></v>
</v>
<v t="EKR.20040524104904.161"><vh>Designing with Leo</vh>
<v t="ekr.20100805165051.7156"><vh>@file design.txt</vh></v>
</v>
<v t="EKR.20040524104904.245"><vh>History of Leo</vh>
<v t="ekr.20100805165051.7159"><vh>@file history.txt</vh></v>
</v>
<v t="EKR.20040524104904.261"><vh>Theory of Operation</vh>
<v t="ekr.20100805165051.7160"><vh>@file theory.txt</vh></v>
</v>
<v t="ekr.20050901084134"><vh>White papers</vh>
<v t="ekr.20100805165051.7161"><vh>@file whitepapers.txt</vh></v>
</v>
<v t="EKR.20040524104904.274"><vh>Appendices</vh>
<v t="ekr.20100805165051.7174"><vh>@file appendices.txt</vh></v>
</v>
<v t="ekr.20091111112709.6671"><vh>Glossary</vh>
<v t="ekr.20100805165051.7147"><vh>@file glossary.txt</vh></v>
</v>
</v>
<v t="ekr.20060620094033"><vh>What's New...</vh>
<v t="ekr.20100805165051.7175"><vh>@file whatsnew.txt</vh></v>
</v>
<v t="ekr.20111127144911.5545"><vh>Other pages</vh>
<v t="ekr.20111127144911.5546"><vh>@file download.txt</vh></v>
</v>
</v>
<v t="ekr.20090717084250.10702"><vh>Other docs</vh>
<v t="ekr.20100805165051.7176"><vh>@file other_docs.txt</vh></v>
</v>
<v t="ekr.20100821182153.4341"><vh>Slideshows</vh>
<v t="ekr.20101028110015.8271" descendentVnodeUnknownAttributes="7d710028550b302e312e312e382e342e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473550b302e312e312e382e332e3171057d7106580b0000007374725f6c656f5f706f737107680473550b302e312e312e382e352e3171087d7109580b0000007374725f6c656f5f706f73710a680473550b302e312e312e382e322e31710b7d710c580b0000007374725f6c656f5f706f73710d680473752e"><vh>@file slideshows.txt</vh></v>
</v>
<v t="ekr.20101026082911.5536"><vh>Release notes</vh>
<v t="ekr.20100805165051.7177"><vh>@file release_notes.txt</vh></v>
</v>
<v t="ekr.20130807203905.16526"><vh>* For the FAQ: create a bzr repository before importing it into Leo</vh></v>
<v t="ekr.20130806072439.19990"><vh>Leo 4.11 a1 Release notes</vh>
<v t="ekr.20130807203905.16780"><vh>Bugs</vh>
<v t="ekr.20130807203905.16687"><vh>Bugs: minor</vh>
<v t="ekr.20130807203905.16476"><vh>Clear previous focus-border after alt-tab</vh></v>
<v t="ekr.20130807203905.16478"><vh>Don't horizontally scroll body pane if word wrapping</vh></v>
<v t="ekr.20130807203905.16479"><vh>Execute selected script now works again</vh></v>
<v t="ekr.20130807203905.16480"><vh>Fixed activateMenu</vh></v>
<v t="ekr.20130807203905.16520"><vh>Fixed bug 1021849: typo in path for icon of desktop shortcut</vh></v>
<v t="ekr.20130807203905.16481"><vh>Fixed bug 1194209: Inconsistent Window Titles</vh></v>
<v t="ekr.20130807203905.16483"><vh>Fixed bug 879338: Global tables in leoApp.py should describe all languages known to the colorizer</vh></v>
<v t="ekr.20130807203905.16491"><vh>Fixed bug 971171: re .leoRecentFiles</vh></v>
<v t="ekr.20130807203905.16492"><vh>Fixed bug 981849: incorrect body content shown</vh></v>
<v t="ekr.20130807203905.16493"><vh>Fixed bug 998090: save file as doesn't remove entry from open file list</vh></v>
<v t="ekr.20130807203905.16494"><vh>Fixed bug: selected node was not always restored properly</vh></v>
<v t="ekr.20130807203905.16495"><vh>Fixed bugs 971166 &amp; 979142 re copy/paste</vh></v>
<v t="ekr.20130807203905.16496"><vh>Fixed crash after viewrendered-hide</vh></v>
<v t="ekr.20130807203905.16497"><vh>Fixed crasher in active_path.py</vh></v>
<v t="ekr.20130807203905.16258"><vh>Fixed crasher in flattenOutline</vh></v>
<v t="ekr.20130807203905.16498"><vh>Fixed crasher in leoBridge</vh></v>
<v t="ekr.20130807203905.16500"><vh>fixed crasher involving g.importFromPath</vh></v>
<v t="ekr.20130807203905.16266"><vh>Fixed failing unit tests in distro</vh></v>
<v t="ekr.20130807203905.16264"><vh>fixed get_fn in viewrendered plugin</vh></v>
<v t="ekr.20130807203905.16501"><vh>Fixed import problems discovered by importing 2to3</vh>
<v t="ekr.20130807203905.16502"><vh> Notes: do not delete</vh></v>
</v>
<v t="ekr.20130807203905.16504"><vh>Fixed missing search text bug</vh></v>
<v t="ekr.20130807203905.16263"><vh>fixed problem with file:/// url's on Windows</vh></v>
<v t="ekr.20130807203905.16505"><vh>Fixed problems with scrolling when saving</vh></v>
<v t="ekr.20130807203905.16506"><vh>Fixed scrolling problem with scrollwheel</vh></v>
<v t="ekr.20130807203905.16507"><vh>Fixed several problems with c-to-py command</vh></v>
<v t="ekr.20130807203905.16508"><vh>Fixed special cases of auto-completion of commands</vh></v>
<v t="ekr.20130807203905.16509"><vh>Fixed undo problems in headlines</vh></v>
<v t="ekr.20130807203905.16510"><vh>Increased the width of find/change text</vh></v>
<v t="ekr.20130807203905.16579"><vh>Made sure tab completion only happens on explicit tab</vh></v>
<v t="ekr.20130807203905.16262"><vh>Made sure the new load code loads plugins at most once</vh></v>
<v t="ekr.20130807203905.16511"><vh>Minimize scrolling during paste-text</vh></v>
<v t="ekr.20130807203905.16512"><vh>Restore focus on window activation</vh></v>
<v t="ekr.20130807203905.16265"><vh>Restored special case for run-selected-unit-tests</vh></v>
<v t="ekr.20130807203905.16513"><vh>Rewrote and tested at.deleteUnvisitedNodes</vh></v>
<v t="ekr.20130807203905.16514"><vh>Rewrote and tested p.deletePositionsInList</vh></v>
<v t="ekr.20130807203905.16515"><vh>Running unit tests no longer change the selected tab</vh></v>
<v t="ekr.20130807203905.16516"><vh>The @auto read code now catches failed asserts in import code.</vh></v>
<v t="ekr.20130807203905.16517"><vh>Wont Fix bug 903640: Import of Python files containing the strings "&lt;&lt;" and "&gt;&gt;" does not work</vh></v>
</v>
<v t="ekr.20130807203905.16766"><vh>Bugs: serious</vh>
<v t="ekr.20130807203905.16518"><vh>Added ubuntu only menu kludge</vh></v>
<v t="ekr.20130807203905.16477"><vh>Created a dummy tab when only one tab would otherwise be opened</vh></v>
<v t="ekr.20130807203905.16781"><vh>Fixed another scrolling bug</vh></v>
<v t="ekr.20130807203905.16519"><vh>Fixed bug 1184855: data loss with command line 'leo somefile.ext'</vh></v>
<v t="ekr.20130807203905.16260"><vh>Fixed scrolling problem with multiple editors</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16521"><vh>Code</vh>
<v t="ekr.20130807203905.16819"><vh>* Added c.deletePositionsInList</vh></v>
<v t="ekr.20130807203905.16532"><vh>Added c2 keyword arg to c.bringToFront</vh></v>
<v t="ekr.20130807203905.16533"><vh>Added default button to dialog methods</vh></v>
<v t="ekr.20130807203905.16522"><vh>Added external/leosax.py to leoPyRef.leo</vh></v>
<v t="ekr.20130807203905.16269"><vh>Added g.restore_selection_range</vh></v>
<v t="ekr.20130807203905.16535"><vh>Added leo/extensions/sh.py</vh></v>
<v t="ekr.20130807203905.16523"><vh>Added local pylint suppressions</vh></v>
<v t="ekr.20130807203905.16554"><vh>Cached syntax coloring</vh></v>
<v t="ekr.20130807203905.16524"><vh>g.pdb now does qtGui stuff</vh></v>
<v t="ekr.20130807203905.16567"><vh>Improved g.trace</vh></v>
<v t="ekr.20130807203905.16569"><vh>Integrated free_layout into Leo's core</vh></v>
<v t="ekr.20130807203905.16485"><vh>Removed unused files from leo/modes directory</vh></v>
<v t="ekr.20130807203905.16580"><vh>SherlockTracer now shows returned values</vh></v>
</v>
<v t="ekr.20130807203905.16686"><vh>Collaboration branch</vh>
<v t="ekr.20130806211959.17093"><vh>Dumping leo docs to excel</vh></v>
<v t="ekr.20130806211959.17078"><vh>QML notebook</vh>
<v t="ekr.20130806211959.17079"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17080"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17081"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17082"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17083"><vh>RE: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17084"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17085"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17086"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
<v t="ekr.20130806211959.17087"><vh>Re: QML notebook - phase zero - toy ui ;-)</vh></v>
</v>
<v t="ekr.20130526065545.17576"><vh>Templates with macro expansions</vh></v>
<v t="ekr.20130526065545.14925"><vh>Full text searches</vh></v>
</v>
<v t="ekr.20130807203905.16611"><vh>Commands: new and improved</vh>
<v t="ekr.20130807203905.16534"><vh>Added docstrings for all commands</vh></v>
<v t="ekr.20130807203905.16548"><vh>All viewrended commands now start with vr</vh></v>
<v t="ekr.20130807203905.16551"><vh>Allow periods before section names in headlines</vh></v>
<v t="ekr.20130807203905.16268"><vh>Alt-Home &amp; Alt-End collapse all possible nodes</vh></v>
<v t="ekr.20130807203905.16261"><vh>Ensure selected @test node is run</vh></v>
<v t="ekr.20130807203905.16562"><vh>Fixed dabbrev commands</vh></v>
<v t="ekr.20130807203905.16564"><vh>Help commands now use &lt;pre&gt; formatting if docutils is not available</vh></v>
<v t="ekr.20130807203905.16565"><vh>help-for-command executes apropos commands</vh></v>
<v t="ekr.20130807203905.16566"><vh>help-for-python now uses vr window</vh></v>
<v t="ekr.20130807203905.16557"><vh>help-for-regular-expressions command</vh></v>
<v t="ekr.20130807203905.16568"><vh>Improved incremental search commands</vh></v>
<v t="ekr.20130807203905.16561"><vh>normalize-whitespace</vh></v>
<v t="ekr.20130807203905.16559"><vh>parse-body command</vh></v>
<v t="ekr.20130807203905.16560"><vh>print-buttons command</vh></v>
<v t="ekr.20130807203905.16581"><vh>Show all commands after &lt;alt-x&gt;&lt;tab&gt;</vh></v>
<v t="ekr.20130807203905.16546"><vh>vr-expand/contract commands</vh></v>
<v t="ekr.20130526065545.17495"><vh>zoom-in/out commands</vh>
<v t="ekr.20130526065545.17494"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17496"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17497"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17498"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17499"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17500"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17501"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17502"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17503"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17504"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17505"><vh>body text zooming pushed</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16778"><vh>Gui improvements</vh>
<v t="ekr.20130526065545.17594"><vh>@wrap now suppresses horizontal scrolling</vh></v>
<v t="ekr.20130807203905.16547"><vh>All @button nodes now show call tips</vh></v>
<v t="ekr.20130807203905.16552"><vh>baseNativeTree.onHeadChanged now truncates headlines</vh></v>
<v t="ekr.20130807203905.16555"><vh>Change focus-border color depending on input state</vh>
<v t="ekr.20130807203905.16556"><vh>What I did</vh></v>
<v t="ekr.20130807203905.16553"><vh>body border</vh></v>
</v>
<v t="ekr.20130806072439.19631"><vh>sublime text &amp; other themes</vh>
<v t="ekr.20130526065545.17514"><vh>New theme in leoSettings.leo: Sublime Text...</vh></v>
<v t="ekr.20130526065545.17589"><vh>go-anywhere a'la sublime text: first light"</vh>
<v t="ekr.20130526065545.17590"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
<v t="ekr.20130526065545.17592"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
</v>
<v t="ekr.20130526065545.17515"><vh>ANN: Sublime Text 2 like dark theme</vh></v>
<v t="ekr.20130526065545.17459"><vh>ANN: dark theme pushed to trunk</vh>
<v t="ekr.20130526065545.17451"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17452"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17453"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17454"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17455"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17456"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17457"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17458"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17460"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17461"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17462"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17463"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17464"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17465"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16255"><vh>Use ctrl-click to open url's</vh></v>
</v>
<v t="ekr.20130807203905.16610"><vh>New features</vh>
<v t="ekr.20130806072439.19486"><vh>About @testsetup</vh></v>
<v t="ekr.20130807203905.16536"><vh>Added support for @testclass</vh>
<v t="ekr.20130807203905.16542"><vh>makeTestClass</vh></v>
<v t="ekr.20130807203905.16538"><vh>TM.doTests &amp; helpers (local tests)</vh>
<v t="ekr.20130807203905.16539"><vh>get_suite_script</vh></v>
<v t="ekr.20130807203905.16540"><vh>get_test_class_script</vh></v>
<v t="ekr.20130807203905.16541"><vh>makeTestCase</vh></v>
<v t="ekr.20130807203905.16542"></v>
<v t="ekr.20130807203905.16543"><vh>makeTestSuite</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16549"><vh>Allow cloned siblings</vh></v>
<v t="ekr.20130807203905.16550"><vh>Allow clones anywhere in @file nodes</vh></v>
<v t="ekr.20130526065545.17445"><vh>Major additions to abbreviations</vh>
<v t="ekr.20130526065545.17442"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17443"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17446"><vh>Re: Major additions to abbreviations</vh></v>
</v>
<v t="ekr.20130807203905.16482"><vh>Warn if same .leo file open in another Leo instance</vh></v>
<v t="ekr.20130807203905.16558"><vh>Completed the new support for sessions</vh></v>
</v>
<v t="ekr.20130807203905.16779"><vh>New languages and importers</vh>
<v t="ekr.20130526065545.14927"><vh>Added importer .otl files</vh>
<v t="ekr.20130526065545.14928"><vh>NEW: LeoReader, as web app</vh></v>
</v>
<v t="ekr.20130806175854.17068"><vh>Added importer for .ipynb importer</vh></v>
<v t="ekr.20130807203905.16583"><vh>Added importer for TypeScript files</vh></v>
<v t="ekr.20130807203905.16585"><vh>Added importer for vimoutliner imports and @auto-otl</vh></v>
<v t="ekr.20130807203905.16545"><vh>Added support for clojure syntax coloring</vh></v>
</v>
<v t="ekr.20130803073926.17114"><vh>Plugins</vh>
<v t="ekr.20130806072439.18495"><vh>ANN: in body python calculations commands</vh>
<v t="ekr.20130806072439.18496"><vh>Re: ANN: in body python calculations commands</vh></v>
<v t="ekr.20130806072439.18497"><vh>Re: ANN: in body python calculations commands</vh></v>
<v t="ekr.20130806072439.18498"><vh>Re: ANN: in body python calculations commands</vh></v>
</v>
<v t="ekr.20130526065545.14926"><vh>bookmarks.py</vh>
<v t="ekr.20130806072439.18499"><vh>ANN: more fluid bookmark pane control</vh></v>
</v>
<v t="ekr.20130806072439.18508"><vh>Cross-outline node editing</vh>
<v t="ekr.20130806072439.18509"><vh>Re: Cross-outline node editing</vh></v>
<v t="ekr.20130806072439.18510"><vh>Re: Cross-outline node editing</vh></v>
<v t="ekr.20130806072439.18511"><vh>Re: Cross-outline node editing</vh></v>
</v>
<v t="ekr.20130806072439.18531"><vh>Gauging interest: markdown processing addition to viewrendered?</vh>
<v t="ekr.20130806072439.18532"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18533"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18534"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18535"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18536"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18537"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18539"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
<v t="ekr.20130806072439.18540"><vh>Re: Gauging interest: markdown processing addition to viewrendered?</vh></v>
</v>
<v t="ekr.20130806072439.18541"><vh>Ipython now has cell magic</vh></v>
<v t="ekr.20130807203905.16572"><vh>IPython plugin now works with all versions of IPython</vh>
<v t="ekr.20130807203905.16573"><vh> Notes</vh></v>
<v t="ekr.20130807203905.16574"><vh> What I did</vh></v>
<v t="ekr.20130807203905.16575"><vh>@url ipython api</vh></v>
<v t="ekr.20130807203905.16576"><vh>@url ipython-dev archive</vh></v>
<v t="ekr.20130807203905.16577"><vh>@url ipython.core.interactiveshell</vh></v>
</v>
<v t="ekr.20130806072439.18542"><vh>new jump to error command for leoscreen</vh></v>
<v t="ekr.20130526065545.17620"><vh>printing.py</vh>
<v t="ekr.20130806072439.18804"><vh>[ANN] New plugin - printing.py</vh>
<v t="ekr.20130806072439.18805"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130806072439.18808"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17621"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17622"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17623"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17624"><vh>Re: [ANN] New plugin - printing.py</vh></v>
</v>
</v>
<v t="ekr.20130806072439.18543"><vh>Read / write json files added to valuespace.py plugin</vh>
<v t="ekr.20130806072439.18545"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18548"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18549"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18550"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
<v t="ekr.20130806072439.18551"><vh>Re: Read / write json files added to valuespace.py plugin</vh></v>
</v>
<v t="ekr.20130526065545.17435"><vh>screen_capture.py</vh>
<v t="ekr.20130526065545.17429"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17430"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17431"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17432"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17433"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17434"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17436"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
</v>
<v t="ekr.20130806072439.18552"><vh>should add "refresh from disk" at parent node is a good idea?</vh>
<v t="ekr.20130806072439.18553"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
<v t="ekr.20130806072439.18554"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
<v t="ekr.20130806072439.18555"><vh>Re: should add "refresh from disk" at parent node is a good idea?</vh></v>
</v>
<v t="ekr.20130807203905.16584"><vh>Supported ctrl-clicks in vr panes</vh></v>
<v t="ekr.20130803073926.17123"><vh>valuespace.py</vh>
<v t="ekr.20130526065545.17506"><vh>Quick valuespace.py update: it now support...</vh></v>
<v t="ekr.20130803125244.17094"><vh>Document valuespace from Ville's blog</vh></v>
<v t="ekr.20130806072439.18889"><vh>Blog post about valuespace up on leo-editor.github.io</vh>
<v t="ekr.20130806072439.18891"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
</v>
</v>
<v t="ekr.20130806072439.18557"><vh>Ville, please help make leoIPython.py work with legacy IPython</vh>
<v t="ekr.20130806072439.18558"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18559"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18560"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18561"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18562"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18563"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18564"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18566"><vh>Re: Ville, please help make leoIPython.py work with legacy IPython</vh></v>
<v t="ekr.20130806072439.18567"><vh>"Mylyn" with the new hooks</vh>
<v t="ekr.20130806072439.18568"><vh>Re: "Mylyn" with the new hooks</vh></v>
</v>
</v>
</v>
<v t="ekr.20130803073926.17115"><vh>Scripts</vh>
<v t="ekr.20130807203905.16588"><vh>Added cleanup-imported-nodes script to scripts.leo</vh></v>
<v t="ekr.20130807203905.16242"><vh>Added import-org-mode script</vh>
<v t="ekr.20130807203905.16243"><vh>import-org-mode (command, not used)</vh>
<v t="ekr.20130807203905.16244"><vh>ctor</vh></v>
<v t="ekr.20130807203905.16245"><vh>go</vh></v>
<v t="ekr.20130807203905.16246"><vh>scan</vh></v>
<v t="ekr.20130807203905.16247"><vh>test</vh></v>
</v>
<v t="ekr.20130807203905.16248"><vh>@@button import-org-mode</vh>
<v t="ekr.20130807203905.16249"><vh>scan</vh></v>
</v>
<v t="ekr.20130807203905.16250"><vh>test-import-org-mode</vh></v>
</v>
<v t="ekr.20130807203905.16587"><vh>Added jinja2 templating script to scripts.leo</vh></v>
<v t="ekr.20130807203905.16251"><vh>Code for displaying a function call hierarchy in Leo</vh>
<v t="ekr.20130807203905.16252"><vh>call tree</vh>
<v t="ekr.20130807203905.16253"><vh>displayCalltree</vh></v>
<v t="ekr.20130807203905.16254"><vh>trace session</vh></v>
</v>
</v>
<v t="ekr.20130526065545.17487"><vh>Indexing files for full text search</vh>
<v t="ekr.20130526065545.17488"><vh>Re: Indexing files for full text search</vh></v>
<v t="ekr.20130526065545.17489"><vh>Re: Idea/needed: system command queue</vh></v>
<v t="ekr.20130526065545.17490"><vh>Re: Idea/needed: system command queue</vh></v>
</v>
<v t="ekr.20130526065545.17634"><vh>persistent state with json as a leo abbreviation</vh>
<v t="ekr.20130526065545.17633"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17635"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17636"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17637"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17638"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
</v>
<v t="ekr.20130803125244.17095"><vh>position script (put in scripting chapter?)</vh></v>
<v t="ekr.20130526065545.14929"><vh>Rev 5378: cleanup-imported-nodes script in scripts.leo &amp; an Aha</vh></v>
<v t="ekr.20130526065545.14930"><vh>Revised recursive import script</vh></v>
<v t="ekr.20130807203905.16490"><vh>Script to create global data structures from in modes/*.py files</vh></v>
<v t="ekr.20130806211959.17094"><vh>Script to export full contents</vh>
<v t="ekr.20130806211959.17095"><vh>script</vh></v>
</v>
<v t="ekr.20130807203905.16487"><vh>Script: get all comments from modes (slow)</vh>
<v t="ekr.20130807203905.16488"><vh>get_paths</vh></v>
<v t="ekr.20130807203905.16489"><vh>import_module</vh></v>
</v>
<v t="ekr.20130807090137.19378"><vh>Terry script</vh></v>
<v t="ekr.20130526065545.17546"><vh>Tool for diffing Leo files</vh>
<v t="ekr.20130526065545.17545"><vh>Re: Tool for diffing Leo files</vh></v>
</v>
</v>
<v t="ekr.20130807203905.16608"><vh>Settings &amp; options</vh>
<v t="ekr.20130807203905.16529"><vh>Added @color minibuffer-foreground-color setting</vh></v>
<v t="ekr.20130807203905.16530"><vh>Added --no-plugins option</vh></v>
<v t="ekr.20130807203905.16531"><vh>Added @color log_warning_color and g.getActualColor</vh></v>
<v t="ekr.20130807203905.16563"><vh>Fully support :: convention in @mode nodes</vh></v>
</v>
<v t="ekr.20130807203905.16270"><vh>Web site improvements</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040524104904.161"></t>
<t tx="EKR.20040524104904.211"></t>
<t tx="EKR.20040524104904.245"></t>
<t tx="EKR.20040524104904.261"></t>
<t tx="EKR.20040524104904.274"></t>
<t tx="EKR.20040524104904.99"></t>
<t tx="TL.20080804095315.1"></t>
<t tx="ekr.20040414161647">@pagewidth 70
@language rest

These are the sources for Leo's users guide.

They contain sphinx markup. See::
    
    http://sphinx.pocoo.org/
    http://docutils.sourceforge.net/docs/user/rst/quickstart.html
    
To generate these docs, see the next node: "Generating the Users Guide"
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20050407144342">



</t>
<t tx="ekr.20050407144342.1"></t>
<t tx="ekr.20050407144342.2"></t>
<t tx="ekr.20050407144342.3"></t>
<t tx="ekr.20050407144417"></t>
<t tx="ekr.20050812123002"></t>
<t tx="ekr.20050812123002.1"></t>
<t tx="ekr.20050812123002.2">Deletes p.v.rst2_http_attributename from all nodes after writing.

Deletes p.v.unknownAttributes if it then becomes empty.
</t>
<t tx="ekr.20050812123002.3"></t>
<t tx="ekr.20050812123002.4">@nocolor

If False, add_node_marker and http_support_main  do nothing.  Otherwise add_node_marker does the following:

1. add_node_marker writes a string using generate_node_marker.

Generates 'http-node-marker-'+str(number), where number is config.node_counter
(incremented each time add_node_marker is called.

2. Enables the following code in :
@color

    if config.tag == 'open2':
        http_map = self.http_map
    else:
        http_map = {}
        config.anchormap = {}
        # maps v nodes to markers.
        config.node_counter = 0
    # [snip] code to write the tree
    if config.rst2_http_server_support:
        self.http_map = http_map
</t>
<t tx="ekr.20050812123002.5"></t>
<t tx="ekr.20050812123002.6">True: call body_filter to massage text.

Removes @ignore, @nocolor, @wrap directives.
</t>
<t tx="ekr.20050812123002.7">Used differently.  See rst2_pure_document.
</t>
<t tx="ekr.20050812123002.8"></t>
<t tx="ekr.20050831184021.1"></t>
<t tx="ekr.20050831184021.3"></t>
<t tx="ekr.20050831184021.4"></t>
<t tx="ekr.20050831184021.5"></t>
<t tx="ekr.20050831195331.1"></t>
<t tx="ekr.20050831195331.4"></t>
<t tx="ekr.20050831195449">@language rest

For instruction about installing Leo see:
http://leoeditor.com/installing.html

For everything a beginner needs to know about Leo see:
http://leoeditor.com/intro.html

For help, please ask questions at:
http://groups.google.com/group/leo-editor</t>
<t tx="ekr.20050901084134"></t>
<t tx="ekr.20050912125144"></t>
<t tx="ekr.20051202072010"></t>
<t tx="ekr.20060430221745"></t>
<t tx="ekr.20060527105211"></t>
<t tx="ekr.20060612102055"></t>
<t tx="ekr.20060620094033"></t>
<t tx="ekr.20060913164304"></t>
<t tx="ekr.20061025065357"></t>
<t tx="ekr.20070317033759"></t>
<t tx="ekr.20070610174018"></t>
<t tx="ekr.20070628083442"></t>
<t tx="ekr.20070701101808"></t>
<t tx="ekr.20080203101507"></t>
<t tx="ekr.20080412124815.1"></t>
<t tx="ekr.20080730212711.14"></t>
<t tx="ekr.20080923182326.1">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.
</t>
<t tx="ekr.20090717084250.10702"></t>
<t tx="ekr.20091111112709.6671"></t>
<t tx="ekr.20091130111843.6787"></t>
<t tx="ekr.20100731112744.7267">@pagewidth 75</t>
<t tx="ekr.20100805171546.4412"># This section contains important files used to generate Leo's web site.</t>
<t tx="ekr.20100821182153.4341"></t>
<t tx="ekr.20100907092300.4440"></t>
<t tx="ekr.20100907092300.4441">Path to inkscape template file
</t>
<t tx="ekr.20100907092300.4442">Path to Inkscape executable
</t>
<t tx="ekr.20101007100904.4372"></t>
<t tx="ekr.20101009114830.4723">@nocolor-node

Formerly, this had to be on because the expansion bits
of @screenshot trees were significant.

Happily, this is no longer true.

True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101009114830.4724"></t>
<t tx="ekr.20101009114830.4725"></t>
<t tx="ekr.20101025080245.5794"></t>
<t tx="ekr.20101025080245.5795"></t>
<t tx="ekr.20101025080245.5796"></t>
<t tx="ekr.20101025080245.5798"></t>
<t tx="ekr.20101025080245.5799"></t>
<t tx="ekr.20101025080245.5801">c:/leo.repo/trunk/leo/doc/leo_toc.html</t>
<t tx="ekr.20101026081737.5531">@language html

&lt;!-- EKR: changed these by hand to give the toc some structure --&gt;

&lt;p&gt;Preliminaries&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="frontMatter.html"&gt;Front Matter&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="preface.html"&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="testimonials.html"&gt;What People Are Saying About Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="FAQ.html"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="slides.html"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="installing.html"&gt;Installing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="intro.html"&gt;The Leo Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="outlines.html"&gt;Using Outlines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intermediate Topics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="commands.html"&gt;Using Leo&amp;#8217;s Commands&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="customizing.html"&gt;Customizing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="coloring.html"&gt;Controlling Syntax Coloring&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="rstplugin3.html"&gt;Creating Documents with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="scripting.html"&gt;Scripting Leo with Python&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="plugins.html"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="writingPlugins.html"&gt;Writing Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="unitTesting.html"&gt;Unit testing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="debuggers.html"&gt;Debugging with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="atShadow.html"&gt;Using &amp;#64;shadow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leo and Other Programs&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="emacs.html"&gt;Leo and Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="IPythonBridge.html"&gt;IPython and Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="leoBridge.html"&gt;Embedding Leo with the leoBridge module&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="vimBindings.html"&gt;Using Vim Bindings with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="zodb.html"&gt;Using ZODB with Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="directives.html"&gt;Leo&amp;#8217;s Reference&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="design.html"&gt;Designing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="history.html"&gt;History of Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="theory.html"&gt;Theory of Operation&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="whitepapers.html"&gt;White Papers&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="appendices.html"&gt;Appendices&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="glossary.html"&gt;Glossary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Release Notes

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="what-is-new.html"&gt;What&amp;#8217;s New in Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</t>
<t tx="ekr.20101026082911.5536"></t>
<t tx="ekr.20101104024804.4898">@nocolor-node

The children of this node contain two @button scripts. These are disabled, but
you can execute them by selecting them and hitting Ctrl-B (execute-script).

To generate these docs by hand:

    - From this file, run rst3 on desired tree.
    - cd leo\doc\html
    - make html

To create pdf (probably easiest on Linux, with necessary latex packages installed):

    - make latex
    - cd _build/latex
    - make all-pdf
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20101112045055.5065">http://www.greygreen.org/tmp/plugins.html</t>
<t tx="ekr.20111108052738.5507">run-marked-unit-tests-externally = Alt-4
run-all-unit-tests-externally = Alt-5
</t>
<t tx="ekr.20111127144911.5545"></t>
<t tx="ekr.20120315101404.14224">@pagewidth 70</t>
<t tx="ekr.20130327143919.5868">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Leo's home page has moved&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Leo's home page has moved.&lt;/h1&gt;
&lt;p&gt;This page has moved to &lt;a href="http://leoeditor.com"&gt;http://leoeditor.com&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20130526065545.14925">Apart from the full text search indexing script I just added, I've made
a bunch of basically cosmetic changes to Ville's multi outline full text
search tool.  There's a new @setting, @int fts_max_hits, which controls
the max hits returned, instead of the hardwired default of 30.

With any sensible value for fts_max_hits, searches for terms which
generate many hits in many outlines won't return the full list of
outlines containing hits, because the search stops when fts_max_hits is
reached.  I set fts_max_hits to a non-sensible 1200 to get around this,
it seems to work fine.  Obviously terms which generate that many hits
are bad search terms anyway, but it's helpful to get as close to the
full list of outlines containing hits as possible.

Also most of my changes apply only to the "f target" find command, not
the simpler "s target" search command.</t>
<t tx="ekr.20130526065545.14926">10/2/11

Can also be used for bookmarking directly from the browser to Leo.  To
do this, add a bookmark to the browser with the following URL / Location:

    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&amp;name=' + escape(d.title) + '&amp;selection=' + escape(window.getSelection()) + '&amp;url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)

and edit the port (8130 in the example above) to match the port you're using
for mod_http.

Bookmarks are created as the first node in the outline which has been opened longest.
You can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,
e.g.::

    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming

to place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.

The headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.
If the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.

The browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true
in ``about:config`` in Firefox.</t>
<t tx="ekr.20130526065545.14927">As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
imports of .otl files.

**Warning**: the new code is simply a prototype.  Play with these
features *only* on files you can afford to be corrupted.

To use @auto-otl:

1.  The easy, and relatively safe way:

- Use Leo's import-file command to create and populate an @auto-otl
node.
- Save the .leo file.

2. The manual, less safe way:

- Create a node called @auto-otl x.y
  x can be an absolute path or a path relative to the directory
containing the .leo file.

- Save the .leo file, but **do not** overwrite the existing .otl file
when prompted.

Either way, you should now have an @auto-otl node whose **children**
represent the contents of the external .otl file.  (The actual @auto-
otl node is *not* written to the external file.  This allows you to
put Leo directives in the node.) Changing the children in Leo will
change the external file.  Changing the external file outside of Leo
will update the outline the next time you restart the .leo file
containing the @auto-otl node.

**Important**: as with all kinds of @auto nodes, clone links will
break the next time you load Leo if the @auto-otl tree contains any
kind of cloned nodes.  This is pretty much a fundamental limitation of
@auto trees.

However, if the VO people wanted to *retain* gnx's when editing in
vim, it would, in theory, be possible to retain clone links when Leo
read the external .otl file.  I don't plan to do this any time soon,
and it would require and extension to the VO file format, but I wanted
to point out the possibilities.


&gt; **Important**: as with all kinds of @auto nodes, clone links will
&gt; break the next time you load Leo if the @auto-otl tree contains any
&gt; kind of cloned nodes.  This is pretty much a fundamental limitation of
&gt; @auto trees.

I'd like to add two points to this discussion:

1. This limitation instantly disappears when you convert from (any
kind of) @auto to @file.  The reason is that the sentinels that Leo
writes "carry" both outline structure *and* node identity.  It is this
unique, immutable node identity which provides for robust linking of
clones.

I hinted in another thread that a smallish addition to the otl format
would allow .otl files to carry identity.  For example, suppose that
headlines were optionally represented in the file format as::

    &lt;indentation: hard tabs&gt; :: gnx :: headline

The VO folks could do this in an upward compatible manner without
changing vim's core in any way.  True, it doesn't give VO Leo's clone
capabilities, but it *retains* the information necessary to use clones
*in Leo*.

2. Unlike .otl, the external files produced by Leo can be used
*unchanged* as program source files.  Indeed, all of Leo's Python
source files contain outline structure and node identity--Leo
sentinels are simply comment lines in the appropriate language.  In
contrast, the format of .otl files ensures that body text can not be
used untranslated as source code.  It is the ability to *be* source
code, even more than cloning, that makes Leo's external file format so
useful.

&gt; As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
&gt; imports of .otl files.

Rev 5310 contains a rewrite of the scanHelper method.  As before, this
code should be considered experimental.

The scanHelper method now parses each line of the .otl independently:
any combination of headline and body lines should now be valid,
regardless of indentation level.  If necessary, the parser will insert
intermediate nodes so as to allow lines that are indented more than
one more than the previous node. This is the most general scheme that
I can imagine.</t>
<t tx="ekr.20130526065545.14928">From Ville:

.... aaaaand we are live :).

Test it out at:

http://koti.kapsi.fi/vivainio/t/LeoReader/main.html

Sources here:

https://github.com/vivainio/LeoReader

Pretty much all the relevant stuff is in these files:

https://github.com/vivainio/LeoReader/blob/master/leoaccess.coffee

https://github.com/vivainio/LeoReader/blob/master/main.html


On Sat, May 12, 2012 at 12:01 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I want to do some technology evaluation, so I will start doing a Leo
&gt; file reader for mobile devices using:
&gt;
&gt; - jQuery mobile
&gt; - CoffeeScript
&gt;
&gt; This can be deployed on web or locally. Interesting use cases are
&gt; browsing Leo notes you composed elsewhere on your tablet, and
&gt; publishing leo docs on the web (e.g. we could host fully browseable
&gt; leo source outline on Leo website)
&gt;
&gt; I will notify the mailing list on the progress; it may be slow since I
&gt; don't have much contiguous time slots for hobby projects at the
&gt; moment. If someone wants to hop along, all the better; I'll probably
&gt; start the project at github once I have something that runs on a
&gt; desktop browser properly.

btw, noted that it doesn't work with IE (didn't test it at the time, it's easyfix TBD later).

Works ok in Firefox and Chrome.</t>
<t tx="ekr.20130526065545.14929">Edward K. Ream &lt;edreamleo@gmail.com&gt;

A new script, now in scripts.leo, cleans up imported @file nodes as follows:

- Moves a shebang line from the first child to the root.
- Moves a leading docstring in the first child to the root.
- Uses a section reference for declarations.
- Removes leading and trailing blank lines from all nodes.
- Merges a node containing nothing but comments with the next node.
- Merges a node containing no class or def lines with the previous node.

The Aha: dealing with trees *after* they have been created is much
easier than creating the tree in the first place.

It would be impossible to conceive of this script in any other environment.
Leo's node structure drastically simplifies the patterns to be discovered.
</t>
<t tx="ekr.20130526065545.14930">6/2/12

The recursive import script now contains a suite of post-processing fixes:

- Replacing backslashes with forward slashes in headlines.
- Removing empty nodes.
- Adding @path directives that reduce the needed path specifiers in descendant nodes.
- Adding @file to nodes or replacing @file with @@file.


No matter how good Leo's importers are, (and they are now quite good),
there will *always* be cases where thoughtful human intervention will be
required.

Some import mistakes can *only* be found by running tests.  For
complex programs like 2to3, the only truly safe way to check imports
is by running the 2to3 test suite.
</t>
<t tx="ekr.20130526065545.17429">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 23 Apr 2013 05:08:47 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; Hi Terry,
&gt; 
&gt; I just enabled the plugin and tried 'screen-capture-now'. 
&gt; It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
&gt; png file written in the folder.
&gt; I may have missed something? :)

Thanks for the report, I just pushed the fix, you can't have ':' in a
Windows file name.

As for the feedback appearing in the log rather than the console, do
you have a console open?  It may depend on whether you start Leo
with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console
opens, and the filename appears there.

Cheers -Terry

&gt; Here is the log:
&gt; Leo Log Window
&gt; Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
&gt; Python 3.3.1, qt version 4.8.4
&gt; Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
&gt; C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png
&gt; 
&gt; At the leo blog http://leo-editor.github.io/screen_capture.html it says 
&gt; "The only feedback is in the console, as messages in the log would be 
&gt; distracting in the captured image."
&gt; All my feedback is in the log and none in the console.
&gt; 
&gt; Regards
&gt; Lewis
&gt; 

</t>
<t tx="ekr.20130526065545.17430">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Thanks it's working nicely :)
I use console (sourceforge.net/projects/console ) to open leo. I run 
launchleo.py from the leo directory so I'm not sure if python.exe or pythonw.exe are used.
</t>
<t tx="ekr.20130526065545.17431">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;

if you start Leo (or any .py file) by double-clicking on it it's likely
`pythonw.exe` is being used. You can find out for sure with `assoc` and
`ftype` from a command shell:

{{{
C:\\&gt;assoc .py
.py=Python.File

C:\\&gt;ftype Python.File
Python.File="E:\\Python27\\ArcGIS10.1\\pythonw.exe" "%1" %*

C:\\&gt;assoc .leo
.leo=LeoFile

C:\\&gt;ftype LeoFile
LeoFile=b:\\bin\\leo.bat "%1"
}}}

more info: http://ss64.com/nt/ftype.html

</t>
<t tx="ekr.20130526065545.17432">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 21 Apr 2013 08:59:51 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; hi, Terry,
&gt; 
&gt; It seems a great plugin! It is useful for people who write posts about leo.
&gt; 
&gt; 1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
&gt; be updated ;-)

Thanks - Matt has pointed that out too - hard part was searching
through three machines with two accounts on each to find where that
snapshot is actually generated :-)

&gt; 2. btw, can this plugin set a different path to save captured image?

I just pushed

Settings
--------

``@string screen-capture-save-path``
  Save screen shots here instead of ~/.leo/screen_captures
</t>
<t tx="ekr.20130526065545.17433">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

I just enabled the plugin and tried 'screen-capture-now'. 
It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
png file written in the folder.
I may have missed something? :)

Here is the log:
Leo Log Window
Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
Python 3.3.1, qt version 4.8.4
Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png

At the leo blog http://leo-editor.github.io/screen_capture.html it says 
"The only feedback is in the console, as messages in the log would be 
distracting in the captured image."
All my feedback is in the log and none in the console.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17434">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

It seems a great plugin! It is useful for people who write posts about leo.

1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
be updated ;-)
2. btw, can this plugin set a different path to save captured image?
</t>
<t tx="ekr.20130526065545.17435">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

See http://leo-editor.github.io/screen_capture.html

... "screen_capture_now captures an image immediately,
screen_capture_5sec waits five seconds, so you can position the
pointer, open menus etc. The only feedback is in the console, as
messages in the log would be distracting in the captured image."...
</t>
<t tx="ekr.20130526065545.17436">@nocolor

From: tfer &lt;tfetherston@aol.com&gt;

That's how I run Leo, (console is great for windows).  Unless you 
specifically call pythonw.exe it should use python.exe located through your 
"Path" system enbironment variable.  Here is what I use in the shell 
setting for a console "leo" tab:
    cmd.exe /k C:\\entPY27\\python.exe 
"C:\\VC\\Bzr\\leo-editor\\trunk\\launchLeo.py"
the cmd.exe /k portion creates a dos window that the rest of the command 
line is run in, (the dos window is hidden offscreen and console uses its 
magic to present it inside of its buffer.  This now serves as stdio, (and 
stderr) and catches messages written by leo.

Adjust your shell command to where python and leo lives on your machine, 
(found in Edit-&gt;Setting-&gt;Tabs).

Tom

On Wednesday, April 24, 2013 8:41:02 PM UTC-4, lewis wrote:
&gt;
&gt; Terry,
&gt;
&gt; Thanks it's working nicely :)
&gt; I use console (sourceforge.net/projects/console ) to open leo. I run 
&gt; launchleo.py from the leo directory so I'm not sure if  \\python.exe or 
&gt; \\pythonw.exe are used.
&gt;
&gt; Regards
&gt; Lewis
&gt;
&gt; On Tuesday, April 23, 2013 11:24:00 PM UTC+10, Terry wrote:
&gt;&gt;
&gt;&gt;
&gt;&gt; As for the feedback appearing in the log rather than the console, do 
&gt;&gt; you have a console open?  It may depend on whether you start Leo 
&gt;&gt; with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console 
&gt;&gt; opens, and the filename appears there. 
&gt;&gt;
&gt;&gt; Cheers -Terry 
&gt;&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17442">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 2. The same exec statement appears to allow the execution of arbitrary
&gt; Python code.  I'm not sure how comfortable I am with that.  Any
&gt; comments?

That's why enabling requires @bool scripting-at-script-nodes = True as
well as the abbreviation specific stuff.  The risk seems equivalent to
the scripting-at-script-nodes = True risk.

&gt; &gt; Here's a quick screencast of the template expansions:  
&gt; 
&gt; I loved this screencast.  Could you tell us the tool chain that you
&gt; used to produce it?

I used (gtk-)recordmydesktop.  I used the non-gui version,
recordmydesktop, with the window ID, after hitting some snag I can't
remember with the gui version, gtk-recordmydesktop.  But I couldn't
work out avconv parameters to convert the ogv format to something more
common, and although vimeo seemed to understand it well enough to
upload the video and present the first frame, it wasn't viewable
there.  recordmydesktop "just worked", which was nice.

I'll look at the Python 3 issues.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17443">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Wed, Aug 22, 2012 at 8:52 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; Abbreviations can, in the branch
&gt; http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test
&gt; include computed values and place holders which you can step through,
&gt; filling in a template.  Edward, these changes involve some core code,
&gt; although I think they're quite benign, but pls. see change notes at
&gt; the bottom of this email.

This is great work, Terry.  Many thanks for it.

Just installed the leo_test branch and have taken a careful look at
the log.  Here are my comments.

1. The exec statement in abbrevClass.finishCreate should be rewritten
for Python3.  Please make sure the code passes all unit tests when
unitTest.leo is run with Python3.

2. The same exec statement appears to allow the execution of arbitrary
Python code.  I'm not sure how comfortable I am with that.  Any
comments?

Aside from that, all looks well.  Feel free to merge with the trunk
after ensuring that the code works with Python 3.

&gt; Here's a quick screencast of the template expansions:

I loved this screencast.  Could you tell us the tool chain that you
used to produce it?

&gt; Here are the draft docs. for abbreviations:

Good work.  I see that you merged them into LeoDocs.leo, which I like.

Edward
"</t>
<t tx="ekr.20130526065545.17445">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Abbreviations can now include computed values and place holders which you
can step through, filling in a template.

Here's a quick screencast of the template expansions:
http://www.greygreen.org/tmp/leoabbrev.ogv

Here are the draft docs. for abbreviations:

Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand your input
(just ``"some_function"`` and ``"one, two, three=4"`` to something
like:: 
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;

        Created: Wed Aug 22 10:32:54 CDT 2012
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

They can also close XML tags, enter balanced indented markup for
various languages, etc.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in
individual .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in
@data # global-abbreviation nodes. Typically you would define @data
abbreviation nodes # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \\:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \\|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.


Edward - to look at the changes in theory you could go to

http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test/revision/5430?compare_revid=5424

but in practice I think the lack of context there makes that useless,
an you might want to just pull
http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test and look at
it with `bzr qlog`.

Some of the code is in masterCommand, which is why I wanted you to look
at it, but it's guarded by if c.abbrev_subst_start:, so it won't do
anything unless enabled.
</t>
<t tx="ekr.20130526065545.17446">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 1. The exec statement in abbrevClass.finishCreate should be rewritten
&gt; for Python3.  Please make sure the code passes all unit tests when
&gt; unitTest.leo is run with Python3.

Done, added g.do_exec for this.

So the new abbreviations with template expansion and evaluated
expressions are on the trunk, view the screencast
http://www.greygreen.org/tmp/leoabbrev.ogv
with `vlc` or some such to see them in action.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17451">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:06 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed the solarized dark theme to trunk.


Spectacular.  It looks like you've completed the coding part of the
sprint.  Well done!

Edward
</t>
<t tx="ekr.20130526065545.17452">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, I'm slightly bothered by the fact that color variable names have
"solarized" in them. You are supposed to create new themes by changing
their values in the "config" node, after which the theme is not "solarized"
any more.

how about "@leotheme-c-0" (for color 0) etc.
</t>
<t tx="ekr.20130526065545.17453">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Thanks! Leo feels like a new program now :).
</t>
<t tx="ekr.20130526065545.17454">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Re: "toggle between the custom and default leosettings"

This only occurs when the leo session in which I edited the
myLeoSettings file remains in session - I can then cause the toggle to
occur. Once you leave the the leo session, it always loads 
myLeoSettings.leo as expected. 

It took me quite some time to reproduce; when I finally realised how I 
managed to toggle themes
in leo I thought it would be a nice feature to have :)

Regards
Lewis


On Sunday, April 14, 2013 6:35:31 PM UTC+10, lewis wrote:
&gt;
&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
&gt; custom and default leosettings.
&gt; Is that toggle intended? I would have expected that leo should behave 
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;
&gt; Regards
&gt; Lewis
&gt;

</t>
<t tx="ekr.20130526065545.17455">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Sun, Apr 14, 2013 at 3:35 AM, lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the
&gt; custom and default leosettings.
&gt;


&gt; Is that toggle intended? I would have expected that leo should behave
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;

Thanks for asking a question, rather than immediately filing a bug report
:-)

The general idea is that opening either of the two settings files must be
handled as something of a special case.  Furthermore, certain settings
(like enabled plugins) are inherently "cumulative": the add to what is
already in effect, rather than override what is in effect.

Settings probably work as one would naively expect when you open a clean
copy of Leo, but there may be some glitches when you open additional
files.  If there is specific behavior that you find dubious, please
describe exactly what it is.  We can discuss it, and you can then file a
bug report if you like.

Edward

</t>
<t tx="ekr.20130526065545.17456">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 22:08:19 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; BTW, I'm slightly bothered by the fact that color variable names have
&gt; "solarized" in them. You are supposed to create new themes by changing
&gt; their values in the "config" node, after which the theme is not "solarized"
&gt; any more.
&gt; 
&gt; how about "@leotheme-c-0" (for color 0) etc.

The variable replacement runs up to ten levels deep, after which it
bails assuming you've created a loop :-)

So there's nothing wrong with 

  @solarized-yellow = #abcdef

the issue is that `@solarized-yellow` is used in the guts of the
stylesheet definition.  Instead, ideally, but I didn't get to it, in
the config node you'd have

  @solarized-yellow = #abcdef
  ...
  @highlight-hot = @solarized-yellow

and then use `@highlight-hot` in the guts of the
stylesheet definition.

Note - you can't create new themes simply by editing the config
node, it's not possible to create enough constants for every style
element that can be addressed by a stylesheet.

But it would be nice to move all the color and numeric constants out of
the stylesheet and into the config node as I've described above, just a
find and replace operation.

</t>
<t tx="ekr.20130526065545.17457">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Mar 28, 2013 at 7:51 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:


&gt; Maybe the theme shouldn't be called 'solarized', although the color
&gt; definitions in the config node may as well retain their names.


I agree.  Otoh, I am willing to look into creating a true solarized
configuration.  It should look great, and it would allow Leo to appear on
the solarized web page.
</t>
<t tx="ekr.20130526065545.17458">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 27 Mar 2013 20:06:57 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt;  - see the README - if you're already running a dark theme there's a
&gt;    `base` node which can be switched to `@ignore base` to take more
&gt;    advantage of your desktop theme.

p.s. along these lines someone wanted a dark body only, you can get
that by just adding @ignore to all the color related nodes other than
body, or moving all of them under an @ignore node.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17459">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed the solarized dark theme to trunk.  There were some
changes to core code, but nothing too major, and I've been using it for
some time.

In leoSettings.leo there's a new top-level node called 'Themes', which
contains a single theme node at the moment, you can copy that to you
myLeoSettings.leo file under @settings.  Read the README node of the
theme node for more instructions.

The theme is far from perfect - it's relatively easy to get it looking
ok if you're already running a dark desktop theme, which is what I'm
doing, but much harder if you want Leo dark in a light desktop theme,
as you need to theme everything.

 - see the README - if you're already running a dark theme there's a
   `base` node which can be switched to `@ignore base` to take more
   advantage of your desktop theme.

 - note that the new theme system includes a stylesheet authoring 
   tool with macro substitutions :-) you no longer edit
   @data qt-gui-plugin-style-sheet directly but edit a more comfortable
   Leo tree version and then run-script on the appropriate node to
   "compile" to @data qt-gui-plugin-style-sheet

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17460">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;


Hi Terry,

Many thanks for your work on the dark theme.
I noticed that the behaviour of the theme is affected by it's up/down 
position in the @settings tree:
If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
dark all over as intended.
It may be helpful to document the behaviour.

A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
custom and default leosettings.
Is that toggle intended? I would have expected that leo should behave 
according to the users preferred settings in their myLeoSettings.leo file.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17461">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, if you prefer the bigger contrast that e.g. Sublime Text 2 has, try
this "config":

https://gist.github.com/vivainio/5261207
</t>
<t tx="ekr.20130526065545.17462">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 14 Apr 2013 01:35:31 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; I noticed that the behaviour of the theme is affected by it's up/down 
&gt; position in the @settings tree:
&gt; If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
&gt; dark all over as intended.

Thanks - the docs. in the theme node do mention moving other @data
qt-gui-plugin-style-sheet and @color nodes out of the way, but I've
added a couple of notes about putting it at the bottom of the @setting
list to ensure it overrides other settings.  The problem is when the 
default theme's @data qt-gui-plugin-style-sheet node comes after
the dark theme's.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17463">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 05:33:45 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; 
&gt; &gt; It appears that the border around the body pane has disappeared.
&gt; 
&gt; Haha.  There is an interesting tie-in here.
&gt; 
&gt; At present, highlighted text doesn't have the correct colors.  To truly be
&gt; called a solarized scheme, the foreground color of all text must *not*
&gt; change when text is highlighted.  This is the insight and unifying

Maybe the theme shouldn't be called 'solarized', although the color
definitions in the config node may as well retain their names.  I
wasn't really paying attention to the rules for the solarized system,
just using it's palette.  It could be renamed 'leo_dark_zero' or
something.

It did also reveal a code execution pathway anomaly.  When headline
editing is initiated by keyboard (Insert, Ctrl-H) the font-styling on
the edit widget is different than when it's initiated by double
clicking.

Cheers -Terry

&gt; principle of the solarized scheme.  Presumably, this is possible with
&gt; Terry's code.
&gt; 
&gt; The tie in is this:  the border colors *should* also be two of the
&gt; solarized foreground colors: this would make them maximally contrasting
&gt; with either the usual dark background or the light background used when
&gt; text is selected.
&gt; 
&gt; Using a true solarized scheme means:
&gt; 
&gt; a) using the designated solarized background colors: dark by default and
&gt; light for selected text and
&gt; 
&gt; b) using the designated foreground colors for syntax-colored text.
&gt; 
&gt; Imo, this would significantly improve the appearance, and it would honor
&gt; Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
&gt; screen shot of Leo's main window on his web site.
&gt; 
&gt; I won't be able to get around to this today, but I'd like to do it asap.
&gt; Feel free to beat me to the punch ;-)
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130526065545.17464">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; It appears that the border around the body pane has disappeared.

Haha.  There is an interesting tie-in here.

At present, highlighted text doesn't have the correct colors.  To truly be
called a solarized scheme, the foreground color of all text must *not*
change when text is highlighted.  This is the insight and unifying
principle of the solarized scheme.  Presumably, this is possible with
Terry's code.

The tie in is this:  the border colors *should* also be two of the
solarized foreground colors: this would make them maximally contrasting
with either the usual dark background or the light background used when
text is selected.

Using a true solarized scheme means:

a) using the designated solarized background colors: dark by default and
light for selected text and

b) using the designated foreground colors for syntax-colored text.

Imo, this would significantly improve the appearance, and it would honor
Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
screen shot of Leo's main window on his web site.

I won't be able to get around to this today, but I'd like to do it asap.
Feel free to beat me to the punch ;-)
</t>
<t tx="ekr.20130526065545.17465">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;




On Wednesday, March 27, 2013 8:06:57 PM UTC-5, Terry wrote:
&gt;
&gt;
&gt; The theme is far from perfect - it's relatively easy to get it looking 
&gt; ok if you're already running a dark desktop theme, which is what I'm 
&gt; doing, but much harder if you want Leo dark in a light desktop theme, 
&gt; as you need to theme everything. 
&gt;

There is one glitch that I see.  It appears that the border around the body 
pane has disappeared.  I think the border is always important, and the 
proper border color will likely change in the solarized version.  But 
perhaps this is an artifact of my settings--I really haven't investigated 
properly yet. 

&gt;
&gt;  - note that the new theme system includes a stylesheet authoring 
&gt;    tool with macro substitutions :-) you no longer edit 
&gt;    @data qt-gui-plugin-style-sheet directly but edit a more comfortable 
&gt;    Leo tree version and then run-script on the appropriate node to 
&gt;    "compile" to @data qt-gui-plugin-style-sheet 
&gt;

Very cool.  Many thanks for all this work.

Edward

</t>
<t tx="ekr.20130526065545.17487">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Just pushed leo/external/leoftsindex.py:

Stand alone GUI free index builder for Leo's full text search system::

  python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...

If &lt;file&gt; does not contain '#' it's assumed to be a .leo file
to index, and is indexed.

If &lt;file&gt; does contain '#' it's assumed to be a .leo file
containing a list of .leo files to index, with the list in
the node indicated by the UNL after the #, e.g.::

   path/to/myfile.leo#Lists--&gt;List of outlines

In the latter case, if the node identified by the UNL has children,
the list of files to scan is built from the first line of the body
of each child node of the identified node (works well with bookmarks.py).
If the node identified by the UNL does not have children, the
node's body is assumed to be a simple text listing of paths to .leo files).

.. note::
    
    It may be necessary to quote the "file" on the command line,
    as the '#' may be interpreted as a comment delimiter::
        
        python leoftsindex.py "workbook.leo#Links"

</t>
<t tx="ekr.20130526065545.17488">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Mon, Apr 16, 2012 at 5:13 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; Just pushed leo/external/leoftsindex.py:
&gt;
&gt; Stand alone GUI free index builder for Leo's full text search system::
&gt;
&gt;   python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...
&gt;

Should this be in the blog?  I've filed this under Leo/To Document.

Edward
</t>
<t tx="ekr.20130526065545.17489">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Now I have basic functionality pushed to trunk.

If you want to "spawn" (posibbly several) system commands to background,
use g.procs.add(), like this ctrl+b script:

def L(*args):
    g.es("callback", args)

g.procs.add(['sleep', '4'], "que1")
g.procs.add(['sleep', '3'], "que1", L)
g.procs.add(['sleep', '2'], "que1")
g.procs.add(['sleep', '2'], "que2")

Note how que2 completes first. Idea is that commands in same queue depend
on each other, and thus need to run in sequential order.

This should make waiting for long lasting operations easier as the whole
Leo won't freeze until they are over (but you can still use the stdout /
stderr output from these calls, thanks to the optional callback)

API may change once I start using it (soon).



On Wed, Apr 17, 2013 at 2:48 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt;
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.
&gt;
&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt;

</t>
<t tx="ekr.20130526065545.17490">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 14:48:59 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt; 
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.

There's the leoscreen stuff for integration with the GNU `screen`
terminal switcher / manager.  Push lines from the body to the terminal,
pull lines back the other way.  But more for interactive interaction
with terminal programs than batch oriented work.  Leo doesn't block.

Cheers -Terry

&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt; 

</t>
<t tx="ekr.20130526065545.17494">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:


&gt; Is anyone depending on
&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;

Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

Edward

</t>
<t tx="ekr.20130526065545.17495">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed two new commands, zoom-in and zoom-out, which increase
or decrease the body text font size by one point size.  They probably
deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'

They leverage the new theme "engine" by manipulating a constant
"@font-size-body".  I've set it up in the default theme, anyone using
the new dark theme will need to add

   @font-size-body = 18px

in the config node for that theme, 

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config

and replace the literal "18px" with "@font-size-body" in the node

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17496">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
web browsers?  Unless those already have default keybindings that I'm 
unaware of.

Also, does this work with the default theme?

--&gt;Jake

On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;     @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17497">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

+1. We should do a massive cleanup of keybindings to free up binding space.

On Fri, Apr 12, 2013 at 12:52 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:

&gt; Would you consider moving some bindings from config/leoSettings.leo to
&gt; your myLeoSettings.leo?
&gt;
&gt; It would free up some bindings for folks, and it's one way to survey how
&gt; many others are using them :-]
</t>
<t tx="ekr.20130526065545.17498">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

Would you consider moving some bindings from config/leoSettings.leo to
your myLeoSettings.leo?

It would free up some bindings for folks, and it's one way to survey how many
others are using them :-]

On Thu, Apr 11, 2013 at 1:14 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:
&gt;
&gt;&gt;
&gt;&gt; Is anyone depending on
&gt;&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;
&gt;
&gt; Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
&gt; don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

</t>
<t tx="ekr.20130526065545.17499">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



My vote is for Ctrl-plus/minus, and to Ctrl-scroll-wheel, because these are
consistent across a great many other programs.

It's unfortunate Ctrl-- is already used for for "replace and continue
search", but like others I didn't know about it so haven't become
habituated to it. Who experience pain if this was changed?

-matt

</t>
<t tx="ekr.20130526065545.17500">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

On Thu, Apr 11, 2013 at 7:28 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:
&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and web
&gt; browsers?  Unless those already have default keybindings

I can't find the thread, but I thought we once discussed reducing the number
of bindings defined by default.

running &lt;alt-x&gt; print-bindings makes it clear why it's a challenge to identify
unused bindings.

Maybe each binding has users, but I would expect that most don't.

Is anyone depending on
alt-ctrl-a = toggle-find-wrap-around-option ?

The fewer bindings out of the box, the easier it is for folks extending Leo.

I think a painless way to simplify Leo would be to have a more concise
set of default bindings.

Thanks,
Kent

</t>
<t tx="ekr.20130526065545.17501">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Can we bind them to ctrl+scroll wheel?


On Thu, Apr 11, 2013 at 7:46 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;    @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp;
&gt; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

</t>
<t tx="ekr.20130526065545.17502">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 4/11/2013 8:33 AM, Terry Brown wrote:
&gt; Ctrl-- is replace...
Well then.  Shows how much I use that feature... :p
&gt; Yes, out of the box only with the default theme, you need to make the
&gt; minor edits I described below to get it working in the dark theme.
&gt;
&gt; Cheers -Terry
&gt;
Good to know.  I've been looking for a feature like this for a while.  
Thanks!
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17503">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 08:28:59 -0400
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
&gt; web browsers?  Unless those already have default keybindings that I'm 
&gt; unaware of.

Ctrl-- is replace...

&gt; Also, does this work with the default theme?

Yes, out of the box only with the default theme, you need to make the
minor edits I described below to get it working in the dark theme.

Cheers -Terry

&gt; --&gt;Jake
&gt; 
&gt; On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; &gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; &gt; or decrease the body text font size by one point size.  They probably
&gt; &gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt; &gt;
&gt; &gt; They leverage the new theme "engine" by manipulating a constant
&gt; &gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; &gt; the new dark theme will need to add
&gt; &gt;
&gt; &gt;     @font-size-body = 18px
&gt; &gt;
&gt; &gt; in the config node for that theme,
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt; &gt;
&gt; &gt; and replace the literal "18px" with "@font-size-body" in the node
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt; &gt;
&gt; &gt; Cheers -Terry
&gt; &gt;
&gt; 

</t>
<t tx="ekr.20130526065545.17504">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, Apr 12, 2013 at 1:47 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; +1. We should do a massive cleanup of keybindings to free up binding space.
&gt;

This can always be done in myLeoSettings.leo, but I share your concern.

I have the lurking feeling that it would be possible to do some lightweight
modes that define temporary bindings.  This is theoretically possible now
with @mode, but I doubt anyone uses it.  I sure don't.

This could be an important addition to Leo, but for now I've filed it under
Leo/Later :-)

Edward
</t>
<t tx="ekr.20130526065545.17505">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

really, this time.

commit log:

  zoom-in / zoom-out commands
  
  ctrl-mouse wheel scrolling for same
  
  replace old focused pane border highlight with pure stylesheet
  version
  
  rename solarized_dark theme leo_dark_0

Edward, and anyone else using

  @bool use_focus_border = True

this no longer does anything...

now you need to edit

  @data qt-gui-plugin-style-sheet

and change

  @focused-border-style = none

to

  @focused-border-style = solid

for the default theme, if you're using the dark theme, now known as
leo_dark_0, same deal but after editing as above remember to select
and run the 'stylesheet &amp; source' node of that theme.

Cheers -Terry

  

</t>
<t tx="ekr.20130526065545.17506">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;

Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2F103097156557482112329%2Fposts%2F1GjKYTUSTMA&amp;dt=1366183753416&amp;ub=63

You're receiving this email because you are subscribed to Leo Editor on  
Google+.

Leo Editor
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2Fcommunities%2F104562683923003520885&amp;dt=1366183753416&amp;ub=63
</t>
<t tx="ekr.20130526065545.17514">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;



Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CNiN2Nzuz7YCFWR8TAodWDAAAA&amp;path=%2F103097156557482112329%2Fposts%2F6D9GPRCdXVh&amp;dt=1366138560104&amp;ub=63
</t>
<t tx="ekr.20130526065545.17515">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Link to G+: https://plus.google.com/103097156557482112329/posts/6D9GPRCdXVh

</t>
<t tx="ekr.20130526065545.17545">@nocolor

From: resi147 &lt;scalet@yebu.de&gt;

I tried this one and it seems to be very useful. What I would also like to 
have is a similar (or the same) script,
that does the same on two different nodes of a leo file. I admit, the 
changes should be minimal to be done by
myself, but as I'm not familiar with the internal leo api, I wanted to ask 
for how to best do this changes.

Probably somewhere here
"""
...
vf = from_c.hiddenRootNode 
vt = to_c.hiddenRootNode
...
"""
just to feed in the 2 nodes, Any quick idea how this can be done the best 
way?

Cheers,
Karl.

</t>
<t tx="ekr.20130526065545.17546">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

The script below is a tool for diffing two Leo files. The attached
screenshot illustrates the output for two different revisions of
LeoPyRef.leo.

``- nodename``
    indicates a node which disappeared
``+ nodename``
    a node which is new,
``!v nodename`` followed by ``!^ nodename``
    a node with an unchanged heading but changed content, the first
    linking to the old version, the second linking to the new version

If you have the bookmarks.py plugin active, you can double click nodes
to jump to the original(s).



from leo.core.leoNodes import vnode
if not hasattr(vnode, 'insertAsLastChild'):
    # add insertAsLastChild method to vnodes
    def ialc(self):
        vnode(self.context)._linkAsNthChild(self, len(self.children))
        return self.children[-1]
    vnode.insertAsLastChild = ialc

from_filename = g.app.gui.runOpenFileDialog('From (old) file', [('Leo', '*.leo')])
to_filename = g.app.gui.runOpenFileDialog('To (new) file', [('Leo', '*.leo')])

# from_filename = "/mnt/shuttle/bkup/usr1/2012-07-13/home/tbrown/.leo/.todo.leo"
# to_filename = "/mnt/shuttle/bkup/usr1/2012-07-15/home/tbrown/.leo/.todo.leo"

from_c = g.openWithFileName(from_filename, c)
to_c = g.openWithFileName(to_filename, c)

vf = from_c.hiddenRootNode
vt = to_c.hiddenRootNode

assert from_c != c
assert to_c != c
assert from_c != to_c

nd = c.rootPosition().insertAfter()
nd.copy().back().moveAfter(nd)
nd.h = 'diff @bookmarks'

def text_match(a, b):
    return (a.h == b.h, 
            a.h == b.h and a.b == b.b)
def gnx_match(a, b):
    return (a.h == b.h and a.gnx == b.gnx, 
            a.h == b.h and a.b == b.b and a.gnx == b.gnx)

def diff_trees(vf, vt, path):

    fonly = []  # nodes only in from tree
    tonly = []  # nodes only in to tree
    diffs = []  # nodes which occur in both but have different descendants

    # count number of times each headline occurs as a child of
    # each node being compared
    count_f = {}
    for cf in vf.children:
        count_f[cf.h] = count_f.get(cf.h, 0) + 1
    count_t = {}
    for ct in vt.children:
        count_t[ct.h] = count_t.get(ct.h, 0) + 1

    for cf in vf.children:
        
        for ct in vt.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            
            if body_eq:
                diffs.append(diff_trees(cf, ct, path+[vf.h]))
                
                break
            elif head_eq:
                d = diff_trees(cf, ct, path+[vf.h])
                if d:
                    d.h = '!v '+d.h
                else:
                    d = vnode(nd.v.context)
                    d.h = '!v '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    from_filename, 
                    '--&gt;'.join((path+[vf.h]+[cf.h])[1:]),
                    cf.b
                )
                diffs.append(d)
                d = vnode(nd.v.context)
                d.h = '!^ '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    to_filename, 
                    '--&gt;'.join((path+[vt.h]+[ct.h])[1:]),
                    ct.b
                )
                diffs.append(d)
                break
        else:
            fonly.append(cf)
            
    for ct in vt.children:
        
        for cf in vf.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            if head_eq or body_eq:
                # no need to recurse matches again
                break

        else:
            tonly.append(ct)

    if not any(diffs) and not fonly and not tonly:
        return None
        
    vd = vnode(nd.v.context)
    vd.h = vf.h
    for d in diffs:
        if d:
            vd.children.append(d)
    for f in fonly:
        n = vd.insertAsLastChild()
        n.h = '- '+f.h
        n.b = "file://%s/#%s" % (from_filename, '--&gt;'.join((path+[vf.h]+[f.h])[1:]))
    for t in tonly:
        n = vd.insertAsLastChild()
        n.h = '+ '+t.h
        n.b = "file://%s/#%s" % (to_filename, '--&gt;'.join((path+[vf.h]+[t.h])[1:]))
        
    return vd

v = diff_trees(vf, vt, [])
if v:
    nd.v.children.extend(v.children)  # snip off &lt;hidden root node&gt;

c.bringToFront()
c.redraw()

</t>
<t tx="ekr.20130526065545.17576">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

One of the ways I use Leo is as an information management/database for when
I'm running tabletop RPGs. Such games involve a fair amount of similarly
structure data. I set out to make a way of defining a template, and
providing macro expansions within the template, so that the user could
click a script button, be prompted for data, and be rewarded with a
fully-populated copy of the template. I've managed to accomplish this with
the code below:

https://gist.github.com/gatesphere/2be5030506a364ee6ec1

How it works is like this:

- Create a `@template` node.  This is the parent node for your template.

- Create a `@destination` node as a child of the @template node. This 
node's headline is the name of a top level node where your completed 
template will be placed.  `@destination Sessions` will place the 
finished product under the top-level "Sessions" node.

- Populate the @template node with various `@item` nodes - these keep 
their structure in the filled template.  Anything that needs to be a 
part of the final product has to be an @item node.

All of that is fine and dandy if you just want to copy and paste... but 
that's already baked into Leo.  So I added macro expansion.  The script 
gathers up all instances of anything that fits the regex "&lt;\\$\\w+&gt;" is a 
macro variable name.  Something like `&lt;$name&gt;` or `&lt;$date&gt;`.  The script 
gathers up all of these variable names, and prompts the user (ala 
todo.py's "Redistribute Priorities" function) for values for each of 
them. They are global with respect to the template, so using the same 
macro variable in multiple places in the same template will result in 
all of them being filled in with the same value.

In addition, there is one more type of node that can go under @template 
nodes - @default.  @default nodes provide a default value for a macro 
variable.  The node with a headline of `@default &lt;$name&gt;` and a body of 
"This is my body" gives the `&lt;$name&gt;` macro a value of "This is my body" 
everywhere within the template, and that macro will not be prompted for 
a value.  This is handy if you're copying templates between Leo 
worksheets, and want them flexible, but don't want them to fill in the 
same value for every single invocation of copy-template.

Here's an example template:

@template &lt;$campaign&gt; Session #&lt;$num&gt; ($date)
       @destination Sessions
       @default &lt;$campaign&gt;
       @item Who's Coming?
       @item In-World Start Date
       @item Log
       @item Threads
             @item High Priority
             @item Low Priority
       @item News
             @item Out of Character
             @item In Character

The body of `@default &lt;$campaign&gt;` is "World of Ka'rim".  The body of 
`@item Who's Coming?` is "John, Jane, Jack, Jenny, Jeremy".

Running copy-template on this template, and filling the values prompted 
for (&lt;$num&gt; and &lt;$date&gt;) gives the following under the top-level node 
Sessions:

World of Ka'rim Session #1 (01 May 2013)
       Who's Coming?
       In-World Start Date
       Log
       Threads
             High Priority
             Low Priority
       News
             Out of Character
             In Character

The headlines bodies are correctly filled in with macro expansions, and 
other text is verbatim copied from the respective headlines and bodies.

So... two questions:

1.) Did I re-implement something Leo already does?
2.) Anyone have any suggestions on reducing the amount of code/any fixes?

Also, hope someone else finds this useful.  Once it's cleaned up, I 
might do a leo-editor blog post about it.

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17589">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Trunk now has alt-x go-anywhere command handy

It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
does live search on headline (you have to press enter to force search of
bodies as well)

Once the hits are shows, you can navigate them by pressing up/down while
focus is still in line editor &amp; you can keep on typing (sort of like
sublime text)

Screenshot is attached, yes, positioning etc still looks like crap :)

</t>
<t tx="ekr.20130526065545.17590">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



BTW, this has a very clever hack (even if I say so myself) - spaces in
search string are replaced with * wild card.

So if you search for, say "file txt", it will search for "file*txt",
matching e.g. @file readme.txt


On Tue, Nov 20, 2012 at 11:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; Trunk now has alt-x go-anywhere command handy
&gt;
&gt; It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
&gt; does live search on headline (you have to press enter to force search of
&gt; bodies as well)
&gt;
&gt; Once the hits are shows, you can navigate them by pressing up/down while
&gt; focus is still in line editor &amp; you can keep on typing (sort of like
&gt; sublime text)
&gt;
&gt; Screenshot is attached, yes, positioning etc still looks like crap :)
&gt;

</t>
<t tx="ekr.20130526065545.17592">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Nov 20, 2012 at 3:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Trunk now has alt-x go-anywhere command handy


Ah.  This answers the question I just asked.  I'll put this on the list of
things to document.

Edward

</t>
<t tx="ekr.20130526065545.17594">This is a significant improvement, and makes Leo suitable for authoring
text. It should have been done ages ago. Please let me know immediately if
this new behavior causes problems for you.

There is one glitch.  If you add @wrap, the directive won't be in effect 
until you leave the node and revisit it.

From: redla &lt;radim.halir@gmail.com&gt;

There is one problem which is caused by this change: I have @wrap active
and see my "plain" text wrapped properly. But if there is any "long enough"
URL on the page (i.e. longer than the screen width), this is not wrapped
(as there is no space in the string) nor I can see the end of it (as there
is no horizontal scrollbar either)

</t>
<t tx="ekr.20130526065545.17620">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've added a new plugin to Leo, that adds printing support when using 
the Qt GUI.  Available from rev 5779.

Here's the docscring:

'''Supports printing from the Qt GUI.

Jacob M. Peck, 2013

Commands
=======
This plugin supports the following twelve commands:

print-selected-node
-------------------

Opens up the print dialog to print the selected headline and node.

print-preview-selected-node
---------------------------

Opens up the print preview dialog to preview the selected headline
and node.

print-selected-node-body
------------------------

Opens up the print dialog to print the selected node body.

print-preview-selected-node-body
--------------------------------

Opens up the print preview dialog to preview the selected node body.

print-expanded-node
-------------------

Opens up the print dialog to print the expanded contents of the
selected node, with top-level headline.

print-preview-expanded-node
---------------------------

Opens up the print preview dialog to preview the expanded contents
of theselected node, with top-level headline.

print-expanded-node-body
------------------------

Opens up the print dialog to print the expanded node body.

print-preview-expanded-node-body
--------------------------------

Opens up the print preview dialog to preview the expanded node
body.

print-marked-nodes
------------------

Opens up the print dialog to print all marked nodes in the current
outline, with headlines.

print-preview-marked-nodes
--------------------------

Opens up the print preview dialog to preview all marked nodes in \\
the current outline, with headlines.

print-marked-node-bodies
------------------------

Opens up the print dialog to print the bodies of all marked nodes
in the current outline.

print-preview-marked-node-bodies
--------------------------------

Opens up the print preview dialog to preview the bodies of all
marked nodes in the current outline.

Settings
=======
- ``@string printing-font-family = DejaVu Sans Mono``
   The font family for printing.  A monospaced font is recommended.

- ``@string printing-font-size = 12``
   The font size for printing bodies, in px.  Due to limitations
   of PyQt, the size of headlines cannot be changed.
'''

To use it, be sure to add `printing.py` to your @enabled-plugins.

Future work may have more printing modes available, and I intend on 
doing a blog post on the leoblog about creating custom printing modes in 
scripts.

This addresses bug 1132804: 
https://bugs.launchpad.net/leo-editor/+bug/1132804

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17621">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 5/15/2013 9:04 AM, Kent Tenney wrote:
&gt; It just works! Nice.
&gt; Being able to preview is great, less paper wasted.
&gt;
&gt; I rely entirely on command completion as a memory aid, too
&gt; bad the info listing commands also start with 'print'. I would
&gt; think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
&gt; situation now we have print.
&gt;
&gt; Too late?
&gt;
I agree completely w/r/t 'list-&lt;attribute&gt;', but it most likely is too 
late.  Those are probably in use by some script somewhere.  :(

Thanks for the comments, though!  To be fair, this whole thing was crazy 
simple to throw together - Qt does *all* the heavy lifting. Just throw 
together an HTML string, wrap it in a QTextDocument, and call print_, 
and Bob's your uncle.  I can see why Leo uses PyQt now... it's awesome.
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17622">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;


Thank you for this plugin, very useful!

On Wednesday, May 15, 2013 2:41:19 PM UTC+2, Jacob Peck wrote:
&gt;
&gt; Hello all, 
&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using 
&gt; the Qt GUI.  Available from rev 5779. 
&gt;
&gt; Here's the docscring: 
&gt;
&gt; '''Supports printing from the Qt GUI. 
&gt;
&gt; Jacob M. Peck, 2013 
&gt;
&gt; Commands 
&gt; ======== 
&gt;
&gt; This plugin supports the following twelve commands: 
&gt;
&gt; print-selected-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the selected headline and node. 
&gt;
&gt; print-preview-selected-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected headline 
&gt; and node. 
&gt;
&gt; print-selected-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the selected node body. 
&gt;
&gt; print-preview-selected-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected node body. 
&gt;
&gt; print-expanded-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the expanded contents of the 
&gt; selected node, with top-level headline. 
&gt;
&gt; print-preview-expanded-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded contents 
&gt; of theselected node, with top-level headline. 
&gt;
&gt; print-expanded-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the expanded node body. 
&gt;
&gt; print-preview-expanded-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded node 
&gt; body. 
&gt;
&gt; print-marked-nodes 
&gt; ------------------ 
&gt;
&gt; Opens up the print dialog to print all marked nodes in the current 
&gt; outline, with headlines. 
&gt;
&gt; print-preview-marked-nodes 
&gt; -------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview all marked nodes in \\ 
&gt; the current outline, with headlines. 
&gt;
&gt; print-marked-node-bodies 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the bodies of all marked nodes 
&gt; in the current outline. 
&gt;
&gt; print-preview-marked-node-bodies 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the bodies of all 
&gt; marked nodes in the current outline. 
&gt;
&gt; Settings 
&gt; ======== 
&gt;
&gt; - ``@string printing-font-family = DejaVu Sans Mono`` 
&gt;    The font family for printing.  A monospaced font is recommended. 
&gt;
&gt; - ``@string printing-font-size = 12`` 
&gt;    The font size for printing bodies, in px.  Due to limitations 
&gt;    of PyQt, the size of headlines cannot be changed. 
&gt; ''' 
&gt;
&gt; To use it, be sure to add `printing.py` to your @enabled-plugins. 
&gt;
&gt; Future work may have more printing modes available, and I intend on 
&gt; doing a blog post on the leoblog about creating custom printing modes in 
&gt; scripts. 
&gt;
&gt; This addresses bug 1132804: 
&gt; https://bugs.launchpad.net/leo-editor/+bug/1132804 
&gt;
&gt; --&gt;Jake 
&gt;

</t>
<t tx="ekr.20130526065545.17623">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using the
&gt; Qt GUI.  Available from rev 5779.
&gt;

Excellent work.  Many thanks for this contribution.
</t>
<t tx="ekr.20130526065545.17624">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

It just works! Nice.
Being able to preview is great, less paper wasted.

I rely entirely on command completion as a memory aid, too
bad the info listing commands also start with 'print'. I would
think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
situation now we have print.

Too late?

</t>
<t tx="ekr.20130526065545.17633">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I've added [an abbreviation] "persist;;"


[snip]

How do you use the code inserted by the abbreviation?  I suspect I'm not
the only one who doesn't understand what you are trying to do...
</t>
<t tx="ekr.20130526065545.17634">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've added an abbreviation to my myLeoSettings.leo abbreviations:
https://gist.github.com/tbnorth/5530059

It's the abbreviation "persist;;" and when you type that you get:

---cut here---
import json

json_state_file = "cache_info_file.json"
if not os.path.exists(json_state_file):
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    except:
        json.dump(cache_info, open(json_state_file, 'w'))
---cut here---

with appropriate interaction to customize all the parts which, in the
above example, include "cache_", i.e. the filename and the variable
name.

The point is it seems silly to create a module and hence a dependency
for what is barely 4 lines of actual code, but those 4 lines give you
very handy robust persistence, so something like an editor abbreviation
is the obvious way to make the available - nothing Leo specific here,
except that only serious editors have abbreviation like that ;-).
</t>
<t tx="ekr.20130526065545.17635">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, May 24, 2013 at 8:29 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Fri, 24 May 2013 16:35:59 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;


&gt; &gt; How do you use the code inserted by the abbreviation?  I suspect I'm not
&gt;
&gt;  It's just a framework for providing a dictionary the contents of which
&gt; persist between runs of the program.  I've used it for code that's
&gt; making lots of small url requests against a server, to cache the
&gt; results so that during development the crash / debug / re-run cycle is
&gt; faster because each piece of data is requested only once, ever, not once
&gt; every run.  More recently I was using it to store key value pairs of
&gt; filenames and a comment on the issue in the file, knowing that
&gt; completing the analysis of the issues in the files would take more than
&gt; one run of the program which was identifying the issues.
&gt;
&gt; So in the example below, the content of the cache_info dictionary is
&gt; persistent, whatever main() does with it is seen next time the
&gt; program's run.  Nothing Leo specific except that it's really just an
&gt; import statement plus 5 lines of code and doesn't seem worth its own
&gt; file, but is more than you want to re-type all the time either, so
&gt; ideal for an abbreviation in your favorite editor.
&gt;

Thanks for the explanation.
</t>
<t tx="ekr.20130526065545.17636">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

This is a multi-part message in MIME format.


On 5/24/2013 5:35 PM, Edward K. Ream wrote:
&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com 
&gt; &lt;mailto:terry_n_brown@yahoo.com&gt;&gt; wrote:
&gt;
&gt;     I've added [an abbreviation] "persist;;"
&gt;
&gt;
&gt; [snip]
&gt;
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm 
&gt; not the only one who doesn't understand what you are trying to do...
&gt;
&gt; Edward
&gt;
Seconded.

</t>
<t tx="ekr.20130526065545.17637">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

p.s. the 'except:' in the code below should have been 'finally:', fixed
on the gist now.

On Thu, 23 May 2013 14:41:31 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; I've added an abbreviation to my myLeoSettings.leo abbreviations:
&gt; https://gist.github.com/tbnorth/5530059
&gt; 
&gt; It's the abbreviation "persist;;" and when you type that you get:
&gt; 
&gt; ---cut here---
&gt; import json
&gt; 
&gt; json_state_file = "cache_info_file.json"
&gt; if not os.path.exists(json_state_file):
&gt;     json.dump({'cache_items':{}}, open(json_state_file, 'w'))
&gt; cache_info = json.load(open(json_state_file))
&gt; 
&gt; def main():
&gt; 
&gt;     # do stuff with cache_info...
&gt; 
&gt; if __name__ == '__main__':
&gt; 
&gt;     try:
&gt;         main()
&gt;     except:
&gt;         json.dump(cache_info, open(json_state_file, 'w'))
&gt; ---cut here---
&gt; 
&gt; with appropriate interaction to customize all the parts which, in the
&gt; above example, include "cache_", i.e. the filename and the variable
&gt; name.
&gt; 
&gt; The point is it seems silly to create a module and hence a dependency
&gt; for what is barely 4 lines of actual code, but those 4 lines give you
&gt; very handy robust persistence, so something like an editor abbreviation
&gt; is the obvious way to make the available - nothing Leo specific here,
&gt; except that only serious editors have abbreviation like that ;-).
&gt; 
&gt; Cheers -Terry
&gt; 

</t>
<t tx="ekr.20130526065545.17638">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 24 May 2013 16:35:59 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:
&gt; 
&gt; &gt; I've added [an abbreviation] "persist;;"
&gt; 
&gt; 
&gt; [snip]
&gt; 
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm not

The corrected version is below for reference - I had `except` instead
of `finally` in the first version, so you data was only saved if
something went wrong :-)

It's just a framework for providing a dictionary the contents of which
persist between runs of the program.  I've used it for code that's
making lots of small url requests against a server, to cache the
results so that during development the crash / debug / re-run cycle is
faster because each piece of data is requested only once, ever, not once
every run.  More recently I was using it to store key value pairs of
filenames and a comment on the issue in the file, knowing that
completing the analysis of the issues in the files would take more than
one run of the program which was identifying the issues.

So in the example below, the content of the cache_info dictionary is
persistent, whatever main() does with it is seen next time the
program's run.  Nothing Leo specific except that it's really just an
import statement plus 5 lines of code and doesn't seem worth its own
file, but is more than you want to re-type all the time either, so
ideal for an abbreviation in your favorite editor.

I've added a couple of comments in the version below.

Cheers -Terry

---cut here---
import json

# name for persistent data store
json_state_file = "cache_info_file.json"   
if not os.path.exists(json_state_file):
    # create persistent data store if it doesn't exist
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
# load persistent data
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    finally:
        # save altered persistent data
        json.dump(cache_info, open(json_state_file, 'w'), indent=4)
---cut here---

&gt; the only one who doesn't understand what you are trying to do...
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130803073926.17114"></t>
<t tx="ekr.20130803073926.17115"></t>
<t tx="ekr.20130803073926.17123"></t>
<t tx="ekr.20130803125244.17094">http://leo-editor.github.io/valuespace-intro.html
</t>
<t tx="ekr.20130803125244.17095">g.cls()
# root = g.findNodeAnywhere(c,'root')
root = c.rootPosition()
assert root
line = 0
for p in root.self_and_subtree():
    line += 1
    print('%s: %4s @ %d p._childIndex: %d p.stack: %s' % (
        line,
        p.cleanHeadString(),
        id(p.v),
        p._childIndex,
        # p.level(),p.key(),
        # p.stack,
        '[%s]' % ', '.join(['(v:%s @ %s, %s)' % (v.h,id(v),i) for v,i in p.stack]),
    ))
</t>
<t tx="ekr.20130806072439.18495">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've added ``vs-eval``, ``vs-last``, and ``vs-last-pretty`` commands to
the ``valuespace.py`` plug-in.  Update docs below.

Ville - if you don't want them in there, let me know and I'll move them
- I put them in there to avoid creating yet another plug-in, they're
sort of a light weight local calculation tool, vs. ``valuespace.py``'s
outline wide calcs.

valuespace.py
=============

vs-eval
-------

Execute the selected text, if any.  Select next line of text.
    
Tries hard to capture the result of from the last expression in the
selected text::
    
    import datetime
    today = datetime.date.today()
    
will captue the value of ``today`` even though the last line is a
statement, not an expression.
    
Stores results in ``c.vs['_last']`` for insertion
into body by ``vs-last`` or ``vs-last-pretty``.

Removes common indentation (``textwrap.dedent()``) before executing,
allowing execution of indented code.

``g``, ``c``, and ``p`` are available to executing code, assignments
are made in the ``c.vs`` namespace and persist for the life of ``c``.
    
vs-last
-------

Insert the last result from ``vs-eval``.  Inserted as a string,
so ``"1\\n2\\n3\\n4"`` will cover four lines and insert no quotes,
for ``repr()`` style insertion use ``vs-last-pretty``.
    
vs-last-pretty
--------------

Insert the last result from ``vs-eval``.  Formatted by
``pprint.pformat()``,  so ``"1\\n2\\n3\\n4"`` will appear as
'``"1\\n2\\n3\\n4"``', see all ``vs-last``.

</t>
<t tx="ekr.20130806072439.18496">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Tried it out.

vs-last didn't work (returned None every time), vs-last-pretty did. I
pushed a fix to bzr.
</t>
<t tx="ekr.20130806072439.18497">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

No, I think they make sense in valuespace plugin since you can use them to
execute stuff in the vs namespace.
</t>
<t tx="ekr.20130806072439.18498">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Feb 2013 21:28:39 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; vs-last didn't work (returned None every time), vs-last-pretty did. I
&gt; pushed a fix to bzr.

Thanks, nice timing, I had just noticed but was dealing with another
email first :-)
</t>
<t tx="ekr.20130806072439.18499">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Here's the updated docs. for the bookmarks.py plugin - it provides a
pane with colored links to nodes, they can now be added and removed
with mouse clicks, making navigation back and forward between related
nodes quick and easy.

bookmarks.py
------------

Open bookmarks in a list, and show bookmarks in a pane.

Adds the ``bookmarks-open-bookmark`` command which opens the bookmark in the
selected node **if** the node has an ancestor which contains ``@bookmarks``
in its heading.  Useful for binding to double-click.

Also ``bookmarks-open-node``, like ``bookmarks-open-bookmark`` but without
the ancestor requirement.

*Note:* bookmarks treats file urls missing the ``file://`` part as urls,
which deviates from Leo's behavior elsewhere.  It also recognizes local UNLs
like ``#ToDo--&gt;Critical`` as urls.

The ``bookmarks-show`` command will add a tab or pane (if free_layout is enabled)
showing the bookmarks **in the current subtree** with unique colors. You can
very quickly jump around between nodes in a file using this. 

Nodes can be added and removed from the display with the following mouse actions:
    
**left-click on node**
    Jump to that node.
**left-click on background**
    Add a bookmark at the position clicked, unless already present,
    in which case the existing link is highlighted.
**control-left-click on node**
    Remove node.
**alt-left-click on node**
    Edit clicked node in bookmark list, to change link text.
**alt-left-click on background**
    Edit bookmark list.
    
The ``quickMove.py`` plugin also provides actions for adding nodes to a bookmark list.

The free_layout Action button context menu will also allow you to add one of
these bookmark panes, and they will be saved and loaded again if the layout is
saved and loaded.
</t>
<t tx="ekr.20130806072439.18508">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've found that having edits on a node in one outline simultaneously
reflected in another node in another outline works surprisingly well.

I do a lot of to-do item project managing with Leo, with lists of todo
items (managed with the todo plugin) in each projects outline.

A script rapidly assembles a global list of todo items using
the .../external/leosax.py parser to scan all the project files without
leo having to fully load them.  The script builds a tree of todo items
which uses the UNLs to make them into bookmarks which can jump to the
corresponding node in the project's outline, opening it if necessary.

Which works fine for general "what should I work on next" use, but is
still clumsy if you want to edit a lot of todo items at once, adjusting
due date or priority etc.  You have to double-click the item in the
global view to jump to its source in its project's outline, edit it
there, switch back to the main outline, etc.

So now the script which generates the global view tags the items with a
marker which, when seen by the todo plugin, causes it to apply todo
item edits in the global view to the corresponding node in the
project's file as well.  This means the first time you edit a todo item
there may be a pause while that project's outline is loaded, but
everything carries on as it should afterwards, and on-going todo item
editing is quick once the outlines are loaded.

I'll push the updated todo.py code which checks for a
v.u['annotate']['src_unl'] marker to know if a todo item is a proxy for
one in another file and propagate the edits, but unless you have a
script which assembles todo items from diverse files and tags them as
proxies it doesn't really do anything.

Really I just wanted to highlight how this approach, edits on a proxy
node causing the opening and editing of a node in another outline,
really can work in a usable way - I'm sure there are all sorts of
possible applications.
</t>
<t tx="ekr.20130806072439.18509">From: Matt Wilkie &lt;maphew@gmail.com&gt;

Kent, I echo your thoughts :)

as I was reading Terry's post I kept thinking I'd like to watch him work
sometime. A few times I've tried setting up a Todo system in Leo for
myself, but I've thus far always abandoned the project as it turned into
more work than a simpe pad and pen kept close at hand. (Albeit with
drawbacks. There's a pad at work, another at home, a 3rd in my jacket
sometimes, and content intermixed between them "on the wrong one").
</t>
<t tx="ekr.20130806072439.18510">From: "F.S." &lt;speech.free@gmail.com&gt;

It appears that the F-35 program could have benefited from your approach:
http://www.nytimes.com/2012/11/29/us/in-federal-budget-cutting-f-35-fighter-jet-is-at-risk.html?ref=us

They are still pasting paper on a wall to manage the project. Imagine if 
the project manager learned to use Leo.
</t>
<t tx="ekr.20130806072439.18511">From: Kent Tenney &lt;ktenney@gmail.com&gt;

That flow would sure make a great webcast!
</t>
<t tx="ekr.20130806072439.18531">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

Hello,

I'm contemplating adding markdown rendering to viewrendered.  I use 
github daily for personal projects, and both my blog and in-progress 
website redesign use markdown for content.  I think having a preview 
pane that can render markdown would be handy.

Would anyone else be interested in this?  I was going to plug the 
Markdown module (http://packages.python.org/Markdown/) into 
viewrendered.  It shouldn't be too difficult, because viewrendered 
already renders rst by converting it to html first, so this would just 
be an additional update method and dictionary binding, I think.

Anyways, if anyone else thinks this would be handy, I would be glad to 
start hacking it together.  Plus, it'd give me a bit of experience with 
bzr and launchpad, neither of which I've ever used before.

Let me know if you're interested, or have any other suggestions.
</t>
<t tx="ekr.20130806072439.18532">From: tfer &lt;tfetherston@aol.com&gt;

On Sunday, February 10, 2013 7:06:23 PM UTC-5, Jacob Peck wrote:
&gt;
&gt; On 2/10/2013 6:58 PM, tfer wrote: 
&gt; &gt; I downloaded it to give a try, but to tell the truth the workflow 
&gt; &gt; eludes me.  I think there used to be some stuff on using rst in the 
&gt; &gt; user manual, but there does not seem to be anything there now, was it 
&gt; &gt; lost when rst went from being a plugin to being part of core? 
&gt; No idea, I'm pretty new to Leo myself. 
&gt;
&gt; To use the markdown feature I added in my branch, I make an '@file 
&gt; myfile.md' node with the contents: 
&gt; @color 
&gt; @language md 
&gt; @tabwidth -2 
&gt; @others 
&gt;
&gt; And then I make child @md nodes, containing the markdown that I desire.   
&gt; The @md is a signifier to the viewrendered plugin to render that node as 
&gt; markdown.  To get a live preview, I run the command "vr", and type 
&gt; away... works fine here. 
&gt;
Ah, the @rst outline directive lets all of its subnodes be rendered as if 
they contain rst markup text, no matter how they are named, (even imported 
files, "@files"), without needing to be labeled @rst again.  Following your 
tips I got this to work, but I noticed the following:

1. With a document containing both md and rst, Leo with only the  rst 
renderer will run render the @md nodes when the node is selected, (actually 
any node with text other than pure directives).

2. When the md capable version is loaded and alt-x vr is run, them @md 
headlined nodes are rendered correctly, (mostly), but the rst renderer is 
still active, and will work on any node with non-directive body text. 
 
</t>
<t tx="ekr.20130806072439.18533">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 2/11/2013 1:28 AM, tfer wrote:
&gt; Ah, the @rst outline directive lets all of its subnodes be rendered as 
&gt; if they contain rst markup text, no matter how they are named, (even 
&gt; imported files, "@files"), without needing to be labeled @rst again. 
&gt;  Following your tips I got this to work, but I noticed the following:
&gt;
&gt; 1. With a document containing both md and rst, Leo with only the  rst 
&gt; renderer will run render the @md nodes when the node is selected, 
&gt; (actually any node with text other than pure directives).
This is because there's a guard to make sure the user has the 'markdown' 
module installed.  If, for example, you had 'markdown' but not 
'docutils' installed, you'd be able to render the @md nodes!

You can change this default of rst rendering by changing `@string 
view-rendered-default-kind = rst` by replacing `rst` with `md`, `html`, 
or I would imagine `plain` would work to not have a default renderer.  
Put this setting in your myLeoSettings.leo file.
&gt; 2. When the md capable version is loaded and alt-x vr is run, them @md 
&gt; headlined nodes are rendered correctly, (mostly), but the rst renderer 
&gt; is still active, and will work on any node with non-directive body text.
Could you possibly provide an example where it doesn't render correctly?

As mentioned above, the default renderer for all nodes is rst.

Also, I'm going to have to tweak this a bit.  There are some settings 
that should be exposed via myLeoSettings.leo that currently arent.  I'll 
be working on this.

I just pushed a new rev (5606) to my branch that has a fancier 
colorizer.  You might wish to check that out.
</t>
<t tx="ekr.20130806072439.18534">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 2/7/2013 11:13 AM, Terry Brown wrote:
&gt; Purely out of curiosity, can github use reStructuredText as well as 
&gt; MD? Cheers -Terry 
As far as I can tell, if you upload a README.rst instead of a README.md, 
it'll work.

(source: https://github.com/github/markup)
</t>
<t tx="ekr.20130806072439.18535">From: tfer &lt;tfetherston@aol.com&gt;

On Monday, February 11, 2013 9:58:17 AM UTC-5, Jacob Peck wrote:
&gt;
&gt; On 2/11/2013 1:28 AM, tfer wrote: 
&gt; &gt; Ah, the @rst outline directive lets all of its subnodes be rendered as 
&gt; &gt; if they contain rst markup text, no matter how they are named, (even 
&gt; &gt; imported files, "@files"), without needing to be labeled @rst again. 
&gt; &gt;  Following your tips I got this to work, but I noticed the following: 
&gt; &gt; 
&gt; &gt; 1. With a document containing both md and rst, Leo with only the  rst 
&gt; &gt; renderer will run render the @md nodes when the node is selected, 
&gt; &gt; (actually any node with text other than pure directives). 
&gt; This is because there's a guard to make sure the user has the 'markdown' 
&gt; module installed.  If, for example, you had 'markdown' but not 
&gt; 'docutils' installed, you'd be able to render the @md nodes! 
&gt;
&gt; You can change this default of rst rendering by changing `@string 
&gt; view-rendered-default-kind = rst` by replacing `rst` with `md`, `html`, 
&gt; or I would imagine `plain` would work to not have a default renderer.   
&gt; Put this setting in your myLeoSettings.leo file. 
&gt;
I'll try that.
 

&gt; &gt; 2. When the md capable version is loaded and alt-x vr is run, them @md 
&gt; &gt; headlined nodes are rendered correctly, (mostly), but the rst renderer 
&gt; &gt; is still active, and will work on any node with non-directive body text. 
&gt; Could you possibly provide an example where it doesn't render correctly? 
&gt;
What I did was to download the text of some markdown cheatsheets that were 
written in markdown.  I look them up and shoot you some links later.

I've also run into some stuff that throws and error, (in the converter 
stuff, not your stuff if I'm recalling correctly).  Once that error is 
thrown, you have to exit leo and restart in order to do any more 
converting/viewing.

&gt;
&gt; As mentioned above, the default renderer for all nodes is rst. 
&gt;
&gt; Also, I'm going to have to tweak this a bit.  There are some settings 
&gt; that should be exposed via myLeoSettings.leo that currently arent.  I'll 
&gt; be working on this. 
&gt;
&gt; I just pushed a new rev (5606) to my branch that has a fancier 
&gt; colorizer.  You might wish to check that out. 
&gt;
I'll grab it.

Not really having worked with any of the renderers before, I'm not sure of 
their full usage so I can't compare it to the built in rst stuff.  Working 
with it so far it looks like once a "view-render-pane" is open any selected 
node that has some non-directive text will be run through the rst2html 
converter and sent to the vr-pane.  If the node has an @md starting its 
headline the md2html converter is run and output is sent to the vr-pane. 
 Any node without such text does not trigger either converter and the 
vr-pane just displays the last successfully conertered node, (probably 
should be blanked or something to indicate that the currently selected node 
is not the one in the vr-pane).

At the moment, all the markdown text I've got is from files slurped off the 
net and they are not strung out  in a subtree and then collected via 
directive/sections into a document, but that is where I want to go with 
this as the advantages of outlining to created your documents are numerous. 
 In that case I'm guessing that there is no current method of seeing the 
document rendered as a whole, just the individual nodes?  I guess some of 
the stuff in the current "pre-view subtree" discussion would be useful.

Not a lot of time to look at this today, I'm off to Detroit this afternoon, 
I'll be able to play with this some more later this week.
</t>
<t tx="ekr.20130806072439.18536">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 07 Feb 2013 10:55:42 -0500
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; I'm contemplating adding markdown rendering to viewrendered.  I use 
&gt; github daily for personal projects

Purely out of curiosity, can github use reStructuredText as well as MD?
</t>
<t tx="ekr.20130806072439.18537">From: gatesphere &lt;gatesphere@gmail.com&gt;

On 2/10/2013 6:58 PM, tfer wrote:
&gt; I downloaded it to give a try, but to tell the truth the workflow 
&gt; eludes me.  I think there used to be some stuff on using rst in the 
&gt; user manual, but there does not seem to be anything there now, was it 
&gt; lost when rst went from being a plugin to being part of core?
No idea, I'm pretty new to Leo myself.

To use the markdown feature I added in my branch, I make an '@file 
myfile.md' node with the contents:
@color
@language md
@tabwidth -2
@others

And then I make child @md nodes, containing the markdown that I desire.  
The @md is a signifier to the viewrendered plugin to render that node as 
markdown.  To get a live preview, I run the command "vr", and type 
away... works fine here.
&gt; I manged to get Markdown installed, (pip failed, but easy_install 
&gt; worked).  Trying to use listed alt-x commands does not seem to be 
&gt; working for me, there is no tab completion for those commands, and if 
&gt; I enter by typing cracking a return on the mini-buffer appears to do 
&gt; nothing, not even clear it or change focus.
Python 2 or 3?  I tested on Python 2.6 and 2.7.

Also, I didn't add any commands, nor modify any.  I just modified the 
viewrendered plugin that ships with the current version of Leo... if 
those commands aren't working, you might want to do some debugging with 
your setup.
&gt; additionally @md is not colorized.
The colorizer I hacked together just highlights comments.  I really 
didn't know what to do as a keyword, operator, etc.  I'll probably hack 
together a better version some day.
&gt; Tom
Thanks for giving it a shot!  I'm sorry it didn't work for you. Perhaps 
someone else has a better idea than me what's going on here?
</t>
<t tx="ekr.20130806072439.18539">From: tfer &lt;tfetherston@aol.com&gt;

I downloaded it to give a try, but to tell the truth the workflow eludes 
me.  I think there used to be some stuff on using rst in the user manual, 
but there does not seem to be anything there now, was it lost when rst went 
from being a plugin to being part of core?

I manged to get Markdown installed, (pip failed, but easy_install worked). 
 Trying to use listed alt-x commands does not seem to be working for me, 
there is no tab completion for those commands, and if I enter by typing 
cracking a return on the mini-buffer appears to do nothing, not even clear 
it or change focus.

additionally @md is not colorized.
</t>
<t tx="ekr.20130806072439.18540">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've coded it up.

While I was at it, I added colorizer and comment support for .md files 
as best as I understood.

If someone wants to examine my code for possible inclusion in trunk2, 
it's on launchpad:

lp:~gatesphere/leo-editor/markdown_support 
&lt;https://code.launchpad.net/%7Egatesphere/leo-editor/markdown_support&gt;
</t>
<t tx="ekr.20130806072439.18541">From: Alia K &lt;alia_khouri@yahoo.com&gt;

Fernando Perez of IPython fame just announced recently that IPython
trunk has the cell magic functionality that was discussed earlier
[http://groups.google.com/group/leo-editor/browse_thread/thread/
7d910a68072dda1/b14e84fc3cfddbf6?lnk=gst&amp;q=ipython#b14e84fc3cfddbf6].
As this could work very nicely with leo as an ipython editor, I will
include his text verbatim here:

&lt;snip&gt;

Hi folks,


I'm excited to report that we now have cell magics in IPython... PR
1732 [1] has just been merged [2], which implements the design
discussed in IPEP 1 [3]. This is probably one of the largest PRs we've
had so far, with over 100 commits, over 100 comments and a diff that's
almost 11000 lines long (a lot of it moving code around, obviously
it's not all new code).  But it brings two very important thigns:

1) a refactor of the magic system to finally remove the old mixin
class we'd had since the very first days of IPython in 2001.  This is
a cleanup I've been wanting to do for over 10 years!  The new setup
makes the magic system have  a very clean api, that is easy to use
both for the implementation of core features and for users to create
their own magics.

2) the new concept of cell magics: these are magics that get not only
the line they're on, but the entire cell body as well.  And while
these are most naturally used in the notebook, as you would expect
we've built them at the core of IPython, so you can use them with all
the clients (terminal, qt console, notebook).  For example, this is a
Cython magic that Brian just prototyped out (we'll have a production
version of it soon included).  Note that this was copied *from a
regular text terminal*, not from the notebook:

In [3]: from IPython.core.magic import register_line_cell_magic

In [4]: @register_line_cell_magic
   ...: def cython(line, cell):
   ...:     """Compile and import a cell as a .pyx file."""
   ...:     import sys
   ...:     from importlib import import_module
   ...:     module = line.strip()
   ...:     fname = module + '.pyx'
   ...:     with open(fname,'w') as f:
   ...:         f.write(cell)
   ...:     if 'pyximport' not in sys.modules:
   ...:         import pyximport
   ...:         pyximport.install(reload_support=True)
   ...:     globals()[module] = import_module(module)
   ...:

In [5]: %%cython bam
   ...: def f(x):
   ...:     return 2.0*x
   ...:

In [6]: bam.f(10)
Out[6]: 20.0

In a similar spirit, Jonathan Taylor recently created one to call R
transparently in the notebook:

https://github.com/jonathan-taylor/Rmagic

This one hasn't been fully updated to the final API, but the core code
is there and now it should be a trivial matter to update it.


I want to thank everyone who pitched in with ideas during the
discussion and review period, and I hope you'll all enjoy this and
come up with great ways to use the system.  For now, you can see how
the system works by playing with %%timeit and %%prun, the only two
builtins that I extended to work also as cell magics.

For more details, see the documentation where we've added also a long
new section with details and examples of how to create your own [4].

Cheers,

f

[1] https://github.com/ipython/ipython/pull/1732
[2] https://github.com/ipython/ipython/commit/61eb2ffeebb91a94fe9befe2c30e7839781ddc52
[2] https://github.com/ipython/ipython/issues/1611
[3] http://ipython.org/ipython-doc/dev/interactive/reference.html#magic-command-system

&lt;/snip&gt;

Exciting days indeed!
</t>
<t tx="ekr.20130806072439.18542">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I assume all *nix shell users use the screen shell multiplexer, 
and hopefully *nix shell users who use Leo know about the leoscreen
plugin which passes text back and forth between Leo and the shell
(provided you're running screen), which is very handy for build scripts
and SQL hacking etc. etc.

Anyway, if you're in that sliver on the Venn diagram :-) there's a new
command leoscreen-jump-to-error which scans the output in the shell for
the offending line in the last python traceback, handy if you're coding
python in Leo and running/debugging in the shell.

leoscreen-jump-to-error
    Jump to the python error reported in the shell window, if the
    file's loaded in the current Leo session. Just looks for a line:

        File "somefile.py", line NNN, in xxx

    and looks for a node starting with "@" and ending with "somefile.py",
    then jumps to line NNN in that file.
</t>
<t tx="ekr.20130806072439.18543">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I'm doing some research now, that requires storing inputs in json, I use
those inputs to calculate some outputs and store them in .json files.

I added a few directives to valuespace.py plugin to bring native json data
support.

@vsi foo.json

reads in file foo.json, and stores the parsed data structure to vs /
ipython variable "foo"

@vso bar.json

serializes content of variable "bar" to json file.

@vsi gets executed during pass 1 of vs-update, @vso gets executed in phase
2.

Body text gets assigned with json content in both cases.

</t>
<t tx="ekr.20130806072439.18545">From: Kent Tenney &lt;ktenney@gmail.com&gt;

my mouth is watering ...

I just hope the install / setup is as idiot-proof as possible,
This happens to me too often:

- I get the occasional hour to do some coding
- I decide to try the latest-greatest Leo feature
- I spend the hour futzing with settings

Next time I get an hour to code, I use Gvim ...

Not meaning to complain, just my story.
</t>
<t tx="ekr.20130806072439.18548">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I haven't advertised it yet. Maybe a blog post about leo + ipython
integration in general could be in order (that I could point to).
</t>
<t tx="ekr.20130806072439.18549">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Some further notes:

- yes, the .json extension is explicitly special cased in the code. The
idea is that e.g. @vso foo.csv would serialize the contents of variable
"foo" as csv, .yml would use yaml etc.

- vsi and vso stand for value space input and value space output,
respectively
</t>
<t tx="ekr.20130806072439.18550">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

For now, the best way to study it is valuespage_example.py in contrib
branch.

I'm being very succesful in using it + new ipython support as "ipython
notebook" workalike.

Ipython notebook is better for quick experiments, but I'm doing long term
(multi-week) research, where Leo + IPython + valuespace is doing a great
job so far.
</t>
<t tx="ekr.20130806072439.18551">From: Kent Tenney &lt;ktenney@gmail.com&gt;

Might this work:

a new top level menu: 'Extensions'

Entries in this menu would refer to scripts which did all
the behind the scene work required to enable a feature,
with a small tutorial to boot.

It might even find myLeoSettings.leo, insert the required nodes
and prompt for restarting the file, IE: mechanize what the user
needs to do.

Or some other scheme to minimize the extraneous cognitive load.*

Thanks,
Kent

* see 2:20 of http://pyvideo.org/video/1744/teaching-with-the-ipython-notebook

3 kinds of cognitive load:
intrinsic
extraneous
germane

</t>
<t tx="ekr.20130806072439.18552">From: HaveF &lt;iamaplayer@gmail.com&gt;

sometimes, I need to refresh files one by one under some parent node...

so I just wonder, should add "refresh from disk" at parent node is a good
idea?
</t>
<t tx="ekr.20130806072439.18553">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Unless I'm mistaken, "refresh from disk" currently refresh all files from
disk, even if it only looks like it only applies to selected file.

Double check to be sure.
</t>
<t tx="ekr.20130806072439.18554">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Dec 2012 11:40:18 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; sometimes, I need to refresh files one by one under some parent node...
&gt; 
&gt; so I just wonder, should add "refresh from disk" at parent node is a good
&gt; idea?

I've just pushed a change so that "refresh from disk" is done for all
selected nodes.  You can either

ctrl-click each @&lt;file&gt; node you want refreshed, then "refresh from
disk" to refresh all of them, or

shift-click the first and last @&lt;file&gt; node you want refreshed, to
select the entries in between, then "refresh from
disk" to refresh all of them.

(i.e. standard UI list multi item selection)

But be aware of this bug:

https://bugs.launchpad.net/leo-editor/+bug/1090950

using refresh from disk immediately after cutting nodes from the
outline has odd effects.
</t>
<t tx="ekr.20130806072439.18555">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Dec 2012 17:15:05 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Unless I'm mistaken, "refresh from disk" currently refresh all files from
&gt; disk, even if it only looks like it only applies to selected file.
&gt; 
&gt; Double check to be sure.

I think it only does the selected node, I'm sure it would have messed
me up before if it did otherwise - I would expect only the selected
node.

contextmenu.py does

    action = menu.addAction("Refresh from disk")

    def refresh_rclick_cb():
        if typ.startswith('@auto'):
            c.readAtAutoNodes()
        elif typ =='@thin' or typ == '@file':
            c.readAtFileNodes()
        elif typ =='@shadow':
            c.readAtShadowNodes()
        else:
            c.readAtFileNodes()

however when you start tracing those c.*() methods they seem to operate
on c.p (c.currentPosition()).
</t>
<t tx="ekr.20130806072439.18557">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The new leoIPython.py module is now fully (?) integrated with Leo.
IPython gets started when (and only when) the --ipython command-line
switch is in effect.

However, the push-to-ipython command does not work, and there are
enough mysteries in the code that I really don't know how to proceed.

Ville, it might be that just a few minutes of work on your part would
get the project moving forward again.  I'll understand if you don't
have the time, but in that case I'll start asking you a lot of
questions ;-)

It will be a good start if we could just get the push-to-ipython
command working with the legacy IPython code.  That's likely to get us
90% of the way to getting things working with the new-style api.

Let me know if I can do anything to assist.
</t>
<t tx="ekr.20130806072439.18558">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Sun, Apr 15, 2012 at 2:26 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Observation one: the new minibuffer completion stuff makes typing in
&gt; the minibuffer very slow. It's as if it's not waiting for "tab" keys
&gt; anymore, but completes on every keystroke.

Odd.  I don't see the problem.  But I can see how there might be a
problem, depending on your autocompletion setup.  It should be easy to
fix.  I'll do so sometime today.

Edward</t>
<t tx="ekr.20130806072439.18559">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Observation two:

push-to-ipython already works ;-).

Try it out:

Start with launchLeo.py --ipython
alt-x start-ipython

... go to some node with python statuements, e.g.

=3D=3D=3D=3D
a=3D1+1
print a+12
=3D=3D=3D=3D

altx-x push-to-ipython

Observe the output in console:

                    &lt;4&gt; 2
----------------------&gt; print(a+12)
14
</t>
<t tx="ekr.20130806072439.18560">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Sat, Apr 14, 2012 at 10:19 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Ok, let's sort the ipython story out by the end of next week, as I'm
&gt; taking some time off work.

Excellent.  Thanks very much.

Edward
"</t>
<t tx="ekr.20130806072439.18561">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Sun, Apr 15, 2012 at 2:34 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; Observation two:
&gt;
&gt; push-to-ipython already works ;-).

Oh!  I didn't realize that the start-ipython command was needed in
addition to the --ipython option.

Could we have the push-to-ipython command switch g_c commander to the
commander of the outline from which the push-to-ipython command was
invoked?  That would be one less command to worry about.

It looks like the only remaining task is to eliminate the ip.IP var
when using the new api.  I assume that the way to do that is as
suggested by the deprecated IPython.core.ipapi.get() method, which is
just::

    def get():
        """Get the global InteractiveShell instance."""
        from IPython.core.interactiveshell import InteractiveShell
        return InteractiveShell.instance()

I'll look into this later today...

Edward</t>
<t tx="ekr.20130806072439.18562">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I'm trying to do this on windows.

Observation one: the new minibuffer completion stuff makes typing in
the minibuffer very slow. It's as if it's not waiting for "tab" keys
anymore, but completes on every keystroke.
</t>
<t tx="ekr.20130806072439.18563">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Mon, May 28, 2012 at 2:33 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I found this problem - every time you press backspace, it updates the
&gt; list of completions. When you have only one or zero characters, it's
&gt; just slow to fetch the list of completions (as there is a lot of
&gt; them). Pressing backspace should just delete the list if the line
&gt; becomes empty, instead of showing all commands.

Thanks for this suggestion.  I'll see what can be done.

Edward
"</t>
<t tx="ekr.20130806072439.18564">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Sun, Apr 15, 2012 at 1:54 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote=
:

&gt; Odd. =A0I don't see the problem. =A0But I can see how there might be a
&gt; problem, depending on your autocompletion setup. =A0It should be easy to
&gt; fix. =A0I'll do so sometime today.

Does rev 5255 help?

EKR
"</t>
<t tx="ekr.20130806072439.18566">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I found this problem - every time you press backspace, it updates the
list of completions. When you have only one or zero characters, it's
just slow to fetch the list of completions (as there is a lot of
them). Pressing backspace should just delete the list if the line
becomes empty, instead of showing all commands.
</t>
<t tx="ekr.20130806072439.18567">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Hey, I went on to start a "leo mylyn" plugin to excercise using the
childrenModified and contentModified signals.

If you want to play with it, pull, enable leomylyn.py, modify stuff
around the tree and do alt-x mylyn-scores.

Of course as it is useless in this state, but becomes useful when it
has a proper gui (maybe in Nav pane), where you would then have a list
of "most interesting" nodes.

In the future, this could be able to remember the scores through the
sessions, degrade the old scores by time, etc. Also, a scoreset would
be associated with a "project" (e.g."own research", "work project
foo"), each of them having their own typical node working set.

Mylyn was a nice boost back in the eclipse days, it could work for Leo
too. My main motivation right now was to demonstare the signals with
something that is much simpler than using them in qmlnotebook.
</t>
<t tx="ekr.20130806072439.18568">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, May 3, 2012 at 3:42 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I went on to start a "leo mylyn" plugin to exercise using the childrenModified and contentModified signals.

This could an extremely important plugin--project management is close
to the heart of how I use clones.

My guess is that the scoring function is a  (semi?) automatic  way of
suggesting which nodes would naturally be part of a project.  This
would (partly?) eliminate the need to create clones by hand.

In this way of thinking, a project is simply a node whose children
represent sub-parts of the project.  Often, those children are clones.
 This suggest commands such as the following:

    project-new:  create a node representing a project and make it the
**present project**.
    project-select: choose a node to be the present project.
    project-add-node: add a clone of the present node to the present project.
    project-add-recent: add (clones of) nodes with "high enough" score
to the present project.
    project-add-found: search for nodes and add clones of the found
nodes to the present project.
    project-add-marked: add clones of marked nodes to the present project.

These are just ideas.

Unlike in Eclipse/mylyn, Leo's node structure is available to all
parts of the project.  For example, scripts could be applied to the
(nodes of) a project in various ways.  In other words, the "project
structure" is not hard-wired, as it is in mylyn, but can be extended
in any way the user (or plugin writer) desires.

Your comments please.

Edward</t>
<t tx="ekr.20130806072439.18804">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've added a new plugin to Leo, that adds printing support when using 
the Qt GUI.  Available from rev 5779.

Here's the docscring:

'''Supports printing from the Qt GUI.

Jacob M. Peck, 2013

Commands
========

This plugin supports the following twelve commands:

print-selected-node
-------------------

Opens up the print dialog to print the selected headline and node.

print-preview-selected-node
---------------------------

Opens up the print preview dialog to preview the selected headline
and node.

print-selected-node-body
------------------------

Opens up the print dialog to print the selected node body.

print-preview-selected-node-body
--------------------------------

Opens up the print preview dialog to preview the selected node body.

print-expanded-node
-------------------

Opens up the print dialog to print the expanded contents of the
selected node, with top-level headline.

print-preview-expanded-node
---------------------------

Opens up the print preview dialog to preview the expanded contents
of theselected node, with top-level headline.

print-expanded-node-body
------------------------

Opens up the print dialog to print the expanded node body.

print-preview-expanded-node-body
--------------------------------

Opens up the print preview dialog to preview the expanded node
body.

print-marked-nodes
------------------

Opens up the print dialog to print all marked nodes in the current
outline, with headlines.

print-preview-marked-nodes
--------------------------

Opens up the print preview dialog to preview all marked nodes in \\
the current outline, with headlines.

print-marked-node-bodies
------------------------

Opens up the print dialog to print the bodies of all marked nodes
in the current outline.

print-preview-marked-node-bodies
--------------------------------

Opens up the print preview dialog to preview the bodies of all
marked nodes in the current outline.

Settings
========

- ``@string printing-font-family = DejaVu Sans Mono``
   The font family for printing.  A monospaced font is recommended.

- ``@string printing-font-size = 12``
   The font size for printing bodies, in px.  Due to limitations
   of PyQt, the size of headlines cannot be changed.
'''

To use it, be sure to add `printing.py` to your @enabled-plugins.

Future work may have more printing modes available, and I intend on 
doing a blog post on the leoblog about creating custom printing modes in 
scripts.

This addresses bug 1132804: 
https://bugs.launchpad.net/leo-editor/+bug/1132804

</t>
<t tx="ekr.20130806072439.18805">From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 5/15/2013 9:04 AM, Kent Tenney wrote:
&gt; It just works! Nice.
&gt; Being able to preview is great, less paper wasted.
&gt;
&gt; I rely entirely on command completion as a memory aid, too
&gt; bad the info listing commands also start with 'print'. I would
&gt; think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
&gt; situation now we have print.
&gt;
&gt; Too late?
&gt;
I agree completely w/r/t 'list-&lt;attribute&gt;', but it most likely is too 
late.  Those are probably in use by some script somewhere.  :(

Thanks for the comments, though!  To be fair, this whole thing was crazy 
simple to throw together - Qt does *all* the heavy lifting. Just throw 
together an HTML string, wrap it in a QTextDocument, and call print_, 
and Bob's your uncle.  I can see why Leo uses PyQt now... it's awesome.
</t>
<t tx="ekr.20130806072439.18808">From: Kent Tenney &lt;ktenney@gmail.com&gt;

It just works! Nice.
Being able to preview is great, less paper wasted.

I rely entirely on command completion as a memory aid, too
bad the info listing commands also start with 'print'. I would
think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
situation now we have print.

Too late?
</t>
<t tx="ekr.20130806072439.18889">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This one is not "exhaustive", but in the interest of time management, I
decided to push it as is. I'll blog about more features later on.

http://leo-editor.github.io/valuespace-intro.html

Hope it already helps alleviate the mystery of what it's all about :)</t>
<t tx="ekr.20130806072439.18891">From: gatesphere &lt;gatesphere@gmail.com&gt;

Looks really interesting, Ville!  Thanks for sharing, looking forward to 
diving in.

I'm thinking of some uses for in a rulebook and a few blog posts I'm 
writing right now.  Being able to have my document be executable seems 
awesome.
</t>
<t tx="ekr.20130806072439.19486">As of rev 5650, Leo contains support for \@testsetup nodes. At present, they
work only when running unit tests locally.

In effect, @testsetup nodes provide common setup code for all following 
@test and @suite nodes.  Such common setup code is the real reason for 
having custom subclasses of unittest.TestCase.  This Leonine 
solution is much than either:

a) @testclass nodes (which I never use) or

b) "injecting" common test code using::

    exec(g.findTestScript(c,\'@common name-of-common-test-code\'))

Leo's test-execution code prepends the body text of an @testsetup node to
all following @test and @suite nodes. Multiple @testsetup nodes may appear
in an outline. The range of an @testsetup node extends over all following
@test and @suite nodes until the next @testsetup node is seen (in outline 
order).
</t>
<t tx="ekr.20130806072439.19631"></t>
<t tx="ekr.20130806072439.19990">@language rest

Leo 4.11 a1                                     August 16, 2013

Leo 4.11 a1 is now available at: http://sourceforge.net/projects/leo/files/Leo/4.10%20final/

Leo is a text editor, data organizer, project manager and much more.
See http://leoeditor.com/intro.html

Leo 4.11 contains over a year's work on Leo.

The highlights of Leo 4.11:
--------------------------

- Important improvements to abbreviations.
- Clones are now valid anywhere in @file nodes.
- Leo now warns if a .leo file is open elsewhere.
- Added support for sessions.
- The pane with focus is highlighted with a colored border.
- Added support for the closure and TypeScript languages.
- Added importers for .ipynb, .otl and vimoutliner files.
- Important new and improved plugins.
- Dozens of new scripts.
- Dozens of improved commands.
- Dozens of bug fixes and code-level improvements.

Links:
------
Leo:      http://leoeditor.com
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/projects/leo/files/
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20130806175854.17068">From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

Rev 5488 contains a prototype for importing IPython notebook (.ipynb) files 
into Leo.  In theory, this would allow two-way interchanges between Leo 
outlines and the outlines in IPython notebooks.

At present, the prototype simply converts a string containing the contents 
of a .ipynb file to a Leo outline.  A few details remain, but it shows that 
such conversion is straightforward.  Otoh, this is just a first step: we 
would like the Leo outline to support most of the features of IPython 
notebooks, including embedded images, etc.

===== From: Alia K &lt;alia_khouri@yahoo.com&gt;

May a suggest a radical thought exercise that only occurred to me after 
seeing what can be achieved in terms of in-browser editing with 
http://codemirror.net/: 

Why not create an ipython notebook "plugin" version of leo which would only 
provide core leo functionality: outlines, literate programming, and clones, 
but would not be burdened by having to support legacy leo plugins. 

You could leverage all the mad goodness and momentum that is happening with 
ipython right now (interactivity, parallelism, networking and 
collaboration, interactive access to javascript libs like d3.js, etc.., 
inline images, and movies, and cell magic, etc..). Since ipython is pretty 
much pervasively used ... it could be a good thing for leo (-:
</t>
<t tx="ekr.20130806211959.17078">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ok, I now created a toy UI demo for how "cell" based leo (like ipython
notebook) could operate.

It's probably the first stab at using QML to solve a problem in Leo.
It doesnt' run from leo yet (it's not a plugin, more protoing needed
before it's worthwhile to make it a plugin.

When you add and delete text, the cells resize naturally.

To try it, launch the launchqmlnb.py script that I pushed to bzr.

bzr pull, and paste this into a node and press ctrl+b:

https://gist.github.com/2517158

Result is as attached. What it currently does is putting every node
wrapper in a list of QObjects, and use that as the model in QML side
(model is just a container that has the list of stuff to show in
Repeater).

So you can edit every node in a leo document in this "notebook".
Future version will probably only allow editing a subtree.

Note how headlines are "toned down" with small, grey font. Intention
is that e.g. with ipython notebook, the headline will just be a
running, uneditable sequence number basically.

BTW, forgot to mention that I put the NodeWrapper stuff under
leo.core. We can move it out eventually, but right now it seemed like
a natural place for this kind of cross-plugin utility.

And on related note: remember that with QML, sky is the limit as far
as the styling goes :). So if you have wild ideas about adding
customizable images, animated checkboxes, or other weird stuff next to
the nodes, fire away.




</t>
<t tx="ekr.20130806211959.17079">From: Kent Tenney &lt;ktenney@gmail.com&gt;

Interesting ...

Am I correct: this is POC, edits in your serialized pane don't reflect
in the Leo file?

This is a hint of something I've long wanted, what I have called
'slurped' vs 'chunked'
Something I miss with Leo is the capability get an overview of a file,
I find myself
needing to 'open file with gvim' to grok at file level.

The pane you are generating offers both at once, I can see the linear
view of the file,
retaining the 'chunk' metadata (node headlines)
</t>
<t tx="ekr.20130806211959.17080">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 27 Apr 2012 00:47:05 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Ok, I now created a toy UI demo for how "cell" based leo (like ipython
&gt; notebook) could operate.
&gt; 
&gt; It's probably the first stab at using QML to solve a problem in Leo.
&gt; It doesnt' run from leo yet (it's not a plugin, more protoing needed
&gt; before it's worthwhile to make it a plugin.
&gt; 
&gt; When you add and delete text, the cells resize naturally.
&gt; 
&gt; To try it, launch the launchqmlnb.py script that I pushed to bzr.

Played with it.  I guess the next step would be demo of python handling
events from the QML UI elements, and of python finding and manipulating
the QML UI elements.

I'm wondering about the advantages of this approach over the "regular"
QWidget approach.  QML is perhaps a more terse and elegant language for
defining a UI, and it has scripting of UI behavior in javascript.  And
perhaps it has a more tablet friendly widget set?

But I wonder what it lets you do that you can't do with the QWidget
stack, given that mixing the two seems to mean that Leo is using two
GUI systems - they may be very tightly integrated, but mind-space wise
it's two complex systems instead of one.

Which isn't a reason not to use QML, just wondering if it has
advantages I'm missing.
</t>
<t tx="ekr.20130806211959.17081">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Some modifications done, attached is screenshot with tree level
nesting as well. I moved the headistring to the left edge, since on
the right edge the tree structure looked weird.

</t>
<t tx="ekr.20130806211959.17082">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This leo script is more polished version of the earlier work (ctrl+b
script). It uses QStandardItemModel to host the entries in the
notebook, so you can add / remove / modify items and the changes
reflect in the notebook in real time.

https://gist.github.com/2540690
</t>
<t tx="ekr.20130806211959.17083">From: Ville Vainio &lt;vivainio@gmail.com&gt;

Qml version was the one I got done quickly, since it has better layout
mechanism. If we come up with qwidget way, let's use that :). I tried
to find one, but didn't

Sent from my Windows Phone
From: Terry Brown
Sent: 4/27/2012 5:55 PM
To: leo-editor@googlegroups.com
Re: QML notebook - phase zero - toy ui ;-)
On Fri, 27 Apr 2012 00:47:05 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Ok, I now created a toy UI demo for how "cell" based leo (like ipython
&gt; notebook) could operate.
&gt;
&gt; It's probably the first stab at using QML to solve a problem in Leo.
&gt; It doesnt' run from leo yet (it's not a plugin, more protoing needed
&gt; before it's worthwhile to make it a plugin.
&gt;
&gt; When you add and delete text, the cells resize naturally.
&gt;
&gt; To try it, launch the launchqmlnb.py script that I pushed to bzr.

Played with it.  I guess the next step would be demo of python handling
events from the QML UI elements, and of python finding and manipulating
the QML UI elements.

I'm wondering about the advantages of this approach over the "regular"
QWidget approach.  QML is perhaps a more terse and elegant language for
defining a UI, and it has scripting of UI behavior in javascript.  And
perhaps it has a more tablet friendly widget set?

But I wonder what it lets you do that you can't do with the QWidget
stack, given that mixing the two seems to mean that Leo is using two
GUI systems - they may be very tightly integrated, but mind-space wise
it's two complex systems instead of one.

Which isn't a reason not to use QML, just wondering if it has
advantages I'm missing.
</t>
<t tx="ekr.20130806211959.17084">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Update: qmlnotebook.leo (ctrl+b script + test outline) is now at
contrib branch. If you want to try it, open the .leo file, ensure you
are running latest Leo from trunk, and press ctrl+b on the first node.
</t>
<t tx="ekr.20130806211959.17085">From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Here's a demo to run Ville's QML thing in a free_layout pane.
Requires rev. 5284 so the .qml file in leo/plugins/qmlnb/ is available.

Paste this into a node, run-script on the node, right click a splitter
handle, Insert, click the Action button, select "Add QML shower".

Note that you can flick the text boxes it shows up and down with the
mouse, in a tablet / phone ui kind of way.

---cut here---
from PyQt4.QtCore import QUrl
from PyQt4.QtDeclarative import QDeclarativeView
class QMLShower:
    def __init__(self, c):
        self.c = c
        c._qml_shower = self
        self.w = None
        c.free_layout.get_top_splitter().register_provider(self)
    def ns_provider_id(self):  # allow for re-registering, mainly for dev.
        return '__qml_shower'
    def ns_provides(self):  # what we can provide
        return [("Add QML shower", '__add_qml_shower')]
    def ns_provide(self, id_):  # provide it
        if id_ == '__add_qml_shower':
            g.unregisterHandler('select2', self.update)
            g.registerHandler('select2', self.update)
            if not self.w:
                self.w = self.make_widget()
            return self.w
    def make_widget(self):
        view = QDeclarativeView()
        path = g.os_path_join(g.computeLeoDir(), 'plugins', 'qmlnb', 'qml', 'leonbmain.qml')
        view.setSource(QUrl(path))
        view.setResizeMode(QDeclarativeView.SizeRootObjectToView)
        # Display the user interface and allow the user to interact with it.
        view.setGeometry(100, 100, 400, 240)
        view.show()
        # rootObject = view.rootObject()
        return view   
    def update(self, tag, kwords):
        pass
    def closed(self, event):
        g.unregisterHandler('select2', self.update)

QMLShower(c)
---cut here---

</t>
<t tx="ekr.20130806211959.17086">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Yes, modifications are not saved yet. Also, modifications in normal body
editors are not copied over to the notebook yet.  This is probably going to
end up like tabula and stickynotes in this regard.

Getting an overview of a file could be an interesting extra usecase, my
main interest is still in using it for interactive programming/computation
(like ipython notebook) .
On Apr 28, 2012 4:22 PM, "Kent Tenney" &lt;ktenney@gmail.com&gt; wrote:
</t>
<t tx="ekr.20130806211959.17087">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Ok, this should serve as a basis for ipython nicely.

However, a problem - it worked once, but now (after restarting leo,
many times) I always get this traceback;

Traceback (most recent call last):
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
489, in cb
    self.place_provided(id_, index)
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
502, in place_provided
    provided =3D self.get_provided(id_)
  File "/home/ville/b/leo-editor/leo/plugins/nested_splitter.py", line
960, in get_provided
    provided =3D provider.ns_provide(id_)
  File "/home/ville/.leo/scriptFile.py", line 18, in ns_provide
    g.unregisterHandler('select2', self.update)
  File "/home/ville/b/leo-editor/leo/core/leoGlobals.py", line 2529,
in unregisterHandler
    return pc.unregisterHandler(tags,fn)
  File "/home/ville/b/leo-editor/leo/core/leoPlugins.py", line 730, in
unregisterHandler
    self.unregisterOneHandler(tags,fn)
  File "/home/ville/b/leo-editor/leo/core/leoPlugins.py", line 735, in
unregisterOneHandler
    bunches =3D [bunch for bunch in bunches if bunch.fn !=3D fn]
TypeError: 'NoneType' object is not iterable

</t>
<t tx="ekr.20130806211959.17093">From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I created a proof of concept for dumping leo trees to excel.

Demo outline is in collab branch,

/Projects/excel_integration

Screenshot attached.

My usage is that I collect and organize findings (of technology studies) in
leo, and then dump the report to excel, to be read and actioned upon by
other ppl.

I haven't yet polished this workflow in that there is a bunch of manual
work in formatting the report...
 
</t>
<t tx="ekr.20130806211959.17094">From: Terry &lt;webtourist@gmail.com&gt;

I need to present to people who don't have leo installation, in easily 
readable format, the full content of a .leo file, not just the outline, but 
all nodes and all contents.

What do I need to do ?

===== Terry

You could run this script (below):

It only exports selected nodes, so if you want to export everything,
you have to select all the top level nodes, i.e. collapse all the nodes
so only the top level is visible, click the first one, and shift-click
the last one.

It exports to plain text... although you might be able to use the
template to describe HTML, not sure.

&gt; Terry, how do i run it ?  I'm guessing it's not at the cmdline like "python 
&gt; this_script.py" 

Right.  Paste the content into a node, then click the script-button
button to create a new button for running this script.  The button's
name will be the node's name, what it is doesn't matter but 'export'
would be an obvious choice.  Then select the node(s) you want exported
- presumably not including the node containing the script :)

Then it will ask for a file name and whether to include unexpanded
nodes.\

</t>
<t tx="ekr.20130806211959.17095">@language python

# template is everything between r""" and second """
# placeholders are H heading B body C children
# use \\n in B and C lines for conditional blank lines

template = r"""H
    B
  * C"""

lines=[]
exp_only = g.app.gui.runAskYesNoCancelDialog(
    c, 'Expanded nodes only?', 'Expanded nodes only?')
if exp_only == 'no':
    exp_only = False
    
def export_text(p, indent=''):
    
    spaces = ' '*(len(indent) - len(indent.lstrip(' ')))
    
    for line in template.split('\\n'):
        
        if 'H' in line:
            lines.append(indent + line.replace('H', p.h))
        elif 'B' in line and p.b.strip():
            prefix = line[:line.find('B')].replace('\\\\n', '\\n')
            for i in p.b.strip().split('\\n'):
                lines.append(spaces + prefix + i)
                prefix = line[:line.find('B')].replace('\\\\n', '')
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' in line and (not exp_only or p.isExpanded()):
            prefix = line[:line.find('C')].replace('\\\\n', '\\n')
            for child in p.children():
                export_text(child, indent=spaces + prefix)
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' not in line and 'B' not in line:
            lines.append(line)

if exp_only != 'cancel':
    for i in c.getSelectedPositions():
        export_text(i)
    
    filename = g.app.gui.runSaveFileDialog('Save to file')
    # filename = '/home/tbrown/del.txt'
    
    if filename is not None:
        open(filename,'w').write('\\n'.join(lines))
</t>
<t tx="ekr.20130807090137.19378">&gt; Moreover, support for session tracking and restoring becomes an instant
&gt; addition since just by oppening all the @path leo nodes under a "session"
&gt; node we can restore our session!

There was a thread about saving sessions some time ago.  Here's a
script from that thread which adds a @script node to your outline which
reloads the other outlines currently loaded when this outline is next
loaded.

tablist = g.findNodeAnywhere(c, '@script load tabs')
if not tablist:
    from leo.core.leoNodes import vnode
    v = vnode(c)
    v.h = '@script load tabs'
    v._linkAsNthChild(c.hiddenRootNode,
         len(c.hiddenRootNode.children))
tablist = g.findNodeAnywhere(c, '@script load tabs')
assert tablist
import time
b = ["# Generated %s\n"%time.strftime('%c')]
for oc in g.app.commanders():
    b.append("g.openWithFileName('%s', c)" % oc.fileName())
b.append("c.frame.bringToFront()")
b.append("c.setLog()")
tablist.b = '\n'.join(b)
</t>
<t tx="ekr.20130807203905.16242"></t>
<t tx="ekr.20130807203905.16243">class ImportOrgMode:
    @others

def importOrgMode (self,event):
    c = self.c
    self.ImportOrgMode(c).go(c.p)
    c.bodyWantsFocus()

if False and g.app.inScript:
    print('='*40)
    ImportOrgMode(c).test()
    print('done')
</t>
<t tx="ekr.20130807203905.16244">def __init__ (self,c):
    
    self.c = c
</t>
<t tx="ekr.20130807203905.16245">def go (self,p):
    
    '''Prompt for a file and pass the contents to scan().'''
</t>
<t tx="ekr.20130807203905.16246">def scan (self,fn,p,s):

    self.c = c
    root = p.insertAsLastChild()
    root.h = fn
    level,stack = 0,[root]
    body = ['@others\n']
    
    for s in g.splitLines(s):
        g.trace(repr(s))
        if s.startswith('*'):
            i,level = 0,0
            while s[i] == '*':
                i += 1
                level += 1
            if level &gt; len(stack):
                g.trace('bad level',repr(s))
                last = None
            elif level == len(stack):
                last = stack[-1]
                last.b = ''.join(body)
            else:
                last = stack[-1]
                last.b = ''.join(body)
                stack = stack[:level]
            parent = stack[-1]
            p = parent.insertAsLastChild()
            p.h = s.strip()
            stack.append(p)
            body = []
        else:
            body.append(s)
            
    # Finish any trailing lines.
    if body:
        parent = stack[-1]
        parent.b = ''.join(body)
        
    root.contract()
    c.redraw(root)
</t>
<t tx="ekr.20130807203905.16247">def test (self):
    
    s = '''
* A1
    a1.1
    a1.2
** B11
** B12
b12.1
*** C121
c121.1
    c121.2
c121.3
* A2
a2.1
** B21
*** C211
c211.1
*** C212
** B22
    b22.1
b22.1
* A3
* A4
a4.1
* A5
** B51
*** C511
**** D5111
***** E51111
** B52
*** C521
c521.1
'''

    tag = 'test-import-org-mode'
    p = g.findNodeAnywhere(c,tag)
    s = g.adjustTripleString(s,-4)
    if p:
        try:
            self.scan('test-file',p,s)
        except Exception:
            c.redraw(p)
    else:
        print('not found: %s' % tag)
</t>
<t tx="ekr.20130807203905.16248">'''Import each file in the files list after the presently selected node.'''


files = (
    r'c:\Users\edreamleo\test\import-org-mode.txt',
    r'c:\Users\edreamleo\test\import-org-mode.txt',
)

@others

for fn in files:
    try:
        root = c.p.copy()
        f = open(fn)
        s = f.read()
        scan(c,fn,s)
        c.selectPosition(root)
    except IOError:
        print('can not open %s' % fn)
</t>
<t tx="ekr.20130807203905.16249">def scan (c,fn,s):

    last = root = c.p.insertAsLastChild()
    last.h = g.shortFileName(fn)
    level,stack = 0,[root]
    body = ['@others\n']
    
    for s in g.splitLines(s):
        if s.startswith('*'):
            i,level = 0,0
            while s[i] == '*':
                i += 1 ; level += 1
            if level &gt; len(stack):
                g.trace('bad level',repr(s))
            elif level == len(stack):
                last.b = ''.join(body)
            else:
                last.b = ''.join(body)
                stack = stack[:level]
            parent = stack[-1]
            last = parent.insertAsLastChild()
            last.h = s.strip()
            stack.append(last)
            body = []
        else:
            body.append(s)
            
    # Finish any trailing lines.
    if body:
        last.b = ''.join(body)
        
    root.contract()
    c.redraw(root)
</t>
<t tx="ekr.20130807203905.16250"></t>
<t tx="ekr.20130807203905.16251">From Brian Theado

The other day I stumbled across Ville's code in scripts.leo which displays the
output of python's trace module in a leo outline. The output of the trace module
is not very friendly and I didn't find the result very usable. I was inspired to
write some code to translate the output so the tree of function calls is
displayed via Leo headlines. Thanks to Ville for sharing that code. I never
would have figure this out without that starting point.

Just copy (Ctrl-Shift-V) the child outline into a leo outline and hit ctrl-b on
the "call tree" node. The execution tree of the 'scroll-outline-up-line'
minibuffer command will be displayed to stdout and also as a tree of leo
headlines.
</t>
<t tx="ekr.20130807203905.16252">import trace

@language python
@others

# http://docs.python.org/library/trace.html for documentation
# on the trace module
tracer = trace.Trace(countcallers=1)

# Trace a minibuffer command.

# Any function call will work. Leo's minibuffer commands are easily discoverable
# via tab completion and the 'print-commands' command.

#tracer.runfunc(c.executeMinibufferCommand, 'goto-prev-node')
tracer.runfunc(c.executeMinibufferCommand, 'scroll-outline-up-line')

top = p.insertAsLastChild().copy()
top.h = 'trace session'
displayCalltree(top, tracer.results().callers.keys())
c.redraw()
</t>
<t tx="ekr.20130807203905.16253">def displayCalltree(p, callinfo):
   '''
   Converts the function call hierarchy in 'callinfo' into a tree of function
   calls.  The function call tree is displayed to stdout as indented text
   and is inserted as a tree of leo nodes rooted at the given position 'p'
   '''
   callers = [k[0] for k in callinfo]
   callees = [k[1] for k in callinfo]

   # The first set of children will be those that don't have any callers
   # listed in callinfo
   toplevels = list(set(callers) - set(callees))
   positions = {}
   path = []

   # Depth-first traversal of the call hierarchy represented by 'callinfo'
   # 'levels' is a stack which grows during descend and shrinks
   # during ascend.  Each element of 'levels' is a list of unprocessed
   # siblings of each other
   levels = [toplevels]
   while len(levels) &gt; 0:
       while len(levels[-1]) &gt; 0:
           # Process the first element in the 'deepest' (i.e. last) list of siblings
           cur = levels[-1][0]
           levels[-1] = levels[-1][1:]
           indent = " " * 4 * (len(levels)-1)
           if cur not in path:
               if cur in positions.keys():
                   # Function already seen, so make a clone
                   clone = positions[cur].clone()
                   clone.moveToLastChildOf(p)
                   print (indent + "%s %s ..." % cur[1:])
               else:
                   # Haven't seen this function, so insert a new headline
                   p = p.insertAsLastChild().copy()
                   p.h = "%s %s" % cur[1:]
                   print (indent + p.h)

                   # Remember the position so it can be cloned if seen again
                   positions[cur] = p

                   # Find all callees of this function and descend
                   levels.append([c[1] for c in callinfo if c[0] == cur])
                   path.append(cur)
           else:
               r = p.insertAsLastChild().copy()
               r.h = "(recursive call) %s %s" % (cur[1], cur[2])
               print(indent + r.h + "...")

       # Ascend back up one level
       path = path[0:-1]
       p = p.parent()
       levels = levels[0:-1]
</t>
<t tx="ekr.20130807203905.16254"></t>
<t tx="ekr.20130807203905.16255">- Added the following commands:
    
    - ctrl-click-icon
    - ctrl-click-at-cursor
    - open-url
    - open-url-under-cursor
    
- Double-click *only* edits headline.
- Only look at first line of the body in @url nodes.
- Ctrl-click in body allows spaces in url's.
</t>
<t tx="ekr.20130807203905.16258">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 553, in doCommand
    val = command(event)
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 2120, in flattenOutline
    c.importCommands.flattenOutline(fileName)
  File "c:\leo.repo\trunk\leo\core\leoImport.py", line 479, in flattenOutline
    theFile.write(s)
TypeError: must be str, not bytes
</t>
<t tx="ekr.20130807203905.16260">Selecting body editor with clicks doesn't save/restore visual ivars.
The solution would be to create a new onClick event handler...

- Removed insert=None,new_p=None args from all versions of setAllText.
  These are entirely misguided, and may have contributed to scrolling problems.
  
  setAllText now *only* sets text, nothing else!

- All calls to leoMoveCursorHelper are follwed by code that updates
  v.insertSpot, v.selectionStart and v.selectionLength.
  
- v.restoreCursorAndScroll now *carefully* restores selection
  based on v.insertSpot, v.selectionStart and v.selectionLength.
  It also restores the scrollbar using v.scrollBarSpot.
  
- &lt; &lt; unselect the old node &gt; &gt; (selectHelper) now *only*
  sets v.scrollBarSpot.
</t>
<t tx="ekr.20130807203905.16261">In earlier version of Leo if one runs test externally with the selected
position under @test node, that @test was executed with (run-marked-unit-tests-externally)

The fix was to the "important special case" in TM.findAllUnitTestNodes.
</t>
<t tx="ekr.20130807203905.16262">http://groups.google.com/group/leo-editor/browse_thread/thread/dd16ac6dc1832eb2

bookmarks.py was the culprit. The code in onCreate must test to see if c.free_layout already exists.
</t>
<t tx="ekr.20130807203905.16263">http://groups.google.com/group/leo-editor/browse_thread/thread/bb063866875a81c3#

In my installation, now on the latest revision ( r5195) I'm still
experiencing an issue with the '@url command' using 'File-URL' in a Windows
environement.

I'm able to create the Leo User documentation locally. - However, when I
try to read the documentation using the 'File-URL'

file:///D:/Branches/leo-editor/leo/doc/html/_build/html/leo_toc.html

I get the following message in the Leo-Log.

&lt;log&gt;

File 'D:\D:\Branches\leo-editor\leo\doc\html\_build\html\leo_toc.html' does not exist

&lt;/log&gt;

However if I enter this URL directly into FF it is found and displayed properly.

EKR: Obviously, the 'D:\D:\' is the problem.

The fix is simply to special-case file:/// on Windows in g.computeFileUrl.
</t>
<t tx="ekr.20130807203905.16264">https://groups.google.com/group/leo-editor/browse_thread/thread/bb063866875a81c3/6162e6108b09428e

The new code is much like g.computeFileUrl.
</t>
<t tx="ekr.20130807203905.16265">Added code to findAllUnitTestNodes to look up the tree for @test &amp; @suite nodes
if none have been found so far.  Only for the run-unit-tests-externally/locally.
</t>
<t tx="ekr.20130807203905.16266">The @test at.readOneAtShadowNode retains @shadow links node
give fail1: test not set up properly.
The outline is then corrupted, causing other unit tests to fail.
The partial solution is not to call the undo command in the finally clause.
</t>
<t tx="ekr.20130807203905.16268"></t>
<t tx="ekr.20130807203905.16269">If off, only the insert point is restored.

It's kinda pointless to make this a user option.
</t>
<t tx="ekr.20130807203905.16270">- Added link to home page from the TOC.
- Removed online-tutorial link.
- Added search box.
- Added link to glossary from Leo's home page.
- Added scaled screen shot to Leo's home page.
- Brought screen shots up to date.</t>
<t tx="ekr.20130807203905.16476">This was a recent problem.  Normally setInputState should *not* set the border.

Added code to eventFilter to call remove_border on focus out.

set-xxx-state commands call setInputState with set_border = True.
</t>
<t tx="ekr.20130807203905.16477">This was a horrible kludge in LM.doPostPluginsInit
</t>
<t tx="ekr.20130807203905.16478">The fix was in qtBody.setWrap.
</t>
<t tx="ekr.20130807203905.16479"># The change was to g.getScript.
</t>
<t tx="ekr.20130807203905.16480">The trick is to find the wrapper first: it is *also* a QMenu.
We can then call menuBar.setActiveAction on its action!!
</t>
<t tx="ekr.20130807203905.16481">https://bugs.launchpad.net/leo-editor/+bug/1194209

save-as doesn't update the window title.  Changing tabs does.

The main fixes were to qtFrame.get/setTitle. When using tabs, the
LeoTabbedTopLevel widget is the top-level window, *not* the DynamicWindow
(a QMainWindow).

Another fix was setting c.frame.title in saveAs to::
    
    c.computeWindowTitle(c.mFileName)
    
This ensures that all all window titles have the same format.

I chose to do the bare minimum fix, confined to g.computeWindowTitle::

    if os.sep in '/\\':
        title = title.replace('/',os.sep).replace('\\',os.sep)

I didn't have the nerve to put similar code in, say, g.os_path_join. The
Python docs for os.path.join state, "In all cases, join(head, tail) returns
a path to the same location as path (but the strings may differ)."

</t>
<t tx="ekr.20130807203905.16482">https://bugs.launchpad.net/leo-editor/+bug/711158

- The PickleShareDB object is created even if caching (of files) is disabled.
  This allows us to used g.app.db even when --no-cache is in effect.
  
- Added the three methods in app.Detecting already-open files.
</t>
<t tx="ekr.20130807203905.16483">https://bugs.launchpad.net/leo-editor/+bug/879338

Having the colorizer colorize a language properly gives the false illusion
that Leo "understands" the language.

Supporting the language in the global tables in leoApp.py makes the
illusion a reality.

Rev 5334 is a first draft of a fix of bug 879338:
Global tables in leoApp.py should describe all languages known to the colorizer
https://bugs.launchpad.net/leo-editor/+bug/879338

The essence of the bug fix is that Leo's language-description tables should
contain entries for all .py files in the leo/modes folder. These files
control the colorizer. If Leo's colorizer knows about a language, then Leo
should know as much as possible about the language.

In concept, this is a fairly straightforward process, but there were *many*
details to handle. If you aren't a Leo developer, you might want to stop
reading now...

===== Tables

Fixing this bug required non-trivial changes to the following tables::

    g.app.language_delims_dict
    # Keys are languages, values are 1,2 or 3-tuples of delims.

    g.app.language_extension_dict
    # Keys are language names, values are extensions.

    g.app.self.extension_dict
    # Keys are extensions, values are language names

I used scripts to generate new entries for these tables, but these scripts
can not possibly deal with the all the complications...

Leo uses these tables as follows:

1.  To generate the comment delimiters in sentinels for each language.

Happily, getting the comment delimiters correct was probably the easiest
part, so Leo should continue to write sentinels properly for
previously-know languages. However, I had to take care to preserve the REM,
CWEB, forth and perlpod hacks, so that comment delims would include the
necessary spaces.

2. To associate file extensions with importers.

Knowing about new file extensions doesn't actually allow Leo to import any
new languages. For all languages without an official importer Leo will
simply copy the entire text of the file into a single node, as it always
has.

3. To colorize code.

Leo's colorizer mostly doesn't use these tables: to colorize language x,
the colorizer looks for the file leo/modes/x.py. Thus, these changes
probably do not affect the colorizer at all.

===== Special cases

I did a lot of googling in order to determine the proper file extensions to
use for various language. In the process, I learned that *almost* all
languages described in the leo/modes folder are real, interesting and
useful languages.

However, there at least 5 categories of special cases that affect the
tables:

1. Languages that are really just colorizer modes:

These include embperl, pseudoplain and phpsection. We need entries in
leo/modes for these, but they aren't real languages and thus they should
not appear in the language-description tables.

2. Things that might be colorized but aren't real languages.

Afaik, the following are not real languages, and Leo would never have to
generate files in these languages: cvs_commit,dsssl,relax_ng_compatc and svn_commit.

Notes:

- relax_ng_compact is an xml schema.

- The rtf colorizer is *not* a colorizer for binary .rtf file format, is a
  colorizer for .rtf sources. It probably won't do too much harm to retain
  the colorizer data for these languages, but I wouldn't mind eliminating
  them either.

3.  Unknown languages.

A few languages seem not really to exist: freemarker, hex, jcl, progress, props.

4. Languages without real comment delimiters.

Patch annotations are *not* real comment delimiters, so Leo could not
generate patch (.fix or .patch) files from an outline. Happily, there is no
need to do so.

5. Conflicting file extensions.

There are two separate kinds of problems:

A. Leo contains colorizers for several assembly languages. Typically,
assembly languages have .asm or .a file extensions. However, a particular
extension can only be associated with a single language name. Thus, Leo has
no way of knowing what language to associate with .asm or .a files. So I
just punted and didn't make any association at all.

B. Both the rebol and r languages use the .r file extension. One of Leo's
users previously created an entry for rebol, so that's the language that
takes precedence.
</t>
<t tx="ekr.20130807203905.16485">Remove all .xml files in the leo/modes directory.

Imo, this should have been done long ago, for at least the following
reasons:

- These files are part of the jEdit project.
- They are used only by the jedit2py script in scripts.leo.
- The colorizer doesn't use them.
- Bug fixes to the colorizer are made to the .py files, not to the .xml files.
- We can always get updated versions of the .xml files from the jEdit
  project in the unlikely event that we ever need them again.

2. Remove the following .py files from the leo/modes directory:
cvs_commit.py, dsssl.py, freemarker.py, hex.py, jcl.py, progress.py,
props.py and svn_commit.py.

Notes:

- embperl.py, phpsection.py and pseudoplain.py will *not* be removed;
they are internal colorizer states.

- relax_ng_compact.py will be removed if it is not used by any other
colorizer.

- patch.py and rtf.py colorizers will be retained, even though Leo can
never generate such files. 
</t>
<t tx="ekr.20130807203905.16487">@language python

'''Slow script.'''

import glob
import imp

@others

if 0: # The other script is much faster.
    
    keys = ("lineComment","commentStart","commentEnd",)
    d = {}
        # Keys are language names.
        # Values are a list of comment delims, in keys order.
    
    paths,modes_path = get_paths()
    for path in paths:
        module_name = g.shortFileName(path)[:-3]
        module = import_module(module_name,modes_path)
        aList = []
        for key in keys:
            val = module.properties.get(key)
            if val: aList.append(val)
        d[module_name] = aList
    
    print('-'* 20)
    print('language_delims_dict')
    for key in sorted(d):
        print('%16s: "%s"' % ('"%s"' % (key),' '.join(d.get(key))))
</t>
<t tx="ekr.20130807203905.16488">def get_paths():
    
    modes_path = g.os_path_finalize_join(g.app.loadDir,'..','modes')
    pattern = g.os_path_finalize_join(modes_path,'*.py')
    paths = glob.glob(pattern)
    paths = [z for z in paths if not z.endswith('__init__.py')]
    return paths,modes_path
</t>
<t tx="ekr.20130807203905.16489">def import_module(module_name,modes_path):
    
    data = imp.find_module(module_name,[modes_path])
        # This can open the file.
    theFile,pathname,description = data
    module = imp.load_module(module_name,theFile,pathname,description)
    return module
</t>
<t tx="ekr.20130807203905.16490">@language python

'''Script to create global data structures from modes/*.py files.'''

import glob
import imp

g.cls()

theDir = g.os_path_finalize_join(g.app.loadDir,'..','modes','*.py')
aList = glob.glob(theDir)

theDir = g.os_path_finalize_join(g.app.loadDir,'..','modes')

# print('-'*40)
known_keys = list(g.app.language_delims_dict.keys())
new_languages = {}

for z in aList:
    name = g.os_path_basename(z)
    name2 = name[:-3]
    if name2 in known_keys or name2.startswith('__'):
        if 0: print('ignore: %s' % (name2))
    else:
        try:
            theFile, pathname, description = imp.find_module(name2,[theDir])
            m = imp.load_module(name2, theFile, pathname, description)
            if hasattr(m,'properties'):
                # new_languages.append(name2)
                new_languages[name2] = m
            else:
                print('no properties: %s %s' % (name2,m))
        except Exception:
            g.es_exception()
            
print('%s new languages\n' % (len(list(new_languages.keys()))))
    
for key in sorted(new_languages.keys()):
    m = new_languages.get(key)
    aList2 = [m.properties.get(z)
        for z in ('lineComment','commentStart','commentEnd')
            if m.properties.get(z)]
    print('%-20s : "%s",' % (
        '"%s"' % (key),
        ' '.join(aList2)))
    # computed[name2] = ' '.join(aList2)
       
if 0:
    mismatches = 0
    print()
    for z in known_keys:
        val = g.app.language_delims_dict.get(z)
        val2 = computed.get(z)
        if not val:
            print('no val',z)
        elif not val2:
            print('no val2',z)
        elif val != val2:
            mismatches += 1
            print('mismatch for %s. expected %s got %s' % (z,repr(val),repr(val2)))
            print(repr(val))
            print(repr(val2))
    print('%s mismatches' % mismatches)
</t>
<t tx="ekr.20130807203905.16491">https://bugs.launchpad.net/leo-editor/+bug/971171

If If $(HOME)/.leo/.leoRecentFiles.txt does not exist,
the only recent file ever is the current file

The fix: rf.writeRecentFilesFile creates $(HOME)/.leo/.leoRecentFiles.txt if it does not exist.
</t>
<t tx="ekr.20130807203905.16492">https://bugs.launchpad.net/leo-editor/+bug/981849

The original fix was misguided. It attempted to use more careful code in
setSelectionRangeHelper &amp; lengthHelper.
    
The new fix avoids messing with the viewport in both setEditorColors methods:

leo-editor thread: opening new top level windows
http://groups.google.com/group/leo-editor/browse_thread/thread/8f5f6c72d8716b33

The key is to use a descriptor in LeoQTextBrowser stylesheets.  Example::

'LeoQTextBrowser { &lt;&lt; the actual stylesheet &gt;&gt; }

See http://stackoverflow.com/questions/9554435/qtextedit-background-color-change-also-the-color-of-scrollbar


    
</t>
<t tx="ekr.20130807203905.16493">https://bugs.launchpad.net/leo-editor/+bug/998090
save file as doesn't remove entry from open file list

Save file as leaves the file's previous path in g.app.db.openFiles, so
that next time the original file's opened you get a "already open"
message.
</t>
<t tx="ekr.20130807203905.16494">The bug was in chapter.findPositionInChapter.
</t>
<t tx="ekr.20130807203905.16495">These bugs are really the same bug

Node body contents displayed is unpredictably incorrect
https://bugs.launchpad.net/leo-editor/+bug/979142

Prints to tabs in the Log Pane are UTF-8 encoded
https://bugs.launchpad.net/leo-editor/+bug/971166

The fix was:

1. Use the "slow" code in leoQTextEditWidget.get.
2. Use w.get/setAllText in leoFrame.pasteText.
</t>
<t tx="ekr.20130807203905.16496"></t>
<t tx="ekr.20130807203905.16497"></t>
<t tx="ekr.20130807203905.16498">The crash happens only when the new readSettings argument to leoBridge.bridgeController is False.
In that case, the global dicts were not inited properly.

What I did:
    
- Created lm.createDefaultSettingsDicts, called by lm.readGlobalSettingsFiles.
- leoBridge.initLeo calls lm.createDefaultSettingsDicts to set the global dicts.

Bug description:

--- Begin Python script to run from a console ------
import leo.core.leoBridge as b
bridge = b.controller(gui='nullGui',verbose=False,loadPlugins=False,readSettings=False)
c = bridge.openLeoFile(r'c:\users\edreamleo\test\minimal.leo')
--- End Python Script -----

The above script and minimal.leo are attached to this bug report.  Put
them in the same directory, open a console, set the current working
directory to the directory containing the script, and run the script.
You will see the this exception on the console:

2012-11-16 11:28:51 /home/ldi/tmp
$ python readSettingsFalse.py
Traceback (most recent call last):
File "readSettingsFalse.py", line 5, in &lt;module&gt;
  cmdrUnl = bridge.openLeoFile('minimal.leo')
File "/home/ldi/bzr/LeoLatest/leo/core/leoBridge.py", line 330, in openLeoFile
  c = self.createFrame(fileName)
File "/home/ldi/bzr/LeoLatest/leo/core/leoBridge.py", line 367, in createFrame
  c = g.openWithFileName(fileName)
File "/home/ldi/bzr/LeoLatest/leo/core/leoGlobals.py", line 1875, in openWithFileName
  return g.app.loadManager.loadLocalFile(fileName,gui,old_c)
File "/home/ldi/bzr/LeoLatest/leo/core/leoApp.py", line 2539, in loadLocalFile
  previousSettings = lm.getPreviousSettings(fn)
File "/home/ldi/bzr/LeoLatest/leo/core/leoApp.py", line 1668, in getPreviousSettings
  lm.globalSettingsDict,lm.globalShortcutsDict,localFlag=True)
File "/home/ldi/bzr/LeoLatest/leo/core/leoApp.py", line 1626, in computeLocalSettings
  settings_d = settings_d.copy()
AttributeError: 'NoneType' object has no attribute 'copy'
2012-11-16 11:28:55 /home/ldi/tmp
$
</t>
<t tx="ekr.20130807203905.16500">Note: happens only with Python 3.3.0.

Here is a minor traceback when opening quickstart.leo

Leo 4.11 devel, build 5468, 2012-09-30 13:02:59
Python 3.3.0, qt version 4.8.3
Windows 6, 1, 7601, 2, Service Pack 1
reading: C:\Python33\Lib\site-packages\leo-editor\leo\doc\quickstart.leo
unexpected exception in g.importFromPath(rest)
Traceback (most recent call last):
  File "C:\Python33\Lib\site-packages\leo-editor\leo\core\leoGlobals.py", line 5689, in importFromPath
    data = imp.find_module(moduleName,[path]) # This can open the file.
  File "C:\Python33\lib\imp.py", line 203, in find_module
    package_directory = os.path.join(entry, name)
  File "C:\Python33\lib\ntpath.py", line 171, in join
    if b[:1] in seps:
TypeError: Type str doesn't support the buffer API
Can not import rest
</t>
<t tx="ekr.20130807203905.16501">** Not all import problems can be fixed automatically! **

- Added perfectImportFlag. (There was already an importing flag).

- Fixed bug in Fixed underindent convention:

    undentBy adds a period; parseUnderindentTag removes the period.
    
- @file read code must *regenerate* the \\- convention.

    This is done by readNormalLine.
    
    - Fixed an unrelated bug in g.computeWidth.  All unit tests pass.

    - Created g.computeLeadingWhitespaceWidth.
    
- some docstrings are not imported properly in py2_test_grammar.py

    The must be fixed by hand, using @raw and @end_raw.

- escapeFalseSectionReferences now is a do-nothing:
    
    It never generates @verbatim sentinels during import.
</t>
<t tx="ekr.20130807203905.16502">Rev 5378: cleanup-imported-nodes script in scripts.leo &amp; an Aha
http://groups.google.com/group/leo-editor/browse_thread/thread/77b9df4f4ed6dba0

&gt; The third (and I think last) import fail involves not generating
&gt; @verbatim sentinels when importing files.

Fixed in the trunk at rev 5386.

This is (to me) a really interesting dark corner of Leo's import code.

By searching for @verbatim, I discovered a method called
escapeFalseSectionReferences.  This method inserts an @verbatim
"directive" before lines that look like section references.

This is wrong for multiple reasons.  It confuses the importer, there
is no such thing as an @verbatim directive, and worst, it fails to
solve the essential problem, which is that before the imported file is
saved, the **user** must fix the problem!

For example, when importing a line like::

  a = x &lt;&lt; y &gt;&gt; z

The user, and *only* the user, should change this to something like::

   a = x &lt;&lt; y \
   &gt;&gt; z # EKR

I suppose each importer could figure out a language-specific
workaround, but imo this isn't particularly important, for reasons
which will become clearer below.

So now escapeFalseSectionReferences is a do-nothing.

With this explanation, perhaps the checkin log will make sense::

QQQQQ
Fixed another import fail in an "interesting" way: the import code no
longer inserts @verbatim. This means a later write of the imported
will fail. This is correct!

Indeed, the failed write is the only way to alert the user that the
code must be revised by hand.

Note that another import fail, involving a leading '@' on a line in a
docstring, must also be fixed by hand. In lib2to3/pgen/grammar.py the
*only* possible fix is to enclose the entire docstring at the end of
the file by @raw and @end_raw.

All unit tests pass, but no new tests have been added so far.
QQQQQ

The other import fail mentioned in the checkin log is a truly
fascinating case, one that no amount of AI could possibly discover the
correct fix.

At the very end of lib2to3/pgen/grammar.py the following code
(shortened a bit) appears at the top level::

   opmap_raw = """
   ( LPAR
   ) RPAR
   [snip]
   @ AT
   [snip]
   == EQEQUAL
   != NOTEQUAL
   """
   opmap = {}
   for line in opmap_raw.splitlines():
       if line:
           op, name = line.split()
           opmap[op] = getattr(token, name)

There are several things to notice about this code:

1. It contains a line starting with '@'.  Sooner or later, this is
going to cause problems for either Leo's import code or Leo's write
code.

2. It's overly clever, but it's overly clever for a reason: it's
testing tokenizing logic.

3. The code at the end of the file assumes that all lines of the
docstring are 2-tuples.

For these reasons, the one and *only* possible way to make Leo write
this code correctly is to enclose the *entire* docstring in @raw and
@end_raw directives.  Like this::

   @raw
   opmap_raw = """
   ( LPAR
   ) RPAR
   [snip]
   @ AT
   [snip]
   == EQEQUAL
   != NOTEQUAL
   """
  @end_raw

In particular, surrounding the line "@ AT" with @raw/@end_raw
directives will cause 2to3 to fail on startup:  the Leo sentinel lines
will not be 2-tuples!

===== Important Conclusions

All this picky detail illustrates a crucial fact.  No matter how good
Leo's importers are, (and they are now quite good), there will
*always* be cases where thoughtful human intervention will be
required.

Furthermore, the simplest thing that could possibly work is for the
importers to allow some constructions that are guaranteed to cause
problems later, when the user attempts to write the file.  We hope
that Leo will complain about certain constructions, but Leo may not be
able to complain about all constructions.

Thus, some import mistakes can *only* be found by running tests.  For
complex programs like 2to3, the only truly safe way to check imports
is by running the 2to3 test suite.
</t>
<t tx="ekr.20130807203905.16504">The fix was to always call c.selectPosition in leoFind.showSuccess.
This ensures that leoTree.setBodyTextAfterSelect always does w.setAllText,
which is essential to init the syntax colorer properly.

The happy side effect of this change is that a lot of duplicate selection
code in showSuccess disappears.

Also converted two section references in leoTree.selectHelper to selectNewNode.
</t>
<t tx="ekr.20130807203905.16505">LeoQTextBrowser.onSliderChanged must set v.scrollBarSpot only if "self" is actually the body pane.

Othewise scrolling the log pane will scroll the body pane!
</t>
<t tx="ekr.20130807203905.16506">The maintain_scroll option is *evil*.
</t>
<t tx="ekr.20130807203905.16507">An assert failed during scanning in mungeAllFunctions.

Added defensive code to mungeAllFunctions, dedentBlocks and
replaceComments. The new code simply increments a pointer if a "progress"
assert would fail. (The progress assert still exists, as a double-check.)

Fixed bug: the call to u.afterChangeGroup in the go() method is called only once.

Suppress warning messages given by CPrettyPrinter.indent.
</t>
<t tx="ekr.20130807203905.16508">If the user has not typed anything in the minibuffer, &lt;alt-x&gt;&lt;tab&gt; returns *all* completions.

Otherwise, if there are no completions, the "Completions" tab is empty, *not* all completions.

This behavior is much more intuitive than the old behavior.

The fix was a new special case in k.computeCompletionList.
</t>
<t tx="ekr.20130807203905.16509"># The fix was simply to call c.endEdiing in undo and redo *before* getting the undo params.
# This allows c.endEditing to properly set the undo stack.
</t>
<t tx="ekr.20130807203905.16510">dw.createFindTab now creates a third column with a minimum width.
The find/change text widgets span the second and third columns.
</t>
<t tx="ekr.20130807203905.16511"></t>
<t tx="ekr.20130807203905.16512"># Changed: onActivateEvent (qtGui), onDeactivateEvent (qtGui)
</t>
<t tx="ekr.20130807203905.16513"></t>
<t tx="ekr.20130807203905.16514">A shock: p.deletePositionsInList must be rethought and rewritten
https://groups.google.com/forum/#!topic/leo-editor/IWMWhUlkos0
</t>
<t tx="ekr.20130807203905.16515">The fix was to set new_c=self.c in the call to c.close in createFileFromOutline.
</t>
<t tx="ekr.20130807203905.16516">If an assert fails, the entire file is read into a single node.
</t>
<t tx="ekr.20130807203905.16517">https://bugs.launchpad.net/leo-editor/+bug/903640
Import of Python files containing the strings "&lt;&lt;" and "&gt;&gt;" does not work

At present @auto can import .py files containing self.cprint("&lt;&lt;" + ret +
"&gt;&gt;\n")

Furthermore, it's possible to write such files properly after changing
them.

Thus, this bug seems to have been completely fixed, as far as @auto goes.

However, *importing* the file with Leo's import-file command does fail (an
@ignore is inserted). This is expected: unlike @auto, the import command
creates an @file node, so the "perfect import" check will complain that the
section called &lt;&lt; ret &gt;&gt; is undefined.

I am going to close this item. I see no real need to support other section
delimiters in external files. If there ever becomes a real need to do so, a
separate wishlist item will be appropriate.
</t>
<t tx="ekr.20130807203905.16518">Rev 5840 adds support for hack that is active only on Ubuntu systems.

When Leo starts up, it creates a commander (tab) called "loading..." before
loading all tabs. This ensures that the first "real" .leo file loaded (into
a tab) will have a menu area. This tab exists only until the first real
.leo file is loaded.

Yes, this is a pretty horrible hack, but it seems necessary on Ubuntu
Unity. Presumably this is a Qt or Unity problem, but there has been
response to previous bug reports, so it seems that best that can be done.

</t>
<t tx="ekr.20130807203905.16519">https://bugs.launchpad.net/leo-editor/+bug/1184855

The fix was to set the name of the .leo file to foobar.pyxxx.leo in LM.initWrapperLeoFile.
</t>
<t tx="ekr.20130807203905.16520">https://bugs.launchpad.net/leo-editor/+bug/1021849

Rev 5789 fixes this bug, using some hints from the NSIS support forum.

The fix was to CreateShortCut in the Desktop Shortcut section:
  - remove single quotes.
  - remove the "0" trailing arg.

The installer passes all my tests on my Windows 7 machine, which is all the testing I have ever done.


Here is the checkin log::

QQQ
Fixed the icon problem and improved and simplified the install/uninstall 
process in several ways.

1. Fixed https://bugs.launchpad.net/leo-editor/+bug/1021849

The fix was to CreateShortCut in the Desktop Shortcut section:
  - remove single quotes.
  - remove the "0" trailing arg.

2. Changed the make-leo button to simplify the uninstall manifest.

Rather than computing the files to be deleted, the uninstall script now 
just does RMDir /r "$INSTDIR\\leo".
This *is* safe, and ensures that all files &amp; directories get deleted, 
including $INSTDIR itself.
QQQ

The only possible drawback to using the /r option is that it will delete 
any files that the user has created in the leo directory.  Imo, there is no 
perfect solution to this.  Warning prompts never do any good, and if we 
retain files, for whatever reason, there will be bug reports saying that 
Leo didn't properly uninstall itself.  This has already happened :-)

I am happy to live with the present situation, unless somebody a) objects 
loudly and b) shows how the problem can be solved cleanly.
</t>
<t tx="ekr.20130807203905.16521"></t>
<t tx="ekr.20130807203905.16522">http://groups.google.com/group/leo-editor/browse_thread/thread/93f2cc88ebbf9893
</t>
<t tx="ekr.20130807203905.16523">The format of such local suppressions is::

    # pylint: disable=&lt;message-number&gt;
</t>
<t tx="ekr.20130807203905.16524"></t>
<t tx="ekr.20130807203905.16526">@language rest

When I study a program, I like to import it into Leo.  I have several
scripts that do this:  some create @auto nodes; others create @file
nodes.

Either way, the import process has the potential to change many
files.  Usually, I just change @auto and @file to @@auto or @@file, so
that any changes I make while studying the code won't affect the
originals.

But this "safety first" approach means that I can't actually use Leo
to insert tracing statements (or for any other changes.)  A few days
ago, I found a way to import "live" code into Leo safely:

   Create a bzr repository for the code before importing it

The Aha is to create the repository *wherever the code is*, including,
say, python/Lib/site-packages.

- bzr qdiff ensures that import hasn't significantly altered the code,
- bzr revert undoes any unwise or unwanted changes.

This is exactly what I need:  I can make changes to important tools
*safely* within Leo.
</t>
<t tx="ekr.20130807203905.16529"></t>
<t tx="ekr.20130807203905.16530"></t>
<t tx="ekr.20130807203905.16531">g.es now "redirects" colors using the following settings:

    'black':    @color log_text_foreground_color
    'blue':     @color log_warning_color
    'red':      @color log_error_color
</t>
<t tx="ekr.20130807203905.16532"></t>
<t tx="ekr.20130807203905.16533"></t>
<t tx="ekr.20130807203905.16534">Help-for command translate !&lt;command-name&gt;! in the docstring to the binding for command-name.
</t>
<t tx="ekr.20130807203905.16535">Extensions is a convenient place: code can use g.importExtension to import it.

Alas, sh.py can not be used in Leo's core.</t>
<t tx="ekr.20130807203905.16536">\@testclass nodes should set either the suite or testclass vars.

\@suite nodes should set the suite var.
</t>
<t tx="ekr.20130807203905.16538">def doTests(self,all=None,marked=None,verbosity=1):

    '''Run any kind of local unit test.

    Important: this is also called from dynamicUnitTest.leo
    to run external tests "locally" from dynamicUnitTest.leo
    '''

    trace = False
    c,tm = self.c,self

    # 2013/02/25: clear the screen before running multiple unit tests locally.
    if all or marked: g.cls()
    p1 = c.p.copy() # 2011/10/31: always restore the selected position.

    # This seems a bit risky when run in unitTest.leo.
    if not c.fileName().endswith('unitTest.leo'):
        if c.isChanged():
            c.save() # Eliminate the need for ctrl-s.

    if trace: g.trace('marked',marked,'c',c)
    try:
        g.unitTesting = g.app.unitTesting = True
        g.app.runningAllUnitTests = all and not marked # Bug fix: 2012/12/20
        g.app.unitTestDict["fail"] = False
        g.app.unitTestDict['c'] = c
        g.app.unitTestDict['g'] = g
        g.app.unitTestDict['p'] = c.p.copy()

        # c.undoer.clearUndoState() # New in 4.3.1.
        changed = c.isChanged()
        suite = unittest.makeSuite(unittest.TestCase)
        aList = tm.findAllUnitTestNodes(all,marked)
        setup_script = None
        found = False
        for p in aList:
            if tm.isTestSetupNode(p):
                setup_script = p.b
                test = None
            elif tm.isTestNode(p):
                if trace: g.trace('adding',p.h)
                test = tm.makeTestCase(p,setup_script)
            elif tm.isSuiteNode(p): # @suite
                if trace: g.trace('adding',p.h)
                test = tm.makeTestSuite(p,setup_script)
            elif tm.isTestClassNode(p):
                if trace: g.trace('adding',p.h)
                test = tm.makeTestClass(p) # A suite of tests.
            else:
                test = None
            if test:
                suite.addTest(test)
                found = True
        # Verbosity: 1: print just dots.
        if not found:
            # 2011/10/30: run the body of p as a unit test.
            if trace: g.trace('no found: running raw body')
            test = tm.makeTestCase(c.p,setup_script)
            if test:
                suite.addTest(test)
                found = True
        if found:
            res = unittest.TextTestRunner(verbosity=verbosity).run(suite)
            # put info to db as well
            if g.enableDB:
                key = 'unittest/cur/fail'
                archive = [(t.p.gnx,trace2) for (t,trace2) in res.errors]
                c.cacher.db[key] = archive
        else:
            g.error('no %s@test or @suite nodes in %s outline' % (
                g.choose(marked,'marked ',''),
                g.choose(all,'entire','selected')))
    finally:
        c.setChanged(changed) # Restore changed state.
        if g.app.unitTestDict.get('restoreSelectedNode',True):
            c.contractAllHeadlines()
            c.redraw(p1)
        else:
            c.recolor() # Needed when coloring is disabled in unit tests.
        g.unitTesting = g.app.unitTesting = False
</t>
<t tx="ekr.20130807203905.16539">def get_suite_script(self):

    s = '''

try:
    g.app.scriptDict['suite'] = suite
except NameError:
    pass

'''
    return g.adjustTripleString(s, self.c.tab_width)
</t>
<t tx="ekr.20130807203905.16540">def get_test_class_script(self):

    s = '''

try:
    g.app.scriptDict['testclass'] = testclass
except NameError:
    pass

'''
    return g.adjustTripleString(s,self.c.tab_width)
</t>
<t tx="ekr.20130807203905.16541">def makeTestCase (self,p,setup_script):

    c = self.c
    p = p.copy()

    if p.b.strip():
        return GeneralTestCase(c,p,setup_script)
    else:
        return None
</t>
<t tx="ekr.20130807203905.16542">def makeTestClass (self,p):

    """Create a subclass of unittest.TestCase"""

    c,tm = self.c,self
    fname = 'makeTestClass'
    p = p.copy()
    script = g.getScript(c,p).strip()
    if not script:
        print("nothing in %s" % p.h)
        return None
    try:
        script = script + tm.get_test_class_script()
        script = script + tm.get_suite_script()
        d = {'c':c,'g':g,'p':p,'unittest':unittest}
        if c.write_script_file:
            scriptFile = c.writeScriptFile(script)
            if g.isPython3:
                exec(compile(script,scriptFile,'exec'),d)
            else:
                execfile(scriptFile,d)
        else:
            exec(script + '\n',d)
        testclass = g.app.scriptDict.get('testclass')
        suite = g.app.scriptDict.get('suite')
        if suite and testclass:
            print("\n%s: both 'suite' and 'testclass defined in %s" % (
                fname,p.h)) 
        elif testclass:
            suite = unittest.TestLoader().loadTestsFromTestCase(testclass)
            return suite
        elif suite:
            return suite
        else:
            print("\n%s: neither 'suite' nor 'testclass' defined in %s" % (
                fname,p.h))
            return None
    except Exception:
        print('\n%s: exception creating test class in %s' % (fname,p.h))
        g.es_print_exception()
        return None
</t>
<t tx="ekr.20130807203905.16543"># This code executes the script in an @suite node.
# This code assumes that the script sets the 'suite' var to the test suite.

def makeTestSuite (self,p,setup_script):

    """Create a suite of test cases by executing the script in an @suite node."""

    c,tm = self.c,self
    fname = 'makeTestSuite'
    p = p.copy()
    script = g.getScript(c,p).strip()
    if not script:
        print("no script in %s" % p.h)
        return None
    if setup_script:
        script = setup_script + script
    try:
        script = script + tm.get_suite_script()
        d = {'c':c,'g':g,'p':p}
        if c.write_script_file:
            scriptFile = c.writeScriptFile(script)
            if g.isPython3:
                exec(compile(script,scriptFile,'exec'),d)
            else:
                execfile(scriptFile,d)
        else:
            exec(script + '\n',d)
        suite = g.app.scriptDict.get("suite")
        if not suite:
            print("\n%s: %s script did not set suite var" % (fname,p.h))
        return suite
    except Exception:
        print('\n%s: exception creating test cases for %s' % (fname,p.h))
        g.es_print_exception()
        return None
</t>
<t tx="ekr.20130807203905.16545"></t>
<t tx="ekr.20130807203905.16546"></t>
<t tx="ekr.20130807203905.16547">These are generated from the @button node's docstring, if it exists.
</t>
<t tx="ekr.20130807203905.16548"></t>
<t tx="ekr.20130807203905.16549">A major change in Leo's read/write code.  The first "live" rev was 5584.
At present, controlled by the allow_cloned_sibs switch in leoAtFile.py.

Fixes the following bugs:

clones sometimes not saved
https://bugs.launchpad.net/leo-editor/+bug/882243

When all clones of a node are in an @file subtree, they disappear on exit
https://bugs.launchpad.net/leo-editor/+bug/1084661
</t>
<t tx="ekr.20130807203905.16550">http://groups.google.com/group/leo-editor/browse_thread/thread/67a28984616d09c9
About bug 882243: clones sometimes not saved

What I did:

- Added allow_cloned_sibs switch at the start of leoAtFile.py.
  All new code enabled by this switch.

- Refactored at.createNewThinNode:
    - Renamed createThinChild4 to old_createThinChild4.
    - Added new_createThinChild4.
    - Added createV5ThinNode.
    
The key invariant in createV5ThinNode:
    On exit from at.changeLevel, top of at.thinNodeStack is the parent.
</t>
<t tx="ekr.20130807203905.16551">Skip '.' before section names in v.matchHeadline.

2013/08/01: bug fix: allow leading periods in at.isSectionName.
</t>
<t tx="ekr.20130807203905.16552">The new code works like leoTree.onHeadChanged.

The code can be called twice, so it is a bit tricky
to only issue warnings once.
</t>
<t tx="ekr.20130807203905.16553">- (done) deprecate/reorganize *dynamic* body text background colors.
    - (done) set body pane color only once. (Now done only via stylesheet).
    - (done) use border colors to indicate state.
</t>
<t tx="ekr.20130807203905.16554"></t>
<t tx="ekr.20130807203905.16555">Leo now supports two new setting, with the indicated default::

    @color focus_border_command_state_color = blue
    @color focus_border_overwrite_state_color = green

This works in conjunction with the existing border-color setting::

    @color focus_border_color = red

So by default, the color border is red when in insert state, and blue
if in command state.

This allows the focus border to change color depending on whether we
are in input or command mode.  This is a workaround for the (extreme)
difficulty of changing cursors depending on mode.

When used to distinguish insert from command modes, I recommend
changing the existing setting::

    @int focus_border_width = 1

to::

    @int focus_border_width = 2

This makes the focus border much more visible, and makes the color
changes obvious.

I tested this code without changing bindings using the set-command-
state command.

As before, if you don't want any such colored borders, just do::

    @bool use_focus_border = False 
</t>
<t tx="ekr.20130807203905.16556">Changed set-xxx-state &amp; setInputState.

Changed qtGui.add_border and remove_border.
</t>
<t tx="ekr.20130807203905.16557"></t>
<t tx="ekr.20130807203905.16558">- Changed es so it always queues messages when g.app.log is None.
- Completed the command-line args: --session-save and --session-restore.
- Wrote session info in leoTabbedTopLevel.closeEvent and g.app.onQuit.

Rev 5324 finishes some session-related work. The existing
session commands are unchanged, but Leo now fully supports
two new command-line arguments::

    --session-restore     restore previously saved session tabs at startup
    --session-save        save session tabs on exit

If you use both arguments, everything is automatic: Leo
saves the tabs when you quit Leo, and restores tabs when you
start Leo. Note that you can still specify file names on the
command line in addition to whatever files --session-restore
will open for you.

If you use only --session-restore, it is up to you to save
sessions "by hand" with one of the session commands, for
instance, session-snapshot-save.
</t>
<t tx="ekr.20130807203905.16559">Useful for re-parsing text that was not originally parsed properly.
</t>
<t tx="ekr.20130807203905.16560">Created print-buttons command, showing source of all @command and @button nodes.

Changed ParserBaseClass.doButtons/doCommands so they return
lists of (p.copy(),script) rather than (p.h,script)

Added g.app.config.atLocalButtonsList &amp; g.app.config.atLocalCommandsList
for use by print-buttons command.
</t>
<t tx="ekr.20130807203905.16561">https://bugs.launchpad.net/bugs/994985
Wishlist: normalize-whitespace

When using @auto, the logic often complains about "abnormal" whitespace and
refuses to write/read node normally.

What I did:
    
1. The clean-lines command (and thus the clean-all-lines command)
   now remove trailing whitespace while preserving newlines.
   
2. reportMismatch suggests using the clean-all-lines command.
   Note: a good unit test for reportMismatch already exists.
   
3. Added a unit test for clean-lines.
</t>
<t tx="ekr.20130807203905.16562">The commands now work, and Alt-slash and Alt-Ctrl-slash are bound as in Emacs.
</t>
<t tx="ekr.20130807203905.16563">If the @mode headline contains ::, everything following
the :: is the mode prompt. For example::
    
    @mode abc :: xyz
    
Creates the enter-abc-mode command, but the prompt for the command is xyz.

ParserBaseClass.createModeCommand creates this convention.
Changed k.modeHelpHelper.
</t>
<t tx="ekr.20130807203905.16564"></t>
<t tx="ekr.20130807203905.16565">Instead of just printing their docstrings.
</t>
<t tx="ekr.20130807203905.16566"></t>
<t tx="ekr.20130807203905.16567">A few changes that should have been done long ago:

- Added support for 'before' keyword.  Prints something before the function name.
- Use g.shortFileName(__file__) instead of "&lt;module&gt;"
</t>
<t tx="ekr.20130807203905.16568">- Documented that return ends the search.
- Documented that deleting the entire search pattern aborts the search.
- Removed annoying status messages printed to log.

- (Can't do) If text is already highlighted, Alt-S or Alt-R should use that text.

</t>
<t tx="ekr.20130807203905.16569"></t>
<t tx="ekr.20130807203905.16572">Changed:
- init (qtGui.py top level) (qtPdb)
- runMainLoop (qtGui)
- start_new_api
</t>
<t tx="ekr.20130807203905.16573">Investigate how IPython hijacks event loops
http://groups.google.com/group/leo-editor/browse_thread/thread/e1dc6439bf8b17f9

pyos_inputhook is relevant

IPython lib.inputhook
http://ipython.org/ipython-doc/stable/api/generated/IPython.lib.inputhook.html

* IPython seems to require Python 2.x.
* I can run IPython from either C:\prog\ipython-0.12 or from python\lib\site-packages

From C:\prog\ipython-0.12\IPython\scripts

#!/usr/bin/env python
"""Terminal-based IPython entry point.
"""

from IPython.frontend.terminal.ipapp import launch_new_instance

launch_new_instance()

Here is ipapi.get::

@language python

    def get():
        """Get the global InteractiveShell instance."""
        from IPython.core.interactiveshell import InteractiveShell
        return InteractiveShell.instance()
</t>
<t tx="ekr.20130807203905.16574">- Import logic looks for legacy IPython first (0.11 and prev),
  then looks for new-style IPython (0.12 and above).

- Created GlobalIPythonManager class, assigned to leoIPython.gipm and g.app.gipm.

- Added self.c ivar to LeoNode class.  This is the same as p.v.context.
</t>
<t tx="ekr.20130807203905.16575">http://ipython.org/ipython-doc/rel-0.12/api/index.html
</t>
<t tx="ekr.20130807203905.16576">http://mail.scipy.org/pipermail/ipython-dev/
</t>
<t tx="ekr.20130807203905.16577">http://ipython.org/ipython-doc/rel-0.12/api/generated/IPython.core.interactiveshell.html
</t>
<t tx="ekr.20130807203905.16579">Don't show full completion list when the minibuffer becomes empty.
</t>
<t tx="ekr.20130807203905.16580"></t>
<t tx="ekr.20130807203905.16581">A simple change to k.computeCompletionList was all that was needed.

</t>
<t tx="ekr.20130807203905.16583">Added TypeScriptScanner class and related code.
</t>
<t tx="ekr.20130807203905.16584"></t>
<t tx="ekr.20130807203905.16585">Created vimoutlinerScanner.

Created at.writeAtAutoOtlFile.
</t>
<t tx="ekr.20130807203905.16587">Should Leo support a standard template tool?
http://groups.google.com/group/leo-editor/browse_thread/thread/dd629473f4b3c4fc

Added a jinja2 templating example.  See:
    
file://../scripts/scripts.leo#Scripts--&gt;@thin%20leoScripts.txt--&gt;Important--&gt;Prototype%20of%20jinja%20@command%20nodes
</t>
<t tx="ekr.20130807203905.16588">The script itself is in scripts.leo: cleanup-imported-nodes

- Put docstring in root node.
- Use section reference for declarations.
- Remove leading and trailing blank lines from all nodes, leaving only a trailing newline.
- If a new contains nothing but comments, merge it with the next node.
- If a node contains nothing but a property, merge it with the previous node.

The holy grail would be to do all this in the Python importer, but a post-processing script suffices.

Workflow:
    
1. bzr checkin of all *unchanged* file.
2. Import all files and save.
3. bzr commit all changed files.
4. Run cleanup script.
5. bzr qdiff then shows all cleanups.
6. bzr commit if all goes well.
</t>
<t tx="ekr.20130807203905.16608"></t>
<t tx="ekr.20130807203905.16610"></t>
<t tx="ekr.20130807203905.16611"></t>
<t tx="ekr.20130807203905.16686"></t>
<t tx="ekr.20130807203905.16687"></t>
<t tx="ekr.20130807203905.16766"></t>
<t tx="ekr.20130807203905.16778"></t>
<t tx="ekr.20130807203905.16779"></t>
<t tx="ekr.20130807203905.16780"></t>
<t tx="ekr.20130807203905.16781">Changes in rev 4163 caused the bug.

The problem is the call to w.setStyleSheet in g.app.gui.update_style_sheet.
Apparently, this causes a layout-request event that spoils the scroll position.

The fixes:
    
1. update_style_sheet does nothing if the new stylesheet is the same as the old.

2. Added lockout to mouseReleaseEvent. update_style_sheet does nothing if
   the lockout is set.
   
3. mouseReleaseEvent sets c.p.v.insertPoint if appropriate.

Hitting Ctrl-H can still cause a small unwanted scroll, but the insert point remains visible.
</t>
<t tx="ekr.20130807203905.16819"></t>
<t tx="sps.20100708203040.19008">@language python
import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
&lt;&lt; pdf manual &gt;&gt;
</t>
<t tx="sps.20100708203040.19009">d = c.scanAllDirectives(p)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="sps.20100708203040.19010"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('../../fixup.pl &lt; Leodocumentation.tex &gt; LeoDoc.tex')
os.system('make LeoDoc.pdf')
</t>
<t tx="sps.20100708213227.44914"></t>
<t tx="tbrown.20120821215353.22854">Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand you input
(just ``"some_function"`` and ``"one, two, three=4"`` to something like::
    
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in individual
    .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in @data
    # global-abbreviation nodes. Typically you would define @data abbreviation nodes
    # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.
</t>
<t tx="ville.20090705224948.5734">import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
# no pdf manual creation, perhaps too "involved" for many
</t>
<t tx="ville.20090705225609.5736">mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="ville.20090705225609.5738"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('make all-pdf')
</t>
</tnodes>
</leo_file>
