<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070610174018"><vh>Startup</vh>
<v t="ekr.20050407144417"><vh>@settings</vh>
<v t="ekr.20111108052738.5507"><vh>@shortcuts</vh></v>
<v t="ekr.20100907092300.4440"><vh>Inkscape options</vh>
<v t="ekr.20100907092300.4441"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20100907092300.4442"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20101009114830.4724"><vh>File options</vh>
<v t="ekr.20080923182326.1"><vh>@@bool create_nonexistent_directories = True</vh></v>
<v t="ekr.20080412124815.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20101009114830.4723"><vh>@bool put_expansion_bits_in_leo_files = False</vh></v>
</v>
<v t="ekr.20101009114830.4725"><vh>Plugins options</vh>
<v t="ekr.20050407144342"><vh>@page http plugin</vh>
<v t="ekr.20050407144342.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050407144342.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050407144342.3"><vh>@string rst_http_attributename = rst_http_attribute</vh></v>
</v>
<v t="ekr.20050812123002"><vh>@page rst3 options</vh>
<v t="ekr.20050812123002.1"><vh>Http options...</vh>
<v t="ekr.20050812123002.2"><vh>@bool rst3_clear_http_attributes = False</vh></v>
<v t="ekr.20050812123002.3"><vh>@string rst3_http_attributename = 'rst_http_attribute'</vh></v>
<v t="ekr.20050812123002.4"><vh>@bool rst3_http_server_support = False</vh></v>
<v t="ekr.20050812123002.5"><vh>@string rst3_node_begin_marker = 'http-node-marker-'</vh></v>
</v>
<v t="ekr.20050812123002.6"><vh>@bool rst3_massage_body = False</vh></v>
<v t="ekr.20050812123002.7"><vh>@bool rst3_format_headlines = True</vh></v>
<v t="ekr.20050812123002.8"><vh>@bool rst3_write_intermediate_file = True</vh></v>
<v t="sps.20100708213227.44914"><vh>@string rst3_write_intermediate_extension = .html.txt</vh></v>
<v t="ekr.20051202072010"><vh>@string rst3_default_path =</vh></v>
</v>
</v>
</v>
<v t="ekr.20101028112631.4959" descendentVnodeUnknownAttributes="7d7100550b302e312e302e302e302e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473732e"><vh>@file doc-startup.txt</vh></v>
</v>
<v t="ekr.20050831195449"><vh>Read me first</vh></v>
<v t="ekr.20100805171546.4412"><vh>Files, including home page</vh>
<v t="ekr.20130327143919.5868"><vh>@@file front.html (old home page)</vh></v>
<v t="ville.20090609182215.5676"><vh>@auto-rst treecaching.txt</vh></v>
<v t="ekr.20090428133936.2"><vh>@edit html\conf.py</vh></v>
<v t="ekr.20090428102353.1"><vh>@edit html\leo_toc.html.txt</vh></v>
<v t="ekr.20101025080245.5800"><vh>@edit leo_toc.html</vh></v>
<v t="ekr.20101112045055.5064"><vh>@file plugin_catalog.py</vh></v>
<v t="ekr.20100808060203.4273"><vh>@file html/index.html</vh></v>
<v t="ekr.20101025080245.5801"><vh>@url modified toc</vh></v>
<v t="ekr.20101026081737.5531"><vh>Links that replace those in actual built page</vh></v>
<v t="ekr.20101112045055.5065"><vh>@url docs generated from plugin_catalog.py</vh></v>
</v>
<v t="ekr.20040414161647"><vh>Users Guide</vh>
<v t="ekr.20101104024804.4898"><vh> Generating the Users Guide</vh>
<v t="sps.20100708203040.19008"><vh>@@button generate-full-userguide</vh>
<v t="sps.20100708203040.19009"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="sps.20100708203040.19010"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
<v t="ville.20090705224948.5734"><vh>@@button generate-userguide</vh>
<v t="ville.20090705225609.5736"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="ville.20090705225609.5738"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5794"><vh>Preliminaries</vh>
<v t="ekr.20050831184021.3"><vh>Front matter</vh>
<v t="ekr.20100805165051.7148"><vh>@file frontMatter.txt</vh></v>
</v>
<v t="ekr.20070701101808"><vh>Preface</vh>
<v t="ekr.20100805165051.7149"><vh>@file preface.txt</vh></v>
</v>
<v t="ekr.20050831184021.4"><vh>What people are saying about Leo</vh>
<v t="ekr.20100805165051.7150"><vh>@file testimonials.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5795"><vh>Basics</vh>
<v t="ekr.20050831195331.1"><vh>FAQ</vh>
<v t="ekr.20100805165051.7151"><vh>@file FAQ.txt</vh></v>
</v>
<v t="ekr.20101007100904.4372"><vh>Slideshows page</vh>
<v t="ekr.20100821182153.4344"><vh>@file screen-shots.txt</vh></v>
</v>
<v t="ekr.20100731112744.7267"><vh>Installing Leo</vh>
<v t="ekr.20100805165051.7152" descendentVnodeUnknownAttributes="7d71005507302e302e342e3171017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e710558040000003c2f613e71065d71072858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e710858060000003c2f6469763e71095d710a28584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e710b58060000003c2f6469763e710c5d710d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710e58060000003c2f6469763e710f5d71102858060000003c626f64793e711158070000003c2f626f64793e71125d71132858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711458070000003c2f68746d6c3e71154e656565656558070000003c2f6469763e0a711658070000003c2f6469763e0a711758350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7118586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a71196573732e"><vh>@file installing.txt</vh></v>
</v>
<v t="ekr.20091130111843.6787"><vh>The Leo Tutorial</vh>
<v t="ekr.20100805165051.7146"><vh>@file intro.txt</vh></v>
<v t="ekr.20100808120531.4280"><vh>@file outline-commands.txt</vh></v>
<v t="ekr.20100808120531.4283"><vh>@file nutshell.txt</vh></v>
</v>
<v t="EKR.20040524104904.99"><vh>Using Leo</vh>
<v t="ekr.20100805165051.7155"><vh>@file commands.txt</vh></v>
</v>
<v t="EKR.20040524104904.211"><vh>Customizing Leo</vh>
<v t="ekr.20100805165051.7158"><vh>@file customizing.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5799"><vh>Intermediate Topics</vh>
<v t="ekr.20060430221745"><vh>Controlling syntax coloring</vh>
<v t="ekr.20100805165051.7165"><vh>@file coloring.txt</vh></v>
</v>
<v t="ekr.20050831184021.1"><vh>Creating documents with Leo</vh>
<v t="ekr.20100805165051.7164"><vh>@file rstplugin3.txt</vh></v>
</v>
<v t="ekr.20050831195331.4"><vh>Scripting Leo with Python</vh>
<v t="ekr.20100805165051.7157" descendentVnodeUnknownAttributes=""><vh>@file scripting.txt</vh></v>
</v>
<v t="ekr.20050912125144"><vh>Plugins</vh>
<v t="ekr.20100805165051.7162"><vh>@file plugins.txt</vh></v>
</v>
<v t="ekr.20060612102055"><vh>Writing Plugins</vh>
<v t="ekr.20100805165051.7163"><vh>@file writingPlugins.txt</vh></v>
</v>
<v t="ekr.20070628083442"><vh>Unit testing with Leo</vh>
<v t="ekr.20100805165051.7170"><vh>@file unitTesting.txt</vh></v>
</v>
<v t="ekr.20060527105211"><vh>Debugging with Leo</vh>
<v t="ekr.20100805165051.7166"><vh>@file debuggers.txt</vh></v>
</v>
<v t="ekr.20080730212711.14"><vh>Using @shadow</vh>
<v t="ekr.20100805165051.7173"><vh>@file atShadow.txt</vh></v>
</v>
<v t="ekr.20120315101404.14224"><vh>The leoInspect Module</vh>
<v t="ekr.20120315101404.14225"><vh>@file leoInspect.txt</vh></v>
</v>
<v t="tbrown.20120821215353.22854"><vh>Abbreviations / templates</vh></v>
</v>
<v t="ekr.20101025080245.5798"><vh>Leo and Other Programs</vh>
<v t="ekr.20061025065357"><vh>Leo and Emacs</vh>
<v t="ekr.20100805165051.7168"><vh>@file emacs.txt</vh></v>
</v>
<v t="ekr.20080203101507"><vh>ILeo - the IPython bridge</vh>
<v t="ekr.20100805165051.7171"><vh>@file IpythonBridge.txt</vh></v>
</v>
<v t="ekr.20070317033759"><vh>Embedding Leo with the leoBridge module</vh>
<v t="ekr.20100805165051.7169"><vh>@file leoBridge.txt</vh></v>
</v>
<v t="TL.20080804095315.1"><vh>Using Vim with Leo</vh>
<v t="ekr.20100805165051.7172"><vh>@file vimBindings.txt</vh></v>
</v>
<v t="ekr.20060913164304"><vh>Using ZODB with Leo</vh>
<v t="ekr.20100805165051.7167"><vh>@file zodb.txt</vh></v>
</v>
</v>
<v t="ekr.20101025080245.5796"><vh>Reference</vh>
<v t="ekr.20050831184021.5"><vh>Leo's Reference</vh>
<v t="ekr.20100805001344.7253"><vh>@file directives.txt</vh></v>
</v>
<v t="EKR.20040524104904.161"><vh>Designing with Leo</vh>
<v t="ekr.20100805165051.7156"><vh>@file design.txt</vh></v>
</v>
<v t="EKR.20040524104904.245"><vh>History of Leo</vh>
<v t="ekr.20100805165051.7159"><vh>@file history.txt</vh></v>
</v>
<v t="EKR.20040524104904.261"><vh>Theory of Operation</vh>
<v t="ekr.20100805165051.7160"><vh>@file theory.txt</vh></v>
</v>
<v t="ekr.20050901084134"><vh>White papers</vh>
<v t="ekr.20100805165051.7161"><vh>@file whitepapers.txt</vh></v>
</v>
<v t="EKR.20040524104904.274"><vh>Appendices</vh>
<v t="ekr.20100805165051.7174"><vh>@file appendices.txt</vh></v>
</v>
<v t="ekr.20091111112709.6671"><vh>Glossary</vh>
<v t="ekr.20100805165051.7147"><vh>@file glossary.txt</vh></v>
</v>
</v>
<v t="ekr.20060620094033"><vh>What's New...</vh>
<v t="ekr.20100805165051.7175"><vh>@file whatsnew.txt</vh></v>
</v>
<v t="ekr.20111127144911.5545"><vh>Other pages</vh>
<v t="ekr.20111127144911.5546"><vh>@file download.txt</vh></v>
</v>
</v>
<v t="ekr.20090717084250.10702"><vh>Other docs</vh>
<v t="ekr.20100805165051.7176"><vh>@file other_docs.txt</vh></v>
</v>
<v t="ekr.20100821182153.4341"><vh>Slideshows</vh>
<v t="ekr.20101028110015.8271" descendentVnodeUnknownAttributes="7d710028550b302e312e312e382e342e3171017d7102580b0000007374725f6c656f5f706f7371035800000000710473550b302e312e312e382e332e3171057d7106580b0000007374725f6c656f5f706f737107680473550b302e312e312e382e352e3171087d7109580b0000007374725f6c656f5f706f73710a680473550b302e312e312e382e322e31710b7d710c580b0000007374725f6c656f5f706f73710d680473752e"><vh>@file slideshows.txt</vh></v>
</v>
<v t="ekr.20101026082911.5536"><vh>Release notes</vh>
<v t="ekr.20100805165051.7177"><vh>@file release_notes.txt</vh></v>
</v>
<v t="ekr.20120229094652.14053"><vh>Leo 4.10 Release notes</vh>
<v t="ekr.20120229094652.14757"><vh>Bugs</vh>
<v t="ekr.20120318075211.6163"><vh>Significant bugs</vh>
<v t="ekr.20120229094652.14758"><vh>Fixed ancient hanger in paste-retaining-clones</vh></v>
<v t="ekr.20120229094652.14780"><vh>Fixed serious atFile read bug</vh></v>
<v t="ekr.20120229094652.14934"><vh>Fixed bug: @button @key=x does not override x</vh></v>
<v t="ekr.20120229094652.14973"><vh>Fixed the wretched scrolling bug</vh></v>
<v t="ekr.20120318075211.6165"><vh>Fixed several node-selection bugs related to hoists &amp; chaptesr</vh>
<v t="ekr.20120313074006.14657"><vh>Fixed bug 823267: when a tab is closed focus may go to a tab other than the visible one</vh></v>
<v t="ekr.20120313074006.14771"><vh>Fixed bug 875327: Positioning outside of hoisted outline" usually causes problems</vh></v>
<v t="ekr.20120313074006.14663"><vh>Fixed bug 917814: Switching Log Pane tabs is done incompletely</vh></v>
<v t="ekr.20120313074006.14740"><vh>Fixed bug 875323: Hoist an @chapter node leaves a non-visible node selected</vh></v>
<v t="ekr.20120313074006.14765"><vh>Fixed bug 831658: @url doesn't leave Chapter</vh></v>
</v>
</v>
<v t="ekr.20120318075211.6164"><vh>Minor bugs</vh>
<v t="ekr.20120229094652.14759"><vh>Fixed bug in p.setAllAncestorAtFileNodesDirty</vh></v>
<v t="ekr.20120229094652.14761"><vh>Fixed double-click problem</vh></v>
<v t="ekr.20120229094652.14762"><vh>Fixed url focus issues</vh></v>
<v t="ekr.20120229094652.14763"><vh>Fixed p1 &gt; p2</vh></v>
<v t="ekr.20120229094652.14764"><vh>Fixed cacher problem</vh></v>
<v t="ekr.20120229094652.14765"><vh>Fixed encoding problem with @shadow</vh></v>
<v t="ekr.20120229094652.14767"><vh>Fixed a major DnD bug</vh></v>
<v t="ekr.20120229094652.14769"><vh>Regularized slashes in @edit/@file</vh></v>
<v t="ekr.20120229094652.14770"><vh>Made sure Leo's write code auto-detects file extension</vh></v>
<v t="ekr.20120229094652.14772"><vh>Fixed cycle-editor-focus bug</vh></v>
<v t="ekr.20120229094652.14775"><vh>Fixed Py3k crash in quicksearch.py</vh></v>
<v t="ekr.20120229094652.14779"><vh>Macro expansion now forces a full recolor</vh></v>
<v t="ekr.20120229094652.14781"><vh>Fixed unicode bugs with @shadow</vh></v>
<v t="ekr.20120229094652.14782"><vh>Recompute width of hard tabs depending on @tabwidth</vh></v>
<v t="ekr.20120229094652.14783"><vh>Applied patch for Bug 800311: Undo: Word granularity should recognize cursor movements</vh></v>
<v t="ekr.20120229094652.14784"><vh>Applied patch for Bug 800312: Collapsing node moves should be optional</vh></v>
<v t="ekr.20120229094652.14785"><vh>Fixed Bug 880975: Binding Meta and print-bindings</vh></v>
<v t="ekr.20120229094652.14786"><vh>Fixed bug 823601: cascade-windows fails</vh></v>
<v t="ekr.20120229094652.14817"><vh>Fixed html colorizing by fixing a bad bug in g.importFromPath</vh></v>
<v t="ekr.20120229094652.14818"><vh>Allow lower case keywords in colorizer</vh></v>
<v t="ekr.20120229094652.14820"><vh>Fixed rst3 pdf problem</vh></v>
<v t="ekr.20120229094652.14822"><vh>Removed traceback when cancelling a write</vh></v>
<v t="ekr.20120229094652.14823"><vh>Fixed removeBlankLinesTokens</vh></v>
<v t="ekr.20120229094652.14824"><vh>Fixed crasher in config.set</vh></v>
<v t="ekr.20120229094652.14825"><vh>Fixed resize-to-screen and minimize-all</vh></v>
<v t="ekr.20120229094652.14826"><vh>Fixed html import problems</vh></v>
<v t="ekr.20120229094652.14827"><vh>Removed extra newlines in g.trace</vh></v>
<v t="ekr.20120229094652.14828"><vh>Fixed crash in compareTokens</vh></v>
<v t="ekr.20120229094652.14829"><vh>Finished import work</vh></v>
<v t="ekr.20120229094652.14831"><vh>Fixed hard crash when deleting body editor 3 times</vh></v>
<v t="ekr.20120229094652.14832"><vh>Fixed add/delete html comments</vh></v>
<v t="ekr.20120229094652.14833"><vh>Fixed bug that prevented text bindings from working in log tabs</vh></v>
<v t="ekr.20120229094652.14834"><vh>Fixed cycle-all-focus command</vh></v>
<v t="ekr.20120229094652.14835"><vh>Fixed crashers involving calls to w.setSelectionRange</vh></v>
<v t="ekr.20120229094652.14836"><vh>Fixed hang in cycleAllFocus</vh></v>
<v t="ekr.20120229094652.14837"><vh>Fixed crasher in k.handleDefaultChar</vh></v>
<v t="ekr.20120229094652.14838"><vh>Fixed bug: Focus lost after opening or closing tab</vh></v>
<v t="ekr.20120229094652.14839"><vh>Ignore unbound Alt/Ctrl keys, especially Alt/Ctrl-N</vh></v>
<v t="ekr.20120229094652.14840"><vh>Fixed bug: ensure global @buttons work</vh></v>
<v t="ekr.20120229094652.14841"><vh>Fixed bug in p.moveToFirstChild</vh></v>
<v t="ekr.20120229094652.14842"><vh>Fixed bug 804960: Refreshing unlinks clones, just reopening connects them again</vh></v>
<v t="ekr.20120229094652.14848"><vh>Fixed crasher in reportMismatch</vh></v>
<v t="ekr.20120229094652.14850"><vh>Fix bug: Allow @all only in top-level @&lt;file&gt; nodes (test2.leo)</vh></v>
<v t="ekr.20120229094652.14855"><vh>Fixed erroneous "file changed" message</vh></v>
<v t="ekr.20120229094652.14856"><vh>Fixed bug 889175: Changing @auto paths overwrites files without warning</vh></v>
<v t="ekr.20120229094652.14891"><vh>Fixed bug in DynamicWindow.setGeometry</vh></v>
<v t="ekr.20120229094652.14892"><vh>Fixed bug 87933: Redefining a key binding breaks menu items with same binding</vh>
<v t="ekr.20120229094652.14893"><vh> Report</vh></v>
<v t="ekr.20120229094652.14894"><vh>Bug 815564: Plugin Menu-Keystroke binding can prevent plugin help display</vh></v>
<v t="ekr.20120229094652.14925"><vh>Updating dependent dicts</vh></v>
</v>
<v t="ekr.20120229094652.14941"><vh>Fixed Bug: @mark-for-unit-tests nodes</vh></v>
<v t="ekr.20120229094652.14942"><vh>The recent files commands now work</vh></v>
<v t="ekr.20120229094652.15012"><vh>Fixed bug: @int pagewidth now set c.page_width</vh></v>
<v t="ekr.20120229094652.15013"><vh>Fixed bug: goto end line handler is broken</vh></v>
<v t="ekr.20120229094652.14520"><vh>Removed unused color tags</vh></v>
<v t="ekr.20120229094652.15147"><vh>Fixed bug: End only goes to physical line</vh></v>
<v t="ekr.20120229094652.15146"><vh>Fixed bug 87933 with major key reorg</vh></v>
<v t="ekr.20120313074006.14648"><vh>Fixed Bug 930726 re expandNodeAndGoToFirstChild</vh></v>
<v t="ekr.20120313074006.14650"><vh>Fixed Bug 869429 (undo &amp; redo when deleting nodes from contextmenu)</vh></v>
<v t="ekr.20120313074006.14697"><vh>Fixed bug 924123: Some SyntaxError's thrown when compiling the whole source with Python 3</vh></v>
<v t="ekr.20120313074006.14702"><vh>Fixed bug 501636: Leo's import code should support non-ascii xml tags</vh></v>
<v t="ekr.20120313074006.14713"><vh>Fixed bug 799695: colorizer bug after move-lines-up into a docstring</vh></v>
<v t="ekr.20120313074006.14714"><vh>Fixed bug 824087: Alt+F4 is not the same as Alt+F, c</vh></v>
<v t="ekr.20120313074006.14715"><vh>Fixed bug 923301: Unicode error when executing 'rst3' command</vh></v>
<v t="ekr.20120313074006.14738"><vh>Fixed g.os_startfile on Linux</vh></v>
<v t="ekr.20120313074006.14800"><vh>Fixed Bug: multiple @language directive not colored correctly</vh></v>
<v t="ekr.20120313074006.14906"><vh>Fixed Bug: multiple @language directives mess up add-comments command</vh></v>
<v t="ekr.20120313074006.15120"><vh>Fixed bug 952365: Leo-Editor can't write a file created from the command line</vh></v>
<v t="ekr.20120313074006.15125"><vh>Fixed bug 951921: Opening myLeoSettings.leo can clutter the console unworthwhile messages</vh></v>
<v t="ekr.20120328102352.5897"><vh>Fixed crasher in flattenOutline</vh></v>
<v t="ekr.20120328102352.5899"><vh>Fix viewrendered crash</vh></v>
<v t="ekr.20120328102352.5900"><vh>Fixed most scrolling problem with multiple editors</vh></v>
<v t="ekr.20120328102352.5936"><vh>Ensure selected @test node is run</vh></v>
<v t="ekr.20120328102352.5938"><vh>fixed problem with file:/// url's on Windows</vh></v>
</v>
<v t="ekr.20120318075211.6166"><vh>Unfixed bugs</vh>
<v t="ekr.20120313074006.14698"><vh>Failed to fix bug 844953: copy-clone-pasted node appears in other tab</vh></v>
</v>
</v>
<v t="ekr.20120229094652.14518"><vh>Code improvements</vh>
<v t="ekr.20120229094652.15142"><vh>Leo's new classes</vh>
<v t="ekr.20120318075211.6168"><vh>LoadManager</vh></v>
<v t="ekr.20120318075211.6169"><vh>ModeController &amp; ModeInfo (not used yet)</vh></v>
<v t="ekr.20120318075211.6170"><vh>LogManager (not used yet)</vh></v>
<v t="ekr.20120318075211.6172"><vh>KeyStroke &amp; ShortcutInfo</vh></v>
<v t="ekr.20120318075211.6173"><vh>EditCommandsManager</vh></v>
</v>
<v t="ekr.20120318075211.6174"><vh>Most files now import just leo.core.leoGlobals</vh></v>
<v t="ekr.20120318075211.6175"><vh>Global switches are now all in leoGlobals.py</vh></v>
<v t="ekr.20120229094652.15138"><vh>version.py now uses bzr_version.py</vh></v>
<v t="ekr.20120229094652.15176"><vh>Minor</vh>
<v t="ekr.20120229094652.14522"><vh>Eliminated the low-level interface</vh></v>
<v t="ekr.20120229094652.14523"><vh>Removed unused cruft from high-level interface</vh></v>
<v t="ekr.20120229094652.14525"><vh>Unified the high-level interface</vh></v>
<v t="ekr.20120229094652.14526"><vh>Create properties for logCtrl &amp; bodyCtrl</vh></v>
<v t="ekr.20120229094652.14527"><vh>Added eventFilters to top-level frames</vh></v>
<v t="ekr.20120229094652.14528"><vh>Added log.orderedTabNames</vh></v>
<v t="ekr.20120229094652.14532"><vh>Created the TestManager class</vh></v>
<v t="ekr.20120229094652.14533"><vh>Created the LoadManager class (docs)</vh></v>
<v t="ekr.20120229094652.14534"><vh>Removed c argument from g.app.config getters</vh></v>
<v t="ekr.20120229094652.14535"><vh>Delay "reading settings" message until after signon</vh></v>
<v t="ekr.20120229094652.14538"><vh>Use at.readOneAtAutoNode instead of ic.readOneAtAutoNode</vh></v>
<v t="ekr.20120229094652.14578"><vh>Added p.positionAfterDeletedTree</vh></v>
<v t="ekr.20120229094652.14577"><vh>Removed Leo's old syntax coloring code</vh></v>
<v t="ekr.20120229094652.14583"><vh>Rewrote shell-command commands</vh></v>
<v t="ekr.20120229094652.14608"><vh>Added g.app.isExternalUnitTest</vh></v>
<v t="ekr.20120229094652.14611"><vh>Added c.config.set</vh></v>
<v t="ekr.20120229094652.14595"><vh>help-for-command now uses g.getDocStringFromFunction</vh></v>
</v>
<v t="ekr.20120229094652.15157"><vh>Investigations</vh>
<v t="ekr.20120229094652.15158"><vh>Investigated unicode problems with print</vh></v>
<v t="ekr.20120229094652.15159"><vh>Investigated autocomplete popup bug</vh></v>
</v>
</v>
<v t="ekr.20120229094652.15162"><vh>Major new features</vh>
<v t="ekr.20120318075211.6167"><vh>Improved handling of URL's</vh></v>
<v t="ekr.20120229094652.14593"><vh>Tab completion shows all @command/@button commands</vh></v>
<v t="ekr.20120229094652.15093"><vh>Weightless unit testsing</vh></v>
<v t="ekr.20120313134250.14232"><vh>Leo's File:Open With command now works with Qt</vh></v>
<v t="ekr.20120229094652.14585"><vh>Added quick edit/save mode</vh></v>
<v t="ekr.20120229094652.15153"><vh>Detached windows</vh></v>
<v t="ekr.20120229094652.15135"><vh>The leoInspect module</vh></v>
<v t="ekr.20120313074006.14640"><vh>Instant abbreviations (~a)</vh></v>
</v>
<v t="ekr.20120229094652.15163"><vh>Minor new features</vh>
<v t="ekr.20120328102352.5946"><vh>Improved Leo's home page</vh></v>
<v t="ekr.20120229094652.14787"><vh>Generalized stylesheet handling</vh></v>
<v t="ekr.20120229094652.15151"><vh>Leo now raises a dialog on @ignore @&lt;file&gt; nodes</vh></v>
<v t="ekr.20120229094652.14596"><vh>@ignore now prevents local @button/@command node definitions</vh></v>
<v t="ekr.20120229094652.14592"><vh>Added support for tags in @button nodes</vh></v>
<v t="ekr.20120229094652.14610"><vh>bridgeController.initLeo now kills events if plugins not loaded</vh></v>
<v t="ekr.20120229094652.14607"><vh>Call unselect1 hook only once</vh></v>
<v t="ekr.20120229094652.14613"><vh>Improved scannerUnitTest</vh></v>
<v t="ekr.20120314095341.14216"><vh>Leo supports @ignore when scanning for @command and @button nodes.</vh></v>
<v t="ekr.20120229094652.14777"><vh>Support @ignore when installing @command/@button nodes</vh></v>
<v t="ekr.20120229094652.14541"><vh>set g.app.execute_script during script execution</vh></v>
<v t="ekr.20120229094652.14600"><vh>Support single-line nodes like &lt;node/&gt; xml import code</vh></v>
<v t="ekr.20120229094652.14576"><vh>The Find tab now scrolls</vh></v>
<v t="ekr.20120229094652.14621"><vh>Warn when importing/reading/writing @ignored nodes</vh></v>
<v t="ekr.20120229094652.14849"><vh>Disabled section-reference handling in @auto files</vh></v>
<v t="ekr.20120313074006.14772"><vh>Dragging a binary file to Leo creates an @url node</vh></v>
<v t="ekr.20120229094652.14612"><vh>Alt-left-arrow collapses all children when selecting the parent</vh></v>
<v t="ekr.20120313074006.14643"><vh>Reinstated warnings for conflicting definitions</vh></v>
<v t="ekr.20120229094652.14589"><vh>Searches from Leo's web pages now work</vh></v>
<v t="ekr.20120229094652.14601"><vh>Leo's home page now shows the latest postings from leo-editor.</vh></v>
<v t="ekr.20120328102352.5942"><vh>Alt-Home &amp; Alt-End collapse all possible nodes</vh></v>
</v>
<v t="ekr.20120229094652.15164"><vh>New &amp; improved commands</vh>
<v t="ekr.20120229094652.14590"><vh>Added @button split-defs</vh></v>
<v t="ekr.20120229094652.14544"><vh>Added beautify-c command</vh></v>
<v t="ekr.20120229094652.14545"><vh>Added c-to-python command</vh></v>
<v t="ekr.20120229094652.14625"><vh>Added clone-find-all-flattened command</vh></v>
<v t="ekr.20120229094652.15090"><vh>Added clone/move/delete-marked-nodes commands</vh></v>
<v t="ekr.20120229094652.14602"><vh>Added run-marked-unit-tests-locally/externally</vh></v>
<v t="ekr.20120229094652.14542"><vh>Added select-to-matching-bracket command</vh></v>
<v t="ekr.20120229094652.14616"><vh>Improved add/delete-comments</vh></v>
<v t="ekr.20120229094652.14581"><vh>Improved open command</vh></v>
<v t="ekr.20120229094652.15169"><vh>Improved page-up &amp; page-down commands</vh></v>
<v t="ekr.20120229094652.14622"><vh>Improved presentation of autocompletion list</vh></v>
<v t="ekr.20120229094652.14618"><vh>Improved print-bindings &amp; print-commands</vh></v>
<v t="ekr.20120313134250.14294"><vh>Improved rst3 command</vh></v>
<v t="ekr.20120229094652.14599"><vh>Improved word jumps/deletes</vh></v>
</v>
<v t="ekr.20120229094652.15165"><vh>Plugins</vh>
<v t="ekr.20120229094652.15091"><vh>Improved quicksearch plugin</vh></v>
<v t="ekr.20120313074006.16135"><vh>New bigdash plugin</vh></v>
<v t="ekr.20120229094652.14776"><vh>Removed scrolledmessage plugin</vh></v>
<v t="ekr.20120313074006.14655"><vh>vim and xemacs plugins now work smoothly with contextmenu plugin.</vh></v>
<v t="ekr.20120229094652.14540"><vh>Supported auto-hide in viewrendered plugin</vh></v>
</v>
<v t="ekr.20120229094652.15166"><vh>Scripts</vh>
<v t="ekr.20120229094652.14582"><vh>Improved create @auto nodes script</vh></v>
<v t="ekr.20120229094652.14567"><vh>Added import-org-mode script</vh></v>
<v t="ekr.20120229094652.15131"><vh>Code for displaying a function call hierarchy in Leo</vh>
<v t="ekr.20120229094652.15132"><vh>call tree</vh>
<v t="ekr.20120229094652.15133"><vh>displayCalltree</vh></v>
<v t="ekr.20120229094652.15134"><vh>trace session</vh></v>
</v>
</v>
<v t="ekr.20120229094652.14543"><vh>Improved recursive import script</vh></v>
<v t="ekr.20120229094652.15149"><vh>Replacing Qt stylesheets on the fly</vh></v>
<v t="ekr.20120229094652.15089"><vh>Terry added bookmark scripts</vh></v>
<v t="ekr.20120229173025.20633"><vh>Document Terry's magic refactor button</vh>
<v t="ekr.20120229173025.20635"><vh>@button fac</vh></v>
</v>
<v t="ekr.20120229094652.15139"><vh>Changed calling signatures of g.openWithFileName and g.app.newCommander</vh></v>
<v t="ekr.20120229094652.19777"><vh>The open-with event now has a new format</vh></v>
</v>
<v t="ekr.20120229094652.15168"><vh>Settings</vh>
<v t="ekr.20120229094652.14615"><vh>Added @bool indent_added_comments setting</vh></v>
<v t="ekr.20120229094652.14606"><vh>Added @bool use_body_focus_border</vh></v>
<v t="ekr.20120229094652.14598"><vh>Added border around selected pane</vh></v>
<v t="ekr.20120229094652.14584"><vh>Added shell commands to Cmds menu</vh></v>
<v t="ekr.20120229094652.14619"><vh>Added show-decoration-selected: 1 to stylesheet</vh></v>
<v t="ekr.20120229094652.14620"><vh>Added stylesheets for Log &amp; Find tabs</vh></v>
<v t="ekr.20120229094652.15143"><vh>Eliminated the -c option</vh></v>
<v t="ekr.20120318075211.7524"><vh>New default settings for run unit tests commands</vh></v>
<v t="ekr.20120229094652.15140"><vh>New format for @openwith settings nodes</vh></v>
<v t="ekr.20120229094652.15144"><vh>New search order for leoSettings.leo &amp; myLeoSettings.leo</vh></v>
</v>
</v>
<v t="ekr.20130404104418.5951"><vh>*Everything* an implementor must know</vh></v>
<v t="ekr.20050903074833"><vh>Event handlers</vh>
<v t="ekr.20050903074833.1"><vh>@rst-no-head Summary of event handlers</vh></v>
<v t="ekr.20071021102946"><vh>Enabling idle time event handlers</vh></v>
</v>
<v t="ekr.20130411023340.5976"><vh>Tutorial scripts</vh>
<v t="ekr.20130413153344.14589"><vh>What makes Leo special: shorter</vh></v>
<v t="ekr.20130411135403.5972"><vh>What makes Leo special</vh></v>
<v t="ekr.20130411023340.5978"><vh>Scripting</vh></v>
<v t="ekr.20130411023340.5979"><vh>External files</vh></v>
<v t="ekr.20130411023340.5980"><vh>The screenshots plugin</vh></v>
<v t="ekr.20130411023340.5981"><vh>The contextmenu plugin</vh></v>
<v t="ekr.20130411023340.5982"><vh>The bookmarks plugin</vh></v>
<v t="ekr.20130411023340.5983"><vh>The todo plugin</vh></v>
</v>
<v t="ekr.20130526065545.14924"><vh>To be documented (do not delete!!)</vh>
<v t="ekr.20130803073926.17119"><vh>Wish list</vh>
<v t="ekr.20130526065545.17507"><vh>Wish list: xiki window for leo</vh>
<v t="ekr.20130526065545.17508"><vh>Re: Wish list: xiki window for leo</vh></v>
<v t="ekr.20130526065545.17509"><vh>Re: Wish list: xiki window for leo</vh></v>
<v t="ekr.20130526065545.17510"><vh>Re: Wish list: xiki window for leo</vh></v>
<v t="ekr.20130526065545.17512"><vh>Re: Wish list: xiki window for leo</vh></v>
<v t="ekr.20130526065545.17513"><vh>Re: Wish list: xiki window for leo</vh></v>
</v>
<v t="ekr.20130526065545.17564"><vh>Export Full Content</vh>
<v t="ekr.20130526065545.17561"><vh>Re: Export Full Content</vh></v>
<v t="ekr.20130526065545.17562"><vh>Re: Export Full Content</vh></v>
<v t="ekr.20130526065545.17563"><vh>Re: Export Full Content</vh></v>
<v t="ekr.20130526065545.17565"><vh>Re: Export Full Content</vh></v>
<v t="ekr.20130526065545.17566"><vh>Re: Export Full Content</vh></v>
</v>
<v t="ekr.20130526065545.17568"><vh>Automated playback</vh>
<v t="ekr.20130526065545.17567"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130526065545.17569"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130526065545.17570"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130526065545.17571"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130526065545.17573"><vh>Re: Automated playback</vh></v>
<v t="ekr.20130526065545.17574"><vh>Re: Automated playback</vh></v>
</v>
<v t="ekr.20130526065545.17491"><vh>Idea/needed: system command queue</vh></v>
<v t="ekr.20130526065545.17600"><vh>Parameterized template nodes</vh>
<v t="ekr.20130526065545.17596"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130526065545.17597"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130526065545.17599"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130526065545.17601"><vh>Re: Parameterized template nodes</vh></v>
<v t="ekr.20130526065545.17602"><vh>Re: Parameterized template nodes</vh></v>
</v>
<v t="ekr.20130526065545.17603"><vh>Obstacles to using Leo, from a potential new user.</vh>
<v t="ekr.20130526065545.17604"><vh>Re: Obstacles to using Leo, from a potential new user.</vh></v>
</v>
<v t="ekr.20130526065545.17555"><vh>Background Images in body pane?</vh>
<v t="ekr.20130526065545.17556"><vh>Re: Background Images in body pane?</vh></v>
<v t="ekr.20130526065545.17557"><vh>Re: Background Images in body pane?</vh></v>
<v t="ekr.20130526065545.17558"><vh>Re: Background Images in body pane?</vh></v>
</v>
</v>
<v t="ekr.20130803073926.17116"><vh>User comments</vh>
<v t="ekr.20130526065545.14932"><vh>Leo as PIM and authoring tool</vh></v>
<v t="ekr.20130526065545.17480"><vh>Blog on pelican and GH-pages: first light ;-)</vh>
<v t="ekr.20130526065545.17466"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17467"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17468"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17469"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17470"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17471"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17475"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17476"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17477"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17478"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17479"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17481"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17482"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17483"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17484"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17485"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
<v t="ekr.20130526065545.17486"><vh>Re: Blog on pelican and GH-pages: first light ;-)</vh></v>
</v>
<v t="ekr.20130526065545.17537"><vh>Blog post about how Leo can improve organization of code bases</vh>
<v t="ekr.20130526065545.17535"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130526065545.17536"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130526065545.17538"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
<v t="ekr.20130526065545.17539"><vh>Re: Blog post about how Leo can improve organization of code bases</vh></v>
</v>
<v t="ekr.20130526065545.17543"><vh>why Leo</vh>
<v t="ekr.20130526065545.17534"><vh>Fw: why Leo</vh>
<v t="ekr.20130526065545.17533"><vh>Re: Fw: why Leo</vh></v>
<v t="ekr.20130526065545.17540"><vh>Re: why Leo</vh></v>
<v t="ekr.20130526065545.17541"><vh>Re: why Leo</vh></v>
</v>
</v>
</v>
<v t="ekr.20130803073926.17117"><vh>Help</vh>
<v t="ekr.20130526065545.17530"><vh>How to make body text insertion at cursor permanent?</vh>
<v t="ekr.20130526065545.17527"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130526065545.17528"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130526065545.17529"><vh>Re: How to make body text insertion at cursor permanent?</vh></v>
<v t="ekr.20130526065545.17531"><vh>Re: the workflow of write leo scripts?</vh></v>
</v>
<v t="ekr.20130526065545.17532"><vh>the workflow of write leo scripts?</vh></v>
</v>
<v t="ekr.20130803073926.17125"><vh>To document</vh>
<v t="ekr.20130803125244.17080"><vh>* Document Windows associations</vh></v>
<v t="ekr.20130526065545.17439"><vh>Create Pane For matplotlib chart</vh>
<v t="ekr.20130526065545.17437"><vh>Re: Create Pane For matplotlib chart</vh></v>
<v t="ekr.20130526065545.17438"><vh>Re: Create Pane For matplotlib chart</vh></v>
<v t="ekr.20130526065545.17440"><vh>Re: Create Pane For matplotlib chart</vh></v>
<v t="ekr.20130526065545.17441"><vh>Re: Create Pane For matplotlib chart</vh></v>
</v>
<v t="ekr.20130526065545.17516"><vh>Terry, how do you create the buttons with dropdown menus?</vh>
<v t="ekr.20130526065545.17518"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17519"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17520"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17521"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17522"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17523"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17524"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17525"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
<v t="ekr.20130526065545.17526" a="M"><vh>Re: Terry, how do you create the buttons with dropdown menus?</vh></v>
</v>
<v t="ekr.20130803073926.17114"><vh>Plugins</vh>
<v t="ekr.20130526065545.14926"><vh>bookmarks.py</vh></v>
<v t="ekr.20130526065545.17435"><vh>screen_capture.py</vh>
<v t="ekr.20130526065545.17429"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17430"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17431"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17432"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17433"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17434"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
<v t="ekr.20130526065545.17436"><vh>Re: ANN: screen_capture plugin pushed</vh></v>
</v>
<v t="ekr.20130803073926.17123"><vh>valuespace.py</vh>
<v t="ekr.20130526065545.17506"><vh>Quick valuespace.py update: it now support...</vh></v>
<v t="ekr.20130526065545.17618"><vh>Blog post about valuespace up on leo-editor.github.io</vh>
<v t="ekr.20130526065545.17614"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130526065545.17615"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130526065545.17616"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
<v t="ekr.20130526065545.17617"><vh>Re: Blog post about valuespace up on leo-editor.github.io</vh></v>
</v>
<v t="ekr.20130803125244.17094"><vh>Document valuespace from Ville's blog</vh></v>
</v>
<v t="ekr.20130526065545.17620"><vh>printing.py</vh>
<v t="ekr.20130526065545.17621"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17622"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17623"><vh>Re: [ANN] New plugin - printing.py</vh></v>
<v t="ekr.20130526065545.17624"><vh>Re: [ANN] New plugin - printing.py</vh></v>
</v>
</v>
<v t="ekr.20130803073926.17115"><vh>Scripts</vh>
<v t="ekr.20130526065545.14929"><vh>Rev 5378: cleanup-imported-nodes script in scripts.leo &amp; an Aha</vh></v>
<v t="ekr.20130526065545.14930"><vh>Revised recursive import script</vh></v>
<v t="ekr.20130526065545.17546"><vh>Tool for diffing Leo files</vh>
<v t="ekr.20130526065545.17545"><vh>Re: Tool for diffing Leo files</vh></v>
</v>
<v t="ekr.20130526065545.17487"><vh>Indexing files for full text search</vh>
<v t="ekr.20130526065545.17488"><vh>Re: Indexing files for full text search</vh></v>
<v t="ekr.20130526065545.17489"><vh>Re: Idea/needed: system command queue</vh></v>
<v t="ekr.20130526065545.17490"><vh>Re: Idea/needed: system command queue</vh></v>
</v>
<v t="ekr.20130803125244.17095"><vh>position script (put in scripting chapter?)</vh></v>
</v>
<v t="ekr.20130803073926.17113"><vh>Features</vh>
<v t="ekr.20130526065545.14925"><vh>Full text searches</vh></v>
<v t="ekr.20130526065545.17428"><vh>Eureka! @testsetup</vh>
<v t="ekr.20130526065545.17427"><vh>Re: Eureka! @testsetup</vh></v>
</v>
<v t="ekr.20130526065545.17445"><vh>Major additions to abbreviations</vh>
<v t="ekr.20130526065545.17442"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17443"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17444"><vh>Re: Major additions to abbreviations</vh></v>
<v t="ekr.20130526065545.17446"><vh>Re: Major additions to abbreviations</vh></v>
</v>
<v t="ekr.20130526065545.17459"><vh>ANN: dark theme pushed to trunk</vh>
<v t="ekr.20130526065545.17451"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17452"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17453"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17454"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17455"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17456"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17457"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17458"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17460"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17461"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17462"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17463"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17464"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
<v t="ekr.20130526065545.17465"><vh>Re: ANN: dark theme pushed to trunk</vh></v>
</v>
<v t="ekr.20130526065545.17495"><vh>ANN: zoom-in/out commands</vh>
<v t="ekr.20130526065545.17494"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17496"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17497"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17498"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17499"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17500"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17501"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17502"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17503"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17504"><vh>Re: ANN: zoom-in/out commands</vh></v>
<v t="ekr.20130526065545.17505"><vh>body text zooming pushed</vh></v>
</v>
<v t="ekr.20130526065545.17515"><vh>ANN: Sublime Text 2 like dark theme</vh></v>
<v t="ekr.20130526065545.17514"><vh>New theme in leoSettings.leo: Sublime Text...</vh></v>
<v t="ekr.20130526065545.17576"><vh>Templates with macro expansions</vh>
<v t="ekr.20130526065545.17575"><vh>Re: Templates with macro expansions</vh></v>
<v t="ekr.20130526065545.17577"><vh>Re: Templates with macro expansions</vh></v>
</v>
<v t="ekr.20130526065545.17589"><vh>go-anywhere a'la sublime text: first light"</vh>
<v t="ekr.20130526065545.17590"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
<v t="ekr.20130526065545.17592"><vh>"Subject: Re: go-anywhere a'la sublime text: first light"</vh></v>
</v>
<v t="ekr.20130526065545.17594"><vh>@wrap now suppresses horizontal scrolling</vh>
<v t="ekr.20130526065545.17593"><vh>Re: @wrap now suppresses horizontal scrolling</vh></v>
</v>
<v t="ekr.20130526065545.17634"><vh>persistent state with json as a leo abbreviation</vh>
<v t="ekr.20130526065545.17633"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17635"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17636"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17637"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
<v t="ekr.20130526065545.17638"><vh>Re: persistent state with json as a leo abbreviation</vh></v>
</v>
<v t="ekr.20130526065545.14927"><vh>outline-otl Leo as a web app</vh>
<v t="ekr.20130526065545.14928"><vh>NEW: LeoReader, as web app</vh></v>
</v>
<v t="ekr.20130526065545.17550"><vh>A beautiful pattern for composing large strings</vh>
<v t="ekr.20130526065545.17547"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17548"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17549"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17551"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17552"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17553"><vh>Re: A beautiful pattern for composing large strings</vh></v>
<v t="ekr.20130526065545.17554"><vh>Re: A beautiful pattern for composing large strings</vh></v>
</v>
</v>
<v t="ekr.20130803073926.17122"><vh>Tutorials</vh>
<v t="ekr.20130526065545.17595"><vh>Draft: unit-testing tutorial</vh></v>
<v t="ekr.20130526065545.17578"><vh>All about clone conflicts</vh>
<v t="ekr.20130526065545.17579"><vh>Re: All about clone conflicts</vh></v>
</v>
<v t="ekr.20130803125244.17092"><vh>Draft: Position tutorial</vh>
<v t="ekr.20130803125244.17093"><vh>other info</vh></v>
</v>
</v>
<v t="ekr.20130526065545.17629"><vh>How to call functions from LeoPyRef.Leo</vh>
<v t="ekr.20130526065545.17625"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130526065545.17626"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130526065545.17627"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130526065545.17628"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
<v t="ekr.20130526065545.17630"><vh>Re: How to call functions from LeoPyRef.Leo</vh></v>
</v>
<v t="ekr.20130526065545.17580"><vh>How to use leo to make mathematical notes?</vh></v>
</v>
</v>
<v t="ekr.20130803073926.17124"><vh>Doc bugs</vh>
<v t="ekr.20130526065545.14931"><vh>Suggestion for docs: Find and replace, missing a step\</vh></v>
<v t="ekr.20130526065545.17607"><vh>Outdated info in "rst3"</vh>
<v t="ekr.20130526065545.17606"><vh>Re: Outdated info in "rst3"</vh></v>
<v t="ekr.20130526065545.17608"><vh>Re: Outdated info in "rst3"</vh></v>
</v>
<v t="ekr.20130526065545.17559"><vh>Really @edit can expand nodes?</vh>
<v t="ekr.20130526065545.17560"><vh>Re: Really @edit can expand nodes?</vh></v>
</v>
<v t="ekr.20130526065545.17610"><vh>Associate .Leo files to open with Leo when double click, and some more noob confussion</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040524104904.161"></t>
<t tx="EKR.20040524104904.211"></t>
<t tx="EKR.20040524104904.245"></t>
<t tx="EKR.20040524104904.261"></t>
<t tx="EKR.20040524104904.274"></t>
<t tx="EKR.20040524104904.99"></t>
<t tx="TL.20080804095315.1"></t>
<t tx="ekr.20040414161647">@pagewidth 70
@language rest

These are the sources for Leo's users guide.

They contain sphinx markup. See::
    
    http://sphinx.pocoo.org/
    http://docutils.sourceforge.net/docs/user/rst/quickstart.html
    
To generate these docs, see the next node: "Generating the Users Guide"
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20050407144342">



</t>
<t tx="ekr.20050407144342.1"></t>
<t tx="ekr.20050407144342.2"></t>
<t tx="ekr.20050407144342.3"></t>
<t tx="ekr.20050407144417"></t>
<t tx="ekr.20050812123002"></t>
<t tx="ekr.20050812123002.1"></t>
<t tx="ekr.20050812123002.2">Deletes p.v.rst2_http_attributename from all nodes after writing.

Deletes p.v.unknownAttributes if it then becomes empty.
</t>
<t tx="ekr.20050812123002.3"></t>
<t tx="ekr.20050812123002.4">@nocolor

If False, add_node_marker and http_support_main  do nothing.  Otherwise add_node_marker does the following:

1. add_node_marker writes a string using generate_node_marker.

Generates 'http-node-marker-'+str(number), where number is config.node_counter
(incremented each time add_node_marker is called.

2. Enables the following code in :
@color

    if config.tag == 'open2':
        http_map = self.http_map
    else:
        http_map = {}
        config.anchormap = {}
        # maps v nodes to markers.
        config.node_counter = 0
    # [snip] code to write the tree
    if config.rst2_http_server_support:
        self.http_map = http_map
</t>
<t tx="ekr.20050812123002.5"></t>
<t tx="ekr.20050812123002.6">True: call body_filter to massage text.

Removes @ignore, @nocolor, @wrap directives.
</t>
<t tx="ekr.20050812123002.7">Used differently.  See rst2_pure_document.
</t>
<t tx="ekr.20050812123002.8"></t>
<t tx="ekr.20050831184021.1"></t>
<t tx="ekr.20050831184021.3"></t>
<t tx="ekr.20050831184021.4"></t>
<t tx="ekr.20050831184021.5"></t>
<t tx="ekr.20050831195331.1"></t>
<t tx="ekr.20050831195331.4"></t>
<t tx="ekr.20050831195449">@language rest

For instruction about installing Leo see:
http://leoeditor.com/installing.html

For everything a beginner needs to know about Leo see:
http://leoeditor.com/intro.html

For help, please ask questions at:
http://groups.google.com/group/leo-editor</t>
<t tx="ekr.20050901084134"></t>
<t tx="ekr.20050903074833">Plugins and other scripts can register event handlers (also known as hooks) with code such as::

    leoPlugins.registerHandler("after-create-leo-frame",onCreate)
    leoPlugins.registerHandler("idle", on_idle) 
    leoPlugins.registerHandler(("start2","open2","command2"), create_open_with_menu) 

As shown above, a plugin may register one or more event handlers with a single call to
leoPlugins.registerHandler. Once a hook is registered, Leo will call the
registered function' at the named **hook time**. For example::

    leoPlugins.registerHandler("idle", on_idle)

causes Leo to call on_idle at "idle" time.

Event handlers must have the following signature::

    def myHook (tag, keywords):
        whatever

-   tag is the name of the hook (a string).
-   keywords is a Python dictionary containing additional information.
    The following section describes the contents of the keywords dictionary in detail.

**Important**: hooks should get the proper commander this way::

    c = keywords.get('c')
</t>
<t tx="ekr.20050903074833.1">The following table tells about each event handler: its name, when it is called,
and the additional arguments passed to the hook in the keywords dictionary.
For some kind of hooks, Leo will skip its own normal processing if the hook
returns anything *other* than None. The table indicates such hooks with 'yes' in
the 'Stop?' column.

**Important**: Ever since Leo 4.2, the v, old_v and new_v keys in
the keyword dictionary contain *positions*, not vnodes. These keys are
deprecated. The new_c key is also deprecated. Plugins should use the c key instead.

============================= ======== =================================== =============================
Event name (tag argument)     Stop?    When called                         Keys in keywords dict
============================= ======== =================================== =============================
'after-auto'                           after each @auto file loaded        c,p (note 13)
'after-create-leo-frame'               after creating any frame            c
'after-redraw-outline'                 end of tree.redraw                  c (note 6)
'before-create-leo-frame'              before frame.finishCreate           c
'bodyclick1'                   yes     before normal click in body         c,p,v,event
'bodyclick2'                           after normal click in body          c,p,v,event
'bodydclick1'                  yes     before double click in body         c,p,v,event
'bodydclick2'                          after  double click in body         c,p,v,event
'bodykey1'                     yes     before body keystrokes              c,p,v,ch,oldSel,undoType
'bodykey2'                             after  body keystrokes              c,p,v,ch,oldSel,undoType
'bodyrclick1'                  yes     before right click in body          c,p,v,event
'bodyrclick2'                          after  right click in body          c,p,v,event
'boxclick1'                    yes     before click in +- box              c,p,v,event
'boxclick2'                            after  click in +- box              c,p,v,event
'clear-all-marks'                      after clear-all-marks command       c,p,v
'clear-mark'                           when mark is set                    c,p,v
'close-frame'                          in app.closeLeoWindow               c
'color-optional-markup'        yes *   (note 7)                            colorer,p,v,s,i,j,colortag (note 7)
'command1'                     yes     before each command                 c,p,v,label (note 2)
'command2'                             after  each command                 c,p,v,label (note 2)
'create-optional-menus'                (note 8)                            c (note 8)
'create-popup-menu-items'              in tree.OnPopup                     c,p,v,event (new)
'draw-outline-box'             yes     when drawing +- box                 tree,p,v,x,y
'draw-outline-icon'            yes     when drawing icon                   tree,p,v,x,y
'draw-outline-node'            yes     when drawing node                   tree,p,v,x,y
'draw-outline-text-box'        yes     when drawing headline               tree,p,v,x,y
'drag1'                        yes     before start of drag                c,p,v,event
'drag2'                                after  start of drag                c,p,v,event
'dragging1'                    yes     before continuing to drag           c,p,v,event
'dragging2'                            after  continuing to drag           c,p,v,event
'enable-popup-menu-items'              in tree.OnPopup                     c,p,v,event
'end1'                                 start of app.quit()                 None
'enddrag1'                     yes     before end of drag                  c,p,v,event
'enddrag2'                             after  end of drag                  c,p,v,event
'headclick1'                   yes     before normal click in headline     c,p,v,event
'headclick2'                           after  normal click in headline     c,p,v,event
'headrclick1'                  yes     before right click in headline      c,p,v,event
'headrclick2'                          after  right click in headline      c,p,v,event
'headkey1'                     yes     before headline keystrokes          c,p,v,ch (note 12)
'headkey2'                             after  headline keystrokes          c,p,v,ch (note 12)
'hoist-changed'                        whenever the hoist stack changes    c
'hypercclick1'                 yes     before control click in hyperlink   c,p,v,event
'hypercclick2'                         after  control click in hyperlink   c,p,v,event
'hyperenter1'                  yes     before entering hyperlink           c,p,v,event
'hyperenter2'                          after  entering hyperlink           c,p,v,event
'hyperleave1'                  yes     before leaving  hyperlink           c,p,v,event
'hyperleave2'                          after  leaving  hyperlink           c,p,v,event
'iconclick1'                   yes     before single click in icon box     c,p,v,event
'iconclick2'                           after  single click in icon box     c,p,v,event
'iconrclick1'                  yes     before right click in icon box      c,p,v,event
'iconrclick2'                          after  right click in icon box      c,p,v,event
'icondclick1'                  yes     before double click in icon box     c,p,v,event
'icondclick2'                          after  double click in icon box     c,p,v,event
'idle'                                 periodically (at idle time)         c
'init-color-markup'                    (note 7)                            colorer,p,v (note 7)
'menu1'                        yes     before creating menus               c,p,v (note 3)
'menu2'                        yes     during creating menus               c,p,v (note 3)
'menu-update'                  yes     before updating menus               c,p,v
'new'                                  start of New command                c,old_c,new_c (note 9)
'open1'                        yes     before opening any file             c,old_c,new_c,fileName (note 4)
'open2'                                after  opening any file             c,old_c,new_c,fileName (note 4)
'openwith1'                    yes     before Open With command            c,p,v,d (note 14)
'openwith2'                            after  Open With command            c,p,v,(note 14)
'recentfiles1'                 yes     before Recent Files command         c,p,v,fileName,closeFlag
'recentfiles2'                         after  Recent Files command         c,p,v,fileName,closeFlag
'redraw-entire-outline'        yes     start of tree.redraw                c (note 6)
'save1'                        yes     before any Save command             c,p,v,fileName
'save2'                                after  any Save command             c,p,v,fileName
'scan-directives'                      in scanDirectives                   c,p,v,s,old_dict,dict,pluginsList (note 10)
'select1'                      yes     before selecting a position         c,new_p,old_p,new_v,new_v
'select2'                              after  selecting a position         c,new_p,old_p,new_v,old_v
'select3'                              after  selecting a position         c,new_p,old_p,new_v,old_v
'set-mark'                             when a mark is set                  c,p,v
'show-popup-menu'                      in tree.OnPopup                     c,p,v,event
'start1'                               after app.finishCreate()            None
'start2'                               after opening first Leo window      c,p,v,fileName
'unselect1'                    yes     before unselecting a vnode          c,new_p,old_p,new_v,old_v
'unselect2'                            after  unselecting a vnode          c,new_p,old_p,old_v,old_v
'\@url1'                        yes     before double-click @url node       c,p,v,url (note 5)
'\@url2'                                after  double-click @url node       c,p,v(note 5)
============================= ======== =================================== =============================

**Notes**:

1.  'activate' and 'deactivate' hooks have been removed because they do not work as expected.

2.  'commands' hooks: The label entry in the keywords dict contains the
    'canonicalized' form of the command, that is, the lowercase name of the command
    with all non-alphabetic characters removed.
    Commands hooks now set the label for undo and redo commands 'undo' and 'redo'
    rather than 'cantundo' and 'cantredo'.

3.  'menu1' hook: Setting g.app.realMenuNameDict in this hook is an easy way of
    translating menu names to other languages. **Note**: the 'new' names created this
    way affect only the actual spelling of the menu items, they do *not* affect how
    you specify shortcuts settings, nor do they affect the 'official'
    command names passed in g.app.commandName. For example::

        app().realMenuNameDict['Open...'] = 'Ouvre'.

4.  'open1' and 'open2' hooks: These are called with a keywords dict containing the following entries:

    - c:          The commander of the newly opened window.
    - old_c:      The commander of the previously open window.
    - new_c:      (deprecated: use 'c' instead) The commander of the newly opened window.
    - fileName:   The name of the file being opened.

    You can use old_c.p and c.p to get the current position in the old and new windows.
    Leo calls the 'open1' and 'open2' hooks only if the file is not already open. Leo
    will also call the 'open1' and 'open2' hooks if: a) a file is opened using the
    Recent Files menu and b) the file is not already open.

5.  '\@url1' and '\@url2' hooks are only executed if the 'icondclick1' hook returns None.

6.  These hooks are useful for testing.

7.  These hooks allow plugins to parse and handle markup within doc parts,
    comments and Python ''' strings. Note that these hooks are *not* called in
    Python ''' strings. See the color_markup plugin for a complete example of how to
    use these hooks.

8.  Leo calls the 'create-optional-menus' hook when creating menus. This hook need
    only create new menus in the correct order, without worrying about the placement
    of the menus in the menu bar. See the plugins_menu and scripts_menu plugins for
    examples of how to use this hook.

9.  The New command calls 'new'.
    The 'new_c' key is deprecated.  Use the 'c' key instead.

10. g.scanDirectives calls 'scan-directives' hook.
    g.scanDirectives returns a dictionary, say d.
    d.get('pluginsList') is an a list of tuples (d,v,s,k) where:

    - d is the spelling of the @directive, without the leading @.
    - v is the vnode containing the directive, _not_ the original vnode.
    - s[k:] is a string containing whatever follows the @directive.
      k has already been moved past any whitespace that follows the @directive.

    See the add_directives plugins directive for a complete example of how to use
    the 'scan-directives' hook.

11. g.app.closeLeoWindow calls the 'close-frame' hook just before
    removing the window from g.app.windowList. The hook code may remove the window
    from app.windowList to prevent g.app.closeLeoWindow from destroying the window.

12. Leo calls the 'headkey1' and 'headkey2' when the headline *might* have changed.

13. p is the new node (position) containing '@auto filename.ext'

14. New in Leo 4.10: the d argument to the open-with event handlers is a python
    dictionary whose keys are all the tags specified by the user in the body of the
    @open-with node.
</t>
<t tx="ekr.20050912125144"></t>
<t tx="ekr.20051202072010"></t>
<t tx="ekr.20060430221745"></t>
<t tx="ekr.20060527105211"></t>
<t tx="ekr.20060612102055"></t>
<t tx="ekr.20060620094033"></t>
<t tx="ekr.20060913164304"></t>
<t tx="ekr.20061025065357"></t>
<t tx="ekr.20070317033759"></t>
<t tx="ekr.20070610174018"></t>
<t tx="ekr.20070628083442"></t>
<t tx="ekr.20070701101808"></t>
<t tx="ekr.20071021102946">Two methods in leoGlobals.py allow scripts and plugins to enable and disable 'idle' events.
**g.enableIdleTimeHook(idleTimeDelay=100)** enables the "idle" hook.
Afterwards, Leo will call the "idle" hook approximately every idleTimeDelay milliseconds.
Leo will continue to call the "idle" hook periodically until disableIdleTimeHook is called.
**g.disableIdleTimeHook()** disables the "idle" hook.
</t>
<t tx="ekr.20080203101507"></t>
<t tx="ekr.20080412124815.1"></t>
<t tx="ekr.20080730212711.14"></t>
<t tx="ekr.20080923182326.1">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.
</t>
<t tx="ekr.20090717084250.10702"></t>
<t tx="ekr.20091111112709.6671"></t>
<t tx="ekr.20091130111843.6787"></t>
<t tx="ekr.20100731112744.7267">@pagewidth 75</t>
<t tx="ekr.20100805171546.4412"># This section contains important files used to generate Leo's web site.</t>
<t tx="ekr.20100821182153.4341"></t>
<t tx="ekr.20100907092300.4440"></t>
<t tx="ekr.20100907092300.4441">Path to inkscape template file
</t>
<t tx="ekr.20100907092300.4442">Path to Inkscape executable
</t>
<t tx="ekr.20101007100904.4372"></t>
<t tx="ekr.20101009114830.4723">@nocolor-node

Formerly, this had to be on because the expansion bits
of @screenshot trees were significant.

Happily, this is no longer true.

True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101009114830.4724"></t>
<t tx="ekr.20101009114830.4725"></t>
<t tx="ekr.20101025080245.5794"></t>
<t tx="ekr.20101025080245.5795"></t>
<t tx="ekr.20101025080245.5796"></t>
<t tx="ekr.20101025080245.5798"></t>
<t tx="ekr.20101025080245.5799"></t>
<t tx="ekr.20101025080245.5801">c:/leo.repo/trunk/leo/doc/leo_toc.html</t>
<t tx="ekr.20101026081737.5531">@language html

&lt;!-- EKR: changed these by hand to give the toc some structure --&gt;

&lt;p&gt;Preliminaries&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="frontMatter.html"&gt;Front Matter&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="preface.html"&gt;Preface&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="testimonials.html"&gt;What People Are Saying About Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="FAQ.html"&gt;FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="slides.html"&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="installing.html"&gt;Installing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="intro.html"&gt;The Leo Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="outlines.html"&gt;Using Outlines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intermediate Topics&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="commands.html"&gt;Using Leo&amp;#8217;s Commands&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="customizing.html"&gt;Customizing Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="coloring.html"&gt;Controlling Syntax Coloring&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="rstplugin3.html"&gt;Creating Documents with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="scripting.html"&gt;Scripting Leo with Python&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="plugins.html"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="writingPlugins.html"&gt;Writing Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="unitTesting.html"&gt;Unit testing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="debuggers.html"&gt;Debugging with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="atShadow.html"&gt;Using &amp;#64;shadow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leo and Other Programs&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="emacs.html"&gt;Leo and Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="IPythonBridge.html"&gt;IPython and Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="leoBridge.html"&gt;Embedding Leo with the leoBridge module&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="vimBindings.html"&gt;Using Vim Bindings with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="zodb.html"&gt;Using ZODB with Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference&lt;/p&gt;

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="directives.html"&gt;Leo&amp;#8217;s Reference&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="design.html"&gt;Designing with Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="history.html"&gt;History of Leo&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="theory.html"&gt;Theory of Operation&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="whitepapers.html"&gt;White Papers&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="appendices.html"&gt;Appendices&lt;/a&gt;&lt;/li&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="glossary.html"&gt;Glossary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

Release Notes

&lt;ul&gt;
&lt;li class="toctree-l1"&gt;&lt;a class="reference external" href="what-is-new.html"&gt;What&amp;#8217;s New in Leo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</t>
<t tx="ekr.20101026082911.5536"></t>
<t tx="ekr.20101104024804.4898">@nocolor-node

The children of this node contain two @button scripts. These are disabled, but
you can execute them by selecting them and hitting Ctrl-B (execute-script).

To generate these docs by hand:

    - From this file, run rst3 on desired tree.
    - cd leo\doc\html
    - make html

To create pdf (probably easiest on Linux, with necessary latex packages installed):

    - make latex
    - cd _build/latex
    - make all-pdf
    
Important files:

- doc\html\conf.py contains settings, including the name of the master toctree
  document, leo_toc.html.txt.

- leo_toc.html.txt contains a list of all file to be included.
</t>
<t tx="ekr.20101112045055.5065">http://www.greygreen.org/tmp/plugins.html</t>
<t tx="ekr.20111108052738.5507">run-marked-unit-tests-externally = Alt-4
run-all-unit-tests-externally = Alt-5
</t>
<t tx="ekr.20111127144911.5545"></t>
<t tx="ekr.20120229094652.14053">@language rest

Leo 4.10 final                                         March 29, 2012

Leo 4.10 final is now available at: http://sourceforge.net/projects/leo/files/Leo/4.10%20final/

Leo is a text editor, data organizer, project manager and much more.
See http://leoeditor.com/intro.html

Leo 4.10 contains 9 months of intense work on Leo. Several very important
features are subtle; you could almost call them Easter Eggs, so please read
the following notes carefully.

The highlights of Leo 4.10:
--------------------------

* Dozens of new and improved features and commands, including...
  - Tab completion now shows all @command &amp; @button nodes.
  - Leo tabs may be detached from the main window.
  - The Open With menu now works.
  - The leoInspect module answers questions about Python code.
  - Leo can highlight the pane containing the focus.
  - The bigdash plugin searches across multiple files.
  - Improved abbreviation capabilities.
  - Improved handling of URL's.
  - Improved editing of non-Leo files.
  - Improvements create "weightless" unit testing.
  - Improved Leo's home page.
* Easier installation on MacOS.
* Fixed almost 70 bugs.

The Easter Eggs
---------------

1. Tab completion now shows all @command &amp; @button nodes.

Put all your common scripts in @command nodes in myLeoSettings.leo.
Typing &lt;Alt-X&gt;@c&lt;Tab&gt; will remind you of the names of these scripts.
You can execute the scripts by name without the "@command-" prefix.

2. Improved abbreviation capabilities.

Virtually any kind of abbreviation is possible. For example, ~a to ã.

3. Improved handling of URL's.

URL's can be used as links to other Leo outlines.

4 Weightless unit testing.

The mantra is edit, alt-4 (run-marked-unit-tests-externally), edit,
alt-4,... Several seemingly innocuous changes made this work without
"friction". The result is a remarkable increase in productivity.

Links:
------
Leo:      http://leoeditor.com
Forum:    http://groups.google.com/group/leo-editor
Download: http://sourceforge.net/projects/leo/files/
Bzr:      http://code.launchpad.net/leo-editor/
Quotes:   http://leoeditor.com/testimonials.html
</t>
<t tx="ekr.20120229094652.14518"></t>
<t tx="ekr.20120229094652.14520">The following tabs remain.  They are Leo-specific, not jEdit specific:
blank, docpart, leokeyword, link, name, nameBrackets, tab, url.
</t>
<t tx="ekr.20120229094652.14522">Only the high-level interface (baseTextWidget) used the low-level interface.
</t>
<t tx="ekr.20120229094652.14523">Removed the following unused methods::
    
    bind                c.bind also removed.
    configure
    cget
    event_generate      g.app.gui.event_generate does exist.
    getWidth
    indexIsVisible      Also removed for leoEditCommands: scrollHelper and measure.
    mark_set
    onChar              Fortunately, never used anywhere
    pack                Used only in Tk code
    scrollLines
    set_width           Removed do-nothing calls in Leo's core.
    tag_add             Removed do-nothing calls in qt colorizer.
    tag_bind            Removed do-nothing calls in qt colorizer.
    tag_delete          Removed do-nothing calls in qt colorizer.
    tag_names
    tag_ranges
    tag_remove
    update
    update_idletasks
    xyToPythonIndex
    yview
</t>
<t tx="ekr.20120229094652.14525">leoQTextEditWidget overrides base toPythonIndex toPythonIndexRowCol.

The versions that call g.toPythonIndex are much slower than
leoQTextEditWidget.toPythonIndex.

The following classes have a toPythonIndex method:

leoQTextEditWidget (fast)

HighLevelInterface: calls g.toPythonIndex.
baseTextWidget: calls g.toPythonIndex.
leoFind: calls g.toPytonIndex.
leoQtBaseTextWidget: calls g.toPythonIndex.
</t>
<t tx="ekr.20120229094652.14526">This is an important addition to reliability.

It ensures that body/log.widget and body.bodyCtrl/log.logCtrl are always in synch.
</t>
<t tx="ekr.20120229094652.14527">Added eventFilter in createFrame in SDI/TabbedFrameFactory classes
</t>
<t tx="ekr.20120229094652.14528"></t>
<t tx="ekr.20120229094652.14532">All top-level code in leoTest.py now resides in the
TestManager class.

The c.testManager object eliminates the need for imports of
leo.core.leoTest within unitTest.leo, an excellent
simplification.

Furthermore, there is no need to access the testUtils class:
everything is in c.testManager.

The TestManager class substantially clarifies *all* the code
in leoTest.leo. This is surprisingly important because the
testing code is hardly straightforward.
</t>
<t tx="ekr.20120229094652.14533">This is a major restructuring of Leo's code:
    
Initing settings files and local files is now as simple as possible.

g.openWithFileName now simply calls lm.loadLocalFile.

Commands.__init__ now calls c.finshCreate.

g.app.newCommander now simply calls Commands.__init__,
a *huge* collapse in complexity.

===== Details

The g.app.config class is now substantially simpler:
complex methods have moved to the LoadManager.

The new LoadManager class handles all aspects of Leo's
complex startup process, including most importantly the very
complex process by which Leo reads user settings.

As a side effect, c.config.get is now *much* simpler than
before: it search one, and *only* one dictionary to discover
settings.

Reading local files must be done *twice*. The first read
discovers settings, the second read uses those settings to
open the file. The first read always uses a null gui; the
second read uses g.app.gui, whatever that happens to be.

LM.openLocalFile embodies all aspects of the complex
strategy necessary for opening a local file twice. The first
read creates a PreviousSetting object, which is then passed
to LM.openFileByName, which in turn passes the
PreviousSetting object to the ctor for the Commander.
Finally, the PreviousSetting object inits c.config.

Because of the previousSettings object, the call to
LM.openFileByName does *not* need to "synthesize" a link to
c1 using c.hash. This stamps out bug 568452 at its source.

The crucial point is the previous settings get passed along
to the Commander ctor, *before* LM.openFileByName calls
c.fileCommands.openLeoFile to create the outline.

</t>
<t tx="ekr.20120229094652.14534">- Moved findSettingsPosition to LocalConfigManager.

- Moved printSettings to LocalConfigManager.
</t>
<t tx="ekr.20120229094652.14535"></t>
<t tx="ekr.20120229094652.14538">It's important to use only one version of the code.
</t>
<t tx="ekr.20120229094652.14540"></t>
<t tx="ekr.20120229094652.14541">This allows the following pattern to appear in Leo source files::

    class myClass:
        @others
        
    if g.app.testing:
        myClass(c).test()
        
This is better than enabling the test with "if 1:" because c is not defined
while importing the module, so the import will fail if I forget to change
"if 1:" to "if 0" when saving the .leo file.
</t>
<t tx="ekr.20120229094652.14542"></t>
<t tx="ekr.20120229094652.14543">- Generates only @auto, does not do an actual import.

- Creates @path nodes so actual @auto nodes are short.
</t>
<t tx="ekr.20120229094652.14544">Added class CPrettyPrinter &amp; beatifyCCode
</t>
<t tx="ekr.20120229094652.14545">This command is a rewrapping of the first Python script I ever wrote. It
takes much of the scut work away from the task of converting C code to
Python code.</t>
<t tx="ekr.20120229094652.14567"></t>
<t tx="ekr.20120229094652.14576">The change was to DynamicWindow.createLogPane.
</t>
<t tx="ekr.20120229094652.14577">This was Tk code, and so can not possibly be useful now.

Also removed the settings specific to the Tk colorizer.
</t>
<t tx="ekr.20120229094652.14578">This important new method allows scripts to traverse an outline, deleting nodes
during the traversal. The pattern is::

    p = c.rootPosition()
    while p:
    if &lt;delete p?&gt;:
        next = p.positionAfterDeletedTree()
        p.doDelete()
        p = next
    else:
        p.moveToThreadNext()
        
This method also allows scripts to *move* nodes during a traversal, **provided**
that nodes are moved to a "safe" spot so that moving a node does not change the
position of any other nodes.

For example, the move-marked-nodes command first creates a **move node**, called
'Clones of marked nodes'. All moved nodes become children of this node.
**Inserting** these nodes as children of the "move node" does not change the
positions of other nodes. **Deleting** these nodes *may* change the position of
nodes, but the pattern above handles this complication cleanly.
</t>
<t tx="ekr.20120229094652.14581">Leo creates @file nodes (not @thin nodes) when opening an external file.

Changed g.openWrapperLeoFile to create @file instead of @edit when possible.

Open now shows all files. This is a cue that *any* file may be opened:
non-Leo files are opened in @edit nodes.</t>
<t tx="ekr.20120229094652.14582"></t>
<t tx="ekr.20120229094652.14583">Rewrote the shellCommand, shellCommandOnRegion and executeSubprocess methods.
</t>
<t tx="ekr.20120229094652.14584"></t>
<t tx="ekr.20120229094652.14585">Leo can act like a drop-in replacement for SciTe. Suppose you do::
    
    leo x.y
    
where y is not "leo". Leo now opens an unnamed .leo file consisting of
@edit x.y. if x.y exists, the @edit node contains the entire file;
otherwise the node is empty.

When you save the .leo files or close the Leo window Leo saves x.y if it
has been changed, but Leo does *not* prompt you to save the "temporary"
.leo file.

https://bugs.launchpad.net/leo-editor/+bug/381527</t>
<t tx="ekr.20120229094652.14589">Updating Sphinx and using new .js files did the trick.
</t>
<t tx="ekr.20120229094652.14590"></t>
<t tx="ekr.20120229094652.14592">The mod_scripting plugin so that the name of the command created by an @button
nodes does not include any [&lt;tag&gt;] that immediately follows @button. Examples::

    @button [ekr] x
    @button [edit] y
    @button [important] z

These buttons create commands named x, y and z, and the name of the buttons are
x, y and z.

Note that the '[' must be the first non-blank after @button to be recognized and
removed.

The code is a straightforward addition to cleanButtonText in mod_scripting.py:
it is unlikely to have any impact whatsoever to existing @button nodes.

The intended use is for searches of the form @button [some tag].
</t>
<t tx="ekr.20120229094652.14593">Wouldn't it be great if we all could remember what we, and others, have
already done? Now there is an easy way to do so: just put your
commonly-used scripts in global @command nodes. You do this by placing each
@command node as a child of an @commands node in your @settings tree in
myLeoSettings.leo.

Leo's tab completion now shows you all @command nodes, all @button nodes
and all the commands associated with those nodes.  To see the list of
all your @command nodes, simply type::

    &lt;Alt-X&gt;@c&lt;Tab&gt;
    
When I do that, I see::

    @command-align-eq-signs
    @command-c-to-python-clean-docs
    @command-clean-all-blank-lines
    @command-clean-body
    @command-clean-diff
    @command-clean-spellpyx
    @command-cls
    @command-count-pages
    @command-create-@auto-nodes
    @command-create-def-list
    @command-flatten-script
    @command-join-node-above
    @command-join-node-below
    @command-load-all-leo-files
    @command-preview-node
    @command-preview-tree
    @command-print-cmd-docstrings
    @command-promote-bodies
    @command-remove-newlines
    @command-split-defs
    
For each @command (and @button node) Leo creates the correspond commands
without the leading "@command-", so you can use typing completion on the
shorter command name. For example, when writing documentation, I often use
the promote-bodies script. After the reminder above, I can execute the
script with::

    &lt;Alt-X&gt;prom&lt;Tab&gt;-&lt;Tab&gt;&lt;Return&gt;
    
Of course, to rexecute the command later, I can use repeat-complex-command
(Ctrl-P).

Summary
=======

If you put all your commonly-used scripts in @command nodes, you can use
&lt;Alt-X&gt;@c&lt;Tab&gt; to remind yourself of their names. That is, Leo's typing
completion eliminates the need for memory-intensive retrieval. I'm not
likely ever to forget typing completion.

This scheme takes full advantage of Leo's organization strengths and
*concentrates* those strengths by putting all the to-be-organized material
in one place. This allows for easy reorganization: changing command-name
prefixes, for instance, would be straightforward.
</t>
<t tx="ekr.20120229094652.14595"></t>
<t tx="ekr.20120229094652.14596">There is no longer any need for @@button, etc.: just put under an @ignore node.</t>
<t tx="ekr.20120229094652.14598">Configurable and optional::

    @color focus_border_color = red
    @int focus_border_width = 1
    @bool use_body_focus_border  = True
    @bool use_focus_border = True</t>
<t tx="ekr.20120229094652.14599">Many editors allow you to jump over, select and delete words, especially
those containing or surrounded by special characters, in a smarter way than
just "going to the beginning of the word before" (back-word) or "going to
the end of the next word" (forward-word).

Patches add "-smart" equivalents of the jump, select and delete commands.
Users wanting to use these commands can set in their myLeoSettings.leo::

  back-word-smart                  = Ctrl-LtArrow
  back-word-smart-extend-selection = Ctrl-Shift-LtArrow

  forward-word-smart                  = Ctrl-RtArrow
  forward-word-smart-extend-selection = Ctrl-Shift-RtArrow

  delete-word-smart          = Ctrl-Delete
  backward-delete-word-smart = Ctrl-BackSpace</t>
<t tx="ekr.20120229094652.14600">The single-line nodes should end in a newline. Otherwise the created node
will add a newline, and the checkers will complain.

The new class is xmlScanner and htmlScanner in leoImport.py.
</t>
<t tx="ekr.20120229094652.14601">Leo's home page now shows the latest postings on the leo-editor group.
</t>
<t tx="ekr.20120229094652.14602">The new command names and default bindings are::

    run-all-unit-tests-externally       = None
    run-all-unit-tests-locally          = None
    run-marked-unit-tests-externally    = Alt-4 # The new standard
    run-marked-unit-tests-locally       = None
    run-selected-unit-tests-externally  = Alt-5 # The new standard
    run-selected-unit-tests-locally     = None
</t>
<t tx="ekr.20120229094652.14606"></t>
<t tx="ekr.20120229094652.14607">http://groups.google.com/group/leo-editor/browse_thread/thread/e2980a2b86af913e

I see the following
- when a file is opened
  - one message listing the root node
  - 7 repeats of the message for the current node

- when the file is saved in a session with several tabs
  - a message is generated for each current node in each tab

- shifting focus from body to headline doesn't generate the message,
  shifting focus with &lt;Ctrl-H&gt; does

- switching from one tab to another doesn't generate the message 
</t>
<t tx="ekr.20120229094652.14608">Unit tests can test this ivar.
</t>
<t tx="ekr.20120229094652.14610">The new code monkey-patches g.doHook to a do-nothing::
    
    if not self.loadPlugins:
        def dummyDoHook(tag,*args,**keys):
            pass
        g.doHook = dummyDoHook
</t>
<t tx="ekr.20120229094652.14611">An useful convenience method now that external unit tests can use config settings.
</t>
<t tx="ekr.20120229094652.14612">Under control of @bool collapse_on_lt_arrow option, default *True*.
</t>
<t tx="ekr.20120229094652.14613">The error message is now part of the failed assert.  Very helpful.
</t>
<t tx="ekr.20120229094652.14615">The default, True, is the legacy operation, which I recommend.

</t>
<t tx="ekr.20120229094652.14616">add-comments preserves trailing whitespace.

delete-comments now works whether or not blanks surround comments delims.
</t>
<t tx="ekr.20120229094652.14618">- print-bindings: Alt/Ctrl+Key+N now printed with plain Alt/Ctrl keys and shown as Alt/Ctrl+N.

- print-commands: Alt/Ctrl+Key+N now printed as Alt/Ctrl+N.

- print-commands &amp; print-bindings do not print 'all'.</t>
<t tx="ekr.20120229094652.14619">Added show-decoration-selected: 1 to QTreeWidget stylesheet.

This causes the entire headline row to be shown when select, a big improvement, imo.
</t>
<t tx="ekr.20120229094652.14620"></t>
<t tx="ekr.20120229094652.14621">What I did:
    
1. Created c.init_error_dialogs &amp; c.raise_error_dialogs.

These are called from the following methods:
    
c.importAnyFile
c.open
c.readAtAutoNodes
c.readAtFileNodes
at.readAll
c.save
c.saveAs
c.saveTo
fc.writeAtFileNodes
fc.writeAtShadowNodes
fc.writeDirtyAtFileNodes

2. Disabled log messages in several of the above methods during unit testing.

3. Disabled runOpenFileDialog and runSaveFileDialog during unit testing.
</t>
<t tx="ekr.20120229094652.14622">- don't print 'all' in bindings.

- pad bindings properly, as is done in print-commands/bindings.
</t>
<t tx="ekr.20120229094652.14625">The clone-find-all command includes nodes only once: if a node's ancestor
appears in the list, the node is not include again in the top-level list.
The new clone-find-all-flattened command includes every found node in the
top-level list of nodes. I find this less confusing.
</t>
<t tx="ekr.20120229094652.14757"></t>
<t tx="ekr.20120229094652.14758">https://bugs.launchpad.net/leo-editor/+bug/800157

Fixed at rev 5077.</t>
<t tx="ekr.20120229094652.14759">The code that marks descendant @&lt;file&gt; nodes dirty now tests
p2.isAnyAtFileNode().  The old code tested p2.isAtThinFileNode().
</t>
<t tx="ekr.20120229094652.14761">CAUTION: new double click handling code

http://groups.google.com/group/leo-editor/browse_thread/thread/dbd63b9b38911906

The problem isn't single/double, but double click not stopping the
event processing.  It has the correct form:

if g.doHook('doubleClick1') is None:
   do-normal-double-click-stuff
g.doHook('doubleClick2')

but I think some other route through the code, or additional processing
of the event means that even thought the handler registered on
doubleClick1 returns non-None, the node goes into headline edit mode,
with focus.

This is bad, because the doubleClick1 on an @url node attempts to
select and raise a different commander (tab), so now you're looking at
one commander but focus is in another, so what you type trashes the
headline in the original commander.

The timer shouldn't be needed - a 'doubleClick1' hook which returns
non-None should stop the headline going into edit mode.  If you can
make that be the case, all is well.
</t>
<t tx="ekr.20120229094652.14762"></t>
<t tx="ekr.20120229094652.14763"></t>
<t tx="ekr.20120229094652.14764">- leoCommands.__init__ now sets self.db = {}
- initGlobalDB now returns {} instead of None if there is no cacher.
</t>
<t tx="ekr.20120229094652.14765">readOpenFile reads the private shadow file, detecting the encoding.
</t>
<t tx="ekr.20120229094652.14767"></t>
<t tx="ekr.20120229094652.14769">Examples:
    
    @edit C:/leo.repo/ipython-0.12/IPython/frontend/qt/console/pygments_highlighter.py
        # The filename comes from g.app.gui.runOpenFileDialog
    
    @file C:\leo.repo\ipython-0.12\IPython\frontend\qt\console\pygments_highlighter.py
        # Created by import.
        
The problem was the call to g.os_path_normpath in importDerived files:
it converts slashes to backslashes on windows (!!)
</t>
<t tx="ekr.20120229094652.14770">- Added getLanguageFromAncestorAtFileNode.

- Revised code in at.scanAllDirectives &amp; leoQtColorizer.scanColorDirectives.
</t>
<t tx="ekr.20120229094652.14772">qtBody can use the leoBody code.
</t>
<t tx="ekr.20120229094652.14775">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 187, in returnPressed
    self.scon.doSearch(t)
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 289, in doSearch
    self.addBodyMatches(bm)
  File "c:\leo.repo\trunk\leo\plugins\quicksearch.py", line 257, in addBodyMatches
    self.its[it] = (p, None)
TypeError: unhashable type: 'QListWidgetItem'
</t>
<t tx="ekr.20120229094652.14776">The scrolledmessage plugin no longer exists. The runScrolledMessageDialog
*does* still exist, but it now uses the viewrendered plugin.
</t>
<t tx="ekr.20120229094652.14777">Changed doButtons and doCommands kind handlers.

This allows us to put example nodes in leoSettings.leo.
</t>
<t tx="ekr.20120229094652.14779"></t>
<t tx="ekr.20120229094652.14780">Changed at.readEndOthers and at.readEndRef so that they
always set at.inCode = True
</t>
<t tx="ekr.20120229094652.14781">Fixed several encoding problems related to this thread: @shadow - @encoding windows-1250 - problem
http://groups.google.com/group/leo-editor/browse_thread/thread/a4ba80559447218a/9a37a4ed6c44d452

There were several real problems fixed.  The summary: @encoding directives were always required.

In detail:

1. at.initWriteIvars now checks for a Python # -*- coding: line.
   If present, it must be the very first line.
   If present, it will override any @encoding directives.

2. g.getPythonEncodingFromString now can deal with either of the following lines:

    @first # -*- coding: utf-8 -*-
    # -*- coding: utf-8 -*-

That is, g.getPythonEncodingFromString can strip the leading @first.

3. g.readlineForceUnixNewline and x.propagate_changes now catch UnicodeDecodeError.
   This is very important: previously decoding errors crashed Leo!.

All unit tests pass with both Python 2.x and 3.x.

</t>
<t tx="ekr.20120229094652.14782">Added configure_hard_tab_width method.
</t>
<t tx="ekr.20120229094652.14783">https://bugs.launchpad.net/leo-editor/+bug/800311

Having set undo to word granularity, I often change something, move to a
different line and continue editing there. When I want to undo my last change,
Leo also undoes the change in the other place, as word granularity currently
only recognizes a new undo step when a new word is started, no matter if we
moved to a completely different position first.

The attached patch fixes the issue by remembering the previous cursor position.

Something else about the undo code:

- oldSel and newSel are never set to None in the constructor -&gt; it's quite hard
  to know they are there without reading the whole code

- It would be cool if there could be some more comments in that section; e.g. to
  tell that oldSel and newSel from which old_row, old_col, new_row and new_col
  actually mean: old = "the position right before doing the change" and new =
  "the position right after doing the change" and that old != "the position
  after the change before" (which I added as prevSel) - it took me ages to
  discover this

- There are duplicate "The new and old characters are not contiguous." checks.
  Are they different/necessary?

- The "We have just inserted a line." section is not only entered on a new line
  (see other attached patch)
</t>
<t tx="ekr.20120229094652.14784">https://bugs.launchpad.net/leo-editor/+bug/800312
</t>
<t tx="ekr.20120229094652.14785">https://bugs.launchpad.net/leo-editor/+bug/880975

Bug: The Meta+Ctrl section [of print-bindings] is always empty and this makes it
misleading.

Fix: the prefix list in k.printBindings must be sure that if two prefixes have a
common leading part the longer prefix appears first in the lists.
</t>
<t tx="ekr.20120229094652.14786">https://bugs.launchpad.net/leo-editor/+bug/823601
</t>
<t tx="ekr.20120229094652.14787">Code that wants to set a particular part of a widget's style sheet calls::

   g.app.gui.update_style_sheet(w,key,value)

where w is the widget whose stylesheet is to be changed, key is unique
to the method (or group of methods), and value is the new version of
the stylesheet **for the particular key** to be added.  Examples::

   # In setEditorColors.
   sheet = 'background-color: %s; color: %s' % (bg,fg)
   g.app.gui.update_style_sheet(obj,'colors',sheet)

   # In add_border.
   sheet = "border: %spx solid %s" % (
       c.focus_border_width,c.focus_border_color)
   self.update_style_sheet(w,'border',sheet)

   # In remove_border.
   sheet = "border: %spx solid white" % (c.focus_border_width)
   self.update_style_sheet(w,'border',sheet)

So add_border and remove_border work together because they use the
same 'border' key.

g.app.gui.update_style_sheet is straightforward: it injects a Python
dict called leo_stylesheet_dict into the widget, and computes the
total stylesheet as follows::

   # Step one: update the dict.
   d = hasattr(w,'leo_styles_dict') and w.leo_styles_dict or {}
   d[key] = value
   w.leo_styles_dict = d

   # Step two: update the stylesheet.
   aList = [d.get(key) for key in list(d.keys())]
   s = ';'.join(aList)
   w.setStyleSheet(s)
</t>
<t tx="ekr.20120229094652.14817">g.importFromPath ('html','C:/leo.repo/trunk/leo/modes/html.py')
returned the standard Python html module!

</t>
<t tx="ekr.20120229094652.14818">The fix was to use lowercase versions of docPart,leoKeyword,nameBrackets.
</t>
<t tx="ekr.20120229094652.14820">Worked around docutils problem in writeToDocutils.
</t>
<t tx="ekr.20120229094652.14822">not written: c:\recent\data3.html
exception removing: 
Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoAtFile.py", line 5280, in remove
    os.remove(fileName)
WindowsError: [Error 3] The system cannot find the path specified: ''
</t>
<t tx="ekr.20120229094652.14823">There were two bugs:
    
- baseScannerClass.skipWsToken must not skip newlines!
- tokenize must add any remaining whitespace at the end of the loop.
</t>
<t tx="ekr.20120229094652.14824">The code didn't work for c == None.
</t>
<t tx="ekr.20120229094652.14825"></t>
<t tx="ekr.20120229094652.14826">http://groups.google.com/group/leo-editor/browse_thread/thread/3c319daba37cd0ef

- Created a separate html importer, a very simple subclass of the xml scanner
  whose only difference is that it uses @data import_html_tags instead of @data
  import_xml_tags.

- The case of tags in @data import_html_tags and @data import_xml_tags no longer matters.

- checkTrialWrite now writes a file *with* sentinels, to handle @others correctly.
  It then removes the sentinels.
  
  This means that the import tests must use the correct @language directives.
  
- The import check now uses a token-based comparison.  
</t>
<t tx="ekr.20120229094652.14827">The fix was in g.pr:
    
Restored the call to sys.stdout.write(s2) (instead of print)

sys.stdout.write(s2) writes no additional newline at the end of s2.

Aha!  At last I know how to unit test g.pr, g.trace, etc.: redirect stdout!
</t>
<t tx="ekr.20120229094652.14828"> File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2074, in
scanAndCompare
   n1,n2,ok = self.compareTokens(tokens1,tokens2)
 File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2094, in
compareTokens
   else:      kind1,val1 = 'eof','',n1
ValueError: too many values to unpack
</t>
<t tx="ekr.20120229094652.14829">- Created stand-alone unit tests from @test import dataN.html.
- All leoImport unit tests may now be run externally.
    The Python unit tests were failing because of intermixed tabs and blanks.
    This was fixed by putting @tabwidth -4 in all @test nodes for Python.
- Made sure lines are printed when unit tests fail unexpectedly.
- Added .js &amp; javascript entries to global data structures for javascript unit tests.
- Completed xmlScanner.filterTokens.
- Don't create declaration nodes for html.
- Make sure html tags are as expected.
- Ignore case of html/xml tags.

Rev 4774.1.1:

Fixed all known html-import problems in a clean way. Unit tests exists, but they
use external files. They will be converted soon.

Important changes:

1. Added hasNestedClasses ivar in the baseScannerClass, True only for xml/html scanners.

When True, scanHelper and skipDecls allocate a substring to be used for all further scanning.
This is the *only* way to limit Leo's scanners properly.

This was, in essence, the fix for duplicate code generation arising from unbalanced tags:
skipToEndOfTag and skipToMatchingTag can't match outside the present tag because
the 's' argument passed to those methods has already been truncated.

This is a simple, elegant solution, and in essence the *only* proper solution.
For example, it would not work to past an 'end' argument to skipToEndOfTag and skipToMatchingTag
because the scanners inside those methods do not understand an 'end' argument.

Thus, the simplest, most efficient solution is for scanHelper and skipDecls to truncate the
string to be scanned. That way, the truncation happens at most once per "class".

2. Added hasDecls in the baseScannerClass, False only for xml/html scanners.

Various methods call skipDecls only if this ivar is True.

Rev 4773:

Fixed recent botch: both single and double quotes are allowed in html. 

Rev 4772:

Solved "between element" problem by extending classes up to the next class.
data.html imports "correctly", but not perfectly due to tag mismatches in
skipToMatchingTag.
</t>
<t tx="ekr.20120229094652.14831">http://groups.google.com/group/leo-editor/browse_thread/thread/421ebf4c3f2d5f59

Adding/deleting body editor 3 times hard-crashed Python

The changes were straightforward:
    
- set w.leo_label to None when calling unpackWidget.

- Test for w.leo_label before using it.

Added a minitest.  To test by hand, add the following @button nodes:
    
    @button add-ed
    w = c.frame.body.addEditor()
    
    @button del-ed
    w = c.frame.body.deleteEditor()
    
Click away in any order...</t>
<t tx="ekr.20120229094652.14832">The new add-comments command adds the comment character at the leftmost column.

The new delete-comments command will remove the comment characters inserted by
either the old or new version of the add-comments command.
</t>
<t tx="ekr.20120229094652.14833">Example: ctrl-shift-home.

The fix was to set self.widget = contents in leoQtLog.selectTab.
</t>
<t tx="ekr.20120229094652.14834">- Added disabled code to inject event filter in TabbedFrameFactory.createFrame.

- Added cycle-tab-focus command.

- cycle-all-focus command uses cycleTabFocus as a helper: this greatly simplifies the code.
    
- Added binding for "Find" tab in leoQtLog.createTab.

- DynamicWindow.createFindTab injects leo_find_widget ivar for leoQtLog.createTab.

- Added isLogWidget to leoQtLog and nullLog classes.  They are helpers for cycleAllFocus.

- Revised leoQtLog.selectHelper: selecting a new tab does *not* change logCtrl (log.widget).

- Added bindings to Find tab
</t>
<t tx="ekr.20120229094652.14835"></t>
<t tx="ekr.20120229094652.14836">The safe default pane is the body pane.  It's also the simplest code.
</t>
<t tx="ekr.20120229094652.14837">The code must be careful that the log widget supports the HighLevelInterface.
</t>
<t tx="ekr.20120229094652.14838"></t>
<t tx="ekr.20120229094652.14839">The bug was in k.handleDefaultChar.  No substantial change made to eventFilter.
</t>
<t tx="ekr.20120229094652.14840">What I did:
    
1. Fixed major bug in settingsTreeParser.visitNode.
   It now does p.copy() to protect the callers traverals.
   This could have significant impacts on people's settings.
   
2. Added g.app.unitTestDict for unit testing.

3. Leo now extends the list of @buttons and @commands, rather than replacing them.
   This is reasonable only because leoSettings.leo should never define *active*
   buttons or commands.
</t>
<t tx="ekr.20120229094652.14841"></t>
<t tx="ekr.20120229094652.14842">https://bugs.launchpad.net/leo-editor/+bug/804960

When we clone a node inside an @shadow (containing @others) node and then
refresh the @shadow node from file, the clone is unlinked and marked as changed.
If we now save, close the .leo file and open it again, the nodes are linked
again! (showing "cloned" symbol) User's thought: "How the heck can the file
change _between save and re-open_ when I changed nothing?"

I think what should be done about this is the check that Leo does when it opens
the file again, and that check should be done immediately after the "refresh
node from file" operation. Also, at this point, the "Recovered nodes" node
should appear (if file and node have both changed), not only after the next .leo
file close/reopen (as that happens quite infrequently, I guess, e.g. once a day
for me). Otherwise, the user can easily lose data.
</t>
<t tx="ekr.20120229094652.14848">&gt;  File "/path/to/leo/core/leoImport.py", line 2070, in reportMismatch
&gt;    line = repr(lines2[i])
&gt; IndexError: list index out of range
</t>
<t tx="ekr.20120229094652.14849"></t>
<t tx="ekr.20120229094652.14850">The fix was to at.putBody.
</t>
<t tx="ekr.20120229094652.14855">http://groups.google.com/group/leo-editor/browse_thread/thread/daf581ace0de871e

"has been modified outside of Leo. Overwrite this file?"

Steps to reproduce:

- Create a node "@edit ~/aaa.txt" assuming aaa.txt does not exist
- Ctrl-S save outline, log reports creating ~/aaa.txt
- Edit text in body
- Ctrl-S save outline, pop-up pops-up erroneously.

The problem was that replaceTargetFileIfDifferent should set root.v.at_read.
Now it does.

Note: both replaceFileWithString methods are part of the @shadow logic,
so there is no need to set any at_read bit in those methods.
</t>
<t tx="ekr.20120229094652.14856">https://bugs.launchpad.net/leo-editor/+bug/889175

I loaded an outline with @auto nodes pointing to an out of date path. So body
texts were empty. I updated the paths in the node headlines and saved the file,
expecting to be prompted for overwriting the existing files (now the paths were
correct again), but they were over-written with the blank content without
warning. Damn.

Steps to reproduce in a simpler way below, but don't write the
below of as contrived, because the above is the real problem.

Create @auto /home/tbrown/text.txt

enter text, save file

Edit headline to @auto /home/tbrown/Desktop/text.txt

enter text, save file

Edit headline back to /home/tbrown/text.txt

-----

I now see this happens also if the path change is in a @path node ancestor of the @auto node.
</t>
<t tx="ekr.20120229094652.14891">DynamicWindow.setGeometry now does *not* change the window size when using the qttabs gui.

Added a comment to this effect in leoSettings.leo.
</t>
<t tx="ekr.20120229094652.14892">https://bugs.launchpad.net/leo-editor/+bug/87933
    
- Fixed the Shift-Tab buglet by adding lower-case entries in app.tkNamesList
    This matches what is done in k.settingsNameDict.
- Created &lt;&lt; define global key dicts &gt;&gt; in leoApp.py.
- Changed si.val to si.stroke.
- Replaced g.bunch by GeneralSetting &amp; ShortcutInfo.
- Replaced bunchList by aList.
- Removed dynamic_menus "compile-time" constant.
- onAboutToShow now recomputes the contents of menus whenever menus are invoked.
- leo_update_shortcut now shows all shortcuts for a command.
- Wrote and tested merge_settings_dict.
</t>
<t tx="ekr.20120229094652.14893">Bug 879331: Redefining a key binding breaks menu items with same binding

https://bugs.launchpad.net/leo-editor/+bug/879331

&gt; Now I understand.  If I override the shortcut associated with the menu
&gt; item, in this case Alt-A, the menu breaks.

This is a serious bug!  The menu item now executes the command bound
to Alt-A!  Very bad.

=========

http://groups.google.com/group/leo-editor/browse_thread/thread/762e832909c3c530/d99d48eed45d1061

http://mail.google.com/mail/#inbox/1331909dd653f3c9

Redefining a binding, say for Alt-a, in x.leo will cause the sort-siblings menu
(bound to alt-a) to execute the command specified by the command bound to Alt-a!

https://bugs.launchpad.net/leo-editor/+bug/815564

This anomaly only occurs when all of the following conditions are true:

1) There is a global command name X that is the "same" as the root name of the
file containing a plugin Y. Here, "same" means equal after the command name is
converted to lower case and all underlines in the root name are replaced by
dashes.

2) A shortcut (a.k.a. keystroke) is bound to command name X.

When these conditions are true, then the Plugins dropdown menu shows the key
binding next to the plugin name and left-clicking the plugin name executes the
global command--and, there is no way to display the plugin's help.

Plugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not
by the old scrolledmessage.py plugin.

Leo-editor revision: 4433
OS: Ubuntu 11.04 (natty)

Startup log pane:
Leo Log Window
Leo 4.9 final, build 4411, June 21, 2011
Python 2.7.1, qt version 4.7.2
linux2
</t>
<t tx="ekr.20120229094652.14894">https://bugs.launchpad.net/leo-editor/+bug/815564

===== Probably the same as bug 879331 =====

This anomaly only occurs when all of the following conditions are true:

1) There is a global command name X that is the "same" as the root name of the
file containing a plugin Y. Here, "same" means equal after the command name is
converted to lower case and all underlines in the root name are replaced by
dashes.

2) A shortcut (a.k.a. keystroke) is bound to command name X.

When these conditions are true, then the Plugins dropdown menu shows the key
binding next to the plugin name and left-clicking the plugin name executes the
global command--and, there is no way to display the plugin's help.

Plugin Help Rendering: Plugin help is rendered by the viewrendered plugin, not
by the old scrolledmessage.py plugin.

Leo-editor revision: 4433
OS: Ubuntu 11.04 (natty)

Startup log pane:
Leo Log Window
Leo 4.9 final, build 4411, June 21, 2011
Python 2.7.1, qt version 4.7.2
linux2
</t>
<t tx="ekr.20120229094652.14925">k.computeInversBinding() called by print-commands and for auto-completion.

k.bindKey sets k.bindingsDict.

k.bindKeyToDict sets k.masterBindingDict.
</t>
<t tx="ekr.20120229094652.14934">Created k.kill_one_shortcut, called from k.remove_conflicting_definitions.
</t>
<t tx="ekr.20120229094652.14941">The new TM.findMarkForUnitTestNodes allows both
TM.FindAllUnitTestsNodes and createOutline to be much simpler.
</t>
<t tx="ekr.20120229094652.14942"></t>
<t tx="ekr.20120229094652.14973">The fix was to save/restore YScroll position in body.setSelectionAreas.

Failure case 1:
    - Search for something.
    - Manually scroll the pane.
    - Click scrolls the pane again.
    
Failure case 2:
    - reformat-paragraph.
</t>
<t tx="ekr.20120229094652.15012">Fixing this bug is important: it allows you to set a default
page width in myLeoSettings.leo for use, for example, in the
reformat-paragraph command.

Without a proper default c.page_width setting, you would have
to use @page_width instead, which is much less convenient.

The fix was the following lines in c.initConfigSettings:
    
    c.page_width = getInt('page_width') or 132
        # 2012/02/27: this appears to be a fix of an *ancient* bug.
</t>
<t tx="ekr.20120229094652.15013">The fix was easy: moveWithinLineHelper does *not* call
leoMoveCursorHelper for the case spot == 'end-line'
</t>
<t tx="ekr.20120229094652.15089">http://groups.google.com/group/leo-editor/browse_thread/thread/b17d140b7ceb8fc9

I've added web page bookmarking from your browser to Leo.

Docs., appended to the mod_http plugin, where this functionality lives,
are pasted below.

Screen shot of the form which pops up when you click the Bookmark
button in your browser attached.  The body text of the corresponding
bookmark node created in Leo is:

    Leo's Home Page
        http://leoeditor.com

        Tags: leo, python

        Leo's Home Page

        Collected: Sun 02 Oct 2011 02:52:51 PM CDT

        Keep this under your pillow.

If you had some text selected on the page in your browser that would
also appear in the above, and repeatedly bookmarking the same page with
different selections incrementally adds such quotes to the bookmark
node.

Here are the docs.:

Can also be used for bookmarking directly from the browser to Leo.  To
do this, add a bookmark to the browser with the following URL / Location:

    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&amp;name=' + escape(d.title) + '&amp;selection=' + escape(window.getSelection()) + '&amp;url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)

and edit the port (8130 in the example above) to match the port you're using
for mod_http.

Bookmarks are created as the first node in the outline which has been opened longest.
You can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,
e.g.::

    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming

to place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.

The headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.
If the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.

The browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true
in ``about:config`` in Firefox. 
</t>
<t tx="ekr.20120229094652.15090">http://groups.google.com/group/leo-editor/browse_thread/thread/4686ebad81bb1ea1
</t>
<t tx="ekr.20120229094652.15091">- Selecting any node using arrow keys shows the node in the outline immediately.

- Clicking a node or hitting &lt;return&gt; puts focus in body pane.
</t>
<t tx="ekr.20120229094652.15093">Small improvements the unit testing framework created big results. They
completely eliminate the overhead in running unit tests:

    - The run-marked-unit-tests-externally (Alt-4) command runs all marked
      @test nodes. To choose tests, just mark them.
    - Alt-4 now saves the .leo file first.
    - Almost all unit tests may now be run externally:
        - External unit tests always read config settings.
        - The nullGui now uses a fully capable string-based body widget.
        - The nullGui now uses the regular undoer.
    - Unit tests now always have the sources available.
    - Disabled messages on external unit tests.
    - The unit test commands always run a selected @test node.

These improvements mean that almost all unit tests may be run externally.
In turn, this creates a remarkable work flow::

    Edit
    Alt-4
    Edit
    Alt-4
    ...

The energy difference between weightless and heavy is astounding. Try the
new way: you will surely like it.

**Notes**:

Experience shows that being able to run the desired unit tests *without*
selecting any particular node makes an amazingly large difference. Being
able to run all and only marked unit tests is a big step forward.

If a marked node is neither an @test node nor an @suite node, all nodes in
the tree are considered to be marked.
</t>
<t tx="ekr.20120229094652.15131">From Brian Theado

The other day I stumbled across Ville's code in scripts.leo which displays the
output of python's trace module in a leo outline. The output of the trace module
is not very friendly and I didn't find the result very usable. I was inspired to
write some code to translate the output so the tree of function calls is
displayed via Leo headlines. Thanks to Ville for sharing that code. I never
would have figure this out without that starting point.

Just copy (Ctrl-Shift-V) the child outline into a leo outline and hit ctrl-b on
the "call tree" node. The execution tree of the 'scroll-outline-up-line'
minibuffer command will be displayed to stdout and also as a tree of leo
headlines.
</t>
<t tx="ekr.20120229094652.15132">import trace

@language python
@others

# http://docs.python.org/library/trace.html for documentation
# on the trace module
tracer = trace.Trace(countcallers=1)

# Trace a minibuffer command.

# Any function call will work. Leo's minibuffer commands are easily discoverable
# via tab completion and the 'print-commands' command.

#tracer.runfunc(c.executeMinibufferCommand, 'goto-prev-node')
tracer.runfunc(c.executeMinibufferCommand, 'scroll-outline-up-line')

top = p.insertAsLastChild().copy()
top.h = 'trace session'
displayCalltree(top, tracer.results().callers.keys())
c.redraw()
</t>
<t tx="ekr.20120229094652.15133">def displayCalltree(p, callinfo):
   '''
   Converts the function call hierarchy in 'callinfo' into a tree of function
   calls.  The function call tree is displayed to stdout as indented text
   and is inserted as a tree of leo nodes rooted at the given position 'p'
   '''
   callers = [k[0] for k in callinfo]
   callees = [k[1] for k in callinfo]

   # The first set of children will be those that don't have any callers
   # listed in callinfo
   toplevels = list(set(callers) - set(callees))
   positions = {}
   path = []

   # Depth-first traversal of the call hierarchy represented by 'callinfo'
   # 'levels' is a stack which grows during descend and shrinks
   # during ascend.  Each element of 'levels' is a list of unprocessed
   # siblings of each other
   levels = [toplevels]
   while len(levels) &gt; 0:
       while len(levels[-1]) &gt; 0:
           # Process the first element in the 'deepest' (i.e. last) list of siblings
           cur = levels[-1][0]
           levels[-1] = levels[-1][1:]
           indent = " " * 4 * (len(levels)-1)
           if cur not in path:
               if cur in positions.keys():
                   # Function already seen, so make a clone
                   clone = positions[cur].clone()
                   clone.moveToLastChildOf(p)
                   print (indent + "%s %s ..." % cur[1:])
               else:
                   # Haven't seen this function, so insert a new headline
                   p = p.insertAsLastChild().copy()
                   p.h = "%s %s" % cur[1:]
                   print (indent + p.h)

                   # Remember the position so it can be cloned if seen again
                   positions[cur] = p

                   # Find all callees of this function and descend
                   levels.append([c[1] for c in callinfo if c[0] == cur])
                   path.append(cur)
           else:
               r = p.insertAsLastChild().copy()
               r.h = "(recursive call) %s %s" % (cur[1], cur[2])
               print(indent + r.h + "...")

       # Ascend back up one level
       path = path[0:-1]
       p = p.parent()
       levels = levels[0:-1]
</t>
<t tx="ekr.20120229094652.15134"></t>
<t tx="ekr.20120229094652.15135">The leoInspect module provides answers to questions about Python source
code. leoInspect is an elegant and easy-to-use front end for Python's AST
(Abstract Syntax Tree) trees *and* a window into a richly connected set of
semantic data built *from* AST trees.

For details, see http://leoeditor.com/leoInspect.html</t>
<t tx="ekr.20120229094652.15138">http://groups.google.com/group/leo-editor/browse_thread/thread/5fdadfba113e12d9/fa329534654ecfec

Leo now reports bzr version numbers and dates automatically.  Very important.
</t>
<t tx="ekr.20120229094652.15139">Note: in rev 4990, the g.app.newCommander method (formerly called
g.app.newLeoCommanderAndFrame) also returns a single value (a
Commander) rather than the tuple (c,c.frame). 
</t>
<t tx="ekr.20120229094652.15140">http://groups.google.com/group/leo-editor/browse_thread/thread/dd5907529208ee98

The body of @openwith nodes contains one or more lines of the following
form::

   tag: value

The possible tags are::

    kind: &lt;a string&gt;

The value specifies the **opener logic**, that is, the method used to
launch the external editor, one of 'subprocess.Popen', 'os.startfile',
'os.spawnl', 'os.spawnv', 'exec'.

    arg: &lt;a string&gt;

There may be many such arg lines. Each line will be a string to be passed
as an argument to the opener logic, in a format that is compatible with the
specified opener logic.

Quotes in &lt;a string&gt; will be *retained*, allowing the user to specify
exactly the arguments to be passed to opener logic.

..  custom: &lt;a string&gt;
..  Here, &lt;a string&gt; *will* be eval'd, yielding an object to be used as
..  the opener logic.
</t>
<t tx="ekr.20120229094652.15142">http://groups.google.com/group/leo-editor/browse_thread/thread/808ba29fec64e590

For almost 15 years Leo has been written using a limited set of classes.
These were "big" classes, implementing major modules of Leo. There is
nothing wrong with these classes, and they will remain unchanged, except
insofar as they will be simplified by the classes I am about to discuss.

Recently, I have become aware that Leo's code could be considerably
simplified by adding "smallish" classes. Indeed, I now think the
distinction between big and small classes is unhelpful. The most important
part of the design of a class is simply whether a class implements an
understandable concept.

With this introduction, here is a short summary of Leo's new classes. Some
have not been fully implemented. Getting them all to work is a big part of
the rewrite of Leo's config, loading and key-handling code.

</t>
<t tx="ekr.20120229094652.15143"></t>
<t tx="ekr.20120229094652.15144">leoSettings.leo:

table = (
        # First, leoSettings.leo in the home directories.
        join(g.app.homeDir,     settings_fn),
        join(g.app.homeLeoDir,  settings_fn),

        # Next, &lt;machine-name&gt;leoSettings.leo in the home directories.
        # join(g.app.homeDir,     machine_fn),
        # join(g.app.homeLeoDir,  machine_fn),

        # Last, leoSettings.leo in leo/config directory.
        join(g.app.globalConfigDir, settings_fn)
    )

myLeoSettings.leo:

    table = (
        # First, myLeoSettings.leo in the local directory
        join(localDir,          settings_fn),

        # Next, myLeoSettings.leo in the home directories.
        join(g.app.homeDir,     settings_fn),
        join(g.app.homeLeoDir,  settings_fn),
    
        # Next, &lt;machine-name&gt;myLeoSettings.leo in the home directories.
        join(g.app.homeDir,     machine_fn),
        join(g.app.homeLeoDir,  machine_fn),

        # Last, leoSettings.leo in leo/config directory.
        join(g.app.globalConfigDir, settings_fn),
    )
</t>
<t tx="ekr.20120229094652.15146">http://groups.google.com/group/leo-editor/browse_thread/thread/c933b28c27d3b9a7

Ref 4952 of the trunk fixes bug 87933:
"Redefining a key binding breaks menu items with same binding"

This was a difficult bug to fix--I rewrote significant parts of Leo's
code that deals with settings for key binding.

Besides fixing the bug, Leo computes accelerators in menu items
dynamically when the user activates a menu.  The accelerator shows
*all* keys bound to the command associated with the menu item.

From the checkin log:

A major reorganization of the configuration code that fixes bug 87933
Redefining a key binding breaks menu items with same binding

- Replaced g.bunches with ShortcutInfo objects...

- Wrote and tested make_settings_dict and its helpers,
  merge_settings_dicts, invert and uninvert.

- Leo computes menu texts dynamically in onAboutToShow.

- leo_update_shortcut now shows all shortcuts for a command.

- leoMenu.define_enable_dict encapsulates data used to enable/disable
  commands regardless of where those commands appear in Leo's menu. The old
  code assumed that a fixed menu location for all commands that could be
  enabled or disabled.</t>
<t tx="ekr.20120229094652.15147">End going to only physical line and not to the logical (wrapped) one)... 
</t>
<t tx="ekr.20120229094652.15149">http://groups.google.com/group/leo-editor/browse_thread/thread/ba9eb63337467d42/a3f3750d0ce6e847

&gt; Here's a one line @button node you can add to myLeoSettings.leo
&gt;
&gt; @button set-style
&gt;    c.frame.top.leo_ui.setStyleSheet(p.b)

Cool.  I've added this to my "pre-writing" pile of things to be
included in the next set of docs.

Important:  setStyleSheet *replaces* the previous stylesheet with the
new stylesheet, so you had best set all the attributes of Leo's
default stylesheet.

As an alternative, if w is any Qt widget, w.setStyleSheet(p.b) will
set the stylesheet for that widget only: the top-level stylesheet (the
stylesheet for c.frame.top.leo_ui) remains unchanged.
</t>
<t tx="ekr.20120229094652.15151">http://groups.google.com/group/leo-editor/browse_thread/thread/b49d23010703aa61/32e1271d25ba2cfb
</t>
<t tx="ekr.20120229094652.15153">http://groups.google.com/group/leo-editor/browse_thread/thread/3666397da2a0d05f/758071d6d9516ab9

The right-click context menu on the tabs in the tabbed window mode (the
default) has a 'Detach' option, if there's more than one outline/tab, and a
Re-attach all option, if there's a detached outline window out there.

Now there's also 'Horizontal tile', and 'Vertical tile', which detach the
tab and then tile its window with the window from which it was detached.

This is very helpful for moving nodes between outlines, I was rearranging
the windows by hand and setting one to 'always on top' with the window
manager before. Note: there's a @setting to determine whether dragging
nodes between outlines copies or moves them.

Depending on your OS / window manager, tiling / placement may be somewhat
off, and may work better with or without the window being maximized before
tiling, you'll have to experiment.

When you close an outline window created by detaching a tab the outline is
just re-attached as a tab. This means it's now possible to reattach just
one outline, rather than having to use the 'reattach all' option.
</t>
<t tx="ekr.20120229094652.15157"></t>
<t tx="ekr.20120229094652.15158">After so many years of confusion the problem is now apparent:
the Windows console uses code page 437: which is just extended ascii.

chcp 65001 is equivalent to utf-8, and it would be good to use,
but at present bzr goes nuts and changes to another code page!

So for the moment I'll have to live with what is, in effect, plain ascii.
</t>
<t tx="ekr.20120229094652.15159">On Ubuntu only, the auto complete popup is system-wide modal, it should only be modal over Leo windows.

However, there does not seem to be any fix:
http://groups.google.com/group/leo-editor/browse_thread/thread/171aaf79e0bea256

All works well on Windows 7.  I do see the "system-wide" model
behavior on Ubuntu.

This appears to be a Ubuntu-specific bug.  Indeed, the popup is a
QListWidget.  Such widgets have a setWindowModality method::

    setWindowModality ( Qt::WindowModality windowModality )

The valid modalities are at: http://doc.qt.nokia.com/4.7-snapshot/qt.html#WindowModality-enum

NonModal: The window is not modal and does not block input to other
windows.

WindowModal: The window is modal to a single window hierarchy and
blocks input to its parent window, all grandparent windows, and all
siblings of its parent and grandparent windows.

ApplicationModal: The window is modal to the application and blocks
input to all windows.

None of these would appear to be a system-wide modality, and
furthermore, the default is supposed to be NonModal.

Anyway, calling setWindowModality(QtCore.Qt.NonModal) does not seem to
have much effect on Ubuntu, so I think I can safely say there is
nothing more I can do. 
</t>
<t tx="ekr.20120229094652.15162"></t>
<t tx="ekr.20120229094652.15163"></t>
<t tx="ekr.20120229094652.15164"></t>
<t tx="ekr.20120229094652.15165"></t>
<t tx="ekr.20120229094652.15166"></t>
<t tx="ekr.20120229094652.15168"></t>
<t tx="ekr.20120229094652.15169"></t>
<t tx="ekr.20120229094652.15176"></t>
<t tx="ekr.20120229094652.19777">- open-with hook has changed: it now uses a "d" arg.</t>
<t tx="ekr.20120229173025.20633">http://groups.google.com/group/leo-editor/browse_thread/thread/d21349c52dabd066

Ever find that you have a whole lot of:

.. sourcecode:: py

  rec[f['analyte']] ... rec[f['sample_type']] ...

expressions in your code, and now things have changed and you want them
all to be:

.. sourcecode:: py

  row.Analyte ... row.Sample_Type ...

basically if str variable s was::

  rec[f['analyte']]

then you want to perform:

.. sourcecode:: py

  s = "row."+s.split("'")[1].title()

on each one.  In general it would be nice to be able to use a python
expression when search and replace doesn't cut it.

The button code below creates a button, ``fac``, which, when pressed,
creates another button, with some name you choose, which, when pressed,
executes some python code to fix the selected text in the body.

You can define the code to be executed in two ways, either in its own
node:

 - insert a new node with a headline which describes the refactor
 - enter code in the node which modifies the string variable ``s``,
   which is initially set to the selected text in the body
 - press the ``fac`` button, which creates a new button named
   after this code node
 - select each offending piece of text and press the button created
   in the previous step to fix

or

 - type some code modifying ``s`` right in the body you're working on
 - press the ``fac`` button, which creates a new button named "fix"
 - select each offending piece of text and press the button created
   in the previous step to fix

Note:

 - unlike regular button nodes, changing the code after the
   button's created (first option above) doesn't change the code
   executed by the button
 - replacing selection text makes Leo reposition the insert point at
   the top of the window, this is annoying but unrelated to this code

Here's the button code:

.. sourcecode:: py

  @button fac
    from leo.plugins.mod_scripting import scriptingController

    sc = scriptingController(c)

    if c.frame.body.hasSelection():
        code = c.frame.body.getSelectedText()
        heading = 'fix'
    else:
        code = p.b
        heading = p.h

    def transform(c=c, code=code):
        s = c.frame.body.getSelectedText()
        g.es(s)
        exec code
        g.es(s)
        c.frame.body.deleteTextSelection()
        i = c.frame.body.getInsertPoint()
        c.frame.body.insert(i, s)
        p.b = c.frame.body.getAllText()
        c.frame.body.setInsertPoint(i)

    b = sc.createIconButton(
        heading,
        command = transform,
        shortcut = None,
        statusLine = 'Make filter button',
        bg = "LightBlue"
    ) </t>
<t tx="ekr.20120229173025.20635">@language python

from leo.plugins.mod_scripting import scriptingController

sc = scriptingController(c)

if c.frame.body.hasSelection():
    code = c.frame.body.getSelectedText()
    heading = 'fix'
else:
    code,heading = p.b,p.h

def transform(c=c,code=code):
    w = c.frame.body
    s = w.getSelectedText()
    g.es(s)
    exec(code)
    g.es(s)
    w.deleteTextSelection()
    i = w.getInsertPoint()
    w.insert(i,s)
    p.b = w.getAllText()
    w.setInsertPoint(i)

sc.createIconButton(
    heading,
    command = transform,
    shortcut = None,
    statusLine = 'Make filter button',
    bg = "LightBlue"
)</t>
<t tx="ekr.20120313074006.14640">Leo's abbreviation code is now simpler and more general than before. The
downside is that you will likely have to revise your abbreviations. I
believe the extra work will be well worthwhile.

Here are the changes:

1. Abbreviations may consist of *any* sequence of characters, including
whitespace or "special" characters. You may include whitespace characters
in definitions using the '\t' and '\n' escapes. However, whitespace may
only appear at the *end* of definitions.

2. You must take care to disambiguate abbreviations if one is a prefix of
   another.

Here is an example of both points.  As always, you define
abbreviations in the body of an @global-abbreviation node or
@abbreviation node::

    nc =@nocolor\n
    nc\n=@nocolor\n
    nc\t=@nocolor\n

    ncn=@nocolor-node\n

As you can see, the definitions uses whitespace at the end
of the definition of "nc" to prevent it from being expanded
when typing "ncn".

3. The reason I call these abbreviations "instant" is that they can be
triggered on *any* keystroke, not just the end of a "word".  This
allows you to define::

    teh=the

Hurray!

4. Two rules limit scans.  They are useful and shouldn't cause
hardships.

A.  The backspace and delete characters *never* trigger substitutions.

B. The scan for definitions ends at the first newline
character. Therefore, whitespace will have effect only at
the *end* of a definition.

**Important**: these rules can cause problems when *defining*
abbreviations:  it's easy to trigger an unwanted definition.  The
solution is to use rule 4B:

I want to type::

    ncn=@nocolor-node\n

But I **cant** type this directly if nc is already defined!  The trick
is to type::

   nxcn=@nocolor-node\n

and then delete the leading x with a backspace character.

Of course, you could also turn abbrevions off while defining abbreviations...

Instant abbreviations solve the problems with Brazilian
keyboards. Just define::

    ~a=ã
    ~A=Ã
    etc.

This works regardless of keyboard, regardless of OS, etc.
You might want to define::

    ~\a=~a
    ~\A=~A

in the somewhat unlikely event that you want to type ~a rather than,
say, ~+a.  Of course, you don't need these, provided you remember to
type ~xa &lt;Right&gt;&lt;Delete&gt; :-)
</t>
<t tx="ekr.20120313074006.14643">k.remove_conflicting_definitions always gives the warning, not just when tracing.

The warning isn't the best, and it is usually duplicated, but it is much better than nothing.
</t>
<t tx="ekr.20120313074006.14648">https://bugs.launchpad.net/leo-editor/+bug/930726

Bug: If the node is not expanded already, then the position
is left on the parent, not the first child.

Function expandNodeAndGoToFirstChild() is referenced only
once in LeoPyRef.leo. This reference is in table of public
Leo commands.

The node in which expandNodeAndGoToFirstChild() is defined
also contains the definition of function
expandNodeOrGoToFirstChild(). At present these two functions
are equivalent. The comments including the header for the
node imply that they should not be equivalent and that
expandNodeAndGoToFirstChild() is not correctly implemented.
</t>
<t tx="ekr.20120313074006.14650">https://bugs.launchpad.net/leo-editor/+bug/869429
Undo and Redo delete from context menu does not redo properly

The fix was to deletenodes_rclick in contextmenu.py.
The fallback position should be c.rootPosition()</t>
<t tx="ekr.20120313074006.14655"></t>
<t tx="ekr.20120313074006.14657">https://bugs.launchpad.net/leo-editor/+bug/823267

When tabs are closed with the close tab 'X' on the tab, focus
should go to whichever tab becomes visible, but it does not,
it goes to an arbitrary tab which may not be visible. If you
then hit Alt-X expecting to cut the highlighted node in the
visible tab, you cut a node you can not see in a different
commander.

What I did:
    
- Refactored part of g.app.closeLeoWindow into g.app.selectLeoWindow.
- Added the new_c argument to g.app.closeLeoWindow and c.close.
- Changed several event handlers in TabbedFrameFactor so that they
  call g.app.selectLeoWindow as appropriate.</t>
<t tx="ekr.20120313074006.14663">https://bugs.launchpad.net/leo-editor/+bug/917814
</t>
<t tx="ekr.20120313074006.14697">https://bugs.launchpad.net/leo-editor/+bug/924123

These syntax errors were minor in the sense that they had no
effect on Leo's users, but they were a significant
distribution issue because Linux packages are not to have
such errors.

I removed the following files. Apparently, they are used nowhere in Leo. 
    
    leo/core/leo_Debugger.py
    leo/core/leo_FileList.py"
    leo/core/leo_RemoteDebugger.py
    leo/core/leo_Shell.py
    leo/core/leo_run.py

This files no longer exists:

    leosax.py</t>
<t tx="ekr.20120313074006.14698">https://bugs.launchpad.net/leo-editor/+bug/844953

1. Open two empty files with the LEO revision 4451/trunk using the qttabs GUI and save them both.
2. Create a new node and write "Abc" in its head.
3. Select "Copy Node" from the outline menu.
4. Select "Paste Node As Clone" from the outline menu:
   Node is not inserted as clone, but inserted as a copy in the second file/tab.

Sometimes even a standard Copy-Paste action results in the node being inserted in the other file.

EKR: This a unity menu problem, not a problem with the paste commands per se.

http://qt-project.org/forums/viewthread/15366/

</t>
<t tx="ekr.20120313074006.14702">https://bugs.launchpad.net/leo-editor/+bug/501636
</t>
<t tx="ekr.20120313074006.14713">https://bugs.launchpad.net/leo-editor/+bug/799695

The fix was simply to call c.recolor_now(incremental=False)
</t>
<t tx="ekr.20120313074006.14714">https://bugs.launchpad.net/leo-editor/+bug/824087

The fix was to bind Ctrl-F4 to close-window, instead of Alt-F4.

I instantly like this new binding.
</t>
<t tx="ekr.20120313074006.14715">https://bugs.launchpad.net/leo-editor/+bug/923301
</t>
<t tx="ekr.20120313074006.14738"></t>
<t tx="ekr.20120313074006.14740">https://bugs.launchpad.net/leo-editor/+bug/875323
</t>
<t tx="ekr.20120313074006.14765">https://bugs.launchpad.net/leo-editor/+bug/831658
</t>
<t tx="ekr.20120313074006.14771">https://bugs.launchpad.net/leo-editor/+bug/875327
</t>
<t tx="ekr.20120313074006.14772">https://bugs.launchpad.net/leo-editor/+bug/807561

The isBinaryFile helper returns True if the file's extension is not known.
This isn't great, but it's safe. The list of known text types includes:
    
1. '.css','.html','.leo','.txt'
2. All extensions in g.app.extension_dict.keys().
</t>
<t tx="ekr.20120313074006.14800">@language rest

Example: typing in this rest section recolors as *Python*.
The correct coloring is restored when the entire text is recolored.

In this case, a workaround, and a performance improvement, would be to put
the ``@language python`` directive before the ``language rest``.

@language python


</t>
<t tx="ekr.20120313074006.14906">- Added scanToCursor argument to c.scanAllDirectives in c.insert/removedComments.

- Added scanToCursor argument to get_directives_dict_list in c.scanAllDirectives.

- get_directives_dict_list sets scanToCursor only for the initial (root) node.

- g.get_directives_dict scans to cursor for @language directives is scanToCursor is True.
</t>
<t tx="ekr.20120313074006.15120">https://bugs.launchpad.net/leo-editor/+bug/952365

Improved error reporting and checking, but the file won't be created if
createActualFile takes an IOError.
</t>
<t tx="ekr.20120313074006.15125">https://bugs.launchpad.net/leo-editor/+bug/951921
</t>
<t tx="ekr.20120313074006.16135">http://groups.google.com/group/leo-editor/browse_thread/thread/f7eaf4dd4e84a535

Screenshot here:

https://plus.google.com/103097156557482112329/posts/6qSngscG38Y

Instructions (with current trunk):

- enable bigdash.py plugin
- alt-x global-search
- Enter "s somesearch" in the line editor and press enter
- Browse the hits. Click on link to navigate to the node.

Caveat:

If the document is not in currently active tab, the navigation is
done "in the background". Correct implementation would be to activate
the tab in order to bring attention to it. 
</t>
<t tx="ekr.20120313134250.14232">Support for the open-with command is now part of Leo's core.</t>
<t tx="ekr.20120313134250.14294">**Important**: This was all done in Leo 4.9, but not properly documented.

Allow section references in rst3 command.

http://groups.google.com/group/leo-editor/browse_thread/thread/3cd5cb06d32264d

- Added support for the following options:
    - expand_noweb_references:  default False for compatibility.
    - ignore_noweb definitions: default False for compatibility.

- When expand_noweb_references is True, definitions (typically clones)
  must be descendants of the referencing node (in the @rst tree)
</t>
<t tx="ekr.20120314095341.14216">There no need to disable buttons and commands with \@@button or \@@command.
</t>
<t tx="ekr.20120315101404.14224">@pagewidth 70</t>
<t tx="ekr.20120318075211.6163"></t>
<t tx="ekr.20120318075211.6164"></t>
<t tx="ekr.20120318075211.6165"></t>
<t tx="ekr.20120318075211.6166"></t>
<t tx="ekr.20120318075211.6167">Leo's core now supports opening URL's in several ways:

1. By Control-Clicking the headline of a node containing a URL in its
   headline or the *first* line of its body text.
   
2. The open-url command opens a URL in a nodes headline or the first
   line of its body text.
   
3. By Control-Clicking any URL in the body text.

Notes::

- URL's may optionally start with ``@url``.  Leo removes this prefix
  before trying to open the URL.

- Names of existing files are considered valid URL's. In that case, Leo
  prepends ``file://`` to the file name.
  
- Relative file names are resolved to c.openDirectory, the directory of the
  .leo file.
  
- You may use the {{expression}} syntax in any ``file://`` URL, including
  ``file://`` URL's created from file names.
  
- The bookmarks.py plugin supports all of the features listed above.</t>
<t tx="ekr.20120318075211.6168">This class handles all the messy details of loading .leo files at startup.
This class encapsulates almost all the code in runLeo.py, as well as some
methods in leoGlobals.py that really belong somewhere else.

Creating a class simplifies the code to a surprising degree: 5 or 6 ivars
of the class represent command-line options. These ivars are always
available: there is no need to pass them around as arguments.
</t>
<t tx="ekr.20120318075211.6169">The ModeController class represents a collection of modes. The ModeInfo
class represents a single mode.

Without these classes, the code in leoKeys.py is extremely hard to
understand. In fact, the old code was a perfect example of the problems
with procedural programming: client code was burdened with knowing way too
many details about matters that it shouldn't have to know about.
Furthermore, that data itself is hard to understand: it's too "raw". These
classes provide "identity" for data. repr(aModeInfo) is surprisingly
useful.</t>
<t tx="ekr.20120318075211.6170">This class represents the global log.  It hides the details of the log
from the g.app class and several other pieces of code.

At present, the interface to this class is procedural.  That is, the
present g.app methods that will be moved into this class have a
procedural rather than descriptive nature.  I'm not sure how much this
will change, but creating this class may create opportunities that
were not apparently previously.

</t>
<t tx="ekr.20120318075211.6172">The KeyStroke class is a wrapper for plain strings. It's most important
attribute is its *identity*. It announces that its contents is a
canonicalized value, not a raw user settings string or any other kind of
data associated with key handling.

Similar remarks apply to ShortcutInfo objects. Their identity clarifies the
code. The former code used g.bunches. In complex code such as leoKeys.py,
such anonymous objects really obfuscate matters.

</t>
<t tx="ekr.20120318075211.6173">This class solves a problem that has been annoying me ever since I created
leoEditCommands.py. The problem is this: without this class the classesList
has to be defined at the end of the module, after all classes have been
imported. Worse, several module-level methods were needed to manage the
classesList.

In the new scheme, each Commander creates an EditCommandsManager, and the
code that previously had to call the module-level method
leoEditCommands.x(c) now simply calls c.editCommandManager.x(). This is
much cleaner and avoids several very ugly imports. Which brings me to...
</t>
<t tx="ekr.20120318075211.6174">Now, most modules import only leo.core.leoGlobals. This simplifies Leo's
startup process considerably. This is something that I've wanted to do for
a long time. To make this work, it is *essential* that leoGlobals.py import
*no* other Leo modules.

However, Leo's core still imports leo.core.leoNodes in order to create
positions, vnodes, etc. It would be straightforward to eliminate these by
creating g.app factory methods, but there is no urgent reason to do so.

The ctor for the Commands class imports many modules. This is essential to
break what would otherwise be circular dependencies among Python imports.
We can extend this pattern by creating more classes, as was done with the
EditCommandsManager class.
</t>
<t tx="ekr.20120318075211.6175">leoGlobals.py now contains a section called ``&lt;&lt; global switches &gt;&gt;``

This contains global tracing switches. Experience shows that leoGlobals.py
is the most convenient place for such switches. This section also contains
switches that enable new code bases. Recent examples were::

   new_load = False # True: .leo files are loaded at most once.
   if new_load: print('***** new_load')

   new_modes = False # True: use ModeController and ModeInfo classes.
   if new_modes: print('***** new_modes')
</t>
<t tx="ekr.20120318075211.7524">The new command names and default bindings are::

    run-all-unit-tests-externally       = None
    run-all-unit-tests-locally          = None
    run-marked-unit-tests-externally    = Alt-4 # The new standard
    run-marked-unit-tests-locally       = None
    run-selected-unit-tests-externally  = Alt-5 # The new standard
    run-selected-unit-tests-locally     = None
</t>
<t tx="ekr.20120328102352.5897">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 553, in doCommand
    val = command(event)
  File "c:\leo.repo\trunk\leo\core\leoCommands.py", line 2120, in flattenOutline
    c.importCommands.flattenOutline(fileName)
  File "c:\leo.repo\trunk\leo\core\leoImport.py", line 479, in flattenOutline
    theFile.write(s)
TypeError: must be str, not bytes
</t>
<t tx="ekr.20120328102352.5899">Traceback (most recent call last):
  File "c:\leo.repo\trunk\leo\core\leoPlugins.py", line 337, in callTagHandler
    result = handler(tag,keywords)
  File "c:\leo.repo\trunk\leo\plugins\viewrendered.py", line 560, in update
    f(s,keywords)
  File "c:\leo.repo\trunk\leo\plugins\viewrendered.py", line 655, in update_graphics_script
    pc.gs = QtGui.QGraphicsScene(pc.splitter)
AttributeError: 'ViewRenderedController' object has no attribute 'splitter'
</t>
<t tx="ekr.20120328102352.5900">Selecting body editor with clicks doesn't save/restore visual ivars.
The solution would be to create a new onClick event handler...
</t>
<t tx="ekr.20120328102352.5936">In earlier version of Leo if one runs test externally with the selected
position under @test node, that @test was executed with (run-marked-unit-tests-externally)

The fix was to the "important special case" in TM.findAllUnitTestNodes.
</t>
<t tx="ekr.20120328102352.5938">http://groups.google.com/group/leo-editor/browse_thread/thread/bb063866875a81c3#

The fix is simply to special-case file:/// on Windows in g.computeFileUrl.
</t>
<t tx="ekr.20120328102352.5942"></t>
<t tx="ekr.20120328102352.5946">http://leoeditor.com

- Added link to home page from the TOC.

- Removed online-tutorial link.

- Added search box to Leo's home page.

- Added link to glossary from Leo's home page.

- Added scaled screen shot to Leo's home page.

- Brought screen shots up to date.
</t>
<t tx="ekr.20130327143919.5868">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Leo's home page has moved&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Leo's home page has moved.&lt;/h1&gt;
&lt;p&gt;This page has moved to &lt;a href="http://leoeditor.com"&gt;http://leoeditor.com&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20130404104418.5951">@language rest

- Don't read code: use g.trace and g.pdb instead.
- Where the bodies are hidden.
    - self.w in leoEditCommands.py
- Complex code that *can't* be simplified.
- The top 20 methods.  You must understand these *in general*.
    - k.masterKeyHandler.
    - qt.eventFilter.
    - 
    
    
** Add mandatory _kind fields to all g.Bunches.</t>
<t tx="ekr.20130411023340.5976"></t>
<t tx="ekr.20130411023340.5978"></t>
<t tx="ekr.20130411023340.5979"></t>
<t tx="ekr.20130411023340.5980"></t>
<t tx="ekr.20130411023340.5981">@language rest

Adds configurable right-click menu items to nodes.
</t>
<t tx="ekr.20130411023340.5982"></t>
<t tx="ekr.20130411023340.5983"></t>
<t tx="ekr.20130411135403.5972">@language rest

Leo looks like relatively ordinary outline editor,
but it has unique scripting and data-organizing abilities.

Scripting
---------

- Any node in the outline may contain a Leo script.
- Leo can *compose* scripts from a node and its descendants.
- Leo scripts can *easily* access all the data in any outline.

Leo scripts can do things that can't be *imagined* in other editors.

Data-organizing
---------------

- Cloned nodes may appear many times in the same outline.
- Clones create views of data that persist indefinitely.
  Any set of nodes may appear in arbitrirly many views of the data.
- Headlines naturally describe the data contained in nodes.


Script nodes
------------

There are many ways to combine these capabilities.
</t>
<t tx="ekr.20130413153344.14589">@wrap
@language rest

.. |br| raw:: html

   &lt;br /&gt;
   
**Leo completely integrates scripting and outlines.** |br|
Leo outlines are true Python objects, not just text.

\1. **Headlines naturally define types**, such as:

**@file** trees create external files. |br|
**@test** nodes and trees create unit tests. |br|
**@button** nodes create **script buttons**. |br|
**@command** nodes create user-defined commands. |br|
**@html** trees create web pages. |br|
**@settings** trees contain Leo settings.

\2. **Any node may contain a Leo script**:

A simple outline-aware markup language creates scripts |br|
and external files from outline nodes and trees.

\3. **Leo scripts have *easy* access to all outline data**:

All Leo scripts execute with these **predefined symbols**: |br|
**c** gives access to all outline data and all of Leo's code. |br|
**p** is the presently selected node in the script. |br|
**p.h** is the headline text; **p.b** is the body text. |br|
**g** is a module containing utility functions &amp; classes.

\4. **All parts of Leo are scriptable**, including: |br|

.. In short, all outline data are completely scriptable.</t>
<t tx="ekr.20130526065545.14924">@language rest
</t>
<t tx="ekr.20130526065545.14925">4/16/12

Apart from the full text search indexing script I just added, I've made
a bunch of basically cosmetic changes to Ville's multi outline full text
search tool.  There's a new @setting, @int fts_max_hits, which controls
the max hits returned, instead of the hardwired default of 30.

With any sensible value for fts_max_hits, searches for terms which
generate many hits in many outlines won't return the full list of
outlines containing hits, because the search stops when fts_max_hits is
reached.  I set fts_max_hits to a non-sensible 1200 to get around this,
it seems to work fine.  Obviously terms which generate that many hits
are bad search terms anyway, but it's helpful to get as close to the
full list of outlines containing hits as possible.

Also most of my changes apply only to the "f target" find command, not
the simpler "s target" search command.</t>
<t tx="ekr.20130526065545.14926">10/2/11

Can also be used for bookmarking directly from the browser to Leo.  To
do this, add a bookmark to the browser with the following URL / Location:

    javascript:w=window;if(w.content){w=w.content}; d=w.document; w.open('http://localhost:8130/_/add/bkmk/?&amp;name=' + escape(d.title) + '&amp;selection=' + escape(window.getSelection()) + '&amp;url=' + escape(w.location.href),%22_blank%22,%22toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=800, height=300, status=no%22);void(0)

and edit the port (8130 in the example above) to match the port you're using
for mod_http.

Bookmarks are created as the first node in the outline which has been opened longest.
You can set the ``@string`` ``http_bookmark_unl`` to specify an alternative location,
e.g.::

    @string http_bookmark_unl = /home/tbrown/.bookmarks.leo#@bookmarks--&gt;Incoming

to place them in the `Incoming` node in the `@bookmarks` node in the `.bookmarks.leo` outline.

The headline is preceeded with '@url ' *unless* the ``bookmarks`` plugin is loaded.
If the ``bookmarks`` plugin is loaded the bookmark will have to be moved to a ``@bookmarks`` tree to be useful.

The browser may or may not be able to close the bookmark form window for you, depending on settings - set ``dom.allow_scripts_to_close_windows`` to true
in ``about:config`` in Firefox.</t>
<t tx="ekr.20130526065545.14927">As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
imports of .otl files.

**Warning**: the new code is simply a prototype.  Play with these
features *only* on files you can afford to be corrupted.

To use @auto-otl:

1.  The easy, and relatively safe way:

- Use Leo's import-file command to create and populate an @auto-otl
node.
- Save the .leo file.

2. The manual, less safe way:

- Create a node called @auto-otl x.y
  x can be an absolute path or a path relative to the directory
containing the .leo file.

- Save the .leo file, but **do not** overwrite the existing .otl file
when prompted.

Either way, you should now have an @auto-otl node whose **children**
represent the contents of the external .otl file.  (The actual @auto-
otl node is *not* written to the external file.  This allows you to
put Leo directives in the node.) Changing the children in Leo will
change the external file.  Changing the external file outside of Leo
will update the outline the next time you restart the .leo file
containing the @auto-otl node.

**Important**: as with all kinds of @auto nodes, clone links will
break the next time you load Leo if the @auto-otl tree contains any
kind of cloned nodes.  This is pretty much a fundamental limitation of
@auto trees.

However, if the VO people wanted to *retain* gnx's when editing in
vim, it would, in theory, be possible to retain clone links when Leo
read the external .otl file.  I don't plan to do this any time soon,
and it would require and extension to the VO file format, but I wanted
to point out the possibilities.


&gt; **Important**: as with all kinds of @auto nodes, clone links will
&gt; break the next time you load Leo if the @auto-otl tree contains any
&gt; kind of cloned nodes.  This is pretty much a fundamental limitation of
&gt; @auto trees.

I'd like to add two points to this discussion:

1. This limitation instantly disappears when you convert from (any
kind of) @auto to @file.  The reason is that the sentinels that Leo
writes "carry" both outline structure *and* node identity.  It is this
unique, immutable node identity which provides for robust linking of
clones.

I hinted in another thread that a smallish addition to the otl format
would allow .otl files to carry identity.  For example, suppose that
headlines were optionally represented in the file format as::

    &lt;indentation: hard tabs&gt; :: gnx :: headline

The VO folks could do this in an upward compatible manner without
changing vim's core in any way.  True, it doesn't give VO Leo's clone
capabilities, but it *retains* the information necessary to use clones
*in Leo*.

2. Unlike .otl, the external files produced by Leo can be used
*unchanged* as program source files.  Indeed, all of Leo's Python
source files contain outline structure and node identity--Leo
sentinels are simply comment lines in the appropriate language.  In
contrast, the format of .otl files ensures that body text can not be
used untranslated as source code.  It is the ability to *be* source
code, even more than cloning, that makes Leo's external file format so
useful.

&gt; As of rev 5309 of the trunk, Leo now supports @auto-otl, along with
&gt; imports of .otl files.

Rev 5310 contains a rewrite of the scanHelper method.  As before, this
code should be considered experimental.

The scanHelper method now parses each line of the .otl independently:
any combination of headline and body lines should now be valid,
regardless of indentation level.  If necessary, the parser will insert
intermediate nodes so as to allow lines that are indented more than
one more than the previous node. This is the most general scheme that
I can imagine.</t>
<t tx="ekr.20130526065545.14928">From Ville:

.... aaaaand we are live :).

Test it out at:

http://koti.kapsi.fi/vivainio/t/LeoReader/main.html

Sources here:

https://github.com/vivainio/LeoReader

Pretty much all the relevant stuff is in these files:

https://github.com/vivainio/LeoReader/blob/master/leoaccess.coffee

https://github.com/vivainio/LeoReader/blob/master/main.html


On Sat, May 12, 2012 at 12:01 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:
&gt; I want to do some technology evaluation, so I will start doing a Leo
&gt; file reader for mobile devices using:
&gt;
&gt; - jQuery mobile
&gt; - CoffeeScript
&gt;
&gt; This can be deployed on web or locally. Interesting use cases are
&gt; browsing Leo notes you composed elsewhere on your tablet, and
&gt; publishing leo docs on the web (e.g. we could host fully browseable
&gt; leo source outline on Leo website)
&gt;
&gt; I will notify the mailing list on the progress; it may be slow since I
&gt; don't have much contiguous time slots for hobby projects at the
&gt; moment. If someone wants to hop along, all the better; I'll probably
&gt; start the project at github once I have something that runs on a
&gt; desktop browser properly.

btw, noted that it doesn't work with IE (didn't test it at the time, it's easyfix TBD later).

Works ok in Firefox and Chrome.</t>
<t tx="ekr.20130526065545.14929">Edward K. Ream &lt;edreamleo@gmail.com&gt;

A new script, now in scripts.leo, cleans up imported @file nodes as follows:

- Moves a shebang line from the first child to the root.
- Moves a leading docstring in the first child to the root.
- Uses a section reference for declarations.
- Removes leading and trailing blank lines from all nodes.
- Merges a node containing nothing but comments with the next node.
- Merges a node containing no class or def lines with the previous node.

The Aha: dealing with trees *after* they have been created is much
easier than creating the tree in the first place.

It would be impossible to conceive of this script in any other environment.
Leo's node structure drastically simplifies the patterns to be discovered.
</t>
<t tx="ekr.20130526065545.14930">6/2/12

The recursive import script now contains a suite of post-processing fixes:

- Replacing backslashes with forward slashes in headlines.
- Removing empty nodes.
- Adding @path directives that reduce the needed path specifiers in descendant nodes.
- Adding @file to nodes or replacing @file with @@file.


No matter how good Leo's importers are, (and they are now quite good),
there will *always* be cases where thoughtful human intervention will be
required.

Some import mistakes can *only* be found by running tests.  For
complex programs like 2to3, the only truly safe way to check imports
is by running the 2to3 test suite.
</t>
<t tx="ekr.20130526065545.14931">7/11/12
Daniel Rairigh danielrairigh@gmail.com via googlegroups.com 
	
I have been working on learning it this week, and am building quite a list
of questions, but am trying first to answer them from the documentation.

Which leads me to my suggestion:

I read the find and replace instructions here:
http://webpages.charter.net/edreamleo/FAQ.html?highlight=replace#how-can-i-do-a-simple-find-and-replace

And followed the &lt;Ctrl-shift-r&gt;find-pattern&lt;return&gt;replace-text&lt;return&gt;
pattern. But was stumped for quite a while, because the FAQ missed the next
two crucial steps: Ctrl+= &amp; F3

I imagine it would help other newbies like me if those two steps were added
to the FAQ.

Terry Brown &lt;terry_n_brown@yahoo.com&gt;
	
&gt; And followed the &lt;Ctrl-shift-r&gt;find-pattern&lt;return&gt;replace-text&lt;return&gt;
&gt; pattern. But was stumped for quite a while, because the FAQ missed the next
&gt; two crucial steps: Ctrl+= &amp; F3

Ctrl+- combines the effect of Ctrl+= &amp; F3, so you typically only use
Ctrl+= when you know your on the last entry of interest and don't want
to just to the next.

But you're right about the docs, something this basic should be clear.
</t>
<t tx="ekr.20130526065545.14932">Josef &lt;joe_da@gmx.net&gt;
7/30/12
		
Recently I evaluated docear - a mind-mapping tool for collecting reference
data (written in Java). It automatically extracts bookmarks and annotations
from PDF files, and more, but it's support for authoring is still not up to
the task. I think it would be great if Leo could do some of the tasks
docear is doing.

Leo is primarily a literate programming editor, but also quite good at
organizing bits of information. Dragging a PDF into Leo currently just
creates an url to the PDF. This could be expanded to also extract data
(bookmarks, notes) from the PDF and to sync this data between Leo and the
PDF. This info could be placed in child nodes: bookmarks and notes could
even jump directly to the page in the PDF (although each PDF viewer seems
to have a different syntax for doing that). This would be a great way to
organize data sheets and specifications stemming from external sources.

Combining the above with an improved LaTeX support, one would get a very
powerful research and authoring tool - in my opinion with a much more
convenient interface than docear.

Perhaps it is too much work to duplicate all the work docear is doing. An
alternative may be to sync data somehow between docear and Leo. Docear
stores the data in a freeplane mind-map. Has anyone else thoughts about
this? Offray Vladimir Luna Cárdenas offray@riseup.net via googlegroups.com
	
7/30/12
		
I have been using Leo to write my thesis. I didn't know about Docear, but
my use was in some sense similar. I have a lot of @url links pointint to
the pdfs files and in a subtree I cut and paste the text of the pdf I want
to comment and made the comments inside the tree. These pdf were part of my
bibliographic entries and I'm now writing a .bib file for these, so I can
have in only one Leo tree all my thesis, with all the references to
external files and the annotations and bibtex entries for them. For me the
key point of Leo in academic writing is the tree view plus the clones and
ignore nodes. My thesis can have several layers, the external ones being
the actual writing and the deeper ones the references, texts, images, tools
that enable me to do that writing. Using clones and @rst-no-head directives
I can have the level of granularity of a paragraph, something that is not
possible on traditional word processor which are the writing tool of tools
like docear. This approach have some glitches:

* I still need to do some fine tunning to the LaTeX export for writing the
pdf as I want. I imagine that putting sphinx in the tool chain could change
that.

* I can not get much people of my companions using this advangages, besides
of myself, because of the difficult installation process of Leo in
Windows/Mac and the not so friendly interface for non-programmers. Other
light markup structured text writing programs like Nested[1] are more
easily used and understood despite of not having all the advantages and
flexibility of Leo.

So, in resume, may be the better approach is connecting Leo to Docear, so
you can have the advantages of both in terms of easy multiplataform
installation and friendly interface of the later and programmability,
flexibility and deeper organic structure of the former.

Offray

Terry Brown &lt;terry_n_brown@yahoo.com&gt;


&gt; Recently I evaluated docear - a mind-mapping tool for collecting reference
&gt; data (written in Java). It automatically extracts bookmarks and annotations
&gt; from PDF files, and more, but it's support for authoring is still not up to
&gt; the task. I think it would be great if Leo could do some of the tasks
&gt; docear is doing.
&gt;
&gt; Leo is primarily a literate programming editor, but also quite good at
&gt; organizing bits of information.

I would describe it as an general purpose outline that's very good at
editing code.

&gt; Dragging a PDF into Leo currently just
&gt; creates an url to the PDF. This could be expanded to also extract data
&gt; (bookmarks, notes) from the PDF and to sync this data between Leo and the
&gt; PDF. This info could be placed in child nodes: bookmarks and notes could
&gt; even jump directly to the page in the PDF (although each PDF viewer seems
&gt; to have a different syntax for doing that). This would be a great way to
&gt; organize data sheets and specifications stemming from external sources.

I'm not really sure how notes get embedded in PDFs.  As an aside, there
is also capability for using Leo to manage bookmarks to web pages, with
notes, tags, and snippets.  Look at the mod_http plugin.  It uses a
javascript bookmark button in your browser to communicate with Leo.

&gt; Combining the above with an improved LaTeX support, one would get a very
&gt; powerful research and authoring tool - in my opinion with a much more
&gt; convenient interface than docear.
&gt;
&gt; Perhaps it is too much work to duplicate all the work docear is doing. An
&gt; alternative may be to sync data somehow between docear and Leo. Docear
&gt; stores the data in a freeplane mind-map. Has anyone else thoughts about
&gt; this?

Syncing between the two sounds a little cumbersome to me.  I wonder if
the PDF stuff could be integrated with some sort of BibTeX .bib file
management?

Do you really need the mindmap UI of docear?  I used to use Freemind
which has a very similar interface, but switched to Leo.  I like what
http://cmap.ihmc.us/ does, but it only does idea organization, no
authoring etc.  To me cmaptools is better at idea organizing than
mindmaps.

There is also the backlinks plugin for Leo, which allows arbitrary
networks of links instead of just the directed tree, and graphcanvas,
which allows graph layout of nodes.  There aren't comparable with the
mindmap layouts, but they head in that direction.  Also note Leo's
hidden UI flexibility in the context menus on the pane dividers, you
can open a new window for the graphcanvas plugin, which gives it much
needed screen real estate.

Cheers -Terry

Josef &lt;joe_da@gmx.net&gt;
7/30/12
		
no, I do not need the mindmap stuff at all. I had a look at short look at
cmaptools, and I agree the generalized graph approach seems better than a
standard mindmap. But I am quite happy with the tree view in Leo and as you
already mentioned, this can be extended with backlinks etc. I have used Leo
already to organize reference documents and write documentation (using
Latex).

What I do want is links to a particular page of a PDF - links to just a
file are not enough when you refer to documents with 100+ pages.
Unfortunately this seems to be difficult to achieve in a cross-platform
way, particular when trying to support different PDF viewers. Docear is
solving this (and other compatibility problems) by developing its own
integrated viewer (I do not suggest to do this for Leo).

On second thought, I don't think that extracting the bookmark and
annotation info is really important to me - I would keep that info in the
PDF, anyhow. I would write inside Leo addional notes, and the output text
(in Latex).

Some integration of Bibtex may be a good thing and needs to be thought out
- perhaps by using JabRef for this, or by recycling some pyBibliographer
code, but this is also low on my priority list.

Offray seems to have a very similar use case as I - although I do not write
a thesis, but specifications for scientific instruments. The point about
cross-platform installation ease is also well taken, so I will look into
some inter-operability here (either with docear or cmaptools). I see Leo
mainly as a personal project / information manager: the leo tree is not
easily shared with others, while the files Leo points to with @url, @auto,
@file etc can be shared quite easily. In this I use Leo as *my personal*
view on the project.

Ville Vainio &lt;vivainio@gmail.com&gt;
7/30/12
		
It seems that e.g. w/ foxit reader, you can open selected page from command
line (-n 123). Abstracting this for other pdf readers that support such a
thing should be no problem.
 
On Monday, July 30, 2012 8:08:23 PM UTC+2, Ville M. Vainio wrote:
     
    It seems that e.g. w/ foxit reader, you can open selected page from
    command line (-n 123). Abstracting this for other pdf readers that
    support such a thing should be no problem.
    
Yes, I suppose one could translate from a canonical representation inside
Leo to whatever the tool needs (using @setting). Ideally, one would even
have a choice between opening the new page in a different or in the same
PDF viewer instance as the last page, but few viewers support that (Okular
does - but I don't know any cross-platform solution).
</t>
<t tx="ekr.20130526065545.17427">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

(Possibly uninteresting ramblings)

I'm currently doing some stuff with Angular.js which is using Jasmine for
test cases by default.

Jasmine is using interesting "friendly" terminology for unit testing
concepts.

setup is "beforeEach", teardown is "afterEach".

Test cases and suites are declared with "describe", and "it"; have to say
it looks great in coffeescript:

http://coffeescriptcookbook.com/chapters/testing/testing_with_jasmine

describe 'Calculator', -&gt; it 'can add two positive numbers', -&gt; calculator
= new Calculator() result = calculator.add 2, 3 expect(result).toBe 5 it 'can
handle negative number addition', -&gt; calculator = new Calculator() result
calculator.add -10, 5 expect(result).toBe -5

</t>
<t tx="ekr.20130526065545.17428">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

As of rev 5650, Leo contains support for @testsetup nodes.  At present, I 
am pretty sure they work only when running unit tests locally.

In effect, @testsetup nodes provide common setup code for all following 
@test and @suite nodes.  Such common setup code is the real reason for 
having custom subclasses of unittest.TestCase.  This is a superb Leonine 
solution.  It is much than either

a) @testclass nodes (which I never use) or
b) "injecting" common test code using exec(g.findTestScript(c,'@common 
name-of-common-test-code'))

Leo's test-execution code prepends the body text of an @testsetup node to 
all following @test and @suite nodes.  Multiple @testsetup nodes may appear 
in an outline--the range of an @testsetup node extends over all following 
@test and @suite nodes until the next @testsetup node is seen (in outline 
order).  

This pattern is a direct result of the problems I have been having in the 
static type checking project.  The simplification of test code that has 
resulted is truly remarkable.  A single @testsetup node replaces &lt;&lt;setup&gt;&gt; 
sections that had to be present in every single test.  Hurray!

Edward

</t>
<t tx="ekr.20130526065545.17429">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 23 Apr 2013 05:08:47 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; Hi Terry,
&gt; 
&gt; I just enabled the plugin and tried 'screen-capture-now'. 
&gt; It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
&gt; png file written in the folder.
&gt; I may have missed something? :)

Thanks for the report, I just pushed the fix, you can't have ':' in a
Windows file name.

As for the feedback appearing in the log rather than the console, do
you have a console open?  It may depend on whether you start Leo
with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console
opens, and the filename appears there.

Cheers -Terry

&gt; Here is the log:
&gt; Leo Log Window
&gt; Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
&gt; Python 3.3.1, qt version 4.8.4
&gt; Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
&gt; C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png
&gt; 
&gt; At the leo blog http://leo-editor.github.io/screen_capture.html it says 
&gt; "The only feedback is in the console, as messages in the log would be 
&gt; distracting in the captured image."
&gt; All my feedback is in the log and none in the console.
&gt; 
&gt; Regards
&gt; Lewis
&gt; 

</t>
<t tx="ekr.20130526065545.17430">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Thanks it's working nicely :)
I use console (sourceforge.net/projects/console ) to open leo. I run 
launchleo.py from the leo directory so I'm not sure if python.exe or pythonw.exe are used.
</t>
<t tx="ekr.20130526065545.17431">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;

if you start Leo (or any .py file) by double-clicking on it it's likely
`pythonw.exe` is being used. You can find out for sure with `assoc` and
`ftype` from a command shell:

{{{
C:\\&gt;assoc .py
.py=Python.File

C:\\&gt;ftype Python.File
Python.File="E:\\Python27\\ArcGIS10.1\\pythonw.exe" "%1" %*

C:\\&gt;assoc .leo
.leo=LeoFile

C:\\&gt;ftype LeoFile
LeoFile=b:\\bin\\leo.bat "%1"
}}}

more info: http://ss64.com/nt/ftype.html

</t>
<t tx="ekr.20130526065545.17432">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 21 Apr 2013 08:59:51 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; hi, Terry,
&gt; 
&gt; It seems a great plugin! It is useful for people who write posts about leo.
&gt; 
&gt; 1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
&gt; be updated ;-)

Thanks - Matt has pointed that out too - hard part was searching
through three machines with two accounts on each to find where that
snapshot is actually generated :-)

&gt; 2. btw, can this plugin set a different path to save captured image?

I just pushed

Settings
--------

``@string screen-capture-save-path``
  Save screen shots here instead of ~/.leo/screen_captures
</t>
<t tx="ekr.20130526065545.17433">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

I just enabled the plugin and tried 'screen-capture-now'. 
It creates the folder C:\\Users\\lewis\\.leo\\screen_captures but there is no 
png file written in the folder.
I may have missed something? :)

Here is the log:
Leo Log Window
Leo 4.11 devel, build 5737, 2013-04-23 21:51:45
Python 3.3.1, qt version 4.8.4
Windows 6, 1, 7601, 2, Service Pack 1Screenshot: 
C:\\Users\\lewis\\.leo\\screen_captures\\2013-04-23T21:55:53.png

At the leo blog http://leo-editor.github.io/screen_capture.html it says 
"The only feedback is in the console, as messages in the log would be 
distracting in the captured image."
All my feedback is in the log and none in the console.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17434">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

It seems a great plugin! It is useful for people who write posts about leo.

1. the link to leo-editor web page in http://www.greygreen.org/leo/ should
be updated ;-)
2. btw, can this plugin set a different path to save captured image?
</t>
<t tx="ekr.20130526065545.17435">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

See http://leo-editor.github.io/screen_capture.html

... "screen_capture_now captures an image immediately,
screen_capture_5sec waits five seconds, so you can position the
pointer, open menus etc. The only feedback is in the console, as
messages in the log would be distracting in the captured image."...
</t>
<t tx="ekr.20130526065545.17436">@nocolor

From: tfer &lt;tfetherston@aol.com&gt;

That's how I run Leo, (console is great for windows).  Unless you 
specifically call pythonw.exe it should use python.exe located through your 
"Path" system enbironment variable.  Here is what I use in the shell 
setting for a console "leo" tab:
    cmd.exe /k C:\\entPY27\\python.exe 
"C:\\VC\\Bzr\\leo-editor\\trunk\\launchLeo.py"
the cmd.exe /k portion creates a dos window that the rest of the command 
line is run in, (the dos window is hidden offscreen and console uses its 
magic to present it inside of its buffer.  This now serves as stdio, (and 
stderr) and catches messages written by leo.

Adjust your shell command to where python and leo lives on your machine, 
(found in Edit-&gt;Setting-&gt;Tabs).

Tom

On Wednesday, April 24, 2013 8:41:02 PM UTC-4, lewis wrote:
&gt;
&gt; Terry,
&gt;
&gt; Thanks it's working nicely :)
&gt; I use console (sourceforge.net/projects/console ) to open leo. I run 
&gt; launchleo.py from the leo directory so I'm not sure if  \\python.exe or 
&gt; \\pythonw.exe are used.
&gt;
&gt; Regards
&gt; Lewis
&gt;
&gt; On Tuesday, April 23, 2013 11:24:00 PM UTC+10, Terry wrote:
&gt;&gt;
&gt;&gt;
&gt;&gt; As for the feedback appearing in the log rather than the console, do 
&gt;&gt; you have a console open?  It may depend on whether you start Leo 
&gt;&gt; with ...\\python.exe or ...\\pythonw.exe.  I use the former, a console 
&gt;&gt; opens, and the filename appears there. 
&gt;&gt;
&gt;&gt; Cheers -Terry 
&gt;&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17437">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 18 Sep 2012 05:59:59 -0700 (PDT)
felix74 &lt;hjuucy@googlemail.com&gt; wrote:

&gt; Terry,
&gt;  
&gt; Thanks for your help with this it was very helpful and a lot simpler than I 
&gt; feared. I have managed to get a matplotlib graph embedded within a pane in 
&gt; leo as a widget. I now need some help with how to interact with the 
&gt; widget using scripts in leo. I am unsure about the following:
&gt;  
&gt; *1/ How do I expose the widget within th leo python environment?* 

If you were only going to have one and you weren't going to destroy it,
you could just do something simple like c._matplot = self in its
constrictor (assuming c was passed to the constructor).

If you're going to have more than one and they may be destroyed, it
might be simplest to let the free_layout / nested_splitter system manage
them.

ts = c.free_layout.get_top_splitter()
matplotters = ts.findChildren(myMatplotWidget)

should return a list of the widgets of your class in the layout, but
only if they're in the main window, widgets in extra windows opened
from the "Open window" context menu item would be missed, I can add a
find_children() method to complement the find_child() method the
splitters already have to account for this.

Detail: the above is just using Qt's QObject.findChildren(), the
nested_splitter find_child() and (not yet written) find_children()
versions search the extra windows as well.

&gt; Here I have created a self.mat in your MatplotPaneProvider class to make 
&gt; the windget accessible but it doesn't feel like the correct way to do this. 

It should probably provide a fresh myMatplotWidget every time it's
called, so don't construct one in the Provider's init, but in the
ns_provide method.

&gt; from PyQt4 import QtGui
&gt; class MatplotPaneProvider:
&gt; def __init__(self, c):
&gt;      self.c = c
&gt;     * self.mat = myMatplotWidget()*
&gt;      if hasattr(c, 'free_layout'):
[snip]  
&gt; I would also like to make the widget accessible from any script within 
&gt; leo. What's the leo way of doing this?*

See above.

&gt; If I create more than 1 pane containing these widgest. How do I switch 
&gt; between them in scripts?*

Above again :-)
 
&gt; Running this script more than once creates multiple items for Add 
&gt; Matplot when pressing the Action button. How do I stop this from happening? 
&gt; I have alrewady tried returning a unique integer in * ns_provider_id *but 
&gt; that did not work.*

The value returned by ns_provider_id should be unique for the provider
class, but constant.  So it can just return "matplotlib provider ver 1"
or something.</t>
<t tx="ekr.20130526065545.17438">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Mon, Sep 17, 2012 at 11:46 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Sun, 16 Sep 2012 22:23:18 -0700 (PDT)
&gt; felix74 &lt;hjuucy@googlemail.com&gt; wrote:
&gt;
&gt; &gt; I'm trying to create a interactive chart in a embedded in a new leo pane
&gt; &gt; using matplotlib. However, I am not sure about the the best way  to
&gt; &gt; implement this. I would appreciate some guidance on this please? The
&gt; &gt; questions I would like answered are:
&gt; &gt; 1/ How do I create a new blank pane for embedding a chart as well as
&gt; other
&gt; &gt; QtWidgets.
&gt; &gt; 2/ Can I do this in a script or do I need to work with leo source
&gt;
&gt; You can run this script from any body pane:
&gt;

[Snip]

I'm going to file this under Leo/To Document for now.

Would this be a good blog item?  These blog items might eventually find
their way into an ever-expanding "Topics" chapter.  What do you think?
</t>
<t tx="ekr.20130526065545.17439">@nocolor

From: felix74 &lt;hjuucy@googlemail.com&gt;

I'm trying to create a interactive chart in a embedded in a new leo pane 
using matplotlib. However, I am not sure about the the best way  to 
implement this. I would appreciate some guidance on this please? The 
questions I would like answered are:
1/ How do I create a new blank pane for embedding a chart as well as other 
QtWidgets.
2/ Can I do this in a script or do I need to work with leo source 

The context for wanting to do this is that I want to create a data 
processing and visualization tool kit in leo. Like Excel but using nodes 
instead of columns. As such I have data in nodes and can create new data 
nodes by applying python functions to data in existing nodes. The thing 
missing is the visualization within a leo pane (I can easily launch a chart 
in it's own window) .

</t>
<t tx="ekr.20130526065545.17440">@nocolor

From: felix74 &lt;hjuucy@googlemail.com&gt;


Terry,
 
Thanks for your help with this it was very helpful and a lot simpler than I 
feared. I have managed to get a matplotlib graph embedded within a pane in 
leo as a widget. I now need some help with how to interact with the 
widget using scripts in leo. I am unsure about the following:
 
*1/ How do I expose the widget within th leo python environment?* 
Here I have created a self.mat in your MatplotPaneProvider class to make 
the windget accessible but it doesn't feel like the correct way to do this. 
 
from PyQt4 import QtGui
class MatplotPaneProvider:
def __init__(self, c):
     self.c = c
    * self.mat = myMatplotWidget()*
     if hasattr(c, 'free_layout'):
         splitter = c.free_layout.get_top_splitter()
     if splitter:
         splitter.register_provider(self)
    def ns_provides(self):
         return[('Add matplot', '_add_matplot_pane')]
    def ns_provide(self, id_):
         if id_ == '_add_matplot_pane':
         c = self.c
         return self.mat
 
    def ns_provider_id(self):

# used by register_provider() to unregister previously registered
# providers of the same service
# provider ID is not the same as the service id_ above
return "completely unique value here"

 
*mat = MatplotPaneProvider(c)*
*mat.mat.someMethod()*
*mat.mat.someOtherMethod()*
 
*2/I would also like to make the widget accessible from any script within 
leo. What's the leo way of doing this?*
 
*3/ If I create more than 1 pane containing these widgest. How do I switch 
between them in scripts?*
** 
*4/ Running this script more than once creates multiple items for Add 
Matplot when pressing the Action button. How do I stop this from happening? 
I have alrewady tried returning a unique integer in * ns_provider_id *but 
that did not work.*
 
cheers
Hetal
--

On Monday, September 17, 2012 5:48:32 PM UTC+1, Terry wrote:

&gt; On Sun, 16 Sep 2012 22:23:18 -0700 (PDT) 
&gt; felix74 &lt;hju...@googlemail.com &lt;javascript:&gt;&gt; wrote: 
&gt;
&gt; &gt; I'm trying to create a interactive chart in a embedded in a new leo pane 
&gt; &gt; using matplotlib. However, I am not sure about the the best way  to 
&gt; &gt; implement this. I would appreciate some guidance on this please? The 
&gt; &gt; questions I would like answered are: 
&gt; &gt; 1/ How do I create a new blank pane for embedding a chart as well as 
&gt; other 
&gt; &gt; QtWidgets. 
&gt; &gt; 2/ Can I do this in a script or do I need to work with leo source 
&gt;
&gt; You can run this script from any body pane: 
&gt; ---cut here--- 
&gt; from PyQt4 import QtGui 
&gt; class MatplotPaneProvider: 
&gt;     def __init__(self, c): 
&gt;         self.c = c 
&gt;         if hasattr(c, 'free_layout'): 
&gt;             splitter = c.free_layout.get_top_splitter() 
&gt;             if splitter: 
&gt;                 splitter.register_provider(self) 
&gt;     def ns_provides(self): 
&gt;         return[('Add matplot', '_add_matplot_pane')] 
&gt;     def ns_provide(self, id_): 
&gt;         if id_ == '_add_matplot_pane': 
&gt;             c = self.c 
&gt;             w = QtGui.QSlider() 
&gt;             return w 
&gt;     def ns_provider_id(self): 
&gt;         # used by register_provider() to unregister previously registered 
&gt;         # providers of the same service 
&gt;         # provider ID is not the same as the service id_ above 
&gt;         return "completely unique value here" 
&gt;
&gt; MatplotPaneProvider(c) 
&gt; ---cut here--- 
&gt;
&gt; Paste just as above and run the script.  Nothing happens.  Right click 
&gt; on one of the pane dividers and select Insert.  A new pane with a 
&gt; button 'Action' appears.  Click it, and select "Add matplot" from the 
&gt; context menu. 
&gt;
&gt; Instead of "w = QtGui.QSlider()", you want "w = myMatplotWidget()" 
&gt;
&gt; Cheers -Terry 
&gt;
&gt;
&gt; &gt; The context for wanting to do this is that I want to create a data 
&gt; &gt; processing and visualization tool kit in leo. Like Excel but using nodes 
&gt; &gt; instead of columns. As such I have data in nodes and can create new data 
&gt; &gt; nodes by applying python functions to data in existing nodes. The thing 
&gt; &gt; missing is the visualization within a leo pane (I can easily launch a 
&gt; chart 
&gt; &gt; in it's own window) . 
&gt; &gt; 
&gt;

</t>
<t tx="ekr.20130526065545.17441">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 16 Sep 2012 22:23:18 -0700 (PDT)
felix74 &lt;hjuucy@googlemail.com&gt; wrote:

&gt; I'm trying to create a interactive chart in a embedded in a new leo pane 
&gt; using matplotlib. However, I am not sure about the the best way  to 
&gt; implement this. I would appreciate some guidance on this please? The 
&gt; questions I would like answered are:
&gt; 1/ How do I create a new blank pane for embedding a chart as well as other 
&gt; QtWidgets.
&gt; 2/ Can I do this in a script or do I need to work with leo source 

You can run this script from any body pane:
---cut here---
from PyQt4 import QtGui
class MatplotPaneProvider:
    def __init__(self, c):
        self.c = c
        if hasattr(c, 'free_layout'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[('Add matplot', '_add_matplot_pane')]
    def ns_provide(self, id_):
        if id_ == '_add_matplot_pane':
            c = self.c
            w = QtGui.QSlider()
            return w
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        # provider ID is not the same as the service id_ above
        return "completely unique value here"

MatplotPaneProvider(c)
---cut here---

Paste just as above and run the script.  Nothing happens.  Right click
on one of the pane dividers and select Insert.  A new pane with a
button 'Action' appears.  Click it, and select "Add matplot" from the
context menu.

Instead of "w = QtGui.QSlider()", you want "w = myMatplotWidget()"

Cheers -Terry


&gt; The context for wanting to do this is that I want to create a data 
&gt; processing and visualization tool kit in leo. Like Excel but using nodes 
&gt; instead of columns. As such I have data in nodes and can create new data 
&gt; nodes by applying python functions to data in existing nodes. The thing 
&gt; missing is the visualization within a leo pane (I can easily launch a chart 
&gt; in it's own window) .
&gt; 

</t>
<t tx="ekr.20130526065545.17442">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 2. The same exec statement appears to allow the execution of arbitrary
&gt; Python code.  I'm not sure how comfortable I am with that.  Any
&gt; comments?

That's why enabling requires @bool scripting-at-script-nodes = True as
well as the abbreviation specific stuff.  The risk seems equivalent to
the scripting-at-script-nodes = True risk.

&gt; &gt; Here's a quick screencast of the template expansions:  
&gt; 
&gt; I loved this screencast.  Could you tell us the tool chain that you
&gt; used to produce it?

I used (gtk-)recordmydesktop.  I used the non-gui version,
recordmydesktop, with the window ID, after hitting some snag I can't
remember with the gui version, gtk-recordmydesktop.  But I couldn't
work out avconv parameters to convert the ogv format to something more
common, and although vimeo seemed to understand it well enough to
upload the video and present the first frame, it wasn't viewable
there.  recordmydesktop "just worked", which was nice.

I'll look at the Python 3 issues.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17443">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

"On Wed, Aug 22, 2012 at 8:52 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; Abbreviations can, in the branch
&gt; http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test
&gt; include computed values and place holders which you can step through,
&gt; filling in a template.  Edward, these changes involve some core code,
&gt; although I think they're quite benign, but pls. see change notes at
&gt; the bottom of this email.

This is great work, Terry.  Many thanks for it.

Just installed the leo_test branch and have taken a careful look at
the log.  Here are my comments.

1. The exec statement in abbrevClass.finishCreate should be rewritten
for Python3.  Please make sure the code passes all unit tests when
unitTest.leo is run with Python3.

2. The same exec statement appears to allow the execution of arbitrary
Python code.  I'm not sure how comfortable I am with that.  Any
comments?

Aside from that, all looks well.  Feel free to merge with the trunk
after ensuring that the code works with Python 3.

&gt; Here's a quick screencast of the template expansions:

I loved this screencast.  Could you tell us the tool chain that you
used to produce it?

&gt; Here are the draft docs. for abbreviations:

Good work.  I see that you merged them into LeoDocs.leo, which I like.

Edward
"</t>
<t tx="ekr.20130526065545.17444">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wed, Aug 29, 2012 at 2:33 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:
&gt; On Tue, 28 Aug 2012 08:48:54 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt;&gt; 1. The exec statement in abbrevClass.finishCreate should be rewritten
&gt;&gt; for Python3.  Please make sure the code passes all unit tests when
&gt;&gt; unitTest.leo is run with Python3.
&gt;
&gt; Done, added g.do_exec for this.

Thanks Terry.  Looks good.

Edward
</t>
<t tx="ekr.20130526065545.17445">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Abbreviations can, in the branch
http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test
include computed values and place holders which you can step through,
filling in a template.  Edward, these changes involve some core code,
although I think they're quite benign, but pls. see change notes at
the bottom of this email.

Here's a quick screencast of the template expansions:
http://www.greygreen.org/tmp/leoabbrev.ogv
I tried uploading it to Vimeo, but that seems to have failed
(http://www.vimeo.com/48019375)

Here are the draft docs. for abbreviations:

Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand your input
(just ``"some_function"`` and ``"one, two, three=4"`` to something
like:: 
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;

        Created: Wed Aug 22 10:32:54 CDT 2012
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

They can also close XML tags, enter balanced indented markup for
various languages, etc.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in
individual .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in
@data # global-abbreviation nodes. Typically you would define @data
abbreviation nodes # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \\:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \\|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.


Edward - to look at the changes in theory you could go to

http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test/revision/5430?compare_revid=5424

but in practice I think the lack of context there makes that useless,
an you might want to just pull
http://bazaar.launchpad.net/~terry-n-brown/+junk/leo_test and look at
it with `bzr qlog`.

Some of the code is in masterCommand, which is why I wanted you to look
at it, but it's guarded by if c.abbrev_subst_start:, so it won't do
anything unless enabled.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17446">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 28 Aug 2012 08:48:54 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; 1. The exec statement in abbrevClass.finishCreate should be rewritten
&gt; for Python3.  Please make sure the code passes all unit tests when
&gt; unitTest.leo is run with Python3.

Done, added g.do_exec for this.

So the new abbreviations with template expansion and evaluated
expressions are on the trunk, view the screencast
http://www.greygreen.org/tmp/leoabbrev.ogv
with `vlc` or some such to see them in action.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17451">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:06 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed the solarized dark theme to trunk.


Spectacular.  It looks like you've completed the coding part of the
sprint.  Well done!

Edward
</t>
<t tx="ekr.20130526065545.17452">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, I'm slightly bothered by the fact that color variable names have
"solarized" in them. You are supposed to create new themes by changing
their values in the "config" node, after which the theme is not "solarized"
any more.

how about "@leotheme-c-0" (for color 0) etc.
</t>
<t tx="ekr.20130526065545.17453">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Thanks! Leo feels like a new program now :).
</t>
<t tx="ekr.20130526065545.17454">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;

Re: "toggle between the custom and default leosettings"

This only occurs when the leo session in which I edited the
myLeoSettings file remains in session - I can then cause the toggle to
occur. Once you leave the the leo session, it always loads 
myLeoSettings.leo as expected. 

It took me quite some time to reproduce; when I finally realised how I 
managed to toggle themes
in leo I thought it would be a nice feature to have :)

Regards
Lewis


On Sunday, April 14, 2013 6:35:31 PM UTC+10, lewis wrote:
&gt;
&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
&gt; custom and default leosettings.
&gt; Is that toggle intended? I would have expected that leo should behave 
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;
&gt; Regards
&gt; Lewis
&gt;

</t>
<t tx="ekr.20130526065545.17455">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Sun, Apr 14, 2013 at 3:35 AM, lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt;
&gt; A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and
&gt; Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the
&gt; custom and default leosettings.
&gt;


&gt; Is that toggle intended? I would have expected that leo should behave
&gt; according to the users preferred settings in their myLeoSettings.leo file.
&gt;

Thanks for asking a question, rather than immediately filing a bug report
:-)

The general idea is that opening either of the two settings files must be
handled as something of a special case.  Furthermore, certain settings
(like enabled plugins) are inherently "cumulative": the add to what is
already in effect, rather than override what is in effect.

Settings probably work as one would naively expect when you open a clean
copy of Leo, but there may be some glitches when you open additional
files.  If there is specific behavior that you find dubious, please
describe exactly what it is.  We can discuss it, and you can then file a
bug report if you like.

Edward

</t>
<t tx="ekr.20130526065545.17456">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 22:08:19 +0200
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; BTW, I'm slightly bothered by the fact that color variable names have
&gt; "solarized" in them. You are supposed to create new themes by changing
&gt; their values in the "config" node, after which the theme is not "solarized"
&gt; any more.
&gt; 
&gt; how about "@leotheme-c-0" (for color 0) etc.

The variable replacement runs up to ten levels deep, after which it
bails assuming you've created a loop :-)

So there's nothing wrong with 

  @solarized-yellow = #abcdef

the issue is that `@solarized-yellow` is used in the guts of the
stylesheet definition.  Instead, ideally, but I didn't get to it, in
the config node you'd have

  @solarized-yellow = #abcdef
  ...
  @highlight-hot = @solarized-yellow

and then use `@highlight-hot` in the guts of the
stylesheet definition.

Note - you can't create new themes simply by editing the config
node, it's not possible to create enough constants for every style
element that can be addressed by a stylesheet.

But it would be nice to move all the color and numeric constants out of
the stylesheet and into the config node as I've described above, just a
find and replace operation.

</t>
<t tx="ekr.20130526065545.17457">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Mar 28, 2013 at 7:51 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:


&gt; Maybe the theme shouldn't be called 'solarized', although the color
&gt; definitions in the config node may as well retain their names.


I agree.  Otoh, I am willing to look into creating a true solarized
configuration.  It should look great, and it would allow Leo to appear on
the solarized web page.
</t>
<t tx="ekr.20130526065545.17458">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 27 Mar 2013 20:06:57 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt;  - see the README - if you're already running a dark theme there's a
&gt;    `base` node which can be switched to `@ignore base` to take more
&gt;    advantage of your desktop theme.

p.s. along these lines someone wanted a dark body only, you can get
that by just adding @ignore to all the color related nodes other than
body, or moving all of them under an @ignore node.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17459">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed the solarized dark theme to trunk.  There were some
changes to core code, but nothing too major, and I've been using it for
some time.

In leoSettings.leo there's a new top-level node called 'Themes', which
contains a single theme node at the moment, you can copy that to you
myLeoSettings.leo file under @settings.  Read the README node of the
theme node for more instructions.

The theme is far from perfect - it's relatively easy to get it looking
ok if you're already running a dark desktop theme, which is what I'm
doing, but much harder if you want Leo dark in a light desktop theme,
as you need to theme everything.

 - see the README - if you're already running a dark theme there's a
   `base` node which can be switched to `@ignore base` to take more
   advantage of your desktop theme.

 - note that the new theme system includes a stylesheet authoring 
   tool with macro substitutions :-) you no longer edit
   @data qt-gui-plugin-style-sheet directly but edit a more comfortable
   Leo tree version and then run-script on the appropriate node to
   "compile" to @data qt-gui-plugin-style-sheet

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17460">@nocolor

From: lewis &lt;lewisneal@operamail.com&gt;


Hi Terry,

Many thanks for your work on the dark theme.
I noticed that the behaviour of the theme is affected by it's up/down 
position in the @settings tree:
If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
dark all over as intended.
It may be helpful to document the behaviour.

A question for Edward - Clicking the menu Help&gt;Open leoSettings.leo and 
Help&gt;Open myLeoSettings.leo operates as an immediate toggle between the  
custom and default leosettings.
Is that toggle intended? I would have expected that leo should behave 
according to the users preferred settings in their myLeoSettings.leo file.

Regards
Lewis

</t>
<t tx="ekr.20130526065545.17461">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

BTW, if you prefer the bigger contrast that e.g. Sublime Text 2 has, try
this "config":

https://gist.github.com/vivainio/5261207
</t>
<t tx="ekr.20130526065545.17462">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 14 Apr 2013 01:35:31 -0700 (PDT)
lewis &lt;lewisneal@operamail.com&gt; wrote:

&gt; I noticed that the behaviour of the theme is affected by it's up/down 
&gt; position in the @settings tree:
&gt; If before 'Plugins' it is pale (but boxes are dark), after 'Plugins' it's 
&gt; dark all over as intended.

Thanks - the docs. in the theme node do mention moving other @data
qt-gui-plugin-style-sheet and @color nodes out of the way, but I've
added a couple of notes about putting it at the bottom of the @setting
list to ensure it overrides other settings.  The problem is when the 
default theme's @data qt-gui-plugin-style-sheet node comes after
the dark theme's.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17463">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 28 Mar 2013 05:33:45 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; 
&gt; &gt; It appears that the border around the body pane has disappeared.
&gt; 
&gt; Haha.  There is an interesting tie-in here.
&gt; 
&gt; At present, highlighted text doesn't have the correct colors.  To truly be
&gt; called a solarized scheme, the foreground color of all text must *not*
&gt; change when text is highlighted.  This is the insight and unifying

Maybe the theme shouldn't be called 'solarized', although the color
definitions in the config node may as well retain their names.  I
wasn't really paying attention to the rules for the solarized system,
just using it's palette.  It could be renamed 'leo_dark_zero' or
something.

It did also reveal a code execution pathway anomaly.  When headline
editing is initiated by keyboard (Insert, Ctrl-H) the font-styling on
the edit widget is different than when it's initiated by double
clicking.

Cheers -Terry

&gt; principle of the solarized scheme.  Presumably, this is possible with
&gt; Terry's code.
&gt; 
&gt; The tie in is this:  the border colors *should* also be two of the
&gt; solarized foreground colors: this would make them maximally contrasting
&gt; with either the usual dark background or the light background used when
&gt; text is selected.
&gt; 
&gt; Using a true solarized scheme means:
&gt; 
&gt; a) using the designated solarized background colors: dark by default and
&gt; light for selected text and
&gt; 
&gt; b) using the designated foreground colors for syntax-colored text.
&gt; 
&gt; Imo, this would significantly improve the appearance, and it would honor
&gt; Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
&gt; screen shot of Leo's main window on his web site.
&gt; 
&gt; I won't be able to get around to this today, but I'd like to do it asap.
&gt; Feel free to beat me to the punch ;-)
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130526065545.17464">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, Mar 27, 2013 at 8:35 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; It appears that the border around the body pane has disappeared.

Haha.  There is an interesting tie-in here.

At present, highlighted text doesn't have the correct colors.  To truly be
called a solarized scheme, the foreground color of all text must *not*
change when text is highlighted.  This is the insight and unifying
principle of the solarized scheme.  Presumably, this is possible with
Terry's code.

The tie in is this:  the border colors *should* also be two of the
solarized foreground colors: this would make them maximally contrasting
with either the usual dark background or the light background used when
text is selected.

Using a true solarized scheme means:

a) using the designated solarized background colors: dark by default and
light for selected text and

b) using the designated foreground colors for syntax-colored text.

Imo, this would significantly improve the appearance, and it would honor
Ethan Schoonover's wishes.  When this happens, I'm sure Ethan will put a
screen shot of Leo's main window on his web site.

I won't be able to get around to this today, but I'd like to do it asap.
Feel free to beat me to the punch ;-)
</t>
<t tx="ekr.20130526065545.17465">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;




On Wednesday, March 27, 2013 8:06:57 PM UTC-5, Terry wrote:
&gt;
&gt;
&gt; The theme is far from perfect - it's relatively easy to get it looking 
&gt; ok if you're already running a dark desktop theme, which is what I'm 
&gt; doing, but much harder if you want Leo dark in a light desktop theme, 
&gt; as you need to theme everything. 
&gt;

There is one glitch that I see.  It appears that the border around the body 
pane has disappeared.  I think the border is always important, and the 
proper border color will likely change in the solarized version.  But 
perhaps this is an artifact of my settings--I really haven't investigated 
properly yet. 

&gt;
&gt;  - note that the new theme system includes a stylesheet authoring 
&gt;    tool with macro substitutions :-) you no longer edit 
&gt;    @data qt-gui-plugin-style-sheet directly but edit a more comfortable 
&gt;    Leo tree version and then run-script on the appropriate node to 
&gt;    "compile" to @data qt-gui-plugin-style-sheet 
&gt;

Very cool.  Many thanks for all this work.

Edward

</t>
<t tx="ekr.20130526065545.17466">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

First batch of access rights has been granted


On Fri, Apr 19, 2013 at 10:22 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; http://leo-editor.github.io/
&gt;

</t>
<t tx="ekr.20130526065545.17467">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Note that github rule won't work, since we need to commit to master branch,
not gh-pages branch. We need new make rule for this (cp, git add, commit,
push)

</t>
<t tx="ekr.20130526065545.17468">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

As a primary user, maybe I can post some questions and anwsers which I asked ;-)
</t>
<t tx="ekr.20130526065545.17469">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

On Sun, Apr 21, 2013 at 4:37 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Update: I added Disqus comments, with the unfortunate side effect that we
&gt; now see some ads in the blog. If we find the ads annoying, we can remove
&gt; the comments feature.
&gt;

maybe the ads can be configured?
see this page:
http://software-carpentry.org/4_0/invperc/
it also use Disqus, but I can't find any ad...
</t>
<t tx="ekr.20130526065545.17470">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



&gt; leo-editor is a github team I just created, so I can add people interested
&gt; in blogging there to the team (once I get the github account names)
&gt;

https://github.com/maphew  &lt;maphew@gmail.com&gt;

</t>
<t tx="ekr.20130526065545.17471">@nocolor

From: gatesphere &lt;gatesphere@gmail.com&gt;

The ads can be disabled.  My blog uses Disqus, and I had to disable them 
manually.  Go to Settings -&gt; Discovery, and choose either "Increased 
Traffic" so that the ads are specifically targeting our blog (i.e., they 
will be links to "similar" articles), or to "Just Comments" to turn them 
off completely.

--&gt;Jake
</t>
<t tx="ekr.20130526065545.17475">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;

It occurs to be me that an alternative to managing a list of committers
would be to aggregate posts along the lines of
http://www.planetdjango.org/(I've no idea how that's put together or
if it is indeed less work; just
thought I'd throw it out there).</t>
<t tx="ekr.20130526065545.17476">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 19 Apr 2013 22:22:38 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; http://leo-editor.github.io/

So I made a post.  I could not work out how to get the STATIC_PATH
mechanism working, despite RTFM and reading the source.  So I just
modified the Makefile to copy static/* into output.

Also in the source repo

make github
make: ghp-import: Command not found

so I just copied the output into the blog repo as Ville described - we
need a better way of doing that.

Finally it needs to handle images better, preferable a scaled version
that expands to full size when clicked - but I'm sure that's possible.

Wondering what the relationship between posts about plugins and the
plugin's docstring should be - I guess that can evolve over time.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17477">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I checked on the STATIC_PATH thing, it works ok.

The trick is that if you have e.g.

STATIC_PATHS =3D ['images','mystatic']

you need to put the static files under 'content', i.e. in content/images
and content/mystatic
</t>
<t tx="ekr.20130526065545.17478">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I propose working freely at least for the time being.
</t>
<t tx="ekr.20130526065545.17479">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

I have now added "fabfile.py" with recipe for easy publishing. You need
Fabric installed (usual pip stuff) to use it.

Your workflow will probably be:

"make html"

(or more likely, you'll have devserver running at all times for live
preview)

When you are happy, do "fab publish" and this should publish the updated
version to git.

The script will instruct you if you are doing something wrong, but I
recommend you to review it before trusting it too much.





On Fri, Apr 19, 2013 at 10:22 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; http://leo-editor.github.io/
&gt;

</t>
<t tx="ekr.20130526065545.17480">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

http://leo-editor.github.io/

</t>
<t tx="ekr.20130526065545.17481">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Thanks, I was able to disable the ads from Disqus dashboard.
</t>
<t tx="ekr.20130526065545.17482">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sat, 20 Apr 2013 22:02:33 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; STATIC_PATHS = ['images','mystatic']
&gt; 
&gt; you need to put the static files under 'content', i.e. in content/images
&gt; and content/mystatic

Ah, didn't think to try there, obvious though it is :-)

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17483">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 19 Apr 2013 23:21:50 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; (once I get the github account names)

tbnorth / terry_n_brown@yahoo.com

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17484">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



I pushed some updated content to the blog, and created a repository to host
the "sources" from which the blog is generated here:

https://github.com/leo-editor/leo-blog

Browsing the source should be instructive.

After installing the dependencies and checking out that repo, you should be
able to "make html" or (better) "make devserver" and browse the result in
"output" directory. What I did was cp -r the contents of "output/"
directory to the publishing repository (
https://github.com/leo-editor/leo-editor.github.io), but we can probably
make it quite easy in the future.

leo-editor is a github team I just created, so I can add people interested
in blogging there to the team (once I get the github account names)




On Fri, Apr 19, 2013 at 10:22 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; http://leo-editor.github.io/
&gt;

</t>
<t tx="ekr.20130526065545.17485">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Update: I added Disqus comments, with the unfortunate side effect that we
now see some ads in the blog. If we find the ads annoying, we can remove
the comments feature.

E.g. check towards the end here;

http://leo-editor.github.io/valuespace-intro.html


On Fri, Apr 19, 2013 at 10:22 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; http://leo-editor.github.io/
&gt;

</t>
<t tx="ekr.20130526065545.17486">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

That's great!
I merged the Matt Wilkie's  first patch about the link in
README.md&lt;https://github.com/leo-editor/leo-blog/commit/546940be4337e90c1d18d297e516048e12c8dc27&gt;.
(push merge button feels great ;-)

We do these things freely about the blog?
Or have someone as a master to review pull request?

any idea?
</t>
<t tx="ekr.20130526065545.17487">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Just pushed leo/external/leoftsindex.py:

Stand alone GUI free index builder for Leo's full text search system::

  python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...

If &lt;file&gt; does not contain '#' it's assumed to be a .leo file
to index, and is indexed.

If &lt;file&gt; does contain '#' it's assumed to be a .leo file
containing a list of .leo files to index, with the list in
the node indicated by the UNL after the #, e.g.::

   path/to/myfile.leo#Lists--&gt;List of outlines

In the latter case, if the node identified by the UNL has children,
the list of files to scan is built from the first line of the body
of each child node of the identified node (works well with bookmarks.py).
If the node identified by the UNL does not have children, the
node's body is assumed to be a simple text listing of paths to .leo files).

.. note::
    
    It may be necessary to quote the "file" on the command line,
    as the '#' may be interpreted as a comment delimiter::
        
        python leoftsindex.py "workbook.leo#Links"

</t>
<t tx="ekr.20130526065545.17488">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Mon, Apr 16, 2012 at 5:13 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; Just pushed leo/external/leoftsindex.py:
&gt;
&gt; Stand alone GUI free index builder for Leo's full text search system::
&gt;
&gt;   python leoftsindex.py &lt;file1&gt; &lt;file2&gt; &lt;file3&gt;...
&gt;

Should this be in the blog?  I've filed this under Leo/To Document.

Edward
</t>
<t tx="ekr.20130526065545.17489">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Now I have basic functionality pushed to trunk.

If you want to "spawn" (posibbly several) system commands to background,
use g.procs.add(), like this ctrl+b script:

def L(*args):
    g.es("callback", args)

g.procs.add(['sleep', '4'], "que1")
g.procs.add(['sleep', '3'], "que1", L)
g.procs.add(['sleep', '2'], "que1")
g.procs.add(['sleep', '2'], "que2")

Note how que2 completes first. Idea is that commands in same queue depend
on each other, and thus need to run in sequential order.

This should make waiting for long lasting operations easier as the whole
Leo won't freeze until they are over (but you can still use the stdout /
stderr output from these calls, thanks to the optional callback)

API may change once I start using it (soon).



On Wed, Apr 17, 2013 at 2:48 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt;
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.
&gt;
&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt;

</t>
<t tx="ekr.20130526065545.17490">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 14:48:59 +0300
"Ville M. Vainio" &lt;vivainio@gmail.com&gt; wrote:

&gt; Often, I find myself wanting to execute system commands in serial fashion
&gt; (first in, first out), capture their output, and allow browsing it, BUT not
&gt; blocking Leo or ipython terminal.
&gt; 
&gt; I'd like to show stderr and stdout in g.es, or separate log page, and
&gt; provide callback after task has been completed.

There's the leoscreen stuff for integration with the GNU `screen`
terminal switcher / manager.  Push lines from the body to the terminal,
pull lines back the other way.  But more for interactive interaction
with terminal programs than batch oriented work.  Leo doesn't block.

Cheers -Terry

&gt; Unless anyone has something like this already, I plan to create it "later"
&gt; with QProcess.
&gt; 

</t>
<t tx="ekr.20130526065545.17491">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Often, I find myself wanting to execute system commands in serial fashion
(first in, first out), capture their output, and allow browsing it, BUT not
blocking Leo or ipython terminal.

I'd like to show stderr and stdout in g.es, or separate log page, and
provide callback after task has been completed.

Unless anyone has something like this already, I plan to create it "later"
with QProcess.

===== Terry

There's the leoscreen stuff for integration with the GNU `screen` terminal
switcher / manager. Push lines from the body to the terminal, pull lines
back the other way. But more for interactive interaction with terminal
programs than batch oriented work. Leo doesn't block.

===== Ville

A challenge I can imagine with the "screen" workflow is detecting when a
command has been executed (and capturing stderr/stdout). Do you have a
solution for that in mind?

===== Terry

I tried more direct communication (subprocess.Popen.communicate()) before
the screen approach, it's hard and probably app. specific. leoscreen avoids
that by basically being interactive, so it might not be a fit for your
case. Basically it's leveraging the intelligence of the user to keep track
of execution.

</t>
<t tx="ekr.20130526065545.17494">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:


&gt; Is anyone depending on
&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;

Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

Edward

</t>
<t tx="ekr.20130526065545.17495">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I just pushed two new commands, zoom-in and zoom-out, which increase
or decrease the body text font size by one point size.  They probably
deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'

They leverage the new theme "engine" by manipulating a constant
"@font-size-body".  I've set it up in the default theme, anyone using
the new dark theme will need to add

   @font-size-body = 18px

in the config node for that theme, 

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config

and replace the literal "18px" with "@font-size-body" in the node

@settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17496">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
web browsers?  Unless those already have default keybindings that I'm 
unaware of.

Also, does this work with the default theme?

--&gt;Jake

On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;     @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17497">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

+1. We should do a massive cleanup of keybindings to free up binding space.

On Fri, Apr 12, 2013 at 12:52 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:

&gt; Would you consider moving some bindings from config/leoSettings.leo to
&gt; your myLeoSettings.leo?
&gt;
&gt; It would free up some bindings for folks, and it's one way to survey how
&gt; many others are using them :-]
</t>
<t tx="ekr.20130526065545.17498">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

Would you consider moving some bindings from config/leoSettings.leo to
your myLeoSettings.leo?

It would free up some bindings for folks, and it's one way to survey how many
others are using them :-]

On Thu, Apr 11, 2013 at 1:14 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt; On Thu, Apr 11, 2013 at 8:13 AM, Kent Tenney &lt;ktenney@gmail.com&gt; wrote:
&gt;
&gt;&gt;
&gt;&gt; Is anyone depending on
&gt;&gt; alt-ctrl-a = toggle-find-wrap-around-option ?
&gt;
&gt;
&gt; Absolutely.  I use the Alt-Ctrl bindings in the Find Tab all the time.  I
&gt; don't often use Alt-Ctrl-A, but I wouldn't want to eliminate it.

</t>
<t tx="ekr.20130526065545.17499">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



My vote is for Ctrl-plus/minus, and to Ctrl-scroll-wheel, because these are
consistent across a great many other programs.

It's unfortunate Ctrl-- is already used for for "replace and continue
search", but like others I didn't know about it so haven't become
habituated to it. Who experience pain if this was changed?

-matt

</t>
<t tx="ekr.20130526065545.17500">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

On Thu, Apr 11, 2013 at 7:28 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:
&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and web
&gt; browsers?  Unless those already have default keybindings

I can't find the thread, but I thought we once discussed reducing the number
of bindings defined by default.

running &lt;alt-x&gt; print-bindings makes it clear why it's a challenge to identify
unused bindings.

Maybe each binding has users, but I would expect that most don't.

Is anyone depending on
alt-ctrl-a = toggle-find-wrap-around-option ?

The fewer bindings out of the box, the easier it is for folks extending Leo.

I think a painless way to simplify Leo would be to have a more concise
set of default bindings.

Thanks,
Kent

</t>
<t tx="ekr.20130526065545.17501">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Can we bind them to ctrl+scroll wheel?


On Thu, Apr 11, 2013 at 7:46 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; or decrease the body text font size by one point size.  They probably
&gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt;
&gt; They leverage the new theme "engine" by manipulating a constant
&gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; the new dark theme will need to add
&gt;
&gt;    @font-size-body = 18px
&gt;
&gt; in the config node for that theme,
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt;
&gt; and replace the literal "18px" with "@font-size-body" in the node
&gt;
&gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp;
&gt; source--&gt;Non-color styles (fonts etc.)--&gt;body editor

</t>
<t tx="ekr.20130526065545.17502">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 4/11/2013 8:33 AM, Terry Brown wrote:
&gt; Ctrl-- is replace...
Well then.  Shows how much I use that feature... :p
&gt; Yes, out of the box only with the default theme, you need to make the
&gt; minor edits I described below to get it working in the dark theme.
&gt;
&gt; Cheers -Terry
&gt;
Good to know.  I've been looking for a feature like this for a while.  
Thanks!
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17503">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 08:28:59 -0400
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; May I humbly suggest Ctrl-+ and Ctrl--, like so many other editors and 
&gt; web browsers?  Unless those already have default keybindings that I'm 
&gt; unaware of.

Ctrl-- is replace...

&gt; Also, does this work with the default theme?

Yes, out of the box only with the default theme, you need to make the
minor edits I described below to get it working in the dark theme.

Cheers -Terry

&gt; --&gt;Jake
&gt; 
&gt; On 4/11/2013 12:46 AM, Terry Brown wrote:
&gt; &gt; I just pushed two new commands, zoom-in and zoom-out, which increase
&gt; &gt; or decrease the body text font size by one point size.  They probably
&gt; &gt; deserve default bindings, but to what?  I have them on Ctrl-; and Ctrl-'
&gt; &gt;
&gt; &gt; They leverage the new theme "engine" by manipulating a constant
&gt; &gt; "@font-size-body".  I've set it up in the default theme, anyone using
&gt; &gt; the new dark theme will need to add
&gt; &gt;
&gt; &gt;     @font-size-body = 18px
&gt; &gt;
&gt; &gt; in the config node for that theme,
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;config
&gt; &gt;
&gt; &gt; and replace the literal "18px" with "@font-size-body" in the node
&gt; &gt;
&gt; &gt; @settings--&gt;solarized_dark theme settings--&gt;stylesheet &amp; source--&gt;Non-color styles (fonts etc.)--&gt;body editor
&gt; &gt;
&gt; &gt; Cheers -Terry
&gt; &gt;
&gt; 

</t>
<t tx="ekr.20130526065545.17504">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, Apr 12, 2013 at 1:47 AM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; +1. We should do a massive cleanup of keybindings to free up binding space.
&gt;

This can always be done in myLeoSettings.leo, but I share your concern.

I have the lurking feeling that it would be possible to do some lightweight
modes that define temporary bindings.  This is theoretically possible now
with @mode, but I doubt anyone uses it.  I sure don't.

This could be an important addition to Leo, but for now I've filed it under
Leo/Later :-)

Edward
</t>
<t tx="ekr.20130526065545.17505">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

really, this time.

commit log:

  zoom-in / zoom-out commands
  
  ctrl-mouse wheel scrolling for same
  
  replace old focused pane border highlight with pure stylesheet
  version
  
  rename solarized_dark theme leo_dark_0

Edward, and anyone else using

  @bool use_focus_border = True

this no longer does anything...

now you need to edit

  @data qt-gui-plugin-style-sheet

and change

  @focused-border-style = none

to

  @focused-border-style = solid

for the default theme, if you're using the dark theme, now known as
leo_dark_0, same deal but after editing as above remember to select
and run the 'stylesheet &amp; source' node of that theme.

Cheers -Terry

  

</t>
<t tx="ekr.20130526065545.17506">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;

Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2F103097156557482112329%2Fposts%2F1GjKYTUSTMA&amp;dt=1366183753416&amp;ub=63

You're receiving this email because you are subscribed to Leo Editor on  
Google+.

Leo Editor
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CIDgu4qX0bYCFapzTAod51wAAA&amp;path=%2Fcommunities%2F104562683923003520885&amp;dt=1366183753416&amp;ub=63
</t>
<t tx="ekr.20130526065545.17507">@nocolor

From: wgw &lt;wgwinder@gmail.com&gt;

Xiki.org gives a demo of a "wiki" shell for command execution. Leo should 
be able to do the same thing (and more!), in the sense that leoscreen, for 
example, has two way communication with the command line. I suppose a 
"Lxiki" is really just a question of setting up the right shortcuts (like a 
shift-ctrl-b that would run highlighted python code from the command 
line... with a tmp file?).

Just an idea for the Leo melting pot. 

</t>
<t tx="ekr.20130526065545.17508">@nocolor

From: wgw &lt;wgwinder@gmail.com&gt;



Thanks for the tip -- it will take me a while to get my head around vspace
(will keep an eye on Ville's blog post).

I'm just beginning to appreciate (or imagine) what Ipython, sublime text
editor, leo, xiki, etc could mean for some kind of intelligent document
workbench. Of course the big hurdle is not so much the string processing
(sublime is a good example of how that can be done), but rather the syntax
processing -- i.e. the docbench  (to coin a phrase) should understand the
syntax of whatever is being input and then offer syntax-aware functions....
Sorry, getting a little obscure: all I mean by syntax-aware is the ability
to propose text completions (Leo's autocompletion is a good example --
everything should work like autocomplete!) and allow for intelligent text
changes depending on a database of information (for example, a search and
replace that would  know how to search on "caterpillar" and turn it into
"butterfly" but would not touch "caterpillar truck").

Seems like Leo is not far from doing that synthesis, but it would require
more database integration. So for example, even the python help system does
not have autocomplete. (No criticism there! The great thing about Leo is
that if you want something, you just have to dive in and build it. My day
job might just let me do that!)

Thanks!

Bill
Le dimanche 28 avril 2013 08:37:20 UTC-7, Terry a =E9crit :
&gt;
&gt; On Sat, 27 Apr 2013 17:44:13 -0700 (PDT)
&gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; Xiki.org gives a demo of a "wiki" shell for command execution. Leo
&gt; should
&gt; &gt; be able to do the same thing (and more!), in the sense that leoscreen,
&gt; for
&gt; &gt; example, has two way communication with the command line. I suppose a
&gt; &gt; "Lxiki" is really just a question of setting up the right shortcuts
&gt; (like a
&gt; &gt; shift-ctrl-b that would run highlighted python code from the command
&gt; &gt; line... with a tmp file?).
&gt; &gt;
&gt; &gt; Just an idea for the Leo melting pot.
&gt;
&gt; In addition to the outline as a active data document functions of
&gt; Ville's value-space plugin, I recently added some simple ;-) commands:
&gt;
&gt; Alt+A vs-eval
&gt; Alt+S vs-last
&gt; Alt+D vs-last-pretty
&gt; (my key bindings)
&gt;
&gt; vs-eval evaluates the selected python in the c.vs namespace.  It makes
&gt; an effort to workout what the output should be, and puts it in the
&gt; log.  It captures print output to the log too.  It selects the next
&gt; line, ready for execution.
&gt;
&gt; vs-last inserts the last result into the body, and vs-last-pretty
&gt; does the same, but using pprint formatting.
&gt;
&gt; Ctrl-B also runs the script in the body, but not in a persistent
&gt; namespace, running only the selected text doesn't seem to be working,
&gt; and it doesn't work so hard to work out the output.
&gt;
&gt; I guess leoscreen would do the same things as the vs-* commands if you
&gt; used it against a python shell.  The inspiration for the vs-* commands
&gt; was wanting Leo to tell you what 3.57 * 365 / 12 was without a lot of
&gt; effort, but of course you can define functions etc. etc.
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17509">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 28 Apr 2013 15:24:40 -0700 (PDT)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; Thanks for the tip -- it will take me a while to get my head around vspace
&gt; (will keep an eye on Ville's blog post).

Just to clarify, vs-eval, vs-last, vs-last-pretty are quite straight
forward, as I described them below, and do not require comprehension of
the esoterica of value-space :-) I just put them in that plugin (a) to
avoid creating yet another plugin, and (b) because it seemed sensible
to have them use the value-space namespace c.vs, but all that means for
vs-eval, vs-last, vs-last-pretty is that

  a =3D 7

executed by vs-eval assigns a value to a which can be used by
subsequent vs-eval calls (persistent for the lifetime of the session).

For example, make a body with this text

a =3D 7
b =3D 3
a + b

and place the cursor in front of the first 'a'

execute (Alt-x or key binding) vs-eval 4 times

 - first time executes the empty selection and selects the next line
 - second time assigns 7 to a and report 7 in the log
 - third time assigns 3 to b and report 3 in the log
 - forth time calculates a + b and report 10 in the log

executing vs-last(-pretty) would insert the last result (None, 7, 3,
10) in the body.

Cheers -Terry



&gt; I'm just beginning to appreciate (or imagine) what Ipython, sublime text
&gt; editor, leo, xiki, etc could mean for some kind of intelligent document
&gt; workbench. Of course the big hurdle is not so much the string processing
&gt; (sublime is a good example of how that can be done), but rather the syntax
&gt; processing -- i.e. the docbench  (to coin a phrase) should understand the
&gt; syntax of whatever is being input and then offer syntax-aware functions....
&gt; Sorry, getting a little obscure: all I mean by syntax-aware is the ability
&gt; to propose text completions (Leo's autocompletion is a good example --
&gt; everything should work like autocomplete!) and allow for intelligent text
&gt; changes depending on a database of information (for example, a search and
&gt; replace that would  know how to search on "caterpillar" and turn it into
&gt; "butterfly" but would not touch "caterpillar truck").
&gt;
&gt; Seems like Leo is not far from doing that synthesis, but it would require
&gt; more database integration. So for example, even the python help system does
&gt; not have autocomplete. (No criticism there! The great thing about Leo is
&gt; that if you want something, you just have to dive in and build it. My day
&gt; job might just let me do that!)
&gt;
&gt; Thanks!
&gt;
&gt; Bill
&gt; Le dimanche 28 avril 2013 08:37:20 UTC-7, Terry a =E9crit :
&gt; &gt;
&gt; &gt; On Sat, 27 Apr 2013 17:44:13 -0700 (PDT)
&gt; &gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt; &gt;
&gt; &gt; &gt; Xiki.org gives a demo of a "wiki" shell for command execution. Leo
&gt; &gt; should
&gt; &gt; &gt; be able to do the same thing (and more!), in the sense that leoscreen,
&gt; &gt; for
&gt; &gt; &gt; example, has two way communication with the command line. I suppose a
&gt; &gt; &gt; "Lxiki" is really just a question of setting up the right shortcuts
&gt; &gt; (like a
&gt; &gt; &gt; shift-ctrl-b that would run highlighted python code from the command
&gt; &gt; &gt; line... with a tmp file?).
&gt; &gt; &gt;
&gt; &gt; &gt; Just an idea for the Leo melting pot.
&gt; &gt;
&gt; &gt; In addition to the outline as a active data document functions of
&gt; &gt; Ville's value-space plugin, I recently added some simple ;-) commands:
&gt; &gt;
&gt; &gt; Alt+A vs-eval
&gt; &gt; Alt+S vs-last
&gt; &gt; Alt+D vs-last-pretty
&gt; &gt; (my key bindings)
&gt; &gt;
&gt; &gt; vs-eval evaluates the selected python in the c.vs namespace.  It makes
&gt; &gt; an effort to workout what the output should be, and puts it in the
&gt; &gt; log.  It captures print output to the log too.  It selects the next
&gt; &gt; line, ready for execution.
&gt; &gt;
&gt; &gt; vs-last inserts the last result into the body, and vs-last-pretty
&gt; &gt; does the same, but using pprint formatting.
&gt; &gt;
&gt; &gt; Ctrl-B also runs the script in the body, but not in a persistent
&gt; &gt; namespace, running only the selected text doesn't seem to be working,
&gt; &gt; and it doesn't work so hard to work out the output.
&gt; &gt;
&gt; &gt; I guess leoscreen would do the same things as the vs-* commands if you
&gt; &gt; used it against a python shell.  The inspiration for the vs-* commands
&gt; &gt; was wanting Leo to tell you what 3.57 * 365 / 12 was without a lot of
&gt; &gt; effort, but of course you can define functions etc. etc.
&gt; &gt;
&gt; &gt; Cheers -Terry
&gt; &gt;
&gt;

</t>
<t tx="ekr.20130526065545.17510">@nocolor

From: wgw &lt;wgwinder@gmail.com&gt;

Got it! The value of valuespace (!) is that that you can make a pythonesque
session persist. I did not realize that there was no direct two-way bridge
to the python window that leo launches. Even if there were, we would want
to make the session persist by logging it into the outline, as
valuespace (vs-create-tree) does.

Thanks for getting me up and running.

Best, Bill

Le dimanche 28 avril 2013 16:03:52 UTC-7, Terry a =E9crit :
&gt;
&gt; On Sun, 28 Apr 2013 15:24:40 -0700 (PDT)
&gt; wgw &lt;wgwi...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; Thanks for the tip -- it will take me a while to get my head around
&gt; vspace
&gt; &gt; (will keep an eye on Ville's blog post).
&gt;
&gt; Just to clarify, vs-eval, vs-last, vs-last-pretty are quite straight
&gt; forward, as I described them below, and do not require comprehension of
&gt; the esoterica of value-space :-) I just put them in that plugin (a) to
&gt; avoid creating yet another plugin, and (b) because it seemed sensible
&gt; to have them use the value-space namespace c.vs, but all that means for
&gt; vs-eval, vs-last, vs-last-pretty is that
&gt;
&gt;   a =3D 7
&gt;
&gt; executed by vs-eval assigns a value to a which can be used by
&gt; subsequent vs-eval calls (persistent for the lifetime of the session).
&gt;
&gt; For example, make a body with this text
&gt;
&gt; a =3D 7
&gt; b =3D 3
&gt; a + b
&gt;
&gt; and place the cursor in front of the first 'a'
&gt;
&gt; execute (Alt-x or key binding) vs-eval 4 times
&gt;
&gt;  - first time executes the empty selection and selects the next line
&gt;  - second time assigns 7 to a and report 7 in the log
&gt;  - third time assigns 3 to b and report 3 in the log
&gt;  - forth time calculates a + b and report 10 in the log
&gt;
&gt; executing vs-last(-pretty) would insert the last result (None, 7, 3,
&gt; 10) in the body.
&gt;
&gt; Cheers -Terry
&gt;
&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17512">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 4/29/2013 4:42 AM, Ville M. Vainio wrote:
&gt; Hey, it's not that esoteric ;-).
&gt;
&gt; (Really looking forward to writing that blog post, just have had a 
&gt; horrible lack of spare time recently)
&gt;
I'm really looking forward to it, as well!  But I hear you - time has 
been disappearing lately.

</t>
<t tx="ekr.20130526065545.17513">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sat, 27 Apr 2013 17:44:13 -0700 (PDT)
wgw &lt;wgwinder@gmail.com&gt; wrote:

&gt; Xiki.org gives a demo of a "wiki" shell for command execution. Leo should 
&gt; be able to do the same thing (and more!), in the sense that leoscreen, for 
&gt; example, has two way communication with the command line. I suppose a 
&gt; "Lxiki" is really just a question of setting up the right shortcuts (like a 
&gt; shift-ctrl-b that would run highlighted python code from the command 
&gt; line... with a tmp file?).
&gt; 
&gt; Just an idea for the Leo melting pot. 

In addition to the outline as a active data document functions of
Ville's value-space plugin, I recently added some simple ;-) commands:

Alt+A vs-eval
Alt+S vs-last
Alt+D vs-last-pretty
(my key bindings)

vs-eval evaluates the selected python in the c.vs namespace.  It makes
an effort to workout what the output should be, and puts it in the
log.  It captures print output to the log too.  It selects the next
line, ready for execution.

vs-last inserts the last result into the body, and vs-last-pretty
does the same, but using pprint formatting.

Ctrl-B also runs the script in the body, but not in a persistent
namespace, running only the selected text doesn't seem to be working,
and it doesn't work so hard to work out the output.

I guess leoscreen would do the same things as the vs-* commands if you
used it against a python shell.  The inspiration for the vs-* commands
was wanting Leo to tell you what 3.57 * 365 / 12 was without a lot of
effort, but of course you can define functions etc. etc.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17514">@nocolor

From: "Ville Vainio (Google+)" &lt;noreply-7dc29aba@plus.google.com&gt;



Ville Vainio shared a post with Leo Editor.

View:
https://plus.google.com/_/notifications/emlink?emr=02870587547267324596&amp;emid=CNiN2Nzuz7YCFWR8TAodWDAAAA&amp;path=%2F103097156557482112329%2Fposts%2F6D9GPRCdXVh&amp;dt=1366138560104&amp;ub=63
</t>
<t tx="ekr.20130526065545.17515">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Link to G+: https://plus.google.com/103097156557482112329/posts/6D9GPRCdXVh

</t>
<t tx="ekr.20130526065545.17516">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

I have a note that it was an @rclick node handled by the context_menu.py 
plugin, but I am not able to see code or documentation anywhere.  This 
seems *well* hidden :-)
</t>
<t tx="ekr.20130526065545.17518">From: Kent Tenney &lt;ktenney@gmail.com&gt;

I don't have any visual indication of the existence of @rclick nodes,
it would be nice.

Something I've found useful is adding a @click node like:
@rclick -------------

that separates my entries from the ever present
'Remove Button' and 'Goto Script' entries

</t>
<t tx="ekr.20130526065545.17519">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Thu, Apr 11, 2013 at 8:38 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Thu, 11 Apr 2013 20:15:33 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.
&gt; &gt;
&gt; &gt; One more thing.  It's reasonable to have the top-level button just be a
&gt; &gt; placeholder for subsidiary @rclick nodes.  To do that without getting a
&gt; &gt; warning when clicking the top-level button, set its script to "empty
&gt; &gt; string".
&gt;
&gt; I think you mean set its script to a docstring describing the
&gt; functions it groups together for the tooltip hover text :-)
&gt;

Right.

EKR
</t>
<t tx="ekr.20130526065545.17520">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.

One more thing.  It's reasonable to have the top-level button just be a
placeholder for subsidiary @rclick nodes.  To do that without getting a
warning when clicking the top-level button, set its script to "empty
string".

EKR
</t>
<t tx="ekr.20130526065545.17521">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 00:56:51 -0700 (PDT)
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; I have a note that it was an @rclick node handled by the context_menu.py 
&gt; plugin, but I am not able to see code or documentation anywhere.  This 
&gt; seems *well* hidden :-)

:) It's in the core, not context_menu.py.  It was a long time ago, but
I remember finding the @button code tricky, so I'm not sure if it's an
ideal implementation.  OTOH it hasn't broken for 1-2 years.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17522">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, Apr 11, 2013 at 2:56 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

One more thing.  I can now put an @rclick node under an @button node, and
right-clicking the created top-level button work pretty much as expected.

But I remember that on your machine there was some indicator (a triangle?)
in the top-level button indicating that it had structure.  Is that the
case?  If so, how did you create such buttons?

Edward
</t>
<t tx="ekr.20130526065545.17523">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 13:50:25 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, Apr 11, 2013 at 2:56 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; One more thing.  I can now put an @rclick node under an @button node, and
&gt; right-clicking the created top-level button work pretty much as expected.
&gt;
&gt; But I remember that on your machine there was some indicator (a triangle?)
&gt; in the top-level button indicating that it had structure.  Is that the
&gt; case?  If so, how did you create such buttons?

@settings
   @string mod_scripting_subtext =3D =E2=96=BE

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17524">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Thu, 11 Apr 2013 20:15:33 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, Apr 11, 2013 at 8:10 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing Triangle.
&gt;
&gt; One more thing.  It's reasonable to have the top-level button just be a
&gt; placeholder for subsidiary @rclick nodes.  To do that without getting a
&gt; warning when clicking the top-level button, set its script to "empty
&gt; string".

I think you mean set its script to a docstring describing the
functions it groups together for the tooltip hover text :-)

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17525">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, Apr 11, 2013 at 2:24 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:


&gt;    @string mod_scripting_subtext =3D =E2=96=BE
&gt;

Thanks!  I prefer a bigger triangle:  =E2=96=BC U=3D25BC: Black Down-Pointing
Triangle.

EKR
</t>
<t tx="ekr.20130526065545.17526">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, Apr 11, 2013 at 7:29 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Thu, 11 Apr 2013 00:56:51 -0700 (PDT)
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; I have a note that it was an @rclick node handled by the context_menu.py
&gt; &gt; plugin, but I am not able to see code or documentation anywhere.  This
&gt; &gt; seems *well* hidden :-)
&gt;
&gt; :) It's in the core, not context_menu.py.  It was a long time ago, but
&gt; I remember finding the @button code tricky, so I'm not sure if it's an
&gt; ideal implementation.  OTOH it hasn't broken for 1-2 years.
&gt;

Thanks.  I could have sworn I searched Leo's core for @rclick.  Must have
been a searching failure :-)  The code is in
qtIconBarClass.setCommandForButton.

I'll add documentation for this, in leoSettings.leo and also in the
customizing Leo chapter.
</t>
<t tx="ekr.20130526065545.17527">@nocolor

From: SegundoBob &lt;bhossley@ieee.org&gt;

I'm sorry no one has suggested a better way to make the changes
permanent.  How does Leo-Editor notice that typing has inserted a few
more characters?  Couldn't the same mechanism be used here?

On 04/17/2013 12:29 PM, Terry Brown wrote:&gt; I think that's the way,
see also:
&gt;
&gt; https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ
&gt;
Thanks.  I vaguely remembered this thread, but I couldn't find it.

&gt; Depending on your use you might want to
&gt;
&gt;     oldins = w.getInsertPoint()
&gt;
&gt;     ...
&gt;
&gt;     w.setInsertPoint(oldins+len(inserted_text))

http://pastebin.com/GAc15jRL  uses both w.getInsertPoint() and
w.setInsertPoint()

&gt;
&gt; to get the cursor where you want it afterwards, lots of variations how
&gt; the new position might be calculated.
&gt;
&gt; Other possibly useful methods:
&gt;
&gt;     i,j = w.getSelectionRange(sort=True)
&gt;     s = w.getSelectedText()

Yes, these are very useful.
</t>
<t tx="ekr.20130526065545.17528">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 12:09:52 -0700 (PDT)
SegundoBob &lt;bhossley@ieee.org&gt; wrote:

&gt; This thread gives a recipe for inserting text into the body of a node
&gt; at the current cursor:
&gt; 
&gt; http://groups.google.com/group/leo-editor/browse_thread/thread/a08d122e0cf59359/60be2b02f3ef3e94
&gt; 
&gt; Unfortunately, this recipe has a problem:  When focus is moved away
&gt; from and then back to the modified node, the inserted text
&gt; disappears.  That is, Leo-Editor seems unaware of the insertion.
&gt; 
&gt; The following recipe fixes this problem:
&gt; 
&gt; http://pastebin.com/GAc15jRL
&gt; 
&gt; Is this recipe the right way to do it or is there a better way?

I think that's the way, see also:

https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ

Depending on your use you might want to
   
    oldins = w.getInsertPoint() 

    ...

    w.setInsertPoint(oldins+len(inserted_text)) 

to get the cursor where you want it afterwards, lots of variations how
the new position might be calculated.

Other possibly useful methods:

    i,j = w.getSelectionRange(sort=True)
    s = w.getSelectedText()  

Cheers -Terry
</t>
<t tx="ekr.20130526065545.17529">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 17 Apr 2013 16:53:10 -0700 (PDT)
SegundoBob &lt;bhossley@ieee.org&gt; wrote:

&gt; I'm sorry no one has suggested a better way to make the changes
&gt; permanent.  How does Leo-Editor notice that typing has inserted a few
&gt; more characters?  Couldn't the same mechanism be used here?

I don't think Leo constantly updates p.b from w.getAllText(), but just
does it when focus is lost - not sure about that though.

Here's a thought for a higher level interface.

c.get_edit_state() gives you an instance of a LeoEditState class with
these attributes:

  text attributes

  les.all_text
  les.text_before_select
  les.text_after_select
  les.selected_text
  les.text_before_cursor
  les.text_after_cursor

  integer attributes

  les.selection_start
  les.selection_end
  les.cursor_index

then you can either do

c.set_edit_state(les)

which sets the editor text and p.b to les.all_text and sets up
selection and insert position appropriately from the integers,

or c.set_edit_state(les, mode='selection')
or c.set_edit_state(les, mode='cursor')

which assembles things based on the selection or cursor text attributes.

Thoughts?  So long since I wrote any emacs text manipulation stuff I
can't remember the idiom it used.

Cheers -Terry



&gt; On 04/17/2013 12:29 PM, Terry Brown wrote:&gt; I think that's the way,
&gt; see also:
&gt; &gt;
&gt; &gt; https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/insert$20text$20will$20disappear$20after$20insert$20children$20node$20and$20redraw/leo-editor/0haTWrUlNVg/lFU1JkMHrosJ
&gt; &gt;
&gt; Thanks.  I vaguely remembered this thread, but I couldn't find it.
&gt; 
&gt; &gt; Depending on your use you might want to
&gt; &gt;
&gt; &gt;     oldins = w.getInsertPoint()
&gt; &gt;
&gt; &gt;     ...
&gt; &gt;
&gt; &gt;     w.setInsertPoint(oldins+len(inserted_text))
&gt; 
&gt; http://pastebin.com/GAc15jRL  uses both w.getInsertPoint() and
&gt; w.setInsertPoint()
&gt; 
&gt; &gt;
&gt; &gt; to get the cursor where you want it afterwards, lots of variations how
&gt; &gt; the new position might be calculated.
&gt; &gt;
&gt; &gt; Other possibly useful methods:
&gt; &gt;
&gt; &gt;     i,j = w.getSelectionRange(sort=True)
&gt; &gt;     s = w.getSelectedText()
&gt; 
&gt; Yes, these are very useful.
&gt; 
</t>
<t tx="ekr.20130526065545.17530">From: SegundoBob &lt;bhossley@ieee.org&gt;

This thread gives a recipe for inserting text into the body of a node
at the current cursor:

http://groups.google.com/group/leo-editor/browse_thread/thread/a08d122e0cf59359/60be2b02f3ef3e94

Unfortunately, this recipe has a problem:  When focus is moved away
from and then back to the modified node, the inserted text
disappears.  That is, Leo-Editor seems unaware of the insertion.

The following recipe fixes this problem:

http://pastebin.com/GAc15jRL

Is this recipe the right way to do it or is there a better way?
</t>
<t tx="ekr.20130526065545.17531">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 12 Apr 2013 10:09:40 +0800
HaveF &lt;iamaplayer@gmail.com&gt; wrote:

&gt; My workflow is like this
&gt; [e.g., I want to select some text in the body and make transform, then
&gt; insert to the body again]:

Your workflow make sense for the general case of doing any arbitrary
thing with Leo.  For the specific case of manipulating text, I think
the API could be improved, or, seeing the existing API make sense for
what it is, we could have additional "easy text manipulation" API.
So long since I used Emacs I can't really remember its model, and if it
would apply here.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17532">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;

I have read the scripting chapter of leo-editor, and already make my daily
life easier with these quick dirty, but useful scripts.

And I just want to know your workflow of writing leo scripts.

My workflow is like this
[e.g., I want to select some text in the body and make transform, then
insert to the body again]:

1. Abstract the action of word.
[in this case, I choose "select" and "insert" as my key words]

2. search the words at http://leoeditor.com/scripting.html see if there is
existing some related topics.
[I have luck to find
i = w.getInsertPoint()              # Return the location of the cursor.
...
i,j = w.getSelectionRange(sort=True)
...
s = w.getSelectedText()             # Return the selected text, if any.
]

3. but I still don't know how to insert the text to body. So I search the
above function names in the scripts.leo to see the code.
[ I find in
scripts.leo#Scripts--&gt;@thin leoScripts.txt--&gt;Text editing scripts--&gt;insert
begin/endUpdate
...
w.insert(i,s1+'\\n\\t\\t\\n'+s2)
...
seems to help
]

4. test the scripts to see if it works, if it doesn't work, go to 3, to
find more example code.

Any suggestion to improve this workflow?
</t>
<t tx="ekr.20130526065545.17533">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Sun, Apr 7, 2013 at 11:21 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt;
&gt;
&gt; Begin forwarded message:
&gt;
&gt; Date: Fri, 1 Feb 2013 13:08:30 -0600
&gt; From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;
&gt; To: leo-editor@googlegroups.com
&gt; Subject: why Leo
&gt;
&gt;
&gt; Because I have two nodes which were originally identical but are now
&gt; different and I want to see the differences.
&gt;
&gt; My outline loads a @file called ~/.leo/t/gen which contains a @button
&gt; with several @rclick children for commonly used tasks.  So I add a new
&gt; one, @rclick diff
&gt;
&gt;   selected = c.getSelectedPositions()
&gt;   open('/tmp/a_diff', 'w').write(selected[0].b)
&gt;   open('/tmp/b_diff', 'w').write(selected[1].b)
&gt;   import os
&gt;   os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")
&gt;
&gt; which is horrible for a number of reasons but also took only moments
&gt; to write.  And now, not only does this Leo session have a visual node
&gt; diff capability, but also every future session which loads ~/.leo/t/gen.
&gt;
&gt; When you can go from wanting to having a feature in less time than it
&gt; takes to write an email about it - well, that's "why Leo".
&gt;
&gt; (I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
&gt; handling SQL and an XML dialect I use a lot, it's a great way to manage
&gt; little snippet functions)
&gt;
&gt; Cheers -Terry
&gt;

My present thinking is that such tidbits will be lost unless they get put
in an official place.

I have a Leo/To be documented mail folder, and this message is going there
:-)  However, I think this subject would make a good Leo blog entry.

Edward

</t>
<t tx="ekr.20130526065545.17534">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;



Begin forwarded message:

Date: Fri, 1 Feb 2013 13:08:30 -0600
From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;
To: leo-editor@googlegroups.com
Subject: why Leo


Because I have two nodes which were originally identical but are now
different and I want to see the differences.

My outline loads a @file called ~/.leo/t/gen which contains a @button
with several @rclick children for commonly used tasks.  So I add a new
one, @rclick diff

  selected = c.getSelectedPositions()
  open('/tmp/a_diff', 'w').write(selected[0].b)
  open('/tmp/b_diff', 'w').write(selected[1].b)
  import os
  os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")

which is horrible for a number of reasons but also took only moments
to write.  And now, not only does this Leo session have a visual node
diff capability, but also every future session which loads ~/.leo/t/gen.

When you can go from wanting to having a feature in less time than it
takes to write an email about it - well, that's "why Leo".

(I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
handling SQL and an XML dialect I use a lot, it's a great way to manage
little snippet functions)

Cheers -Terry
</t>
<t tx="ekr.20130526065545.17535">@nocolor

From: Randy Kramer &lt;rhkramer@gmail.com&gt;

Rickard,

Very interesting--I'm happy to see someone thinking about how to make 
understanding code bases easier.  (I'm a rather old wannabee programmer, so 
I'm not sure it will ever be of much use to me, nor that I can offer cogent 
comments.)

I will add some comments or questions anyway: ;-)

   * Are you familiar with the concept of literate programming as espoused by 
Donald Knuth and others?  If so, did that influence you at all, and, if so 
how?  (Not that I think literate programming is the way forward, although I 
like the concept and have experimented with it--I once wrote a rather large 
Visual Basic (I know, what can I say, I was stuck in the Microsoft world at 
the time) program using a literate programming approach.  I got it working to 
a degree, but eventually had to devote more time to other things so never got 
it fully up to spec.

   * Darn, I know I had another comment, but I won't remember it until 
sometime after I hit "send" ;-)

The main purpose of my email is to encourage you--anything that can improve 
the understanding of a code base is a good thing--thanks for your efforts!

Randy Kramer





On Sunday 24 February 2013 6:12:16 am Rickard Lindberg wrote:
&gt; I wrote a blog post about how Leo can be used to improve the organization
&gt; of our code bases.
&gt;
&gt; If you are interested, you can read it over here:
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-tog
&gt;ether/
&gt;
&gt; /Rickard


</t>
<t tx="ekr.20130526065545.17536">@nocolor

From: Rickard Lindberg &lt;ricli85@gmail.com&gt;

On Sun, Feb 24, 2013 at 9:07 PM, Randy Kramer &lt;rhkramer@gmail.com&gt; wrote:
&gt; Rickard,
&gt;
&gt; Very interesting--I'm happy to see someone thinking about how to make
&gt; understanding code bases easier.  (I'm a rather old wannabee programmer, so
&gt; I'm not sure it will ever be of much use to me, nor that I can offer cogent
&gt; comments.)

Thank you. Glad you find it interesting.

&gt;    * Are you familiar with the concept of literate programming as espoused by
&gt; Donald Knuth and others?

Yes. I've read about literate programming and also tried it. I found that it
didn't work so well for me for the following reasons (At least that's what I
remember. It was many years since I tried.):

* Focus on text first instead of code made it harder for me to produce working
  code. I sometimes learn how to do something by trying it out and then
  refactor the solution.

* Unless you read the PDF (or whatever the final output is) you loose the
  structure. At least I did. It was just one big file with all kinds of things
  mixed together. An outline structure solves this problem.

&gt; If so, did that influence you at all, and, if so
&gt; how?  (Not that I think literate programming is the way forward, although I
&gt; like the concept and have experimented with it--I once wrote a rather large
&gt; Visual Basic (I know, what can I say, I was stuck in the Microsoft world at
&gt; the time) program using a literate programming approach.  I got it working to
&gt; a degree, but eventually had to devote more time to other things so never got
&gt; it fully up to spec.

It influenced me mostly in that I started to think about how to best present
programs so that humans can understand them. I'm not sure literate programming
like Knuth uses it is the best way (in particular, I think the programs are
harder to modify), but I also think that a folder with just source code is not
so good either.

&gt; The main purpose of my email is to encourage you--anything that can improve
&gt; the understanding of a code base is a good thing--thanks for your efforts!

Thanks for the encouragements.

/Rickard

</t>
<t tx="ekr.20130526065545.17537">@nocolor

From: Rickard Lindberg &lt;ricli85@gmail.com&gt;

I wrote a blog post about how Leo can be used to improve the organization 
of our code bases.

If you are interested, you can read it over here: 
http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/
</t>
<t tx="ekr.20130526065545.17538">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;



Nice article Rickard, I think it captures the background problem well.

I'm not sure the images communicate clones effectively -- but don't really
have an alternative suggestion that would be an improvement. It's just
really hard to appreciate how well they work without experiencing them!

cheers,

-matt


On Sun, Feb 24, 2013 at 3:12 AM, Rickard Lindberg &lt;ricli85@gmail.com&gt; wrote:

&gt; I wrote a blog post about how Leo can be used to improve the organization
&gt; of our code bases.
&gt;
&gt; If you are interested, you can read it over here:
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/
&gt;
&gt; /Rickard
&gt;
&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17539">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 24 Feb 2013 03:12:16 -0800 (PST)
Rickard Lindberg &lt;ricli85@gmail.com&gt; wrote:

&gt; I wrote a blog post about how Leo can be used to improve the organization 
&gt; of our code bases.
&gt; 
&gt; If you are interested, you can read it over here: 
&gt; http://reflectionsonprogramming.com/2013/02/related-things-are-not-kept-together/

Interesting - the python web application framework Django is really
tough in that regard, you might simultaneously want to work on python,
html template, css, java-script, url-dispatch, tests, model definitions.
In fact I've just made some updates to the bookmarks display plugin
which make using it effectively smoother, for a mouse user, anyway, to
help with this.  Will push them soon.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17540">@nocolor

From: Haroldo Stenger &lt;haroldo.stenger@gmail.com&gt;

I'm slowly trying to grok leo. I love meld, it's simply the best text
comparison I've ever seen. I wonder if a greater bit of integration between
meld and leo is possible, and in which ways. Undoubtedly calling it as an
external process is better than anything.
</t>
<t tx="ekr.20130526065545.17541">@nocolor

From: wgw &lt;wgwinder@gmail.com&gt;


Useful!

For fun (and perhaps of some use), here is a brute compare of trees. I use
meld, which has a great interface.

I think I will set up a pyflakes button as well; I haven't seen it as part
of Leo, though the Leo error python messages are good.

-----------------------

def add_text(nd):
    """recursively add to text"""
    text =3D "\\n\\n&gt;&gt; " + nd.h
    text +=3D "\\n\\n%s" % nd.b
    for child in nd.children():
        text +=3D add_text(child)
    return text

selected =3D c.getSelectedPositions()
open('/tmp/a_diff', 'w').write(add_text(selected[0]).encode("utf-8"))
open('/tmp/b_diff', 'w').write(add_text(selected[1]).encode("utf-8"))
import os
os.system("meld /tmp/a_diff /tmp/b_diff &amp;")

-------------


Le vendredi 1 f=E9vrier 2013 11:08:30 UTC-8, Terry a =E9crit :
&gt;
&gt; Because I have two nodes which were originally identical but are now
&gt; different and I want to see the differences.
&gt;
&gt; My outline loads a @file called ~/.leo/t/gen which contains a @button
&gt; with several @rclick children for commonly used tasks.  So I add a new
&gt; one, @rclick diff
&gt;
&gt;   selected =3D c.getSelectedPositions()
&gt;   open('/tmp/a_diff', 'w').write(selected[0].b)
&gt;   open('/tmp/b_diff', 'w').write(selected[1].b)
&gt;   import os
&gt;   os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")
&gt;
&gt; which is horrible for a number of reasons but also took only moments
&gt; to write.  And now, not only does this Leo session have a visual node
&gt; diff capability, but also every future session which loads ~/.leo/t/gen.

&gt;
&gt; When you can go from wanting to having a feature in less time than it
&gt; takes to write an email about it - well, that's "why Leo".
&gt;
&gt; (I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
&gt; handling SQL and an XML dialect I use a lot, it's a great way to manage=

&gt; little snippet functions)
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17543">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

Because I have two nodes which were originally identical but are now
different and I want to see the differences.

My outline loads a @file called ~/.leo/t/gen which contains a @button
with several @rclick children for commonly used tasks.  So I add a new
one, @rclick diff

  selected = c.getSelectedPositions()
  open('/tmp/a_diff', 'w').write(selected[0].b)
  open('/tmp/b_diff', 'w').write(selected[1].b)
  import os
  os.system("xxdiff /tmp/a_diff /tmp/b_diff &amp;")

which is horrible for a number of reasons but also took only moments
to write.  And now, not only does this Leo session have a visual node
diff capability, but also every future session which loads ~/.leo/t/gen.

When you can go from wanting to having a feature in less time than it
takes to write an email about it - well, that's "why Leo".

(I also have @file ~/.leo/sql and @file ~/.leo/dml for commands for
handling SQL and an XML dialect I use a lot, it's a great way to manage
little snippet functions)
</t>
<t tx="ekr.20130526065545.17545">@nocolor

From: resi147 &lt;scalet@yebu.de&gt;

I tried this one and it seems to be very useful. What I would also like to 
have is a similar (or the same) script,
that does the same on two different nodes of a leo file. I admit, the 
changes should be minimal to be done by
myself, but as I'm not familiar with the internal leo api, I wanted to ask 
for how to best do this changes.

Probably somewhere here
"""
...
vf = from_c.hiddenRootNode 
vt = to_c.hiddenRootNode
...
"""
just to feed in the 2 nodes, Any quick idea how this can be done the best 
way?

Cheers,
Karl.

</t>
<t tx="ekr.20130526065545.17546">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

The script below is a tool for diffing two Leo files. The attached
screenshot illustrates the output for two different revisions of
LeoPyRef.leo.

``- nodename``
    indicates a node which disappeared
``+ nodename``
    a node which is new,
``!v nodename`` followed by ``!^ nodename``
    a node with an unchanged heading but changed content, the first
    linking to the old version, the second linking to the new version

If you have the bookmarks.py plugin active, you can double click nodes
to jump to the original(s).



from leo.core.leoNodes import vnode
if not hasattr(vnode, 'insertAsLastChild'):
    # add insertAsLastChild method to vnodes
    def ialc(self):
        vnode(self.context)._linkAsNthChild(self, len(self.children))
        return self.children[-1]
    vnode.insertAsLastChild = ialc

from_filename = g.app.gui.runOpenFileDialog('From (old) file', [('Leo', '*.leo')])
to_filename = g.app.gui.runOpenFileDialog('To (new) file', [('Leo', '*.leo')])

# from_filename = "/mnt/shuttle/bkup/usr1/2012-07-13/home/tbrown/.leo/.todo.leo"
# to_filename = "/mnt/shuttle/bkup/usr1/2012-07-15/home/tbrown/.leo/.todo.leo"

from_c = g.openWithFileName(from_filename, c)
to_c = g.openWithFileName(to_filename, c)

vf = from_c.hiddenRootNode
vt = to_c.hiddenRootNode

assert from_c != c
assert to_c != c
assert from_c != to_c

nd = c.rootPosition().insertAfter()
nd.copy().back().moveAfter(nd)
nd.h = 'diff @bookmarks'

def text_match(a, b):
    return (a.h == b.h, 
            a.h == b.h and a.b == b.b)
def gnx_match(a, b):
    return (a.h == b.h and a.gnx == b.gnx, 
            a.h == b.h and a.b == b.b and a.gnx == b.gnx)

def diff_trees(vf, vt, path):

    fonly = []  # nodes only in from tree
    tonly = []  # nodes only in to tree
    diffs = []  # nodes which occur in both but have different descendants

    # count number of times each headline occurs as a child of
    # each node being compared
    count_f = {}
    for cf in vf.children:
        count_f[cf.h] = count_f.get(cf.h, 0) + 1
    count_t = {}
    for ct in vt.children:
        count_t[ct.h] = count_t.get(ct.h, 0) + 1

    for cf in vf.children:
        
        for ct in vt.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            
            if body_eq:
                diffs.append(diff_trees(cf, ct, path+[vf.h]))
                
                break
            elif head_eq:
                d = diff_trees(cf, ct, path+[vf.h])
                if d:
                    d.h = '!v '+d.h
                else:
                    d = vnode(nd.v.context)
                    d.h = '!v '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    from_filename, 
                    '--&gt;'.join((path+[vf.h]+[cf.h])[1:]),
                    cf.b
                )
                diffs.append(d)
                d = vnode(nd.v.context)
                d.h = '!^ '+cf.h
                d.b = "file://%s/#%s\\n\\n%s" % (
                    to_filename, 
                    '--&gt;'.join((path+[vt.h]+[ct.h])[1:]),
                    ct.b
                )
                diffs.append(d)
                break
        else:
            fonly.append(cf)
            
    for ct in vt.children:
        
        for cf in vf.children:
            
            if count_f[cf.h] == 1 and count_t[ct.h] == 1:
                equal = text_match
            else:
                equal = gnx_match
            
            head_eq, body_eq = equal(cf, ct)
            if head_eq or body_eq:
                # no need to recurse matches again
                break

        else:
            tonly.append(ct)

    if not any(diffs) and not fonly and not tonly:
        return None
        
    vd = vnode(nd.v.context)
    vd.h = vf.h
    for d in diffs:
        if d:
            vd.children.append(d)
    for f in fonly:
        n = vd.insertAsLastChild()
        n.h = '- '+f.h
        n.b = "file://%s/#%s" % (from_filename, '--&gt;'.join((path+[vf.h]+[f.h])[1:]))
    for t in tonly:
        n = vd.insertAsLastChild()
        n.h = '+ '+t.h
        n.b = "file://%s/#%s" % (to_filename, '--&gt;'.join((path+[vf.h]+[t.h])[1:]))
        
    return vd

v = diff_trees(vf, vt, [])
if v:
    nd.v.children.extend(v.children)  # snip off &lt;hidden root node&gt;

c.bringToFront()
c.redraw()

</t>
<t tx="ekr.20130526065545.17547">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 10:02:40 AM UTC-6, Edward K. Ream wrote:

ReportTraverser uses this pattern at rev 288.  It is a remarkable 
simplification.
 

&gt; The revised r.div method will be something like::
&gt;
&gt;     def div(self,aList):
&gt;         compute old and new indents
&gt;         return [
&gt;             &lt;div&gt;, with old indent,
&gt;             aList, with new indent,
&gt;             &lt;/div&gt;, with old indent,
&gt;         ]
&gt;

This doesn't work!  aList won't have the proper indentation.  In 
particular, the following won't work::

    [['  ',z] for z in aList],

flatten_list will add the two spaces before the line, that is, before a 
newline. Instead, a hack is needed:

    return [
        div,
        join_list(aList,indent='  '),
        '\\n&lt;/div&gt;'
    ]

The new 'indent' keyword tells flatten_list to add the given indentation 
(two spaces, here), to strings that start with a newline.  The new code in 
flatten_list is::

        for i,item in enumerate(aList):
            if leading:                  yield leading
            for s in flatten_list(item):
                if indent:
                    if s.startswith('\\n'):
                        yield '\\n'+indent+s[1:]
                    else:
                        yield s
                else:
                    yield s
            if sep and i &lt; len(aList)-1: yield sep
            if trailing:                 yield trailing

The point is that the indentation must be "moved behind the newline".

Edward

</t>
<t tx="ekr.20130526065545.17548">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wednesday, January 2, 2013 2:01:17 PM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; This seems like a spiritual relative of "rope" data structure:
&gt;
&gt; http://en.wikipedia.org/wiki/Rope_(data_structure)
&gt;
&gt; http://www.sgi.com/tech/stl/Rope.html
&gt;

Thanks for these links.  Yes, there is a similarity.  However, the real 
beauty of new pattern is the flatten_list method.  It's the combination of 
the lists and flatten_list that gives the pattern real power.  We've just 
seen how the 'indent' keyword hack allows sophisticated processing of the 
lists.  I wouldn't expect more hacks to be needed, but I've been surprised 
before ;-)

Edward

</t>
<t tx="ekr.20130526065545.17549">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This seems like a spiritual relative of "rope" data structure:

http://en.wikipedia.org/wiki/Rope_(data_structure)

http://www.sgi.com/tech/stl/Rope.html


On Wed, Jan 2, 2013 at 3:03 AM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; I continue to work feverishly on various aspects of static type checking.
&gt;
&gt; That work lead to a discovery that may benefit you.  It's one of the most
&gt; beautiful patterns I've ever created: it allows a program to simply and
&gt; naturally build up huge strings without using any string operations.
&gt; Generating an html file with minimal stress on the gc is an obvious
&gt; application.  You could also say that the pattern creates a Pythonic way of
&gt; using lisp-like algorithms, but more safely than in lisp.
&gt;
&gt; Full details at the stc documentation page::
&gt;
&gt; http://webpages.charter.net/edreamleo/stc/stc.html#a-beautiful-pattern-for-building-large-strings
&gt;
</t>
<t tx="ekr.20130526065545.17550">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

I continue to work feverishly on various aspects of static type checking.

That work lead to a discovery that may benefit you.  It's one of the most 
beautiful patterns I've ever created: it allows a program to simply and 
naturally build up huge strings without using any string operations.  
Generating an html file with minimal stress on the gc is an obvious 
application.  You could also say that the pattern creates a Pythonic way of 
using lisp-like algorithms, but more safely than in lisp.

Full details at the stc documentation page::
http://webpages.charter.net/edreamleo/stc/stc.html#a-beautiful-pattern-for-building-large-strings

</t>
<t tx="ekr.20130526065545.17551">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; Generating an html file with minimal stress on the gc is an obvious 
&gt; application.

Nice.  An HTML specific approach which avoids things like the
r.div_end() construct is the LXML element factory:
http://lxml.de/tutorial.html#the-e-factory

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17552">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



Yes, it's indeed an interesting pattern.

It would seem more useful in faster languages than python though; in
python, string operations (and gc) are faster in comparison to executing
other code, whereas in fast, more static languages (C++, Java, Go) avoiding
GC gives you great benefits (I saw 5x perf increase reported for some Go
app when eliminating GC).

</t>
<t tx="ekr.20130526065545.17553">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thursday, January 3, 2013 3:28:52 AM UTC-6, Ville M. Vainio wrote:
&gt;
&gt; Yes, it's indeed an interesting pattern. 
&gt;
&gt; It would seem more useful in faster languages than python though; in 
&gt; python, string operations (and gc) are faster in comparison to executing 
&gt; other code, whereas in fast, more static languages (C++, Java, Go) avoiding 
&gt; GC gives you great benefits (I saw 5x perf increase reported for some Go 
&gt; app when eliminating GC).
&gt;

Thanks for these remarks.  I've enjoyed thinking about them.  A few 
responses:

1. This is a smallish pattern--it can't change the world, except insofar as 
something beautiful changes the world.

2. Otoh, the pattern changes the way I think about lisp and lisp-like 
patterns.  That's not nothing. For the first time, it makes list-oriented  
programming pattern completely safe.  It does this because it doesn't 
matter what each component list contains, nor does it matter *at all* what 
the shape of any part of the tree is.  This makes the pattern completely 
flexible.

3. The pattern can be generalized.  The pattern I described uses a tree of 
component strings to describe a (large) resulting string.  But one can 
easily imagine using lists to hold anything at all (of whatever tree shape) 
and then use another version of flatten_list to compose results of other 
types.  Alternatively, rather than composing a result, the analog of 
flatten_list could process the tree of lists in other ways.  So the most 
general version of the pattern is:

A) The tree of lists can contain any data whatever, especially including 
None,
B) The "producers" (visitors) can create subtrees of whatever shape,
C) The analog of flatten_list is free to do anything whatever with the 
resulting tree.

I suspect that these features are what appeal to lisp programmers ;-)

4. I'm not sure whether the pattern is more useful in "faster" languages or 
not.  True, anything that helps a feeble language like C++ will seem useful 
:-)  But points 1-3 above have nothing to do with speed: they just make 
programming simpler, more flexible, more powerful and more fun.

Imo, gc issues are important both in Python and in C++.  For stc, the only 
way to get reproducible timing statistics for tests was to do the following 
before running the test::

    for z in (0,1,2): gc.collect(z)

The ReportTraverser class no longer contains *any* calls to string.join, so 
one could imagine that all strings used in the code would be interned.  The 
generated tree actually contains nothing but *references* to strings, and 
if all strings are interned the references will not themselves cause any 
new strings to be allocated.

Naturally, gc issues are even more important in language like C++ without a 
gc.  Lol.  The preceding paragraph is more important for C++ than in 
Python.  So yes, in this sense I agree with you completely that the pattern 
is more useful for "fast" languages than for Python.

Thanks, Ville, for provoking all these pleasant thoughts :-)

Edward

</t>
<t tx="ekr.20130526065545.17554">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Jan 1, 2013 at 9:48 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Tue, 1 Jan 2013 17:03:05 -0800 (PST)
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;
&gt; &gt; Generating an html file with minimal stress on the gc is an obvious
&gt; &gt; application.
&gt;
&gt; Nice.  An HTML specific approach which avoids things like the
&gt; r.div_end() construct is the LXML element factory:
&gt; http://lxml.de/tutorial.html#the-e-factory
&gt;

Beautiful.  With the list framework the revised r.div method would be
something like::

    def div(self,aList):
        compute old and new indents
        return [
            &lt;div&gt;, with old indent,
            aList, with new indent,
            &lt;/div&gt;, with old indent,
        ]

An example of the pattern in use::

    return [
        ...
        r.div([
            contents of the div,
        ]),
        ...
    ]

Similarly for span, etc. Thanks for pointing this out.  This is too good to
ignore.  I'll do it soon.

Edward</t>
<t tx="ekr.20130526065545.17555">@nocolor

From: tfer &lt;tfetherston@aol.com&gt;

I was wondering if the Qt widget used for body text has a provision for 
background images?

I'm thinking that it might be interesting to have some wallpapers/tiles to 
visually represent various categories of methods, e.g. initors, setters, 
getters, etc.  Maybe ones that hint at the uses of a particular design 
pattern.  Maybe us a uA to control setting?
</t>
<t tx="ekr.20130526065545.17556">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Fri, Jul 13, 2012 at 3:57 PM, tfer &lt;tfetherston@aol.com&gt; wrote:

&gt; I was wondering if the Qt widget used for body text has a provision for
&gt; background images?
&gt;

Sorry for the delay in responding.  Leo's body pane is a QTextBrowser:
http://qt-project.org/doc/qt-4.8/qtextbrowser.html
a subclass of QTextEdit.  QTextBrowser also inherits from QFrame and
QWidget, so there *might* be a way to have a background image "leak"
through the text.</t>
<t tx="ekr.20130526065545.17557">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

--MP_/NJ5QIult88.7_K/HpvnV2eA

On Wed, 1 May 2013 04:19:52 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Fri, Jul 13, 2012 at 3:57 PM, tfer &lt;tfetherston@aol.com&gt; wrote:
&gt; 
&gt; &gt; I was wondering if the Qt widget used for body text has a provision for
&gt; &gt; background images?
&gt; &gt;
&gt; 
&gt; Sorry for the delay in responding.  Leo's body pane is a QTextBrowser:
&gt; http://qt-project.org/doc/qt-4.8/qtextbrowser.html
&gt; a subclass of QTextEdit.  QTextBrowser also inherits from QFrame and
&gt; QWidget, so there *might* be a way to have a background image "leak"
&gt; through the text.
&gt; 
&gt; Edward
&gt; 

QTextEdit#richTextEdit { background-image: url('/home/tbrown/Desktop/cow2.jpg'); }

in the stylesheet gives the effect attached (i.e. it works).

If you wanted node specific backgrounds Leo would have to start setting
an attribute on the body widget, probably the gnx, so you could do

QTextEdit#richTextEdit[leo_gnx='tbrown.20130430222443.19340'] { 
  background-image: url('/home/tbrown/Desktop/cow2.jpg'); 
}

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17558">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 1, 2013 at 8:42 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt;
&gt;
&gt; QTextEdit#richTextEdit { background-image:
&gt; url('/home/tbrown/Desktop/cow2.jpg'); }
&gt;
&gt; in the stylesheet gives the effect attached (i.e. it works).
&gt;
&gt; If you wanted node specific backgrounds Leo would have to start setting
&gt; an attribute on the body widget, probably the gnx, so you could do
&gt;
&gt; QTextEdit#richTextEdit[leo_gnx='tbrown.20130430222443.19340'] {
&gt;   background-image: url('/home/tbrown/Desktop/cow2.jpg');
&gt; }
&gt;

Wow!  Thanks for this.  LeoUser wrote a version of Leo in Jython (using the
Swing classes), and he claimed that he could watch *movies* in the body
pane :-)

I'll add this to the Leo/To Document list.  Not sure yet how that list is
going to get translated into action.  Still reading Getting Things Done :-)
</t>
<t tx="ekr.20130526065545.17559">@nocolor

From: Chema Cortes &lt;pych3m4@gmail.com&gt;

I was testing the @edit directive. I understand how it works and check
that Leo does not allow adding new child nodes to an @edit node. Then,
why does the documentation says that can expand sections, @other y
@all on writing? Is that possible?

Reference:
http://webpages.charter.net/edreamleo/directives.html#edit-path
</t>
<t tx="ekr.20130526065545.17560">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Thu, Jul 5, 2012 at 6:21 PM, Chema Cortes &lt;pych3m4@gmail.com&gt; wrote:

&gt; I was testing the @edit directive. I understand how it works and check
&gt; that Leo does not allow adding new child nodes to an @edit node. Then,
&gt; why does the documentation says that can expand sections, @other y
&gt; @all on writing? Is that possible?
&gt;
&gt; Reference:
&gt; http://webpages.charter.net/edreamleo/directives.html#edit-path
&gt;

The new reference is: http://leoeditor.com/directives.html#edit-path

It appears that the docs are in error.  I get the following error when
trying to save an @edit file with children:

    @edit nodes must not have children
    To save your work, convert @edit to @auto or @thin.

I'll make a to-do item to fix this documentation bug.
</t>
<t tx="ekr.20130526065545.17561">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 12 Sep 2012 13:06:19 -0700 (PDT)
Terry &lt;webtourist@gmail.com&gt; wrote:

&gt; Can LEO generate OPML file ? I'm looking at the tool theoutlinerofgiants

There's a leoOPML plugin, I don't know what its status is, try
enabling it... I think OPML support has been through several
iterations, not sure if the plugin was the last of them.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17562">@nocolor

From: Terry &lt;webtourist@gmail.com&gt;


On Tuesday, September 11, 2012 4:57:10 PM UTC-4, Terry wrote:
&gt;
&gt; &gt; You could run this script (below): 
&gt;


Terry, how do i run it ?  I'm guessing it's not at the cmdline like "python 
this_script.py" 
thanks

</t>
<t tx="ekr.20130526065545.17563">@nocolor

From: Terry &lt;webtourist@gmail.com&gt;

Can LEO generate OPML file ? I'm looking at the tool theoutlinerofgiants

</t>
<t tx="ekr.20130526065545.17564">@nocolor

From: Terry &lt;webtourist@gmail.com&gt;

I need to present to people who don't have leo installation, in easily 
readable format, the full content of a .leo file, not just the outline, but 
all nodes and all contents.

What do I need to do ?
</t>
<t tx="ekr.20130526065545.17565">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Tue, 11 Sep 2012 13:33:16 -0700 (PDT)
Terry &lt;webtourist@gmail.com&gt; wrote:

&gt; I need to present to people who don't have leo installation, in easily 
&gt; readable format, the full content of a .leo file, not just the outline, but 
&gt; all nodes and all contents.
&gt; 
&gt; What do I need to do ?

You could run this script (below):

It only exports selected nodes, so if you want to export everything,
you have to select all the top level nodes, i.e. collapse all the nodes
so only the top level is visible, click the first one, and shift-click
the last one.

It exports to plain text... although you might be able to use the
template to describe HTML, not sure.

---cut here---
# template is everything between r""" and second """
# placeholders are H heading B body C children
# use \\n in B and C lines for conditional blank lines

template = r"""H
    B
  * C"""

lines=[]
exp_only = g.app.gui.runAskYesNoCancelDialog(
    c, 'Expanded nodes only?', 'Expanded nodes only?')
if exp_only == 'no':
    exp_only = False
    
def export_text(p, indent=''):
    
    spaces = ' '*(len(indent) - len(indent.lstrip(' ')))
    
    for line in template.split('\\n'):
        
        if 'H' in line:
            lines.append(indent + line.replace('H', p.h))
        elif 'B' in line and p.b.strip():
            prefix = line[:line.find('B')].replace('\\\\n', '\\n')
            for i in p.b.strip().split('\\n'):
                lines.append(spaces + prefix + i)
                prefix = line[:line.find('B')].replace('\\\\n', '')
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' in line and (not exp_only or p.isExpanded()):
            prefix = line[:line.find('C')].replace('\\\\n', '\\n')
            for child in p.children():
                export_text(child, indent=spaces + prefix)
            if line.endswith('\\\\n'):
                lines.append('')
        elif 'C' not in line and 'B' not in line:
            lines.append(line)

if exp_only != 'cancel':
    for i in c.getSelectedPositions():
        export_text(i)
    
    filename = g.app.gui.runSaveFileDialog('Save to file')
    # filename = '/home/tbrown/del.txt'
    
    if filename is not None:
        open(filename,'w').write('\\n'.join(lines))
---cut here---

</t>
<t tx="ekr.20130526065545.17566">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 12 Sep 2012 06:31:09 -0700 (PDT)
Terry &lt;webtourist@gmail.com&gt; wrote:

&gt; Terry, how do i run it ?  I'm guessing it's not at the cmdline like "python 
&gt; this_script.py" 

Right.  Paste the content into a node, then click the script-button
button to create a new button for running this script.  The button's
name will be the node's name, what it is doesn't matter but 'export'
would be an obvious choice.  Then select the node(s) you want exported
- presumably not including the node containing the script :)

Then it will ask for a file name and whether to include unexpanded
nodes.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17567">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Wednesday, September 12, 2012 3:12:52 PM UTC-5, Edward K. Ream wrote:
&gt;
&gt; The more I think about it, the more I think Leo needs an automated 
&gt; playback capability. 
&gt;
... 

&gt; The main question is, how easy will it be to create and edit playbacks? 


Rev 5432 provides some answers.  test.leo contains the node, "Prototype of 
screencast script".  It took many hours of happy experimentation to get the 
script to work, but the results are worth all the futzing.  Here is the 
first script::

    s = p.b # This script.
    c = c.new()
    p = c.p
    p.h = ''
    n1,n2 = 0.01,0.2 # Small difference are important.
    head_keys('This is headline text',n1,n2)
    body_keys('This is some body text.\\n',0.0,0.0) # n1,n2)
    body_keys('Some more body text.\\n',0.0,0.0)
    body_keys(s,0.0,0.0)

The head_keys and body_keys (not shown) simulate typing, with a range of 
typing speed indicated by the n1 and n2 params.  The result is really fun 
to watch.  As you will see, there is a wait method that waits a variable 
number of seconds.  This will be useful in other contexts.

This is the most fun I've had in quite awhile. It's becoming clear that 
being able to generate screencasts from scripts will be an excellent tool 
for those trying to explain Leo.  Imo, creating screencasts from such 
scripts will be *much* simpler than making slideshows.

I've got lots of ideas for improvements to screencasts.  I should have 
something pretty cool to show in a week or so...

Edward

P.S.  The head_keys and body_keys methods cost me a *lot* of work.  It's 
tricky to show the typing immediately without flash.  These are the first 
of several planned helper methods for use in screencasts::

     def head_keys(s,n1=0.04,n2=0.1):
        import leo.core.leoGui as leoGui
        p = c.p
        tree = c.frame.tree
        c.editHeadline()
        w = tree.edit_widget(p)
        for ch in s:
            p.h = p.h + ch
            tree.repaint() # *not* tree.update.
            wait(n1,n2)
            event = leoGui.leoKeyEvent(c,ch,ch,w,x=0,y=0,x_root=0,y_root=0)
            c.k.masterKeyHandler(event)
        c.frame.tree.repaint()
        c.redraw()

    def body_keys(s,n1=0.04,n2=0.1):
        c.bodyWantsFocusNow()
        p = c.p
        w = c.frame.body.bodyCtrl.widget
        for ch in s:
            p.b = p.b + ch
            w.repaint()
            wait(n1,n2)
        c.redraw()

EKR

</t>
<t tx="ekr.20130526065545.17568">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The more I think about it, the more I think Leo needs an automated playback 
capability.  I had some initial thoughts in the thread, "PyOhio Leo Video 
up on youtube", 
https://groups.google.com/forum/?fromgroups=#!topic/leo-editor/nmBweM3wI3o.

There as several immediate applications for automated playback:

1. As a helper for those preparing demos of Leo.  It eliminates the need to 
think, talk and type at the same time ;-)  The hope is that the narrator 
would be more comfortable and relaxed during the recording, but perhaps 
that is wishful thinking.

2. As an automated, scripted, demo of what Leo can do.  You could even 
imagine the quickstart.leo would "create itself" when it was opened.  You 
would simply need to start the demo when the file was opened!

As I was thinking about playback, I considered how the playback would draw 
attention to various parts of the screen.  In other words, we need 
something akin to the big red arrows in the Leo slideshows. One easy way to 
do this would be with a DialogWithImage call, that would pop up a dialog 
showing, say, a magnified image of a dirty icon box.  Depending on options, 
the dialog might go away after a few seconds, or remain until the use hits 
any key.

The main question is, how easy will it be to create and edit playbacks?  
I'm not sure.  Any such playback capability would essentially be a 
(detailed!) script.  We can imagine a script that is essentially Python:  
Something like:

goto_sibling_node(&lt;&lt;node name&gt;&gt;)
dialog(&lt;&lt;dialog name&gt;&gt;,&lt;&lt; when dismissed&gt;&gt;)
edit_headline
type_individual_letters('This is the headline',&lt;&lt;delay between letters&gt;&gt;)
type_text('This is the headline')
insert_sibling_node()
insert_child_node()
select_find_tab()
etc! etc!

Leo already has most of the capability go generate this as we use Leo:  
it's the so-called "lossage" history in k.masterKeyHandler.  I'm thinking 
that there is no urgent need to capture the mouse: we might as well 
demonstrate mouseless Leo!

Actually, we might forgo capturing actions altogether, and just write the 
script directly.  We'll have to see whether that makes sense.

Your comments, please, Amigos.

Edward

</t>
<t tx="ekr.20130526065545.17569">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;




On Friday, September 14, 2012 8:54:42 AM UTC-5, Edward K. Ream wrote:
&gt;
&gt;
&gt; Rev  5434 packages this into the new screencast plugin.  Yesterdays work, 
&gt; in screencast.py and the node "@command screencast @key=Alt-9" in test.leo 
&gt; taught me several things.  In the notes below, m is an instance of 
&gt; ScreenCastController.  m stands for "movie" :-)
&gt;

Screencasts promise to be easy to be *much* easier to create than 
slideshows, while also being more interesting, informative and flashy.  It 
is *so* much easier to write a screencast script than it is to lay out a 
slide, take a screenshot, and then manage resulting slide.

In particular, there are few continuity problems with screencasts.  
Continuity is a *huge* problem with slideshows!  If I change one slide, I 
am likely to want to change all following slides.  Which means I have to 
retake all the slides, and file the new versions in the proper places.  In 
contrast, any changes to screencasts naturally propagate forward.  There 
might be an effect on following screencasts scenes, but this will happen 
rarely with a reasonable scene design, and any problems should be easy to 
fix.

With screencasts, the *movie* script is also the *python* script!  There is 
no "translation" from one to the other.  Furthermore, all the work to 
produce a screencast is done (naturally!) within Leo.  No need to create 
and manage external data.  This is another huge advantage and it make 
producing screencasts much faster than producing slideshows.

Screencasts are likely to be the long-awaited tools that will allow me to 
show Leo in action so that other will finally be able to understand it 
easily.  This is an exciting prospect!

Edward

</t>
<t tx="ekr.20130526065545.17570">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;



On Fri, Sep 14, 2012 at 9:54 PM, Edward K. Ream &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Wednesday, September 12, 2012 10:57:35 PM UTC-5, Edward K. Ream wrote:
&gt;
&gt;     test.leo contains the node, "Prototype of screencast script".  It took
&gt; many hours of happy experimentation to get the script to work, but the
&gt; results are worth all the futzing.
&gt;
&gt; Rev  5434 packages this into the new screencast plugin.  Yesterdays work,
&gt; in screencast.py and the node "@command screencast @key=Alt-9" in test.leo
&gt; taught me several things.  In the notes below, m is an instance of
&gt; ScreenCastController.  m stands for "movie" :-)
&gt;
&gt; 1. It's probably best to not to open a new Leo window for screencasts.
&gt; This avoid problems with w.repaint occurring in a another repaint
&gt; operation, thereby freezing Leo.  This is not a major constraint: we
&gt; typically will want to have screencasts operate on the local .leo file.
&gt;
&gt; 2. I spent a lot of time trying to adjust the delay between
&gt; "transitions".  The arguments to m.wait specify the range of waiting
&gt; allowed.  The plugin multiplies these nominal factors by a **speed
&gt; factor**, initially 1.0.  m.set_speed sets this factor. To double the
&gt; presentation speed, set the factor to 0.5.
&gt;

This seems strange. In my intuition, if you want to double the speed, the
factor should be 2.0. (use new_factor = 1.0/old_factor instead?)

</t>
<t tx="ekr.20130526065545.17571">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Friday, September 14, 2012 9:31:33 AM UTC-5, HaveF wrote:
&gt;
&gt;
&gt; 2. I spent a lot of time trying to adjust the delay between 
&gt;&gt; "transitions".  The arguments to m.wait specify the range of waiting 
&gt;&gt; allowed.  The plugin multiplies these nominal factors by a **speed 
&gt;&gt; factor**, initially 1.0.  m.set_speed sets this factor. To double the 
&gt;&gt; presentation speed, set the factor to 0.5.
&gt;&gt;
&gt;
&gt; This seems strange. In my intuition, if you want to double the speed, the 
&gt; factor should be 2.0. (use new_factor = 1.0/old_factor instead?)
&gt;

But then how do you set the wait to zero? :-)

Anyway, it's a minor point: now that manual play is coming the speed factor 
will not be important.

EKR

</t>
<t tx="ekr.20130526065545.17573">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Wednesday, September 12, 2012 10:57:35 PM UTC-5, Edward K. Ream wrote:

    test.leo contains the node, "Prototype of screencast script".  It took 
many hours of happy experimentation to get the script to work, but the 
results are worth all the futzing. 

Rev  5434 packages this into the new screencast plugin.  Yesterdays work, 
in screencast.py and the node "@command screencast @key=Alt-9" in test.leo 
taught me several things.  In the notes below, m is an instance of 
ScreenCastController.  m stands for "movie" :-)

1. It's probably best to not to open a new Leo window for screencasts.  
This avoid problems with w.repaint occurring in a another repaint 
operation, thereby freezing Leo.  This is not a major constraint: we 
typically will want to have screencasts operate on the local .leo file.

2. I spent a lot of time trying to adjust the delay between "transitions".  
The arguments to m.wait specify the range of waiting allowed.  The plugin 
multiplies these nominal factors by a **speed factor**, initially 1.0.  
m.set_speed sets this factor. To double the presentation speed, set the 
factor to 0.5.

The m.log call writes a message to the log pane, with calls to m.wait(1) 
before and after inserting the text.  Both waits are important.  The 
"opening" wait allows the user to see the effect of the previous operation; 
the "closing" wait allows the user to read the new comment in the log pane 
before the next operation happens.

3. The futzing with speed and waits convinces me that specifying waits "by 
hand" isn't good enough.  Pre-specified waits will be useful only for an 
**unattended mode** that just plays the screencast from start to finish.  
But for most presentations we want the presenter to switch from one 
**scene** of the movie to the next by hitting the RightArrow key.  The 
LeftArrow key will go back to the previous scene. Thus, in **attended 
mode**, most calls to m.wait will have no effect.  (An exception will be 
the calls to m.wait in the code the simulates a person typing in headline 
or body text.  Thus calls should always have effect, so we will have a 
"force" arg to m.wait.)

It will be relatively straightforward to do the first draft of attended 
mode.  At the programming level, it will work like any minibuffer command 
that prompts for user input.  That is, the plugin will create a so-called 
state handler for the slideshow.

At the design level,  the main idea is to treat every node under the main 
@screencast node as a scene.  This natural division allows the screencast 
to organize the material using all of Leo's organizational capabilities.

The state handler will, when seeing the RightArrow key, "play" the next 
scene merely by moving to the next node and then executing the script in 
it's body text.  This script could contain *any* Leo script, but most often 
it will call ScreenCastController methods.   Moving to the previous scene 
can be done by Leo's undo command, automatically managed by the 
ScreenCastController.  This will be a bit tricky, but not hugely so.

4. Putting comments in the log pane is ok for a prototype, but it's pretty 
lame.  Instead, I'd like to use some kind of popup that can be associated 
with individual items on the screen and located with precision relative to 
those items. The popup should be able to contain both text and graphics. 
Does anyone have a suggestion for what Qt widget to use?

Your comments please, Amigos.

Edward

</t>
<t tx="ekr.20130526065545.17574">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Friday, September 14, 2012 8:54:42 AM UTC-5, Edward K. Ream wrote:

&gt; It will be relatively straightforward to do the first draft of attended 
mode. 

Indeed it was.  Rev  5435 contains the new code in screencast.py and new 
test code in test.leo.  To run the test, just do Alt-9, then hit the right 
arrow key until done.  Escape or Ctrl-g will abort the screencast.  All 
other keys get ignored.

**Warning**: the present screen cast insert a node in a somewhat random 
location.

The code that looks for the next node assumes that if it has a script if 
p.b.strip() is True.  Before making this check, it should strip off python 
comment lines so the speaker can add comments.

There is still lots of work to be done, but already we have a fun sandbox 
to play in.  As you will see, all the code in ScreenCastController is dead 
easy, which bodes well for future work.

Edward

</t>
<t tx="ekr.20130526065545.17575">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 1, 2013 at 12:20 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

Haven't looked at it hard enough to evaluate code, but it doesn't seem
&gt; too excessive for what it does.


I agree. Code can usually be improved.  Your interesting ideas are what are
important.

Once again, we have a problem: how to make this code available to those who
might benefit from it?  More importantly, how to tell others about the work
you have done when we have all forgotten the details of this conversation.
My interim solution is to file this under Leo/To Document, but that is
something of a delaying tactic.

Edward

</t>
<t tx="ekr.20130526065545.17576">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I implemented something in a Leo outline yesterday, but I feel my code 
is absolutely atrocious.

One of the ways I use Leo is as an information management/database for 
when I'm running tabletop RPGs.  Such games involve a fair amount of 
similarly structure data.  I set out to make a way of defining a 
template, and providing macro expansions within the template, so that 
the user could click a script button, be prompted for data, and be 
rewarded with a fully-populated copy of the template.  I've managed to 
accomplish this with the code below:

https://gist.github.com/gatesphere/2be5030506a364ee6ec1

Now, that seems like an atrocious amount of code, and a lot of it feels 
like too much work... but it was a hack, and it works.

How it works is like this:

- Create a `@template` node.  This is the parent node for your template.

- Create a `@destination` node as a child of the @template node. This 
node's headline is the name of a top level node where your completed 
template will be placed.  `@destination Sessions` will place the 
finished product under the top-level "Sessions" node.

- Populate the @template node with various `@item` nodes - these keep 
their structure in the filled template.  Anything that needs to be a 
part of the final product has to be an @item node.

All of that is fine and dandy if you just want to copy and paste... but 
that's already baked into Leo.  So I added macro expansion.  The script 
gathers up all instances of anything that fits the regex "&lt;\\$\\w+&gt;" is a 
macro variable name.  Something like `&lt;$name&gt;` or `&lt;$date&gt;`.  The script 
gathers up all of these variable names, and prompts the user (ala 
todo.py's "Redistribute Priorities" function) for values for each of 
them. They are global with respect to the template, so using the same 
macro variable in multiple places in the same template will result in 
all of them being filled in with the same value.

In addition, there is one more type of node that can go under @template 
nodes - @default.  @default nodes provide a default value for a macro 
variable.  The node with a headline of `@default &lt;$name&gt;` and a body of 
"This is my body" gives the `&lt;$name&gt;` macro a value of "This is my body" 
everywhere within the template, and that macro will not be prompted for 
a value.  This is handy if you're copying templates between Leo 
worksheets, and want them flexible, but don't want them to fill in the 
same value for every single invocation of copy-template.

Here's an example template:

@template &lt;$campaign&gt; Session #&lt;$num&gt; ($date)
       @destination Sessions
       @default &lt;$campaign&gt;
       @item Who's Coming?
       @item In-World Start Date
       @item Log
       @item Threads
             @item High Priority
             @item Low Priority
       @item News
             @item Out of Character
             @item In Character

The body of `@default &lt;$campaign&gt;` is "World of Ka'rim".  The body of 
`@item Who's Coming?` is "John, Jane, Jack, Jenny, Jeremy".

Running copy-template on this template, and filling the values prompted 
for (&lt;$num&gt; and &lt;$date&gt;) gives the following under the top-level node 
Sessions:

World of Ka'rim Session #1 (01 May 2013)
       Who's Coming?
       In-World Start Date
       Log
       Threads
             High Priority
             Low Priority
       News
             Out of Character
             In Character

The headlines bodies are correctly filled in with macro expansions, and 
other text is verbatim copied from the respective headlines and bodies.

So... two questions:

1.) Did I re-implement something Leo already does?
2.) Anyone have any suggestions on reducing the amount of code/any fixes?

Also, hope someone else finds this useful.  Once it's cleaned up, I 
might do a leo-editor blog post about it.

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17577">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Wed, 01 May 2013 13:07:26 -0400
Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt; similarly structure data.  I set out to make a way of defining a 
&gt; template, and providing macro expansions within the template, so that 
&gt; the user could click a script button, be prompted for data, and be 
&gt; rewarded with a fully-populated copy of the template.  I've managed to 
&gt; accomplish this with the code below:
[snip[
&gt; 1.) Did I re-implement something Leo already does?
&gt; 2.) Anyone have any suggestions on reducing the amount of code/any fixes?

Haven't looked at it hard enough to evaluate code, but it doesn't seem
too excessive for what it does.  I've just been fiddling with the
abbreviations code which does template expansion, but it's aimed at
being more interactive, not having the content stored in the outline,
which makes more sense for you seeing you want to be able to re-run the
template fill-in easily if you make a mistake, without entering
everything again.

I'm not sure how much of this you could achieve with the value-space
plugin, can't remember if that uses Jinja templates for something or
not.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17578">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

Some people seem to think that it is difficult to understand how Leo
handles "clone wars":  differing values for a cloned nodes that appear
in several external files.  That's not true.  The rule is::

    **The last clone that Leo reads wins.**

That is, for any cloned node C, Leo takes the value of C.h and C.b to
be the values specified by the last copy that Leo reads.

There is only one complication::

    **Leo reads the entire outline before reading any external
files.**

Thus, if C appears in x.leo, y.py and z.py, Leo will choose the value
for C in x.py or y.py, depending on which @&lt;file&gt; node appears later
in the outline.

Notes:

1. Whenever Leo detects multiple values for C when opening an outline,
Leo creates a "Recovered nodes" tree.  This tree contains all the
various values for C, nicely formatted so that it is easy to determine
where the differences are.

2. I've just refreshed my memory by looking at the code.  The relevant
methods are:

    fc.getLeoFile # Reads the outline, then calls at.readAll to read
all external files.
    at.indicateNodeChanged # Adds data to c.nodeConflictList
    cacher.reportChangedClone # Adds data to c.nodeConflictList
    fc.handleNodeConflicts # Creates "Recovered Nodes" node and its
children.

3. The present code is the simplest code that could possibly work.
There is no way Leo is going to do AI in order to implement complex
rules for which clones are "more important" than others.  Thus, if you
use cross-file clones, it is up to *you* to know these rules and
handle any resulting conflicts.  Imo, the "Recovered Nodes" feature is
a big step forward for Leo, and makes it impossible to lose data
unless you willfully refuse to examine the data.

Edward

</t>
<t tx="ekr.20130526065545.17579">@nocolor

From: Joon Ro &lt;joonpyro@gmail.com&gt;

Thanks for the explanation. As a matter of fact, I was having hard time 
understanding this. 

I had my source file in a @shadow node, and then I had a backup of that 
file as @file node, which had clones of the nodes of the source @shadow 
file and some other codes that I stashed. 

Whenever I changed the source code externally with leo closed, when I open 
leo, it made recovered nodes. The problem was since @file was placed 
"later" in the outline, leo kept putting the new changes I made to old, 
instead of new.

Now I understand how this works. but I think in multiple external file 
cases, it would make more sense if leo checks the file modification time 
when it makes decision which node is new, instead of just depending on the 
order of files in the outline. In above case, it is natural for me to have 
actual source nodes on the top of the outline and backup nodes on the 
bottom. Please let me know what you think. 

Best regards,
Joon



On Monday, January 16, 2012 6:26:58 AM UTC-6, Edward K. Ream wrote:
&gt;
&gt; Some people seem to think that it is difficult to understand how Leo 
&gt; handles "clone wars":  differing values for a cloned nodes that appear 
&gt; in several external files.  That's not true.  The rule is:: 
&gt;
&gt;     **The last clone that Leo reads wins.** 
&gt;
&gt; That is, for any cloned node C, Leo takes the value of C.h and C.b to 
&gt; be the values specified by the last copy that Leo reads. 
&gt;
&gt; There is only one complication:: 
&gt;
&gt;     **Leo reads the entire outline before reading any external 
&gt; files.** 
&gt;
&gt; Thus, if C appears in x.leo, y.py and z.py, Leo will choose the value 
&gt; for C in x.py or y.py, depending on which @&lt;file&gt; node appears later 
&gt; in the outline. 
&gt;
&gt; Notes: 
&gt;
&gt; 1. Whenever Leo detects multiple values for C when opening an outline, 
&gt; Leo creates a "Recovered nodes" tree.  This tree contains all the 
&gt; various values for C, nicely formatted so that it is easy to determine 
&gt; where the differences are. 
&gt;
&gt; 2. I've just refreshed my memory by looking at the code.  The relevant 
&gt; methods are: 
&gt;
&gt;     fc.getLeoFile # Reads the outline, then calls at.readAll to read 
&gt; all external files. 
&gt;     at.indicateNodeChanged # Adds data to c.nodeConflictList 
&gt;     cacher.reportChangedClone # Adds data to c.nodeConflictList 
&gt;     fc.handleNodeConflicts # Creates "Recovered Nodes" node and its 
&gt; children. 
&gt;
&gt; 3. The present code is the simplest code that could possibly work. 
&gt; There is no way Leo is going to do AI in order to implement complex 
&gt; rules for which clones are "more important" than others.  Thus, if you 
&gt; use cross-file clones, it is up to *you* to know these rules and 
&gt; handle any resulting conflicts.  Imo, the "Recovered Nodes" feature is 
&gt; a big step forward for Leo, and makes it impossible to lose data 
&gt; unless you willfully refuse to examine the data. 
&gt;
&gt; Edward

</t>
<t tx="ekr.20130526065545.17580">@nocolor

From: &lt;lzyerste@gmail.com&gt;

If I want to use leo to make mathematical notes, how can I type in some
special mathematical sysbols? Or is there a good way to make mathematical
notes using leo?

===== Terry

I use itex2MML with reStructuredText.  So within Leo you're looking at
LaTeX math markup, and you get outputs in PDF and XHTML, with MathML in
the latter.

===== &lt;jose.i.rojas@gmail.com&gt;

I've been doing this for about a year now.  I use the math docutils 
directive.  A custom .XCompose file (for example: 
https://github.com/kragen/xcompose)  also helps.

===== Terry

I think math was added to docutils after I started using itex2mml,
neater to use docutils built in math now I think.

Although having said that, playing with docutils math a bit suggests
itex2mml gives more complete support for both MathMML and perhaps LaTeX
math (with the PDF target).

===== jose

Terry, your setup is probably more flexible, but I haven't had any problems with 
docutils math. It seems to support all the syntax that I've found necessary.

I forgot to mention that the viewrendered plug-in doesn't display math 
correctly.  I'm not sure what the problem is, I remember trying to figure 
it out a while back, but I never got anywhere.  It's not really a big 
problem though, I have scripts to compile nodes to html/pdfs and open them 
in firefox/pdf reader; math works fine that way.

===== From: offray@riseup.net

Is not properly Leo, but is python related, tailored for math and with a
web interface and has leo bindings, check Ipython:

http://ipython.org/

I'm using it for all my math related writing and I think that point the
future of interactive writing in Python. I dream of a body pane on leo
with the features of the pyton qt console.
</t>
<t tx="ekr.20130526065545.17589">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

Trunk now has alt-x go-anywhere command handy

It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
does live search on headline (you have to press enter to force search of
bodies as well)

Once the hits are shows, you can navigate them by pressing up/down while
focus is still in line editor &amp; you can keep on typing (sort of like
sublime text)

Screenshot is attached, yes, positioning etc still looks like crap :)

</t>
<t tx="ekr.20130526065545.17590">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;



BTW, this has a very clever hack (even if I say so myself) - spaces in
search string are replaced with * wild card.

So if you search for, say "file txt", it will search for "file*txt",
matching e.g. @file readme.txt


On Tue, Nov 20, 2012 at 11:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt;wrote:

&gt; Trunk now has alt-x go-anywhere command handy
&gt;
&gt; It's in quicksearch.py, and works "sort of" like Nav bar. Also Nav bar now
&gt; does live search on headline (you have to press enter to force search of
&gt; bodies as well)
&gt;
&gt; Once the hits are shows, you can navigate them by pressing up/down while
&gt; focus is still in line editor &amp; you can keep on typing (sort of like
&gt; sublime text)
&gt;
&gt; Screenshot is attached, yes, positioning etc still looks like crap :)
&gt;

</t>
<t tx="ekr.20130526065545.17592">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, Nov 20, 2012 at 3:43 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; Trunk now has alt-x go-anywhere command handy


Ah.  This answers the question I just asked.  I'll put this on the list of
things to document.

Edward

</t>
<t tx="ekr.20130526065545.17593">@nocolor

From: redla &lt;radim.halir@gmail.com&gt;


On Wednesday, December 5, 2012 4:46:34 PM UTC+1, Edward K. Ream wrote:
&gt;
&gt; The title pretty much says it all.  This is a significant improvement, and 
&gt; makes Leo suitable for authoring text.  It should have been done ages ago. 
&gt; Please let me know immediately if this new behavior causes problems for you.
&gt;
 
There is one problem which is (IMHO) caused by this change: I have @wrap 
active and see my "plain" text wrapped properly. But if there is any "long 
enough" URL on the page (i.e. longer than the screen width), this is not 
wrapped (as there is no space in the string) nor I can see the end of it 
(as there is no horizontal scrollbar either) ;-(

</t>
<t tx="ekr.20130526065545.17594">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


The title pretty much says it all.  This is a significant improvement, and 
makes Leo suitable for authoring text.  It should have been done ages ago. 
Please let me know immediately if this new behavior causes problems for you.

There is one glitch.  If you add @wrap, the directive won't be in effect 
until you leave the node and revisit it.

Edward

</t>
<t tx="ekr.20130526065545.17595">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

The following is a first draft of a unit-testing tutorial.  It will form 
the basis of a new help-for-unit-testing command, and may also become the 
introduction to Leo unit-testing chapter.

All comments are welcome.  Please let me know if anything is unclear.

-----

Leo makes it easy to create and run unit tests from individual outline 
nodes or trees.

A node whose headline starts with @tests defines a unit test.

The body text of the @test node contains a **self-contained** unit test.

For example, this creates a complete unit test::

    @test fails  (headline)
    assert False (body text)

To run this test, select the @test node and do:
&lt;alt-x&gt;run-selected-unit-tests-locally.
Leo will create and run the unit test automatically.

To see all of Leo's unit testing commands, do:
&lt;alt-x&gt;run&lt;tab&gt;

Leo pre-defines 'c', 'g' and 'p' in unit tests just as in scripts.

For more details about unit testing, see: 
http://leoeditor.com/unitTesting.html

**Notes for Leo developers**

leo/test/unitTest.leo contains all of Leo's own unit tests.

Running all tests is not necessary.  Just select::

    Active Unit Tests

and then do Alt-4 (run-selected-unit-tests-locally).

**Note**: Some tests will likely fail on machines other than EKR's.
You only need to be concerned about unit tests that start failing after you 
make your changes.

</t>
<t tx="ekr.20130526065545.17596">@nocolor

From: &lt;fidelperez@gmail.com&gt;

I know a programming IDE
&lt;http://sourceforge.net/projects/doublesvsoop/&gt;which bases its existence in
that concept:

You write "code Masks" and whenever you call a piece of code it will ask
only for the parameters, and write the rest of the code. There are already
some languages with most of the masks (all the primary functions and some
complex ones) and its growing.

For instance, if you write:

"window" it will add the window to the code and let you edit the params.

Their functionality would be awesome in Leo and when I know a bit better I
will try to emulate on it. Sticking to Leo tho since it has a much superior
way of managing data.
</t>
<t tx="ekr.20130526065545.17597">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Sun, 5 May 2013 16:35:59 -0700 (PDT) &lt;fidelperez@gmail.com&gt; wrote:

&gt; I know a programming IDE &lt;http://sourceforge.net/projects/doublesvsoop/&gt;which bases its existence in that concept:
&gt;
&gt; You write "code Masks" and whenever you call a piece of code it will ask
&gt; only for the parameters, and write the rest of the code. There are already
&gt; some languages with most of the masks (all the primary functions and some
&gt; complex ones) and its growing.

I suspect different people have different things in mind when they talk
about templates.

Leo's abbreviation system is already quite advanced when it comes to
filling in skeletons of common code layouts.  I type

  def;;

and I get

  def foo(this, that=3D3):
      """foo - Return
 
      :Parameters:
      - `this`: &lt;|describe this|&gt;
      - `that`: &lt;|describe that|&gt;
      """
 
      &lt;|code|&gt;

Two "parameters" are interactively requested, the function name, and
the list of arguments.  The node name is presented as the default for
the function name, and 'self' is included in the list of arguments, so,
assuming the node was already called 'foo', all I type is this, that=3D3.
The layout above is the rst form of the epydoc/sphinx docstring with
formally identified parameters.

The cursor is positioned after Return, where the was an empty &lt;||&gt;
placeholder.  Pressing ,, selects the next placeholder so that typing
replaces it.

There's more, see
https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/5ni2PwfmBz8
and the screencast linked from there
http://www.greygreen.org/tmp/leoabbrev.ogv

Other people, Jacob etc. I think, have been talking about templates
where the input parameters are stored in the outline, allowing for
some of them to be altered and the template generation step re-run.
More like generating a website from data etc.</t>
<t tx="ekr.20130526065545.17599">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Wed, Nov 21, 2012 at 8:55 AM, Jo=E3o Alexandre Toledo &lt;
jalexandretoledo@gmail.com&gt; wrote:

&gt; As I use Leo to write PL/SQL code, I need to write similar text several
&gt; times, changing only small parts of it. It would be great if I could create
&gt; a node with the "template" and then clone it everywhere it should be
&gt; written, and then providing the parameters to be used in this writing.

Variants of this seem to be wanted by many people.  Most recently, there is
the thread, "Templates with macro expansions",
https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/nF2lUEUtaUE

Does that do what you want?

Edward

</t>
<t tx="ekr.20130526065545.17600">@nocolor

From: =?UTF-8?Q?Jo=C3=A3o_Alexandre_Toledo?= &lt;jalexandretoledo@gmail.com&gt;


Hi.

As I use Leo to write PL/SQL code, I need to write similar text several
times, changing only small parts of it. It would be great if I could create
a node with the "template" and then clone it everywhere it should be
written, and then providing the parameters to be used in this writing.

Let me try to clarify it. I'd like to create a tree like this:

 +- @file something.sql
           +- Section 1
              + &lt;&lt; Clone &gt;&gt; with Parameters A, B
           +- Section 2
              + &lt;&lt; Clone &gt;&gt; with Parameters C, D

In this tree, both "Clone" nodes would be generated from a template
specified somewhere in the tree, and would have parts of its text replaced
with values "A" and "B" in Section 1, and "C" and "D" in Section 2.

I've searched but couldn't find anything like this, then I've thought of
trying to write a hook to intercept the "save" command, but couldn't think
of a way to pass the parameters; I think the obvious way would be to put
the parameters after the "&lt;&lt; &gt;&gt;", but then all cloned nodes are changed, so
it wouldn't work.

Another alternative would be creating some kind of directive @something,
but I have no idea of how to do that.

Any ideas?
</t>
<t tx="ekr.20130526065545.17601">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;

Thank you Terry, that is exactly what I would like meant.

Is there a website where abbreviation files are shared so newcomers can
quickly being to use advanced abbreviations?
Id love to download a python version x)

On Monday, May 6, 2013 5:13:42 AM UTC+2, Terry wrote:
&gt;
&gt; On Sun, 5 May 2013 16:35:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidel...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; I know a programming IDE &lt;http://sourceforge.net/projects/doublesvsoop/&gt;which
&gt; bases its existence in that concept:
&gt; &gt;
&gt; &gt; You write "code Masks" and whenever you call a piece of code it will ask
&gt; &gt; only for the parameters, and write the rest of the code. There are
&gt; already
&gt; &gt; some languages with most of the masks (all the primary functions and
&gt; some
&gt; &gt; complex ones) and its growing.
&gt;
&gt; I suspect different people have different things in mind when they talk
&gt; about templates.
&gt;
&gt; Leo's abbreviation system is already quite advanced when it comes to
&gt; filling in skeletons of common code layouts.  I type
&gt;
&gt;   def;;
&gt;
&gt; and I get
&gt;
&gt;   def foo(this, that=3D3):
&gt;       """foo - Return
&gt;  
&gt;       :Parameters:
&gt;       - `this`: &lt;|describe this|&gt;
&gt;       - `that`: &lt;|describe that|&gt;
&gt;       """
&gt;  
&gt;       &lt;|code|&gt;
&gt;
&gt; Two "parameters" are interactively requested, the function name, and
&gt; the list of arguments.  The node name is presented as the default for
&gt; the function name, and 'self' is included in the list of arguments, so,
&gt; assuming the node was already called 'foo', all I type is this, that=3D3.
&gt; The layout above is the rst form of the epydoc/sphinx docstring with
&gt; formally identified parameters.
&gt;
&gt; The cursor is positioned after Return, where the was an empty &lt;||&gt;
&gt; placeholder.  Pressing ,, selects the next placeholder so that typing
&gt; replaces it.
&gt;
&gt; There's more, see
&gt; https://groups.google.com/forum/?fromgroups=3D#!topic/leo-editor/5ni2PwfmBz8
&gt; and the screencast linked from there
&gt; http://www.greygreen.org/tmp/leoabbrev.ogv
&gt;
&gt; Other people, Jacob etc. I think, have been talking about templates
&gt; where the input parameters are stored in the outline, allowing for
&gt; some of them to be altered and the template generation step re-run.
&gt; More like generating a website from data etc.
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17602">@nocolor

From: =?UTF-8?Q?Jo=C3=A3o_Alexandre_Toledo?= &lt;jalexandretoledo@gmail.com&gt;

I've tried it and it's great, I think it will be useful, but it's not what
I was thinking of...

Let me try to explain what I had tougth about... What I would like to do is:

 1. create a new .leo file
 2. add a "template" node (eventually with sub nodes) with some ${schema}
and ${table} macro place holders in its contents
 3. add a @file node to the .leo file
 4. add to this @file node a new one with definitions such as
schema=3DSCHEMA_NAME and table=3DTABLE_NAME
 5. add as a sub node to this last one a clone from the "template" node;
 6. then, when I save everything, the @file would have "SCHEMA_NAME" and
"TABLE_NAME" everywhere a "${schema}" or a "${table}" were in the original
template node.

It would be important that, when I reopen the .leo file later, the macros
in the @file node where shown as ${schema} and ${table}, and not as it's
substituted text.

Now that I've described it, I can't see how it would be done... The
${macro} place holders should be on the contents of the @file node, so
after substitution, how could we recover it?

That's also why the code from Jacob is not what I need (but I'm already
thinking of other uses for it :) ): it will create a text when the button
is pressed, but the generated nodes will be just static text.
</t>
<t tx="ekr.20130526065545.17603">@nocolor

From: Sheng &lt;jmmxwll@gmail.com&gt;

Hello,
I recently discovered Leo in my search for an editor or IDE for python 
programming -- I'm a beginner but am working on a larger project and trying 
out a modular approach requiring organisation of lots of files. Leo would 
be an attractive option if not for various obstacles, including among 
others the following:

  1. Doesn't automatically open previously loaded workbooks, or by file 
click
     * Even when file directly clicked, doesn't open.
     * Only opens from File menu. Annoying &amp; inconvenient. 
  2. Same file as node opened in notepad then edited while still open in 
Leo doesn't update, even on refresh.
  3. Does not open python files in Idle with selection of menu item: File 
--&gt; Open With --&gt; Idle
  
I'm on Windows 8. I've already spent several hours solving other problems 
and reading Leo documentation. Any links or tips to overcome these problems 
quickly would be appreciated.

Sheng.

</t>
<t tx="ekr.20130526065545.17604">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Tue, May 7, 2013 at 2:09 AM, Sheng &lt;jmmxwll@gmail.com&gt; wrote:


&gt; Leo would be an attractive option if not for various obstacles, including
&gt; among others the following:
&gt;
&gt;   1. Doesn't automatically open previously loaded workbooks, or by file
&gt; click
&gt;      * Even when file directly clicked, doesn't open.
&gt;      * Only opens from File menu. Annoying &amp; inconvenient.
&gt;

You must set the file association manually, at present.  Getting this to
happen automatically is a top priority.

Hmm.  It seems like setting file associations isn't documented anywhere.
That's a major hole.

We are currently discussing this topic in this thread:
Bat file launchers for nightly builds:
https://groups.google.com/forum/?fromgroups=#!topic/leo-editor/li9ILUWuNAs
Anyone want to summarize the results?

  2. Same file as node opened in notepad then edited while still open in
&gt; Leo doesn't update, even on refresh.
&gt;

The vim and xemacs plugins do an automatic refresh.  It won't be possible
to update Leo automagically from scite until you save the file in site.
This could be called a bug: please feel free to file a bug report.


&gt;   3. Does not open python files in Idle with selection of menu item: File
&gt; --&gt; Open With --&gt; Idle
&gt;

OpenWith:Idle opens a Leo *node*, not a file.  However, you could use @edit
to put an entire file into a node, and then open the @edit node with Idle.

I personally never use Idle, which is probably why OpenWith:Idle isn't very
useful.  Instead, I use g.pdb.

Thanks for your comments.  Please feel free to continue this conversation.

Edward

</t>
<t tx="ekr.20130526065545.17606">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;

Well I realized that is not neccesary since the only thing I have to do is
rename a node into @auto-rst, but the existence of rst3 in the scripts.leo
file confused me big time.

On Tuesday, May 7, 2013 7:16:08 PM UTC+2, Fidel P=E9rez wrote:
&gt;
&gt; Just reporting outdated information in the node "rst3" in the file
&gt; "leoPluginsRef.leo":
&gt;
&gt; Im studying how to activate rst3 plugin, in this node ("rst3") it says to
&gt; go to www.silvercity.sourceforge.net and download the release for my
&gt; python, but silvercity has python 2.4 as latest, and that project was last
&gt; edited in 2006.
&gt;
&gt;

</t>
<t tx="ekr.20130526065545.17607">@nocolor

From: &lt;fidelperez@gmail.com&gt;

Just reporting outdated information in the node "rst3" in the file 
"leoPluginsRef.leo":

Im studying how to activate rst3 plugin, in this node ("rst3") it says to 
go to www.silvercity.sourceforge.net and download the release for my 
python, but silvercity has python 2.4 as latest, and that project was last 
edited in 2006.
</t>
<t tx="ekr.20130526065545.17608">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;


On Tue, May 7, 2013 at 2:27 PM, Fidel P=C3=A9rez &lt;fidelperez@gmail.com&gt; wrote:

&gt; Well I realized that is not neccesary since the only thing I have to do is
&gt; rename a node into @auto-rst, but the existence of rst3 in the scripts.leo
&gt; file confused me big time.


I've put this on the list of things to document properly.  Not exactly the
right place, but it should suffice.

Edward

</t>
<t tx="ekr.20130526065545.17610">@nocolor

From: Fidel_P &lt;fidelperez@gmail.com&gt;

- Im having trouble also linking Leo files to Leo. I have tried this:
  

      Associate .leo filetype batch file:
&gt;           ftype LeoFile=3DC:Python25pythonw.exe =93C:Python25Libsite-
&gt; packagesleolaunchLeo.py=94 =93%1=94 assoc .leo=3DLeoFile

Which I found here&lt;https://groups.google.com/forum/?fromgroups=3D#!searchin/leo-editor/associate/leo-editor/3Ry5o8gE16E/Ble8B8RCRUsJ&gt;,
but leolaunchleo.py doesnt even exist anymore (the post is old).

- I guess others have had this idea but It would be great to include a
  small file within the Quickstart guide which would associate files
  automatically. (Or maybe asking for imput, which can be done through a
  Leo node and this way the user learns about its functionality).

- Also, I miss some more buttons or scripts in quick start guide,
  preferably before the "programming" section, so when a new user opens it,
  he has had the opportunity to do Ctrl+B on several scripts (for instance,
  showing in the log the name of all the nodes within the selected one,
  having some subnodes with numbers and doing math on them and showing the
  result on the log pane, and as much "silly" but visual functions as
  possible so the user, by going pressing ctrl+b on each, gets a bigger
  chance to understand what is Leo. In my oppinion some users will just
  stop in the quickguide if they are not presented with such a thing before
  going to docs.leo etc.

- Another thing is the plugin activation, the description of the plugins is
  not as accessible as it should be (opinions here, focusing in new users,
  and as I always say, appreciating and fully grateful for Leo as is
  now),and a script for activating them easier, been a week using Leo and
  still cant quite activate, find the descriptions or use them freely...
  And if each plugin or script had an example of use that would be
  priceless, for instance, including them all in quickstart (both scripts,
  plugins branchs) and then the new user could just go through all clicking
  on the examples and just seeing Leo work and show its potential. I know
  some of those are done but as I said, after a week or so I still am very
  confused...

- Also, quickstartguide should be open by default (instead of current Leo
  workbook) at least until the user changes some config and prevents that
  from happening. Is there any "load previous tabs" functionality? (IE open
  the Leo files which where open when it was closed the last time)
</t>
<t tx="ekr.20130526065545.17614">@nocolor

From: gatesphere &lt;gatesphere@gmail.com&gt;

Looks really interesting, Ville!  Thanks for sharing, looking forward to 
diving in.

I'm thinking of some uses for in a rulebook and a few blog posts I'm 
writing right now.  Being able to have my document be executable seems 
awesome.

--&gt;Jake
</t>
<t tx="ekr.20130526065545.17615">@nocolor

From: HaveF &lt;iamaplayer@gmail.com&gt;


Thanks!

Although it beyond my current requirements, maybe, 
I need to read valuespace_example.leo to find more typical usage.

On Tuesday, May 14, 2013 4:15:12 AM UTC+8, Ville M. Vainio wrote:
&gt;
&gt; This one is not "exhaustive", but in the interest of time management, I 
&gt; decided to push it as is. I'll blog about more features later on.
&gt;
&gt; http://leo-editor.github.io/valuespace-intro.html
&gt;
&gt; Hope it already helps alleviate the mystery of what it's all about :)
&gt;

</t>
<t tx="ekr.20130526065545.17616">@nocolor

From: Matt Wilkie &lt;maphew@gmail.com&gt;

Thank you so much Ville.

That looks awesomely powerful. And I have a use for the json slurper right
now! I can't wait to try it out.
</t>
<t tx="ekr.20130526065545.17617">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Mon, May 13, 2013 at 3:15 PM, Ville M. Vainio &lt;vivainio@gmail.com&gt; wrote:

&gt; This one is not "exhaustive", but in the interest of time management, I
&gt; decided to push it as is. I'll blog about more features later on.
&gt;
&gt; http://leo-editor.github.io/valuespace-intro.html
&gt;

Thanks Ville, I'll look at it in detail later today.
</t>
<t tx="ekr.20130526065545.17618">@nocolor

From: "Ville M. Vainio" &lt;vivainio@gmail.com&gt;

This one is not "exhaustive", but in the interest of time management, I
decided to push it as is. I'll blog about more features later on.

http://leo-editor.github.io/valuespace-intro.html

Hope it already helps alleviate the mystery of what it's all about :)

</t>
<t tx="ekr.20130526065545.17620">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

I've added a new plugin to Leo, that adds printing support when using 
the Qt GUI.  Available from rev 5779.

Here's the docscring:

'''Supports printing from the Qt GUI.

Jacob M. Peck, 2013

Commands
=======
This plugin supports the following twelve commands:

print-selected-node
-------------------

Opens up the print dialog to print the selected headline and node.

print-preview-selected-node
---------------------------

Opens up the print preview dialog to preview the selected headline
and node.

print-selected-node-body
------------------------

Opens up the print dialog to print the selected node body.

print-preview-selected-node-body
--------------------------------

Opens up the print preview dialog to preview the selected node body.

print-expanded-node
-------------------

Opens up the print dialog to print the expanded contents of the
selected node, with top-level headline.

print-preview-expanded-node
---------------------------

Opens up the print preview dialog to preview the expanded contents
of theselected node, with top-level headline.

print-expanded-node-body
------------------------

Opens up the print dialog to print the expanded node body.

print-preview-expanded-node-body
--------------------------------

Opens up the print preview dialog to preview the expanded node
body.

print-marked-nodes
------------------

Opens up the print dialog to print all marked nodes in the current
outline, with headlines.

print-preview-marked-nodes
--------------------------

Opens up the print preview dialog to preview all marked nodes in \\
the current outline, with headlines.

print-marked-node-bodies
------------------------

Opens up the print dialog to print the bodies of all marked nodes
in the current outline.

print-preview-marked-node-bodies
--------------------------------

Opens up the print preview dialog to preview the bodies of all
marked nodes in the current outline.

Settings
=======
- ``@string printing-font-family = DejaVu Sans Mono``
   The font family for printing.  A monospaced font is recommended.

- ``@string printing-font-size = 12``
   The font size for printing bodies, in px.  Due to limitations
   of PyQt, the size of headlines cannot be changed.
'''

To use it, be sure to add `printing.py` to your @enabled-plugins.

Future work may have more printing modes available, and I intend on 
doing a blog post on the leoblog about creating custom printing modes in 
scripts.

This addresses bug 1132804: 
https://bugs.launchpad.net/leo-editor/+bug/1132804

--&gt;Jake

</t>
<t tx="ekr.20130526065545.17621">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

On 5/15/2013 9:04 AM, Kent Tenney wrote:
&gt; It just works! Nice.
&gt; Being able to preview is great, less paper wasted.
&gt;
&gt; I rely entirely on command completion as a memory aid, too
&gt; bad the info listing commands also start with 'print'. I would
&gt; think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
&gt; situation now we have print.
&gt;
&gt; Too late?
&gt;
I agree completely w/r/t 'list-&lt;attribute&gt;', but it most likely is too 
late.  Those are probably in use by some script somewhere.  :(

Thanks for the comments, though!  To be fair, this whole thing was crazy 
simple to throw together - Qt does *all* the heavy lifting. Just throw 
together an HTML string, wrap it in a QTextDocument, and call print_, 
and Bob's your uncle.  I can see why Leo uses PyQt now... it's awesome.
--&gt;Jake

</t>
<t tx="ekr.20130526065545.17622">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;


Thank you for this plugin, very useful!

On Wednesday, May 15, 2013 2:41:19 PM UTC+2, Jacob Peck wrote:
&gt;
&gt; Hello all, 
&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using 
&gt; the Qt GUI.  Available from rev 5779. 
&gt;
&gt; Here's the docscring: 
&gt;
&gt; '''Supports printing from the Qt GUI. 
&gt;
&gt; Jacob M. Peck, 2013 
&gt;
&gt; Commands 
&gt; ======== 
&gt;
&gt; This plugin supports the following twelve commands: 
&gt;
&gt; print-selected-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the selected headline and node. 
&gt;
&gt; print-preview-selected-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected headline 
&gt; and node. 
&gt;
&gt; print-selected-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the selected node body. 
&gt;
&gt; print-preview-selected-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the selected node body. 
&gt;
&gt; print-expanded-node 
&gt; ------------------- 
&gt;
&gt; Opens up the print dialog to print the expanded contents of the 
&gt; selected node, with top-level headline. 
&gt;
&gt; print-preview-expanded-node 
&gt; --------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded contents 
&gt; of theselected node, with top-level headline. 
&gt;
&gt; print-expanded-node-body 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the expanded node body. 
&gt;
&gt; print-preview-expanded-node-body 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the expanded node 
&gt; body. 
&gt;
&gt; print-marked-nodes 
&gt; ------------------ 
&gt;
&gt; Opens up the print dialog to print all marked nodes in the current 
&gt; outline, with headlines. 
&gt;
&gt; print-preview-marked-nodes 
&gt; -------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview all marked nodes in \\ 
&gt; the current outline, with headlines. 
&gt;
&gt; print-marked-node-bodies 
&gt; ------------------------ 
&gt;
&gt; Opens up the print dialog to print the bodies of all marked nodes 
&gt; in the current outline. 
&gt;
&gt; print-preview-marked-node-bodies 
&gt; -------------------------------- 
&gt;
&gt; Opens up the print preview dialog to preview the bodies of all 
&gt; marked nodes in the current outline. 
&gt;
&gt; Settings 
&gt; ======== 
&gt;
&gt; - ``@string printing-font-family = DejaVu Sans Mono`` 
&gt;    The font family for printing.  A monospaced font is recommended. 
&gt;
&gt; - ``@string printing-font-size = 12`` 
&gt;    The font size for printing bodies, in px.  Due to limitations 
&gt;    of PyQt, the size of headlines cannot be changed. 
&gt; ''' 
&gt;
&gt; To use it, be sure to add `printing.py` to your @enabled-plugins. 
&gt;
&gt; Future work may have more printing modes available, and I intend on 
&gt; doing a blog post on the leoblog about creating custom printing modes in 
&gt; scripts. 
&gt;
&gt; This addresses bug 1132804: 
&gt; https://bugs.launchpad.net/leo-editor/+bug/1132804 
&gt;
&gt; --&gt;Jake 
&gt;

</t>
<t tx="ekr.20130526065545.17623">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Wed, May 15, 2013 at 7:41 AM, Jacob Peck &lt;gatesphere@gmail.com&gt; wrote:

&gt;
&gt; I've added a new plugin to Leo, that adds printing support when using the
&gt; Qt GUI.  Available from rev 5779.
&gt;

Excellent work.  Many thanks for this contribution.
</t>
<t tx="ekr.20130526065545.17624">@nocolor

From: Kent Tenney &lt;ktenney@gmail.com&gt;

It just works! Nice.
Being able to preview is great, less paper wasted.

I rely entirely on command completion as a memory aid, too
bad the info listing commands also start with 'print'. I would
think that 'list-&lt;attribute&gt;' would have nicely disambiguated the
situation now we have print.

Too late?

</t>
<t tx="ekr.20130526065545.17625">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;

Sounds great!
So, in the search results, will I be able to know how to call that function?
IE, if I find insertIconFromFile, will I be able to know that I can call it
through using c.editCommands.insertIconFromFile?


On Monday, May 20, 2013 3:47:35 PM UTC+2, Terry wrote:
&gt;
&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidel...@gmail.com &lt;javascript:&gt;&gt; wrote:
&gt;
&gt; &gt; Ok, in order to print icons, the code is this:
&gt; &gt;
&gt; &gt; c.editCommands.insertIconFromFile(path)
&gt; &gt;
&gt; &gt; Im quoting from this Leo manual&lt;
&gt; http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; &gt; "inserting and deleting icons" section -_-
&gt; &gt;
&gt; &gt; Although I still have a mess on which functions can be called how, and
&gt; &gt; where to find the list of classes that can be called such as
&gt; "editCommands"
&gt; &gt; and the rest that they might exist.
&gt;
&gt; I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).
&gt;
&gt; I've written an introspection function which lists the methods and
&gt; instance variables (and class variables) of an arbitrary object by name
&gt; and by type.  I should release it.  It builds its lists in a Leo
&gt; outline, so you can navigate around that outline and expand nodes by
&gt; introspection as needed.
&gt;
&gt; It occurs to me that the same code could be used to search Leo's
&gt; runtime object hierarchy for you, i.e. you enter 'insertIconFromFile'
&gt; and it recursively searches for it.
&gt;
&gt; Cheers -Terry
&gt;

</t>
<t tx="ekr.20130526065545.17626">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;

On Mon, May 20, 2013 at 8:47 AM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=C3=A9rez &lt;fidelperez@gmail.com&gt; wrote:
&gt;

&gt; Although I still have a mess on which functions can be called how, and
&gt; where to find the list of classes that can be called such as
"editCommands"
&gt; and the rest that they might exist.

I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).
&gt;

I suppose you could say that there is no general solution, but the
situation isn't really all that difficult.

Start with c.  We know what that is:  it is a commander object representing
an open outline.

There are **official ivars** of c, all referring to wrapper classes defined
in leoFrame.py:

c.frame: an instance of leoFrame.
c.frame.tree: an instance of  leoTree.
c.frame.body: an instance of leoBody.
c.frame.log: an instance of leoLog.

The tree, body and log objects have a *ctrl* objects, which are *wrapper*
classes:

c.frame.tree.treeCtrl
c.frame.body.bodyCtrl
c.frame.log.logCtrl

In particular, see
http://leoeditor.com/scripting.html#c-frame-body-bodyctrlfor a
description of the high-level text interface supported by all
high-level text widgets, including the log and body classes.

These wrapper classes have a widget ivar, which is a reference to the
corresponding Qt widget object.  For example::

    import PyQt4.QtGui as QtGui
    w =3D c.frame.body.bodyCtrl.widget
    g.es(w)
    g.es(isinstance(w,QtGui.QTextBrowser)

yields::

    (LeoQTextBrowser) 62418136
    True

As shown, the LeoQTextBrowser class is a real (subclass of) QTextBrowser.

HTH.  I've made a note to discuss official ivars in more detail in the
scripting chapter.
</t>
<t tx="ekr.20130526065545.17627">@nocolor

From: =?UTF-8?Q?Fidel_P=C3=A9rez?= &lt;fidelperez@gmail.com&gt;
Content-Transfer-Encoding: quoted-printable

Ok, in order to print icons, the code is this:

c.editCommands.insertIconFromFile(path)

Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
"inserting and deleting icons" section -_-

Although I still have a mess on which functions can be called how, and
where to find the list of classes that can be called such as "editCommands"
and the rest that they might exist.
Thanks!

On Sunday, May 19, 2013 12:43:50 PM UTC+2, Fidel P=E9rez wrote:
&gt;
&gt; Hi, I am going through something similar Matt Wilkie went through in this
&gt; post&lt;https://groups.google.com/forum/?fromgroups=3D#!searchin/leo-editor/leopyref/leo-editor/pWyd5ae952I/kvxf_H-QBq4J&gt;
&gt; .
&gt;
&gt; Basically I can find interesting functions in LeoPyRef.leo but I dont know
&gt; how to access them from my new leo scripts.
&gt;
&gt; I dont get the difference when I have to call them using g.Functionname(),
&gt; c.functionname(), or when those wont do.
&gt;
&gt; How can I call the function "insertIconFromFile"?
&gt; How can I know how to call functions found in LeoPyRef.leo?
&gt;
&gt; Thanks!
&gt;
&gt; Pd: When I get that, I will already have a bookmarks importer from
&gt; chrome/mozilla which will also import the icons of the links! x)
&gt; I will prepare some more interesting utils (import mindmap, etc) then
&gt; release them together with manuals oriented to noob users.
&gt;

</t>
<t tx="ekr.20130526065545.17628">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Mon, 20 May 2013 04:00:59 -0700 (PDT) &lt;fidelperez@gmail.com&gt; wrote:

&gt; Ok, in order to print icons, the code is this:
&gt;
&gt; c.editCommands.insertIconFromFile(path)
&gt;
&gt; Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; "inserting and deleting icons" section -_-
&gt;
&gt; Although I still have a mess on which functions can be called how, and
&gt; where to find the list of classes that can be called such as "editCommands"
&gt; and the rest that they might exist.

I'm not aware of a general solution to the problem of finding the
various pieces of Leo's class structure.  Basically there are all these
classes defined in the source, and instances of these are attached to
each other in a hierarchical network (with loops).

I've written an introspection function which lists the methods and
instance variables (and class variables) of an arbitrary object by name
and by type.  I should release it.  It builds its lists in a Leo
outline, so you can navigate around that outline and expand nodes by
introspection as needed.

It occurs to me that the same code could be used to search Leo's
runtime object hierarchy for you, i.e. you enter 'insertIconFromFile'
and it recursively searches for it.

Cheers -Terry

</t>
<t tx="ekr.20130526065545.17629">@nocolor

From: &lt;fidelperez@gmail.com&gt;

I am going through something similar Matt Wilkie went through in this
post&lt;https://groups.google.com/forum/?fromgroups=#!searchin/leo-editor/leopyref/leo-editor/pWyd5ae952I/kvxf_H-QBq4J&gt;
.

Basically I can find interesting functions in LeoPyRef.leo but I dont know 
how to access them from my new leo scripts.

I dont get the difference when I have to call them using g.Functionname(), 
c.functionname(), or when those wont do.

How can I call the function "insertIconFromFile"?
How can I know how to call functions found in LeoPyRef.leo?

Thanks!

Ps: When I get that, I will already have a bookmarks importer from 
chrome/mozilla which will also import the icons of the links! x)
I will prepare some more interesting utils (import mindmap, etc) then 
release them together with manuals oriented to noob users.

</t>
<t tx="ekr.20130526065545.17630">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Mon, 20 May 2013 08:47:35 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; On Mon, 20 May 2013 04:00:59 -0700 (PDT)
&gt; Fidel P=E9rez &lt;fidelperez@gmail.com&gt; wrote:
&gt;
&gt; &gt; Ok, in order to print icons, the code is this:
&gt; &gt;
&gt; &gt; c.editCommands.insertIconFromFile(path)
&gt; &gt;
&gt; &gt; Im quoting from this Leo manual&lt;http://leoeditor.com/scripting.html#import-objects&gt;,
&gt; &gt; "inserting and deleting icons" section -_-
&gt; &gt;
&gt; &gt; Although I still have a mess on which functions can be called how, and
&gt; &gt; where to find the list of classes that can be called such as "editCommands"
&gt; &gt; and the rest that they might exist.
&gt;
&gt; I'm not aware of a general solution to the problem of finding the
&gt; various pieces of Leo's class structure.  Basically there are all these
&gt; classes defined in the source, and instances of these are attached to
&gt; each other in a hierarchical network (with loops).

I didn't really finish the above para.  The problem is that it's hard
to guess what the names of the attachment points are, and the attaching
is done in a variety of places, sometimes by factory functions which
further obscure linkages.  Not a fault with Leo, just the way programs
work.  So the tool I've written may be the best approach to mapping
Leo's runtime structure. Another thing it could do, try and map 'major'
classes, or at least classes from leo.core.* - i.e. ignore the built in
types.</t>
<t tx="ekr.20130526065545.17633">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; I've added [an abbreviation] "persist;;"


[snip]

How do you use the code inserted by the abbreviation?  I suspect I'm not
the only one who doesn't understand what you are trying to do...
</t>
<t tx="ekr.20130526065545.17634">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

I've added an abbreviation to my myLeoSettings.leo abbreviations:
https://gist.github.com/tbnorth/5530059

It's the abbreviation "persist;;" and when you type that you get:

---cut here---
import json

json_state_file = "cache_info_file.json"
if not os.path.exists(json_state_file):
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    except:
        json.dump(cache_info, open(json_state_file, 'w'))
---cut here---

with appropriate interaction to customize all the parts which, in the
above example, include "cache_", i.e. the filename and the variable
name.

The point is it seems silly to create a module and hence a dependency
for what is barely 4 lines of actual code, but those 4 lines give you
very handy robust persistence, so something like an editor abbreviation
is the obvious way to make the available - nothing Leo specific here,
except that only serious editors have abbreviation like that ;-).
</t>
<t tx="ekr.20130526065545.17635">@nocolor

From: "Edward K. Ream" &lt;edreamleo@gmail.com&gt;



On Fri, May 24, 2013 at 8:29 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:

&gt; On Fri, 24 May 2013 16:35:59 -0500
&gt; "Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:
&gt;


&gt; &gt; How do you use the code inserted by the abbreviation?  I suspect I'm not
&gt;
&gt;  It's just a framework for providing a dictionary the contents of which
&gt; persist between runs of the program.  I've used it for code that's
&gt; making lots of small url requests against a server, to cache the
&gt; results so that during development the crash / debug / re-run cycle is
&gt; faster because each piece of data is requested only once, ever, not once
&gt; every run.  More recently I was using it to store key value pairs of
&gt; filenames and a comment on the issue in the file, knowing that
&gt; completing the analysis of the issues in the files would take more than
&gt; one run of the program which was identifying the issues.
&gt;
&gt; So in the example below, the content of the cache_info dictionary is
&gt; persistent, whatever main() does with it is seen next time the
&gt; program's run.  Nothing Leo specific except that it's really just an
&gt; import statement plus 5 lines of code and doesn't seem worth its own
&gt; file, but is more than you want to re-type all the time either, so
&gt; ideal for an abbreviation in your favorite editor.
&gt;

Thanks for the explanation.
</t>
<t tx="ekr.20130526065545.17636">@nocolor

From: Jacob Peck &lt;gatesphere@gmail.com&gt;

This is a multi-part message in MIME format.


On 5/24/2013 5:35 PM, Edward K. Ream wrote:
&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com 
&gt; &lt;mailto:terry_n_brown@yahoo.com&gt;&gt; wrote:
&gt;
&gt;     I've added [an abbreviation] "persist;;"
&gt;
&gt;
&gt; [snip]
&gt;
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm 
&gt; not the only one who doesn't understand what you are trying to do...
&gt;
&gt; Edward
&gt;
Seconded.

</t>
<t tx="ekr.20130526065545.17637">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

p.s. the 'except:' in the code below should have been 'finally:', fixed
on the gist now.

On Thu, 23 May 2013 14:41:31 -0500
Terry Brown &lt;terry_n_brown@yahoo.com&gt; wrote:

&gt; I've added an abbreviation to my myLeoSettings.leo abbreviations:
&gt; https://gist.github.com/tbnorth/5530059
&gt; 
&gt; It's the abbreviation "persist;;" and when you type that you get:
&gt; 
&gt; ---cut here---
&gt; import json
&gt; 
&gt; json_state_file = "cache_info_file.json"
&gt; if not os.path.exists(json_state_file):
&gt;     json.dump({'cache_items':{}}, open(json_state_file, 'w'))
&gt; cache_info = json.load(open(json_state_file))
&gt; 
&gt; def main():
&gt; 
&gt;     # do stuff with cache_info...
&gt; 
&gt; if __name__ == '__main__':
&gt; 
&gt;     try:
&gt;         main()
&gt;     except:
&gt;         json.dump(cache_info, open(json_state_file, 'w'))
&gt; ---cut here---
&gt; 
&gt; with appropriate interaction to customize all the parts which, in the
&gt; above example, include "cache_", i.e. the filename and the variable
&gt; name.
&gt; 
&gt; The point is it seems silly to create a module and hence a dependency
&gt; for what is barely 4 lines of actual code, but those 4 lines give you
&gt; very handy robust persistence, so something like an editor abbreviation
&gt; is the obvious way to make the available - nothing Leo specific here,
&gt; except that only serious editors have abbreviation like that ;-).
&gt; 
&gt; Cheers -Terry
&gt; 

</t>
<t tx="ekr.20130526065545.17638">@nocolor

From: Terry Brown &lt;terry_n_brown@yahoo.com&gt;

On Fri, 24 May 2013 16:35:59 -0500
"Edward K. Ream" &lt;edreamleo@gmail.com&gt; wrote:

&gt; On Thu, May 23, 2013 at 2:41 PM, Terry Brown &lt;terry_n_brown@yahoo.com&gt;wrote:
&gt; 
&gt; &gt; I've added [an abbreviation] "persist;;"
&gt; 
&gt; 
&gt; [snip]
&gt; 
&gt; How do you use the code inserted by the abbreviation?  I suspect I'm not

The corrected version is below for reference - I had `except` instead
of `finally` in the first version, so you data was only saved if
something went wrong :-)

It's just a framework for providing a dictionary the contents of which
persist between runs of the program.  I've used it for code that's
making lots of small url requests against a server, to cache the
results so that during development the crash / debug / re-run cycle is
faster because each piece of data is requested only once, ever, not once
every run.  More recently I was using it to store key value pairs of
filenames and a comment on the issue in the file, knowing that
completing the analysis of the issues in the files would take more than
one run of the program which was identifying the issues.

So in the example below, the content of the cache_info dictionary is
persistent, whatever main() does with it is seen next time the
program's run.  Nothing Leo specific except that it's really just an
import statement plus 5 lines of code and doesn't seem worth its own
file, but is more than you want to re-type all the time either, so
ideal for an abbreviation in your favorite editor.

I've added a couple of comments in the version below.

Cheers -Terry

---cut here---
import json

# name for persistent data store
json_state_file = "cache_info_file.json"   
if not os.path.exists(json_state_file):
    # create persistent data store if it doesn't exist
    json.dump({'cache_items':{}}, open(json_state_file, 'w'))
# load persistent data
cache_info = json.load(open(json_state_file))

def main():

    # do stuff with cache_info...

if __name__ == '__main__':

    try:
        main()
    finally:
        # save altered persistent data
        json.dump(cache_info, open(json_state_file, 'w'), indent=4)
---cut here---

&gt; the only one who doesn't understand what you are trying to do...
&gt; 
&gt; Edward
&gt; 

</t>
<t tx="ekr.20130803073926.17113"></t>
<t tx="ekr.20130803073926.17114"></t>
<t tx="ekr.20130803073926.17115"></t>
<t tx="ekr.20130803073926.17116"></t>
<t tx="ekr.20130803073926.17117"></t>
<t tx="ekr.20130803073926.17119"></t>
<t tx="ekr.20130803073926.17122"></t>
<t tx="ekr.20130803073926.17123"></t>
<t tx="ekr.20130803073926.17124"></t>
<t tx="ekr.20130803073926.17125"></t>
<t tx="ekr.20130803125244.17080">Installing Leo on Windows

    Install Python from http://www.python.org/download/releases/

    Install either Tk or Qt, as described above.

    Install Leo. Get Leo’s .zip file from http://sourceforge.net/projects/leo/ You can unpack the .zip file anywhere, including Python’s site-packages folder, for example, C:\Python26\Lib\site-packages

    [optional] Generate/update a junction link from unpacked leo folder to ...\site-packages\leo:

    cd C:\Python26\Lib\site-packages\
    junction leo leo-4-6-2-final

    Create windows shortcut (edit paths as necessary):

    Target   =  C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py"
    Start in =  D:\code

    Associate .leo filetype batch file:

    ftype LeoFile=C:\Python26\pythonw.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" "%*"
    assoc .leo=LeoFile

    [optional] Put this leo.bat in %PATH%:

    @C:\Python26\python.exe "C:\Python26\Lib\site-packages\leo\launchLeo.py" %*

For more information see:

Junction links:
    http://technet.microsoft.com/en-gb/sysinternals/bb896768.aspx,
    http://groups.google.com/group/leo-editor/msg/30116f9193241dc4
ftype:
    http://ss64.com/nt/ftype.html
assoc:
    http://ss64.com/nt/assoc.html

</t>
<t tx="ekr.20130803125244.17092">@language rest

A **position** object represents a specific node in a Leo outline.

Equivalently, a position represents the state of a Leo generator, that is,
a specific node during a traversal of a Leo outline.

Because of clones, a node may appear arbitrarily many times in an outline,
so a node may appear at arbitrarily many positions in the outline.

For any position p, **p.v** is the vnode at position p.

A node's vnode never changes, regardless of where the node appears in the
outline, and regardless of whether the node is cloned or not.

**Positions become invalid when the outline changes.**

You may save and and use positions *provided* the outline remains unchanged.

Leo's generators deliver positions, one after each other, using a *single*
(ever-changing) position. As a result, scripts must use p.copy() to create
lists of positions. For example::

    aList = [p.copy() for p in c.rootPosition().subtree()]
</t>
<t tx="ekr.20130803125244.17093">Consider this example, where nodes with the same names are clones of each other::

+ Root
    + A
        - B
    + A
        - B
    - B

Leo's c.all_nodes() iterator will deliver 9 positions:

    1: Root
    2: A
    3: B
    4: A
    5: B
    6: B

*All* positions returned by a traversal are distinct.  Some examples:

- Position 2: A is different from position 4: A
  The former is the first child of root; the latter is the second child of root.
  
- The parent of position 3: B is A at childIndex 0 of Root.
  The parent of position 5: B is A at childIndex 1 of Root.
  The parent of position 6: B is Root. The childIndex of 6: B is 2.

</t>
<t tx="ekr.20130803125244.17094">http://leo-editor.github.io/valuespace-intro.html
</t>
<t tx="ekr.20130803125244.17095">g.cls()
# root = g.findNodeAnywhere(c,'root')
root = c.rootPosition()
assert root
line = 0
for p in root.self_and_subtree():
    line += 1
    print('%s: %4s @ %d p._childIndex: %d p.stack: %s' % (
        line,
        p.cleanHeadString(),
        id(p.v),
        p._childIndex,
        # p.level(),p.key(),
        # p.stack,
        '[%s]' % ', '.join(['(v:%s @ %s, %s)' % (v.h,id(v),i) for v,i in p.stack]),
    ))
</t>
<t tx="sps.20100708203040.19008">@language python
import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
&lt;&lt; pdf manual &gt;&gt;
</t>
<t tx="sps.20100708203040.19009">d = c.scanAllDirectives(p)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="sps.20100708203040.19010"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('../../fixup.pl &lt; Leodocumentation.tex &gt; LeoDoc.tex')
os.system('make LeoDoc.pdf')
</t>
<t tx="sps.20100708213227.44914"></t>
<t tx="tbrown.20120821215353.22854">Abbreviations are very versatile. You can type ``def;;``, and Leo will
prompt you for a function name, detect whether the function needs a
``self`` parameter, ask for a list of parameters, and expand you input
(just ``"some_function"`` and ``"one, two, three=4"`` to something like::
    
    def some_function(one, two, three=4):
        """some_function - Return &lt;|return|&gt;
    
        :Parameters:
        - `one`: &lt;|describe one|&gt;
        - `two`: &lt;|describe two|&gt;
        - `three`: &lt;|describe three|&gt;
        """
    
        &lt;|code|&gt;

The first placeholder, ``&lt;|return|&gt;`` will be selected, so you can
begin typing in the right place. Hitting ``,,`` will select the next
place holder, and so on.

Here's a list of `@settings` which relate to abbreviations.

@bool enable-abbreviations = False
    True: enable abbreviations
    False disable abbreviations
    
    Typically you would enable abbreviations in myLeoSettings.leo or in individual
    .leo files.
@data global-abbreviations &amp; @data abbreviations
    # Comments lines (lines starting with '#') are ignored.
    # Non-comment lines should have the form::
    #
    #    name=definition
    
    # Definitions in @data abbreviation nodes override definitions in @data
    # global-abbreviation nodes. Typically you would define @data abbreviation nodes
    # in myLeoSettings.leo
@string abbreviations-subst-start = None
    If this @string is set to something other than None, *and*
    @bool scripting-at-script-nodes = True, then substitutions
    will be made when abbreviations are inserted.  For example
    set abbreviations-subst-start to ``{|{`` and
    abbreviations-subst-end to ``}|}`` and an abbreviation
    like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    will expand to something like "Mon Aug 20 22:00:40 2012"
    
    See also abbreviations-subst-env.
@string abbreviations-subst-end = }|}
    See abbreviations-subst-start.  This setting,
    abbreviations-subst-end, has no effect if
    abbreviations-subst-start is not set.
@data abbreviations-subst-env
    If abbreviations-subst-start is set (see that 
    @setting), the code in this node will be executed, once
    only, when the outline is loaded, in an environment which
    will be used for execution of substitutions in
    abbreviations.  For example, if this node contains
    ``import time``, then an abbreviation like::
    
        date;;={|{import time;x=time.asctime()}|}
    
    can be written more simply as::
    
        date;;={|{x=time.asctime()}|}
    
    The environment will contain `c` and `g`, a dict called `_values`
    (see ask() and get() in @data abbreviations-subst-env), and
    `_abr`, the abbreviation being expanded.
    
    Start lines with `\:` to preserve indentation.
@@data abbreviations examples
    See the node for examples of advanced abbreviations with
    substitutions.
@string abbreviations-place-start = &lt;|
    Start of a placeholder for template expansions.  E.g.
    the `&lt;|` in::
    
        w;;=while &lt;|condition|&gt;:
        \:    &lt;|code|&gt;
    
    This would expand with the `&lt;|condition|&gt;` selected, and `,,`,
    if that's an abbreviation linked to next_place(), see 
    @@data abbreviations examples, would select `&lt;|code|&gt;`.
@string abbreviations-place-end = \|&gt;
    The end of a placeholder for template expansions, e.g.
    `|&gt;`. See @string abbreviations-place-start.
</t>
<t tx="ville.20090705224948.5734">import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
# no pdf manual creation, perhaps too "involved" for many
</t>
<t tx="ville.20090705225609.5736">mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')
</t>
<t tx="ville.20090705225609.5738"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('make all-pdf')
</t>
</tnodes>
</leo_file>
