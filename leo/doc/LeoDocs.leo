<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070610174018"><vh>Startup</vh>
<v t="ekr.20070325123558"><vh>@chapters</vh></v>
<v t="ekr.20050404094627"><vh>Buttons</vh>
<v t="ekr.20090712122931.10453"><vh>Disabled buttons</vh>
<v t="ekr.20050901060119"><vh>@@button def list</vh>
<v t="ekr.20050901061220"><vh>createDefList</vh></v>
</v>
<v t="sps.20100708203040.19008"><vh>@@button generate-full-userguide</vh>
<v t="sps.20100708203040.19009"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="sps.20100708203040.19010"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
<v t="ville.20090705224948.5734"><vh>@@button generate-userguide</vh>
<v t="ville.20090705225609.5736"><vh>&lt;&lt; html manual &gt;&gt;</vh></v>
<v t="ville.20090705225609.5738"><vh>&lt;&lt; pdf manual &gt;&gt;</vh></v>
</v>
<v t="ekr.20050901055150"><vh>@@button promote</vh></v>
<v t="ekr.20050902080416"><vh>@@button reformat-paragraph</vh></v>
<v t="ekr.20091112060950.6677"><vh>@@button Remove newlines</vh></v>
<v t="ekr.20060525104232"><vh>@@button rst-&gt;html</vh></v>
<v t="ekr.20060525110135"><vh>@@button rst-&gt;pdf</vh></v>
<v t="ekr.20060525110217"><vh>@@button rst-&gt;rst</vh></v>
<v t="ekr.20060525110135.1"><vh>@@button rst-&gt;tex</vh></v>
<v t="ekr.20050812090111"><vh>@@button rst3</vh></v>
<v t="ekr.20091006063434.13802"><vh>@@button rst3</vh></v>
<v t="ekr.20050901054622"><vh>@@button Save</vh></v>
<v t="ekr.20050901121617"><vh>@@button sentence</vh>
<v t="ekr.20050901121617.1"><vh>splitSentences</vh></v>
</v>
<v t="ekr.20041226081019"><vh>@@button Spell</vh></v>
<v t="ekr.20070115172724.2"><vh>@@button winpdb</vh></v>
</v>
<v t="ville.20090520232034.6345"><vh>@button rst-preview</vh></v>
</v>
<v t="ekr.20050407144417"><vh>@settings</vh>
<v t="ekr.20100908122026.4443"><vh>@enabled_plugins</vh></v>
<v t="ekr.20100907092300.4440"><vh>Inkscape options</vh>
<v t="ekr.20100907092300.4441"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20100907092300.4442"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20101009114830.4724"><vh>File options</vh>
<v t="ekr.20080923182326.1"><vh>@@bool create_nonexistent_directories = True</vh></v>
<v t="ekr.20080412124815.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20101009114830.4723"><vh>@bool put_expansion_bits_in_leo_files = True</vh></v>
</v>
<v t="ekr.20101009114830.4725"><vh>Plugins options</vh>
<v t="ekr.20050407144342"><vh>@page http plugin</vh>
<v t="ekr.20050407144342.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050407144342.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050407144342.3"><vh>@string rst_http_attributename = rst_http_attribute</vh></v>
</v>
<v t="ekr.20050812123002"><vh>@page rst3 options</vh>
<v t="ekr.20050812123002.1"><vh>Http options...</vh>
<v t="ekr.20050812123002.2"><vh>@bool rst3_clear_http_attributes = False</vh></v>
<v t="ekr.20050812123002.3"><vh>@string rst3_http_attributename = 'rst_http_attribute'</vh></v>
<v t="ekr.20050812123002.4"><vh>@bool rst3_http_server_support = False</vh></v>
<v t="ekr.20050812123002.5"><vh>@string rst3_node_begin_marker = 'http-node-marker-'</vh></v>
</v>
<v t="ekr.20050812123002.6"><vh>@bool rst3_massage_body = False</vh></v>
<v t="ekr.20050812123002.7"><vh>@bool rst3_format_headlines = True</vh></v>
<v t="ekr.20050812123002.8"><vh>@bool rst3_write_intermediate_file = True</vh></v>
<v t="sps.20100708213227.44914"><vh>@string rst3_write_intermediate_extension = .html.txt</vh></v>
<v t="ekr.20051202072010"><vh>@string rst3_default_path =</vh></v>
</v>
</v>
</v>
<v t="ekr.20080923181012.1"><vh>@@rst ../test/new-directory/test.html</vh></v>
</v>
<v t="ekr.20100805171546.4412"><vh>Files</vh>
<v t="ville.20090609182215.5676"><vh>@auto-rst treecaching.txt</vh></v>
<v t="ekr.20090428102353.1"><vh>@edit html\leo_toc.html.txt</vh></v>
<v t="ekr.20090428133936.2"><vh>@edit html\conf.py</vh></v>
</v>
<v t="ekr.20050831195449"><vh>Read me first</vh></v>
<v t="ekr.20040414161647"><vh>Users Guide</vh>
<v t="ekr.20050831184021.3"><vh>Front matter</vh>
<v t="ekr.20100805165051.7148"><vh>@thin frontMatter.txt</vh></v>
</v>
<v t="ekr.20070701101808"><vh>Preface</vh>
<v t="ekr.20100805165051.7149"><vh>@thin preface.txt</vh></v>
</v>
<v t="ekr.20050831184021.4"><vh>What people are saying about Leo</vh>
<v t="ekr.20100805165051.7150"><vh>@thin testimonials.txt</vh></v>
</v>
<v t="ekr.20050831195331.1"><vh>FAQ</vh>
<v t="ekr.20100805165051.7151"><vh>@thin FAQ.txt</vh></v>
</v>
<v t="ekr.20101007100904.4372"><vh>Slideshows page</vh>
<v t="ekr.20100821182153.4344"><vh>@thin screen-shots.txt</vh></v>
</v>
<v t="ekr.20100731112744.7267"><vh>Chapter 1: Installing Leo</vh>
<v t="ekr.20100805165051.7152" descendentVnodeUnknownAttributes="7d71005507302e302e352e3171017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e710558040000003c2f613e71065d71072858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e710858060000003c2f6469763e71095d710a28584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e710b58060000003c2f6469763e710c5d710d28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710e58060000003c2f6469763e710f5d71102858060000003c626f64793e711158070000003c2f626f64793e71125d71132858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711458070000003c2f68746d6c3e71154e656565656558070000003c2f6469763e0a711658070000003c2f6469763e0a711758350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7118586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a71196573732e"><vh>@thin install.txt</vh></v>
</v>
<v t="ekr.20091130111843.6787"><vh>Chapter 2: The Leo Tutorial</vh>
<v t="ekr.20100805165051.7146"><vh>@thin intro.txt</vh></v>
<v t="ekr.20100808120531.4280"><vh>@thin outline-commands.txt</vh></v>
<v t="ekr.20100808120531.4283"><vh>@thin nutshell.txt</vh></v>
</v>
<v t="EKR.20040524104904.26"><vh>Chapter 3: Using Outlines</vh>
<v t="ekr.20100805165051.7153"><vh>@thin outlines.txt</vh></v>
</v>
<v t="ekr.20050831184021.5"><vh>Chapter 4: Leo's Reference</vh>
<v t="ekr.20100805001344.7253"><vh>@thin directives.txt</vh></v>
</v>
<v t="EKR.20040524104904.99"><vh>Chapter 5: Using Leo's Commands</vh>
<v t="ekr.20100805165051.7155"><vh>@thin commands.txt</vh></v>
</v>
<v t="EKR.20040524104904.161"><vh>Chapter 6: Designing with Leo</vh>
<v t="ekr.20100805165051.7156"><vh>@thin design.txt</vh></v>
</v>
<v t="ekr.20050831195331.4"><vh>Chapter 7: Scripting Leo with Python</vh>
<v t="ekr.20100805165051.7157" descendentVnodeUnknownAttributes="7d7100285506302e302e313571017d710258120000007273745f687474705f61747472696275746571035d71042858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333122206e616d653d22687474702d6e6f64652d6d61726b65722d3331223e710558040000003c2f613e71065d710728583a0000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e710858060000003c2f6469763e71095d710a28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710b58060000003c2f6469763e710c5d710d2858060000003c626f64793e710e58070000003c2f626f64793e710f5d71102858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711158070000003c2f68746d6c3e71124e6565656558070000003c2f6469763e0a711358500000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e0a711458a20000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313622206e616d653d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e46756e6374696f6e7320666f722066696e64696e6720616e64206368616e67696e6720746578742066726f6d20736372697074733c2f613e3c2f68313e0a711565735506302e302e313471167d711758120000007273745f687474705f61747472696275746571185d71192858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323922206e616d653d22687474702d6e6f64652d6d61726b65722d3239223e711a58040000003c2f613e711b5d711c2858390000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e711d58060000003c2f6469763e711e5d711f28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e712058060000003c2f6469763e71215d71222858060000003c626f64793e712358070000003c2f626f64793e71245d71252858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e712658070000003c2f68746d6c3e71274e6565656558070000003c2f6469763e0a7128583b0000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e0a712958780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313522206e616d653d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e47657474696e6720616e642073657474696e6720707265666572656e6365733c2f613e3c2f68313e0a712a65735506302e302e3136712b7d712c58120000007273745f687474705f617474726962757465712d5d712e2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333922206e616d653d22687474702d6e6f64652d6d61726b65722d3339223e712f58040000003c2f613e71305d71312858340000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e713258060000003c2f6469763e71335d713428583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e713558060000003c2f6469763e71365d71372858060000003c626f64793e713858070000003c2f626f64793e71395d713a2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e713b58070000003c2f68746d6c3e713c4e6565656558070000003c2f6469763e0a713d583e0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e0a713e587e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323022206e616d653d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e46756e6374696f6e7320646566696e656420696e206c656f476c6f62616c732e70793c2f613e3c2f68313e0a713f65735506302e302e313171407d714158120000007273745f687474705f61747472696275746571425d71432858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323522206e616d653d22687474702d6e6f64652d6d61726b65722d3235223e714458040000003c2f613e71455d714628583e0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e714758060000003c2f6469763e71485d714928582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e714a58060000003c2f6469763e714b5d714c28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e714d58060000003c2f6469763e714e5d714f2858060000003c626f64793e715058070000003c2f626f64793e71515d71522858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e715358070000003c2f68746d6c3e71544e656565656558070000003c2f6469763e0a715558070000003c2f6469763e0a7156582f0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e0a715758600000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313322206e616d653d227570646174696e672d7468652d73637265656e223e5570646174696e67207468652073637265656e3c2f613e3c2f68313e0a715865735506302e302e313071597d715a58120000007273745f687474705f617474726962757465715b5d715c2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313122206e616d653d22687474702d6e6f64652d6d61726b65722d3131223e715d58040000003c2f613e715e5d715f2858450000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e716058060000003c2f6469763e71615d716228583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e716358060000003c2f6469763e71645d71652858060000003c626f64793e716658070000003c2f626f64793e71675d71682858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e716958070000003c2f68746d6c3e716a4e6565656558070000003c2f6469763e0a716b582f0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e0a716c585f0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643622206e616d653d2274726176657273696e672d6f75746c696e6573223e54726176657273696e67206f75746c696e65733c2f613e3c2f68313e0a716d65735506302e302e3132716e7d716f58120000007273745f687474705f61747472696275746571705d71712858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323722206e616d653d22687474702d6e6f64652d6d61726b65722d3237223e717258040000003c2f613e71735d717428582e0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e717558060000003c2f6469763e71765d717728583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e717858060000003c2f6469763e71795d717a2858060000003c626f64793e717b58070000003c2f626f64793e717c5d717d2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e717e58070000003c2f68746d6c3e717f4e6565656558070000003c2f6469763e0a7180583a0000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e0a718158760000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313422206e616d653d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e496e766f6b696e6720636f6d6d616e64732066726f6d20736372697074733c2f613e3c2f68313e0a718265735506302e302e313971837d718458120000007273745f687474705f61747472696275746571855d71862858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343122206e616d653d22687474702d6e6f64652d6d61726b65722d3431223e718758040000003c2f613e71885d718928583d0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e718a58060000003c2f6469763e718b5d718c28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e718d58060000003c2f6469763e718e5d718f2858060000003c626f64793e719058070000003c2f626f64793e71915d71922858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e719358070000003c2f68746d6c3e71944e6565656558070000003c2f6469763e0a7195583b0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e0a719658780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323122206e616d653d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e5265646972656374696e67206f75747075742066726f6d20736372697074733c2f613e3c2f68313e0a719765735505302e302e3571987d719958120000007273745f687474705f617474726962757465719a5d719b2858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3722206e616d653d22687474702d6e6f64652d6d61726b65722d37223e719c58040000003c2f613e719d5d719e2858350000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e719f58060000003c2f6469763e71a05d71a128583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71a258060000003c2f6469763e71a35d71a42858060000003c626f64793e71a558070000003c2f626f64793e71a65d71a72858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71a858070000003c2f68746d6c3e71a94e6565656558070000003c2f6469763e0a71aa58460000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e0a71ab588e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643422206e616d653d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e6170702e77696e646f774c6973743a20746865206c697374206f6620616c6c206f70656e206672616d65733c2f613e3c2f68313e0a71ac65735505302e302e3471ad7d71ae58120000007273745f687474705f61747472696275746571af5d71b02858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3522206e616d653d22687474702d6e6f64652d6d61726b65722d35223e71b158040000003c2f613e71b25d71b32858400000003c64697620636c6173733d2273656374696f6e222069643d22672d746f702d7468652d636f6d6d616e6465722d6f662d7468652d746f702d77696e646f77223e71b458060000003c2f6469763e71b55d71b628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71b758060000003c2f6469763e71b85d71b92858060000003c626f64793e71ba58070000003c2f626f64793e71bb5d71bc2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71bd58070000003c2f68746d6c3e71be4e6565656558070000003c2f6469763e0a71bf58360000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e0a71c058700000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643322206e616d653d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e672e657328293a20777269746520746f20746865206c6f672070616e653c2f613e3c2f68313e0a71c165735505302e302e3671c27d71c358120000007273745f687474705f61747472696275746571c45d71c52858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3922206e616d653d22687474702d6e6f64652d6d61726b65722d39223e71c658040000003c2f613e71c75d71c82858450000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e71c958060000003c2f6469763e71ca5d71cb28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71cc58060000003c2f6469763e71cd5d71ce2858060000003c626f64793e71cf58070000003c2f626f64793e71d05d71d12858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71d258070000003c2f68746d6c3e71d34e6565656558070000003c2f6469763e0a71d458460000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e0a71d5588d0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643522206e616d653d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e47657474696e6720616e642073657474696e6720686561646c696e6520616e6420626f647920746578743c2f613e3c2f68313e0a71d665735505302e302e3271d77d71d858120000007273745f687474705f61747472696275746571d95d71da2858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3122206e616d653d22687474702d6e6f64652d6d61726b65722d31223e71db58040000003c2f613e71dc5d71dd28583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71de58060000003c2f6469763e71df5d71e02858060000003c626f64793e71e158070000003c2f626f64793e71e25d71e32858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71e458070000003c2f68746d6c3e71e54e65656558240000003c64697620636c6173733d2273656374696f6e222069643d226f76657276696577223e0a71e658490000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643122206e616d653d226f76657276696577223e4f766572766965773c2f613e3c2f68313e0a71e765735508302e302e32352e3171e87d71e958120000007273745f687474705f61747472696275746571ea5d71eb2858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343722206e616d653d22687474702d6e6f64652d6d61726b65722d3437223e71ec58040000003c2f613e71ed5d71ee2858240000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e71ef58060000003c2f6469763e71f05d71f12858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e71f258060000003c2f6469763e71f35d71f428583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e71f558060000003c2f6469763e71f65d71f72858060000003c626f64793e71f858070000003c2f626f64793e71f95d71fa2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e71fb58070000003c2f68746d6c3e71fc4e656565656558070000003c2f6469763e0a71fd58230000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e0a71fe58480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323422206e616d653d2267657474657273223e476574746572733c2f613e3c2f68323e0a71ff65735508302e302e32352e3072000100007d720101000058120000007273745f687474705f61747472696275746572020100005d72030100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343522206e616d653d22687474702d6e6f64652d6d61726b65722d3435223e720401000058040000003c2f613e72050100005d72060100002858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e720701000058060000003c2f6469763e72080100005d720901000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e720a01000058060000003c2f6469763e720b0100005d720c0100002858060000003c626f64793e720d01000058070000003c2f626f64793e720e0100005d720f0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e721001000058070000003c2f68746d6c3e72110100004e6565656558250000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e0a7212010000584c0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323322206e616d653d226974657261746f7273223e4974657261746f72733c2f613e3c2f68323e0a721301000065735508302e302e32352e3272140100007d721501000058120000007273745f687474705f61747472696275746572160100005d72170100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343922206e616d653d22687474702d6e6f64652d6d61726b65722d3439223e721801000058040000003c2f613e72190100005d721a0100002858220000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e721b01000058060000003c2f6469763e721c0100005d721d0100002858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e721e01000058060000003c2f6469763e721f0100005d722001000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e722101000058060000003c2f6469763e72220100005d72230100002858060000003c626f64793e722401000058070000003c2f626f64793e72250100005d72260100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e722701000058070000003c2f68746d6c3e72280100004e656565656558070000003c2f6469763e0a722901000058230000003c64697620636c6173733d2273656374696f6e222069643d2273657474657273223e0a722a01000058480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323522206e616d653d2273657474657273223e536574746572733c2f613e3c2f68323e0a722b01000065735506302e302e3235722c0100007d722d01000058120000007273745f687474705f617474726962757465722e0100005d722f0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343322206e616d653d22687474702d6e6f64652d6d61726b65722d3433223e723001000058040000003c2f613e72310100005d723201000028583a0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e723301000058060000003c2f6469763e72340100005d723501000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e723601000058060000003c2f6469763e72370100005d72380100002858060000003c626f64793e723901000058070000003c2f626f64793e723a0100005d723b0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e723c01000058070000003c2f68746d6c3e723d0100004e6565656558070000003c2f6469763e0a723e01000058450000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e0a723f010000588c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323222206e616d653d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e53756d6d617279206f662074686520766e6f646520616e6420706f736974696f6e20636c61737365733c2f613e3c2f68313e0a724001000065735506302e302e323772410100007d724201000058120000007273745f687474705f61747472696275746572430100005d72440100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e724501000058040000003c2f613e72460100005d72470100002858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e724801000058060000003c2f6469763e72490100005d724a01000028584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e724b01000058060000003c2f6469763e724c0100005d724d01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e724e01000058060000003c2f6469763e724f0100005d72500100002858060000003c626f64793e725101000058070000003c2f626f64793e72520100005d72530100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e725401000058070000003c2f68746d6c3e72550100004e656565656558070000003c2f6469763e0a725601000058070000003c2f6469763e0a725701000058350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7258010000586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a725901000065735508302e302e31302e35725a0100007d725b01000058120000007273745f687474705f617474726962757465725c0100005d725d0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323322206e616d653d22687474702d6e6f64652d6d61726b65722d3233223e725e01000058040000003c2f613e725f0100005d72600100002858450000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e726101000058060000003c2f6469763e72620100005d726301000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e726401000058060000003c2f6469763e72650100005d726601000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e726701000058060000003c2f6469763e72680100005d72690100002858060000003c626f64793e726a01000058070000003c2f626f64793e726b0100005d726c0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e726d01000058070000003c2f68746d6c3e726e0100004e656565656558070000003c2f6469763e0a726f010000583f0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e0a727001000058800000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313222206e616d653d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e54657374696e672077686574686572206120706f736974696f6e2069732076616c69643c2f613e3c2f68323e0a727101000065735508302e302e31302e3472720100007d727301000058120000007273745f687474705f61747472696275746572740100005d72750100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323122206e616d653d22687474702d6e6f64652d6d61726b65722d3231223e727601000058040000003c2f613e72770100005d72780100002858480000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e727901000058060000003c2f6469763e727a0100005d727b01000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e727c01000058060000003c2f6469763e727d0100005d727e01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e727f01000058060000003c2f6469763e72800100005d72810100002858060000003c626f64793e728201000058070000003c2f626f64793e72830100005d72840100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e728501000058070000003c2f68746d6c3e72860100004e656565656558070000003c2f6469763e0a728701000058460000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e0a7288010000588e0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313122206e616d653d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e702e737562747265655f6974657220616e6420702e73656c665f616e645f737562747265655f697465723c2f613e3c2f68323e0a728901000065735508302e302e31302e31728a0100007d728b01000058120000007273745f687474705f617474726962757465728c0100005d728d0100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313522206e616d653d22687474702d6e6f64652d6d61726b65722d3135223e728e01000058040000003c2f613e728f0100005d729001000028582a0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e729101000058060000003c2f6469763e72920100005d729301000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e729401000058060000003c2f6469763e72950100005d729601000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e729701000058060000003c2f6469763e72980100005d72990100002858060000003c626f64793e729a01000058070000003c2f626f64793e729b0100005d729c0100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e729d01000058070000003c2f68746d6c3e729e0100004e656565656558070000003c2f6469763e0a729f010000582b0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e0a72a001000058570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643822206e616d653d22702d6368696c6472656e2d69746572223e702e6368696c6472656e5f697465723c2f613e3c2f68323e0a72a101000065735508302e302e31302e3072a20100007d72a301000058120000007273745f687474705f61747472696275746572a40100005d72a50100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313322206e616d653d22687474702d6e6f64652d6d61726b65722d3133223e72a601000058040000003c2f613e72a70100005d72a801000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e72a901000058060000003c2f6469763e72aa0100005d72ab01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e72ac01000058060000003c2f6469763e72ad0100005d72ae0100002858060000003c626f64793e72af01000058070000003c2f626f64793e72b00100005d72b10100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e72b201000058070000003c2f68746d6c3e72b30100004e65656565582b0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e0a72b401000058570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643722206e616d653d22632d616c6c6e6f6465732d69746572223e632e616c6c4e6f6465735f697465723c2f613e3c2f68323e0a72b501000065735508302e302e31302e3372b60100007d72b701000058120000007273745f687474705f61747472696275746572b80100005d72b90100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313922206e616d653d22687474702d6e6f64652d6d61726b65722d3139223e72ba01000058040000003c2f613e72bb0100005d72bc0100002858450000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e72bd01000058060000003c2f6469763e72be0100005d72bf01000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e72c001000058060000003c2f6469763e72c10100005d72c201000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e72c301000058060000003c2f6469763e72c40100005d72c50100002858060000003c626f64793e72c601000058070000003c2f626f64793e72c70100005d72c80100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e72c901000058070000003c2f68746d6c3e72ca0100004e656565656558070000003c2f6469763e0a72cb01000058490000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e0a72cc01000058940000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313022206e616d653d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e702e7369626c696e67735f6974657220616e6420702e666f6c6c6f77696e675f7369626c696e67735f697465723c2f613e3c2f68323e0a72cd01000065735508302e302e31302e3272ce0100007d72cf01000058120000007273745f687474705f61747472696275746572d00100005d72d10100002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313722206e616d653d22687474702d6e6f64652d6d61726b65722d3137223e72d201000058040000003c2f613e72d30100005d72d401000028582a0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e72d501000058060000003c2f6469763e72d60100005d72d701000028582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e72d801000058060000003c2f6469763e72d90100005d72da01000028583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e72db01000058060000003c2f6469763e72dc0100005d72dd0100002858060000003c626f64793e72de01000058070000003c2f626f64793e72df0100005d72e00100002858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e72e101000058070000003c2f68746d6c3e72e20100004e656565656558070000003c2f6469763e0a72e301000058460000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e0a72e4010000588d0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643922206e616d653d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e702e706172656e74735f6974657220616e6420702e73656c665f616e645f706172656e74735f697465723c2f613e3c2f68323e0a72e50100006573752e"><vh>@thin scripting.txt</vh></v>
</v>
<v t="EKR.20040524104904.211"><vh>Chapter 8: Customizing Leo</vh>
<v t="ekr.20100805165051.7158"><vh>@thin customizing.txt</vh></v>
</v>
<v t="EKR.20040524104904.245"><vh>Chapter 9: History of Leo</vh>
<v t="ekr.20100805165051.7159"><vh>@thin history.txt</vh></v>
</v>
<v t="EKR.20040524104904.261"><vh>Chapter 10: Theory of Operation</vh>
<v t="ekr.20100805165051.7160"><vh>@thin theory.txt</vh></v>
</v>
<v t="ekr.20050901084134"><vh>Chapter 11: White papers</vh>
<v t="ekr.20100805165051.7161"><vh>@thin whitepapers.txt</vh></v>
</v>
<v t="ekr.20050912125144"><vh>Chapter 12: Plugins</vh>
<v t="ekr.20100805165051.7162" descendentVnodeUnknownAttributes="7d71005508302e302e31382e3071017d71025808000000616e6e6f746174657103580ce"><vh>@thin plugins.txt</vh></v>
</v>
<v t="ekr.20060612102055"><vh>Chapter 13: Writing Plugins</vh>
<v t="ekr.20100805165051.7163"><vh>@thin writingPlugins.txt</vh></v>
</v>
<v t="ekr.20050831184021.1"><vh>Chapter 14: Creating documents with Leo</vh>
<v t="ekr.20100805165051.7164"><vh>@thin rstplugin3.txt</vh></v>
</v>
<v t="ekr.20060430221745"><vh>Chapter 15: Controlling syntax coloring</vh>
<v t="ekr.20100805165051.7165"><vh>@thin coloring.txt</vh></v>
</v>
<v t="ekr.20060527105211"><vh>Chapter 16: Debugging with Leo</vh>
<v t="ekr.20100805165051.7166"><vh>@thin debuggers.txt</vh></v>
</v>
<v t="ekr.20060913164304"><vh>Chapter 17: Using ZODB with Leo</vh>
<v t="ekr.20100805165051.7167"><vh>@thin zodb.txt</vh></v>
</v>
<v t="ekr.20061025065357"><vh>Chapter 18: Leo and Emacs</vh>
<v t="ekr.20100805165051.7168"><vh>@thin emacs.txt</vh></v>
</v>
<v t="ekr.20070317033759"><vh>Chapter 19: Embedding Leo with the leoBridge module</vh>
<v t="ekr.20100805165051.7169"><vh>@thin leoBridge.txt</vh></v>
</v>
<v t="ekr.20070628083442"><vh>Chapter 20: Unit testing with Leo</vh>
<v t="ekr.20100805165051.7170"><vh>@thin unitTesting.txt</vh></v>
</v>
<v t="ekr.20080203101507"><vh>Chapter 21: ILeo - the IPython bridge</vh>
<v t="ekr.20100805165051.7171"><vh>@thin IpythonBridge.txt</vh></v>
</v>
<v t="TL.20080804095315.1"><vh>Chapter 22: Using Vim with Leo</vh>
<v t="ekr.20100805165051.7172"><vh>@thin vimBindings.txt</vh></v>
</v>
<v t="ekr.20080730212711.14"><vh>Chapter 23: Using @shadow</vh>
<v t="ekr.20100805165051.7173"><vh>@thin atShadow.txt</vh></v>
</v>
<v t="EKR.20040524104904.274"><vh>Appendices</vh>
<v t="ekr.20100805165051.7174"><vh>@thin appendices.txt</vh></v>
</v>
<v t="ekr.20091111112709.6671"><vh>Glossary</vh>
<v t="ekr.20100805165051.7147"><vh>@thin glossary.txt</vh></v>
</v>
<v t="ekr.20060620094033"><vh>What's New...</vh>
<v t="ekr.20100805165051.7175"><vh>@thin whatsnew.txt</vh></v>
</v>
</v>
<v t="ekr.20080301071818"><vh>Home page</vh>
<v t="ekr.20100808060203.4273"><vh>@thin html/front.html</vh></v>
</v>
<v t="ekr.20090717084250.10702"><vh>Other docs</vh>
<v t="ekr.20100805165051.7176"><vh>@thin other_docs.txt</vh></v>
<v t="ekr.20100805165051.7177"><vh>@thin release_notes.txt</vh></v>
</v>
<v t="ekr.20100807084131.4409"><vh>To do here</vh></v>
<v t="ekr.20100821182153.4341"><vh>Slideshows</vh>
<v t="ekr.20101009111520.4525"><vh> Slideshow Buttons (disabled)</vh>
<v t="ekr.20101008061729.4425"><vh>@@button ins-@slide-nodes</vh></v>
<v t="ekr.20101008061729.4443"><vh>@@button copy-@screenshot-node</vh>
<v t="ekr.20101008061729.4552"><vh>@screenshot</vh>
<v t="ekr.20101008061729.4553"><vh>To Do List</vh>
<v t="ekr.20101008061729.4554"><vh>Urgent</vh></v>
<v t="ekr.20101008061729.4555"><vh>Important</vh></v>
<v t="ekr.20101008061729.4556"><vh>Soon</vh></v>
<v t="ekr.20101008061729.4557"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101008061729.4558"><vh>Diary</vh>
<v t="ekr.20101008061729.4559"><vh>2009</vh>
<v t="ekr.20101008061729.4567"><vh>Jul 2009</vh></v>
<v t="ekr.20101008061729.4568"><vh>Aug 2009</vh></v>
<v t="ekr.20101008061729.4569"><vh>Sep 2009</vh></v>
<v t="ekr.20101008061729.4570"><vh>Oct 2009</vh></v>
<v t="ekr.20101008061729.4571"><vh>Nov 2009</vh></v>
<v t="ekr.20101008061729.4572"><vh>Dec 2009</vh></v>
</v>
<v t="ekr.20101008061729.4561"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101008061729.4637"><vh>@select Urgent</vh></v>
</v>
<v t="ekr.20101008061729.4538"><vh>@@button renumber nodes</vh></v>
<v t="ekr.20101007100904.4371"><vh>@@button make-slide-show @key=Alt-8</vh></v>
<v t="ekr.20101009114655.4531"><vh>@button make-slide @key=Alt-8</vh></v>
</v>
<v t="ekr.20101011165412.5009" a="E"><vh> Topics</vh>
<v t="ekr.20101014034526.5298"><vh>User-defined types</vh>
<v t="ekr.20101014034526.5292"><vh>\@button nodes</vh></v>
<v t="ekr.20101014034526.5291"><vh>@test nodes</vh></v>
<v t="ekr.20101014034526.5293"><vh>@url nodes</vh></v>
</v>
<v t="ekr.20101014034526.5294"><vh>IPython</vh></v>
<v t="ekr.20101014034526.5295"><vh>Vim &amp; Emacs</vh></v>
<v t="ekr.20101010141953.5027"><vh>Examples</vh>
<v t="ekr.20101010141953.5028" a="E"><vh>@slideshow Leo's NSIS Installer</vh>
<v t="ekr.20101010141953.5029"><vh>@title_pattern = Leo's NSIS Installer: Slide %(slide_number)s</vh></v>
<v t="ekr.20101010141953.5030"><vh>@slide 001</vh></v>
<v t="ekr.20101010141953.5031" a="E"><vh>@slide 002</vh>
<v t="ekr.20101010141953.5032"><vh>@screenshot</vh>
<v t="ekr.20101010141953.5033"><vh>Take screenshot of the compile .nsi dialog in a Windows folder</vh></v>
</v>
<v t="ekr.20101010141953.5034"><vh>@pause</vh></v>
<v t="ekr.20101010141953.5038"><vh>@url screenshot</vh></v>
<v t="ekr.20101010141953.5039"><vh>@url working file</vh></v>
<v t="ekr.20101010141953.5040"><vh>@url final output file</vh></v>
<v t="ekr.20101011071655.4918"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011092154.4923"><vh>@slide 003</vh></v>
<v t="ekr.20101011092154.4924"><vh>@slide 004</vh></v>
<v t="ekr.20101011092154.4925"><vh>@slide 005</vh></v>
<v t="ekr.20101011165412.5154"><vh>@@button make leo.nsi</vh>
<v t="ekr.20101011165412.5155"><vh>&lt;&lt; define version &gt;&gt;</vh></v>
<v t="ekr.20101011165412.5156"><vh>&lt;&lt; define inLeo &gt;&gt;</vh></v>
<v t="ekr.20101011165412.5157"><vh>&lt;&lt; define application constants &gt;&gt;</vh></v>
<v t="ekr.20101011165412.5158"><vh>class nsiWriter</vh>
<v t="ekr.20101011165412.5159"><vh>genScript &amp; helpers</vh>
<v t="ekr.20101011165412.5160"><vh>genHead</vh>
<v t="ekr.20101011165412.5161"><vh>putSettings</vh></v>
<v t="ekr.20101011165412.5162"><vh>putOnInit</vh></v>
</v>
<v t="ekr.20101011165412.5163"><vh>genInstallData &amp; helpers</vh>
<v t="ekr.20101011165412.5164"><vh>getInstallVariableData</vh></v>
</v>
<v t="ekr.20101011165412.5165"><vh>genMiddle</vh>
<v t="ekr.20101011165412.5166"><vh>genAdditionalIcons</vh></v>
<v t="ekr.20101011165412.5167"><vh>genDesktopShortcuts</vh></v>
<v t="ekr.20101011165412.5168"><vh>genFileAssociation</vh></v>
<v t="ekr.20101011165412.5169"><vh>genMenuShortcuts</vh></v>
<v t="ekr.20101011165412.5170"><vh>genMiddleFunctions</vh></v>
<v t="ekr.20101011165412.5171"><vh>genPost</vh></v>
<v t="ekr.20101011165412.5172"><vh>genUninstallSettings</vh></v>
</v>
<v t="ekr.20101011165412.5173"><vh>genUninstallData &amp; helpers</vh>
<v t="ekr.20101011165412.5174"><vh>getDeleteDirectories</vh></v>
<v t="ekr.20101011165412.5175"><vh>getDeleteFiles</vh></v>
<v t="ekr.20101011165412.5176"><vh>getUninstallVariableData</vh></v>
</v>
<v t="ekr.20101011165412.5177"><vh>indent</vh></v>
<v t="ekr.20101011165412.5178"><vh>openNsi</vh></v>
<v t="ekr.20101011165412.5179"><vh>put</vh></v>
</v>
<v t="ekr.20101011165412.5180"><vh>run &amp; helpers</vh>
<v t="ekr.20101011165412.5181"><vh>directoryList</vh></v>
<v t="ekr.20101011165412.5182"><vh>filterLines &amp; helpers</vh>
<v t="ekr.20101011165412.5183"><vh>delete...</vh></v>
</v>
<v t="ekr.20101011165412.5184"><vh>makeDicts</vh></v>
<v t="ekr.20101011165412.5185"><vh>printMissing</vh></v>
</v>
<v t="ekr.20101011165412.5186"><vh>whitespace</vh>
<v t="ekr.20101011165412.5187"><vh>adjustTripleString</vh></v>
<v t="ekr.20101011165412.5188"><vh>get_leading_ws</vh></v>
<v t="ekr.20101011165412.5189"><vh>computeWidth</vh></v>
<v t="ekr.20101011165412.5190"><vh>removeLeadingWhitespace</vh></v>
<v t="ekr.20101011165412.5191"><vh>splitLines</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20101014034526.5282" a="E"><vh>Unused &amp; reference</vh>
<v t="ekr.20101007082321.4357"><vh>@slideshow What is Leo? (To be deleted)</vh>
<v t="ekr.20101009171445.4637"><vh>@title_pattern = What is Leo? Slide %(slide_number)s</vh></v>
<v t="ekr.20101008061729.4372"><vh>@slide 001</vh>
<v t="ekr.20101010121134.4703"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4373" a="E"><vh>@slide 002</vh>
<v t="ekr.20101008061729.4384"><vh>@screenshot</vh>
<v t="ekr.20101008061729.4385"><vh>To Do List</vh>
<v t="ekr.20101008061729.4386"><vh>Urgent</vh></v>
<v t="ekr.20101008061729.4387"><vh>Important</vh></v>
<v t="ekr.20101008061729.4388"><vh>Soon</vh></v>
<v t="ekr.20101008061729.4389"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101008061729.4390"><vh>Diary</vh>
<v t="ekr.20101008061729.4391"><vh>2009</vh>
<v t="ekr.20101008061729.4392"><vh>Jan 1</vh></v>
</v>
<v t="ekr.20101008061729.4393"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101008061729.4396"><vh>@select To Do List</vh></v>
<v t="ekr.20101010121134.4704"><vh>@edit</vh></v>
<v t="ekr.20101010121134.4716"><vh>@url screenshot</vh></v>
<v t="ekr.20101010121134.4717"><vh>@url working file</vh></v>
<v t="ekr.20101010121134.4718"><vh>@url final output file</vh></v>
<v t="ekr.20101010121134.4719"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4398"><vh>@slide 003</vh>
<v t="ekr.20101009115705.4583"><vh>@screenshot</vh>
<v t="ekr.20101009115705.4584"><vh>To Do List</vh>
<v t="ekr.20101009115705.4585"><vh>Urgent</vh></v>
<v t="ekr.20101009115705.4586"><vh>Important</vh></v>
<v t="ekr.20101009115705.4587"><vh>Soon</vh></v>
<v t="ekr.20101009115705.4588"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101009115705.4589"><vh>Diary</vh>
<v t="ekr.20101009115705.4590"><vh>2009</vh>
<v t="ekr.20101009115705.4591"><vh>Jan 1</vh></v>
</v>
<v t="ekr.20101009115705.4592"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101008061729.4420"><vh>@select 2009</vh></v>
<v t="ekr.20101010121134.4731"><vh>@url screenshot</vh></v>
<v t="ekr.20101010121134.4732"><vh>@url working file</vh></v>
<v t="ekr.20101010121134.4746"><vh>@url final output file</vh></v>
<v t="ekr.20101010121134.4747"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4522"><vh>@slide 004</vh>
<v t="ekr.20101009124842.4595"><vh>@screenshot</vh>
<v t="ekr.20101009124842.4596"><vh>To Do List</vh>
<v t="ekr.20101009124842.4597"><vh>Urgent</vh></v>
<v t="ekr.20101009124842.4598"><vh>Important</vh></v>
<v t="ekr.20101009124842.4599"><vh>Soon</vh></v>
<v t="ekr.20101009124842.4600"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101009124842.4601"><vh>Diary</vh>
<v t="ekr.20101009124842.4602"><vh>2009</vh>
<v t="ekr.20101009124842.4603"><vh>Aug</vh></v>
<v t="ekr.20101009211009.4624"><vh>Jul</vh></v>
<v t="ekr.20101009211009.4623"><vh>Jun</vh></v>
<v t="ekr.20101009211009.4625"><vh>May</vh></v>
<v t="ekr.20101009211009.4626"><vh>Apr</vh></v>
<v t="ekr.20101009211009.4627"><vh>Mar</vh></v>
<v t="ekr.20101009211009.4628"><vh>Feb</vh></v>
<v t="ekr.20101009211009.4629"><vh>Jan</vh></v>
</v>
<v t="ekr.20101009124842.4604"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101009124842.4606"><vh>@select 2009</vh></v>
<v t="ekr.20101009124842.4607"><vh>@edit</vh></v>
<v t="ekr.20101010121134.4766"><vh>@url screenshot</vh></v>
<v t="ekr.20101010121134.4767"><vh>@url working file</vh></v>
<v t="ekr.20101010121134.4768"><vh>@url final output file</vh></v>
<v t="ekr.20101010121134.4769"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4518"><vh>@slide 005</vh>
<v t="ekr.20101009212539.4682"><vh>@screenshot</vh>
<v t="ekr.20101009212539.4683"><vh>To Do List</vh>
<v t="ekr.20101009212539.4684"><vh>Urgent</vh></v>
<v t="ekr.20101009212539.4685"><vh>Important</vh></v>
<v t="ekr.20101009212539.4686"><vh>Soon</vh></v>
<v t="ekr.20101009212539.4687"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101009212539.4688"><vh>Diary</vh>
<v t="ekr.20101009212539.4689"><vh>2009</vh>
<v t="ekr.20101009212539.4690"><vh>Aug</vh></v>
<v t="ekr.20101009212539.4691"><vh>Jul</vh></v>
<v t="ekr.20101009212539.4692"><vh>Jun</vh></v>
<v t="ekr.20101009212539.4693"><vh>May</vh></v>
<v t="ekr.20101009212539.4694"><vh>Apr</vh></v>
<v t="ekr.20101009212539.4695"><vh>Mar</vh></v>
<v t="ekr.20101009212539.4696"><vh>Feb</vh></v>
<v t="ekr.20101009212539.4697"><vh>Jan</vh></v>
</v>
<v t="ekr.20101009212539.4698"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101009212539.4746"><vh>@select 2009</vh></v>
<v t="ekr.20101009212539.4699"><vh>@edit</vh></v>
<v t="ekr.20101009213545.4670"><vh>@url screenshot</vh></v>
<v t="ekr.20101009213545.4671"><vh>@url working file</vh></v>
<v t="ekr.20101009213545.4672"><vh>@url final output file</vh></v>
<v t="ekr.20101010121134.4814"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4521"><vh>@slide 006</vh>
<v t="ekr.20101009213545.4692"><vh>@screenshot</vh>
<v t="ekr.20101009213545.4693"><vh>To Do List</vh>
<v t="ekr.20101009213545.4694"><vh>Urgent</vh></v>
<v t="ekr.20101009213545.4695"><vh>Important</vh></v>
<v t="ekr.20101009213545.4696"><vh>Soon</vh></v>
<v t="ekr.20101009213545.4697"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101009213545.4698"><vh>Diary</vh>
<v t="ekr.20101009213545.4699"><vh>2009</vh>
<v t="ekr.20101009213545.4700"><vh>Aug</vh></v>
<v t="ekr.20101009213545.4701"><vh>Jul</vh></v>
<v t="ekr.20101009213545.4702"><vh>Jun</vh></v>
<v t="ekr.20101009213545.4703"><vh>May</vh></v>
<v t="ekr.20101009213545.4704"><vh>Apr</vh></v>
<v t="ekr.20101009213545.4705"><vh>Mar</vh></v>
<v t="ekr.20101009213545.4706"><vh>Feb</vh></v>
<v t="ekr.20101009213545.4707"><vh>Jan</vh></v>
</v>
<v t="ekr.20101009213545.4708"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101009213545.4709"><vh>@edit</vh></v>
<v t="ekr.20101009213545.4710"><vh>@select Urgent</vh></v>
<v t="ekr.20101010121134.4810"><vh>@url screenshot</vh></v>
<v t="ekr.20101010121134.4811"><vh>@url working file</vh></v>
<v t="ekr.20101010121134.4812"><vh>@url final output file</vh></v>
<v t="ekr.20101010121134.4813"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4523"><vh>@slide 007</vh>
<v t="ekr.20101010121134.4832"><vh>@screenshot</vh>
<v t="ekr.20101010121134.4833"><vh>To Do List</vh>
<v t="ekr.20101010121134.4834"><vh>Urgent</vh></v>
<v t="ekr.20101010121134.4835"><vh>Important</vh></v>
<v t="ekr.20101010121134.4836"><vh>Soon</vh></v>
<v t="ekr.20101010121134.4837"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101010121134.4838"><vh>Diary</vh>
<v t="ekr.20101010121134.4839"><vh>2009</vh>
<v t="ekr.20101010121134.4840"><vh>Aug</vh></v>
<v t="ekr.20101010121134.4841"><vh>Jul</vh></v>
<v t="ekr.20101010121134.4842"><vh>Jun</vh></v>
<v t="ekr.20101010121134.4843"><vh>May</vh></v>
<v t="ekr.20101010121134.4844"><vh>Apr</vh></v>
<v t="ekr.20101010121134.4845"><vh>Mar</vh></v>
<v t="ekr.20101010121134.4846"><vh>Feb</vh></v>
<v t="ekr.20101010121134.4847"><vh>Jan</vh></v>
</v>
<v t="ekr.20101010121134.4848"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101010141334.4791"><vh>@select Urgent</vh></v>
<v t="ekr.20101010121134.4849"><vh>@pause</vh></v>
<v t="ekr.20101010121134.4868"><vh>@url screenshot</vh></v>
<v t="ekr.20101010121134.4869"><vh>@url working file</vh></v>
<v t="ekr.20101010140842.4755"><vh>@url final output file</vh></v>
<v t="ekr.20101010140842.4756"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4524"><vh>@slide 008</vh>
<v t="ekr.20101010141334.4772"><vh>@screenshot</vh>
<v t="ekr.20101010141334.4773"><vh>To Do List</vh>
<v t="ekr.20101010141334.4774"><vh>Urgent</vh></v>
<v t="ekr.20101010141334.4775"><vh>Important</vh></v>
<v t="ekr.20101010141334.4776"><vh>Soon</vh></v>
<v t="ekr.20101010141334.4777"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101010141334.4778"><vh>Diary</vh>
<v t="ekr.20101010141334.4779"><vh>2009</vh>
<v t="ekr.20101010141334.4780"><vh>Aug</vh></v>
<v t="ekr.20101010141334.4781"><vh>Jul</vh></v>
<v t="ekr.20101010141334.4782"><vh>Jun</vh></v>
<v t="ekr.20101010141334.4783"><vh>May</vh></v>
<v t="ekr.20101010141334.4784"><vh>Apr</vh></v>
<v t="ekr.20101010141334.4785"><vh>Mar</vh></v>
<v t="ekr.20101010141334.4786"><vh>Feb</vh></v>
<v t="ekr.20101010141334.4787"><vh>Jan</vh></v>
</v>
<v t="ekr.20101010141334.4788"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101010141334.4793"><vh>@select Urgent</vh></v>
<v t="ekr.20101010141334.4789"><vh>@pause</vh></v>
<v t="ekr.20101010141953.4835"><vh>@url screenshot</vh></v>
<v t="ekr.20101010141953.4836"><vh>@url working file</vh></v>
<v t="ekr.20101010141953.4837"><vh>@url final output file</vh></v>
<v t="ekr.20101010141953.4838"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4525"><vh>@slide 009</vh>
<v t="ekr.20101010141953.4856"><vh>@screenshot</vh>
<v t="ekr.20101010141953.4857"><vh>To Do List</vh>
<v t="ekr.20101010141953.4858"><vh>Urgent</vh></v>
<v t="ekr.20101010141953.4859"><vh>Important</vh></v>
<v t="ekr.20101010141953.4860"><vh>Soon</vh></v>
<v t="ekr.20101010141953.4861"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101010141953.4862"><vh>Diary</vh>
<v t="ekr.20101010141953.4863"><vh>2009</vh>
<v t="ekr.20101010141953.4864"><vh>Aug</vh></v>
<v t="ekr.20101010141953.4865"><vh>Jul</vh></v>
<v t="ekr.20101010141953.4866"><vh>Jun</vh></v>
<v t="ekr.20101010141953.4867"><vh>May</vh></v>
<v t="ekr.20101010141953.4868"><vh>Apr</vh></v>
<v t="ekr.20101010141953.4869"><vh>Mar</vh></v>
<v t="ekr.20101010141953.4870"><vh>Feb</vh></v>
<v t="ekr.20101010141953.4871"><vh>Jan</vh></v>
</v>
<v t="ekr.20101010141953.4872"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101010141953.4873"><vh>@select Urgent</vh></v>
<v t="ekr.20101010141953.4896"><vh>@pause</vh></v>
<v t="ekr.20101010141953.4897"><vh>@edit</vh></v>
<v t="ekr.20101010141953.4916"><vh>@url screenshot</vh></v>
<v t="ekr.20101010141953.4917"><vh>@url working file</vh></v>
<v t="ekr.20101010141953.4918"><vh>@url final output file</vh></v>
<v t="ekr.20101010141953.4919"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4526"><vh>@slide 010</vh>
<v t="ekr.20101010141953.4922"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101008061729.4527"><vh>@slide 011</vh>
<v t="ekr.20101010141953.4940"><vh>@screenshot</vh>
<v t="ekr.20101010141953.4941"><vh>To Do List</vh>
<v t="ekr.20101010141953.4942"><vh>Urgent</vh></v>
<v t="ekr.20101010141953.4943"><vh>Important</vh></v>
<v t="ekr.20101010141953.4944"><vh>Soon</vh></v>
<v t="ekr.20101010141953.4945"><vh>Whenever</vh></v>
</v>
<v t="ekr.20101010141953.4946"><vh>Diary</vh>
<v t="ekr.20101010141953.4947"><vh>2009</vh>
<v t="ekr.20101010141953.4948"><vh>Aug</vh></v>
<v t="ekr.20101010141953.4949"><vh>Jul</vh></v>
<v t="ekr.20101010141953.4950"><vh>Jun</vh></v>
<v t="ekr.20101010141953.4951"><vh>May</vh></v>
<v t="ekr.20101010141953.4952"><vh>Apr</vh></v>
<v t="ekr.20101010141953.4953"><vh>Mar</vh></v>
<v t="ekr.20101010141953.4954"><vh>Feb</vh></v>
<v t="ekr.20101010141953.4955"><vh>Jan</vh></v>
</v>
<v t="ekr.20101010141953.4956"><vh>2010</vh></v>
</v>
</v>
<v t="ekr.20101010141953.4958"><vh>@pause</vh></v>
<v t="ekr.20101010141953.4957"><vh>@select Diary</vh></v>
<v t="ekr.20101010141953.5023"><vh>@url screenshot</vh></v>
<v t="ekr.20101010141953.5024"><vh>@url working file</vh></v>
</v>
<v t="ekr.20101008061729.4528"><vh>@slide 012</vh></v>
<v t="ekr.20101008061729.4529"><vh>@slide 013</vh></v>
<v t="ekr.20101008061729.4530"><vh>@slide 014</vh></v>
<v t="ekr.20101008061729.4531"><vh>@slide 015</vh></v>
<v t="ekr.20101008061729.4532"><vh>@slide 016</vh></v>
<v t="ekr.20101008061729.4533"><vh>@slide 017</vh></v>
<v t="ekr.20101008061729.4534"><vh>@slide 018</vh></v>
<v t="ekr.20101008061729.4535"><vh>@slide 019</vh></v>
<v t="ekr.20101008061729.4536"><vh>@slide 020</vh></v>
<v t="ekr.20101008061729.4537"><vh>@slide 021</vh></v>
<v t="ekr.20101008061729.4539"><vh>@slide 022</vh></v>
<v t="ekr.20101008061729.4540"><vh>@slide 023</vh></v>
</v>
<v t="ekr.20101011071655.4919"><vh>@slideshow Whetting Your Appetite</vh>
<v t="ekr.20101013072903.5219"><vh>@slide What you can do with Leo</vh>
<v t="ekr.20101013072903.5220"><vh>@no-screenshot</vh></v>
</v>
<v t="ekr.20101013072903.5221"><vh>@slide Leo's main window</vh></v>
<v t="ekr.20101011071655.4920"><vh>@slide A Personal Information Manager</vh></v>
<v t="ekr.20101011103613.4930"><vh>@slide A Better PIM</vh>
<v t="ekr.20101011103613.4942"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101012083118.5245"><vh>@slide External Files</vh></v>
<v t="ekr.20101011103613.4933"><vh>@slide A Scripting Environment</vh>
<v t="ekr.20101011103613.4943"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4934"><vh>@slide Better Scripting</vh>
<v t="ekr.20101011103613.4944"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4938"><vh>@slide Better Scripting, Part Deux</vh>
<v t="ekr.20101011103613.4945"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4935"><vh>@slide Outlines Create New Leo Commands</vh>
<v t="ekr.20101011103613.4946"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4936"><vh>@slide Outlines Create Unit tests</vh>
<v t="ekr.20101011103613.4947"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4937"><vh>@slide Outlines Create Restructured Text</vh>
<v t="ekr.20101011111455.4965"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101011103613.4939"><vh>@slide Outlines Create HTML</vh></v>
</v>
<v t="ekr.20101013072903.5262"><vh>@slideshow Leo &amp; Prezi</vh>
<v t="ekr.20101014031545.5278"><vh>@image lioness</vh></v>
<v t="ekr.20101014030710.5277"><vh>@url logo</vh></v>
</v>
<v t="ekr.20101011165412.5192"><vh>Reference</vh>
<v t="ekr.20101011165412.5195"><vh> Format of external files (copy)</vh></v>
</v>
<v t="ekr.20101013072903.5218"><vh>Descriptions are not stories!</vh>
<v t="ekr.20101011165412.5011"><vh>nutshell (copy)</vh></v>
<v t="ekr.20101012083118.5246"><vh>@@slide Leo</vh></v>
<v t="ekr.20101011103613.4940"><vh>@@slide The Leo way</vh>
<v t="ekr.20101012083118.5242"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101013072903.5238"><vh>Don't describe the window!</vh>
<v t="ekr.20101013072903.5228"><vh>@slide ((file name: workbook2.leo</vh></v>
<v t="ekr.20101013072903.5229"><vh>@slide ((3 panes</vh></v>
<v t="ekr.20101013072903.5230"><vh>@slide ((outline pane</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20100821182153.4345"><vh>@slideshow Installation</vh>
<v t="ekr.20101014034526.5299"><vh>@slide ((using Leo's installer</vh>
<v t="ekr.20101014105353.5256"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20100821182153.4348"><vh>@slide ((installing from sources</vh>
<v t="ekr.20101014105353.5257"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101014034526.5302"><vh>@slide ((running Leo from a console</vh>
<v t="ekr.20101014105353.5258"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101014034526.5303"><vh>@slide ((scripts &amp; .bat files</vh>
<v t="ekr.20101014105353.5259"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20101014034526.5304"><vh>@slide ((.leoID.txt</vh>
<v t="ekr.20101014105353.5260"><vh>@url built slide</vh></v>
</v>
<v t="ekr.20100821182153.4350"><vh>@slide ((free software</vh>
<v t="ekr.20101014105353.5261"><vh>@url built slide</vh></v>
</v>
</v>
<v t="ekr.20101014110348.5293"><vh>@slideshow Clones and views</vh></v>
<v t="ekr.20101014034526.5280"><vh>@slideshow External files</vh>
<v t="ekr.20101014034526.5287"><vh>  Topics</vh></v>
<v t="ekr.20101014110348.5259"><vh>Meld notes</vh></v>
<v t="ekr.20101014110348.5256"><vh>@slide ((intro</vh></v>
<v t="ekr.20101014110348.5276" a="E"><vh>@slide ((@edit, @auto &amp; @thin</vh>
<v t="ekr.20101014110348.5277"><vh>@no-screenshot</vh></v>
</v>
<v t="ekr.20101014110348.5270"><vh>at-edit</vh>
<v t="ekr.20101014110348.5275"><vh>@slide ((@edit intro</vh></v>
<v t="ekr.20101014110348.5257"><vh>@slide ((@edit</vh></v>
<v t="ekr.20101014110348.5261"><vh>@slide ((simple body text</vh></v>
<v t="ekr.20101014110348.5260"><vh>@slide ((save, creating the file</vh></v>
<v t="ekr.20101014110348.5262"><vh>@slide ((change the text</vh></v>
<v t="ekr.20101014110348.5263"><vh>@slide ((save again, updating the file</vh></v>
<v t="ekr.20101014110348.5265"><vh>@slide ((here is the actual file</vh></v>
<v t="ekr.20101014110348.5264"><vh>@slide ((close the file</vh></v>
<v t="ekr.20101014110348.5266"><vh>@slide ((edit the file outside of Leo</vh></v>
<v t="ekr.20101014110348.5267"><vh>@slide ((close Leo file and reopen</vh></v>
<v t="ekr.20101014110348.5274"><vh>@slide ((@edit with existing files</vh></v>
</v>
<v t="ekr.20101014110348.5271"><vh>at-auto</vh>
<v t="ekr.20101014110348.5272"><vh>@auto</vh></v>
</v>
<v t="ekr.20101014110348.5278"><vh>at-thin</vh></v>
</v>
<v t="ekr.20101011165412.4968"><vh>@slideshow Scripting Leo</vh>
<v t="ekr.20101014034526.5297"><vh>Notes</vh>
<v t="ekr.20101011165412.5066"><vh> Scripting (copy)</vh>
<v t="ekr.20101011165412.5071"><vh>Leo's most import objects</vh></v>
<v t="ekr.20101011165412.5072"><vh>Predefined objects</vh></v>
<v t="ekr.20101011165412.5073"><vh>g.es writes to the log pane</vh></v>
<v t="ekr.20101011165412.5074"><vh>app.windowList: the list of all open frames</vh></v>
<v t="ekr.20101011165412.5075"><vh>Getting and setting headline and body text</vh></v>
<v t="ekr.20101011165412.5076"><vh>Getting and setting body text directly</vh></v>
<v t="ekr.20101011165412.5077"><vh>Ensuring that positions are valid</vh></v>
<v t="ekr.20101011165412.5078"><vh>About copying positions</vh></v>
<v t="ekr.20101011165412.5079"><vh>Traversing outlines</vh>
<v t="ekr.20101011165412.5080"><vh>c.all_positions &amp; c.all_unique_positions</vh></v>
<v t="ekr.20101011165412.5081"><vh>p.children</vh></v>
<v t="ekr.20101011165412.5082"><vh>p.parents &amp; p.self_and_parents</vh></v>
<v t="ekr.20101011165412.5083"><vh>p.siblings &amp; p.following_siblings</vh></v>
<v t="ekr.20101011165412.5084"><vh>p.subtree &amp; p.self_and_subtree</vh></v>
<v t="ekr.20101011165412.5085"><vh>Testing whether a position is valid</vh></v>
</v>
<v t="ekr.20101011165412.5086"><vh>Updating the screen</vh></v>
<v t="ekr.20101011165412.5087"><vh>Invoking commands from scripts</vh></v>
<v t="ekr.20101011165412.5088"><vh>Getting settings from @settings trees</vh></v>
<v t="ekr.20101011165412.5089"><vh>Getting and setting preferences</vh></v>
<v t="ekr.20101011165412.5090"><vh>Functions for finding and changing text from scripts</vh></v>
<v t="ekr.20101011165412.5091"><vh>Functions defined in leoGlobals.py</vh></v>
<v t="ekr.20101011165412.5092"><vh>Event handlers</vh>
<v t="ekr.20101011165412.5093"><vh>Summary of event handlers</vh></v>
<v t="ekr.20101011165412.5094"><vh>Enabling idle time event handlers</vh></v>
</v>
<v t="ekr.20101011165412.5095"><vh>How to make operations undoable</vh></v>
<v t="ekr.20101011165412.5096"><vh>Redirecting output from scripts</vh></v>
<v t="ekr.20101011165412.5097"><vh>Writing to different log tabs</vh></v>
<v t="ekr.20101011165412.5098"><vh>Invoking dialogs using the g.app.gui class</vh></v>
<v t="ekr.20101011165412.5099"><vh>Inserting and deleting icons</vh></v>
<v t="ekr.20101011165412.5100"><vh>Customizing panes with different widgets</vh>
<v t="ekr.20101011165412.5101"><vh>Official ivars</vh></v>
<v t="ekr.20101011165412.5102"><vh>Common operations on Tk.Text widgets</vh></v>
<v t="ekr.20101011165412.5103"><vh>Customizing the log pane</vh></v>
<v t="ekr.20101011165412.5104"><vh>Customizing the body pane</vh></v>
<v t="ekr.20101011165412.5105"><vh>Customizing the outine pane</vh></v>
</v>
<v t="ekr.20101011165412.5106"><vh>Working with directives and paths</vh></v>
<v t="ekr.20101011165412.5107"><vh>Summary of the vnode and position classes</vh>
<v t="ekr.20101011165412.5108"><vh>generators</vh></v>
<v t="ekr.20101011165412.5109"><vh>Getters</vh></v>
<v t="ekr.20101011165412.5110"><vh>Setters</vh></v>
</v>
<v t="ekr.20101011165412.5111"><vh>Creating script buttons</vh></v>
<v t="ekr.20101011165412.5112"><vh>Running Leo in batch mode</vh></v>
<v t="ekr.20101011165412.5113"><vh>Getting interactive input from scripts</vh></v>
<v t="ekr.20101011165412.5114"><vh>Creating Leo commands with the @g.command decorator</vh></v>
<v t="ekr.20101011165412.5115"><vh>Modifying plugins with @script scripts</vh></v>
</v>
</v>
</v>
<v t="ekr.20101014034526.5296"><vh>@slideshow Leo's minibuffer</vh></v>
</v>
<v t="ekr.20101013072903.5224"><vh>@slideshow Leo basics step by step</vh>
<v t="ekr.20101014110348.5312"><vh>Follow-along outline</vh>
<v t="ekr.20101014110348.5316"><vh>To do today</vh>
<v t="ekr.20101014110348.5317"><vh>fix car</vh></v>
<v t="ekr.20101014110348.5318"><vh>go shopping</vh></v>
</v>
</v>
<v t="ekr.20101013072903.5225"><vh>@slide ((intro  no-ss</vh>
<v t="ekr.20101016043116.5346"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5226"><vh>@slide ((Let's start</vh>
<v t="ekr.20101016043116.5347"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5280"><vh>@slide ((Focus in body pane</vh>
<v t="ekr.20101016043116.5312"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5281"><vh>@slide ((Click puts focus in tree pane</vh>
<v t="ekr.20101016043116.5313"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5283"><vh>@slide ((Return puts focus in body pane</vh>
<v t="ekr.20101016043116.5314"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5285"><vh>@slide ((Alt-T puts focus in tree pane</vh>
<v t="ekr.20101016043116.5315"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5286"><vh>@slide ((Ctrl-H edits headline</vh>
<v t="ekr.20101016043116.5316"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5234"><vh>@slide (("to do" node</vh>
<v t="ekr.20101016043116.5317"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5235"><vh>@slide ((newline ends editing (icon box)</vh>
<v t="ekr.20101016043116.5318"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5325"><vh>@slide ((Ctrl-S saves outline</vh>
<v t="ekr.20101016043116.5319"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5240"><vh>@slide ((editing a headline</vh>
<v t="ekr.20101016043116.5320"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5241"><vh>@slide (("to do today"</vh>
<v t="ekr.20101016043116.5321"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5236"><vh>@slide ((Ctrl-I inserts a new node</vh>
<v t="ekr.20101016043116.5322"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5237"><vh>@slide (("go shopping"</vh>
<v t="ekr.20101016043116.5323"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5305"><vh>@slide ((typing text (icon box has blue square)</vh>
<v t="ekr.20101016043116.5324"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5244"><vh>@slide ((Ctrl-R</vh>
<v t="ekr.20101016043116.5325"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5290"><vh>@slide ((Ctrl-L</vh>
<v t="ekr.20101016043116.5326"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101013072903.5245"><vh>@slide ((undo/redo</vh>
<v t="ekr.20101016043116.5327"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5294"><vh>@slide ((new node</vh>
<v t="ekr.20101016043116.5328"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5295"><vh>@slide (("fix car"</vh>
<v t="ekr.20101016043116.5329"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5296"><vh>@slide ((Ctrl-U</vh>
<v t="ekr.20101016043116.5330"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5297"><vh>@slide ((contracting nodes</vh>
<v t="ekr.20101016043116.5331"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5298"><vh>@slide ((Up-Arrow</vh>
<v t="ekr.20101016043116.5332"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5299"><vh>@slide ((Left-Arrow</vh>
<v t="ekr.20101016043116.5333"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5300"><vh>@slide ((Right-Arrow</vh>
<v t="ekr.20101016043116.5334"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5308"><vh>@slide ((Shift arrow keys</vh>
<v t="ekr.20101016043116.5335"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5309"><vh>@slide ((Arrow keys: summary</vh>
<v t="ekr.20101014110348.5323"><vh>@no-screenshot</vh></v>
</v>
<v t="ekr.20101014110348.5326"><vh>@slide ((Shift-Ctrl-C copies</vh>
<v t="ekr.20101016043116.5336"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5307"><vh>@slide ((Promotes &amp; demote</vh>
<v t="ekr.20101016043116.5337"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5329"><vh>@slide ((Ctrl-Shift-] demote</vh>
<v t="ekr.20101016043116.5338"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5330"><vh>@slide ((Ctrl-Shift-[ promote</vh>
<v t="ekr.20101016043116.5339"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5331"><vh>@slide ((promote &amp; demote to move batches of nodes</vh>
<v t="ekr.20101016043116.5340"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5332"><vh>@slide ((demote the moved nodes</vh>
<v t="ekr.20101016043116.5341"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5333"><vh>@slide ((move helper node left</vh>
<v t="ekr.20101016043116.5342"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5334"><vh>@slide ((promote the moved nodes</vh>
<v t="ekr.20101016043116.5343"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5335"><vh>@slide ((delete the helper node</vh>
<v t="ekr.20101016043116.5344"><vh>@url final output file</vh></v>
</v>
<v t="ekr.20101014110348.5336"><vh>@slide ((end slide</vh>
<v t="ekr.20101016043116.5345"><vh>@url final output file</vh></v>
</v>
</v>
<v t="ekr.20101014110348.5338"><vh>@button meld</vh>
<v t="ekr.20101014110348.5339" a="E"><vh>class MeldController</vh>
<v t="ekr.20101016043116.5353"><vh>utils</vh>
<v t="ekr.20101015151959.5301"><vh>has_at_no_screenshot_node</vh></v>
<v t="ekr.20101015151959.5302"><vh>match</vh></v>
</v>
<v t="ekr.20101014110348.5341"><vh>run &amp; helpers</vh>
<v t="ekr.20101014110348.5344"><vh>adjust_slideshow &amp; helpers</vh>
<v t="ekr.20101015151959.5300"><vh>adjust_slide_node</vh></v>
<v t="ekr.20101015151959.5303"><vh>built_slide_path</vh></v>
</v>
<v t="ekr.20101014110348.5342"><vh>check &amp; helpers</vh>
<v t="ekr.20101016043116.5349"><vh>check_dir</vh></v>
<v t="ekr.20101014110348.5347"><vh>count_slide_nodes</vh></v>
</v>
<v t="ekr.20101014110348.5343"><vh>copy_files &amp; helper</vh>
<v t="ekr.20101016043116.5352"><vh>copy_file</vh></v>
</v>
<v t="ekr.20101014110348.5346"><vh>get_wink_screenshots</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040524104904.161"></t>
<t tx="EKR.20040524104904.211"></t>
<t tx="EKR.20040524104904.245"></t>
<t tx="EKR.20040524104904.26"></t>
<t tx="EKR.20040524104904.261"></t>
<t tx="EKR.20040524104904.274"></t>
<t tx="EKR.20040524104904.99"></t>
<t tx="TL.20080804095315.1"></t>
<t tx="ekr.20040414161647">@nocolor-node

These are the sources for Leo's users guide.

They contain sphinx markup. See::
    
    http://sphinx.pocoo.org/
    http://docutils.sourceforge.net/docs/user/rst/quickstart.html

To generate these docs::

    cd leo/doc/html
    make html

For more details, see the node "How to generate Leo's Sphinx docs"</t>
<t tx="ekr.20041226081019">c.spellCommands.openSpellTab()</t>
<t tx="ekr.20050404094627"></t>
<t tx="ekr.20050407144342"> 
        
        
        </t>
<t tx="ekr.20050407144342.1"></t>
<t tx="ekr.20050407144342.2"></t>
<t tx="ekr.20050407144342.3"></t>
<t tx="ekr.20050407144417"></t>
<t tx="ekr.20050812090111">import leo.core.leoPlugins as leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        controller.processTopTree(p)
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20050812123002"></t>
<t tx="ekr.20050812123002.1"></t>
<t tx="ekr.20050812123002.2">Deletes p.v.rst2_http_attributename from all nodes after writing.

Deletes p.v.unknownAttributes if it then becomes empty.</t>
<t tx="ekr.20050812123002.3"></t>
<t tx="ekr.20050812123002.4">@nocolor

If False, add_node_marker and http_support_main  do nothing.  Otherwise add_node_marker does the following:
    
1. add_node_marker writes a string using generate_node_marker.

Generates 'http-node-marker-'+str(number), where number is config.node_counter
(incremented each time add_node_marker is called.

2. Enables the following code in :
@color

    if config.tag == 'open2':
        http_map = self.http_map
    else:
        http_map = {}
        config.anchormap = {}
        # maps v nodes to markers.
        config.node_counter = 0
    # [snip] code to write the tree
    if config.rst2_http_server_support:
        self.http_map = http_map</t>
<t tx="ekr.20050812123002.5"></t>
<t tx="ekr.20050812123002.6">True: call body_filter to massage text.

Removes @ignore, @nocolor, @wrap directives.
</t>
<t tx="ekr.20050812123002.7">Used differently.  See rst2_pure_document.</t>
<t tx="ekr.20050812123002.8"></t>
<t tx="ekr.20050831184021.1"></t>
<t tx="ekr.20050831184021.3"></t>
<t tx="ekr.20050831184021.4"></t>
<t tx="ekr.20050831184021.5"></t>
<t tx="ekr.20050831195331.1"></t>
<t tx="ekr.20050831195331.4"></t>
<t tx="ekr.20050831195449">@nocolor

For instruction about installing Leo see:
http://webpages.charter.net/edreamleo/install.html

For everything a beginner needs to know about Leo see:
http://webpages.charter.net/edreamleo/intro.html

For help, please ask questions at:
http://groups.google.com/group/leo-editor</t>
<t tx="ekr.20050901054622">c.save()</t>
<t tx="ekr.20050901055150">@color
# Script to promote headlines and body text

root = p.copy()
body = [root.bodyString()+'\n']
for p in root.subtree_iter():
    body.append(p.headString())
    body.append(p.bodyString().rstrip()+'\n')

body = '\n'.join(body)
root.setBodyString(body)
</t>
<t tx="ekr.20050901060119">@color

# Converts text selection to def list.

@others

createDefList(c,p)</t>
<t tx="ekr.20050901061220">def createDefList(c,p):
    
    undoType = 'Create Def List'
    head,lines,tail,oldSel,oldYview = c.getBodyLines()
    if not lines: return
    
    result = ['``%s``\n' % lines[0].strip()]
    
    for line in lines[1:]:
        result.append('    %s' % line.lstrip()+'\n')
    lines = ''.join(result).rstrip()

    c.updateBodyPane(head,lines,tail,undoType,oldSel,oldYview)</t>
<t tx="ekr.20050901084134"></t>
<t tx="ekr.20050901121617">@color

# Puts each sentence on a separate line
# Not as useful as I had hoped.  The Reformat Paragraph command is better.

@others

splitSentences(c,p)</t>
<t tx="ekr.20050901121617.1">def splitSentences(c,p):
    
    undoType = 'Split Sentences'
    head,lines,tail,oldSel,oldYview = c.getBodyLines()
    s = p.bodyString()
    if not s.strip(): return
    
    i = 0 ; line = [] ; result = [] ; nl = False
    while i &lt; len(s):
        ch = s[i] ; i += 1 ; ch2 = '.'
        if i &lt; len(s): ch2 = s[i]
        if ch in ('.',';') and ch2 in (' ','\t','\n'):
            line.append(ch)
            r = ''.join(line)+'\n'
            if nl and ch == '.': r = r + '\n'
            result.append(r)
            line = [] ; nl = False
            while i &lt; len(s):
                ch2 = s[i]
                if ch2 == '\n' and ch == '.':
                    nl = True
                if ch2 in (' ','\t','\n'):
                    i += 1
                else:
                    break
        else: line.append(ch)

    result.append(''.join(line)+'\n') # Add the last line.
    result = ''.join(result)
    c.updateBodyPane('',result,'',undoType,oldSel,oldYview)</t>
<t tx="ekr.20050902080416"># Start at the top.
b = c.frame.body.bodyCtrl
b.mark_set('insert','1.0')
b.tag_remove('sel','1.0','end')
b.tag_add('sel','1.0','1.0')
b.update_idletasks()

# Format until the end.
count = 0 # Guard against loops.
while count &lt; 100:
    count += 1
    s = p.bodyString()
    if not s.strip():
        break
    c.reformatParagraph()
    s2 = p.bodyString()
    
    index = b.index('insert')
    if b.compare(index,'&gt;=','end-1c'):
        break</t>
<t tx="ekr.20050912125144"></t>
<t tx="ekr.20051202072010"></t>
<t tx="ekr.20060430221745"></t>
<t tx="ekr.20060525104232">import leo.core.leoPlugins as leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        p,s = controller.writeNodeToString(ext='.html')
        print '*' * 40,p
        print s
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20060525110135"># Problems with pdf files.

import leo.core.leoPlugins as leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        p,s = controller.writeNodeToString(ext='.pdf')
        print '*' * 40,p
        print s
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20060525110135.1">import leo.core.leoPlugins as leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        p,s = controller.writeNodeToString(ext='.tex')
        print '*' * 40,p
        print s
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20060525110217">import leo.core.leoPlugins as leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        p,s = controller.writeNodeToString(ext=None) # Convert rst nodes to rst text.
        print '*' * 40,p
        print s
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20060527105211"></t>
<t tx="ekr.20060612102055"></t>
<t tx="ekr.20060620094033"></t>
<t tx="ekr.20060913164304"></t>
<t tx="ekr.20061025065357"></t>
<t tx="ekr.20070115172724.2">test.leo contains an @button windpdb node.
Select the test to be debugged, then press the winpdb button or do &lt;Alt&gt;x winpdb&lt;return&gt;.
This way is essentially the same as using the debug command, though the code is slightly different.
</t>
<t tx="ekr.20070317033759"></t>
<t tx="ekr.20070325123558"></t>
<t tx="ekr.20070610174018"></t>
<t tx="ekr.20070628083442"></t>
<t tx="ekr.20070701101808"></t>
<t tx="ekr.20080203101507"></t>
<t tx="ekr.20080301071818">&lt;img src="Leo4-80-border.jpg" alt="Logo: Leo4-80-border.jpg" /&gt;

</t>
<t tx="ekr.20080412124815.1"></t>
<t tx="ekr.20080730212711.14"></t>
<t tx="ekr.20080923181012.1">@ @rst-options
code_mode=False
generate_rst=True
http_server_support = False
show_organizer_nodes=True
show_headlines=True
show_leo_directives=True
stylesheet_path=..\doc
write_intermediate_file = False
verbose=True
@c

A test of creating directories.

############
html test
############</t>
<t tx="ekr.20080923182326.1">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.</t>
<t tx="ekr.20090712122931.10453"></t>
<t tx="ekr.20090717084250.10702"></t>
<t tx="ekr.20091006063434.13802">c.rstCommands.rst3()</t>
<t tx="ekr.20091111112709.6671"></t>
<t tx="ekr.20091112060950.6677">s = p.bodyString()

s = s.replace('\n\n','***2***')
s = s.replace('\n',' ')
s = s.replace('***2***','\n\n')
s = s.replace('\n  ','\n')
s = s.replace('\n ','\n')
s = s.replace('     ',' ')
s = s.replace('    ',' ')
s = s.replace('   ',' ')
s = s.replace('  ',' ')

p.setBodyString(s)</t>
<t tx="ekr.20091130111843.6787"></t>
<t tx="ekr.20100731112744.7267"></t>
<t tx="ekr.20100805171546.4412"></t>
<t tx="ekr.20100807084131.4409">@language rest

Rewrite chapter 6.

Revise Tutorial.

Reorganize the docs into intro and reference.</t>
<t tx="ekr.20100821182153.4341">@pagewidth 70
@language rest
@nocolor-node

To create a slideshow:
    
cd leo\doc\html\slices\slideshow-name
make html
</t>
<t tx="ekr.20100821182153.4345">@language rest
</t>
<t tx="ekr.20100821182153.4348">.. _`Download Python`: http://www.python.org/download/
.. _`Leo's download page`: https://sourceforge.net/projects/leo/files/Leo/

**Installing Leo from sources**

1. Install Python:

`Download Python`_, save to your desktop, then double-click on the
saved file.

   
2. Install Leo:

- Download the most recent .zip file from `Leo's download page`_ to
  your desktop or other location.
  
- Unzip the .zip file to the folder of your choice.

</t>
<t tx="ekr.20100821182153.4350">.. _`Edward K. Ream`:   http://webpages.charter.net/edreamleo/ekr.html
.. _`leo-editor`:       http://groups.google.com/group/leo-editor
.. _`Python Tutorial`:  http://docs.python.org/tutorial/

Leo is a free program distributed under the MIT license. This means that not
only can you use the program freely including commercially, the full
installation comes with source code that you can modify as you wish, as long as
you give credit to the author of the program, `Edward K. Ream`_.

Leo is written in Python--a full featured, powerful programming language that
is comparatively easy to learn and use. For an excellent introduction to Python
for non-programmers, see the `Python Tutorial`_. Not only is Leo written in Python, it is
scriptable via Python, meaning that you can embed Python commands in your
outlines and execute them.

Leo is under active development and all are welcome to contribute. For more
information, see the `leo-editor`_ Google Group.

Not only is Leo free software, it is supported software. Post questions and bug
reports to `leo-editor`_ Google Group.
</t>
<t tx="ekr.20100907092300.4440"></t>
<t tx="ekr.20100907092300.4441">Path to inkscape template file
</t>
<t tx="ekr.20100907092300.4442">Path to Inkscape executable</t>
<t tx="ekr.20100908122026.4443"># Standard plugins
mod_scripting.py
nav_qt.py
plugins_menu.py
quicksearch.py
scrolledmessage.py
UNL.py

# Other useful plugins
# codewisecompleter.py
# leoremote.py
screenshots.py
</t>
<t tx="ekr.20101007082321.4357">@language rest</t>
<t tx="ekr.20101007100904.4371">m = g.loadOnePlugin('screenshots')
m.make_slide_show_command(event={'c':c})
</t>
<t tx="ekr.20101007100904.4372"></t>
<t tx="ekr.20101008061729.4372">Leo is a unique, powerful computer program that you can use to **organize**,
**analyze** and **describe** text and text files. Leo is a free and open
software written by Edward K. Ream. For information about downloading Leo, see
the **installation** tutorial in this series. Leo runs on Windows, Mac, or
Linux.

Use Leo:

- To brainstorm a new project.
- As a Personal Information Manager.
- To add multiple outlines and commentary to any text file.
- To create and organize computer programs.
- To apply computer scripts to any kind of data.

Because Leo is unlike other tools you may have used, a series of examples may be
the best way to demonstrate what can be done with Leo.
</t>
<t tx="ekr.20101008061729.4373">From one perspective, Leo is an **outlining editor**. This is a screenshot of
Leo. The arrow shows the outline pane. (A later tutorial explains how to create
an outline like the one in the screenshot).

.. image:: slide-002.png

</t>
<t tx="ekr.20101008061729.4384"></t>
<t tx="ekr.20101008061729.4385"></t>
<t tx="ekr.20101008061729.4386"></t>
<t tx="ekr.20101008061729.4387"></t>
<t tx="ekr.20101008061729.4388"></t>
<t tx="ekr.20101008061729.4389"></t>
<t tx="ekr.20101008061729.4390"></t>
<t tx="ekr.20101008061729.4391"></t>
<t tx="ekr.20101008061729.4392"></t>
<t tx="ekr.20101008061729.4393"></t>
<t tx="ekr.20101008061729.4396" str_leo_pos=""></t>
<t tx="ekr.20101008061729.4398">Clicking on the open triangle will open the indicated node.

.. image:: slide-003.png

</t>
<t tx="ekr.20101008061729.4420" str_leo_pos=""></t>
<t tx="ekr.20101008061729.4425">'''Create @slide nodes under p, an @slideshow node.'''

n = 23 # Number of last slide to be created.

existing = [z.copy().h for z in p.children() 
    if g.match_word(z.h,0,'@slide')]

if g.match_word(p.h,0,'@slideshow'):
    b = c.undoer.beforeChangeTree(p)
    changed = False
    for n in range(1,n+1):
        h = '@slide %03d' % n
        if h not in existing:
            changed = True
            child = p.insertAsLastChild()
            child.h = h
            g.note('created %s' % h)
    if changed:
        c.undoer.afterChangeTree(p,'ins-@slide-nodes',b)
    else:
        g.note('no @slide nodes inserted')
    c.redraw()
else:
    g.error('not an @slideshow node',p.h)</t>
<t tx="ekr.20101008061729.4443">'''
Copy the @screenshot node (a child of this node)
to all @slide nodes under p, (an @slideshow node),
that do not contain an @screenshot node.
'''

error = None
# Find this node:
h = '@button copy-@screenshot-node'
p2 = g.findNodeAnywhere(c,h)
if not p2:
    error = 'Can not find',p.h
# Find the @screenshot tree and the optional @select node.
if not error:
    select,template = None,None
    for child in p2.children():
        if g.match_word(child.h,0,'@screenshot'):
            template = child.copy()
        if g.match_word(child.h,0,'@select'):
            select = child.copy()
    if not template:
        error = 'No template @slideshow node in %s' % p2.h
if not error:
    if not g.match_word(p.h,0,'@slideshow'):
        error = 'not an @slideshow node',p.h
if error:
    g.error(error)
else:
    c.selectPosition(template)
    c.copyOutline()
    changed = False
    b = c.undoer.beforeChangeTree(p)
    for child in p.children():
        if not g.match_word(child.h,0,'@slide'):
            continue
        for grandChild in child.children():
            if g.match_word(grandChild.h,0,'@screenshot'):
                break
        else:
            changed = True
            p3 = child.insertAsLastChild()
            c.selectPosition(p3)
            c.pasteOutline()
            g.note('copied @screenshot to %s' % child.h)
            if select:
                c.selectPosition(p3)
                p4 = child.insertAsLastChild()
                p4.h = select.h
                g.note('copied %s to %s' % (select.h,child.h))
            c.selectPosition(p3)
            c.deleteOutline(p3)
            child.contract()
    if changed:
        c.undoer.afterChangeTree(p,'copy-@screenshot',b)
    c.redraw()</t>
<t tx="ekr.20101008061729.4518">Here the indicated node has been closed.

.. image:: slide-005.png

</t>
<t tx="ekr.20101008061729.4521">Clicking on a node headline (1) will show the text for that node in the body
pane (2) below. The body pane is a text editor--you can enter, delete or change
text here by typing it in.

.. image:: slide-006.png

</t>
<t tx="ekr.20101008061729.4522">Here the node has been opened. Clicking on the box again will close the node.

.. image:: slide-004.png

</t>
<t tx="ekr.20101008061729.4523">You can save the outline in a .leo file.  Click File:Save (or Ctrl-S).

.. image:: slide-007.png

</t>
<t tx="ekr.20101008061729.4524">Here we will save our outline in a file named "pim.leo"

.. image:: slide-008.png

</t>
<t tx="ekr.20101008061729.4525">The file is now saved, and the file appears in the title bar.

.. image:: slide-009.png

</t>
<t tx="ekr.20101008061729.4526">You've just seen an introduction to Leo as an outlining editor. You can use Leo
to make an outline, with optional text for each outline element. You can save
the outline to a file. Outlines are explained more in a later tutorial in this
series.

  *The outlining capability of Leo goes far beyond what has just been demonstrated,
  including multipath outlines, and multiple outlines in one file.*

What we've shown so far is no different from other outlining editors. What makes
Leo unique is the addition of a new feature. **Using simple directives, you can
instruct Leo to extract text from any number of nodes, in any order, and write
the text to a new file**. We call files created or managed from within a Leo
outline **external file**. You can also embed outline information in the
external file, giving Leo the ability to read the text pieces back into the Leo
outline, even if they have been changed.

In effect, Leo is a **meta-text** editor. It gives you the ability to create a
structural document for a non structured document, or a document that is
structured in some other way.

What does this mean in practice? Some examples should help clarify things...</t>
<t tx="ekr.20101008061729.4527">Here is the "pim.leo" file again. We have:

1. Selected the "Diary" node.
2. Typed Ctrl-H to start editing the headline.
   (You can also edit headlines with the Edit:Edit Headline...:Edit Headline command.

.. image:: slide-011.png

</t>
<t tx="ekr.20101008061729.4528"></t>
<t tx="ekr.20101008061729.4529"></t>
<t tx="ekr.20101008061729.4530"></t>
<t tx="ekr.20101008061729.4531"></t>
<t tx="ekr.20101008061729.4532"></t>
<t tx="ekr.20101008061729.4533"></t>
<t tx="ekr.20101008061729.4534"></t>
<t tx="ekr.20101008061729.4535"></t>
<t tx="ekr.20101008061729.4536"></t>
<t tx="ekr.20101008061729.4537"></t>
<t tx="ekr.20101008061729.4538">'''Renumber @slide nodes under p, an @slideshow node.'''

if g.match_word(p.h,0,'@slideshow'):
    n = 1
    for child in p.children():
        if g.match(child.h,0,'@slide'):
            child.h = '@slide %03d' % n
            n += 1
    c.redraw()
else:
    g.error('not an @slideshow node',p.h)</t>
<t tx="ekr.20101008061729.4539"></t>
<t tx="ekr.20101008061729.4540"></t>
<t tx="ekr.20101008061729.4552"></t>
<t tx="ekr.20101008061729.4553">My to-do list.
</t>
<t tx="ekr.20101008061729.4554">1. Make Leo tutorials.  The world is waiting.
2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101008061729.4555"></t>
<t tx="ekr.20101008061729.4556"></t>
<t tx="ekr.20101008061729.4557"></t>
<t tx="ekr.20101008061729.4558" str_leo_pos=""></t>
<t tx="ekr.20101008061729.4559">@language rest

This is my diary.</t>
<t tx="ekr.20101008061729.4561"></t>
<t tx="ekr.20101008061729.4567">July 1
    Started writing in my diary.
July 2
    Wrote another sentence in my diary.
July 3
    Keeping my diary very regularly.
July 5
    Oops...Yesterday I forgot towrite in my diary.</t>
<t tx="ekr.20101008061729.4568"></t>
<t tx="ekr.20101008061729.4569"></t>
<t tx="ekr.20101008061729.4570"></t>
<t tx="ekr.20101008061729.4571"></t>
<t tx="ekr.20101008061729.4572"></t>
<t tx="ekr.20101008061729.4637"></t>
<t tx="ekr.20101009111520.4525"></t>
<t tx="ekr.20101009114655.4531">m = g.loadOnePlugin('screenshots')
m.make_slide_command(event={'c':c})
</t>
<t tx="ekr.20101009114830.4723">@nocolor-node

This *must* be true for this file!

True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.
    
False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.</t>
<t tx="ekr.20101009114830.4724"></t>
<t tx="ekr.20101009114830.4725"></t>
<t tx="ekr.20101009115705.4583"></t>
<t tx="ekr.20101009115705.4584">My to-do list.
</t>
<t tx="ekr.20101009115705.4585"></t>
<t tx="ekr.20101009115705.4586"></t>
<t tx="ekr.20101009115705.4587"></t>
<t tx="ekr.20101009115705.4588"></t>
<t tx="ekr.20101009115705.4589"></t>
<t tx="ekr.20101009115705.4590"></t>
<t tx="ekr.20101009115705.4591"></t>
<t tx="ekr.20101009115705.4592"></t>
<t tx="ekr.20101009124842.4595"></t>
<t tx="ekr.20101009124842.4596">@nocolor-node

My to-do list.
</t>
<t tx="ekr.20101009124842.4597"></t>
<t tx="ekr.20101009124842.4598"></t>
<t tx="ekr.20101009124842.4599"></t>
<t tx="ekr.20101009124842.4600"></t>
<t tx="ekr.20101009124842.4601">@nocolor-node

</t>
<t tx="ekr.20101009124842.4602"></t>
<t tx="ekr.20101009124842.4603"></t>
<t tx="ekr.20101009124842.4604"></t>
<t tx="ekr.20101009124842.4606" str_leo_pos=""></t>
<t tx="ekr.20101009124842.4607"></t>
<t tx="ekr.20101009171445.4637"></t>
<t tx="ekr.20101009211009.4623"></t>
<t tx="ekr.20101009211009.4624"></t>
<t tx="ekr.20101009211009.4625"></t>
<t tx="ekr.20101009211009.4626"></t>
<t tx="ekr.20101009211009.4627"></t>
<t tx="ekr.20101009211009.4628"></t>
<t tx="ekr.20101009211009.4629"></t>
<t tx="ekr.20101009212539.4682"></t>
<t tx="ekr.20101009212539.4683">My to-do list.
</t>
<t tx="ekr.20101009212539.4684"></t>
<t tx="ekr.20101009212539.4685"></t>
<t tx="ekr.20101009212539.4686"></t>
<t tx="ekr.20101009212539.4687"></t>
<t tx="ekr.20101009212539.4688"></t>
<t tx="ekr.20101009212539.4689"></t>
<t tx="ekr.20101009212539.4690"></t>
<t tx="ekr.20101009212539.4691"></t>
<t tx="ekr.20101009212539.4692"></t>
<t tx="ekr.20101009212539.4693"></t>
<t tx="ekr.20101009212539.4694"></t>
<t tx="ekr.20101009212539.4695"></t>
<t tx="ekr.20101009212539.4696"></t>
<t tx="ekr.20101009212539.4697"></t>
<t tx="ekr.20101009212539.4698"></t>
<t tx="ekr.20101009212539.4699"></t>
<t tx="ekr.20101009212539.4746" str_leo_pos=""></t>
<t tx="ekr.20101009213545.4670">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-005.png</t>
<t tx="ekr.20101009213545.4671">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-005.svg</t>
<t tx="ekr.20101009213545.4672">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-005.png</t>
<t tx="ekr.20101009213545.4692"></t>
<t tx="ekr.20101009213545.4693">@nocolor

My to-do list.
</t>
<t tx="ekr.20101009213545.4694">1. Make Leo tutorials.  The world is waiting.

2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101009213545.4695"></t>
<t tx="ekr.20101009213545.4696"></t>
<t tx="ekr.20101009213545.4697"></t>
<t tx="ekr.20101009213545.4698">@nocolor
</t>
<t tx="ekr.20101009213545.4699"></t>
<t tx="ekr.20101009213545.4700"></t>
<t tx="ekr.20101009213545.4701"></t>
<t tx="ekr.20101009213545.4702"></t>
<t tx="ekr.20101009213545.4703"></t>
<t tx="ekr.20101009213545.4704"></t>
<t tx="ekr.20101009213545.4705"></t>
<t tx="ekr.20101009213545.4706"></t>
<t tx="ekr.20101009213545.4707"></t>
<t tx="ekr.20101009213545.4708"></t>
<t tx="ekr.20101009213545.4709"></t>
<t tx="ekr.20101009213545.4710"></t>
<t tx="ekr.20101010121134.4703">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-001.html</t>
<t tx="ekr.20101010121134.4704"></t>
<t tx="ekr.20101010121134.4716">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-002.png</t>
<t tx="ekr.20101010121134.4717">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-002.svg</t>
<t tx="ekr.20101010121134.4718">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-002.png</t>
<t tx="ekr.20101010121134.4719">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-002.html</t>
<t tx="ekr.20101010121134.4731">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-003.png</t>
<t tx="ekr.20101010121134.4732">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-003.svg</t>
<t tx="ekr.20101010121134.4746">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-003.png</t>
<t tx="ekr.20101010121134.4747">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-003.html</t>
<t tx="ekr.20101010121134.4766">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-004.png</t>
<t tx="ekr.20101010121134.4767">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-004.svg</t>
<t tx="ekr.20101010121134.4768">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-004.png</t>
<t tx="ekr.20101010121134.4769">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-004.html</t>
<t tx="ekr.20101010121134.4810">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-006.png</t>
<t tx="ekr.20101010121134.4811">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-006.svg</t>
<t tx="ekr.20101010121134.4812">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-006.png</t>
<t tx="ekr.20101010121134.4813">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-006.html</t>
<t tx="ekr.20101010121134.4814">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-005.html</t>
<t tx="ekr.20101010121134.4832"></t>
<t tx="ekr.20101010121134.4833">@nocolor

My to-do list.
</t>
<t tx="ekr.20101010121134.4834">1. Make Leo tutorials.  The world is waiting.

2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101010121134.4835"></t>
<t tx="ekr.20101010121134.4836"></t>
<t tx="ekr.20101010121134.4837"></t>
<t tx="ekr.20101010121134.4838">@nocolor
</t>
<t tx="ekr.20101010121134.4839"></t>
<t tx="ekr.20101010121134.4840"></t>
<t tx="ekr.20101010121134.4841"></t>
<t tx="ekr.20101010121134.4842"></t>
<t tx="ekr.20101010121134.4843"></t>
<t tx="ekr.20101010121134.4844"></t>
<t tx="ekr.20101010121134.4845"></t>
<t tx="ekr.20101010121134.4846"></t>
<t tx="ekr.20101010121134.4847"></t>
<t tx="ekr.20101010121134.4848"></t>
<t tx="ekr.20101010121134.4849"></t>
<t tx="ekr.20101010121134.4868">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-007.png</t>
<t tx="ekr.20101010121134.4869">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-007.svg</t>
<t tx="ekr.20101010140842.4755">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-007.png</t>
<t tx="ekr.20101010140842.4756">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-007.html</t>
<t tx="ekr.20101010141334.4772"></t>
<t tx="ekr.20101010141334.4773">@nocolor

My to-do list.
</t>
<t tx="ekr.20101010141334.4774">1. Make Leo tutorials.  The world is waiting.

2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101010141334.4775"></t>
<t tx="ekr.20101010141334.4776"></t>
<t tx="ekr.20101010141334.4777"></t>
<t tx="ekr.20101010141334.4778">@nocolor
</t>
<t tx="ekr.20101010141334.4779"></t>
<t tx="ekr.20101010141334.4780"></t>
<t tx="ekr.20101010141334.4781"></t>
<t tx="ekr.20101010141334.4782"></t>
<t tx="ekr.20101010141334.4783"></t>
<t tx="ekr.20101010141334.4784"></t>
<t tx="ekr.20101010141334.4785"></t>
<t tx="ekr.20101010141334.4786"></t>
<t tx="ekr.20101010141334.4787"></t>
<t tx="ekr.20101010141334.4788"></t>
<t tx="ekr.20101010141334.4789"></t>
<t tx="ekr.20101010141334.4791"></t>
<t tx="ekr.20101010141334.4793"></t>
<t tx="ekr.20101010141953.4835">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-008.png</t>
<t tx="ekr.20101010141953.4836">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-008.svg</t>
<t tx="ekr.20101010141953.4837">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-008.png</t>
<t tx="ekr.20101010141953.4838">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-008.html</t>
<t tx="ekr.20101010141953.4856"></t>
<t tx="ekr.20101010141953.4857">@nocolor

My to-do list.
</t>
<t tx="ekr.20101010141953.4858">1. Make Leo tutorials.  The world is waiting.

2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101010141953.4859"></t>
<t tx="ekr.20101010141953.4860"></t>
<t tx="ekr.20101010141953.4861"></t>
<t tx="ekr.20101010141953.4862">@nocolor
</t>
<t tx="ekr.20101010141953.4863"></t>
<t tx="ekr.20101010141953.4864"></t>
<t tx="ekr.20101010141953.4865"></t>
<t tx="ekr.20101010141953.4866"></t>
<t tx="ekr.20101010141953.4867"></t>
<t tx="ekr.20101010141953.4868"></t>
<t tx="ekr.20101010141953.4869"></t>
<t tx="ekr.20101010141953.4870"></t>
<t tx="ekr.20101010141953.4871"></t>
<t tx="ekr.20101010141953.4872"></t>
<t tx="ekr.20101010141953.4873"></t>
<t tx="ekr.20101010141953.4896"></t>
<t tx="ekr.20101010141953.4897"></t>
<t tx="ekr.20101010141953.4916">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-009.png</t>
<t tx="ekr.20101010141953.4917">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-009.svg</t>
<t tx="ekr.20101010141953.4918">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/slide-009.png</t>
<t tx="ekr.20101010141953.4919">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-009.html</t>
<t tx="ekr.20101010141953.4922">c:\leo.repo\trunk\leo\doc\html\slides\what-is-leo\_build\html\slide-010.html</t>
<t tx="ekr.20101010141953.4940"></t>
<t tx="ekr.20101010141953.4941">@nocolor

My to-do list.
</t>
<t tx="ekr.20101010141953.4942">1. Make Leo tutorials.  The world is waiting.

2. Pay phone bill or the world will never know.</t>
<t tx="ekr.20101010141953.4943"></t>
<t tx="ekr.20101010141953.4944"></t>
<t tx="ekr.20101010141953.4945"></t>
<t tx="ekr.20101010141953.4946">@nocolor

This is my diary.
</t>
<t tx="ekr.20101010141953.4947"></t>
<t tx="ekr.20101010141953.4948"></t>
<t tx="ekr.20101010141953.4949"></t>
<t tx="ekr.20101010141953.4950"></t>
<t tx="ekr.20101010141953.4951"></t>
<t tx="ekr.20101010141953.4952"></t>
<t tx="ekr.20101010141953.4953"></t>
<t tx="ekr.20101010141953.4954"></t>
<t tx="ekr.20101010141953.4955"></t>
<t tx="ekr.20101010141953.4956"></t>
<t tx="ekr.20101010141953.4957"></t>
<t tx="ekr.20101010141953.4958"></t>
<t tx="ekr.20101010141953.5023">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-011.png</t>
<t tx="ekr.20101010141953.5024">c:/leo.repo/trunk/leo/doc/html/slides/what-is-leo/screenshot-011.svg</t>
<t tx="ekr.20101010141953.5027"></t>
<t tx="ekr.20101010141953.5028">@language rest</t>
<t tx="ekr.20101010141953.5029"></t>
<t tx="ekr.20101010141953.5030">.. _`here`:     http://www.nullsoft.com/free/nsis/
.. _`Winamp`:   http://www.winamp.com/

Nullsoft, the makers of the `Winamp`_ MP3 software, have released a powerful free
installer called NSIS, available `here`_. This application allows you to make
installation packages for Windows applications.

You create NSIS packages by writing a NSIS script and then compiling it.
Depending on the application, NSIS can often be a better choice than more
expensive installation generators, since NSIS installations are easy to create,
are small and fast, and yet can be configured with many features.

</t>
<t tx="ekr.20101010141953.5031">When you install Leo, you'll find that it comes with a script for generating an
installer for Leo. This script is called leo-&lt;version&gt;.nsi, and is distributed
in the Leo file leo/dist/leoDist.leo.

If you have NSIS installed, right-clicking on a .nsi file will give you the
option of compiling the script to create a package.

.. image:: slide-002.png

</t>
<t tx="ekr.20101010141953.5032"></t>
<t tx="ekr.20101010141953.5033"></t>
<t tx="ekr.20101010141953.5034"></t>
<t tx="ekr.20101010141953.5038">c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/screenshot-002.png</t>
<t tx="ekr.20101010141953.5039">c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/screenshot-002.svg</t>
<t tx="ekr.20101010141953.5040">c:/leo.repo/trunk/leo/doc/html/slides/leos-nsis-installer/slide-002.png</t>
<t tx="ekr.20101011071655.4918">c:\leo.repo\trunk\leo\doc\html\slides\leos-nsis-installer\_build\html\slide-002.html</t>
<t tx="ekr.20101011071655.4919">@language rest
@pagewidth 50
</t>
<t tx="ekr.20101011071655.4920">You can use Leo as a PIM.

As with other outliners, Leo outlines show </t>
<t tx="ekr.20101011092154.4923">Since the NSIS script for the Leo installation is included in the Leo
distribution in the nsis.leo file, it is easy to understand the how the script
works. This .nsi file creates an installer that packages all of the Leo program
files, and creates a desktop shortcut, a Program Menu item, and the file
association for .leo files.</t>
<t tx="ekr.20101011092154.4924">In this screenshot we're looking at the code that checks to see whether Python
has been installed.

Since Leo is a Python application, modifying this installation script to create
a script to build a Windows installer for your own Python application is
relatively simple. You would leave this section alone, and check other sections
for the program name "Leo", and change these to your program name.</t>
<t tx="ekr.20101011092154.4925"></t>
<t tx="ekr.20101011103613.4930">Leo is a better pim.</t>
<t tx="ekr.20101011103613.4933">The body text of any node can contain a Python script.

You execute the script with (Ctrl-B) Leo's execute-script command.</t>
<t tx="ekr.20101011103613.4934">All Leo scripts have access to three predefined constants: c, g and p.</t>
<t tx="ekr.20101011103613.4935">Discuss @button nodes
</t>
<t tx="ekr.20101011103613.4936">Discuss @test nodes</t>
<t tx="ekr.20101011103613.4937">Leo outlines make it easy to create Restructured Text (rST) documents.

Within @rst trees, nodes correspond to rST sections. Naturally, the outline
level of a node in the Leo outline determines the section's level in the
resulting document.</t>
<t tx="ekr.20101011103613.4938">All Leo scripts have full access to the outline in which the scripts reside. The
following scripts, executed from Leo's body pane, will print the headlines of
all the nodes of the outline, properly indented::

    for p in c.all_positions():
        print '%s%s' % (' '*p.level(),p.h)
</t>
<t tx="ekr.20101011103613.4939"></t>
<t tx="ekr.20101011103613.4940">Leo is a new way of working with complex data like computer programs,
books, web sites and data bases. The term **Leonine** refers to the Leo
way of viewing the world and its data.

In Leo, **outline structure is significant everywhere**. Leo’s users speak of an
Aha! moment when they see what this statement means.

People say Leo is **fun to use**, even additive.
</t>
<t tx="ekr.20101011103613.4942">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-003.html</t>
<t tx="ekr.20101011103613.4943">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-005.html</t>
<t tx="ekr.20101011103613.4944">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-006.html</t>
<t tx="ekr.20101011103613.4945">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-007.html</t>
<t tx="ekr.20101011103613.4946">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-008.html</t>
<t tx="ekr.20101011103613.4947">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-009.html</t>
<t tx="ekr.20101011111455.4965">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-010.html</t>
<t tx="ekr.20101011165412.4968">@language rest
@pagewidth 50

</t>
<t tx="ekr.20101011165412.5009"></t>
<t tx="ekr.20101011165412.5011">Unifying scripting, data and outline structure creates a new world. We use the
term **Leonine** to denote the Leo-centric (outline-centric) view of
programming, data and scripting. Here are some of the implications of this
new world:

**Data organization**: Leo's clones allow unprecedented flexibility in
organizing data. Leo outlines have been used as an entirely new kind of
database. It is easily scriptable. As my brother has shown, it is possible to
design Leo outlines so that parts of the outline *are* SQL queries!

**Design**: With Leo, you always see the big picture, and as many of the details
as you like. But this makes outlines ideal for representing designs. In fact,
Leo outlines don't just represent designs, they *are* the designs. For example,
all of Leo's source code reside in just a few Leo outlines. And Leo outlines can
represent input data to other design tools.

**Programming/Coding**: It's much easier to program when the design is always
easily visible. Nodes provide the perfect way to organize large modules, classes
and functions. Nodes also provide unlimited room to save as many details as you
like, *without* cluttering your overall view of the task, or rather tasks, at
hand.

**Testing**: Leo is a supremely powerful unit-testing framework:

1. You can make a node a unit test simply by putting @test at the start of its
   headline. Leo will then automatically generate all the blah-blah-blah needed
   to turn the node's script into a fully-functional unit test. Oh yes,
   the headline becomes the name of the unit test.

2. Unit tests can use data in children of @test nodes. Typical tests put input
   data in one child node, and the expected results of running the test in another
   child node. The test simply compares the actual and expected results.

3. You can easily run tests in the entire outline or just in the selected
   outline. Because tests reside in nodes, you can use clones to organize tests
   in as many ways as you like. For example, it is trivial to run only those
   tests that are failing.

**Maintenance and support**: Leo's ability to contain multiple views of data is
*precisely* what is needed while maintaining any large project. For every new
support task and every new bug, a new (plain) **task node** will contain all the
data needed for that task, notes, test data, whatever. Furthermore, when fixing
bugs, the task node can contain clones of all classes, methods or functions
related to the bug. Fixing a node in the task node fixes the node in the
external file! And as always, you can use all of Leo's outlining features
(including clones) to organize your task nodes.

**Organization everywhere**: Have you noticed that Leo's organizational prowess
applies to *everything*? Indeed, you can use outlines and clones in new ways to
organize files, projects, data, design, programs, testing, and tasks. Leo
doesn't need lots of features--outlines, clones and scripts suffice.  The more
complex your data, designs, program and tasks, the better Leo is suited to them.

It's time to mention one of Leo's most unique features.  Simple, *optional*
markup makes it possible to synthesize (build) scripts and entire computer programs
from outlines. Leo is more than a filing cabinet for scripts and programs, Leo
is a build tool for scripts and outlines!

**Scripting everything**: Let's step back a moment. A single outline can contain
databases, designs, actual computer code, unit tests, test scripts and task
nodes. But Leo scripts will work on any kind of node. Thus, it is *easy* to run
scripts on *anything*! Examples:

- Scripting itself: @button nodes creates a **script button**, a Python script
  that can be applied to any node in an outline! Script buttons have been
  written (in Python) that will execute Leo scripts in other languages.

- Data: The @kind convention for headlines tells scripts what a node contains
  without having to parse the node's contents.  The possibilities are endless.

- Design: scripts can verify properties of design based on either the contents
  of design nodes or their outline structure.

- Coding: scripts routinely make massive changes to outlines. Scripts and unit
  tests can (and do!) verify arbitrarily complex properties of outlines.

- Scientific programming: Leo scripts can run experiments many times using
  different starting points. Nodes are the perfect place to store results and
  notes. Many scientists use the IPython shell-- Using Leo's **IPython bridge**,
  Leo can execute IPython scripts, and scripts in IPython have full access to
  all nodes in Leo outlines.

- Testing: scripts can (and do!) create @test nodes themselves.

- Maintenance: scripts could gather statistics about tasks using simple @kind
  conventions.

The Leo Aha is just this: Leo outlines are far more than eye candy. Leo outlines
revolutionize your view of data--Leo outlines can organize *anything*. Leo
outlines create a new kind of programming environment, one in which outline
structure and user-defined data types create totally new opportunities.
</t>
<t tx="ekr.20101011165412.5066">@ @rst-options
.. A very cool option: doc parts will be rendered properly,
.. but will be ignored by the Execute script command.
..
show_doc_parts_as_paragraphs = True
@c

####################################
Chapter 7: Scripting Leo with Python
####################################

This chapter describes how to write Python scripts that control Leo and access
the data in Leo outlines. To write such scripts, you must understand the basics
of Leo's internal data structures. As we shall see, these basics are quite simple.

Although this chapter discusses everything you will need to write most scripts,
please keep in mind that your scripts have complete access to all of Leo's
source code, that is, all the code in LeoPy.leo.

**Note**: If you are reading this documentation in leoDocs.leo you can execute
all code examples in this chapter by running the Execute Script command
(Ctrl-B). You may have to select the actual code to execute if a node contains
comments interspersed with the code.

.. .. contents::
</t>
<t tx="ekr.20101011165412.5071" rst_http_attribute="5d71002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3122206e616d653d22687474702d6e6f64652d6d61726b65722d31223e710158040000003c2f613e71025d710328583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710458060000003c2f6469763e71055d71062858060000003c626f64793e710758070000003c2f626f64793e71085d71092858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710a58070000003c2f68746d6c3e710b4e65656558240000003c64697620636c6173733d2273656374696f6e222069643d226f76657276696577223e0a710c58490000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643122206e616d653d226f76657276696577223e4f766572766965773c2f613e3c2f68313e0a710d652e">Leo scripts typically use the following objects:

**g**
    The predefined constant g is the leo.core.leoGlobals module. This
    module contains several dozen utility functions and classes.

**g.app**
    g.app is the **application object** representing the entire Leo application.
    The instance variables (ivars) of g.app represent Leo's global variables.

**commander**
    The predefined constant c is the commander of the window containing the
    script. Commanders represent all aspects of a single Leo window. For any
    commander c, c.p is the presently selected position (see below), and
    c.rootPosition() is the root (first) position in the outline. Given
    c, Leo scripts can gain access to all data present while Leo is running,
    including all of Leo's classes, functions and data.

**position**
    The predefined constant p is the position of the presently selected
    node. Positions represent locations in Leo outlines. For any position p,
    p.v is the vnode at that position.

**vnode**
    A vnode represents a single outline node. Because of clones, a vnode may
    appear in several places on the screen. Vnodes hold most of the data in Leo
    outlines. For any vnode v, v.h is the node's headline, and v.b
    is the node's body text. As a convenience, for any position p, p.h
    and p.b are synonyms for p.v.h and p.v.b.

Later sections will discuss other classes, objects and utility functions, but
most scripts will need only the objects and classes described above.
</t>
<t tx="ekr.20101011165412.5072">Leo's execute script command predefines the c, g and p constants
when it runs any script inside Leo:

- c is the commander of the outline containing the script.
- g is Leo's leo.core.leoGlobals module.
- p is the presently selected position, the same as c.p.

Leo scripts can use c and g to gain access to all of Leo's source code.
</t>
<t tx="ekr.20101011165412.5073" rst_http_attribute="5d71002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3522206e616d653d22687474702d6e6f64652d6d61726b65722d35223e710158040000003c2f613e71025d71032858400000003c64697620636c6173733d2273656374696f6e222069643d22672d746f702d7468652d636f6d6d616e6465722d6f662d7468652d746f702d77696e646f77223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f58360000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e0a711058700000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643322206e616d653d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e672e657328293a20777269746520746f20746865206c6f672070616e653c2f613e3c2f68313e0a7111652e">The g.es method prints its arguments to the Log tab of the log pane::

    g.es("Hello world")

g.es converts non-string arguments using repr::

    g.es(c)

g.es prints multiple arguments separated by commas::

    g.es("Hello","world")

To create a tab named 'Test' or make it visible if it already exists::

    c.frame.log.selectTab('Test')

When first created, a tab contains a Tk.Text widget.
To write to this widget, add the tabName argument to g.es::

    g.es('Test',color='blue',tabName='Test')
</t>
<t tx="ekr.20101011165412.5074" rst_http_attribute="5d71002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3722206e616d653d22687474702d6e6f64652d6d61726b65722d37223e710158040000003c2f613e71025d71032858350000003c64697620636c6173733d2273656374696f6e222069643d22672d65732d77726974652d746f2d7468652d6c6f672d70616e65223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f58460000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e0a7110588e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643422206e616d653d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e6170702e77696e646f774c6973743a20746865206c697374206f6620616c6c206f70656e206672616d65733c2f613e3c2f68313e0a7111652e">The windowlist attribute of the application instance contains the list of the
frames of all open windows. The commands ivar of the frame gives the commander
for that frame::

    windows = g.app.windowList # get the list of all open frames.
    g.es("windows...")
    for f in windows:
        c = f.c # c is f's commander
        g.es(f)
        g.es(f.shortFileName())
        g.es(c)
        g.es(c.rootPosition())

There is also g.app.commanders() method, that gives the list of all active
commanders directly.
</t>
<t tx="ekr.20101011165412.5075" rst_http_attribute="5d71002858440000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d3922206e616d653d22687474702d6e6f64652d6d61726b65722d39223e710158040000003c2f613e71025d71032858450000003c64697620636c6173733d2273656374696f6e222069643d226170702d77696e646f776c6973742d7468652d6c6973742d6f662d616c6c2d6f70656e2d6672616d6573223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f58460000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e0a7110588d0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643522206e616d653d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e47657474696e6720616e642073657474696e6720686561646c696e6520616e6420626f647920746578743c2f613e3c2f68313e0a7111652e">Here is how to access the data of a Leo window::

    g.es(p) # p is already defined.
    p = c.p # get the current position.
    g.es(p)
    g.es("head:",p.h)
    g.es("body:",p.b)

Here is how to access data at position p.
**Note**: these methods work whether or not p is the current position::

    body = p.b # get the body text.
    head = p.h # get the headline text.
    p.b = body # set body text of p to body.
    p.h = head # set headline text of p to head.

**Note**: Sometimes you want to use text that *looks* like a section reference, but isn't.
In such cases, you can use g.angleBrackets.  For example::

    g.es(g.angleBrackets('abc'))
</t>
<t tx="ekr.20101011165412.5076">Let::

    w = c.frame.body.bodyCtrl # Leo's body pane.

Scripts can get or change the context of the body as follows::

    w.appendText(s)                     # Append s to end of body text.
    w.delete(i,j=None)                  # Delete characters from i to j.
    w.deleteTextSelection()             # Delete the selected text, if any.
    s = w.get(i,j=None)                 # Return the text from i to j.
    s = w.getAllText                    # Return the entire body text.
    i = w.getInsertPoint()              # Return the location of the cursor.
    s = w.getSelectedText()             # Return the selected text, if any.
    i,j = w.getSelectionRange (sort=True) # Return the range of selected text.
    w.replace(i,j,s)                    # Replace the text from i to j by s.
    w.setAllText(s)                     # Set the entire body text to s.
    w.setBackgroundColor(color)         # Set the background color.
    w.setSelectionRange(i,j,insert=None) # Select the text.
    w.setForegroundColor(color)         # Set the foreground color.

**Notes**:

- These are only the most commonly-used methods.
  For more information, consult Leo's source code.

- i and j are zero-based indices into the the text.
  When j is not specified, it defaults to i.
  When the sort parameter is in effect, getSelectionRange
  ensures i &lt;= j.

- color is a tk color name, even when using the qt gui plugin.
</t>
<t tx="ekr.20101011165412.5077">Positions become invalid whenever the outline changes. Plugins and scripts that
can make sure the position p is still valid by calling c.positionExists(p).

The following code will find a position p2 having the same vnode as p::

    if not c.positionExists(p):
        for p2 in c.all_positions():
            if p2.v == p.v: # found
                c.selectPosition(p2)
        else:
            print('position no longer exists')
</t>
<t tx="ekr.20101011165412.5078">Scripts must wary of saving positions because positions become invalid
whenever the user moves, inserts or deletes nodes.  It is valid to store
positions **only** when a script knows that the stored position will be used
before the outline's structure changes.

To store a position, the script must use the p.copy() method::

    p2 = p.copy()   # Correct: p2 will not change when p changes later.

The following **will not work**::

    p2 = p  # Wrong.  p2 will change if p changes later.

For example, the following creates a dictionary of saved positions::

    d = {}
    for p in c.all_positions():
        d[p.v] = p.copy()

</t>
<t tx="ekr.20101011165412.5079" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313122206e616d653d22687474702d6e6f64652d6d61726b65722d3131223e710158040000003c2f613e71025d71032858450000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d686561646c696e652d616e642d626f64792d74657874223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f582f0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e0a7110585f0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643622206e616d653d2274726176657273696e672d6f75746c696e6573223e54726176657273696e67206f75746c696e65733c2f613e3c2f68313e0a7111652e">Leo scripts can easily access any node of an outline with generators. Leo's
generators return positions or nodes, one after another. Generators do not
return lists, but you can make lists from generators easily. For example, the
c.all_positions() generator returns every position in c's tree, one after
another. You can use the generator directly, like this::

    for p  in c.all_positions():
        print(p.h)

You can create actual lists from generators in several ways::

    aList = list(c.all_positions()] # Use the list built-in function.
    print(aList)

or::

    aList = [p.copy() for p in c.all_positions()] # Use list comprehension.
    print(aList)


Using the list is simpler, but list comprehensions can be more flexible.  For example::

    aList = [p.copy().h for p in c.all_positions() if p.h.startswith('@thin')]
    print(aList)
</t>
<t tx="ekr.20101011165412.5080" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313322206e616d653d22687474702d6e6f64652d6d61726b65722d3133223e710158040000003c2f613e71025d710328582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e65656565582b0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e0a710f58570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643722206e616d653d22632d616c6c6e6f6465732d69746572223e632e616c6c4e6f6465735f697465723c2f613e3c2f68323e0a7110652e">The c.all_positions generator returns a list of all positions in the outline.
This script makes a list of all the nodes in an outline::

    nodes = list(c.all_positions())
    print("This outline contains %d nodes" % len(nodes))

The c.all_unique_positions generator returns a list of all unique positions in the outline.
For each vnode v in the outline, exactly one position p is returned such that p.v == v.

This script prints the *distinct* vnodes of an outline::

    for p in c.all_unique_positions():
        sep = g.choose(p.hasChildren(),'+','-')
        print('%s%s %s' % (' '*p.level(),sep,p.h))
</t>
<t tx="ekr.20101011165412.5081" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313522206e616d653d22687474702d6e6f64652d6d61726b65722d3135223e710158040000003c2f613e71025d710328582a0000003c64697620636c6173733d2273656374696f6e222069643d22632d616c6c6e6f6465732d69746572223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a7112582b0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e0a711358570000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643822206e616d653d22702d6368696c6472656e2d69746572223e702e6368696c6472656e5f697465723c2f613e3c2f68323e0a7114652e">The p.children generator returns a list of all children of position p::

    parent = p.parent()
    print("children of %s" % parent.h)
    for p in parent.children():
        print(p.h)
</t>
<t tx="ekr.20101011165412.5082" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313722206e616d653d22687474702d6e6f64652d6d61726b65722d3137223e710158040000003c2f613e71025d710328582a0000003c64697620636c6173733d2273656374696f6e222069643d22702d6368696c6472656e2d69746572223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258460000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e0a7113588d0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d222369643922206e616d653d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e702e706172656e74735f6974657220616e6420702e73656c665f616e645f706172656e74735f697465723c2f613e3c2f68323e0a7114652e">The p.parents generator returns a list of all parents of position p,
excluding p::

    current = p.copy()
    print("exclusive of %s" % (current.h),color="purple")
    for p in current.parents():
        print(p.h)

The p.self_and_parents generator returns a list of all parents of position
p, including p::

    current = p.copy()
    print("inclusive parents of %s" % (current.h),color="purple")
    for p in current.self_and_parents():
        print(p.h)    
</t>
<t tx="ekr.20101011165412.5083" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d313922206e616d653d22687474702d6e6f64652d6d61726b65722d3139223e710158040000003c2f613e71025d71032858450000003c64697620636c6173733d2273656374696f6e222069643d22702d706172656e74732d697465722d616e642d702d73656c662d616e642d706172656e74732d69746572223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258490000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e0a711358940000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313022206e616d653d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e702e7369626c696e67735f6974657220616e6420702e666f6c6c6f77696e675f7369626c696e67735f697465723c2f613e3c2f68323e0a7114652e">The p.siblings generator returns a list of all siblings of position p::

    current = c.p
    print("all siblings of %s" % (current.h),color="purple")
    for p in current.self_and_siblings():
        print(p.h)

The p.following_siblings generator returns a list of all siblings that
follow position p::

    current = c.p
    print("following siblings of %s" % (current.h),color="purple")
    for p in current.following_siblings():
        print(p.h)
</t>
<t tx="ekr.20101011165412.5084" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323122206e616d653d22687474702d6e6f64652d6d61726b65722d3231223e710158040000003c2f613e71025d71032858480000003c64697620636c6173733d2273656374696f6e222069643d22702d7369626c696e67732d697465722d616e642d702d666f6c6c6f77696e672d7369626c696e67732d69746572223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258460000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e0a7113588e0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313122206e616d653d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e702e737562747265655f6974657220616e6420702e73656c665f616e645f737562747265655f697465723c2f613e3c2f68323e0a7114652e">The p.subtree generator returns a list of all positions in p's subtree, excluding p::

    parent = p.parent()
    print("exclusive subtree of %s" % (parent.h),color="purple")
    for p in parent.subtree():
        print(p.h)

The p.self_and_subtree generator returns a list of all positions in p's subtree, including p::

    parent = p.parent()
    print("inclusive subtree of %s" % (parent.h),color="purple")
    for p in parent.self_and_subtree():
        print(p.h)
</t>
<t tx="ekr.20101011165412.5085" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323322206e616d653d22687474702d6e6f64652d6d61726b65722d3233223e710158040000003c2f613e71025d71032858450000003c64697620636c6173733d2273656374696f6e222069643d22702d737562747265652d697465722d616e642d702d73656c662d616e642d737562747265652d69746572223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a7112583f0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e0a711358800000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313222206e616d653d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e54657374696e672077686574686572206120706f736974696f6e2069732076616c69643c2f613e3c2f68323e0a7114652e">The tests::

    if p:       # Right
    if not p:   # Right

are the **only** correct ways to test whether a position p is valid.
In particular, the following **will not work**::

    if p is None:       # Wrong
    if p is not None:   # Wrong
</t>
<t tx="ekr.20101011165412.5086" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323522206e616d653d22687474702d6e6f64652d6d61726b65722d3235223e710158040000003c2f613e71025d710328583e0000003c64697620636c6173733d2273656374696f6e222069643d2274657374696e672d776865746865722d612d706f736974696f6e2d69732d76616c6964223e710458060000003c2f6469763e71055d710628582e0000003c64697620636c6173733d2273656374696f6e222069643d2274726176657273696e672d6f75746c696e6573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258070000003c2f6469763e0a7113582f0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e0a711458600000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313322206e616d653d227570646174696e672d7468652d73637265656e223e5570646174696e67207468652073637265656e3c2f613e3c2f68313e0a7115652e">You can use c.redraw_now to redraw the entire screen immediately::

    c.redraw_now()

However, it is usually better to *request* a redraw to be done later as follows::

    c.redraw()

Leo actually redraws the screen in c.outerUpdate, provided that a redraw has been requested.
Leo will call c.outerUpdate at the end of each script, event handler and Leo command.
</t>
<t tx="ekr.20101011165412.5087" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323722206e616d653d22687474702d6e6f64652d6d61726b65722d3237223e710158040000003c2f613e71025d710328582e0000003c64697620636c6173733d2273656374696f6e222069643d227570646174696e672d7468652d73637265656e223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f583a0000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e0a711058760000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313422206e616d653d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e496e766f6b696e6720636f6d6d616e64732066726f6d20736372697074733c2f613e3c2f68313e0a7111652e">Leo dispatches commands using c.doCommand,
which calls the "command1" and "command2" hook routines for the given label.
c.doCommand catches all exceptions thrown by the command::

    c.doCommand(c.markHeadline,label="markheadline")

You can also call command handlers directly so that hooks will not be called::

    c.markHeadline()

You can invoke minibuffer commands by name.  For example::

    c.executeMinibufferCommand('open-outline')

c.keyHandler.funcReturn contains the value returned from the command.
In many cases, as above, this value is simply 'break'.
</t>
<t tx="ekr.20101011165412.5088">Any .leo file may contain an @settings tree, so settings may be different for each commander.
Plugins and other scripts can get the value of settings as follows::

    format_headlines = c.config.getBool('rst3_format_headlines')
    print('format_headlines',format_headlines)

The c.config class has the following getters.
See the configSettings in leoCommands.py for details::

    c.config.getBool(settingName,default=None)
    c.config.getColor(settingName)
    c.config.getDirectory(settingName)
    c.config.getFloat(settingName)
    c.config.getInt(settingName)
    c.config.getLanguage(settingName)
    c.config.getRatio(settingName)
    c.config.getShortcut(settingName)
    c.config.getString(settingName)

These methods return None if no setting exists.
The getBool 'default' argument to getBool gives the value to be returned if the setting does not exist.

You can set any *existing* item in an @settings tree with c.config.set(p,setting,val).
For example::

    for val in (False,True):
        c.config.set(p,'rst3_format_headlines',val)
        format_headlines = c.config.getBool('rst3_format_headlines')
        print('format_headlines',format_headlines)

c.config.set does not change the @settings tree; it simply changes the values returned by the getters.
</t>
<t tx="ekr.20101011165412.5089" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d323922206e616d653d22687474702d6e6f64652d6d61726b65722d3239223e710158040000003c2f613e71025d71032858390000003c64697620636c6173733d2273656374696f6e222069643d22696e766f6b696e672d636f6d6d616e64732d66726f6d2d73637269707473223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f583b0000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e0a711058780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313522206e616d653d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e47657474696e6720616e642073657474696e6720707265666572656e6365733c2f613e3c2f68313e0a7111652e">Each commander maintains its own preferences.
Your scripts can get the following ivars::

    ivars = (
        'output_doc_flag',
        'page_width',
        'page_width',
        'tab_width',
        'tangle_batch_flag',
        'tangle_directory',
        'target_language',
        'untangle_batch_flag',
        'use_header_flag',
    )

    print("Prefs ivars...\n",color="purple")
    for ivar in ivars:
        print(getattr(c,ivar))

If your script sets c.tab_width your script may call f.setTabWidth to redraw the screen::

    c.tab_width = -4    # Change this and see what happens.
    c.frame.setTabWidth(c.tab_width)
</t>
<t tx="ekr.20101011165412.5090" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333122206e616d653d22687474702d6e6f64652d6d61726b65722d3331223e710158040000003c2f613e71025d710328583a0000003c64697620636c6173733d2273656374696f6e222069643d2267657474696e672d616e642d73657474696e672d707265666572656e636573223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f58500000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e0a711058a20000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313622206e616d653d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e46756e6374696f6e7320666f722066696e64696e6720616e64206368616e67696e6720746578742066726f6d20736372697074733c2f613e3c2f68313e0a7111652e">The file leoFindScript.py contains functions for finding and changing text
from within scripts.  See leoFindScript.py in LeoPy.leo for full details.

The findall function returns a list of tuples (v,pos) describing matches in
c's entire tree::

    import leo.scripts.leoFindScript as leoFindScript

    pattern="import leo.core.leoGlobals as g"
    result = leoFindScript.findAll(c,pattern,bodyFlag=1)

    print("%-3d instances of: '%s'...\n" % (len(result),pattern),color="purple")

    for v,pos in result:
        body = v.b
        print('\n%-4d %s' % (pos,v.h))
        print(g.get_line_after(body,pos))

The reFindall function returns a list of tuples (v,mo,pos), where mo
is a MatchObject. The reFlags argument are flags to re.search::

    import leo.scripts.leoFindScript as leoFindScript

    pattern="from .* import"
    result = leoFindScript.reFindAll(c,pattern,bodyFlag=1,reFlags=None)

    print("%-3d instances of: '%s'...\n" % (len(result),pattern),color="purple")
    for v,mo,pos in result:
        body = v.b
        print('\n%-4d %s' % (pos,v.h))
        print(g.get_line_after(body,pos))
</t>
<t tx="ekr.20101011165412.5091" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333922206e616d653d22687474702d6e6f64652d6d61726b65722d3339223e710158040000003c2f613e71025d71032858340000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f583e0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e0a7110587e0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323022206e616d653d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e46756e6374696f6e7320646566696e656420696e206c656f476c6f62616c732e70793c2f613e3c2f68313e0a7111652e">leoGlobals.py contains many utility functions and constants.
The following script prints all the names defined in leoGlobals.py::

    print("Names defined in leoGlobals.py",color="purple")
    names = g.__dict__.keys()
    names.sort()
    for name in names:
        print(name)
</t>
<t tx="ekr.20101011165412.5092">Plugins and other scripts can register event handlers (also known as hooks) with code such as::

    leoPlugins.registerHandler("after-create-leo-frame",onCreate)
    leoPlugins.registerHandler("idle", on_idle) 
    leoPlugins.registerHandler(("start2","open2","command2"), create_open_with_menu) 

As shown above, a plugin may register one or more event handlers with a single call to
leoPlugins.registerHandler. Once a hook is registered, Leo will call the
registered function' at the named **hook time**. For example::

    leoPlugins.registerHandler("idle", on_idle)

causes Leo to call on_idle at "idle" time.

Event handlers must have the following signature::

    def myHook (tag, keywords):
        whatever

-   tag is the name of the hook (a string).
-   keywords is a Python dictionary containing additional information.
    The following section describes the contents of the keywords dictionary in detail.

**Important**: hooks should get the proper commander this way::

    c = keywords.get('c')
</t>
<t tx="ekr.20101011165412.5093">The following table tells about each event handler: its name, when it is called,
and the additional arguments passed to the hook in the keywords dictionary.
For some kind of hooks, Leo will skip its own normal processing if the hook
returns anything *other* than None. The table indicates such hooks with 'yes' in
the 'Stop?' column.

**Important**: Ever since Leo 4.2, the v, old_v and new_v keys in
the keyword dictionary contain *positions*, not vnodes. These keys are
deprecated. The new_c key is also deprecated. Plugins should use the c key instead.

============================= ======== =================================== =============================
Event name (tag argument)     Stop?    When called                         Keys in keywords dict
============================= ======== =================================== =============================
'after-auto'                           after each @auto file loaded        c,p (note 14)
'after-create-leo-frame'               after creating any frame            c
'after-redraw-outline'                 end of tree.redraw                  c (note 6)
'before-create-leo-frame'              before frame.finishCreate           c
'bodyclick1'                   yes     before normal click in body         c,p,v,event
'bodyclick2'                           after normal click in body          c,p,v,event
'bodydclick1'                  yes     before double click in body         c,p,v,event
'bodydclick2'                          after  double click in body         c,p,v,event
'bodykey1'                     yes     before body keystrokes              c,p,v,ch,oldSel,undoType
'bodykey2'                             after  body keystrokes              c,p,v,ch,oldSel,undoType
'bodyrclick1'                  yes     before right click in body          c,p,v,event
'bodyrclick2'                          after  right click in body          c,p,v,event
'boxclick1'                    yes     before click in +- box              c,p,v,event
'boxclick2'                            after  click in +- box              c,p,v,event
'clear-all-marks'                      after clear-all-marks command       c,p,v
'clear-mark'                           when mark is set                    c,p,v
'close-frame'                          in app.closeLeoWindow               c
'color-optional-markup'        yes *   (note 7)                            colorer,p,v,s,i,j,colortag (note 7)
'command1'                     yes     before each command                 c,p,v,label (note 2)
'command2'                             after  each command                 c,p,v,label (note 2)
'create-optional-menus'                (note 8)                            c (note 8)
'create-popup-menu-items'              in tree.OnPopup                     c,p,v,event (new)
'destroy-all-global-windows'           (note 12)                           None
'draw-outline-box'             yes     when drawing +- box                 tree,p,v,x,y
'draw-outline-icon'            yes     when drawing icon                   tree,p,v,x,y
'draw-outline-node'            yes     when drawing node                   tree,p,v,x,y
'draw-outline-text-box'        yes     when drawing headline               tree,p,v,x,y
'drag1'                        yes     before start of drag                c,p,v,event
'drag2'                                after  start of drag                c,p,v,event
'dragging1'                    yes     before continuing to drag           c,p,v,event
'dragging2'                            after  continuing to drag           c,p,v,event
'enable-popup-menu-items'              in tree.OnPopup                     c,p,v,event
'end1'                                 start of app.quit()                 None
'enddrag1'                     yes     before end of drag                  c,p,v,event
'enddrag2'                             after  end of drag                  c,p,v,event
'headclick1'                   yes     before normal click in headline     c,p,v,event
'headclick2'                           after  normal click in headline     c,p,v,event
'headrclick1'                  yes     before right click in headline      c,p,v,event
'headrclick2'                          after  right click in headline      c,p,v,event
'headkey1'                     yes     before headline keystrokes          c,p,v,ch (note 13)
'headkey2'                             after  headline keystrokes          c,p,v,ch (note 13)
'hoist-changed'                        whenever the hoist stack changes    c
'hypercclick1'                 yes     before control click in hyperlink   c,p,v,event
'hypercclick2'                         after  control click in hyperlink   c,p,v,event
'hyperenter1'                  yes     before entering hyperlink           c,p,v,event
'hyperenter2'                          after  entering hyperlink           c,p,v,event
'hyperleave1'                  yes     before leaving  hyperlink           c,p,v,event
'hyperleave2'                          after  leaving  hyperlink           c,p,v,event
'iconclick1'                   yes     before single click in icon box     c,p,v,event
'iconclick2'                           after  single click in icon box     c,p,v,event
'iconrclick1'                  yes     before right click in icon box      c,p,v,event
'iconrclick2'                          after  right click in icon box      c,p,v,event
'icondclick1'                  yes     before double click in icon box     c,p,v,event
'icondclick2'                          after  double click in icon box     c,p,v,event
'idle'                                 periodically (at idle time)         c
'init-color-markup'                    (note 7)                            colorer,p,v (note 7)
'menu1'                        yes     before creating menus               c,p,v (note 3)
'menu2'                        yes     during creating menus               c,p,v (note 3)
'menu-update'                  yes     before updating menus               c,p,v
'new'                                  start of New command                c,old_c,new_c (note 9)
'open1'                        yes     before opening any file             c,old_c,new_c,fileName (note 4)
'open2'                                after  opening any file             c,old_c,new_c,fileName (note 4)
'openwith1'                    yes     before Open With command            c,p,v,openType,arg,ext
'openwith2'                            after  Open With command            c,p,v,openType,arg,ext
'recentfiles1'                 yes     before Recent Files command         c,p,v,fileName,closeFlag
'recentfiles2'                         after  Recent Files command         c,p,v,fileName,closeFlag
'redraw-entire-outline'        yes     start of tree.redraw                c (note 6)
'save1'                        yes     before any Save command             c,p,v,fileName
'save2'                                after  any Save command             c,p,v,fileName
'scan-directives'                      in scanDirectives                   c,p,v,s,old_dict,dict,pluginsList (note 10)
'select1'                      yes     before selecting a position         c,new_p,old_p,new_v,new_v
'select2'                              after  selecting a position         c,new_p,old_p,new_v,old_v
'select3'                              after  selecting a position         c,new_p,old_p,new_v,old_v
'set-mark'                             when a mark is set                  c,p,v
'show-popup-menu'                      in tree.OnPopup                     c,p,v,event
'start1'                               after app.finishCreate()            None
'start2'                               after opening first Leo window      c,p,v,fileName
'unselect1'                    yes     before unselecting a vnode          c,new_p,old_p,new_v,old_v
'unselect2'                            after  unselecting a vnode          c,new_p,old_p,old_v,old_v
'\@url1'                        yes     before double-click @url node       c,p,v,url (note 5)
'\@url2'                                after  double-click @url node       c,p,v(note 5)
============================= ======== =================================== =============================

**Notes**:

1.  'activate' and 'deactivate' hooks have been removed because they do not work as expected.

2.  'commands' hooks: The label entry in the keywords dict contains the
    'canonicalized' form of the command, that is, the lowercase name of the command
    with all non-alphabetic characters removed.
    Commands hooks now set the label for undo and redo commands 'undo' and 'redo'
    rather than 'cantundo' and 'cantredo'.

3.  'menu1' hook: Setting g.app.realMenuNameDict in this hook is an easy way of
    translating menu names to other languages. **Note**: the 'new' names created this
    way affect only the actual spelling of the menu items, they do *not* affect how
    you specify shortcuts settings, nor do they affect the 'official'
    command names passed in g.app.commandName. For example::

        app().realMenuNameDict['Open...'] = 'Ouvre'.

4.  'open1' and 'open2' hooks: These are called with a keywords dict containing the following entries:

    - c:          The commander of the newly opened window.
    - old_c:      The commander of the previously open window.
    - new_c:      (deprecated: use 'c' instead) The commander of the newly opened window.
    - fileName:   The name of the file being opened.

    You can use old_c.p and c.p to get the current position in the old and new windows.
    Leo calls the 'open1' and 'open2' hooks only if the file is not already open. Leo
    will also call the 'open1' and 'open2' hooks if: a) a file is opened using the
    Recent Files menu and b) the file is not already open.

5.  '\@url1' and '\@url2' hooks are only executed if the 'icondclick1' hook returns None.

6.  These hooks are useful for testing.

7.  These hooks allow plugins to parse and handle markup within doc parts,
    comments and Python ''' strings. Note that these hooks are *not* called in
    Python ''' strings. See the color_markup plugin for a complete example of how to
    use these hooks.

8.  Leo calls the 'create-optional-menus' hook when creating menus. This hook need
    only create new menus in the correct order, without worrying about the placement
    of the menus in the menu bar. See the plugins_menu and scripts_menu plugins for
    examples of how to use this hook.

9.  The New command calls 'new'.
    The 'new_c' key is deprecated.  Use the 'c' key instead.

10. g.scanDirectives calls 'scan-directives' hook.
    g.scanDirectives returns a dictionary, say d.
    d.get('pluginsList') is an a list of tuples (d,v,s,k) where:

    - d is the spelling of the @directive, without the leading @.
    - v is the vnode containing the directive, _not_ the original vnode.
    - s[k:] is a string containing whatever follows the @directive.
      k has already been moved past any whitespace that follows the @directive.

    See the add_directives plugins directive for a complete example of how to use
    the 'scan-directives' hook.

11. g.app.closeLeoWindow calls the 'close-frame' hook just before
    removing the window from g.app.windowList. The hook code may remove the window
    from app.windowList to prevent g.app.closeLeoWindow from destroying the window.

12. g.app.destroyAllGlobalWindows calls the 'destroy-all-global-windows' hook.
    This hook gives plugins the chance to clean up after themselves when Leo shuts down.

13. Leo calls the 'headkey1' and 'headkey2' when the headline *might* have changed.

14. p is the new node (position) containing '@auto filename.ext'
</t>
<t tx="ekr.20101011165412.5094">Two methods in leoGlobals.py allow scripts and plugins to enable and disable 'idle' events.
**g.enableIdleTimeHook(idleTimeDelay=100)** enables the "idle" hook.
Afterwards, Leo will call the "idle" hook approximately every idleTimeDelay milliseconds.
Leo will continue to call the "idle" hook periodically until disableIdleTimeHook is called.
**g.disableIdleTimeHook()** disables the "idle" hook.
</t>
<t tx="ekr.20101011165412.5095">Plugins and scripts should call u.beforeX and u.afterX methods ato
describe the operation that is being performed. **Note**: u is shorthand for
c.undoer. Most u.beforeX methods return undoData that the client
code merely passes to the corresponding u.afterX method. This data contains
the 'before' snapshot. The u.afterX methods then create a bead containing
both the 'before' and 'after' snapshots.

u.beforeChangeGroup and u.afterChangeGroup allow multiple calls to
u.beforeX and u.afterX methods to be treated as a single undoable entry.
See the code for the Change All, Sort, Promote and Demote
commands for examples. The u.beforeChangeGroup and u.afterChangeGroup
methods substantially reduce the number of u.beforeX and afterX methods
needed.

Plugins and scripts may define their own u.beforeX and afterX methods. Indeed,
u.afterX merely needs to set the bunch.undoHelper and
bunch.redoHelper ivars to the methods used to undo and redo the operation.
See the code for the various u.beforeX and afterX methods for guidance.

p.setDirty and p.setAllAncestorAtFileNodesDirty now return a
dirtyVnodeList that all vnodes that became dirty as the result of an
operation. More than one list may be generated: client code is responsible for
merging lists using the pattern dirtyVnodeList.extend(dirtyVnodeList2)

See the section &lt;&lt; How Leo implements unlimited undo &gt;&gt; in leoUndo.py
for more details. In general, the best way to see how to implement undo is to
see how Leo's core calls the u.beforeX and afterX methods.
</t>
<t tx="ekr.20101011165412.5096" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343122206e616d653d22687474702d6e6f64652d6d61726b65722d3431223e710158040000003c2f613e71025d710328583d0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d646566696e65642d696e2d6c656f676c6f62616c732d7079223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f583b0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e0a711058780000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323122206e616d653d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e5265646972656374696e67206f75747075742066726f6d20736372697074733c2f613e3c2f68313e0a7111652e">leoGlobals.py defines 6 convenience methods for redirecting stdout and stderr::

    g.redirectStderr() # Redirect stderr to the current log pane.
    g.redirectStdout() # Redirect stdout to the current log pane.
    g.restoreStderr()  # Restores stderr so it prints to the console window.
    g.restoreStdout()  # Restores stdout so it prints to the console window.
    g.stdErrIsRedirected() # Returns True if the stderr stream is redirected to the log pane.
    g.stdOutIsRedirected() # Returns True if the stdout stream is redirected to the log pane.

Calls need *not* be paired. Redundant calls are ignored and the last call made
controls where output for each stream goes.
**Note**: you must execute Leo in a console window to see non-redirected output from the print statement::

    print("stdout isRedirected: %s" % g.stdOutIsRedirected())
    print("stderr isRedirected: %s" % g.stdErrIsRedirected())

    g.redirectStderr()
    print("stdout isRedirected: %s" % g.stdOutIsRedirected())
    print("stderr isRedirected: %s" % g.stdErrIsRedirected())

    g.redirectStdout()
    print("stdout isRedirected: %s" % g.stdOutIsRedirected())
    print("stderr isRedirected: %s" % g.stdErrIsRedirected())

    g.restoreStderr()
    print("stdout isRedirected: %s" % g.stdOutIsRedirected())
    print("stderr isRedirected: %s" % g.stdErrIsRedirected())

    g.restoreStdout()
    print("stdout isRedirected: %s" % g.stdOutIsRedirected())
    print("stderr isRedirected: %s" % g.stdErrIsRedirected())
</t>
<t tx="ekr.20101011165412.5097">Plugins and scripts can create new tabs in the log panel.
The following creates a tab named test or make it visible if it already exists::

    c.frame.log.selectTab('Test')

g.es, g.enl, g.ecnl, g.ecnls write to the log tab specified by the optional
tabName argument. The default for tabName is 'Log'. The put and putnl methods of
the tkinterLog class also take an optional tabName argument which defaults to
'Log'.

Plugins and scripts may call the
c.frame.canvas.createCanvas method to create a log tab containing a Tk.Canvas
widget. Here is an example script::

    log = c.frame.log ; tag = 'my-canvas'
    w = log.canvasDict.get(tag)
    if not w:
        w = log.createCanvas(tag)
        w.configure(bg='yellow')
    log.selectTab(tag)
</t>
<t tx="ekr.20101011165412.5098">Scripts can invoke various dialogs using the following methods of the g.app.gui object.
Here is a partial list. You can use typing completion(default bindings: Alt-1 and Alt-2) to get the full list!
::

    g.app.gui.runAskOkCancelNumberDialog(c,title,message)
    g.app.gui.runAskOkCancelStringDialog(c,title,message)
    g.app.gui.runAskOkDialog(c,title,message=None,text='Ok')
    g.app.gui.runAskYesNoCancelDialog(c,title,message=None,
        yesMessage='Yes',noMessage='No',defaultButton='Yes')
    g.app.gui.runAskYesNoDialog(c,title,message=None)

The values returned are in ('ok','yes','no','cancel'), as indicated by the
method names. Some dialogs also return strings or numbers, again as indicated by
their names.

Scripts can run File Open and Save dialogs with these methods::

    g.app.gui.runOpenFileDialog(title,filetypes,defaultextension,multiple=False)
    g.app.gui.runSaveFileDialog(initialfile,title,filetypes,defaultextension)

For details about how to use these file dialogs, look for examples in Leo's own
source code. The runOpenFileDialog returns a list of file names.
</t>
<t tx="ekr.20101011165412.5099">You can add an icon to the presently selected node with
c.editCommands.insertIconFromFile(path). path is an absolute path or a path
relative to the leo/Icons folder. A relative path is recommended if you plan to
use the icons on machines with different directory structures.

For example::

    path = 'rt_arrow_disabled.gif' 
    c.editCommands.insertIconFromFile(path) 

Scripts can delete icons from the presently selected node using the following methods::

    c.editCommands.deleteFirstIcon() 
    c.editCommands.deleteLastIcon() 
    c.editCommands.deleteNodeIcons() 
</t>
<t tx="ekr.20101011165412.5100">Tk/Tkinter make it easy to customize the contents of any of Leo's panes. The
following sections will discuss the 'official' ivars that make it possible for
scripts to access and alter the contents of panes. The next three sections will
give examples of modifying each pane.
</t>
<t tx="ekr.20101011165412.5101">The c.frame.log class contains the following 'official' ivars::

    g.es('tabName',c.frame.log.tabName)     # The name of the active tab.
    g.es('tabFrame',c.frame.log.tabFrame)   # The Tk.Frame containing all the other widgets of the tab.
    g.es('logCtrl',c.frame.log.logCtrl)     # Tk.Text widget containing the log text.

The following ivars provide access to the body pane::

    g.es('bodyFrame',c.frame.body.frame)    # The Tk.Frame widget containing the c.frame.body.bodyCtrl

The following ivars provide access to the outline pane::

    g.es('canvas',c.frame.tree.canvas) # The Tk.Canvas on which Leo's outline is drawn.

Tkinter provides a way of determining the enclosing widget of any widget.
The body text is enclosed in a Pmw.PanedWidget to support multiple editors.

    w = c.frame.body.bodyCtrl
    parent = w.pack_info().get('in') 
    g.es('bodyCtrl.parent',parent) # The Tk.Frame containing the body text.
</t>
<t tx="ekr.20101011165412.5102">The following is no substitute for a full discussion of programming the Tk.Text
widget: it can do lots.

To clear the log::

    w = c.frame.log.logCtrl
    w.delete('1.0','end')

To write a line to the end of the log::

    w = c.frame.log.logCtrl
    w.insert('end','This is a test\n')

To get the entire contents of the log::

    w = c.frame.log.logCtrl
    g.es(w.get('1.0','end')+'\n')
</t>
<t tx="ekr.20101011165412.5103">The following line removes the initial text widget::

    c.frame.log.logCtrl.pack_forget()

To make the text widget visible again::

    c.frame.log.logCtrl.pack(side='top',expand=1,fill='both')

Plugins and scripts can pack any other widgets into c.frame.log.tabFrame.
For example, the following replaces the default text widget with a red box::

    import Tkinter as Tk

    # Remove the old contents.
    w = c.frame.log.logCtrl
    parent =  w.pack_info().get('in')
    w.pack_forget()

    # Replace with a red frame.
    f = c.frame.newLog = Tk.Frame(parent,background='red')
    f.pack(side='left',expand=1,fill='both')

And the following will restore the original pane::

    c.frame.newLog.pack_forget()
    w = c.frame.log.logCtrl
    w.pack(side='left',expand=1,fill='both')
</t>
<t tx="ekr.20101011165412.5104">Warning: you will find it hard to execute scripts after removing the body pane,
so you had best make the following two scripts into script buttons before
executing them :-)

Plugins and scripts can pack any other widgets into c.frame.log.tabFrame.
For example, the following replaces the default text widget with a red box::

    import Tkinter as Tk

    w = c.frame.body.bodyCtrl
    parent =  w.pack_info().get('in')
    w.pack_forget()

    f = c.frame.newBody = Tk.Frame(parent,background='red')
    f.pack(side='left',expand=1,fill='both')

To restore::

    c.frame.newBody.pack_forget()
    w = c.frame.body.bodyCtrl
    w.pack(side='left',expand=1,fill='both')
</t>
<t tx="ekr.20101011165412.5105">The following replaces the outline pane with a red frame::

    import Tkinter as Tk

    w = c.frame.tree.canvas
    parent =  w.pack_info().get('in')
    w.pack_forget()

    f = c.frame.newTree = Tk.Frame(parent,background='red')
    f.pack(side='left',expand=1,fill='both')

And this script restores the outline::

    c.frame.newTree.pack_forget()
    c.frame.tree.canvas.pack(side='left',expand=1,fill='both')
</t>
<t tx="ekr.20101011165412.5106">Scripts can easily determine what directives are in effect at a particular
position in an outline. c.scanAllDirectives(p) returns a Python dictionary whose
keys are directive names and whose values are the value in effect at position p.
For example::

    d = c.scanAllDirectives(p)
    g.es(g.dictToString(d))

In particular, d.get('path') returns the full, absolute path created by all
\@path directives that are in ancestors of node p. If p is any kind of @file node
(including @thin, @auto, @nosent, @shadow, etc.), the following script will
print the full path to the created file::

    path = d.get('path')
    name = p.anyAtFileNodeName()
    if name:
       name = g.os_path_finalize_join(path,name)
       g.es(name)
</t>
<t tx="ekr.20101011165412.5107" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343322206e616d653d22687474702d6e6f64652d6d61726b65722d3433223e710158040000003c2f613e71025d710328583a0000003c64697620636c6173733d2273656374696f6e222069643d227265646972656374696e672d6f75747075742d66726f6d2d73637269707473223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558070000003c2f6469763e0a710f58450000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e0a7110588c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323222206e616d653d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e53756d6d617279206f662074686520766e6f646520616e6420706f736974696f6e20636c61737365733c2f613e3c2f68313e0a7111652e">Most scripts will use methods of the position class to access information in an
outline. The following sections summarizes the most useful methods that your
scripts can use. For a complete list, see the leoNodes.py in of LeoPy.leo.
</t>
<t tx="ekr.20101011165412.5108" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343522206e616d653d22687474702d6e6f64652d6d61726b65722d3435223e710158040000003c2f613e71025d71032858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e710458060000003c2f6469763e71055d710628583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710758060000003c2f6469763e71085d71092858060000003c626f64793e710a58070000003c2f626f64793e710b5d710c2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e710d58070000003c2f68746d6c3e710e4e6565656558250000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e0a710f584c0000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323322206e616d653d226974657261746f7273223e4974657261746f72733c2f613e3c2f68323e0a7110652e">Here is the list of Leo's generators::

    c.all_nodes             # all vnodes in c.
    c.all_unique_nodes      # all unique vnodes in c.
    c.all_positions         # all positions in c.
    c.all_unique_positions  # all unique positions in c.

    p.children              # all children of p.
    p.following_siblings    # all siblings of p that follow p.
    p.nodes                 # all vnodes in p's subtree.
    p.parents               # all parents of p.
    p.self_and_parents      # p and all parents of p.
    p.siblings              # all siblings of p, including p.
    p.subtree               # all positions in p's subtree, excluding p.
    p.self_and_subtree      # all positions in p's subtree, including p.
    p.unique_nodes          # all unique vnodes in p's subtree.
    p.unique_subtree        # all unique positions in p's subtree.

**Note**: A generator that returns **unique positions** is a generator that returns
a list of positions such that p.v == v at most once for any vnode v.
Similarly, a generator that returns **unique nodes** is a generator that returns
a list that contains any vnode at most once.

**Note**: The names given above are the recommended names for Leo's generators.
Leo continues to support the names of iterators used before Leo 4.7.
These names typically end with the _iter suffix.
</t>
<t tx="ekr.20101011165412.5109" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343722206e616d653d22687474702d6e6f64652d6d61726b65722d3437223e710158040000003c2f613e71025d71032858240000003c64697620636c6173733d2273656374696f6e222069643d226974657261746f7273223e710458060000003c2f6469763e71055d71062858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258230000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e0a711358480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323422206e616d653d2267657474657273223e476574746572733c2f613e3c2f68323e0a7114652e">Here are the most useful getters of the vnode and position classes.

Returning strings::

    p.b # the body string of p.
    p.h # the headline string of p. A property.

Returning ints::

    p.childIndex()
    p.numberOfChildren()
    p.level()

Returning bools representing property bits::

    p.hasChildren()
    p.isAncestorOf(v2) # True if v2 is a child, grandchild, etc. of p.
    p.isCloned()
    p.isDirty()
    p.isExpanded()
    p.isMarked()
    p.isVisible()
    p.isVisited()
</t>
<t tx="ekr.20101011165412.5110" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d343922206e616d653d22687474702d6e6f64652d6d61726b65722d3439223e710158040000003c2f613e71025d71032858220000003c64697620636c6173733d2273656374696f6e222069643d2267657474657273223e710458060000003c2f6469763e71055d71062858440000003c64697620636c6173733d2273656374696f6e222069643d2273756d6d6172792d6f662d7468652d766e6f64652d616e642d706f736974696f6e2d636c6173736573223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258230000003c64697620636c6173733d2273656374696f6e222069643d2273657474657273223e0a711358480000003c68323e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964323522206e616d653d2273657474657273223e536574746572733c2f613e3c2f68323e0a7114652e">Here are the most useful setters of the Commands and position classes.
The following setters of the position class regardless of whether
p is the presently selected position::

    c.setBodyString(p,s)  # Sets the body text of p.
    c.setHeadString(p,s)  # Sets the headline text of p.

Moving nodes::

    p.moveAfter(v2)           # move p after v2
    p.moveToNthChildOf(v2,n)  # move p to the n'th child of v2
    p.moveToRoot(oldRoot)     # make p the root position.
                              # oldRoot must be the old root position if it exists.

The "visited" bit may be used by commands or scripts for any purpose.
Many commands use this bits for tree traversal, so these bits do not persist::

    c.clearAllVisited() # Clears all visited bits in c's tree.
    p.clearVisited()
    p.setVisited()
</t>
<t tx="ekr.20101011165412.5111">Creating a script button should be your first thought whenever you want to
automate any task. The scripting plugin, mod_scripting.py, puts two buttons
in the icon menu, a pink Run Script button and a yellow Script Button
button. The Run Script button does the same thing as the Execute Script
command. The Script Button button is the interesting one. It creates a
button, confusingly called a **script button** in the icon area. A script button
executes a script when you push it.

Suppose node N is selected. When you press the Script Button button a new
(pink) script button is created. The name of the new button is N's headline
text. The script associated with the new button is N's body text. Now whenever
you press the new button, N's script is executed on the **presently** selected
node. Script buttons are extraordinarily useful. In effect, each script button
defines an instant command! For example, sometimes my fingers get tired of
saving a file. I simply put Save in a node's headline and c.save() in
the body text. I hit the Script Button button and I get a new button called
Save that will save the outline when I press it.

Here's a more interesting example. The following script searches the present
node and its ancestors looking for an @rst node. When such a node is found the
script uses Leo's core c.rstCommands.processTree method to format it. I don't have
to select the actual \@rst node; I can select any of its children::

    for p in p.self_and_parents():
        if p.h.startswith('@rst '):
            c.rstCommands.processTree(p)
            break

**Notes**:

- The scripting plugin pre-defines the c, g and p symbols just as the Execute
  Script command does.

- By default a script button executes the **present** body text of the node that
  original created the script button. This is very handy: you can modify a
  script button's script at any time without having to recreate the script
  button.

- You can delete any script button by right-clicking on it.

- On startup, the scripting plugin scans the entire .leo file and creates a
  script button for every node whose headline starts with @button scriptName.
  **Warning**: this is indeed a security risk of the kind discussed later. This
  feature can be disabled by setting atButtonNodes = True at the start of
  mod_scripting.py.
</t>
<t tx="ekr.20101011165412.5112" rst_http_attribute="5d71002858460000003c6120636c6173733d22746172676574222069643d22687474702d6e6f64652d6d61726b65722d333722206e616d653d22687474702d6e6f64652d6d61726b65722d3337223e710158040000003c2f613e71025d71032858260000003c64697620636c6173733d2273656374696f6e222069643d22672d726566696e64616c6c223e710458060000003c2f6469763e71055d710628584f0000003c64697620636c6173733d2273656374696f6e222069643d2266756e6374696f6e732d666f722d66696e64696e672d616e642d6368616e67696e672d746578742d66726f6d2d73637269707473223e710758060000003c2f6469763e71085d710928583f0000003c64697620636c6173733d22646f63756d656e74222069643d22636861707465722d372d736372697074696e672d6c656f2d776974682d707974686f6e223e710a58060000003c2f6469763e710b5d710c2858060000003c626f64793e710d58070000003c2f626f64793e710e5d710f2858430000003c68746d6c20786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c2220786d6c3a6c616e673d22656e22206c616e673d22656e223e711058070000003c2f68746d6c3e71114e656565656558070000003c2f6469763e0a711258070000003c2f6469763e0a711358350000003c64697620636c6173733d2273656374696f6e222069643d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e0a7114586c0000003c68313e3c6120636c6173733d22746f632d6261636b7265662220687265663d22236964313922206e616d653d2272756e6e696e672d6c656f2d696e2d62617463682d6d6f6465223e52756e6e696e67204c656f20696e206261746368206d6f64653c2f613e3c2f68313e0a7115652e">On startup, Leo looks for two arguments of the form::

    --script scriptFile

If found, Leo enters batch mode. In batch mode Leo does not show any windows.
Leo assumes the scriptFile contains a Python script and executes the contents of
that file using Leo's Execute Script command. By default, Leo sends all
output to the console window. Scripts in the scriptFile may disable or enable
this output by calling app.log.disable or app.log.enable

Scripts in the scriptFile may execute any of Leo's commands except the Edit Body
and Edit Headline commands. Those commands require interaction with the user.
For example, the following batch script reads a Leo file and prints all the
headlines in that file::

    path = r"c:\prog\leoCVS\leo\test\test.leo"

    g.app.log.disable() # disable reading messages while opening the file
    flag,newFrame = g.openWithFileName(path,None)
    g.app.log.enable() # re-enable the log.

    for p in newFrame.c.all_positions():
        g.es(g.toEncodedString(p.h,"utf-8"))
</t>
<t tx="ekr.20101011165412.5113">The following code can be run from a script to get input from the user using the minibuffer::

    def getInput (event=None):

       stateName = 'get-input'
       k = c.k
       state = k.getState(stateName)

       if state == 0:
           k.setLabelBlue('Input: ',protect=True)
           k.getArg(event,stateName,1,getInput)
       else:
           k.clearState()
           g.es_print('input: %s' % k.arg)

    getInput()

Let's look at this in detail.  The lines::

    stateName = 'get-input'
    k = c.k
    state = k.getState(stateName)

define a state *name*, 'get-input', unique to this code.
k.getState returns the present state (an int) associated with this state.

When getInput() is first called, the state returned by k.getState will be 0,
so the following lines are executed::

    if state == 0:
        k.setLabelBlue('Input: ',protect=True)
        k.getArg(event,stateName,1,getInput)

These lines put a protected label in the minibuffer:
the user can't delete the label by backspacing.
getArg, and the rest of Leo's key handling code, take care of the extremely
complex details of handling key strokes in states.
The call to getArg never returns.
Instead, when the user has finished entering the input by typing &lt;Return&gt;
getArg calls getInput so that k.getState will return state 1, the value
passed as the third argument to k.getArg.
The following lines handle state 1::

    else:
        k.clearState()
        g.es_print('input: %s' % k.arg)

k.arg is the value returned by k.getArg.
This example code just prints the value of k.arg and clears the input state.
</t>
<t tx="ekr.20101011165412.5114">You can use the @g.command decorator to create new commands. This is an easy-to-use
wrapper for c.k.registerCommand(), with the following advantages over it:

* The new command is automatically created for all Leo controllers (open Leo documents).

* The new command is also automatically available on all new Leo controllers 
  (documents that will be opened in the future).

* Prettier syntax.

Therefore, @g.command can be naturally 
prototyped with execute-script (Ctrl+b) in Leo node.

As an example, you can execute this script to make command hello available::

    @g.command('hello')
    def hello_f(event):
        # use even['c'] to access controller
        c = event['c']
        pos = c.currentPosition()
        g.es('hello from', pos.h)

If you want to create a plugin that only exposes new commands, this is basically all you need in the plugins .py file.
There is no need to hook up for 'after-create-leo-frame' just to make your commands available.

If you want to create a command in object oriented style (so that the commands deal with your own objects), 
create them using closures like this (note how self is available inside command functions)::

    class MyCommands:
        def create(self):        
            @g.command('foo1')
            def foo1_f(event):
               self.foo = 1

            @g.command('foo2')
            def foo2_f(event):
               self.foo = 2

            @g.command('foo-print')
            def foo_print_f(event):
               g.es('foo is', self.foo)

    o = MyCommands()
    o.create()

Note that running create() in this example in `after-create-leo-frame` is pointless - the
newly created commands will override the commands in all previous controllers. You should consider 
this in your plugin design, and create your commands only once per Leo session.
</t>
<t tx="ekr.20101011165412.5115">The mod_scripting plugin runs @scripts before plugin initiation is complete.
Thus, such scripts can not directly modify plugins. Instead, a script can create
an event handler for the after-create-leo-frame that will modify the plugin.

For example, the following modifies the cleo.py plugin after Leo has completed loading it::

    def prikey(self, v):
        try:
            pa = int(self.getat(v, 'priority'))
        except ValueError:
            pa = -1

        if pa == 24:
            pa = -1
        if pa == 10:
            pa = -2

        return pa

    import types
    from leo.core import leoPlugins

    def on_create(tag, keywords):
        c.cleo.prikey = types.MethodType(prikey, c.cleo, c.cleo.__class__)

    leoPlugins.registerHandler("after-create-leo-frame",on_create)

Attempting to modify c.cleo.prikey immediately in the @script gives an
AttributeError as c has no .cleo when the @script is executed. Deferring it by
using registerHandler() avoids the problem.
</t>
<t tx="ekr.20101011165412.5154">@language python

# **Important**
#   Before running this script you must create bzr-manifest as follows::
#       cd to trunk
#       bzr ls -R &gt;bzr-manifest.txt

'''Create the installer script using bzr-manifest.txt.'''

import os,string,sys
&lt;&lt; define version &gt;&gt;
&lt;&lt; define inLeo &gt;&gt;

if inLeo:
    # The root directory contains the leo directory.
    rootDir  = g.os_path_finalize_join(g.app.loadDir,'..','..')
    manifest = g.os_path_finalize_join(rootDir,'bzr-manifest.txt')
else:
    rootDir = os.path.abspath(os.curdir)
    manifest = os.path.normpath(os.path.join(rootDir,'bzr-manifest.txt'))

&lt;&lt; define application constants &gt;&gt;
@others

nsi = nsiWriter()
nsi.run(manifest)
</t>
<t tx="ekr.20101011165412.5155"># Used by both @button make leo.nsi and @button make leo.zip.
app_version = version = '4.8-d1'</t>
<t tx="ekr.20101011165412.5156">try:
    inLeo = g is not None
except AttributeError:
    inLeo = False

# print('inLeo',inLeo)
</t>
<t tx="ekr.20101011165412.5157">app_doc_icon = r'Icons\LeoDoc.ico'
app_extension = '.leo'
app_hkey_local_machine = r'SOFTWARE\EKR\leo'
app_icon = r"%s\leo\Icons\leo_inst.ico" % rootDir
app_icon2 = r'leo\Icons\LeoApp.ico' # Relative to install dir.
app_license = r'%s\License.txt' % rootDir
app_lower_case_name = 'leo'
app_name = 'Leo'
app_publisher = 'Edward K. Ream'
app_python_executable = 'launchLeo.py'
app_uninst_key = r"Software\Microsoft\Windows\CurrentVersion\Uninstall\leo"
app_uninst_root_key = 'HKLM'
app_web_site = 'http://webpages.charter.net/edreamleo/front.html'

nsi_name = 'leo-%s.nsi' % app_version
target_file = 'LeoSetup-%s.exe' % app_version

substitutionDict = {
    'doc_icon': app_doc_icon,
    'ext': app_extension,
    'exe': app_python_executable,
    'hkey_local_machine': app_hkey_local_machine,
    'icon': app_icon,
    'icon2': app_icon2,
    'license': app_license,
    'lower_name': app_lower_case_name,
    'name': app_name,
    'nsi_name': nsi_name,
    'publisher': app_publisher,

    'site': app_web_site,
    'target_file': target_file,
    'uninst_key': app_uninst_key,
    'uninst_root_key': app_uninst_root_key,
    'version': app_version,
    # Leave these unchanged.
    'DESKTOP': '$DESKTOP',
    'INSTDIR': '$INSTDIR',
    'NSISDIR': '${NSISDIR}',
    'PROGRAMFILES': '$PROGRAMFILES',
    'PythonExecutable': '$PythonExecutable',
    'SMPROGRAMS': '$SMPROGRAMS'
}
</t>
<t tx="ekr.20101011165412.5158">class nsiWriter:

    '''A class to write .nsi scripts.'''

    @others
</t>
<t tx="ekr.20101011165412.5159">def genScript (self,dirs,dirDict,filesDict):

    '''Generate the .nsi installer script.'''

    self.f = f = self.openNsi()
    if not f: return

    try:
        self.genHead()
        self.genInstallData(dirs,dirDict,filesDict)
        self.genMiddle()
        self.genUninstallData(dirs,dirDict,filesDict)
    finally:
        f.close()

    g.es_print('make-leo-nsi done. no errors')
</t>
<t tx="ekr.20101011165412.5160">def genHead (self):

    '''Generate the boilerplate appearing before
    the manifest-specific install data.'''

    self.put('!include MUI2.nsh\n')
    self.putSettings()
    self.putOnInit()</t>
<t tx="ekr.20101011165412.5161">def putSettings (self):

    s = r'''
; Location of Pythonw.exe. Set by .onInit.
var PythonExecutable

SetCompressor bzip2
Caption "${name} Installer"
AutoCloseWindow false 
SilentInstall normal
CRCCheck on ; FIXME shouldn't this be CRCCheck force ? Why give user option of using corrupted installer?
SetCompress auto ; FIXME this is disabled for solid compression, which comes with BZip2 and LZMA compression
SetDatablockOptimize on
; SetOverwrite ifnewer
WindowIcon off
OutFile "${target_file}"
LoadLanguageFile "${NSISDIR}\Contrib\Language files\English.nlf"
; Default location.  May be changed in .onInit.
InstallDir "${PROGRAMFILES}\${name}-${version}"
Icon "${icon}"
DirText "Setup will install ${name}-${version} in the following folder. $$\n\
To install in a different folder, click Browse and select another folder."
LicenseText "You must accept the agreement to install ${name}-${version}."
LicenseData "${license}"
ShowInstDetails show
ShowUnInstDetails show

'''
    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5162">def putOnInit (self):

    s = r'''

; Set PythonExecutable to full path to Pythonw.exe.
Function .onInit
    ReadRegStr $9 HKLM "SOFTWARE\Python\PythonCore\2.6\InstallPath" ""
    StrCmp $9 "" tryPython31 ok

tryPython31:
    ReadRegStr $9 HKLM "SOFTWARE\Python\PythonCore\3.1\InstallPath" ""
    StrCmp $9 "" oops ok

oops:
    MessageBox MB_OK "Python not found: using c:\python26"
    ; Guess where Python 26 is.
    StrCpy $PythonExecutable "c:\Python26\pythonw.exe"
    ; Fallback installation directory is "Program Files"
    Goto done
ok:
    MessageBox MB_OK "Found Python at $9"
    StrCpy $PythonExecutable "$9\pythonw.exe"
    ; Normal installation directory 
    StrCpy $INSTDIR "$9\Lib\site-packages\${name}-${version}"
done:

; End .onInit
FunctionEnd
'''
    s = s.replace('${name}',app_name).replace('${version}',app_version)
    self.put(s,substitute=False)
</t>
<t tx="ekr.20101011165412.5163">def genInstallData(self,dirs,dirDict,filesDict):

    '''Generate the manifest-specific install data.'''

    self.put('\nSection "%s" SEC01\n\n' % (app_name))

    self.put(self.getInstallVariableData(
        dirs,dirDict,filesDict),adjust=False)

    self.put('\n; end %s section\n' % (app_name))
    self.put('SectionEnd\n')
</t>
<t tx="ekr.20101011165412.5164">def getInstallVariableData (self,dirs,dirDict,filesDict):

    global rootDir
    result = []

    # Top level
    theDir = '**top'
    result.append('; top-level\n')
    result.append('SetOutPath "$INSTDIR"\n')
    result.append('SetOverwrite ifnewer\n')
    aList = dirDict.get(theDir,[])
    for fn in aList:
        result.append('File "%s"\n' % fn)

    for theDir in dirs:
        if theDir != '**top':
            aList = dirDict.get(theDir,[])
            if aList:
                theDir2 = theDir.replace('/','\\').rstrip('\\')
                result.append('\n')
                result.append('SetOutPath $INSTDIR\\%s\n' % theDir2)
                for fn in aList:
                    # Fix bug 425369: quote file names.
                    result.append('File "%s\\%s\\%s"\n' % (
                        rootDir,theDir2,fn))

    result = [self.indent(z) for z in result]
    return ''.join(result)
</t>
<t tx="ekr.20101011165412.5165">def genMiddle (self):

    '''Generate the boilerplate appearing between
    the manifest-specific install data and
    the manifest-specific uninstall data.'''

    self.genMenuShortcuts()
    self.genDesktopShortcuts()
    self.genFileAssociation()
    self.genAdditionalIcons()
    self.genPost()
    self.genUninstallSettings()
    self.genMiddleFunctions()
</t>
<t tx="ekr.20101011165412.5166">def genAdditionalIcons(self):

    s = r'''
Section -AdditionalIcons
  SetOutPath $INSTDIR
  CreateDirectory "${SMPROGRAMS}\${name}"
  CreateShortCut "${SMPROGRAMS}\${name}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd
'''

    self.put(s,substitute=True)</t>
<t tx="ekr.20101011165412.5167">def genDesktopShortcuts(self):

    s = r'''
Section "Desktop Shortcut" SEC03
  CreateShortCut "${DESKTOP}\${name}.lnk" '"${PythonExecutable}"' '"$INSTDIR\${exe}"' "$INSTDIR\${icon2}" 0
SectionEnd
'''

    self.put(s,substitute=True)</t>
<t tx="ekr.20101011165412.5168">def genFileAssociation(self):

    s = r'''
Section "${ext} File Association"
  SectionIn 1
  SectionIn 2
  SectionIn 3

  # back up old value of extension in case some other program was using it
  ReadRegStr $$1 HKCR "${ext}" ""
  StrCmp $$1 "" Label1
  StrCmp $$1 "${name}File" Label1
  WriteRegStr HKCR "${ext}" "backup_val" $$1

Label1:
  WriteRegStr HKCR "${ext}" "" "${name}File"
  WriteRegStr HKCR "${name}File" "" "${name} File"
  WriteRegStr HKCR "${name}File\shell" "" "open"
  WriteRegStr HKCR "${name}File\DefaultIcon" "" ${INSTDIR}\${doc_icon}
  WriteRegStr HKCR "${name}File\shell\open\command" "" '"${PythonExecutable}" "${INSTDIR}\${exe}" "%1"'

SectionEnd
'''

    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5169">def genMenuShortcuts (self):

    s = r'''
; FIXME $SMPROGRAMS depends on the value of SetShellVarContext. Since that defaults to 'current'
; that means that this installer will make the app available for the current user only.
; Unless I am grossly mistaken this is a needless hindrance, and a Bad Thing since
; security concerns are such that it would be best to not run the app with the Administrator privileges
; of the account used to install the software.
;
; Sure enough, the Start Menu Shortcuts and Desktop Shortcut work for the installer account only. 
;
; Question is -- do we want the app always available for any log-in on this computer?
;
; My guesses:
; Ideally, Uninstall.lnk should appear only for the current user, and the uninstaller should refuse to run
; if run by a user who lacks Admin privileges on Windows NT and its descendants
;
; How will Windows XP Home deal with that? 

Section "Start Menu Shortcuts" SEC02
    CreateDirectory "${SMPROGRAMS}\${name}"
    CreateShortCut "${SMPROGRAMS}\${name}\Uninstall.lnk" "${INSTDIR}\uninst.exe" "" "${INSTDIR}\uninst.exe" 0
    CreateShortCut "${SMPROGRAMS}\${name}\${name}.lnk" '"${PythonExecutable}"' '"${INSTDIR}\${exe}"' "${INSTDIR}\${icon2}" 0
SectionEnd
'''

    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5170">def genMiddleFunctions (self):

    s = r'''
Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "${name}-${version} was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 \
  "Are you sure you want to completely remove ${name}-${version} and all of its components?" IDYES +2
  Abort
FunctionEnd
'''

    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5171">def genPost (self):

    s = r'''
Section -Post
  WriteRegStr HKEY_LOCAL_MACHINE "${hkey_local_machine}" "" "$INSTDIR"
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${uninst_root_key} "${uninst_key}" "DisplayName" "${name}-${version} (remove only)"
  WriteRegStr ${uninst_root_key} "${uninst_key}" "UninstallString" "${INSTDIR}\uninst.exe"
  WriteRegStr ${uninst_root_key} "${uninst_key}" "DisplayVersion" "${version}"
  WriteRegStr ${uninst_root_key} "${uninst_key}" "URLInfoAbout" "${site}"
  WriteRegStr ${uninst_root_key} "${uninst_key}" "Publisher" "${publisher}"
SectionEnd
'''

    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5172">def genUninstallSettings(self):

    path = g.os_path_finalize_join(
        g.app.loadDir,'..','Icons','uninst.ico')

    s = r'''
UninstallCaption "Uninstall ${name}"
UninstallIcon "${path}"
'''

    s = s.replace('${path}',path)
    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5173">def genUninstallData(self,dirs,dirDict,filesDict):

    '''Generate the manifest-specific uninstall data.'''

    s = r'''
Section Uninstall

    DeleteRegKey HKEY_LOCAL_MACHINE "${hkey_local_machine}"

    ; Delete files &amp; directories only if we own them!
    ReadRegStr $$1 HKCR "${ext}" ""
    StrCmp $$1 "${name}File" 0 FinishUninstall

    ; Delete files &amp; directories only if there is no backup_val key.
    ReadRegStr $$1 HKCR "${ext}" "backup_val"
    StrCmp $$1 "" 0 DeleteLeoKeysAndFiles
      DeleteRegKey HKCR "${ext}"
    Goto FinishUninstall

DeleteLeoKeysAndFiles:
    WriteRegStr HKCR "${ext}" "" $$1
    DeleteRegValue HKCR "${ext}" "backup_val"

    ; ---- Start of manifest-related data...
'''

    self.put(s,substitute=True)

    # Does all the hard work.
    self.put(
        self.getUninstallVariableData(dirs,dirDict,filesDict),
        adjust = False)

    s = r'''
    ; ---- End of manifest related data.

FinishUninstall:
    ; MessageBox MB_YESNO|MB_ICONQUESTION \
    ;    "Delete all files in ${INSTDIR}?" IDNO NoDelete
; NoDelete:

  Delete "${SMPROGRAMS}\${name}\Uninstall.lnk"
  RMDir "${SMPROGRAMS}\${name}-${version}"
  Delete "${DESKTOP}\${name}.lnk"

  DeleteRegKey ${uninst_root_key} "${uninst_key}"
  SetAutoClose false

; end Uninstall section
SectionEnd
'''

    self.put(s,substitute=True)
</t>
<t tx="ekr.20101011165412.5174">def getDeleteDirectories (self,dirs,dirDict):

    reverseDirs = dirs[:]
    reverseDirs.reverse()

    result = []
    result.append('; Uninstall directories in reverse order\n')
    for theDir in reverseDirs:
        # Delete the directory even if it has no files.
        if theDir and theDir != '**top':
            if not theDir.startswith('.bzr'):
                result.append('RMDir "$INSTDIR\\%s"\n' % (
                    theDir.replace('/','\\')))

    # top-level folder.
    result.append('RMDir "$INSTDIR"\n')

    result = [self.indent(z) for z in result]
    return ''.join(result)
</t>
<t tx="ekr.20101011165412.5175">def getDeleteFiles (self,dirs,dirDict,filesDict):

    wildcard_delete = True
    result = []
    result.append('; Uninstall files...\n\n')

    # top-level files.
    result.append('; Delete top-level files...\n')
    aList = dirDict.get('**top',[])
    # special case.
    aList.append('uninst.exe')
    # Warning: **never** delete all files in the top-level directory.
    for fn in aList:
        result.append('Delete "$INSTDIR\\%s"\n' % fn)
    if wildcard_delete:
        result.append('\n')

    for theDir in dirs:
        if theDir:
            dir2 = theDir.replace('/','\\')
            if wildcard_delete:
                result.append('Delete "$INSTDIR\\%s\\*.*"\n' % (dir2))
            else:
                aList = dirDict.get(theDir,[])
                if aList:
                    result.append('\n')
                    result.append('Delete "$INSTDIR\\%s\\*.pyc"\n' % (dir2))
                    result.append('Delete "$INSTDIR\\%s\\*.pyo"\n' % (dir2))
                for fn in aList:
                    result.append('Delete "$INSTDIR\\%s\\%s"\n' % (
                        dir2,fn))

    result = [self.indent(z) for z in result]
    return ''.join(result)
</t>
<t tx="ekr.20101011165412.5176">def getUninstallVariableData(self,dirs,dirDict,filesDict):

    s1 = self.getDeleteFiles(dirs,dirDict,filesDict)
    s2 = self.getDeleteDirectories(dirs,dirDict)
    return '%s\n%s' % (s1,s2)
</t>
<t tx="ekr.20101011165412.5177">def indent(self,s):

    if s.strip():
        return '    ' + s
    else:
        return s
</t>
<t tx="ekr.20101011165412.5178">def openNsi (self):

    path = g.os_path_finalize_join(
        g.app.loadDir,'..','..',nsi_name)

    try:
        f = open(path,'w')
    except IOError:
        f = None
        g.es_print('Can not open',path,color='red')

    return f
</t>
<t tx="ekr.20101011165412.5179">def put (self,s,adjust=True,substitute=False):

    '''Output s to the nsi file, optionally making
    the substitutions given in substitutionDict.'''

    trace = False
    if adjust:
        s = self.adjustTripleString(s)

    if substitute:
        if 0:
            n = 1
            for z in g.splitLines(s):
                print('%3s %s' % (n,z.rstrip()))
                n += 1
        s = string.Template(s)
        s = s.substitute(substitutionDict)

    if trace: g.trace(s,g.callers(4))
    self.f.write(s)
</t>
<t tx="ekr.20101011165412.5180">def run (self,fn):

    '''The top-level logic.'''

    # Create and filter the list of files from the manifest.
    s = open(fn).read()
    lines = g.splitLines(s)
    files = self.filterLines(lines)

    # Compute the list of all the directories.
    dirs = self.directoryList(rootDir)

    # Compute dictionaries of directories and files.
    dirDict,filesDict = self.makeDicts(dirs,files)

    # Print manifest lines not in either dict.
    # This is a crucial check.
    errors = self.printMissing(files,dirDict,filesDict)
    if errors: return

    # Generate the script!
    self.genScript(dirs,dirDict,filesDict)
</t>
<t tx="ekr.20101011165412.5181">def directoryList (self,rootDir):

    '''Compute a top-down list of all directories.
       These directories start at the top-level directory.'''

    trace = False
    ignoreDirs = ('.bzr',)
    # Important: this adds all directories on EKR's machine,
    # regardless of whether they appear in the manifest!
    result = [] ; n = len(rootDir)
    for z in os.walk(rootDir): # top-down traversal.
        dirpath, dirnames, filenames = z
        assert dirpath.startswith(rootDir),z
        if len(dirpath) &gt; n:
            path = dirpath[n+1:].replace('\\','/')
            result.append(path)
    for z2 in ignoreDirs:
        result = [ z for z in result if not z.startswith(z2)]
    if trace:
        g.trace('-' * 40)
        g.trace(g.listToString(result))
    return result
</t>
<t tx="ekr.20101011165412.5182">def filterLines (self,lines):

    '''Filter lines from the input manifest file.'''

    trace = False

    # Remove blank lines, comments, and .pyc and .pyo files.
    lines = self.deleteBlankLines(lines)
    lines = self.deleteComments(lines)
    lines = self.deleteExt(lines,'.pyc')
    lines = self.deleteExt(lines,'.pyo')
    lines = self.deleteExt(lines,'.zip') # Don't include the zip file.
    lines = self.deleteExt(lines,'.exe') # Don't include the installer.

    # Remove specific files.
    deleteList = (
        '.bzrignore',
        'bzr-manifest.txt',
        'bzr-small-manifest.txt',
        'setup.py',
        'leo/test/unittest/.leo_shadow/',
        'nsi.log.txt', # Can't write log while we are creating it.
        'leo/core/leoPy.leo',
        'leo/core/ekrLeoPy.leo',
    )
    lines = self.deleteFiles(lines,deleteList)
    if lines and lines[0].endswith('bzr ls -R'):
        lines = lines[1:]

    if trace:
        g.trace('=' * 40)
        g.trace(g.listToString(lines))

    return lines
</t>
<t tx="ekr.20101011165412.5183">def deleteBlankLines (self,lines):

    return [z.strip() for z in lines if z.strip()]

def deleteComments (self,lines):

    return [z for z in lines if not z.startswith('#')]

def deleteExt (self,lines,ext):

    return [z for z in lines if not z.endswith(ext)]

def deleteFiles (self,lines,deleteList):

    return [z for z in lines if not z in deleteList]
</t>
<t tx="ekr.20101011165412.5184">def makeDicts (self,dirs,lines):

    trace = False ; verbose = False

    # Create the dirDict.
    # Keys are directories.
    # Values are files contained in each directory.
    dirDict = {}
    dirDict['**top'] = [] # Create an entry for the root directory.
    for z in dirs:
        dirDict[z] = []

    # Assign files to dirDict.
    for line in lines:
        line = line.strip().replace('\\','/')
        if line in dirDict.keys():
            path,fn = None,None
        elif line.startswith('leo/'):
            path,fn = g.os_path_split(line)
        else:
            path,fn = '**top',line.strip()

        # Don't include top-level leo directory,
        # Do include leo/scripts/leo file.
        if fn and (path != '**top**' or fn != 'leo'):
            aList = dirDict.get(path,[])
            assert line not in aList,repr(line)
            aList.append(fn)
            dirDict[path]=aList

    for theDir in sorted(dirDict):
        aList = dirDict.get(theDir)
        if aList and trace:
            if verbose:
                print() ; print(theDir)
                print(g.listToString(aList))
            else:
                print(theDir)

    # Create the inverse dict.
    filesDict = {}
    for theDir in sorted(dirDict):
        aList = dirDict.get(theDir)
        for fn in aList:
            path = g.choose(theDir=='**top',
                fn,'%s/%s' % (theDir,fn))
            filesDict[path] = theDir

    return dirDict,filesDict
</t>
<t tx="ekr.20101011165412.5185">def printMissing (self,files,dirDict,filesDict):

    errors = 0

    for fn in files:
        fn = fn.rstrip('/')
        if fn and fn not in dirDict and fn not in filesDict:
            g.es_print('missing',fn,color='red')
            errors += 1

    if errors:
        g.es_print('%s errors' % (errors),color='red')

    return errors
</t>
<t tx="ekr.20101011165412.5186"># These are adapted from the corresponding functions in leoPy.leo
# They are defined here to make this script independent of Leo</t>
<t tx="ekr.20101011165412.5187">def adjustTripleString (self,s):

    '''Remove leading indentation from a triple-quoted string.'''

    # Compute the minimum leading whitespace of all non-blank lines.
    lines = self.splitLines(s)
    w = 0 ; val = -1
    for line in lines:
        if line.strip():
            lws = self.get_leading_ws(line)
            w2 = self.computeWidth(lws)
            # The sign of w does not matter.
            if w == 0 or abs(w2) &lt; w:
                w = abs(w2)

    if w == 0: return s

    # Remove the leading whitespace.
    result = [self.removeLeadingWhitespace(line,w) for line in lines]
    result = ''.join(result)
    return result
</t>
<t tx="ekr.20101011165412.5188">def get_leading_ws(self,s):

    """Returns the leading whitespace of 's'."""

    i = 0 ; n = len(s)
    while i &lt; n and s[i] in (' ','\t'):
        i += 1
    return s[0:i]
</t>
<t tx="ekr.20101011165412.5189">def computeWidth (self,s):

    '''Return the width of s, assuming s starts a line.'''

    tabwidth = 4
    w = 0
    for ch in s:
        if ch == '\t':
            w += tab_width - (w % tab_width)
        else:
            w += 1
    return w
</t>
<t tx="ekr.20101011165412.5190">def removeLeadingWhitespace (self,s,first_ws):

    '''Remove whitespace up to first_ws wide in s.'''

    j = 0 ; ws = 0
    tabwidth = 4
    first_ws = abs(first_ws)
    for ch in s:
        if ws &gt;= first_ws:
            break
        elif ch == ' ':
            j += 1 ; ws += 1
        elif ch == '\t':
            j += 1 ; ws += tab_width - (ws % tab_width)
        else: break
    if j &gt; 0:
        s = s[j:]
    return s
</t>
<t tx="ekr.20101011165412.5191">def splitLines (self,s):

    '''Split s into lines, preserving the number of lines and the ending of the last line.'''

    return s and s.splitlines(True) or []
</t>
<t tx="ekr.20101011165412.5192"></t>
<t tx="ekr.20101011165412.5195">This section describe the format of external files.
Leo's `sentinel lines`_ are comments, and this section describes those comments.

The format of external files produced by Leo 4.0 and later meets the following goals:

- The minimum of sentinels needed to properly recreate the outline.

- A robust way of telling whether newlines belong to sentinels or not.
  Prior to Leo 4.0, deleting blank lines before and after sentinel lines
  could corrupt the outline structure of the external file.

- A minimum of intrusion and ugliness.

**New in Leo 4.2**:
Files derived from @thin use gnx's in @+node and @-node sentinels.
Such gnx's permanently and uniquely identify nodes.
Gnx's have the form::

    id.yyyymmddhhmmss
    id.yyyymmddhhmmss.n

The second form is used if two gnx's would otherwise be identical.

- id is a string unique to a developer, e.g., a cvs id.

- yyyymmddhhmmss is the node's creation date.

- n is an integer.

Here are the sentinels used by Leo, in alphabetical order.
Unless otherwise noted, the documentation applies to all versions of Leo.
In the following discussion, gnx denotes a gnx as described above.

\@&lt;&lt;
    A sentinel of the form @&lt;&lt;section_name&gt;&gt; represents a section reference.

    If the reference does not end the line,
    the sentinel line ending the expansion is followed by the remainder of the reference line.
    This allows the Read code to recreate the reference line exactly.

\@@
    The @@ sentinel represents any line starting with @ in body text
    except @*whitespace*, @doc and @others.
    Examples::

      @@nocolor
      @@pagewidth 80
      @@tabwidth 4
      @@code

\@afterref **(Leo 4.0 and later)**
    Marks non-whitespace text appearing after a section references.

\@+all **(Leo 4.0 and later)**
    Marks the start of text generated by the @all directive.

\@-all **(Leo 4.0 and later)**
    Marks the end of text generated by the @all directive.

\@at and \@doc
    The @+doc and @-doc sentinels delimit doc parts within a node that starts with @doc.
    These sentinels are nested within @body directives.
    Similarly, @+at and @-at sentinels delimit doc parts within a node that start with @ *whitespace*.
    We use the following **trailing whitespace convention**
    to determine where putDocPart has inserted line breaks::

        A line in a doc part is followed by an inserted newline
        if and only if the newline if preceded by whitespace.

    To make this convention work,
    Leo's write code deletes the trailing whitespace of all lines that are followed by a "real" newline.

    **Leo 4.0 and later**:
    The @+doc and @+at sentinels now contain the whitespace that follows
    the corresponding @doc or @ directives.

\@+body **(Leo 3.x only)**
    Marks the start of body text.

\@-body **(Leo 3.x only)**
    Marks the end of body text.

\@delims
    The @delims sentinel inserts @@delims sentinels into the external file.
    The new delimiter strings continue in effect until the next @@delims sentinel
    *in the external file* or until the end of the external file.
    Adding, deleting or changing @@delim *sentinels* will destroy Leo's ability to read the external file.
    Mistakes in using the @delims *directives* have no effect on Leo,
    though such mistakes will thoroughly mess up a external file as far as compilers,
    HTML renderers, etc. are concerned. 

\@+leo
    Marks the start of any external file.
    This sentinel has the form::

        &lt;opening_delim&gt;@leo&lt;closing_delim&gt;

    The read code uses single-line comments if &lt;closing_delim&gt; is empty.
    The write code generates single-line comments if possible.

    **New in Leo 4.0**: The @+leo sentinel contains other information following
    @leo.  For example::

        &lt;opening_delim&gt;@leo-ver=4-thin&lt;closing_delim&gt;

\@-leo
    Marks the end of the Leo file.
    Nothing but whitespace should follow this directive.

\@+middle **(Leo 4.0 and later)**
    Marks the start of intermediate nodes between the node that
    references a section and the node that defines the section.
    Typically no such sentinels are needed: most sections are defined in a direct child of the referencing node.

\@-middle **(Leo 4.0 and later)**
    Marks the end of intermediate nodes between the node that
    references a section and the node that defines the section.

\@+node and \@-node
    Mark the start and end of a node.

    **Leo 4.2 and later**::
    @+node and @-node sentinels use gnx's as described above::

        @+node:gnx:&lt;headline&gt;
        @-node:gnx:&lt;headline&gt;

    Leo generates these sentinels only for nodes containing body text.
    Leo no longer generates other @+node sentinels to indicate outline structure.
    As a result, there is no longer any need for @+body sentinels.

    **Before Leo 4.2**::
    @+node and @-node sentinels used child indices, and status fields as described below::

      @+node:&lt;child_index&gt;:&lt;status_fields&gt;:&lt;headline&gt;
      @-node::&lt;child_index&gt;:&lt;status_fields&gt;:&lt;headline&gt;

    &lt;child_index&gt; is a number from 1 to n indicating the index of the node in the list of its parent's children.
    &lt;status_field&gt; is the cloneIndex field of the form: "C=nnn", where nnn is an immutable clone index.
    &lt;headline&gt; contains *headline* text, not reference text.

\@nl **(Leo 4.0 and later)**
    Adds a newline to the body text.

\@nonl **(Leo 4.0 and later)**
    Suppresses a newline from the body text.

\@others
    The @+others sentinel indicates the start of the expansion of an @+others directive,
    which continues until the matching @-others sentinel.
    @others sentinels are nested within @body sentinels;
    the expansion of the @others directive always occurs within the body text of some node.

\@verbatim
    @verbatim indicates that the next line of the external file is not a sentinel.
    This escape convention allows body text to contain lines that would otherwise be considered sentinel lines.

\@@verbatimAfterRef
    @verbatimAfterRef is generated when a comment following a section reference would otherwise be treated as a sentinel.
    In Python code, an example would be::

      &lt;&lt; ref &gt;&gt; #+others

    This sentinel is required only when blank lines are suppressed between sentinel lines.
</t>
<t tx="ekr.20101012083118.5242">c:\leo.repo\trunk\leo\doc\html\slides\whetting-your-appetite\_build\html\slide-001.html</t>
<t tx="ekr.20101012083118.5245"></t>
<t tx="ekr.20101012083118.5246">Leo is a unique, powerful computer program that you can use to organize, analyze
and describe text and text files.

Use Leo:

- To brainstorm a new project.
- As a Personal Information Manager.
- As a new kind of programming too.

Because Leo is unlike other tools you may have used, a series of examples may be
the best way to demonstrate what can be done with Leo.</t>
<t tx="ekr.20101013072903.5218"></t>
<t tx="ekr.20101013072903.5219">This slideshow shows some of the things you can do
with Leo</t>
<t tx="ekr.20101013072903.5220"></t>
<t tx="ekr.20101013072903.5221">Leo's main window consists of an **outline pane**
(1), a **body pane** (2) and a **log pane** (3).
All data in Leo resides in **nodes**. A node
consists of **headline text** and **body text**.
The outline pane shows headlines. The body pane
pane shows the body text of the presently selected
node. Messages from Leo appear in the log pane.

</t>
<t tx="ekr.20101013072903.5224">@language rest
@pagewidth 50</t>
<t tx="ekr.20101013072903.5225">This is a step-by-step introduction to show you
how to use Leo outlines.</t>
<t tx="ekr.20101013072903.5226">.. The workbook.leo window.

Let\'s start.  Open Leo.
Leo opens the **workbook file** when you start
Leo without a filename.

If initial workbook file looks like this:</t>
<t tx="ekr.20101013072903.5228">.. Arrow points to window title.

The name of the Leo outline appears in the window's title.

Here, the name is workbook.leo, the default file name.</t>
<t tx="ekr.20101013072903.5229">Leo's main window consists of an **outline pane**
(1), a **body pane** (2) and a **log pane** (3).

</t>
<t tx="ekr.20101013072903.5230">The outline pane shows **headlines**.

Here, we see the a "startup" headline and a "workbook" headline.</t>
<t tx="ekr.20101013072903.5234">Here I've typed "To do" in the headline.</t>
<t tx="ekr.20101013072903.5235">Typing a newline ends editing of the headline.

Notice that the **icon box** to the left of the
headline now has a darker outline that it had
before. This indicates that the node is dirty (has
been changed).
</t>
<t tx="ekr.20101013072903.5236">Ctrl-I inserts a new node.</t>
<t tx="ekr.20101013072903.5237">I typed "go shopping" followed by a return.

The focus is now in the body pane.</t>
<t tx="ekr.20101013072903.5238"></t>
<t tx="ekr.20101013072903.5240">You can re-edit a headline by typing Ctrl-H.

</t>
<t tx="ekr.20101013072903.5241">Here, I typed "today" at the end of the headline.</t>
<t tx="ekr.20101013072903.5244">Ctrl-R moves a node right.

The "go shopping" becomes a **child**
of the "to do today" node.

The "to do today" is the **parent** node.</t>
<t tx="ekr.20101013072903.5245">Leo has unlimited undo/redo capabilities.

Ctrl-Z undoes the previous action and
Ctrl-Shift-Z redoes the previous action.

Alt-E will open the edit menu so that you
can see what the undo/redo operations
will do next.

Here, I typed Ctrl-z, so that the "go shopping"
node is once again a child of the "to do today" node.

.. screenshot of Edit menu.
</t>
<t tx="ekr.20101013072903.5262">Prezi path: clone-marked.
Prezi picture: @include &lt;filename&gt;.</t>
<t tx="ekr.20101014030710.5277">file:///C:/Users/edreamleo/Documents/logos/ekr.gif</t>
<t tx="ekr.20101014031545.5278">file://../Icons/Lioness.jpg</t>
<t tx="ekr.20101014034526.5280">@language rest
@pagewidth 50

</t>
<t tx="ekr.20101014034526.5282">These don't tell stories
</t>
<t tx="ekr.20101014034526.5287">@edit

@auto

@file

sentinels

With \@file, you also **share outline structure**.

Leo opens external files automatically.

Leo is an IDE</t>
<t tx="ekr.20101014034526.5291"></t>
<t tx="ekr.20101014034526.5292"></t>
<t tx="ekr.20101014034526.5293"></t>
<t tx="ekr.20101014034526.5294">- Execute IPython scripts from Leo.
- Execute Leo scripts from IPython.</t>
<t tx="ekr.20101014034526.5295"></t>
<t tx="ekr.20101014034526.5296">@ Discuss tab completion.</t>
<t tx="ekr.20101014034526.5297">Any node can contain Python scripts.

Scripts have access to the entire outline:

    p.b
    p.h
    c
    g
    
    p.parent()
    p.children()

User-defined types

    @url
    @image
    @test
</t>
<t tx="ekr.20101014034526.5298"></t>
<t tx="ekr.20101014034526.5299">.. _`Download Python`: http://www.python.org/download/
.. _`Leo's download page`: https://sourceforge.net/projects/leo/files/Leo/
.. _`next slide`: slide-002.html

**Installing on Windows: using Leo's single-click installer** 

1. Install Python: `Download Python`_, save to your desktop, then
   double-click on the saved file.
   
   Python is software for creating and running computer programs.

2. Download the latest Leo's installer from `Leo's download page`_.
   It will be called something like LeoSetup-&lt;version&gt;.exe

3. Run the installer.
   
**Installing Leo from sources**

See the `next slide`_.
</t>
<t tx="ekr.20101014034526.5302">**Running Leo from a console**

To run Leo directly from a console, do the following:

1. Go to the Leo directory::

    cd &lt;path-to-leo-directory&gt;
    
2. Start launchLeo.py using Python::

    python launchLeo.py %*

</t>
<t tx="ekr.20101014034526.5303">Using shell scripts (Linux) or .bat files (Windows)
can make it easier to open Leo files.

**Linux**

Put this in a shell script called leo::

    #!/bin/sh 
    python &lt;path-to-leo-directory&gt;launchLeo.py $1

**Windows**

Put this in leo.bat::

    cd &lt;path-to-leo-folder&gt;
    python &lt;path-to-leo-folder&gt;launchLeo.py %*
    
On either platform, the following will open x.leo::

    leo x.leo
</t>
<t tx="ekr.20101014034526.5304">The first time you start Leo, a dialog will ask you for a unique
identifier. This string helps ensure that each Leo node has a
unique identity.

This identifier can be any string 3 characters or more in length.
In a shared environment, a cvs or bzr login name works well.

Pick a string you don't mind making public: it will appear in
files that Leo creates.

Leo stores this identifier in the file ~/.leo/.leoID.txt.
You can change this identifier at any time by editing .leoID.txt.
</t>
<t tx="ekr.20101014105353.5256">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-001.html</t>
<t tx="ekr.20101014105353.5257">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-002.html</t>
<t tx="ekr.20101014105353.5258">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-003.html</t>
<t tx="ekr.20101014105353.5259">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-004.html</t>
<t tx="ekr.20101014105353.5260">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-005.html</t>
<t tx="ekr.20101014105353.5261">c:\leo.repo\trunk\leo\doc\html\slides\installation\_build\html\slide-006.html</t>
<t tx="ekr.20101014110348.5256">In this slideshow, we'll see how to connect Leo
outlines to files outside of Leo.
We call such files **external files**.

Here, we have opened a new Leo outline.

.. open leo to create workbook.leo</t>
<t tx="ekr.20101014110348.5257">Here, created a node called @edit spam.py.

This represents the file spam.py in the same
directory as the Leo outline.</t>
<t tx="ekr.20101014110348.5259">- Use @no-screenshot to indicate no screenshot will be used.

- All other </t>
<t tx="ekr.20101014110348.5260">I save the Leo outline file with Ctrl-S or the File:Save menu.

When I do that, Leo automatically saves any @edit node that
is new or has been changed.

In this case, the @edit node was new, so the log window says::

    created: c:\Users\edreamleo\.leo\spam.py
    saved: workbook.leo
    
Leo tells you the full path to created files, and
the short path to updated files like workbook.leo.</t>
<t tx="ekr.20101014110348.5261">I've typed some text into the body pane.

The @language python line is a Leo directive. It
tells Leo to syntax color the body text as Python
source code.</t>
<t tx="ekr.20101014110348.5262">Now I've added some more text.

The icon box shows that the @edit node is "dirty" (has been changed).</t>
<t tx="ekr.20101014110348.5263">I save the Leo outline again.

Once again, Leo saves spam.py.

This time, the log window says::

    wrote: spam.py
    saved: workbook.leo</t>
<t tx="ekr.20101014110348.5264">Let's close the file and reopen it.

We get exactly the same information,
with the same node selected, with the same information.

</t>
<t tx="ekr.20101014110348.5265"></t>
<t tx="ekr.20101014110348.5266">We can edit spam.py outside of Leo.

Let's add a comment.</t>
<t tx="ekr.20101014110348.5267">If we close the Leo file and reopen it,
we see the new text.
</t>
<t tx="ekr.20101014110348.5270"></t>
<t tx="ekr.20101014110348.5271"></t>
<t tx="ekr.20101014110348.5272">@edit is the easiest way to connect files</t>
<t tx="ekr.20101014110348.5274">Rather than creating new files with @edit, it is more common
to use @edit to connect Leo with files that already exist on your file system.</t>
<t tx="ekr.20101014110348.5275">Within a Leo outline, an @edit node contains
the entire contents of an external file.</t>
<t tx="ekr.20101014110348.5276">This presentation will discuss three ways
to connect Leo outlines with external files:
@edit, @auto and @edit.</t>
<t tx="ekr.20101014110348.5277"></t>
<t tx="ekr.20101014110348.5278"></t>
<t tx="ekr.20101014110348.5280">When Leo opens a file, it makes the body pane
active. The body pane is colored pink, and
contains a blinking cursor.

We say that the body pane has **focus**.

.. focus must be in body pane.

</t>
<t tx="ekr.20101014110348.5281">Here, I clicked the headline called "NewHeadline".

Leo selects the headline.

Notice that the body pane is now blue, indicating that
it no longer has focus.

.. focus must be in tree pane.</t>
<t tx="ekr.20101014110348.5283">Leo is designed so you never need to use the mouse.

With the focus in the tree pane, hitting the
return key puts the focus in the body pane.

Alt-D also puts the focus in the body pane.

.. Focus in body pane.</t>
<t tx="ekr.20101014110348.5285">Typing Alt-T puts the focus in the tree pane.

.. Focus in tree pane.</t>
<t tx="ekr.20101014110348.5286">Ctrl-H edits the presently selected headline.

You can type Ctrl-H at any time, regardless of
where the focus is.

Ctrl-H selects the entire text of the headline.</t>
<t tx="ekr.20101014110348.5290">Ctrl-L moves the "go shopping" node left.

The "go shopping" node becomes a **sibling**
of the "to do today" node.</t>
<t tx="ekr.20101014110348.5293"></t>
<t tx="ekr.20101014110348.5294">Let's add a new node.

I hit Ctrl-I.</t>
<t tx="ekr.20101014110348.5295">I type "fix car" followed by the &lt;return&gt; key.</t>
<t tx="ekr.20101014110348.5296">I decide that fixing the car should have first priority.

I type Ctrl-U to move the "fix car" node up.
It becomes the first child of the "to do today" node.</t>
<t tx="ekr.20101014110348.5297">After creating the to-do list, I want to hide it
by **collapsing** the "to do today node.

I could do that by clicking the black triangle
to the left of the "to do today node".

However, I strongly encourage all Leo users to
avoid using the mouse.

.. arrow points to black triangle.</t>
<t tx="ekr.20101014110348.5298">The focus is in the tree pane, so we select the "to do today"
node merely by using the Up-Arrow key.

If, for some reason, the focus is in the body pane,
we can select the previous node in either of two ways:

1. Type Alt-T followed by the Up-Arrow key.

2. Type Alt-Up-Arrow.

The "to do today" node is selected.
</t>
<t tx="ekr.20101014110348.5299">With the "to-do today" node selected,
the Alt-Left-Arrow will contract the node.

.. "to do today" contracted.</t>
<t tx="ekr.20101014110348.5300">To expand the "to do today" node,
I merely hit the Right-Arrow key.

We can now see the entire to-do list.</t>
<t tx="ekr.20101014110348.5305">Whatever I type will appear in the body pane.

I added a shopping list.

The blue square in the icon area indicates that the body pane contains text.

.. Arrow at icon box.

.. buy milk
.. buy eggs.</t>
<t tx="ekr.20101014110348.5307">There are two more outline operations that every Leo user should know about,
promote and demote.

Suppose we want to reorganize this shopping list.

.. - to do
..   - fix car
..   - go shopping
..     - buy milks
..     - buy eggs</t>
<t tx="ekr.20101014110348.5308">The shift arrow keys move nodes when focus is in the outline pane.

To move the "fix car node" up</t>
<t tx="ekr.20101014110348.5309">The arrow keys do different things depending on
which pane has focus. Using arrow keys is **much**
easier than using the mouse.

**Focus in outline pane**
    
    The **plain** arrow keys **select** nodes,
    expanding or contracting nodes as needed.
    
    The **shift** arrow keys **move** nodes. The
    Shift-Left-Arrow and Shift-Up-Arrow contract
    nodes as needed. **Note**: the
    Shift-Down-Arrow and Shift-Right-Arrow keys
    never expand nodes.

**Focus in body pane**

    As usual, the **plain** arrow keys move the
    cursor and the **shift** arrow keys move the
    cursor and extend the solution.
    
    The **alt** arrow keys move the focus to the
    outline pane and then select nodes. The
    **alt-shift** arrow keys move the focus to the
    outline pane and then move nodes.

..  - The Up-Arrow and Down-Arrow keys select
..  the previous or next visible nodes.

..  - The Right-Arrow key contracts a node if the node
..  is expanded. Otherwise the Right-Arrow key
..  selects the node's parent.
  
..  - The Left-Arrow key does nothing if the selected
..  node has no children.  If the node does have
..  children, the Left-Arrow key expands the node
..  (if the children or invisible) or selects the
..  first child (if the children are visible).

..  This is exactly how Windows explorer works, and
..  it quickly becomes second nature.

</t>
<t tx="ekr.20101014110348.5312"></t>
<t tx="ekr.20101014110348.5316"></t>
<t tx="ekr.20101014110348.5317"></t>
<t tx="ekr.20101014110348.5318">Buy milk
Buy eggs</t>
<t tx="ekr.20101014110348.5323"></t>
<t tx="ekr.20101014110348.5325">Ctrl-S saves the outline.

Notice that the icon box one again has a gray outline,
indicating that the node is no longer dirty.

.. Arrow to icon box.</t>
<t tx="ekr.20101014110348.5326">Suppose we want to copy the to-do list for another day.

Using the arrow keys as necessary, I select the
"to do today" node.

The Shift-Ctrl-C key copies the selected outline.

the Shift-Ctrl-V key pastes the copied outline following
the selected node or as the first child of the selected
node if the selected node is expanded.

I want to do the paste *after* the to-do list, so I collapse
the original node before doing the paste:

</t>
<t tx="ekr.20101014110348.5329">Here, I selected "go shopping" and then demote nodes with Ctrl-Shift-].

The following siblings of the "go shopping" nodes were
demoted to become children of the "go shopping node.</t>
<t tx="ekr.20101014110348.5330">Conversely, Ctrl-Shift-[ promotes all the children of the
selected node so that they become (following) siblings
of the selected node.</t>
<t tx="ekr.20101014110348.5331">Using promote and demote is an easy way of moving
several nodes quickly.

For example, suppose I wanted to move the "buy
milk" nad "buy eggs" nodes so that they are
top-level nodes.

I insert a "helper" node after the "go shopping node"</t>
<t tx="ekr.20101014110348.5332">I then demote the following nodes.</t>
<t tx="ekr.20101014110348.5333">I move the helper node left.  The demoted nodes go along for the ride.</t>
<t tx="ekr.20101014110348.5334">I promote the moved nodes.</t>
<t tx="ekr.20101014110348.5335">And delete the helper node.

This technique can be quite useful when moving
many nodes, or moving several nodes a long way in
the outline.

The clones and views slideshows discusses several
other ways to do similar moves.</t>
<t tx="ekr.20101014110348.5336">This concludes the step-by-step introduction to
Leo's outlines. Mastering the skills presented
here is essential to using Leo effectively and
enjoyably.</t>
<t tx="ekr.20101014110348.5338">'''Meld Wink slides into an @slideshow folder.'''

import glob
import os
import shutil

slideshow_dir = 'C:/leo.repo/trunk/leo/doc/html/slides/First-presentation'
    # r'First-presentation'
    # The directory relative to leo/doc/html/slides.

wink_dir = 'C:/Users/edreamleo/Desktop/WinkStuff/First-presentation/_files'
    # The directory containing the wink screenshots.
    # This will usually be &lt;slideshow-name&gt;/_files.

@others

mc = MeldController(c,p,slideshow_dir,wink_dir)
mc.run()
</t>
<t tx="ekr.20101014110348.5339">class MeldController:

    def __init__ (self,c,p,slideshow_dir,wink_dir):

        self.c = c
        self.slideshow_dir = slideshow_dir
        self.slideshow_node = p
        self.wink_dir = wink_dir

    @others
</t>
<t tx="ekr.20101014110348.5341">def run (self):

    print('='*20)

    aList = self.get_wink_screenshots()
    if not aList:
        return

    if not self.check(aList):
        return

    # Pass 1: copy files for @slide nodes w/o @no-screenshot nodes.
    self.copy_files(aList)

    # Pass 2: adjust children of @slide nodes.
    self.adjust_slideshow()
</t>
<t tx="ekr.20101014110348.5342">def check (self,aList):

    '''
    Check that len(aList) matches the number of @slide nodes in the
    slideshow. Don't count @slide nodes containing an @no-screenshot node.
    '''

    p = self.slideshow_node
    n1 = len(aList)
    n2,n3 = self.count_slide_nodes()

    if not self.check_dir(self.wink_dir):
        return False
    if not self.check_dir(self.slideshow_dir):
        return False
    if not self.match(p,'@slideshow'):
        return g.error('not a @slideshow node: %s',p.h)

    return True ### Testing

    if n1 != (n2-n3):
        return g.error(
            '%s wink slides\n'
            '%s @slide nodes\n'
            '%s @no_screenshot nodes' % (
                n1,n2,n3))

    return True
</t>
<t tx="ekr.20101014110348.5343">def copy_files (self,aList):

    '''Copy files from the wink_dir to slideshow_dir.'''

    # Traverse the tree as in the screenshot plugin.
    # That is, ignore @ignore trees and nested @slide nodes.
    # This ensures that the slide number, n, is correct.
    p = self.slideshow_node
    after = p.nodeAfterTree()
    p = p.firstChild()
    wink_n = 0 # Wink screenshot numbers start at 0.
    slide_n = 1 # Slide numbers start at 1.
    while p and p != after:
        if self.match(p,'@slide'):
            if not self.has_at_no_screenshot_node(p):
                self.copy_file(aList,slide_n,wink_n)
                wink_n += 1
            slide_n += 1
            p.moveToNodeAfterTree()
        elif self.match(p,'@ignore'):
            p.moveToNodeAfterTree()
        else:
            p.moveToThreadNext()
</t>
<t tx="ekr.20101014110348.5344">def adjust_slideshow(self):

    '''Adjust all @slide nodes in the slideshow.'''

    # Traverse the tree as in the screenshot plugin.
    # That is, ignore @ignore trees and nested @slide nodes.
    # This ensures that the slide number, n, is correct.
    p = self.slideshow_node
    after = p.nodeAfterTree()
    p = p.firstChild()
    n = 1
    while p and p != after:
        if self.match(p,'@slide'):
            self.adjust_slide_node(p,n)
            n += 1
            p.moveToNodeAfterTree()
        elif self.match(p,'@ignore'):
            p.moveToNodeAfterTree()
        else:
            p.moveToThreadNext()
</t>
<t tx="ekr.20101014110348.5346">def get_wink_screenshots (self):

    '''Return the number of screenshot files
    in the wink_dir directory.'''

    trace = False

    aList = glob.glob(self.wink_dir + '/*.png')

    def key(s):
        path,ext = g.os_path_splitext(s)
        junk,n = g.os_path_split(path)
        if n.isdigit():
            return int(n)
        else:
            g.error('bad wink screenshot: %s' % (s))
            raise KeyError

    aList.sort(key=key) # Essential.

    if trace:
        for z in aList:
            print(z)

    return aList
</t>
<t tx="ekr.20101014110348.5347">def count_slide_nodes (self):

    '''Return n1,n2

    n1 is the total number of @slide nodes in the @slideshow tree.
    n2 is number of @slide nodes containing an @no-slideshow child.
    '''

    p = self.slideshow_node
    after = p.nodeAfterTree()
    p = p.firstChild()
    n1,n2 = 0,0
    while p and p != after:
        if self.match(p,'@slide'):
            n1 += 1
            if self.has_at_no_screenshot_node(p):
                n2 += 1
            p.moveToNodeAfterTree()
        elif self.match(p,'@ignore'):
            p.moveToNodeAfterTree()
        else:
            p.moveToThreadNext()

    g.trace(n1,n2)
    return n1,n2
</t>
<t tx="ekr.20101015151959.5300">def adjust_slide_node (self,p,slide_number):

    '''Adjust p, an @slide node.'''

    trace = True

    # 1. Delete any "@url built slide" node.
    for child in p.children():
        if self.match(child,'@url built slide'):
            if trace: g.es('del @url built slide in',p.h)
            child.doDelete()
            break

    # Do nothing if there is an @no-screenshot node.
    if self.has_at_no_screenshot_node(p):
        return

    # 2. Add or update the "@url final output file" node.
    tag ='@url final output file'
    for child in p.children():
        if self.match(child,tag):
            p2 = child ; break
    else:
        if trace: g.es('add %s' % tag)
        p2 = p.insertAsLastChild()
        p2.h = tag

    p2.b = self.built_slide_path(slide_number)
</t>
<t tx="ekr.20101015151959.5301">def has_at_no_screenshot_node (self,p):

    for p in p.children():
        if self.match(p,'@no-screenshot'):
            return True
    else:
        return False
</t>
<t tx="ekr.20101015151959.5302">def match (self,p,pattern):

    '''Return True if p.h matches the pattern.'''

    return g.match_word(p.h,0,pattern)
</t>
<t tx="ekr.20101015151959.5303">def built_slide_path (self,slide_number):

    '''Return the absolute path to the slide.

    This must match the path computed by
    get_output_fn in the screenshots plugin.
    '''

    def fix (fn):
        return os.path.normcase(fn).replace('\\','/')

    def finalize (fn):
        return fix(g.os_path_finalize_join(self.slideshow_dir,fn))

    fn = 'slide-%03d.png' % (slide_number)
    fn = finalize(fn)
    return fn
</t>
<t tx="ekr.20101016043116.5312">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-003.png</t>
<t tx="ekr.20101016043116.5313">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-004.png</t>
<t tx="ekr.20101016043116.5314">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-005.png</t>
<t tx="ekr.20101016043116.5315">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-006.png</t>
<t tx="ekr.20101016043116.5316">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-007.png</t>
<t tx="ekr.20101016043116.5317">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-008.png</t>
<t tx="ekr.20101016043116.5318">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-009.png</t>
<t tx="ekr.20101016043116.5319">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-010.png</t>
<t tx="ekr.20101016043116.5320">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-011.png</t>
<t tx="ekr.20101016043116.5321">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-012.png</t>
<t tx="ekr.20101016043116.5322">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-013.png</t>
<t tx="ekr.20101016043116.5323">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-014.png</t>
<t tx="ekr.20101016043116.5324">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-015.png</t>
<t tx="ekr.20101016043116.5325">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-016.png</t>
<t tx="ekr.20101016043116.5326">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-017.png</t>
<t tx="ekr.20101016043116.5327">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-018.png</t>
<t tx="ekr.20101016043116.5328">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-019.png</t>
<t tx="ekr.20101016043116.5329">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-020.png</t>
<t tx="ekr.20101016043116.5330">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-021.png</t>
<t tx="ekr.20101016043116.5331">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-022.png</t>
<t tx="ekr.20101016043116.5332">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-023.png</t>
<t tx="ekr.20101016043116.5333">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-024.png</t>
<t tx="ekr.20101016043116.5334">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-025.png</t>
<t tx="ekr.20101016043116.5335">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-026.png</t>
<t tx="ekr.20101016043116.5336">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-028.png</t>
<t tx="ekr.20101016043116.5337">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-029.png</t>
<t tx="ekr.20101016043116.5338">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-030.png</t>
<t tx="ekr.20101016043116.5339">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-031.png</t>
<t tx="ekr.20101016043116.5340">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-032.png</t>
<t tx="ekr.20101016043116.5341">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-033.png</t>
<t tx="ekr.20101016043116.5342">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-034.png</t>
<t tx="ekr.20101016043116.5343">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-035.png</t>
<t tx="ekr.20101016043116.5344">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-036.png</t>
<t tx="ekr.20101016043116.5345">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-037.png</t>
<t tx="ekr.20101016043116.5346">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-001.png</t>
<t tx="ekr.20101016043116.5347">c:/leo.repo/trunk/leo/doc/html/slides/first-presentation/slide-002.png</t>
<t tx="ekr.20101016043116.5349">def check_dir (self,theDir):

    if not g.os_path_exists(theDir):
        return g.error('not found: %s' % (theDir))

    if not g.os_path_isdir(theDir):
        return g.error('not a directory: %s' % (theDir))

    return True
</t>
<t tx="ekr.20101016043116.5352">def copy_file (self,aList,slide_n,wink_n):

    trace = True

    if wink_n &gt;= len(aList):
        return g.trace('can not happen: '
            'len(aList): %s, n: %s' % (
                len(aList),wink_n))

    fn_src = aList[wink_n]
    fn_dst = 'slide-%03d.png' % (slide_n)

    if trace:
        g.trace('%7s -&gt; %s' % (g.shortFileName(fn_src),fn_dst))
</t>
<t tx="ekr.20101016043116.5353"></t>
<t tx="sps.20100708203040.19008">@language python
import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
&lt;&lt; pdf manual &gt;&gt;
</t>
<t tx="sps.20100708203040.19009">d = c.scanAllDirectives(p)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')</t>
<t tx="sps.20100708203040.19010"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = d.get('path') + "/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('../../fixup.pl &lt; Leodocumentation.tex &gt; LeoDoc.tex')
os.system('make LeoDoc.pdf')
</t>
<t tx="sps.20100708213227.44914"></t>
<t tx="ville.20090520232034.6345">g.app.gui.runScrolledMessageDialog(c=c, msg = u'rst:' + p.b)</t>
<t tx="ville.20090705224948.5734">import os
pos = c.find_h("Users Guide")[0]
c.selectPosition(pos)
c.k.simulateCommand('rst3')
&lt;&lt; html manual &gt;&gt;
# no pdf manual creation, perhaps too "involved" for many</t>
<t tx="ville.20090705225609.5736">mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make html')</t>
<t tx="ville.20090705225609.5738"># you probably need to install several packages 
# to create pdf (e.g. jadetex)
mandir = g.app.leoDir + "/doc/html"
g.es(mandir)
os.chdir(mandir)
os.system('make latex')
os.chdir('_build/latex')
os.system('make all-pdf')
</t>
</tnodes>
</leo_file>
