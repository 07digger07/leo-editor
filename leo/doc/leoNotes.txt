.. @+leo-ver=5-thin
.. @+node:ekr.20031218072017.329: * @file ../doc/leoNotes.txt
.. @@language rest
.. @@killbeautify
.. @+all
.. @+node:ekr.20190123074336.1: ** Backup of public filters
https://github.com/leo-editor/leo-editor/issues/1064

This issue lists the filters that I use to organize and understand my work flow.  They are a high level overview of what will (and won't) be done.

**About two dozen significant enhancements remain**.  None of these will fundamentally change Leo.  Fixing bugs has a higher priority.

- [Curated unscheduled issues](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+no%3Amilestone+-label%3Amaybe+-label%3Ainfo+-label%3Apip+-label%3Awaiting+-label%3Alvl%3Aminor): Interesting open programming issues that have not been assigned a milestone. See the actual filter for details. Some may be assigned to 5.8.2.

- [Branch info](https://github.com/leo-editor/leo-editor/issues/1058): An info item reminding me what each branch does, and its status.

- [Important bugs](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Abug+-label%3Awaiting+-label%3Alvl%3Aminor): Significant bugs (`-label:lvl:minor`) that can be fixed now (`-label:waiting`).

- [Minor bugs](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Abug+-label%3Awaiting+label%3Alvl%3Aminor), [plugin bugs](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Abug+label%3APlugin+),  and [minor enhancements](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aenhancement+-label%3Awaiting+label%3Alvl%3Aminor+).  I am responsible for fixing only "core" plugins such as viewrendered.py and mod_scripting.py.

- [5.8.1](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A5.8.1+-label%3Awaiting+-label%3Apip+is%3Aopen+): Programming issues scheduled for 5.8.1.

- [5.8.2](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+milestone%3A5.8.2+is%3Aopen+-label%3Apip): Programming issues scheduled for 5.8.2.

**Links to Labels**

- [Bug](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Abug+): All bugs. Borderline issues can have both the "Bug" and "Enhancement" labels.

- [Best](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Abest): The most significant enhancement issues.

- [EKR](https://github.com/leo-editor/leo-editor/issues?q=is%3Aissue+label%3AEKR+is%3Aopen): Issues in which I have (or have had) a particular interest. This label is no guarantee of action.

- [Info](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Ainfo): All Info items.

- [Summary](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Asummary): All Summary items. *Note*: Summary items are also Info items.

- [Importers](https://github.com/leo-editor/leo-editor/issues?q=is%3Aissue+import+is%3Aopen+label%3AImporter): Importer items are the most important links between Leo and other programs.

- [Emacs](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aemacs): Issues related to Emacs. Some issues have been downgraded in importance recently.

- [Gui](https://github.com/leo-editor/leo-editor/issues?q=is%3Aissue+label%3Agui+is%3Aopen): Items related to Leo's gui code, especially window code. **These items won't happen unless someone else volunteers to do them**.

- [Maybe](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Amaybe): Open issues which I have no present commitment to do.

- [Won'tDo](https://github.com/leo-editor/leo-editor/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Awon%27tdo): Closed issues which I am unlikely to do, absent a significant change of opinion.

  Many of my own issues have been relegated to the "Won'tDo" category. I am no longer interested in slavishly adding features from other editors to Leo, nor am I interested in embedding Leo in other editors.

**The "Maybe" and "Won'tDo" labels are not necessarily death sentences.** I often change my mind. Comments are not allowed here. Please argue for an issue in [leo-editor](https://groups.google.com/forum/#!forum/leo-editor), or in the issue itself.
.. @+node:ekr.20200114052814.1: ** Backup of first comment of #1440
[leoAst.py](https://github.com/leo-editor/leo-editor/blob/fstrings/leo/core/leoAst.py) unifies python's token-oriented and ast-oriented worlds. This project is a major contribution to python's core tools. 

**Overview**

The **TokenOrderGenerator** (TOG) class in leoAst.py creates the following data:

- A **children** array from each ast node to its children. Order matters!
- A **parent** link from each ast.node to its parent.
- Two-way links between tokens in the **token list**, a list of Token objects, and the [ast](https://docs.python.org/3/library/ast.html) nodes in the **parse tree**:
  - For each token, **token.node** contains the ast.node "responsible" for the token.
  - For each ast node, **node.first_i** and **node.last_i** are indices into the token list.
    These indices give the range of tokens that can be said to be "generated" by the ast node.

These links promise to collapse the complexity of any code that changes text, including the [asttokens](https://pypi.org/project/asttokens/), [fstringify](https://pypi.org/project/fstringify/), and [black](https://pypi.org/project/black/) projects.

This project is a general solution to frequently-asked questions such as [this](https://stackoverflow.com/questions/16748029). It fills gaps in python's ast module, as discussed in [this python issue](https://bugs.python.org/issue33337).

**Project details**

Leo's [fstrings branch](https://github.com/leo-editor/leo-editor/tree/fstrings) contains this work, as well as work on Leo's fstringifier command. This branch will be merged into [devel](https://github.com/leo-editor/leo-editor/tree/devel) from time to time.

leoAst.py is completely independent of [Leo](http://leoeditor.com/) itself. leoAst.py contains a complete suite of unit tests. Those unit tests completely cover the most important classes of the file.

Work is in progress on distributing leoAst.py as a separate project. In the meantime, you may find the latest version of leoAst.py [here](https://github.com/leo-editor/leo-editor/blob/fstrings/leo/core/leoAst.py).

**Status**

*The project is a complete success*:
- The code is simple, fast, and makes no demands on the GC.
- It is easy to debug and maintain.
- It is robust: TOG.sync_token is an ever-present unit test.

The code in leoAst.py is simpler, easier to understand, more robust and faster than the corresponding code in the asttokens, fstringify and black projects. These improved figures of merit are the results of months of innovation.

leoAst.py contains an entirely new implementation of the [fstringify](https://pypi.org/project/fstringify/) tool. This re-implementation of fstringify is now simpler, faster, more complete, and more reliable than fstringify itself.

leoAst.py also contains an entirely new implementation of [black](https://pypi.org/project/black/). This re-implementation is under development. Basing the code on the TOG class will surely make the tool simpler and faster than black itself.

**Figures of merit**

**Simplicity**: The code (all of it) is the simplest thing that could possibly work. This is in stark contrast to the generators used in the [asttokens](https://pypi.org/project/asttokens/), [fstringify](https://pypi.org/project/fstringify/), and [black](https://pypi.org/project/black/) projects.

**Innovation**: The present simplicity is the result of months of invention.  For more details, see the Theory of Operation in [this issue's second comment](https://github.com/leo-editor/leo-editor/issues/1440#issuecomment-573661883).

**Speed**: The TOG creates two-way links between tokens and ast nodes in roughly the time taken by python's tokenize.tokenize and ast.parse library methods.

This is substantially faster than the  [asttokens](https://pypi.org/project/asttokens/), [fstringify](https://pypi.org/project/fstringify/), and [black](https://pypi.org/project/black/) tools.

The TOT class traverses trees annotated with parent/child links even more quickly.

TOG class avoids both [ast.fix_missing_locations](https://docs.python.org/3/library/ast.html#ast.fix_missing_locations) and [ast.get_source_segment](https://docs.python.org/3/library/ast.html#ast.get_source_segment), which are too slow to be useful.

**Memory**: The TOG class makes no significant demand on python's resources. Generators add nothing to python's call stack. TOG.node_stack is the only variable length data. This stack resides in python's heap, so its length is unimportant. In the worst case, it might contain a few thousand entries. The TOT class uses no variable-length data whatever.

**To do**

Infrastructure:
- [x] Create Token, Tokenizer, TokenOrderGenerator and TokenOrderTraverser classes.
- [x] Create a set of dumping tools.
- [x] Create nearest_common_ancestor and tokens_for_node functions.

Testing:
- [x] tokenizer.check_results verifies token round-tripping.
- [x] tog.sync_tokens is an ever-present unit test that verifies that the TOG visits nodes in token order.
- [x] Create unit tests that cover the TOG, TOT and Fstringify classes.

Real world tools:
- [x] Create the Fstringify class.
- [x] Create fstringify-files, diff-fstringify-files and silent-fstringify-files commands.
- [x] Rewrite Leo's beautify-files and diff-beautify-files commands using the Orange class.
- [ ] Complete the Orange class.

**Project history**

 See [this thread](https://groups.google.com/forum/#!topic/leo-editor/FZYJmbtRBWs). 
.. @+node:ekr.20161022035203.1: ** Test code: do not delete
@language python
# This tree contains clones. None are contained in any external file.
.. @+node:ekr.20161006162035.1: *3* cff regex pattern to find section references
# This works
<<(\s*)(\w+)(\s+)(\w+)(.*)>>

# These don't work
<<(\s*)(?!(import|docstring|includes))(\w+)(\s*)>>
<< xyz >>
<< import >>
.. @+node:ekr.20180213054048.1: *3* clean recent files test
self = g.app.recentFilesManager
result = [z for z in self.recentFiles if g.os_path_exists(z)]
if result != self.recentFiles:
    for path in result:
        self.updateRecentFiles(path)
    self.writeRecentFilesFile(c, force=True)
.. @+node:ekr.20180125040406.1: *3* script: clear g.app.db['shown-tips']
g.app.db ['shown-tips'] = []
.. @+node:ekr.20170206165145.1: *3* script: test demo.py
g.cls()
# c.frame.log.clearLog()
if c.isChanged(): c.save()
import imp
from leo.core.leoQt import QtGui
import leo.plugins.demo as demo
imp.reload(demo)
table = [
'''\
demo.delete_widgets()
demo.callout('Callout 1 centered')
demo.subtitle('This is subtitle 1')
''',
'''\
demo.delete_widgets()
demo.callout('Callout 2 (700, 200)', position=[700, 200])
demo.subtitle('This is subtitle 2')
''',
'''\
demo.delete_widgets()
demo.callout('Callout 3 (200, 300)', position=[200, 300])
demo.subtitle('This is subtitle 3')
''',
'''\
demo.delete_widgets()
demo.callout('Callout 4 (center, 200)', position=['center', 200])
demo.subtitle('This is a much much longer subtitle 4')
''',
'''\
demo.delete_widgets()
demo.callout('Callout 5 (700, center)', position=[700, 'center'])
demo.subtitle('Short 5')
''',
'''\
demo.delete_widgets()
demo.next()
''',
]
color = QtGui.QColor('lightblue')
sub_color = QtGui.QColor('mistyrose')
demo = demo.Demo(c, color=color, subtitle_color=sub_color, trace=False)
demo.delete_widgets()
demo.start(script_list = table)
.. @+node:ekr.20170317101032.1: *3* test g.unCamel
g.cls()

table = (
    'abcXyz',
    'AbcXyz',
    'abcXyzW',
)
for s in table:
    print(s)
    g.printList(g.unCamel(s))
.. @-all
.. @@nosearch
.. @-leo
