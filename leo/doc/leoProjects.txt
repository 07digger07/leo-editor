.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20150326053754.1: ** Leo 5.1 b2
.. @+node:ekr.20150327110434.1: *3* simplified LeoQtGui.setIdleTimeHook
.. @+node:ekr.20150329164712.1: *3* created c.createCloneFindAll/FlattenedAtNode
.. @+node:ekr.20150331043000.1: *3* Fixed documentation for abbreviations
@language rest
@wrap

http://leoeditor.com/tutorial-pim.html#using-abbreviations-and-templates

https://groups.google.com/d/msg/leo-editor/F3dUWxbNkAU/F6hV-n4iGm4J
.. @+node:ekr.20150401061613.1: *3* Fixed bug 171: Improve handling of @command and @button nodes
@language rest
@wrap

The highlights of the changes:

1. All @button and @command nodes (**script** nodes) now have the best possible balloon comments, regardless of their sources. All @buttons nodes show a "Goto Script" menu item when right-clicked.

2. Script nodes defined in myLeoSettings.leo or leoSettings.leo (**common** script nodes) now define static scripts.  Leo never opens other files in order to execute common scripts.  This corrects a major design blunder.

Leo will open a settings file when the user selects the ``Goto Script`` item in an @button node's popup menu. If the settings file is open in another copy of Leo, Leo will, as usual, ask you whether you want to open it again.  This should not be a problem.

3. Script nodes add their commands to Leo's command history only if they contain @args add in their headline::

    @button command-name @key = Alt-5 @args add
    @command command-name @args add   

Users will not want most @button and @command nodes to predefine entries in command history.  To see why...

4. ``<Alt-x>@<tab>`` now shows the sources of all @button and @command nodes. An actual example:

               L @button-clean-text
               L @button-join-path
    Ctrl+Key+6 M @button-run-pylint
               L @button-split-path
    Ctrl+Key+9 L @button-vim-node
               M @command-align-eq-signs
    Alt+Key+9  L @command-beautify-tests
               M @command-c-to-python-clean-docs
               L @command-cfa
               M @command-clean-all-blank-lines
               M @command-clean-body
               M @command-clean-diff
               M @command-clean-spellpyx
               M @command-count-pages
               M @command-create-def-list
               M @command-flatten-script
               M @command-join-node-above
               M @command-join-node-below
               M @command-join-selection-to-node-below
               M @command-print-cmd-docstrings
               M @command-promote-bodies
               M @command-remove-newlines
               M @command-split-defs
   
    legend:
    G leoSettings.leo
    M myLeoSettings.leo
    L local .leo File

Too many entries! 

This is an important new feature, even though the print-buttons command does pretty much the same thing. Leo prints the legend only if the tab completion shows @button or @command nodes.

5. The mod_scripting plugin now handles gracefully nodes such as::

    @button pylint
    c.k.simulateCommand('pylint')

Previously, executing this script would create an unbounded recursion.  Now, the plugin creates a fully functional button for this node, but the plugin silently refuses to redefine the existing pylint command.  End of recursion.

``<alt-x>pylint<return>`` executes the old command, not the @button script. Everything works smoothly. This is important, though few will likely notice the difference.
.. @-all
.. @@pagewidth 60
.. @@wrap
.. @@language rest
.. @-leo
