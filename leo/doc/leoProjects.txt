.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20170619165453.1: ** Branch: string-gui
Attempt to run all unit tests without using Qt gui code.
All gui-related code will be simulated with the StringTextWrapper class.
.. @+node:ekr.20170710063210.1: ** @command git-diff
g.cls()
import difflib
import os
@others
# GitDiffController(c, 'HEAD', 'HEAD~1').run()
GitDiffController(c, 'HEAD').run()
    # Same as git diff
.. @+node:ekr.20170805075657.1: *3* class GitDiffController
class GitDiffController:
    '''A class to do git diffs.'''
    @others
.. @+node:ekr.20170805075446.1: *4* gdc.__init__
def __init__ (self, c, rev1=None, rev2=None):
    '''Ctor for the GitDiffController class.'''
    self.c = c
    self.old_dir = g.os_path_abspath('.')
    self.repo_dir = g.os_path_finalize_join(g.app.loadDir, '..', '..')
    self.rev1 = rev1
    self.rev2 = rev2
    self.root = None
.. @+node:ekr.20170806041009.1: *4* gdc.create_root
def create_root(self):
    
    c = self.c
    p = c.lastTopLevel().insertAfter()
    if self.rev1 and self.rev2:
        p.h = 'git diff %s %s' % (self.rev1, self.rev2)
    else:
        p.h = 'git diff'
    # p.b = '@language diff\n'
        # No such colorizer at present.
    return p
.. @+node:ekr.20170806043941.1: *4* gdc.create_file_node
def create_file_node(self, diff_list, fn):

    p = self.root.insertAsLastChild()
    p.h = fn.strip()
    p.b = ''.join(diff_list)
    return p
.. @+node:ekr.20170805075533.2: *4* gdc.diff_file
def diff_file(self, fn):
    
    trace = False and not g.unitTesting
    lines = self.get_rev(self.rev1, fn)
    lines2 = self.get_rev(self.rev2, fn)
    diff_list = list(difflib.unified_diff(
        lines,
        lines2,
        self.rev1 or 'uncommitted',
        self.rev2 or 'uncommitted',
    ))
    if trace:
        g.trace(len(lines), len(lines2), fn)
        g.printList(diff_list)
    self.create_file_node(diff_list, fn)
.. @+node:ekr.20170805075533.4: *4* gdc.get_files
def get_files(self):
    '''Return a list of changed files.'''
    if self.rev1 and self.rev2:
        command = 'git diff --name-only %s %s' % (self.rev1, self.rev2)
        
    else:
        command = 'git diff --name-only'
    files = [
        z.strip() for z in g.execGitCommand(command, self.repo_dir)
            if z.strip().endswith('.py')
    ]
    # g.printList(files)
    return files
.. @+node:ekr.20170806035215.1: *4* gdc.get_rev
def get_rev(self, rev, fn):
    '''Get the file from the given rev, or the working directory if None.'''
    if rev:
        command = 'git show %s:%s' % (rev, fn)
        lines = g.execGitCommand(command, self.repo_dir)
    else:
        # Get the file from the working directory.
        path = g.os_path_finalize_join(self.repo_dir, fn)
        if g.os_path_exists(path):
            with open(path, 'r') as f:
                s = f.read().replace('\r','')
                s = g.toUnicode(s)
                lines = g.splitLines(s)
        else:
            g.trace('not found:', path)
            lines = []
    return lines
.. @+node:ekr.20170805075533.5: *4* gdc.run
def run(self):
    
    c = self.c
    self.root = self.create_root()
    for fn in self.get_files():
        self.diff_file(fn)
    os.chdir(self.old_dir)
    c.contractAllHeadlines()
    self.root.expand()
    c.selectPosition(self.root)
    c.redraw()
.. @-all
.. @@nosearch
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
