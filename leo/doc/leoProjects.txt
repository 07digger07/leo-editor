.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @@language rest

.. @+all
.. @+node:ekr.20141203092457.6: ** Leo 5.1: @clean: the end of sentinels!
.. @+node:ekr.20150206064817.6: *3* Bugs
.. @+node:ekr.20141203092457.5: *4* Fixed bug in g.reportBadChars
https://groups.google.com/forum/#!topic/leo-editor/X9rePlT6Meg

In Python 3 there is no 'unicode' function.

- A big collapse in complexity in g.reportBadChars.
- Added an important guard in g.ue for Python 3.

.. @+node:ekr.20141203092457.19: *4* Fixed Python3 compatibility bug in g.pause
.. @+node:ekr.20141205082137.4: *4* Fixed bug 108: can't write spellpyx.txt
@language rest

https://github.com/leo-editor/leo-editor/issues/108

The plugin tries to create a new file inside the install path, and doesn't
have the permission.

Is there a way to configure the path of this spellpyx.txt to, say, $HOME/.leo?

@language python
.. @+node:ekr.20141206050611.8: *4* Fixed bug 78: find-next match not always scrolled into view
@language rest

https://github.com/leo-editor/leo-editor/issues/78

The problem was in the PythonQSyntaxHighlighter class: it does not work
*exactly* like QSyntaxHighlighter. The fix was to call w.seeInsertPoint()
in pqsh.reformat_blocks_helper.

The fix now involves the g.app.all_delayed_see switch.

Here is how to demonstrate the bug:

- Open leoPy.leo
- select @file ../external/PythonTidy.py
- search for print (whole word)
- The first match shows properly (it doesn't scroll).
- The second match does *not* scroll properly.

@language python
.. @+node:ekr.20141211065012.4: *4* Fixed bug 117: <Return> causes unwanted scrolling
https://github.com/leo-editor/leo-editor/issues/117

This was a side effect of fixing https://github.com/leo-editor/leo-editor/issues/78

Added g.app.allow_see and related logic.
.. @+node:ekr.20141211132803.1: *4* Fixed bug 119: new setting for @auto-org-mode
https://github.com/leo-editor/leo-editor/issues/119
.. @+node:ekr.20141223122529.4: *4* Fixed bug 126:  Inproper handling of @chapter nodes with non ASCII headlines
https://github.com/leo-editor/leo-editor/issues/126
Call g.toUnicode in cc.findChapterNode.
Added test for QString in g.toUnicode.
.. @+node:ekr.20141223125811.4: *4* Fixed bug 124: Viewrendered can't display @image
https://github.com/leo-editor/leo-editor/issues/124
.. @+node:ekr.20150206064817.7: *4* Fixed bug: Made last log line visible
LeoQtLog.put and app.writeWaitingLog changed.
.. @+node:ekr.20150215071358.4: *4* Fixed crash in v._cutLine after paste-retaining-clones
The fix was to add the obvious guard.

Traceback (most recent call last):

  File "c:\leo.repo\leo-editor\leo\core\leoCommands.py", line 556, in doCommand
    val = command(event)

  File "c:\leo.repo\leo-editor\leo\core\leoCommands.py", line 3642, in cutOutline
    c.deleteOutline("Cut Node")

  File "c:\leo.repo\leo-editor\leo\core\leoCommands.py", line 3932, in deleteOutline
    p.doDelete(newNode)

  File "c:\leo.repo\leo-editor\leo\core\leoNodes.py", line 1216, in doDelete
    p._unlink()

  File "c:\leo.repo\leo-editor\leo\core\leoNodes.py", line 1791, in _unlink
    child._cutLink(n,parent_v)

  File "c:\leo.repo\leo-editor\leo\core\leoNodes.py", line 2544, in _cutLink
    v.parents.remove(parent_v)

ValueError: list.remove(x): x not in list
.. @+node:ekr.20150215081440.4: *4* Fixed Zatz @nosent problem with @verbatim sentinels
The fix was to x.separate_sentinels.
I no longer adds @verbatim sentinels to the returned list of sentinels.
.. @+node:ekr.20150222171534.4: *4* Fixed bug 138: goto-global-line fails in @clean
@nocolor-node

https://github.com/leo-editor/leo-editor/issues/138

goto-global-line doesn't work properly on @nosent files.

It seems that it counts non-existing sentinel lines so it positions cursor
few lines before the requested. The exact difference between required line
number and found one depends on size of file and number of nodes, and also
grows with required line number.

You can exhibit this by looking in attached Leo file. For example Alt+g 45
should position cursor on the declaration line of function temp7(a), but it
positions cursor on line 39.

https://groups.google.com/group/leo-editor/attach/63f325cf79f6b2e9/nosent-goto-line-bug.leo?part=0.1
.. @+node:ekr.20150302115538.5: *4* Fixed bug 130: bug in fix to Issue #35
@language rest

bug in fix to Issue #35
https://github.com/leo-editor/leo-editor/issues/130

leoBridge sometimes assigns the same GNX to two distinct vnodes
https://github.com/leo-editor/leo-editor/issues/35

c.initObjects sets c.hiddenRootNode.fileIndex to 'hidden-root-vnode-gnx'

# wrong: fc.getLeoFile calls fc.setMaxNodeIndex after reading all nodes.
# correct: fc.getLeoFile calls ni.end_holding

ni.end_holding now calls ni.compute_last_index.
This *must* be done every time Leo reads a .leo file!
.. @+node:ekr.20150226111021.4: *4* Fixed bug 140: @clean does not preserve extended ASCII characters on read
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/140

There were two bugs:

1. A bug in the @file read logic. The fix was to call at.readFileToUnicode in at.readOpenFile.

2. A bug in the @clean read logic. The fix was a rewrite of read_at_nosent_lines.
.. @+node:ekr.20150304131453.5: *4* Fixed crasher in scroll-wheel code
This was a PyQt5 compatibility problem in lqtb.wheelEvent.
.. @+node:ekr.20150217154248.4: *4* Investigated bug 146: Recursive import script may add extra declaration lines
https://github.com/leo-editor/leo-editor/issues/146

It appears that fixing bug 140 fixed all the import problems!
.. @+node:ekr.20150211104036.471: *4* Fixed bug 142: bibtex plugin overwrites body text of @bibtex nodes
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/142

- Rewrote & simplified readBibTexFileIntoTree & writeTreeAsBibTex.
- Fixed the actual bug in onHeadKey.  Inserting a new node put the template in the root node rather than the newly-inserted node.
.. @+node:ekr.20150211104036.473: *4* Fixed bug 145: The already open dialog can cause Leo to hang
https://github.com/leo-editor/leo-editor/issues/145
.. @+node:ekr.20150206064817.9: *3* Code
.. @+node:ekr.20150206064817.4: *4* Removed unused file arguments in leoAtFile
From at.readOpenFile, at.scanHeader and at.scanText4.
.. @+node:ekr.20141208105807.4: *4* Added external/rope folder
# import rope ; print(rope)

rope = g.importModule('rope',verbose=True)
print(rope)
.. @+node:ekr.20150206064817.12: *3* Doc
.. @+node:ekr.20150206064817.13: *4* Leo must have sentinels, even without clones
Sentinels are necessary for clones, but sentinels would
still be necessary if clones did not exist.

Sentinels create **identity**, the notion that a particular
nodes starts at *this* place in the external file and
extends to *this other* place. Identity is a persistent,
invariant attribute of a file: Leo recreates all the nodes
of the external files when re-reading the file.

It's really that simple, but here are some consequences:

1. Identity remains even when the contents of a node
   changes. Thus, there is *no way* to use content-related
   mechanisms to recreate identity. This means, for example,
   that git can never help recover identity.

2. Leo's sentinels mark an *arbitrary* range of text within
   the external file. Thus, @auto files can never be as
   flexible as @file nodes.

.. @+node:ekr.20150206064817.8: *3* Features
.. @+node:ekr.20141206050611.6: *4* Improved recursive import command
- Fixed bug in ic.importFilesCommand that caused imported nodes to be placed incorrectly.
- Contract all imported nodes.
.. @+node:ekr.20150211035240.4: *4* refresh-from-disk is now undoable.
.. @+node:ekr.20150214032209.5: *4* import-file command create @nosent nodes
.. @+node:ekr.20150216074433.13: *4* Added --old-nosent command-line option
.. @+node:ekr.20150216074433.11: *4* The presence of @persistence enables @auto persistence
The @persistence code is now enabled if and only if a .leo file has an
@persistence node.

Removed @bool enable-persistence from leoSettings.leo.

Added @bool create-at-persistence-nodes-automatically = False.
.. @+node:ekr.20150220052100.4: *4* Support @clean as the preferred form of @nosent
.. @+node:ekr.20150223082820.8: *4* Added unformat-paragraph command
The reformat-paragraph command is surprisingly useful.  It is somewhat like the reverse of the reformat-paragraph command: it removes all extra whitespace from a paragraph.

Extraneous whitespace causes problems with rST text--various kinds of rST markup can't be split between lines. LeoDocs.leo used various workarounds, including preceding @ signs with a backslash.

unformat-paragraph makes all these problems disappear.  Furthermore, the appearance of the text in LeoDocs.leo improves provided that @wrap is in effect.
.. @+node:ekr.20150218093124.1: *4* To be documented: xslt
@language rest

I have been wondering whether it would be possible to use xslt to render
.leo files from web pages. This would build on Ville's work. First, a demo:

1. Copy the two attached files to the same folder on your hard drive.

Note: recent revs have added these two files to the top-level leo folder,
so you could also use those files instead. Both demo files are now in the
top-level leo-editor in the git repo *and* on leoeditor.com.

2. Open xslt-test.leo in your browser.  You should see something like this:

    test.leo

    This is a test

        node 1

        Node 1 text.

        node 2

        Node 2 text.

That is, browsers (tested with IE and Mozilla) can render .leo files on
your file system as html.

Alas, there are problems rending .leo files from urls instead of files. But
when we succeed we will have a read-only version of Leo as a web app!

===== About leo_to_html.xsl

Ville created leo_to_html.xsl, but I didn't understand its significance
until early this morning. This xslt file tells a web browser (or other xslt
processor) how to render a .leo file as html.

I made several changes this morning to leo_to_html.xsl so that it works
with the "tryit" editor for xslt at w3schools:
http://www.w3schools.com/xsl/tryxslt.asp?xmlfile=cdcatalog&xsltfile=cdcatalog_ex1

This editor is a good way to discover problems either in .xsl files
themselves or references to .xsl files from .xml files.

===== Problems

It does not seem possible to use leo_to_html.xsl directly:

1. Visiting http://leoeditor.com/xslt-test.leo does not work.

The browser renders xslt-test.leo xml, not html. That is, the browser does
not perform the xslt transformations.

2. Visiting
   https://github.com/leo-editor/leo-editor/blob/master/xslt-test.leo shows
   the "raw" xml, without the xslt transformations being applied.

The reason is clear enough. The url is a *representation* of the .leo file,
not the .leo file itself.

3. xslt-test.leo contains the following line::

    <?xml-stylesheet type="text/xsl" href="leo_to_html.xsl"?>

This line is supposed to be set by the following setting::

    @string stylesheet = ekr_test

This default is useless, and setting it to::

    @string stylesheet = type="text/xsl" href="leo_to_html.xsl"

does not appear to work. I'll look into this, but cutting and pasting the
desired <?xml-stylesheet > element into .leo files should work well enough
for testing.

4. By default, Mozilla refuses to render xslt-test.leo containing the
   following stylesheet element::

    <?xml-stylesheet type="text/xsl" href="leoeditor.com/leo_to_html.xsl"?>

In other words, Mozilla refuses to execute "remote" .xsl files. A cryptic
message is shown instead. Googling that message gives:
http://stackoverflow.com/questions/3420513/firefox-and-remote-xsl-stylesheets

Apparently Mozilla enforces "same origin" policy. But it's no good relaxing
that policy: browsers on smart phones are probably even more restrictive.

===== Conclusions

The tryit editor shows that it is possible to apply arbitrary xslt style
sheets to arbitrary xml files. We should be able to create a page, say on
leoeditor.com, that would render .leo files properly using leo_to_html.xsl.
The question is, how exactly to do this?

This is exciting, despite the problem listed above, and probably others.
The xslt approach is almost infinitely easier than alternative approaches.

Once we can properly render, say, a link to a .leo file on GitHub, we can
start improving leo_to_html.xsl. The obvious thing to do is to change the
xsl so that it generates html similar to that generated by Bernhard
Mulder's mod_http plugin.
.. @+node:ekr.20150227161923.4: *4* Added @bool make-node-conflicts-node = True
This setting is highly recommended.

The message is given when clone conflicts may have caused data loss.
.. @+node:ekr.20150225133846.10: *3* Major features
.. @+node:ekr.20150206064817.5: *4* @clean updates automatically
Rev 7a851eb enables automatic updating of @nosent files. When loading a .leo file, Leo will automatically update @nosent trees if the corresponding external file has been changed outside Leo! This is one of the most important advances in Leo's history.

As discussed yesterday, using @nosent files is about twice as fast as using @shadow trees. No shadow directories or shadow files are needed: it's trivial to recreate the "shadow" data from the @nosent tree!

Why, of why, did we never see this before? It could have been done at any time since Leo supported @shadow.

Finally, Leo reports all changes using the "recovered nodes" mechanism. No new code was required: the core @shadow code was not changed in any way.

at.readOneAtNosentNode and two simple helpers handle all the details. readOneAtNosentNode uses the @shadow algorithm to compute the updated lines of the @nosent tree, exactly as described yesterday. If the new lines match the old, nothing more need be done: we can use the existing @nosent tree as is. Otherwise, the new lines are passed to at.readOpenFile to delete the old tree and create the @nosent tree. This part of the code is similar to the code in at.read, but it is much simpler because caching is not involved. In essence, everything "just worked" from the get go.
.. @+node:ekr.20150223111349.4: *4* Why @clean is so important
@clean removes barriers to using Leo that prevented its widespread adoption.  Only now, after the barriers have been removed, do I see how important those barriers were.

For the very first time, Leo can be used in *all* situations without compromise.  There is no longer any need to make excuses for sentinel lines, or argue whether people should accept them.  Sentinels are simply gone.

Not only did I not see how damaging sentinels might be for non-Leo users, I did not see how inconvenient sentinels might be for my *own* work flow.  This was a shocking revelation.  To illustrate, here is the first draft of a new comparison between @clean and @file in the programming tutorial:

QQQQQ
This tutorial discussed @clean first for three reasons:

1. To avoid making excuses for sentinel lines.

2. To brag about the @clean update algorithm.

3. It is often more convenient to avoid sentinels. For example, when I study other people's code I do the following:

- Create a git repo of the directory to be studied, adding all the source files and doing an initial commit.
 
- Use an `import script`_ to create the desired @clean nodes.

- Explicitly save all the imported files using Ctrl-Shift-W (write-at-file-nodes).

- Use `git`_ diff to ensure that no important changes have been made while importing the nodes.

- Use git diff to track any changes I make (such as adding tracing or debugging statements) for the purposes of studying the code.

Using @clean is an essential part of this work flow. The diffs would be much harder to read if I had imported files into @file trees instead.

Nevertheless, there are advantages to using @file instead of @clean. All these advantages arise because external files created by @file contain explicit outline structure.

1. Leo can read @file trees more quickly and without guesses. There is never any need for you to move ambiguous lines from one node to another.
  
2. Sentinels allow you to share structure simply by sending the external file. This is an overwhelming advantage for Leo's developers.
  
3. A minor advantage: @file makes Leo files smaller. Leo stores the entire @clean *tree* in the .leo file, but only stores the top-level @file *node* in the .leo file.
  
In short: use @clean for most purposes. Use @file when all developers in a project use Leo.
QQQQQ

The point is that I have just, in the past few days, realized how badly sentinels interfered with git diffs.

Imo, @clean is the long-sought breakthrough that just might allow Leo to "go viral".  In retrospect, we can see that sentinels were a *fundamental* problem that neither exhortations nor documentation could remedy.  @clean removes the one and only real barrier to using Leo everywhere.
.. @+node:ekr.20150225133846.9: *4* A web page that displays .leo files
http://leoeditor.com/load-leo.html is a web page that will show you the contents of a .leo file.

The "Upload from your hard drive" button loads a .leo file from you hard drive. Alternatively, you can paste a url into the text box and click the "Upload from the internet" button.  If you want to view a .leo file on github, be sure to use the "raw" url.  For example, use::

    https://raw.githubusercontent.com/leo-editor/leoeditor/master/leo/test/test.leo

*not*::

    https://github.com/leo-editor/leo-editor/blob/master/leo/test/test.leo

Either way, the leoeditor.com server will replace the page by the .leo file as rendered by Ville's leo_to_html.xsl file. The new page will be called something like::

    http://leoeditor.com/show-leo-0004.leo

There can be up to 1000 such pages open at once.

**Important**: At present, there must be *some* kind of <?xml-stylesheet> element in the .leo file. Many leo files have the following do-nothing line near the start::

    <?xml-stylesheet ekr_test?>

That's fine. If there is *any* such line, Speed's server-side stuff will replace it with::

    <?xml-stylesheet type="text/xsl" href="leo_to_html.xsl"?>

Speed will soon add the above line even if there is no stylesheet element.

I am working on leo_to_html.xsl so that nodes can be expanded and contracted.
.. @+node:ekr.20150225082604.6: *4* Added --diff command-line option
@language rest
@wrap

Leo performs a diff automatically after load when --diff is in effect and exactly two files are given.

===== How to configure git diff:

An excellent reference:
http://stackoverflow.com/questions/255202/how-do-i-view-git-diff-output-with-a-visual-diff-program

The essential idea: what you refer to in the config file is actually a shell (/bin/sh) script, not a DOS script.

Here is git-editor.bat::
@language shell

    #!/bin/sh
    # Wrapper for git editor
    "C:/Program Files (x86)/wscite/scite.exe" "$*"

Here is git-difftool.bat::
    
    #!/bin/sh
    
    # sh wrapper for external git diff
    # sourceTree now calls this wrapper for external diffs.
    
    # http://stackoverflow.com/questions/255202/how-do-i-view-git-diff-output-with-a-visual-diff-program
    
    # diff is called by git with 7 parameters:
    #  path old-file old-hex old-mode new-file new-hex new-mode
    #  "<path_to_diff_executable>" "$2" "$5" | cat
    
    C:/python27/python.exe C:/leo.repo/leo-editor/launchLeo.py --diff "$2" "$5" | cat
.. @-all

# Put this @language after the @all as a kind of permanent unit test.

.. @@pagewidth 60
.. @@wrap
.. @-leo
