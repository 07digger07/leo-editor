#@+leo-ver=5-thin
#@+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
#@+all
#@+node:ekr.20130807203905.16589: ** 4.11 b1 projects
@language rest
#@+node:ekr.20130821062332.11235: *3* Fixed bug 1208942: Leo holding directory/file handles after file close?
@language rest

https://bugs.launchpad.net/leo-editor/+bug/1208942
Leo holding directory/file handles after file close?

Open Leo
2. Create a new directory "test"
3. Create a new Leo file, save as "test/test.leo"
4. Create @file node in test.leo, save file.
5. Close test.leo, but keep Leo open (with another .leo open in a different tab)
6. Attempt to delete "test" directory <<-- FAILS, "open in another application"
7. Close Leo completely
8. Delete "test" directory <<-- Succeeds, now that Leo's closed

Actually, only just opening a .leo file without any @file nodes was enough to keep a file open.

The fix was to close theFile in fc.getLeoFile.

@language python
#@+node:ekr.20130821062332.11233: *3* Added c.recursiveImport and ic.recursiveImportController
This will reduce duplicate scripts.
#@+node:ekr.20130821062332.11236: *3* Added yes-to-all button when prompting for dangerous writes
@language rest

For example, when warning about existing files.

What I did:
    
1. Added yesToAllMessage keyword arg to all runAskYesNoCancelDialog methods.

2. **only** at.writeAll manages at.canCancelFlag, at.cancelFlag and at.yesToAll.

3. Path changed logic in at.writeAllHelper now calls at.promptForDangerousWrite.

4. at.promptForDangerousWrite sets cancelFlag and yesToAll *only* if canCancelFlag is True.
   This ensures that these flags are not changed outside the code managed by at.writeAll.
#@+node:ekr.20130510070942.10611: *3* Fixed bug 1162307: Undoing a headline change does not change focus to the headline
Undoing a headline change does not change focus to the headline
https://bugs.launchpad.net/leo-editor/+bug/1162307
#@+node:ekr.20130805134749.12435: *3* Fixed bug 1182695: the tricky string that leo can not handle
@language python

the tricky string that leo can not handle 
https://bugs.launchpad.net/leo-editor/+bug/1182695

def but_quotes_at_the_end_of_a_triple_quoted_string_are_still_tricky(self):
    string = """Hello "world\""""
    
what

"\"" b # Escape works.

The fix was to the escape-handling code in match_span.
#@+node:ekr.20130908104426.11259: *3* Investigated bug 1182694: not display unique in leo and other editor
@language rest

https://bugs.launchpad.net/leo-editor/+bug/1182694

A string-formatting bug.

https://groups.google.com/forum/?fromgroups#!topic/leo-editor/uy_7dP1uY8w

https://leo-editor.googlegroups.com/attach/4b330006a649027d/SC-2013_5_21_14_12_31.png?view=1&part=5

https://leo-editor.googlegroups.com/attach/4b330006a649027d/SC-2013_5_21_14_12_19.png?view=1&part=4

This is a consequence of an underindented comment.  Like this::

        def test(self):
            string = "abc,\n\
    xyz"

http://leoeditor.com/directives.html#index-7

An underindented line is a line of body text that is indented less then the
starting line of the class, method or function in which it appears. Leo
outlines can not represent such lines exactly: every line in an external
file will have at least the indentation of any unindented line of the
corresponding node in the outline. Leo will issue a warning (not an error)
for underindented Python comment lines. Such lines can not change the
meaning of Python programs.
#@+node:ekr.20130908104426.11267: *3* Fixed bug 1193870 Delete Menu doesn't work in Qt
@language rest

https://bugs.launchpad.net/leo-editor/+bug/1193870

The fix was to leoQtMenu.destroy.  Previously, it did nothing.

Here is a test script::

@language python

    m = c.frame.menu
    name = 'Programming'
    menu = m.getMenu(name)
    if menu:
        m.deleteMenu(name)
    else:
        m.createNewMenu(name)
    
#@+node:ekr.20130908104426.11245: *3* Fixed bug 1019794: p.copyTreeFromSelfTo, chould deepcopy p.v.u
https://bugs.launchpad.net/leo-editor/+bug/1019794

Added the following to copyTreeFromSelfTo:

    p2.v.u = copy.deepcopy(p.v.u)
#@+node:ekr.20130909063103.11556: *3* Fixed bugs 1183855 & 1212332 involving missing select hooks
1183855 (un)select hooks not fired when node selection changed by find command
https://bugs.launchpad.net/leo-editor/+bug/1183855

1212332 Insert doesn't fire unselect / select events
https://bugs.launchpad.net/leo-editor/+bug/1212332


Select and unselect hooks were not being called when a command (including
the find command) left focus in the headline.

The fix was to c.redraw(!) It now calls c.frame.tree.select before calling
c.frame.tree.redraw.
#@-all

# Put this @language after the @all as a kind of permanent unit test.

#@@language python # Override the default .txt coloring.

#@@pagewidth 60
#@-leo
