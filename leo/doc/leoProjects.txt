.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20150417044242.1: ** 5.2-b1
.. @+node:ekr.20150512102759.1: *3* Code
.. @+node:ekr.20150512102801.1: *4* Decorators simplify Leo's command dispatching
Please read carefully if you write plugins or are one of Leo's core developers.  Everyone else can safely ignore this post.

The present (g.new_dispatch) project simplifies Leo's code as follows:

1. Decorators will define all Leo commands.  All getPublicCommands methods will disappear, along with their association lists of command names and bound methods.

2. Leo will never call c.universalCallback.

I understand neither it's docstring, nor its code, nor why it is needed. Leo will be better off without it and the corresponding 'wrap' argument to k.registerCommand. This wrapper gives rise to wretched code::

    @g.command('cke-text-open')
    def cmd_OpenEditor(kwargs, at_rich=False):
        '''Open the rich text editor, hide the regular editor.'''
        c = kwargs['c'] if isinstance(kwargs, dict) else kwargs

Apparently, kwargs might be two different kinds of objects depending on who calls the function.  This kind of code must go.  In an emergency, code could add ivars/attributes to exiting events, but even that would be too complex by half.

3. The Plugin class in plugins_menu.py creates Leo commands for functions whose names start with ``cmd_``.  It took me hours yesterday to figure out that this was happening.

<< Look for additional commands >> creates yet another wrapper, with yet another signature. The wrapper now has a more conforming signature and a better name::

    def plugins_menu_wrapper(kwargs, cmd=cmd):
        return cmd(kwargs['c'])

This signature allows a unit test to pass even when plugins_menu_wrapper is not wrapped again.

Happily, all of this is going to go away. ``@g.command`` will define all commands in plugins. No more invisible ``cmd_`` naming convention.

4. class AtButtonCallback now supports the __name__ attribute using a new __getattr__ method. This allows k.registerCommand not to know about the AtButtonCallback wrapper.

5. The LeoKeyEvent class now has a get method.  Code can now call event.get('c') in all cases.  Probably ditto for kwargs.get('c').

**Summary**

The new_dispatch project simplifies some of the most complex code in Leo.  It is worth a week's work.

I followed three principles while simplifying the code:

1. Eliminate malignant if statements::

    c = kwargs['c'] if isinstance(kwargs, dict) else kwargs

proliferates implementation details from one part of Leo to another.  As a result, it becomes much harder to change code without side effects.  I have been dealing with such side effects all week.

2. Regularize interfaces.

- ``@cmd`` or ``@g.command`` decorators will define all Leo commands.
- The ``cmd_`` convention will disappear, along with the complex code that creates it.
- event.get('c') will work in any code decorated by ``@cmd`` or ``@g.command``.
- AtButtonCallback instances now have a __name__.

3. Regularize objects.

Changing the interface of an object by wrapping it is unacceptable. c.universalCallback must go.

.. @+node:ekr.20150513163611.1: *5* What I did
@language rest
@wrap

- Defined all commands in leoPlugins.leo with @g.command.
- Eliminate the "cmd_" convention.
  The g.command decorator now sets func.is_command and func.command_name.
  Plugin.create_menu is now much simpler.
- All decorated commands now use the "event" arg:

    @g.command('command-name')
    def my_command(event=None):
        ...
    
    @cmd('command-name')
    def my_command(self,event=None):
        ...
.. @+node:ekr.20150501041440.1: *4* Reorganized Leo's commands files
The leo/commands directory contains the new code.
.. @+node:ekr.20150503050557.1: *4* re: replace all has_key by "in"
.. @+node:ekr.20150622130738.1: *4* Verified that c.p.copy() is always redundant
Examined c.p and c.currentPosition
.. @+node:ekr.20150427042446.1: *3* Features
.. @+node:ekr.20150412053053.1: *4* Finished leoOPML plugin
.. @+node:ekr.20150420130845.1: *4* Added File:Print menus
jasonic

Leo deserves good friendly printing features which anyone can use. At the moment we have a confusing patchwork of choices. Printing Leo seems to be both harder and easier than  first meets the eye.

print-to-web (htmlize) should definitely be on Leo's missing PRINT MENU.

Having a little library of export scripts--well named, documented and intended to aid printing woudl go a long way. Thesse scripts anyone coiuld be called by onayone given a Leo Outline, accessing a navabr button. PRINT MENU or list. Or they can just insert the appropriate script  into an outline giving finer grained print control on the fly.
.. @+node:ekr.20150416060248.1: *4* Allow Leo directives in @data abbreviations-subst-env
The fix was to create a dummy root position in abbrev.init_env.
.. @+node:ekr.20150422124650.1: *4* Added c.backup
Useful for per-file backups.
.. @+node:ekr.20150425135844.1: *4* Added support for @data history-list
If you aren't using the @data history-list setting chances are that you missing a big chance to simplify your workflow. At one time I thought the history list was a minor feature.  I could not have been more wrong.

The body of the @data history-list node should contain a list of command names, one per line.  This list can include commands created by @command/@button nodes.

You execute items in the history list by doing Alt-X followed by an up arrow to get the first item in the list, or one or more down arrows to get later items in the list.  The last item you execute from this list goes to the head of the list.  Once you have executed an item, Ctrl-P (repeat complex command) will re-execute it.

The history list works well for commands that aren't quite worth a separate key binding, but that nevertheless you find you using quite often.

Even better, the history list is a perfect complement to @button and @command nodes that are tailored for a particular outline. For example, there is a button called cfa-code in leoPy.leo that executes the clone-find-all-flattened command starting at the top-level "Code" node.
.. @+node:ekr.20150426052139.1: *4* Added @ifenv, improved @ifplatform & @ifhostname
@language rest
@wrap

Here are the details:

@ifenv name, one-or-more-comma-separated values
 
Includes descendant settings if os.getenv(name) matches any of the values.

- Case is significant in the *name* of the environment variable.
- Case is ignored in the *values*.

Examples:

@ifenv HOSTNAME,bob
    Enables descendant settings if os.environ('HOSTNAME') is 'Bob' or 'bob'
   
@ifenv EDITOR,leo,lion
    Enables descendant settings if os.environ('Editor') is 'Leo' or 'Lion', etc.

@ifplatform name,  one-or-more-comma-separated values.
  
Includes descendant settings if sys.platform matches any of the values, ignoring case.

Examples:

@ifplatform darwin,linux2
    Enables descendant settings for MacOS and Linux.

@ifplatform win32
    Enables descendant settings for Windows
  
@ifhostname name

Includes descendant settings if os.environ('HOSTNAME') == name

@ifhostname !name

Includes descendant settings if os.environ('HOSTNAME') != name
.. @+node:ekr.20150211131925.4: *4* abbreviations now support auto-close quotes
https://groups.google.com/d/msg/leo-editor/yJLz-p3I4mY/Pqa1phYN_10J
.. @+node:ekr.20150325052301.1: *4* Added enhancement 165: vim-open-file command
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/165

Later: preserve cursor positions.

All the changes were to the ExternalFilesController class.
.. @+node:ekr.20150530084545.1: *4* Added support for @beautify and @nobeautify
These directives are inherited as usual.
.. @+node:ekr.20150529182422.1: *4* Rewrote Leo's Python beautifier
@language rest
@wrap




.. @+node:ekr.20150609110852.1: *4* Alt-N (goto-next-clone) falls backs to find-next-clone
.. @+node:ekr.20150619082025.1: *4* Added optional Find Dialog
Enable with: @bool use_find_dialog = True
Related setting: @bool close-find-dialog-after-search = False

Defaults are as shown above.
.. @+node:ekr.20150619082041.1: *4* Completed enhancement 177: Improved operation of Find commands
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/177

1. Leo now shows find-status in the status area in the main window and the Find dialog if it exists.

2. Ctrl-F pre-loads any selected text into the search text.

3. If the search text is mixed case, then ignore case is forced off.

This is controlled by the new @bool auto-set-ignore-case setting, True by default.

.. @+node:ekr.20150611163526.1: *4* Completed enhancement 183: Improve focus-border handling in qt stylesheet
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/183

Added @ignore @data qt-gui-user-style-sheet to leoSettings.leo.
This contains  alternative active pane highlighting.

This completes enhancement #183: mprove focus-border handling in qt stylesheet
https://github.com/leo-editor/leo-editor/issues/183

It would be tricky, and not terribly useful, to fold this user stylesheet into
the main @data qt-gui-plugin-style-sheet, especially considering that
themes may want to use qt-gui-user-style-sheet.

Also, the default settings aren't bad, but I prefer to change qt-gui-user-style-sheet directly.
.. @+node:ekr.20150620103337.1: *4* Added new Themes machinery
leoSettings.leo now contains a new top-level node::

    @ignore Themes: copy to last top-level setting in myLeoSettings.leo

The body text tells what to do with it, namely:

To enable a theme:
   
1. Copy this entire tree to myLeoSettings.leo.
2. Move the tree so it is the last top-level node under @settings.
3. Remove the @ignore from the copy of this node.
4. Enable one of the three themes below by removing @ignore for its node.
5. Test by opening another Leo outline.

Important Notes

1. The "Themes" node does not define @data qt-gui-plugin-style-sheet.

Instead the new themes machinery uses the so-called "fully parameterized" stylesheet that we have all been using for at least several months now.  This stylesheet is defined as a descendant of the "Appearance" node.

2. The only functional theme is a new ekr_dark theme.  It illustrates how to use the new themes machinery.

- This theme uses a small, custom @data qt-gui-user-style-sheet that adjust colors around outline indicators.

- There is a tree call "Common to all themes" which contains settings that probably can be shared by most themes.  Naturally, setting in that tree can be overridden as you desire.

3. The new themes machinery is supposed to be completely self contained.  That is, there should be no need to use a script to generate a theme.

Yes, the user must fill in all appearance-related settings.  But most users will already have done this, so adjusting the settings for a theme should be straightforward.

4. The "Common to all themes" node contains an "Outline indicators" node that specifies a relative path to outline indicator icons (arrow icons or plus/minus) icons.  The path can be relative to either the users home directory or (as shown in leoSettings.leo) relative to the leo/Icons directory. 
.. @+node:ekr.20150622075706.1: *4* @wrap now honored immediately
This fixes an annoying hangnail.

- Added match_at_wrap to jEdit colorizers.
- Added force keyword option to all setWrap methods.
  This is needed because text can be colorized before c.p.b stabilizes.
.. @+node:ekr.20150619075613.1: *4* Leo now shows find status in status line
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/177

Rev a1c8133:


Leo now more clearly shows the status of successful or failed searches in the status line. Imo, this is an important addition, especially for failed searches.  You could call this the last part of #177

Without this feedback, a failed search appears to do nothing, and my inevitable response was, "huh?, what just happened?"  The feedback is useful for successful searches, but successful searches change at least the selected text and often also change the selected node, so there is less huh? involved.

By default, Leo reports successful searches with white text on a blue background and failed searches with white text on a red background. These colors work pretty well even for dark themes.

You can choose these colors using the following settings in

    leoSettings.leo#@settings-->Appearance (change these first)-->
    Qt Gui settings-->Colors-->Status area colors::
   
         @color find-found-bg = blue
         @color find-found-fg = white
         @color find-not-found-bg = red
         @color find-not-found-fg = white
     
find.showStatus now gets proper colors from settings.
     
Changed the signature of QtStatusLineClass.putStatusLine and its helpers.
.. @+node:ekr.20150628182314.1: *4* Added help-for-keystroke command
Useful: tells the command name or names associated with any keystroke.

Prompts for a single character: shows corresponding command.

Added leoHelpCommands.helpForKeystroke
.. @+node:ekr.20150629080742.1: *4* cfa commands now preload search pattern with selected text
- c.cloneFindAll/FlattenedAtNode now preload the search argument
  *before* selecting the node.
- extendToWord now takes a new "w" keyword arg, so event is not needed.
- minibufferCloneFindAll/Flattened now take a new "preloaded" keyword argument.
.. @+node:ekr.20150227040245.10: *4* Added find-def & find-var
@language rest
@wrap

Leo's new find-def & find-var commands
https://groups.google.com/d/msg/leo-editor/mq_sQ2cpa9k/3rtHZyKnMTIJ

About recent changes to Leo's find commands
https://groups.google.com/d/msg/leo-editor/_y1u2Vlm-0I/LoAGSH_HBgsJ

Done:
- find-def and F3/F2 work together.
- @bool find-ignore-duplicates = False
- Ctrl-click on a word executes find-def.

(Maybe) Multiple defs:
- Prefer matches in @<file> trees.
- Do cfa-flattened. (Only if enabled by @bool find-def-uses-cfa-flattened).
- Bring up popup.
.. @+node:ekr.20150629080954.1: *5* posts
https://groups.google.com/d/msg/leo-editor/p3MR1es0Ez0/U4ME-UAuf0AJ

===== Matt

Wanted Leo function or plugin: Ctrl-X click or R-click {selected text} or ... that jumps to the associated node or function.

Consider the following code:

    print "Downloading", ', '.join(packages)
    for p in packages:
        do_download(p)
        ball(p)
        md5(p)

Wouldn't be nice to ctrl-click `do_download` and have Leo navigate to whatever node contains def do_download(): ?

===== Terry:

Seems like the codewise ctags thing Ville worked on does most of that, may need refreshing though. 

.. @+node:ekr.20150630092648.1: *5* ctrl-click now supports find-def
The code involves lqtb.onMouseUp and g.openUrlOnClick
.. @+node:ekr.20150630160037.1: *4* Added clone-to-at-spot command
Create a clone of the selected node and move it to the last @spot node
of the outline. Create the @spot node if necessary.
.. @+node:ekr.20150611163439.1: *4* Completed enhancement 186: Left Gutter Line numbers
https://github.com/leo-editor/leo-editor/issues/186

Controlled by the following new settings in leoSettings.leo, with defaults as shown::
    
    @bool use_gutter = True
    @color gutter-bg = @LightSteelBlue1
    @color gutter-fg = black
    @int gutter-w-adjust = 12
    @int gutter-y-adjust = 10
    @string gutter-font-family = @font-family
    @string gutter-font-size = @small-font-size
    @string gutter-font-style = @font-style
    @string gutter-font-weight = @font-weight
    
Code involves:
    
- dw.createBodyPane.
- class NumberBar(QFrame)
- class LeoLineTextWidget(QFrame)
.. @+node:ekr.20150710064429.1: *4* Added @bool preload-find-pattern
Rev abe5563f

Added @bool preload-find-pattern and associated logic.
This setting only affects Ctrl-F (start-search).
Other searches always preload by default.  This may change.
.. @+node:ekr.20150710082301.1: *5* Found: (flattened) preloadFindPattern
.. @+node:ekr.20131117164142.16996: *6* find.minibufferCloneFindAllFlattened
@cmd('clone-find-all-flattened')
@cmd('find-clone-all-flattened')
def minibufferCloneFindAllFlattened(self, event=None, preloaded=None):
    c = self.c; k = self.k; tag = 'clone-find-all-flattened'
    state = k.getState(tag)
    if state == 0:
        w = self.editWidget(event) # sets self.w
        if w:
            if not preloaded:
                self.preloadFindPattern(w)
            self.stateZeroHelper(event, tag, 'Clone Find All Flattened: ',
                self.minibufferCloneFindAllFlattened)
    else:
        k.clearState()
        k.resetLabel()
        k.showStateAndMode()
        self.generalSearchHelper(k.arg, cloneFindAllFlattened=True)
        c.treeWantsFocus()
.. @+node:ekr.20150629072547.1: *6* find.preloadFindPattern
def preloadFindPattern(self, w):
    '''Preload the find pattern from the selected text of widget w.'''
    c, ftm = self.c, self.ftm
    # Enhancement #177: Use selected text as the find string.
    if w:
        if w.hasSelection():
            s = self.previous_find_pattern
            s2 = w.getSelectedText()
            # Careful: Do nothing if the previous search string matches, ignoring case.
            # This prevents an "ignore-case" search from changing the ignore-case switch.
            if s.lower() != s2.lower():
                ftm.setFindText(s2)
                # This does not work.
                if False and c.config.getBool('auto-set-ignore-case', default=True):
                    mixed = s2 not in (s.lower(), s.upper())
                    self.ftm.set_ignore_case(not mixed)
            ftm.init_focus()
        else:
            c.editCommands.extendToWord(event=None, select=True, w=w)
            s2 = w.getSelectedText()
            if s2:
                self.find_text = s2
                ftm.setFindText(s2)
    s = self.ftm.getFindText()
    self.previous_find_pattern = s
.. @+node:ekr.20131119060731.22452: *6* find.startSearch
@cmd('start-search')
def startSearch(self, event):
    c = self.c
    w = self.editWidget(event)
    if w and c.config.getBool('preload-find-pattern', default=False):
        self.preloadFindPattern(w)
    self.find_seen = set()
    if self.minibuffer_mode:
        self.ftm.clear_focus()
        self.searchWithPresentOptions(event)
    else:
        self.openFindTab(event)
        self.ftm.init_focus()
.. @+node:ekr.20131117164142.17011: *6* find.minibufferCloneFindAll
@cmd('clone-find-all')
@cmd('find-clone-all')
def minibufferCloneFindAll(self, event=None, preloaded=None):
    c = self.c; k = self.k; tag = 'clone-find-all'
    state = k.getState(tag)
    if state == 0:
        w = self.editWidget(event) # sets self.w
        if w:
            if not preloaded:
                self.preloadFindPattern(w)
            self.stateZeroHelper(event, tag, 'Clone Find All: ',
                self.minibufferCloneFindAll)
    else:
        k.clearState()
        k.resetLabel()
        k.showStateAndMode()
        self.generalSearchHelper(k.arg, cloneFindAll=True)
        c.treeWantsFocus()
.. @+node:ekr.20150329055227.1: *6* c.cloneFindAllAtNode
def cloneFindAllAtNode(self, h, top_level):
    '''
    Find and select a node with headline h,
    then execute clone-find-all.
    '''
    c = self
    if top_level:
        p = g.findTopLevelNode(c, h)
    else:
        p = g.findNodeAnywhere(c, h)
    if p:
        # Preload the find pattern *before* selecting the new node.
        c.findCommands.preloadFindPattern(w=c.frame.body.wrapper)
        # The next two statements are required.
        c.selectPosition(p, enableRedrawFlag=True)
        c.bodyWantsFocusNow()
        # c.k.simulateCommand('clone-find-all')
        c.findCommands.minibufferCloneFindAllFlattened(preloaded=True)
    else:
        g.es_print('not found: Code')
.. @+node:ekr.20150329162736.1: *6* c.cloneFindAllFlattenedAtNode
def cloneFindAllFlattenedAtNode(self, h, top_level):
    '''
    Find and select a node with headline h,
    then execute clone-find-all-flattened.
    '''
    c = self
    if top_level:
        p = g.findTopLevelNode(c, h)
    else:
        p = g.findNodeAnywhere(c, h)
    if p:
        # Preload the find pattern *before* selecting the new node.
        c.findCommands.preloadFindPattern(w=c.frame.body.wrapper)
        # The next two statements are required.
        c.selectPosition(p, enableRedrawFlag=True)
        c.bodyWantsFocusNow()
        # c.k.simulateCommand('clone-find-all-flattened')
        c.findCommands.minibufferCloneFindAllFlattened(preloaded=True)
    else:
        g.es_print('not found: h' % (h))
.. @+node:ekr.20150710085715.1: *4* Added support for @bool syntax-error-popup
@language rest
@wrap
.. @+node:ekr.20150717103242.1: *4* Added clear-log command
.. @+node:ekr.20150513180101.1: *4* find-all now write to the body of a new top-level node
Pretty much like clone-find-all.
.. @+node:ekr.20160124055305.1: *4* Created make_stub_files.py
@language rest
@wrap

Announcing make_stub_files.py

This post introduces the make_stub_files.py script, explaining what it does, how it works and why it is important. The script is at
GitHubGist: https://gist.github.com/edreamleo/5c2d625e223e3d04c11d.
All contributions welcome.

===== Executive summary

The make_stub_files script eliminates much of the drudgery of creating
python stub (.pyi) files https://www.python.org/dev/peps/pep-0484/#stub-files
from python source files. To my knowledge, no such tool presently exists.

The script does no type inference. Instead, it creates function annotations using user-supplied **type conventions**, pairs of strings of the form "name: type-annotation".

A **configuration file**, ~/stubs/make_stub_files.cfg, specifies the **source list**, (a list files to be processed), the type conventions, and a list of **prefix lines** to be inserted verbatim at the start of each stub file.

This script should encourage more people to use mypy. Stub files can be used by people using Python 2.x code bases. As discussed below, stub files can be thought of as design documents or as executable and checkable design tools.

===== What the script does

For each file in source list (file names may contain wildcards), the script creates a corresponding stub file in the ~/stubs directory.  This is the default directory for mypy stubs. For each source file, the script does the following:

1. The script writes the prefix lines verbatim. This makes it easy to add common code to the start of stub files.  For example:

    from typing import TypeVar, Iterable, Tuple
    T = TypeVar('T', int, float, complex)
    
2. The script walks the parse (ast) tree for the source file, generating stub lines for each function, class or method. The script generates no stub lines for defs nested within other defs.

For example, given the naming conventions:

    aList: Sequence
    i: int
    c: Commander
    s: str
    
and a function:

    def scan(s, i, x):
        whatever
        
the script will generate:

    def scan(s: str, i:int, x): --> (see below)
    
===== Handling function returns
    
The script handles function returns pragmatically.  The tree walker simply writes a list of return expressions for each def.  For example, here is the output at the start of leoAst.pyi:

class AstDumper:
    def dump(self, node: ast.Ast, level=number) -> 
        repr(node), 
        str%(name,sep,sep1.join(aList)), 
        str%(name,str.join(aList)), 
        str%str.join(str%(sep,self.dump(z,level+number)) for z in node): ...
    def get_fields(self, node: ast.Ast) -> result: ...
    def extra_attributes(self, node: ast.Ast) -> Sequence: ...

The stub for the dump function is not syntactically correct because there are 4 returns listed. You must edit stubs to specify a proper return type.  For the dump method, all the returns are obviously strings, so its stub should be:

    def dump(self, node: ast.Ast, level=number) -> str: ...

Not all types are obvious from naming conventions. In that case, the human will have to update the stub using the actual source code as a guide. For example, the type of "result" in get_fields could be just about anything. In fact, it is a list of strings.

===== The configuration file

As mentioned above, the configuration file, make_stub_files.cfg, is located in the ~/stubs directory.  This is mypy's default directory for stubs.

The configuration file uses the .ini format. It has two sections. The [Global] section specifies the files list and prefix lines.  The [Types] section specifies naming conventions.  For example:

    [Global]
    files:
        ~/leo-editor/leo/core/*.py
        
    prefix:
        from typing import TypeVar, Iterable, Tuple
        T = TypeVar('T', int, float, complex)

    [Types]
    aList: Sequence
    c: Commander
    i: int
    j: int
    k: int
    n: int
    node: ast.Ast
    p: Position
    result: str
    s: str
    v: VNode

===== Why this script is important

The script eliminates most of the drudgery from creating stub files. Creating a syntactically correct stub file from the output of the script is straightforward.  

Stub files are real data. mypy will check the syntax for us. More importantly, mypy will do its type inference on the stub files.  That means that mypy will discover both errors in the stubs and actual type errors in the program under test. There is now a simple way to use mypy!

Stubs express design intentions and intuitions as well as types. We programmers think we *do* know most of the types of arguments passed into and out of functions and methods. Up until now, there has been no practical way of expressing and *testing* these assumptions. Using mypy, we can be as specific as we like about types.  For example, we can simply say that d is a dict, or we can say that d is a dict whose keys are strings and whose values are executables with a union of possible signatures.  In short, stubs are the easy way to play with type inference.

Most importantly, from my point of view, stub files clarify issues that I have been struggling with for many years. To what extent *do* we understand types? mypy will tell us. How dynamic (RPython-like) *are* our programs?  mypy will tell us. Could we use type annotation to convert our programs to C.  Heh, not likely, but the data in the stubs will tell where things get sticky.

Finally, stubs can simplify the general type inference problem.  Without type hints or annotations, the type of everything depends on the type of everything else. Stubs could allow robust, maybe even complete, type inference to be done locally. We might expect stubs to make mypy work faster.

===== Summary

The make-stub-files script does for type/design analysis what Leo's c2py command did for converting C sources to python. It eliminates much of the drudgery associated with creating stub files, leaving the programmer to make non-trivial inferences.

Stub files allow us to explore type checking using mypy as a guide and helper. Stub files are both a design document and an executable, checkable, type specification. Stub files allow those with a Python 2 code base to use mypy.

One could imagine a similar insert_annotations script that would inject function annotations into source files using stub files as data. This "reverse" script should be about as straightforward as the make-stub-files script.

Edward
.. @+node:ekr.20150710063700.1: *4* Added optional popup on syntax error
Added @bool syntax-error-popup & supporting logic: c.syntaxErrorDialog
.. @+node:ekr.20160127031500.1: *4* is flatten-outline-to-node new?
.. @+node:ekr.20150710103707.1: *4* Ctrl-G now resets status line
Useful after a failed Ctrl-F
.. @+node:ekr.20150427042510.1: *3* Bugs Fixed/Investigated
@language rest
@wrap
.. @+node:ekr.20150417045902.1: *4* Recover from orphan bit in leoPyBad.leo
Rev dc1bf6f

The orphan bit was set in @file leoGlobals.py.
This prevented the file from being updated.

Changed:
- at.read.
- at.readAll
- fc.putVnode no longer writes orphan bits.
. VNode constants section: # unused    = 0x10 # (was orphanBit)
.. @+node:ekr.20150417053733.1: *4* Fixed @tabwidth bug
Using c.tab_width is wrong: it is the *default* tab width.

Created c.getTabWidth()
.. @+node:ekr.20150403035558.1: *4* Fixed bug 169: import-file does not preserve gnx of root @file node
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/169
import-file does not preserve gnx of root @file node

The fix was a special case in at.readStartNode.
.. @+node:ekr.20150428112500.1: *4* Fixed abbreviation bugs and improved abbreviations
@language rest
@wrap

The fixes were in abbrev.expandAbbrev and helpers.

Rev 585d2f4 improves abbreviations as follows:

- Match longest prefix first: e;; no longer interferes with date;;
- Predefine 'x' as the empty string before executing abbreviation scripts.
- Split @data abbreviations-subst-env into separate nodes.
- Defined do() and insert() functions in @data abbreviations-subst-env as follows::

@language python

    def do(commandName):
        '''Execute a command by name.'''
        c.k.simulateCommand(commandName,event=None)
    
    def insert(s):
        '''Insert the string s in the current widget.'''
        try:
            w = c.abbrevCommands.w
            if w:
                i = w.getInsertPoint()
                w.insert(i,s)
        except AttributeError:
            pass
            
@language rest
@wrap

Note:  Because of a glitch in how abbreviations scripts are created, you can't do::

    do(['command1','command2'])

even though c.k.simulateCommand allows list arguments.  Instead, do this::

    do('command1');do('command2');

The following abbreviations insert matching characters (no need to do x='' in them)::

    (={|{insert('()');do('back-char')}|}
    [={|{insert('[]');do('back-char')}|}
    {={|{insert('{}');do('back-char')}|}

This is an implementation of auto-close-quotes, done entirely with abbreviations! For example, typing '(' inserts '()' and puts the cursor between the parens.

I personally dislike these abbreviations.  I find it harder to skip past the ')' than to type it later.  ymmv.
.. @+node:ekr.20150428153124.1: *4* Removed warning in at.read about orphan bits
.. @+node:ekr.20150430175300.1: *4* Improved Ctrl-LtArrow
Ctrl-LtArrow and Ctrl-RtArrow leave the cursor at the start of a word.
This is the way most editors work.

The fix was in moveWordHelper.
.. @+node:ekr.20150509180744.1: *4* Fixed remove-blank-lines command
It now works when there is no text selection.
.. @+node:ekr.20150514115247.1: *4* Fixed cut/paste from menus
.. @+node:ekr.20150520071422.1: *4* Fixed bug 150: Importing file to @clean produces section references...
Importing file to @clean produces section references following class constructor
https://github.com/leo-editor/leo-editor/issues/150

The bug was a typo in plugins/importers/basescanner.py.

Also improved reporting in the RecursiveImportController class.
.. @+node:ekr.20150608184148.1: *4* Fixed bug 193: goto-global-line doesn't work properly in @clean files
https://github.com/leo-editor/leo-editor/issues/193
goto-global-line doesn't work properly in @clean files

The fix was in GoToLineNumber.go: it must test for p.isAtCleanNode()
.. @+node:ekr.20150502050809.1: *4* Fixed bug 131: Insert time in headline now inserts time in body
Insert time in headline now inserts time in body
https://github.com/leo-editor/leo-editor/issues/131

The fix was to replace:
    
    w = self.editWidget()
    
by::
    
    w = c.frame.tree.edit_widget(p)
    
    
in editCommands.insertHeadlineTime.
.. @+node:ekr.20150609082814.1: *4* Fixed Bug 162: Valid language list in Docs not up to date
@language rest
@wrap

Valid language list in Docs not up to date
https://github.com/leo-editor/leo-editor/issues/162

cm.isValidLanguage accepts any language x for which leo/modes/X.py exists.

Added a script in LeoDocs.leo that will generate all valid languages.
.. @+node:ekr.20150609111916.1: *4* Fixed bug 195: fcol when using @first directive is inaccurate
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/195
fcol when using @first directive is inaccurate

1. p.textOffset returns None if no @<file> node is an ancestor.
2. p.textOffset never caches its result.
    In any case, it was quite wrong to cache results in positions.
3. Rewrote p.textOffset to simplify it.
4. QtStatusLineClass.update prints '' for fcol if p.textOffset returns None.
5. Changed unit tests accordingly.
.. @+node:ekr.20150609103947.1: *4* Investigated bug 188: Find/Replace All Suboutline only same as Node only
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/188
Find/Replace All Suboutline only same as Node only

This bug appears to be invalid.

.. @+node:ekr.20150609082814.2: *4* Fixed bug 181: Focus remains in previous file
@language rest
@wrap

Focus remains in previous file
https://github.com/leo-editor/leo-editor/issues/181

LM.finishOpen now calls c.outerUpdate.
.. @+node:ekr.20150609082815.1: *4* Fixed bug 182: Long filenames do not wrap in notification dialogues
@language rest
@wrap

Long filenames do not wrap in notification dialogues
https://github.com/leo-editor/leo-editor/issues/182

Added g.splitLongFileName and called it from several file dialogs.
.. @+node:ekr.20150609101848.1: *4* Fixed bug 136: Viewrendered2 chokes on displaying @html nodes
Revised some of the code, but probably more work is needed.
.. @+node:ekr.20150620103158.1: *4* Fixed Bug 199: The "already open" logic hard crashes Leo
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/199

Leo now warns in the log pane and raises a summary dialog about possibly already-open files.  However, all files are opened as usual, leaving it to the user to determine what to do.

A (new?) bug *won't* be fixed.  Closing a file removes the file's entry from g.app.db, so reopening the file *again* won't give another warning.  This is a very minor matter.

What I did: (See app.Detecting already-open files)

- Added g.app.already_open_files list.
- Added calls to new runAlreadyOpenDialog method in c.open and LM.doPostPluginsInit.
- Rewrote app.checkForOpenFile.
.. @+node:ekr.20150622070146.1: *4* Fixed bug 198: Find tab 'ignore case' tick box has no effect
https://github.com/leo-editor/leo-editor/issues/198
.. @+node:ekr.20150623040812.1: *4* Fixed bug 200: goto-global-line logic is too complex and buggy
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/200

- Added leo.commands.gotoCommands module.
- Removed almost all old code.
- Added goto.get_external_file_with_sentinels.
  This returns the external file *with* sentinels, even if
  it normally does not have sentinels.
- Added goto.scan_nonsentinel_lines & goto.scan_sentinel_lines.
  These contain the essential algorithms.
- Added code to force any particular write to use sentinels.
.. @+node:ekr.20150623053643.1: *5* checkin log 1
Several changes, preparing to simplify goto-global-line logic:

leoAtFile.py:
- Added at.scriptWrite ivar, set from the scriptWrite keyword arg to at.write.
- at.nodeSentinelText now writes full sentinels if at.scriptWrite is True.
  This makes sentinels available to goto-global-line.
  
leoCommands.py:
- Removed the now-unused "script" keyword argument from c.goToScriptLineNumber.
- Added GoToLineNumber.find_script_line.
  This explicitly sets up the goto-global-line logic for scripts.
  It may not be needed eventually, but for now it's a good step.
- Removed the scriptData keyword argument from GoToLineNumber.find_file_line.
  It's no longer needed now that GoToLineNumber.find_script_line exists.
  
leoAtShadow.py:
- AtShadowTestCase.makePrivateLines now calls at.write with scriptWrite=False.
  This retains the simplified node sentinels needed by AtShadowTestCase.
  All @shadow-related unit tests pass, so this change is benign.

leoGlobals.py:
- Added g.goto_last_exception.
  It works, modulo problems with goto-global-line.
  
unitTest.leo:
- Changed several unit tests re goto-global-line to reflect new signatures.

.. @+node:ekr.20150624062219.1: *5* checkin log 2
Created goto.scan_sentinel_lines, a complete, simple solution to finding lines in scripts.

Leo now automatically finds script lines that generate exceptions:
http://sourceforge.net/forum/message.php?msg_id=3593116

It is a partial solution for issue #200: goto-global-line logic is too complex and buggy
https://github.com/leo-editor/leo-editor/issues/200

Still to do: associate lines in external files with nodes/offsets within an @<file> tree.
.. @+node:ekr.20150625112217.1: *5* checkin log 3
The grand changeover to the new line-number scheme. All tests pass.

leoAtFile.py:
- Added forceSentinels ivar and logic.
- Added forceSentinels keyword argument to at.writeOneAtAutoNode.
- Changed at.nodeSentinelsText (a major change):
    1. Made an explicit test for at_shadow_test_hack.
       This supports some mischief in the AtShadowTestCase.
    2. Otherwise, a full node sentinel is generated if::
    
        at.thinFile or at.scriptWrite or at.forceSentinels:
        
- In all other places, the write code generates sentinels if::

        at.sentinels or at.forceSentinels.
    
gotoCommands.py:
- debugged and improved goto.scan_sentinel/nonsentinel_lines.
- Moved the following to the attic:
    - countLines & helpers.
    - setup_file & setup_script.
    - find_vnode & helpers.
- All methods are now zero-based.

leoGlobals.py:
- g.gotoLastException adjust the calls to make them zero-based.

leoShadow.py
- makePrivateLines sets and clears the at.at_shadow_test_hack ivar
  rather than setting at.scriptWrite.

    
.. @+node:ekr.20150625161350.1: *5* checkin log 4
Added support for general delimiters:

Separated goto.show_results into goto.success and goto.fail.
.. @+node:ekr.20150626105504.1: *5* checkin log 5
The new line-number scheme now works with all kinds of @auto files.
All tests pass, including new unit tests for @auto-markdown, @auto-org, @auto-otl, @auto-rst.

- Fixed several bugs that show up only when two comment delims are in effect.
- Added forceSentinels keyword argument of all write methods in subclasses of the BaseWriter class.
- The writer methods call the new BaseWriter.put_node_sentinel method when forceSentines is True. put_node_sentinel is similar to corresponding AtFile code.
.. @+node:ekr.20150609082813.1: *4* Investigated Bug 153: Leo acts on some operator input when the Leo window is NOT the top window
@language rest
@wrap

Leo acts on some operator input when the Leo window is NOT the top window
https://github.com/leo-editor/leo-editor/issues/153

This problem is discussed in the Leo-Editor forum thread:
https://groups.google.com/forum/?fromgroups#!topic/leo-editor/3PPObn4JRik

I can't reliably reproduce this problem, so I can't give you a test case that demonstrates it.

The symptom that I first noticed was unexpected, unpredictable changes in what the tree pane showed when I switched back to Leo-Editor after switching away from Leo-Editor by executing open-url.

Sometimes the node selected was unchanged, but it had been scrolled up in the tree pane; and sometimes it had been scrolled all the way out of the tree pane.

Sometimes the node selected had been changed to a sibling node after the node that was selected when I switched away from Leo-Editor.

In all cases, the body pane correctly showed the contents of the currently selected node.

Sometimes an Alt-F4 when a non-Leo-Editor window is the only window showing, causes Leo-Editor to exit or display its "Save changes before exit?" query.

Edward K. Ream currently believes: "The culprit is likely a delayed action (on the order of 0.5 sec) that Leo takes on focus-in events. If the user responds to a focus-in event before that time there will be problems."

My test system:

Xubuntu32 12.04
Python 2.7.3, PyQt version 4.8.1

The problem has been observed on Leo-Editor commit f6cdb2b. It seems to occur slightly more frequently on more recent commits such as 42a5207.


.. @+node:ekr.20150626134708.1: *4* Fixed bug 196: Traceback using graphcanvas.py
https://github.com/leo-editor/leo-editor/issues/196

The fix was to use setBackground instead of setBackgroundColor.
No real testing was done.
.. @+node:ekr.20150626141225.1: *4* Investigated Bug 188: Find/Replace All Suboutline only same as Node only
https://github.com/leo-editor/leo-editor/issues/188
  
Rev e8b134:
    
Improved reporting of find options.  The report now shows suboutline-only and node-only.
- Just after Ctrl-F the status line contains:

    Find (wixbhacf[esn]): <list of options>

- When the command completes, the status line contains:

    found/not found (<list of options>): <find pattern>

This makes it much easier to see what is going on.

I suspect that #188 is invalid.  These changes will reduce confusion.
.. @+node:ekr.20150715093109.1: *4* Fixed Python 3k problem with @lineending
Rev a7e2e86 fixes atFile.create.
.. @+node:ekr.20151202133537.1: *4* Fixed bug 224: TypeError: unorderable types...
https://github.com/leo-editor/leo-editor/issues/224

The fix was in c.checkGnxs
.. @+node:ekr.20151227104921.1: *4* Fixed bug 220: @spot bug
https://github.com/leo-editor/leo-editor/issues/220

Executing clone-to-at-spot with an @spot node selected causes Leo to become
unresponsive and python process slowly eats up all system memory.
.. @+node:ekr.20151010055931.1: *4* Fixed bug 211: Saving untitled document on window close not working on Qt GUI
https://github.com/leo-editor/leo-editor/issues/211

Saving untitled document on window close not working on Qt GUI
.. @+node:ekr.20151026105904.1: *4* Fixed Bug 215: insert-file-name doesn't process ~
https://github.com/leo-editor/leo-editor/issues/215
.. @+node:ekr.20151118152036.1: *4* Fixed bug 218: Select Text and Clipboard
https://github.com/leo-editor/leo-editor/issues/218

Here's a shell script you can run in a console

https://gist.github.com/tbnorth/4b781ba2b8f59c83dd5e

to show the content of the primary and secondary selections, and the
clip-board.  You'll probably need to install xclip

When the mouse is released after drag-selecting text in Leo, the
primary selection updates as expected.  This doesn't happen with
shift-arrow selection.

It looks like keyboard shift-arrow selection should call
QClipboard::setText(const QString & text, Mode mode = QClipboard::Selection)
.. @+node:ekr.20150622103132.1: *4* Fixed Find crash
@language rest
@wrap

https://groups.google.com/d/msg/leo-editor/tA5Q2YrEu-w/9mzqFAHMcX4J

The fix was in find.changeSelection

I'm getting weirdness when trying to use minibuffer replace, first if nothing is selected it tells me "no text selected", if I have text selected sometimes it just deletes the selected text and sometimes I see this:


File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoCommands.py", line 5496, in doCommand

val = command(event)

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoGlobals.py", line 1334, in wrapper

func(self, event=event)

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoFind.py", line 1121, in change

self.changeSelection()

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoFind.py", line 1194, in changeSelection

c.frame.tree.drawIcon(p) # redraw only the icon.

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\plugins\qt_tree.py", line 709, in drawIcon

itemOrTree = self.position2item(p) or w

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\plugins\qt_tree.py", line 847, in position2item

item = self.position2itemDict.get(p.key())
AttributeError: 'NoneType' object has no attribute 'key' 
.. @+node:ekr.20160123062001.1: *4* Fixed bug in p.__eq__(!!)
.. @+node:ekr.20150620062019.1: *3* Docs
.. @+node:ekr.20150620062023.1: *4* My git work flow
Imo, git rivals python as the greatest productivity tool ever devised for programmers.

My workflow on Ubuntu and Windows is essentially identical. Simple aliases (Ubuntu) and .bat files (Windows) support the following console commands::

    gs  (expands to git status)
    gd (git diff)  Uses an external diff program,
                   but I'm starting to prefer text diffs.
    ga . (git add .)
    ga file (git add file)
    gc (git commit: configured to open Scite to create a commit message)
    gc -m "a one-line commit message"
    push (git push)

I use gitk on both platforms to review commits.

And that's about it. I use "git help" and "git help command" as needed.

.. @+node:ekr.20150703072334.1: *4* New commands greatly improve work flow
@language rest
@wrap

Recent revs make ctrl-click execute the find-def command if what is under the cursor is not a url.  There is no need to select the word--that's done automatically.

This quickly becomes indispensable. I have the following bindings defined, so there there is no need to move the mouse:

Ctrl-4: find-def
Ctrl-5: find-var

Furthermore, several recent changes/additions are remarkably useful:

clone-to-at-spot

This command does the following:

1. Clones the selected node.
2. Moves the clone to the last child of the last @spot node in the outline.
3. Collapses all nodes in the outline.
4. Selects the newly-cloned node, thereby making it visible.

I typically create the following project node:

   @spot re: the project name

pre-loaded find patterns

Today I improved the clone-find-all commands so they pre-select the find pattern more usefully.  leoPy.leo defines @button cfa-code as::

c.cloneFindAllFlattenedAtNode('Code',top_level=True)

This code now preloads the find pattern before selecting the top-level "Code" node.

These new and improved commands make a big difference to my work flow.

Edward
.. @+node:ekr.20160128201207.1: *3* ==== Code academy posts
@language rest
@wrap
.. @+node:ekr.20160129054828.1: *4* First post: topics
@language rest
@wrap

Here is a quick list topics for the code academy.  Most can already be done easy, if you know where to look.  Some may require a few new lines in Leo's core. These topics should also be included in Leo's cheat sheet, or somewhere similar.

uA's

They are crucial to flexible data management. uA's can associate arbitrary data with any vnode or position, as describe here.

Everyone needs to know how to get, set and search uA's.  You can get and set uA's with v.u. Just a few lines of code will search the entire outline for all nodes/positions having a given uA.

Quick additions to Leo's core:
- Define the p.u property, so code can do p.u instead of p.v.u.
- Possibly make the api for uA's more convenient.

A more ambitious addition: Define a gui interface for uA's.

Other topics

- Clones: making and deleting them. Clones are cheap to create!
- How to create new panes in the log window, and how to put cool stuff in them.
- How to hoist outlines programmatically.
- How to write a plugin so it can respond to events.
- How to create new panes in Leo's window with Terry's free_layout and nested_splitter plugins.  In essence, these plugin are part of Leo's core.
- How to put multiple icons in a single headline.  This may be possible already.  If not it would require just a few lines of code in Leo's core.

We discussed the so-called Easter-Egg interface to create new panes this from the gui, but a summary of how to do this programmatically is needed. Note: it's possible to save the layout so that Leo will restore it when Leo starts up the next time.

- How to change what is shown in the outline pane.  Chapters and hoists exploit existing capabilities.  If need be, more could be added with just a few lines of code in Leo's main outline redrawing code.

New directions

Putting all this together, we all agreed that being able to make uA's visible somehow would give Leo many of the cool features of the ECCO outliner. We envisage a uA tab in the outline pane that would allow the user to:

- See all and only nodes with given attributes.  This is similar to Leo's clone-find-all (or clone-find-all-flattened) commands, combined with something like a hoist.

- List all such nodes in the uA pane, similar to the Nav Pane (Quicksearch plugin), so that clicking on a node would select the node in the entire outline, with only ancestors of the selected node expanded.  Pretty easy to do.  Alternatively, perhaps some  tag (uA) oriented features can be added to existing plugins.
.. @+node:ekr.20160129103906.1: *4* uA's and the new p.u property
A recent rev added the p.u property, which you can think of as a synonym for p.v.unknownAttributes on both sides of an assignment.

The example in Leo's documentation for access uA's is way too complicated. In fact, the following suffices to set the 'n' attribute for test_plugin:

plugin_name = 'test_plugin'
d = p.u.get(plugin_name,{})
d ['n'] = 8
p.u [plugin_name] = d

p.u is the outer dictionary. p.u.get.(plugin_name, {}) is the inner dictionary. The last line is all that is needed to update the outer dictionary!

It is very easy to search for particular uA's. The following script prints all the keys in the outer-level uA dictionaries:

for p in c.all_unique_positions():
    if p.u:
        print(p.h, sorted(p.u.keys()))

This is a typical usage of Leo's generators.  Generators visit each position (or node) quickly. Even if you aren't going to program much, you should be aware of how easy it is to get and set the data in each node. In fact, now would be a great time to read Leo's Scripting Tutorial again :-) This will allow you to "dream bigger" with Leo.

The following script creates a list of all positions having an icon, that is, an outer uA dict with a 'lineYOffset' key.

aList = [p.copy() for p in c.all_unique_positions() if 'lineYOffset' in p.u]
print('\n'.join([p.h for p in aList]))

Yes, the lineYOffset key is wonky and unhelpful, but it can't be changed now.  Hmm, maybe the code could support an an alternative clearer key, say str_core_icon.  Furthermore, the str_core_* keys should probably be reserved for Leo's core.

Important: If you don't understand these lines, please study Python's list comprehensions.  They are incredibly useful. '\n'.join(aList) is a great idiom to know.  str.join is one of python's most useful string methods. It converts between lists and strings.

Imo, Leo should have p.temp_u and v.temp_u properties, so that getting and setting temp uA's will be as easy as getting and setting uA's. I'll do this today.

These Code Academy threads are having an immediate impact.  Focusing on simple, practical tasks has revealed rough spots in both Leo's code and Leo's docs.

As always with the Code Academy, questions and comments are strongly encouraged. Make sure you understand the code examples in this post. They are the foundation for programming in Leo.
.. @+node:ekr.20160129101736.1: *4* icons
@language rest
@wrap

During our conference call, someone asked whether nodes may have more than one icon.  Indeed they can.

For example, running this script will insert three icons. Running the script again will insert three more.

@language python


table = (
    'edittrash.png',
    'connect_no.png',
    'error.png',
)
for icon in table:
    fn = g.os_path_finalize_join(g.app.loadDir,
        '..', 'Icons', 'Tango', '16x16', 'status', icon)
    if g.os_path_exists(fn):
        c.editCommands.insertIconFromFile(path=fn)
        
@language rest
@wrap
        
With a minor change to Leo's core, it is now easy to delete the icons of the node at position p:

    c.editCommands.deleteNodeIcons(p=p)

.. @+node:ekr.20160129103813.1: *4* git
If you are going to do interesting work on Leo and its plugins, you should be using Leo’s latest sources from GitHub using git. Once git is installed, getting the latest version of Leo is easy:

    git clone https://github.com/leo-editor/leo-editor.git

Once you have done that, you can get the latest sources with:

    git pull

Git is great in tracking history and reverting unwanted changes. And it has many other benefits.

I've been wondering when to say this, but recent developments have forced my hand.  Today, as the result of our Code Academy discussion, I have added the p.u property and a keyword arg to c.editCommands.deleteNodeIcons.  If you don't use git you will quickly get out of the loop.

Although git is unique behind the scenes, using git is very similar to using bzr or hg or any other SCCS.  To change Leo, you add files, you commit files, and you push files.  That's about it.

I'll be happy to answer any git-related questions here.  Again, I strongly encourage all would-be Leo programmers to use Leo's git repo.
.. @-all
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
