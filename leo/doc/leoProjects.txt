.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20170619165453.1: ** Branch: string-gui
Attempt to run all unit tests without using Qt gui code.
All gui-related code will be simulated with the StringTextWrapper class.
.. @+node:ekr.20170710063210.1: ** @command git-diff
g.cls()
import difflib
import os
import sys
@others
GitDiffController(c, 'HEAD~1', 'HEAD~2').run()
print('Done!')
.. @+node:ekr.20170804100143.1: *3* class GitDiffController
class GitDiffController:
    
    def __init__ (self, c, rev1, rev2):
        self.c = c
        if sys.platform.startswith('win'):
            self.new_dir = r'C:\leo.repo\leo-editor'
        else:
            self.new_dir = '/home/edward/leo.repo/leo-editor'
        self.old_dir = g.os_path_abspath('.')
        self.rev1 = rev1
        self.rev2 = rev2

    @others
.. @+node:ekr.20170804101035.1: *4* dc.diff_file
def diff_file(self, fn):
    
    command = 'git show %s:%s' % (self.rev2, fn)
    lines = g.execGitCommand(command, self.new_dir)
    # Write p to lines2.
    at = c.atFileCommands
    p = self.find_file(fn)
    if p and p.isAtFileNode():
        at.write(p, nosentinels=False, toString=True)
        lines2 = g.splitLines(at.stringOutput.replace('\r',''))
        diff_list = list(difflib.unified_diff(lines, lines2, self.rev1, self.rev2))
        g.trace(len(lines), len(lines2), fn)
        g.printList(diff_list)
    elif p:
        g.trace('found', fn)
    else:
        g.trace('not found', fn)
.. @+node:ekr.20170804102310.1: *4* dc.find_file
def find_file(self, fn):
    '''Return the @<file> node matching fn.'''
    c = self.c
    fn = g.os_path_basename(fn)
    for p in c.all_unique_positions():
        if p.isAnyAtFileNode():
            fn2 = p.anyAtFileNodeName()
            if fn2.endswith(fn):
                # g.trace('found', fn, p.h)
                return p
    return None
.. @+node:ekr.20170804100859.1: *4* dc.get_files
def get_files(self):
    '''Return a list of changed files.'''
    command = 'git diff --name-only %s %s' % (self.rev1, self.rev2)
    files = [
        z.strip() for z in g.execGitCommand(command, self.new_dir)
            if z.strip().endswith('.py')
    ]
    return files
.. @+node:ekr.20170804100620.1: *4* dc.run
def run(self):
    
    for fn in self.get_files():
        self.diff_file(fn)
    os.chdir(self.old_dir)
    
    
    
.. @-all
.. @@nosearch
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
