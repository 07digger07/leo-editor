.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20150417044242.1: ** 5.1.1 Documentation
@language rest
@wrap
.. @+node:ekr.20150427042510.1: *3* Bugs Fixed/Investigated
@language rest
@wrap
.. @+node:ekr.20150502050809.1: *4* Fixed #131: Insert time in headline now inserts time in body
Insert time in headline now inserts time in body
https://github.com/leo-editor/leo-editor/issues/131

The fix was to replace:
    
    w = self.editWidget()
    
by::
    
    w = c.frame.tree.edit_widget(p)
    
    
in editCommands.insertHeadlineTime.
.. @+node:ekr.20150609101848.1: *4* Fixed #136: Viewrendered2 chokes on displaying @html nodes
Revised some of the code, but probably more work is needed.
.. @+node:ekr.20150520071422.1: *4* Fixed #150: Importing file to @clean produces section references...
Importing file to @clean produces section references following class constructor
https://github.com/leo-editor/leo-editor/issues/150

The bug was a typo in plugins/importers/basescanner.py.

Also improved reporting in the RecursiveImportController class.
.. @+node:ekr.20150609082814.1: *4* Fixed #162: Valid language list in Docs not up to date
@language rest
@wrap

Valid language list in Docs not up to date
https://github.com/leo-editor/leo-editor/issues/162

cm.isValidLanguage accepts any language x for which leo/modes/X.py exists.

Added a script in LeoDocs.leo that will generate all valid languages.
.. @+node:ekr.20150403035558.1: *4* Fixed #169: import-file does not preserve gnx of root @file node
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/169
import-file does not preserve gnx of root @file node

The fix was a special case in at.readStartNode.
.. @+node:ekr.20150609082814.2: *4* Fixed #181: Focus remains in previous file
@language rest
@wrap

Focus remains in previous file
https://github.com/leo-editor/leo-editor/issues/181

LM.finishOpen now calls c.outerUpdate.
.. @+node:ekr.20150609082815.1: *4* Fixed #182: Long filenames do not wrap in notification dialogues
@language rest
@wrap

Long filenames do not wrap in notification dialogues
https://github.com/leo-editor/leo-editor/issues/182

Added g.splitLongFileName and called it from several file dialogs.
.. @+node:ekr.20150608184148.1: *4* Fixed #193: goto-global-line doesn't work properly in @clean files
https://github.com/leo-editor/leo-editor/issues/193
goto-global-line doesn't work properly in @clean files

The fix was in GoToLineNumber.go: it must test for p.isAtCleanNode()
.. @+node:ekr.20150609111916.1: *4* Fixed #195: fcol when using @first directive is inaccurate
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/195
fcol when using @first directive is inaccurate

1. p.textOffset returns None if no @<file> node is an ancestor.
2. p.textOffset never caches its result.
    In any case, it was quite wrong to cache results in positions.
3. Rewrote p.textOffset to simplify it.
4. QtStatusLineClass.update prints '' for fcol if p.textOffset returns None.
5. Changed unit tests accordingly.
.. @+node:ekr.20150626134708.1: *4* Fixed #196: Traceback using graphcanvas.py
https://github.com/leo-editor/leo-editor/issues/196

The fix was to use setBackground instead of setBackgroundColor.
No real testing was done.
.. @+node:ekr.20150622070146.1: *4* Fixed #198: Find tab 'ignore case' tick box has no effect
https://github.com/leo-editor/leo-editor/issues/198
.. @+node:ekr.20150620103158.1: *4* Fixed #199: The "already open" logic hard crashes Leo
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/199

Leo now warns in the log pane and raises a summary dialog about possibly already-open files.  However, all files are opened as usual, leaving it to the user to determine what to do.

A (new?) bug *won't* be fixed.  Closing a file removes the file's entry from g.app.db, so reopening the file *again* won't give another warning.  This is a very minor matter.

What I did: (See app.Detecting already-open files)

- Added g.app.already_open_files list.
- Added calls to new runAlreadyOpenDialog method in c.open and LM.doPostPluginsInit.
- Rewrote app.checkForOpenFile.
.. @+node:ekr.20150623040812.1: *4* Fixed #200: goto-global-line logic is too complex and buggy
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/200

- Added leo.commands.gotoCommands module.
- Removed almost all old code.
- Added goto.get_external_file_with_sentinels.
  This returns the external file *with* sentinels, even if
  it normally does not have sentinels.
- Added goto.scan_nonsentinel_lines & goto.scan_sentinel_lines.
  These contain the essential algorithms.
- Added code to force any particular write to use sentinels.
.. @+node:ekr.20150623053643.1: *5* checkin log 1
Several changes, preparing to simplify goto-global-line logic:

leoAtFile.py:
- Added at.scriptWrite ivar, set from the scriptWrite keyword arg to at.write.
- at.nodeSentinelText now writes full sentinels if at.scriptWrite is True.
  This makes sentinels available to goto-global-line.
  
leoCommands.py:
- Removed the now-unused "script" keyword argument from c.goToScriptLineNumber.
- Added GoToLineNumber.find_script_line.
  This explicitly sets up the goto-global-line logic for scripts.
  It may not be needed eventually, but for now it's a good step.
- Removed the scriptData keyword argument from GoToLineNumber.find_file_line.
  It's no longer needed now that GoToLineNumber.find_script_line exists.
  
leoAtShadow.py:
- AtShadowTestCase.makePrivateLines now calls at.write with scriptWrite=False.
  This retains the simplified node sentinels needed by AtShadowTestCase.
  All @shadow-related unit tests pass, so this change is benign.

leoGlobals.py:
- Added g.goto_last_exception.
  It works, modulo problems with goto-global-line.
  
unitTest.leo:
- Changed several unit tests re goto-global-line to reflect new signatures.

.. @+node:ekr.20150624062219.1: *5* checkin log 2
Created goto.scan_sentinel_lines, a complete, simple solution to finding lines in scripts.

Leo now automatically finds script lines that generate exceptions:
http://sourceforge.net/forum/message.php?msg_id=3593116

It is a partial solution for issue #200: goto-global-line logic is too complex and buggy
https://github.com/leo-editor/leo-editor/issues/200

Still to do: associate lines in external files with nodes/offsets within an @<file> tree.
.. @+node:ekr.20150625112217.1: *5* checkin log 3
The grand changeover to the new line-number scheme. All tests pass.

leoAtFile.py:
- Added forceSentinels ivar and logic.
- Added forceSentinels keyword argument to at.writeOneAtAutoNode.
- Changed at.nodeSentinelsText (a major change):
    1. Made an explicit test for at_shadow_test_hack.
       This supports some mischief in the AtShadowTestCase.
    2. Otherwise, a full node sentinel is generated if::
    
        at.thinFile or at.scriptWrite or at.forceSentinels:
        
- In all other places, the write code generates sentinels if::

        at.sentinels or at.forceSentinels.
    
gotoCommands.py:
- debugged and improved goto.scan_sentinel/nonsentinel_lines.
- Moved the following to the attic:
    - countLines & helpers.
    - setup_file & setup_script.
    - find_vnode & helpers.
- All methods are now zero-based.

leoGlobals.py:
- g.gotoLastException adjust the calls to make them zero-based.

leoShadow.py
- makePrivateLines sets and clears the at.at_shadow_test_hack ivar
  rather than setting at.scriptWrite.

    
.. @+node:ekr.20150625161350.1: *5* checkin log 4
Added support for general delimiters:

Separated goto.show_results into goto.success and goto.fail.
.. @+node:ekr.20150626105504.1: *5* checkin log 5
The new line-number scheme now works with all kinds of @auto files.
All tests pass, including new unit tests for @auto-markdown, @auto-org, @auto-otl, @auto-rst.

- Fixed several bugs that show up only when two comment delims are in effect.
- Added forceSentinels keyword argument of all write methods in subclasses of the BaseWriter class.
- The writer methods call the new BaseWriter.put_node_sentinel method when forceSentines is True. put_node_sentinel is similar to corresponding AtFile code.
.. @+node:ekr.20151010055931.1: *4* Fixed #211: Saving untitled document on window close not working on Qt GUI
https://github.com/leo-editor/leo-editor/issues/211

Saving untitled document on window close not working on Qt GUI
.. @+node:ekr.20151026105904.1: *4* Fixed #215: insert-file-name doesn't process ~
https://github.com/leo-editor/leo-editor/issues/215
.. @+node:ekr.20151118152036.1: *4* Fixed #218: Select Text and Clipboard
https://github.com/leo-editor/leo-editor/issues/218

Here's a shell script you can run in a console

https://gist.github.com/tbnorth/4b781ba2b8f59c83dd5e

to show the content of the primary and secondary selections, and the
clip-board.  You'll probably need to install xclip

When the mouse is released after drag-selecting text in Leo, the
primary selection updates as expected.  This doesn't happen with
shift-arrow selection.

It looks like keyboard shift-arrow selection should call
QClipboard::setText(const QString & text, Mode mode = QClipboard::Selection)
.. @+node:ekr.20151227104921.1: *4* Fixed #220: @spot bug
https://github.com/leo-editor/leo-editor/issues/220

Executing clone-to-at-spot with an @spot node selected causes Leo to become
unresponsive and python process slowly eats up all system memory.
.. @+node:ekr.20151202133537.1: *4* Fixed #224: TypeError: unorderable types...
https://github.com/leo-editor/leo-editor/issues/224

The fix was in c.checkGnxs
.. @+node:ekr.20160301135653.1: *4* Fixed #234: hard crash on UnicodeDecodeError
https://github.com/leo-editor/leo-editor/issues/234

/path/leo-editor/leo/core/leoCommands.py:581: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  test(expected == got, 'stroke: %s, expected char: %s, got: %s' % (
/path/leo-editor/leo/core/leoGlobals.py:359: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  elif hasattr(other, 's'): return self.s == other.s
Traceback (most recent call last):
  File "/path/leo-editor/leo/plugins/qt_events.py", line 126, in eventFilter
    k.masterKeyHandler(event)
  File "/path/leo-editor/leo/core/leoKeys.py", line 3313, in masterKeyHandler
    k.handleUnboundKeys(event, char, stroke)
  File "/path/leo-editor/leo/core/leoKeys.py", line 3529, in handleUnboundKeys
    k.masterCommand(event=event, stroke=stroke)
  File "/path/leo-editor/leo/core/leoKeys.py", line 3173, in masterCommand
    expanded = c.abbrevCommands.expandAbbrev(event, stroke)
  File "/path/leo-editor/leo/commands/abbrevCommands.py", line 251, in expandAbbrev
    word = prefix + ch
UnicodeDecodeError: 'ascii' codec can't decode byte 0xdc in position 0: ordinal not in range(128)
fish: â€œ./launchLeo.pyâ€ terminated by signal SIGABRT (Abort)
.. @+node:ekr.20150514043850.11: *5* abbrev.expandAbbrev & helpers (entry point)
def expandAbbrev(self, event, stroke):
    '''
    Not a command.  Called from k.masterCommand to expand
    abbreviations in event.widget.

    Words start with '@'.
    '''
    trace = False and not g.unitTesting
    verbose = False
    c = self.c
    ch = g.toUnicode(event and event.char or '')
    w = self.editWidget(event, forceFocus=False)
    if not w: return False
    if self.expanding: return False
    if w.hasSelection(): return False
    assert g.isStrokeOrNone(stroke), stroke
    if stroke in ('BackSpace', 'Delete'):
        if trace and verbose: g.trace(stroke)
        return False
    d = {'Return': '\n', 'Tab': '\t', 'space': ' ', 'underscore': '_'}
    if stroke:
        ch = d.get(stroke.s, stroke.s)
        if len(ch) > 1:
            if (stroke.find('Ctrl+') > -1 or
                stroke.find('Alt+') > -1 or
                stroke.find('Meta+') > -1
            ):
                ch = ''
            else:
                ch = event and event.char or ''
    else:
        ch = event.char
    if trace and verbose: g.trace('ch', repr(ch), 'stroke', repr(stroke))
    # New code allows *any* sequence longer than 1 to be an abbreviation.
    # Any whitespace stops the search.
    s = w.getAllText()
    j = w.getInsertPoint()
    i, prefixes = j - 1, []
    while i >= 0 and s[i] not in ' \t\n':
        prefixes.append(s[i: j])
        i -= 1
    prefixes = list(reversed(prefixes))
    if '' not in prefixes: prefixes.append('')
    for prefix in prefixes:
        i = j - len(prefix)
        word = g.toUnicode(prefix) + ch
        val, tag = self.tree_abbrevs_d.get(word), 'tree'
        # if val: g.trace('*****',word,'...\n\n',len(val))
        if not val:
            val, tag = self.abbrevs.get(word, (None, None))
        if val:
            if trace and verbose: g.trace(repr(word), 'val', val, 'tag', tag)
            # Require a word match if the abbreviation is itself a word.
            if ch in ' \t\n': word = word.rstrip()
            if word.isalnum() and word[0].isalpha():
                if i == 0 or s[i - 1] in ' \t\n':
                    break
                else:
                    i -= 1
            else:
                break
        else: i -= 1
    else:
        return False
    c.abbrev_subst_env['_abr'] = word
    if tag == 'tree':
        self.last_hit = c.p.copy()
        self.expand_tree(w, i, j, val, word)
        c.frame.body.forceFullRecolor()
        c.bodyWantsFocusNow()
    else:
        # Never expand a search for text matches.
        place_holder = '__NEXT_PLACEHOLDER' in val
        if place_holder:
            expand_search = bool(self.last_hit)
        else:
            self.last_hit = None
            expand_search = False
        if trace: g.trace('expand_search', expand_search, 'last_hit', self.last_hit)
        self.expand_text(w, i, j, val, word, expand_search)
        c.frame.body.forceFullRecolor()
        c.bodyWantsFocusNow()
        # Restore the selection range.
        if self.save_ins:
            if trace: g.trace('sel', self.save_sel, 'ins', self.save_ins)
            ins = self.save_ins
            # pylint: disable=unpacking-non-sequence
            sel1, sel2 = self.save_sel
            if sel1 != sel2:
                # some abbreviations *set* the selection range
                # so only restore non-empty ranges
                w.setSelectionRange(sel1, sel2, insert=ins)
    return True
.. @+node:ekr.20150514043850.12: *6* abbrev.expand_text
def expand_text(self, w, i, j, val, word, expand_search=False):
    '''Make a text expansion at location i,j of widget w.'''
    c = self.c
    if word == c.config.getString("abbreviations-next-placeholder"):
        val = ''
        do_placeholder = True
    else:
        val, do_placeholder = self.make_script_substitutions(i, j, val)
    self.replace_abbrev_name(w, i, j, val)
    # Search to the end.  We may have been called via a tree abbrev.
    p = c.p.copy()
    if expand_search:
        while p:
            if self.find_place_holder(p, do_placeholder):
                return
            else:
                p.moveToThreadNext()
    else:
        self.find_place_holder(p, do_placeholder)
.. @+node:ekr.20150514043850.13: *6* abbrev.expand_tree & helper
def expand_tree(self, w, i, j, tree_s, word):
    '''Paste tree_s as children of c.p.'''
    c, u = self.c, self.c.undoer
    if not c.canPasteOutline(tree_s):
        return g.trace('bad copied outline: %s' % tree_s)
    old_p = c.p.copy()
    bunch = u.beforeChangeTree(old_p)
    self.replace_abbrev_name(w, i, j, None)
    self.paste_tree(old_p, tree_s)
    # Make all script substitutions first.
    do_placeholder = False
    for p in old_p.subtree():
        # Search for the next place-holder.
        val, do_placeholder = self.make_script_substitutions(0, 0, p.b)
        if not do_placeholder: p.b = val
    # Now search for all place-holders.
    for p in old_p.subtree():
        if self.find_place_holder(p, do_placeholder):
            break
    u.afterChangeTree(old_p, 'tree-abbreviation', bunch)
.. @+node:ekr.20150514043850.14: *6* abbrev.find_place_holder
def find_place_holder(self, p, do_placeholder):
    '''
    Search for the next place-holder.
    If found, select the place-holder (without the delims).
    '''
    c = self.c
    s = p.b
    if do_placeholder or c.abbrev_place_start and c.abbrev_place_start in s:
        new_s, i, j = self.next_place(s, offset=0)
        if i is None:
            return False
        w = c.frame.body.wrapper
        switch = p != c.p
        if switch:
            c.selectPosition(p)
        else:
            scroll = w.getYScrollPosition()
        oldSel = w.getSelectionRange()
        w.setAllText(new_s)
        c.frame.body.onBodyChanged(undoType='Typing', oldSel=oldSel)
        c.p.b = new_s
        if switch:
            c.redraw()
        w.setSelectionRange(i, j, insert=j)
        if switch:
            w.seeInsertPoint()
        else:
            # Keep the scroll point if possible.
            w.setYScrollPosition(scroll)
            w.seeInsertPoint()
        return True
    else:
        return False
.. @+node:ekr.20150514043850.15: *6* abbrev.make_script_substitutions
def make_script_substitutions(self, i, j, val):
    '''Make scripting substitutions in node p.'''
    trace = False and not g.unitTesting
    c = self.c
    if not c.abbrev_subst_start:
        if trace: g.trace('no subst_start')
        return val, False
    # Nothing to undo.
    if c.abbrev_subst_start not in val:
        return val, False
    # Perform all scripting substitutions.
    self.save_ins = None
    self.save_sel = None
    while c.abbrev_subst_start in val:
        prefix, rest = val.split(c.abbrev_subst_start, 1)
        content = rest.split(c.abbrev_subst_end, 1)
        if len(content) != 2:
            break
        content, rest = content
        if trace: g.trace('**content', content)
        try:
            self.expanding = True
            c.abbrev_subst_env['x'] = ''
            exec(content, c.abbrev_subst_env, c.abbrev_subst_env)
        finally:
            self.expanding = False
        x = c.abbrev_subst_env.get('x')
        if x is None: x = ''
        val = "%s%s%s" % (prefix, x, rest)
        # Save the selection range.
        w = c.frame.body.wrapper
        self.save_ins = w.getInsertPoint()
        self.save_sel = w.getSelectionRange()
        if trace: g.trace('sel', self.save_sel, 'ins', self.save_ins)
    if val == "__NEXT_PLACEHOLDER":
        # user explicitly called for next placeholder in an abbrev.
        # inserted previously
        val = ''
        do_placeholder = True
    else:
        do_placeholder = False
        # Huh?
        oldSel = i, j
        c.frame.body.onBodyChanged(undoType='Typing', oldSel=oldSel)
    if trace:
        g.trace(do_placeholder, val)
    return val, do_placeholder
.. @+node:ekr.20150514043850.16: *6* abbrev.next_place
def next_place(self, s, offset=0):
    """
    Given string s containing a placeholder like <| block |>,
    return (s2,start,end) where s2 is s without the <| and |>,
    and start, end are the positions of the beginning and end of block.
    """
    trace = False
    c = self.c
    new_pos = s.find(c.abbrev_place_start, offset)
    new_end = s.find(c.abbrev_place_end, offset)
    if (new_pos < 0 or new_end < 0) and offset:
        new_pos = s.find(c.abbrev_place_start)
        new_end = s.find(c.abbrev_place_end)
        if not (new_pos < 0 or new_end < 0):
            g.es("Found placeholder earlier in body")
    if new_pos < 0 or new_end < 0:
        if trace: g.trace('new_pos', new_pos, 'new_end', new_end)
        return s, None, None
    start = new_pos
    place_holder_delim = s[new_pos: new_end + len(c.abbrev_place_end)]
    place_holder = place_holder_delim[
        len(c.abbrev_place_start): -len(c.abbrev_place_end)]
    s2 = s[: start] + place_holder + s[start + len(place_holder_delim):]
    end = start + len(place_holder)
    if trace: g.trace(start, end, g.callers())
    return s2, start, end
.. @+node:ekr.20150514043850.17: *6* abbrev.paste_tree
def paste_tree(self, old_p, s):
    '''Paste the tree corresponding to s (xml) into the tree.'''
    c = self.c
    c.fileCommands.leo_file_encoding = 'utf-8'
    p = c.pasteOutline(s=s, redrawFlag=False, undoFlag=False)
    if p:
        # Promote the name node, then delete it.
        p.moveToLastChildOf(old_p)
        c.selectPosition(p)
        c.promote(undoFlag=False)
        p.doDelete()
    else:
        g.trace('paste failed')
.. @+node:ekr.20150514043850.18: *6* abbrev.replace_abbrev_name
def replace_abbrev_name(self, w, i, j, s):
    '''Replace the abbreviation name by s.'''
    c = self.c
    if i == j:
        abbrev = ''
    else:
        abbrev = w.get(i, j)
        w.delete(i, j)
    if s is not None:
        w.insert(i, s)
    oldSel = j, j
    c.frame.body.onBodyChanged(undoType='Abbreviation', oldSel=oldSel)
    # Adjust self.save_sel & self.save_ins
    if s is not None and self.save_sel is not None:
        # pylint: disable=unpacking-non-sequence
        i, j = self.save_sel
        ins = self.save_ins
        delta = len(s) - len(abbrev)
        # g.trace('abbrev',abbrev,'s',repr(s),'delta',delta)
        self.save_sel = i + delta, j + delta
        self.save_ins = ins + delta
.. @+node:ekr.20150417053733.1: *4* Fixed @tabwidth bug
Using c.tab_width is wrong: it is the *default* tab width.

Created c.getTabWidth()
.. @+node:ekr.20160303130202.1: *4* Fixed a bug in p.__eq__
Rev 645b4ec2f9. Here is the checkin log:

Fixed a bug in p.__eq__, introduced at rev d0dd25b7b (2015-11-14 18:37:06).

p.__eq__ must *not* return NotImplemented when p2 is None.

This bug caused most of the run-x-unit-tests-y commands not to find desired tests.  It surely must have caused other problems.

All unit tests now pass (except for broken Javascript importer tests), including a new test:
@test p.__eq__.
.. @+node:ekr.20150428112500.1: *4* Fixed abbreviation bugs and improved abbreviations
@language rest
@wrap

The fixes were in abbrev.expandAbbrev and helpers.

Rev 585d2f4 improves abbreviations as follows:

- Match longest prefix first: e;; no longer interferes with date;;
- Predefine 'x' as the empty string before executing abbreviation scripts.
- Split @data abbreviations-subst-env into separate nodes.
- Defined do() and insert() functions in @data abbreviations-subst-env as follows::

@language python

    def do(commandName):
        '''Execute a command by name.'''
        c.k.simulateCommand(commandName,event=None)
    
    def insert(s):
        '''Insert the string s in the current widget.'''
        try:
            w = c.abbrevCommands.w
            if w:
                i = w.getInsertPoint()
                w.insert(i,s)
        except AttributeError:
            pass
            
@language rest
@wrap

Note:  Because of a glitch in how abbreviations scripts are created, you can't do::

    do(['command1','command2'])

even though c.k.simulateCommand allows list arguments.  Instead, do this::

    do('command1');do('command2');

The following abbreviations insert matching characters (no need to do x='' in them)::

    (={|{insert('()');do('back-char')}|}
    [={|{insert('[]');do('back-char')}|}
    {={|{insert('{}');do('back-char')}|}

This is an implementation of auto-close-quotes, done entirely with abbreviations! For example, typing '(' inserts '()' and puts the cursor between the parens.

I personally dislike these abbreviations.  I find it harder to skip past the ')' than to type it later.  ymmv.
.. @+node:ekr.20150514115247.1: *4* Fixed cut/paste from menus
.. @+node:ekr.20150622103132.1: *4* Fixed Find crash
@language rest
@wrap

https://groups.google.com/d/msg/leo-editor/tA5Q2YrEu-w/9mzqFAHMcX4J

The fix was in find.changeSelection

I'm getting weirdness when trying to use minibuffer replace, first if nothing is selected it tells me "no text selected", if I have text selected sometimes it just deletes the selected text and sometimes I see this:


File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoCommands.py", line 5496, in doCommand

val = command(event)

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoGlobals.py", line 1334, in wrapper

func(self, event=event)

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoFind.py", line 1121, in change

self.changeSelection()

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\core\leoFind.py", line 1194, in changeSelection

c.frame.tree.drawIcon(p) # redraw only the icon.

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\plugins\qt_tree.py", line 709, in drawIcon

itemOrTree = self.position2item(p) or w

File "C:\Users\L\Documents\sourcetreeapp\leo-editor\leo\plugins\qt_tree.py", line 847, in position2item

item = self.position2itemDict.get(p.key())
AttributeError: 'NoneType' object has no attribute 'key' 
.. @+node:ekr.20150715093109.1: *4* Fixed Python 3k problem with @lineending
Rev a7e2e86 fixes atFile.create.
.. @+node:ekr.20150509180744.1: *4* Fixed remove-blank-lines command
It now works when there is no text selection.
.. @+node:ekr.20150430175300.1: *4* Improved Ctrl-LtArrow
Ctrl-LtArrow and Ctrl-RtArrow leave the cursor at the start of a word.
This is the way most editors work.

The fix was in moveWordHelper.
.. @+node:ekr.20150609082813.1: *4* Investigated #153: Leo acts on some operator input when the Leo window is NOT the top window
@language rest
@wrap

Leo acts on some operator input when the Leo window is NOT the top window
https://github.com/leo-editor/leo-editor/issues/153

This problem is discussed in the Leo-Editor forum thread:
https://groups.google.com/forum/?fromgroups#!topic/leo-editor/3PPObn4JRik

I can't reliably reproduce this problem, so I can't give you a test case that demonstrates it.

The symptom that I first noticed was unexpected, unpredictable changes in what the tree pane showed when I switched back to Leo-Editor after switching away from Leo-Editor by executing open-url.

Sometimes the node selected was unchanged, but it had been scrolled up in the tree pane; and sometimes it had been scrolled all the way out of the tree pane.

Sometimes the node selected had been changed to a sibling node after the node that was selected when I switched away from Leo-Editor.

In all cases, the body pane correctly showed the contents of the currently selected node.

Sometimes an Alt-F4 when a non-Leo-Editor window is the only window showing, causes Leo-Editor to exit or display its "Save changes before exit?" query.

Edward K. Ream currently believes: "The culprit is likely a delayed action (on the order of 0.5 sec) that Leo takes on focus-in events. If the user responds to a focus-in event before that time there will be problems."

My test system:

Xubuntu32 12.04
Python 2.7.3, PyQt version 4.8.1

The problem has been observed on Leo-Editor commit f6cdb2b. It seems to occur slightly more frequently on more recent commits such as 42a5207.


.. @+node:ekr.20150609103947.1: *4* Investigated #188: Find/Replace All Suboutline only same as Node only
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/188
Find/Replace All Suboutline only same as Node only

This bug appears to be invalid.

.. @+node:ekr.20150626141225.1: *4* Investigated #188: Find/Replace All Suboutline only same as Node only
https://github.com/leo-editor/leo-editor/issues/188
  
Rev e8b134:
    
Improved reporting of find options.  The report now shows suboutline-only and node-only.
- Just after Ctrl-F the status line contains:

    Find (wixbhacf[esn]): <list of options>

- When the command completes, the status line contains:

    found/not found (<list of options>): <find pattern>

This makes it much easier to see what is going on.

I suspect that #188 is invalid.  These changes will reduce confusion.
.. @+node:ekr.20150417045902.1: *4* Recover from orphan bit in leoPyBad.leo
Rev dc1bf6f

The orphan bit was set in @file leoGlobals.py.
This prevented the file from being updated.

Changed:
- at.read.
- at.readAll
- fc.putVnode no longer writes orphan bits.
. VNode constants section: # unused    = 0x10 # (was orphanBit)
.. @+node:ekr.20150428153124.1: *4* Removed warning in at.read about orphan bits
.. @+node:ekr.20150512102759.1: *3* Code
.. @+node:ekr.20160225155031.1: *4* Added new position predicates for limiting search
​Recent revs add the following new position methods:

- p.is_at_all():  True if p is an @<file> node containing an @all directive.
- p.in_at_all(): True if p is in an @<file> tree whose root contains @all.
- p.is_at_ignore(): True if p is an @ignore node
- p.in_at_ignore_tree(): True if p is in an @ignore tree.

These predicates make it easy to create other predicates that skip @ignore trees or @<file> trees containing @all.  cffm and cfam do not skip such trees, on the theory that one would typically unmark nodes first before marking nodes to be cloned.

So here is how to gather only those marked nodes that lie outside any @ignore tree:

    def isMarked(p):
        return p.isMarked() and not p.in_at_ignore_tree()

      
    self.cloneFindByPredicate(
        generator = self.all_unique_positions,
        predicate = isMarked,
        flatten = flatten,
        undoType = 'gather-marked',
    )
.. @+node:ekr.20150422124650.1: *4* c.backup
Useful for per-file backups.
.. @+node:ekr.20160304064710.1: *4* c.cloneFindByPredicate
.. @+node:ekr.20160303073516.1: *4* Changed handling of orphan bits
April 15, 2015

Rev 419a82d changes several aspects of how Leo handles the so-called orphan bit in vnodes.  These are major changes, but I believe they will be for the best.

The orphan bit indicates that there was a problem writing an @<file> node.  It will be set, for example, when an @file node contains children but has no @others directive.  Leo simply cannot write the external file in that case.

However, Leo went overboard with the error logic. Here are the recent changes:

1. Leo no longer writes the orphan bit ('O' bit in vnode attr) in .leo files. This kind of persistent error bit seems unwise.

2. Leo clears the bit and issues a warning when reading a vnode with the 'O' attr.

Previously, Leo would refuse to update the outline from the external file if the orphan bit was set! 

This change could have unforeseen consequences, but I suspect nobody will ever notice.  The foreseen consequence is that Leo will keep the outline and external files in synch more often.
.. @+node:ekr.20150512102801.1: *4* Decorators simplify Leo's command dispatching
Please read carefully if you write plugins or are one of Leo's core developers.  Everyone else can safely ignore this post.

The present (g.new_dispatch) project simplifies Leo's code as follows:

1. Decorators will define all Leo commands.  All getPublicCommands methods will disappear, along with their association lists of command names and bound methods.

2. Leo will never call c.universalCallback.

I understand neither it's docstring, nor its code, nor why it is needed. Leo will be better off without it and the corresponding 'wrap' argument to k.registerCommand. This wrapper gives rise to wretched code::

    @g.command('cke-text-open')
    def cmd_OpenEditor(kwargs, at_rich=False):
        '''Open the rich text editor, hide the regular editor.'''
        c = kwargs['c'] if isinstance(kwargs, dict) else kwargs

Apparently, kwargs might be two different kinds of objects depending on who calls the function.  This kind of code must go.  In an emergency, code could add ivars/attributes to exiting events, but even that would be too complex by half.

3. The Plugin class in plugins_menu.py creates Leo commands for functions whose names start with ``cmd_``.  It took me hours yesterday to figure out that this was happening.

<< Look for additional commands >> creates yet another wrapper, with yet another signature. The wrapper now has a more conforming signature and a better name::

    def plugins_menu_wrapper(kwargs, cmd=cmd):
        return cmd(kwargs['c'])

This signature allows a unit test to pass even when plugins_menu_wrapper is not wrapped again.

Happily, all of this is going to go away. ``@g.command`` will define all commands in plugins. No more invisible ``cmd_`` naming convention.

4. class AtButtonCallback now supports the __name__ attribute using a new __getattr__ method. This allows k.registerCommand not to know about the AtButtonCallback wrapper.

5. The LeoKeyEvent class now has a get method.  Code can now call event.get('c') in all cases.  Probably ditto for kwargs.get('c').

**Summary**

The new_dispatch project simplifies some of the most complex code in Leo.  It is worth a week's work.

I followed three principles while simplifying the code:

1. Eliminate malignant if statements::

    c = kwargs['c'] if isinstance(kwargs, dict) else kwargs

proliferates implementation details from one part of Leo to another.  As a result, it becomes much harder to change code without side effects.  I have been dealing with such side effects all week.

2. Regularize interfaces.

- ``@cmd`` or ``@g.command`` decorators will define all Leo commands.
- The ``cmd_`` convention will disappear, along with the complex code that creates it.
- event.get('c') will work in any code decorated by ``@cmd`` or ``@g.command``.
- AtButtonCallback instances now have a __name__.

3. Regularize objects.

Changing the interface of an object by wrapping it is unacceptable. c.universalCallback must go.

.. @+node:ekr.20150513163611.1: *5* What I did
@language rest
@wrap

- Defined all commands in leoPlugins.leo with @g.command.
- Eliminate the "cmd_" convention.
  The g.command decorator now sets func.is_command and func.command_name.
  Plugin.create_menu is now much simpler.
- All decorated commands now use the "event" arg:

    @g.command('command-name')
    def my_command(event=None):
        ...
    
    @cmd('command-name')
    def my_command(self,event=None):
        ...
.. @+node:ekr.20160229081126.1: *4* Removed g.isChar
A bad idea.
.. @+node:ekr.20150501041440.1: *4* Reorganized Leo's commands files
The leo/commands directory contains the new code.
.. @+node:ekr.20150503050557.1: *4* Replace all has_key by "in"
.. @+node:ekr.20150622130738.1: *4* Verified that c.p.copy() is always redundant
Examined c.p and c.currentPosition
.. @+node:ekr.20160304063730.1: *3* Commands: new & improved
    attribute=None,# Optional attribute to attach to all matches.
.. @+node:ekr.20150609110852.1: *4* Alt-N (goto-next-clone) falls backs to find-next-clone
.. @+node:ekr.20160225050603.1: *4* cfa and cff
@language rest
@wrap

Rev 38db98ff improves Leo's *existing* clone-find commands:

- cff (clone-find-flattened)
- cfa (clone-find-all)

in the following extremely important ways:

1. These commands search the entire outline, regardless of the presently selected node. This is a *huge* improvement to my workflow—I don't have to worry about where I start searches. These commands do honor suboutline-only searches. For me, this is moot because I almost never use suboutline-only-restricted searches.

2. These commands ignore @ignore trees and any @<file> tree whose root nodes contains an @all directive. This is a super tweak: I don't get false matches about nodes in the attic.

3. These commands are significantly than before because they search body text in one step.

​
​Just to wrap this up, the new commands, cff, cfa, cffm and cfam are are revolution in my work flow. They pass the acid test. Three things make the new commands work:

1. The command names are short enough that they don't need either key bindings or pre-loaded entries in command history. Indeed, I've basically stopped using command history.

2. The commands search the entire outline, except for @ignore trees and @<file> node containing ​@all in the top-level node.

3. The commands put their results in the last top-level node and (usually, there is a little bug lurking somewhere) select that node.

This means that these commands are so convenient that they become temporary. I don't keep them around because it's easy to recreate them.

Because they are so convenient, I almost always use them instead of Ctrl-F. After I create the clone-find node, I then use Ctrl-F (with the existing find pattern) to search the clone-find results.

This is the pattern I have been looking for. I'm not looking for anything better. Notice, it no longer matters how many clones there are.

Edward


.. @+node:ekr.20160303130755.1: *4* cff and cfa
3. The cff and cfa commands now always search the entire outline. This is a major improvement, imo. 

4. The cff and cfa commands now always collapse the entire outline. This is almost always what I want, and it ensures that the newly-created node will be selected properly, something that was not always true before.

These seemingly small improvements actually fix most of my complaints re clones!

And one more improvement:  These commands ignore @ignore trees and any @<file> tree whose root nodes contains an @all directive. This is a super tweak:  I don't get false matches about nodes in the attic.​
 

    These seemingly small improvements actually fix most of my complaints re clones!


​And two new commands, the clone-find-marked commands, fix all my complaints about clones. I'll discuss these commands in a new thread so they get the attention they rightly deserve.

.. @+node:ekr.20150717103242.1: *4* clear-log
.. @+node:ekr.20160225045341.1: *4* cffm and cfam
@language rest
@wrap

I said previously that clones are just fine as they are. What is needed isn't fancier clones, but rather better search commands.

Rev c8a3581c9 adds two commands that will revolutionize my workflow:
    
- cffm, aka clone-find-flattened-marked
- cfam, aka clone-find-all-marked

These commands create a "target" node as the last top-level node, and clone all marked nodes under the target node.  cffm makes each marked node a child of the target. cfam does not create a child for marked nodes that are descendants of a marked node.

This makes gathering nodes a snap. Just go through the outline, marking the desired nodes, then execute cfam or cffm.  I prefer cffm because all found nodes appear as direct children of the target. These two commands are much better than auto-moving clones as they are made, as I had intended to do yesterday.

Leo's clone-find and clone-find-marked commands allow me to quickly gather desired nodes without duplicates, *regardless* of how many clones there are in an outline. These commands are the magic bullets for searching that I have wanted for decades.

Please try these commands. They are extremely useful.
.. @+node:ekr.20150630160037.1: *4* clone-to-at-spot
Create a clone of the selected node and move it to the last @spot node
of the outline. Create the @spot node if necessary.
.. @+node:ekr.20150619075613.1: *4* Find commands now show status
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/177

After a find command completes (successfully or not), the status areas shows:

- Whether the find command completed successfully.
- The find options in effect for the search.

Previously, the status line was only updated for unsuccessful searches, and it did not contain the find options in effect.  The new status line is much more helpful than the old.

By default, Leo reports successful searches with white text on a blue background and failed searches with white text on a red background. These colors work pretty well even for dark themes.

You can choose these colors using the following settings:
   
     @color find-found-bg = blue
     @color find-found-fg = white
     @color find-not-found-bg = red
     @color find-not-found-fg = white
     
find.showStatus now gets proper colors from settings.
     
Changed the signature of QtStatusLineClass.putStatusLine and its helpers.
.. @+node:ekr.20150513180101.1: *4* find-all now writes to the body of a new top-level node
Pretty much like clone-find-all.
.. @+node:ekr.20150227040245.10: *4* find-def & find-var
@language rest
@wrap

Leo's new find-def & find-var commands
https://groups.google.com/d/msg/leo-editor/mq_sQ2cpa9k/3rtHZyKnMTIJ

About recent changes to Leo's find commands
https://groups.google.com/d/msg/leo-editor/_y1u2Vlm-0I/LoAGSH_HBgsJ

Done:
- find-def and F3/F2 work together.
- @bool find-ignore-duplicates = False
- Ctrl-click on a word executes find-def.

(Maybe) Multiple defs:
- Prefer matches in @<file> trees.
- Do cfa-flattened. (Only if enabled by @bool find-def-uses-cfa-flattened).
- Bring up popup.

Leo now supports find-def and find-var commands.  They find the definitions of classes, defs or vars.

They work as follows:

- Select the word at the cursor, if text is not already selected.
- Save the find settings in effect before the command started.
- find-def sets the search pattern to "class word" or "def word" depending on whether word is capitalized.
- find-var sets the search pattern to "word =".
- Set word-find to True
- Start the search at the root position of the outline.

This will find the first definition of the word.  Thereafter, you can use F3 (find-next) to find additional definitions.

When the search fails, Leo restores the Find settings to what they were previously.

A new setting, @bool find-ignore-duplicates (default False), controls whether any search command ignores duplicate matches.  Ctrl-F restarts searches, clearing a list of vnodes that have already been seen.  Any failed search also clears the list of vnodes.

Obviously, this scheme is a bit naive.  The search patterns could be improved.  However, even this simple scheme is surprisingly useful.  Furthermore, these commands have implications that I'll discuss in another thread.
.. @+node:ekr.20150629080954.1: *5* posts
https://groups.google.com/d/msg/leo-editor/p3MR1es0Ez0/U4ME-UAuf0AJ

===== Matt

Wanted Leo function or plugin: Ctrl-X click or R-click {selected text} or ... that jumps to the associated node or function.

Consider the following code:

    print "Downloading", ', '.join(packages)
    for p in packages:
        do_download(p)
        ball(p)
        md5(p)

Wouldn't be nice to ctrl-click `do_download` and have Leo navigate to whatever node contains def do_download(): ?

===== Terry:

Seems like the codewise ctags thing Ville worked on does most of that, may need refreshing though. 

.. @+node:ekr.20150630092648.1: *5* ctrl-click now supports find-def
The code involves lqtb.onMouseUp and g.openUrlOnClick
.. @+node:ekr.20160127031500.1: *4* flatten-outline-to-node
.. @+node:ekr.20150628182314.1: *4* help-for-keystroke
Useful: tells the command name or names associated with any keystroke.

Prompts for a single character: shows corresponding command.

Added leoHelpCommands.helpForKeystroke
.. @+node:ekr.20160225053416.1: *4* Improved clone-find commands. Added clone-find-marked commands
The new **clone-find-marked** commands and improved **clone-find** commands revolutionize my workflow.

.. @+node:ekr.20150703072334.1: *4* New commands greatly improve work flow
Recent revs make ctrl-click execute the find-def command if what is under the cursor is not a url.  There is no need to select the word--that's done automatically.

This quickly becomes indispensable. I have the following bindings defined, so there there is no need to move the mouse:

Ctrl-4: find-def
Ctrl-5: find-var

Furthermore, several recent changes/additions are remarkably useful:

clone-to-at-spot

This command does the following:

1. Clones the selected node.
2. Moves the clone to the last child of the last @spot node in the outline.
3. Collapses all nodes in the outline.
4. Selects the newly-cloned node, thereby making it visible.

I typically create the following project node:

   @spot re: the project name

pre-loaded find patterns

Today I improved the clone-find-all commands so they pre-select the find pattern more usefully.  leoPy.leo defines @button cfa-code as::

c.cloneFindAllFlattenedAtNode('Code',top_level=True)

This code now preloads the find pattern before selecting the top-level "Code" node.

These new and improved commands make a big difference to my work flow.

Edward
.. @+node:ekr.20150325052301.1: *4* vim-open-file command
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/165

Later: preserve cursor positions.

All the changes were to the ExternalFilesController class.
.. @+node:ekr.20160304063812.1: *3* Directives: new
.. @+node:ekr.20150530084545.1: *4* @beautify and @nobeautify
These directives are inherited as usual.
.. @+node:ekr.20150622075706.1: *4* @wrap now honored immediately
Leo now immediately wraps the body pane when @wrap is in effect.
Previously, the user had to reselect the node when typing "@wrap". This
fixes an annoying hangnail.

- Added match_at_wrap to jEdit colorizers.
- Added force keyword option to all setWrap methods.
  This is needed because text can be colorized before c.p.b stabilizes.
.. @+node:ekr.20150427042446.1: *3* Features: new
.. @+node:ekr.20150211131925.4: *4* Abbreviations now support auto-close quotes
https://groups.google.com/d/msg/leo-editor/yJLz-p3I4mY/Pqa1phYN_10J
.. @+node:ekr.20150620103337.1: *4* Added new Themes machinery
leoSettings.leo now contains a new top-level node::

    @ignore Themes: copy to last top-level setting in myLeoSettings.leo

The body text tells what to do with it, namely:

To enable a theme:
   
1. Copy this entire tree to myLeoSettings.leo.
2. Move the tree so it is the last top-level node under @settings.
3. Remove the @ignore from the copy of this node.
4. Enable one of the three themes below by removing @ignore for its node.
5. Test by opening another Leo outline.

Important Notes

1. The "Themes" node does not define @data qt-gui-plugin-style-sheet.

Instead the new themes machinery uses the so-called "fully parameterized" stylesheet that we have all been using for at least several months now.  This stylesheet is defined as a descendant of the "Appearance" node.

2. The only functional theme is a new ekr_dark theme.  It illustrates how to use the new themes machinery.

- This theme uses a small, custom @data qt-gui-user-style-sheet that adjust colors around outline indicators.

- There is a tree call "Common to all themes" which contains settings that probably can be shared by most themes.  Naturally, setting in that tree can be overridden as you desire.

3. The new themes machinery is supposed to be completely self contained.  That is, there should be no need to use a script to generate a theme.

Yes, the user must fill in all appearance-related settings.  But most users will already have done this, so adjusting the settings for a theme should be straightforward.

4. The "Common to all themes" node contains an "Outline indicators" node that specifies a relative path to outline indicator icons (arrow icons or plus/minus) icons.  The path can be relative to either the users home directory or (as shown in leoSettings.leo) relative to the leo/Icons directory. 
.. @+node:ekr.20160303131234.1: *4* Added syntax coloring for coffeescript
.. @+node:ekr.20160301094120.1: *4* Allow wildcard expansion of filenames on the command-line
Like leo leo\test\*.leo.
Previously, Leo crashed!
.. @+node:ekr.20150710103707.1: *4* Ctrl-G now resets status line
Useful after a failed Ctrl-F
.. @+node:ekr.20150611163439.1: *4* Optional line numbers
https://github.com/leo-editor/leo-editor/issues/186

Controlled by the following new settings in leoSettings.leo, with defaults as shown::
    
    @bool use_gutter = True
    @color gutter-bg = @LightSteelBlue1
    @color gutter-fg = black
    @int gutter-w-adjust = 12
    @int gutter-y-adjust = 10
    @string gutter-font-family = @font-family
    @string gutter-font-size = @small-font-size
    @string gutter-font-style = @font-style
    @string gutter-font-weight = @font-weight
    
Code involves:
    
- dw.createBodyPane.
- class NumberBar(QFrame)
- class LeoLineTextWidget(QFrame)
.. @+node:ekr.20160303043126.1: *4* Use Qt code to show invisibles
Better looking than the old way.
.. @+node:ekr.20160304065939.1: *3* Menus: new
.. @+node:ekr.20160303114520.1: *4* Settings: Edit Settings menu
Terry Brown August 23, 2015
https://groups.google.com/d/msg/leo-editor/pM8aVJ1D6ao/Z8lq43t7FAAJ

There's now an "Edit settings" menu under the main Settings menu.

It's not going to make everyone (anyone?) happy, you still have to edit
the content of a Leo headline to change font size etc.  The new
functionality is that it finds the appropriate setting and copies it to
the appropriate outline for you, so knowing what to look for and how to
manage it is handled.

Sometimes you'll see this:

    The relevant setting, '@bookmarks_base_color', is using the value of
    a more general setting, '@text-foreground'.  Would you like to edit
    the more specific setting, '@bookmarks_base_color', or the more
    general setting, '@text-foreground'?  The more general setting may
    alter appearance / behavior in more places, which may or may not be
    what you prefer.

                            Edit specific   Edit general   Cancel

Wordy, but I think easy enough to follow.  I guess everything after the
last comma could be deleted :-)

If the setting is in leoSettings.leo, you see:

    The setting '@body-font-family' is in the Leo global configuration
    file 'leoSettings.leo' and should probably be copied to
    'myLeoSettings.leo' before editing.
    It may make more sense to copy a group or category of settings.

    Please enter 1, 2, 3, or 4:
    1. copy the one setting, '@body-font-family'
    2. copy the setting group, 'Body font' (Recommended)
    3. copy the setting whole category, 'Fonts'
    4. edit the setting in 'leoSettings.leo' anyway

Again, wordy, but I think easy enough to understand.

(Having to enter a number to pick an option is clunky, a
 gui-independent 'pick item from list widget' can be added to Leo, I
 just didn't want to mix that task into the current task.)

Note "Reload settings" isn't working as effectively as I think it
should, that may need to be addressed as well.  Unrelated to the new
code.

So, this isn't a silver bullet for the newbie setting editing woes, but
it does eliminate a lot of the Leo specific knowledge required (apart
from "edit a headline").  Also this new approach can be developed
further based on feedback, just wanted to get what I had so far into
the main branch for testing etc.
.. @+node:ekr.20150420130845.1: *4* File:Print menu
jasonic

Leo deserves good friendly printing features which anyone can use. At the moment we have a confusing patchwork of choices. Printing Leo seems to be both harder and easier than  first meets the eye.

print-to-web (htmlize) should definitely be on Leo's missing PRINT MENU.

Having a little library of export scripts--well named, documented and intended to aid printing woudl go a long way. Thesse scripts anyone coiuld be called by onayone given a Leo Outline, accessing a navabr button. PRINT MENU or list. Or they can just insert the appropriate script  into an outline giving finer grained print control on the fly.
.. @+node:ekr.20160304064625.1: *3* Plugins: new & improved
.. @+node:ekr.20150412053053.1: *4* leoOPML.py
.. @+node:ekr.20160303114324.1: *4* mod_http.py: controlling Leo remotely
Terry Brown July 29, 2015

Controlling Leo remotely
https://groups.google.com/d/msg/leo-editor/wWWUgfDhPi4/VmRRRa_xDAAJ

Prompted by the IRC discussion today, I've added remote code execution
abilities to mod_http.py  Relevant part of the doc.s pasted below.

This is a plus for a couple of reasons - previously you had to use
the leoremote plug-in which used sockets and was really python only,
this new approach just uses HTTP GET requests which can be generated by
almost anything (language, link in a doc., browser bookmark, etc.).
Also leoremote doesn't work in Python 3.x.

This code to load a file into Leo from the command line:
https://github.com/leo-editor/snippets/blob/master/utils/led.py

Can be replaced with this version:
https://github.com/leo-editor/snippets/blob/master/utils/led.sh

Executing code remotely
-----------------------

.. warning::

    Allowing remote code execution is a **HUGE SECURITY HOLE**, you need to
    be sure that the url from which you access Leo (typically
    http://localhost:8130/) is accessible only by people and software you trust.

    Remote execution is turned off by default, you need to manually / locally
    change the @setting ``@bool http_allow_remote_exec = False`` to ``True``
    to enable it.

Commands to be executed are submitted via HTTP GET requests, which can
be generated in almost any language and also triggered from shortcuts,
links in other documents or applications, etc. etc.

The basic form is::

    http://localhost:8130/_/exec/?cmd=<python code for Leo to execute>

The query parameters are:

``cmd`` (required)
    A valid python snippet for Leo to execute.  Executed by
    the ``vs-eval`` command in the ``valuespace`` plug-in.  Can be
    specified multiple times, each is executed in order.  May contain
    newlines, see examples.
``c`` (optional)
    Which currently loaded outline to use, can be an integer, starting
    from zero, or the full path+filename, or just the base filename.
    Defaults to 0 (zero), i.e. the "first" open outline.
``enc`` (optional)
    Encoding for response, 'str', 'repr', or 'json'.  Used to render
    the returned value.
``mime_type`` (optional)
    Defaults to ``text/plain``.  Could be useful to use ``text/html`` etc.

A special variant url is::

    http://localhost:8130/_/exec/commanders/

which returns a list of open outlines.

Examples
========

This command::

    curl http://localhost:8130/_/exec/?cmd='c.bringToFront()' >/dev/null

will raise the Leo window, or at least make the window manager signal the
need to raise it.

::

    curl --get --data-urlencode \
      cmd='g.handleUrl("file:///home/tbrown/.leo/.contacts.leo#Contacts", c)' \
      http://localhost:8130/_/exec/ >/dev/null

will cause a running Leo instance to open ``/some/path/contacts.leo`` and select
the ``Contacts`` node.  A desktop icon link, browser bookmark, or link in a
spread-sheet or other document could be used the same way.

In the ``bash`` shell language, this code::

    TEXT="$@"
    curl --silent --show-error --get --data-urlencode cmd="
        nd = c.rootPosition().insertAfter()
        nd.h = 'TODO: $TEXT'
        import time
        nd.b = '# created %s' % time.asctime()
        c.selectPosition(nd)
        c.redraw()
        'To do item created\n'
    " http://localhost:8130/_/exec/

could be written in a file called ``td``, and then, assuming that file is
executable and on the shell's path, entering::

    td remember to vacuum the cat

on the command line would create a node at the top of the first open outline in
Leo with a headline ``TODO: remember to vacuum the cat`` and a body text ``#
created Wed Jul 29 16:42:26 2015``. The command ``vs-eval`` returns the value of
the last expression in a block, so the trailing ``'To do item created\n'`` gives
better feedback than ``None`` generated by ``c.redraw()``.
``c.selectPosition(nd)`` is important ant to stop Leo getting confused about
which node is selected.
.. @+node:ekr.20160304070425.1: *3* Scripts: new
.. @+node:ekr.20160124055305.1: *4* make_stub_files.py
@language rest
@wrap

Announcing make_stub_files.py

This post introduces the make_stub_files.py script, explaining what it does, how it works and why it is important. The script is at
GitHubGist: https://gist.github.com/edreamleo/5c2d625e223e3d04c11d.
All contributions welcome.

===== Executive summary

The make_stub_files script eliminates much of the drudgery of creating
python stub (.pyi) files https://www.python.org/dev/peps/pep-0484/#stub-files
from python source files. To my knowledge, no such tool presently exists.

The script does no type inference. Instead, it creates function annotations using user-supplied **type conventions**, pairs of strings of the form "name: type-annotation".

A **configuration file**, ~/stubs/make_stub_files.cfg, specifies the **source list**, (a list files to be processed), the type conventions, and a list of **prefix lines** to be inserted verbatim at the start of each stub file.

This script should encourage more people to use mypy. Stub files can be used by people using Python 2.x code bases. As discussed below, stub files can be thought of as design documents or as executable and checkable design tools.

===== What the script does

For each file in source list (file names may contain wildcards), the script creates a corresponding stub file in the ~/stubs directory.  This is the default directory for mypy stubs. For each source file, the script does the following:

1. The script writes the prefix lines verbatim. This makes it easy to add common code to the start of stub files.  For example:

    from typing import TypeVar, Iterable, Tuple
    T = TypeVar('T', int, float, complex)
    
2. The script walks the parse (ast) tree for the source file, generating stub lines for each function, class or method. The script generates no stub lines for defs nested within other defs.

For example, given the naming conventions:

    aList: Sequence
    i: int
    c: Commander
    s: str
    
and a function:

    def scan(s, i, x):
        whatever
        
the script will generate:

    def scan(s: str, i:int, x): --> (see below)
    
===== Handling function returns
    
The script handles function returns pragmatically.  The tree walker simply writes a list of return expressions for each def.  For example, here is the output at the start of leoAst.pyi:

class AstDumper:
    def dump(self, node: ast.Ast, level=number) -> 
        repr(node), 
        str%(name,sep,sep1.join(aList)), 
        str%(name,str.join(aList)), 
        str%str.join(str%(sep,self.dump(z,level+number)) for z in node): ...
    def get_fields(self, node: ast.Ast) -> result: ...
    def extra_attributes(self, node: ast.Ast) -> Sequence: ...

The stub for the dump function is not syntactically correct because there are 4 returns listed. You must edit stubs to specify a proper return type.  For the dump method, all the returns are obviously strings, so its stub should be:

    def dump(self, node: ast.Ast, level=number) -> str: ...

Not all types are obvious from naming conventions. In that case, the human will have to update the stub using the actual source code as a guide. For example, the type of "result" in get_fields could be just about anything. In fact, it is a list of strings.

===== The configuration file

As mentioned above, the configuration file, make_stub_files.cfg, is located in the ~/stubs directory.  This is mypy's default directory for stubs.

The configuration file uses the .ini format. It has two sections. The [Global] section specifies the files list and prefix lines.  The [Types] section specifies naming conventions.  For example:

    [Global]
    files:
        ~/leo-editor/leo/core/*.py
        
    prefix:
        from typing import TypeVar, Iterable, Tuple
        T = TypeVar('T', int, float, complex)

    [Types]
    aList: Sequence
    c: Commander
    i: int
    j: int
    k: int
    n: int
    node: ast.Ast
    p: Position
    result: str
    s: str
    v: VNode

===== Why this script is important

The script eliminates most of the drudgery from creating stub files. Creating a syntactically correct stub file from the output of the script is straightforward.  

Stub files are real data. mypy will check the syntax for us. More importantly, mypy will do its type inference on the stub files.  That means that mypy will discover both errors in the stubs and actual type errors in the program under test. There is now a simple way to use mypy!

Stubs express design intentions and intuitions as well as types. We programmers think we *do* know most of the types of arguments passed into and out of functions and methods. Up until now, there has been no practical way of expressing and *testing* these assumptions. Using mypy, we can be as specific as we like about types.  For example, we can simply say that d is a dict, or we can say that d is a dict whose keys are strings and whose values are executables with a union of possible signatures.  In short, stubs are the easy way to play with type inference.

Most importantly, from my point of view, stub files clarify issues that I have been struggling with for many years. To what extent *do* we understand types? mypy will tell us. How dynamic (RPython-like) *are* our programs?  mypy will tell us. Could we use type annotation to convert our programs to C.  Heh, not likely, but the data in the stubs will tell where things get sticky.

Finally, stubs can simplify the general type inference problem.  Without type hints or annotations, the type of everything depends on the type of everything else. Stubs could allow robust, maybe even complete, type inference to be done locally. We might expect stubs to make mypy work faster.

===== Summary

The make-stub-files script does for type/design analysis what Leo's c2py command did for converting C sources to python. It eliminates much of the drudgery associated with creating stub files, leaving the programmer to make non-trivial inferences.

Stub files allow us to explore type checking using mypy as a guide and helper. Stub files are both a design document and an executable, checkable, type specification. Stub files allow those with a Python 2 code base to use mypy.

One could imagine a similar insert_annotations script that would inject function annotations into source files using stub files as data. This "reverse" script should be about as straightforward as the make-stub-files script.

Edward
.. @+node:ekr.20160303115722.1: *4* Make stub files
For several years now I have been attempting to do something interesting re type checking.  Yesterday, that effort finally bore fruit. This post explains the make-stub-files command (see recent revs), tells why it is important and how it can be improved.

Executive summary

The make-stub-files does for type/design analysis what the c2py command did for converting C to python.  The command eliminates most of the drudgery associated with creating python stub (.pyi) files. This makes it possible to use mypy without changing Leo's source code.

What the command does

The make-stub-files command makes python stub (.pyi) files for @<file> x.py nodes "close" to the selected node.

Stub files are discussed in pep484 (type hints) and also this page in the mypy documentation. Stub files contain function annotations (pep 3107) for the mypy type checker.  Leo can't use annotations because they raise syntax errors in Python 2.x.

The make-stub-files command is very simple. It walks the ast (parse) tree for x.py, writing annotations for all defs and classes to the corresponding x.pyi file in the ~/stubs directory.  This is the default directory for mypy stubs.

The make-stub-files command knows nothing about types!  It only knows about naming conventions.  At present, this knowledge is hard-wired into this Python dictionary:

    {
        'aList': 'Sequence',
        'aList2': 'Sequence',
        'c': 'Commander',
        'i': 'int',
        'j': 'int',
        'k': 'int',
        'node': 'ast.Ast',
        'p': 'Position',
        's': 'str',
        's2': 'str',
        'v': 'VNode',
    }

This is a good start for Leo's own source code. It will be generalized using one or more @data nodes.  We want to be able to specify default conventions that can be overridden on a file-by-file basis.

It's easy for the command to use these conventions for function arguments.  For example, the dict above says to replace:

    def foo(s):
        return s

by

    def foo(s: str):
        return s

The command handles function returns is in a pragmatic way.  The tree walker simply associates a list of return expressions with each def.  For example, here is the output at the start of leoAst.pyi:

class AstDumper:
    def dump(self, node: ast.Ast, level=number) ->
        str%(name,sep,sep1.join(aList)),
        str%str.join(str%(sep,self.dump(z,level+number)) for z in node),
        str%(name,str.join(aList)),
        repr(node): ...
    def get_fields(self, node: ast.Ast) -> result: ...
    def extra_attributes(self, node: ast.Ast) -> aList: ...

Notes:

1. The stub for the dump function is not syntactically correct because there are 4 returns listed. It is up to a human to specify a proper return type.  In this case, all the returns are obviously (to a human) strings, so a human could replace the first stub by:

    def dump(self, node: ast.Ast, level=number) -> str: ...

2. At present, the command makes no substitutions for aList, etc. within return values.  It will do so fairly soon.  So the stub for extra_attributes would become:

  def extra_attributes(self, node: ast.Ast) -> Sequence: ...

3. The present dictionary contains only class names, but type aliases could also be used to make the results clearer. The definitions of these aliases could be added by hand at the start of the stub file, or could be automatically inserted somehow.

4. Not all types are obvious from naming conventions. In that case, the human will have to update the stub using the actual source code of the def as a guide. For example, the type of "result" in get_fields could be just about anything.  Actually, it is a list of strings.

Why this command is important

1. The command eliminates most of the drudgery from creating stub files. Creating a syntactically correct stub file from the output of the command is straightforward.  The command will be made more flexible using @data nodes.

2. The make-stub-files code does no type inference.  This is a giant breakthrough. We can gain the benefits of mypy without doing anything clever.

The make-stub-files command is much simpler than c2py. The StubTraverser class overrides only three (simple!) visitors.  The  base AstFullTraverser class does all the other work. The format_returns method could be improved as discussed above, but even as is the command is extremely useful.

3. Stub files are real data.  Mypy will check the syntax for us. More importantly, mypy will do its type inference on the stub files.  That means that mypy will a) find errors in the stubs and b) actual type errors in Leo. There is now a simple way to use mypy!

4. Stubs express design intentions as well as types.  In most cases, programmers do know the expected types of arguments. Up until now, there has been no official/practical way of expressing this knowledge in Python 2.

5. One could imagine a "reverse" command that would inject function annotations into files from stub files. The command would be about as simple as make-stub-files.

Edward

P.S. The make-stub-files command works as follows:

1. It creates the stub file, x.pyi, if c.p (the selected node) is an @<file> node for x.py.
2. If not,the command creates sub files for all @<file> nodes in c.p.subtree().
3. If steps 1 and 2 did not find any @<file> nodes, the command looks at p.parents() for the first @<file> node.

This is typical behavior for Leo's file-oriented commands.
.. @+node:ekr.20160304063830.1: *3* Settings: new & improved
.. @+node:ekr.20150710064429.1: *4* @bool preload-find-pattern
When True, find commands get their find pattern from the word under the cursor.
.. @+node:ekr.20150710063700.1: *4* @bool syntax-error-popup
True: syntax errors raise impossible-to-miss popup dialog.
.. @+node:ekr.20150619082025.1: *4* @bool use_find_dialog
Enable with: @bool use_find_dialog = True
Related setting: @bool close-find-dialog-after-search = False

Defaults are as shown above.
.. @+node:ekr.20160304070243.1: *4* @color find-*
The following settings set the colors in the status line after a search completes:

    @color find-found-bg = blue
    @color find-found-fg = white
    @color find-not-found-bg = red
    @color find-not-found-fg = white
.. @+node:ekr.20150416060248.1: *4* @data abbreviations-subst-env now allows Leo directives
The fix was to create a dummy root position in abbrev.init_env.
.. @+node:ekr.20150425135844.1: *4* @data history-list
If you aren't using the @data history-list setting chances are that you missing a big chance to simplify your workflow. At one time I thought the history list was a minor feature.  I could not have been more wrong.

The body of the @data history-list node should contain a list of command names, one per line.  This list can include commands created by @command/@button nodes.

You execute items in the history list by doing Alt-X followed by an up arrow to get the first item in the list, or one or more down arrows to get later items in the list.  The last item you execute from this list goes to the head of the list.  Once you have executed an item, Ctrl-P (repeat complex command) will re-execute it.

The history list works well for commands that aren't quite worth a separate key binding, but that nevertheless you find you using quite often.

Even better, the history list is a perfect complement to @button and @command nodes that are tailored for a particular outline. For example, there is a button called cfa-code in leoPy.leo that executes the clone-find-all-flattened command starting at the top-level "Code" node.
.. @+node:ekr.20150611163526.1: *4* @data qt-gui-user-style-sheet
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/183

Added @ignore @data qt-gui-user-style-sheet to leoSettings.leo.
This contains  alternative active pane highlighting.

This completes enhancement #183: mprove focus-border handling in qt stylesheet
https://github.com/leo-editor/leo-editor/issues/183

It would be tricky, and not terribly useful, to fold this user stylesheet into
the main @data qt-gui-plugin-style-sheet, especially considering that
themes may want to use qt-gui-user-style-sheet.

Also, the default settings aren't bad, but I prefer to change qt-gui-user-style-sheet directly.
.. @+node:ekr.20150426052139.1: *4* @ifenv, improved @ifplatform & @ifhostname
@language rest
@wrap

Here are the details:

@ifenv name, one-or-more-comma-separated values
 
Includes descendant settings if os.getenv(name) matches any of the values.

- Case is significant in the *name* of the environment variable.
- Case is ignored in the *values*.

Examples:

@ifenv HOSTNAME,bob
    Enables descendant settings if os.environ('HOSTNAME') is 'Bob' or 'bob'
   
@ifenv EDITOR,leo,lion
    Enables descendant settings if os.environ('Editor') is 'Leo' or 'Lion', etc.

@ifplatform name,  one-or-more-comma-separated values.
  
Includes descendant settings if sys.platform matches any of the values, ignoring case.

Examples:

@ifplatform darwin,linux2
    Enables descendant settings for MacOS and Linux.

@ifplatform win32
    Enables descendant settings for Windows
  
@ifhostname name

Includes descendant settings if os.environ('HOSTNAME') == name

@ifhostname !name

Includes descendant settings if os.environ('HOSTNAME') != name
.. @-all
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
