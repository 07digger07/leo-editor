.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20161207045908.1: ** 5.5 @button scripts
.. @+node:ekr.20161207053432.1: *3* at-button make-importer
Make a new @@file importers/x.py file.

This button created most of Leo's new importers.
.. @+node:ekr.20161207053551.1: *3* at-button make-md-heads
Create markdown headers throughout the nearest .md outline.

That is, prepend p.b[0] with markdown section markup, if appriate.
.. @+node:ekr.20161207053316.1: *3* at-button make-md-toc
Make a markdown table of contents from an @auto-md node.
.. @+node:ekr.20161207045929.1: *3* at-button make-table
Create a table of expected headlines in a unit test.

To use this script, select the root of the tree containing the expected
results. After running this, copy the table from the console.

**Details**

The present generation of unit tests not only verify perfect import, but ensure that the outline has expected structure, more or less.

The outline of such tests is:

s = r'''
The input, maybe many lines.
'''
table = ( a list of expected headlines )
try:
    c.importCommands.coffeeScriptUnitTest(p,s=s,showTree=True)
    if 1: # Verify that the test produces the expected headlines.
      p2 = c.p.firstChild().firstChild()
      for h in table:
          assert p2.h == h, (p2.h, h)
          p2.moveToThreadNext()
finally:
    if 1: # clean up
        p.deleteAllChildren()

If the test produces a large outline, it would be unbearable to create the table by hand.  Instead, I used the following, now in scripts.leo:
.. @+node:ekr.20161207053353.1: *3* at-button make-test
Make an @test node for the importer whose name is given.
.. @+node:ekr.20161024061341.1: ** 5.5 Bugs
.. @+node:ekr.20161024044100.1: *3* Fixed bug in bracket matching
# A recent in doPlainChar change to handle #14 ruined bracket matching.
.. @+node:ekr.20160924135613.1: *4* doPlainChar
def doPlainChar(self, action, ch, event, inBrackets, oldSel, stroke, w):
    c, p = self.c, self.c.p
    isPlain = stroke.find('Alt') == -1 and stroke.find('Ctrl') == -1
    i, j = oldSel
    if i > j: i, j = j, i
    # Use raw insert/delete to retain the coloring.
    if i != j: w.delete(i, j)
    elif action == 'overwrite': w.delete(i)
    if isPlain:
        ins = w.getInsertPoint()
        if self.autojustify > 0 and not inBrackets:
            # Support #14: auto-justify body text.
            s = w.getAllText()
            i = g.skip_to_start_of_line(s, ins)
            i, j = g.getLine(s, i)
            # Only insert a newline at the end of a line.
            if j - i >= self.autojustify and (ins >= len(s) or s[ins] == '\n'):
                # Find the start of the word.
                n = 0
                ins -= 1
                while ins-1 > 0 and g.isWordChar(s[ins-1]):
                    n += 1
                    ins -= 1
                oldSel = (ins, ins)
                self.insertNewlineHelper(w, oldSel, undoType=None)
                ins = w.getInsertPoint()
                ins += (n+1)
        w.insert(ins, ch)
        w.setInsertPoint(ins + 1)
    else:
        g.app.gui.insertKeyEvent(event, i)
    if inBrackets and self.flashMatchingBrackets:
        self.flashMatchingBracketsHelper(c, ch, i, p, w)
.. @+node:ekr.20161016060615.1: *3* Fixed date in About Leo dialog
.. @+node:ekr.20161020110608.1: *3* Fixed crash after ! in tab completion
 File "c:\leo.repo\leo-editor\leo\core\leoKeys.py", line 414, in auto_completer_state_handler
    kind), color='red')
TypeError: putStatusLine() got an unexpected keyword argument 'color'
.. @+node:ekr.20161023151140.1: *3* Fixed attribute error in To_Python.go
.. @+node:ekr.20161024074826.1: *3* Completed #325 Simplify the organization of commands
https://github.com/leo-editor/leo-editor/issues/325
.. @+node:ekr.20161029060133.1: *3* Fixed crasher in ac.insert_string
Relaced several assert by returns if the assert isn't satisfied.

I thought I was doing ctrl-h

Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoGlobals.py", line 1711, in wrapper
    func(self, event=event)
  File "c:\leo.repo\leo-editor\leo\core\leoKeys.py", line 266, in showCalltips
    self.calltip()
  File "c:\leo.repo\leo-editor\leo\core\leoKeys.py", line 452, in calltip
    self.calltip_fail(prefix)
  File "c:\leo.repo\leo-editor\leo\core\leoKeys.py", line 460, in calltip_fail
    self.insert_string('(')
  File "c:\leo.repo\leo-editor\leo\core\leoKeys.py", line 861, in insert_string
    i = w.getInsertPoint()
AttributeError: 'LeoQtTree' object has no attribute 'getInsertPoint'
.. @+node:ekr.20161124051851.1: *3* Fixed crasher in call to abbrev.match_prefix
.. @+node:ekr.20161205034943.1: ** 5.5 Code
.. @+node:ekr.20161027094220.1: *3* Merged "idle" hook code into the new framework
Integrated idle-hook processing into the IdleTimeManager:

leoApp.py:
- ITM.on_idle now handles idle-hooks.
- Removed g.app.idle_timer.
- 'idle' hooks called if and only if g.app.idle_time_hooks_enabled is True.
- Only one timer is ever started by Leo: g.app.idle_time_manager_timer.
- Removed call to g.enableIdleTimeHook in at the end of LM.doPostPluginsInit.
  It is not needed: g.app.idle_time_hooks_enabled is True initially.
- The enable/disable/toggle-idle-time-events commands now just set g.app.idle_time_hooks_enabled.

leoGlobals.py:
- g.enable/disableIdleTimeHook now just set g.app.idle_time_hooks_enabled.
  They remain for compatibility only.
- g.idleTimeHookHandler is now a stub. It just prints a warning.
  The original has been moved to the attic (leoNotes.txt).
.. @+node:ekr.20161028060713.1: *3* Created singleton BPM
Fixed all recently discussed problems with background processing:

- Renamed BackgroundManager to BackgroundProcessManager.
- Created singleton BPM instance, g.app.backgroundProcessManager.
- The BPM now maintains a queue of g.Bunch's describing each process.
- The BPM sends output to the originating log pane if possible.
- The 'pylint' and 'pylint-kill' commands now use the BPM.
.. @+node:ekr.20161110122844.1: *3* regex: convert x.strip() to not x.isspace()
([\w_\.]+)\.strip\(\)
not \1.isspace()
.. @+node:ekr.20161024061357.1: ** 5.5 Features
.. @+node:ekr.20161204064504.1: *3* Several new @button scripts, in scripts.leo
.. @+node:ekr.20161021084647.1: *3* Optionally run pyflakes when saving files
.. @+node:ekr.20161024113456.1: *3* You can open leoDist.leo from the File menu
.. @+node:ekr.20161020094619.1: *3* The pylint command now runs pylint in a separate process
This is an important improvement.

https://github.com/leo-editor/leo-editor/issues/328
.. @+node:ekr.20161024093209.1: *3* <Alt-X>99 is the same as <Alt-G>99
.. @+node:ekr.20161120164410.1: *3* Added four new generators
c.all_roots, c.all_unique_roots, p.nearest_roots, p.nearest_unique_roots (aka p.nearest)

Useful for finding nodes on which to run commands.

def nearest_roots(self, predicate=None):
    '''
    A generator yielding all the root positions "near" p1 = self that
    satisfy the given predicate. p.isAnyAtFileNode is the default
    predicate.
    
    The search first proceeds up the p's tree. If a root is found, this
    generator yields just that root.
    
    Otherwise, the generator yields all nodes in p.subtree() that satisfy
    the predicate. Once a root is found, the generator skips its subtree.
    '''
.. @+node:ekr.20161121145504.1: *3* Allow script abbreviations in headlines
.. @+node:ekr.20161207052112.1: *3* The markdown importer now regularizes sections
Leo's markdown importer converts all sections to use '#' markup. The technical justification appears at the bottom of the page for #342. The rest of this post explains the change from a user's point of view.

tl;dr: Converting all sections to '#' markup is Leonine, simplest and best. Only existing .md files that Leo didn't write could be changed.  If such changes don't work for you, just insert @ignore yourself when git or diff reports differences.

Imo, this change is fully justified:

1. It is more Leonine.

When creating and changing .md files from within Leo, @auto-md works much more smoothly.  Indeed, as I have just verified, converting an @nosent x.md file to @auto-md x.md "just works".

There is absolutely no reason to use underlined sections when using Leo.  The headlines proclaim the section structure far better than flat text of any kind, whether ### section name or underlined section names.

2. Perfect import check should not wag the dog.

The markdown importer is one of the simplest of all.  The possibility of dropping data seems remote.  Requiring a typical perfect import check to pass would preclude regularizing section markup.  It's just that simple.

Furthermore, the existing unit tests for the markup importer do check imported section structure, albeit imperfectly That should suffice for now. In the unlikely event that real problems are reported, these after-the-fact unit tests can be improved.

**Summary**

Importing markdown files containing underlined sections could only pass typical perfect import checks if existing underlining were somehow retained.  That's a bad idea.  Instead, Leo's markdown importer now implicitly converts all sections to '#' markup.  In essence, the markup disappears from the outline, to be automagically reinserted when Leo writes the outline.

This new scheme can change existing .md files, but only files that Leo didn't write.  If that is inconvenient for you, just add @ignore yourself.
.. @-all
.. @@nosearch
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
