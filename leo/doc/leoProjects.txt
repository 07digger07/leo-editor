.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20160319055837.1: ** 5.3 Bug fixes
.. @+node:ekr.20160319055908.1: *3* Create xml stylesheet elements only from settings
The old way made it almost impossible to delete stylesheet element.

The change was to fc.putStyleSheetLine.
.. @+node:ekr.20160318113217.1: *3* jEdit2py now runs only on Python 3
Names in docstrings cause trouble in Python 2.

Rather than trying to figure out workarounds, @button jEdit2Py now refuses to run on Python 2.
.. @+node:ekr.20160329094733.1: *3* Fixed bug: Undo paste-node selected the wrong node
The fix was in u.undoInsertNode
.. @+node:ekr.20151231100535.1: *3* Fixed #156: ILeo errors not piped to Log and Do not show in Ipython console
https://github.com/leo-editor/leo-editor/issues/156
.. @+node:ekr.20160401162035.1: *3* Investigated #248:  Empty lines in @file/@clean trees
@language rest
@wrap

https://github.com/leo-editor/leo-editor/issues/248

Everything works for me as expected, with my settings, on your test file.

As with @shadow, there may be glitches when updating the outline from changes made externally. These changes will "take" when you save the .leo file. As I have just verified, Leo's "Recovered Node" logic shows where all such external changes happen. You must then verify that the "boundary lines" are where they should be, moving them as needed.

I see no @clean-related settings, and I see no special cases for @clean in the read/write code:

at.readOneAtCleanNode # @shadow-like logic
at.write
at.writeAllHelper
at.writeOpen file

In short, everything appears to be working as expected. There was a proposal to adjust empty lines automatically when reading an @clean file, but that's a separate, low-priority, issue, apparently not in the bug tracker.
.. @+node:ekr.20160403042851.1: *3* Fixed #245: Specifying a new Leo-Editor file on the command line no longer works
https://github.com/leo-editor/leo-editor/issues/245

Instead of creating the new file, Leo-Editor opens the "workbook." This bug exists on the latest Leo-Editor. The first bad commit was:

c02f8bc5464bf5c7832870b44375a557f3e4e26e is the first bad commit
commit c02f8bc5464bf5c7832870b44375a557f3e4e26e
Author: Edward K. Ream <edreamleo@gmail.com>
Date:   Tue Mar 1 13:50:12 2016 -0600

    Allow wildcard expansion on the command line.  Like *.leo(!)
.. @+node:ekr.20160403043032.1: *3* Fixed #249: Leo and Stickynote plugin do not request to save
https://github.com/leo-editor/leo-editor/issues/249

As noted in the checkin log for this bug, I can not recommend the stickynote plugin as it is, even with the bug fixed.
.. @+node:ekr.20160403043302.1: *3* Fixed #242: @auto-rst open/save error
https://github.com/leo-editor/leo-editor/issues/242

The fix was to rstw.write in plugins/writers/leo_rst.py
.. @+node:ekr.20160403043151.1: *3* Fixed #247: @language c breaks goto-global-line
https://github.com/leo-editor/leo-editor/issues/247

The fix was to get_external_file_with_sentinels:
it must not force Python sentinels.
.. @+node:ekr.20151227084623.1: *3* Fixed #221: goto-global-line navigating to wrong line reported by PyLint
https://github.com/leo-editor/leo-editor/issues/221

Also #251: goto-global-line is inaccurate with @clean
https://github.com/leo-editor/leo-editor/issues/251
.. @+node:ekr.20160404205617.1: *3* Investigated #205: @ or @doc does't work perfectly in @clean
https://github.com/leo-editor/leo-editor/issues/205
.. @+node:ekr.20160405114632.1: *4* Report
On Mon, Aug 17, 2015 at 8:13 PM, Wesley Jiang <notifications@github.com> wrote:

http://leoeditor.com/directives.html#part-5-all-other-directives
in @clean node, the @doc directive only work like this:
 @ aaa
 @ bbb
 @ ccc
 @c

without @ xxx, it writes comments like '# xxxxx'.
.. @+node:ekr.20150609082812.1: *3* Fixed #132: Section Reference causes clone on Leo-Editor file open
Section Reference causes clone on Leo-Editor file open
https://github.com/leo-editor/leo-editor/issues/132

Removed @+middle and @-middle sentinels.

This is a duplicate:
#89: Spontaneous clones when using <<sections>>
https://github.com/leo-editor/leo-editor/issues/89
.. @+node:ekr.20160330200607.1: ** Code
.. @+node:ekr.20160327144354.1: *3* cleaned up use of regex to discover Leo directives
.. @+node:ekr.20160327115131.1: *4* Found:compute_directives_re
# flattened, ignore-case, head, body
.. @+node:ekr.20160401053703.1: ** Docs
.. @+node:ekr.20160401053707.1: *3* A Leonine pattern to organize docstrings
Here is a cool pattern for organizing long docstrings:

1. Start your file with:

'''
<< docstring >>
'''

2. The << docstring >> section can just contain:

    @language rest # or md
    @wrap
    @others

This allows the "interior" of the docstring to be colored using rST (or markdown).

3. The children of the << docstring >> node form the actual docstring. No section names are required!

**Summary**

This pattern allows us to organize large docstrings in a natural, Leonine way.

The only drawback is that the actual external file contains sentinel lines separating the parts of the docstring.  In practice, it's no big deal, especially if each child starts with a blank line.
.. @+node:ekr.20160324180039.1: ** Features
.. @+node:ekr.20160324174900.1: *3* Viewrendered already supports markdown
@language rest
@wrap

Leo already supports @language md:

markdown rendering must be specified by putting it in a ``@md`` node,
unless ``@string view-rendered-default-kind`` is set to ``md``,

Use github code to allow various markup types

From: tfer <tfetherston@aol.com>

Having played with Jacob Peck's markdown fork, I now get what leo is doing to provide a preview of text using a markup type. It is converting that markup, (rst: built-in, markdown: proposed).  What is being done is to run the text through a xxx2html converter and then using a Qt window widget that renders the generated html.

There have been requests to extend the built in rst functionality to other markup types, (Peck has an experimental one for markdown). Rather than added them piecemeal, **we could incorporate the code github uses** to allow people to use their preferred markup language for their projects readme file. Although a number of the converters are written in ruby, some are python and one is even pearl. It is an extensible scheme. The license for the library is basically, "keep the copyright notice and have at it", so it shouldn't cause any problem.

The code is here: https://github.com/github/markup

The current "see the selected node's body text" in the view-render-pane should work, the only thing lacking is a way to preview an entire file. How about adding an option to preview it in the context menu for a right click on an @file node?

===== From: Jacob Peck <gatesphere@gmail.com>

That was actually my first thought when approaching the markdown implementation.  The major problem here is that the wrapper program, and several of the assorted converters are in ruby.  The only python one is rest2html, which we already have (via docutils).  I don't think adding ruby and perl as dependencies for one small feature of Leo would be wise...  that seems to me to be the very definition of bloatware.

That being said, github-markup supports the following formats, which are supported by python libs::

    markdown (markdown)
    rst (docutils)
    textile (textile)
    org mode (pyorgmode)
    creole (python-creole)
    mediawiki (mw2html)
    asciidoc (asciidoc)

The following do not have a python equivalent (to my knowledge)::

    rdoc (ruby documentation)
    perlpod (perl documentation)
    
I could certainly keep hacking on viewrendered to support the first list, if interest is high.

> The current "see the selected node's body text" in the 
> view-render-pane should work, the only thing lacking is a way to 
> preview an entire file.  How about adding an option to preview it in 
> the context menu for a right click on an @file node?
I could look into this suggestion too, if someone would point me in the 
right direction with respect to 2 things (I'm really new to Leo, so I 
have no idea where these things are in the source):

1. How to add a context menu item for a node
2. How to get a "full file" without saving it, i.e., fill in the << 
references >>, @others, and @all directives.

.. @+node:ekr.20160325060507.1: *3* Improved how viewrenered plugin handles md & rst
.. @+node:ekr.20150316141655.14: *3* Better defaults for open/save file dialogs
@language rest
@wrap

File 'Open' or 'Import File' command to follow @path directive
http://groups.google.com/group/leo-editor/browse_thread/thread/7e508921c85d18bc

Added c.last_dir and g.init_dialog_folder and related logic.

Also, g.fullPath now looks at parent nodes, a possibly dubioius idea.
.. @+node:ekr.20160318113451.1: *3* Merged viewrendered plugins into viewrendered3.py
Eventually, VR3 will replace both VR and VR2.

The viewrendered3.py plugin now appears to work properly in "legacy" mode, that is, with VR3 = False.  VR3 in legacy mode is already clearly superior to the VR plugin.

leo/test/test.leo contains extensive tests of any viewrendered plugin.  See the last top-level tree: viewrendered examples.  Moving from child to child, you will see some problems.  Remember to enable viewrendered3.py first!

The VR3 switch shows all the places in the code where there is a difference between the code viewrendered2.py and the code in viewrendered.py.

Summary

VR is already obsolete, and I hope VR2 will quickly become obsolete as well.
.. @+node:ekr.20160318113645.1: *3* Enabled livecode plugin by default
Depends on Python's meta package: https://pypi.python.org/pypi/meta
Only enabled if that package is available.
It *is* part of the Anaconda distros.
.. @+node:ekr.20160216043537.1: *3* Improved chapters
@chapter is now allowed anywhere. No need for @chapters.

The 'main' chapter is simply a synonym for the entire outline.

At present, the NEW switch in leoChapters.leo enables the new code.

.. @+node:ekr.20160216043726.1: *4* How long does it take to search LeoPy.leo?
@language python
# 7559 nodes: 0.075 sec.
import time
t1 = time.clock()
n = 0
for p in c.all_unique_positions():
    n += 1
    if p.h.startswith('@chapter '):
        pass
t2 = time.clock()
g.es('%s nodes, %5.3f sec' % (n, t2-t1))
.. @+node:ekr.20160405060045.1: *3* Leo doesn't warn if leo.plugins.livecode fails to load
@language rest
@wrap

leoPlugins.leo now contains a global list of plugins that might be enabled by default but that might fail to load because of missing imports.  At present, that list is just:

optional_modules = [
    'leo.plugins.livecode',
]
.. @+node:ekr.20160403041855.1: *3* Completed chapters work
Proposal: remove/improve all chapter commands
https://groups.google.com/d/msg/leo-editor/-mv2x_6TAdM/Bgntt7b9AgAJ

Done:
- Removed most @chapters commands & helpers.
- Removed new_code switch.
- Enable/disable Chapters icon based on @bool use_chapter_tabs.
- Fixed bug in Chapter.unselect: examine the hoist stack.
- Create chapter-select-<chapter-name> commands.
- Allow @key convention in @chapter nodes.
.. @-all
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
