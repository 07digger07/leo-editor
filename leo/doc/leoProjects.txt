.. @+leo-ver=5-thin
.. @+node:ekr.20100120072650.6089: * @file ../doc/leoProjects.txt
.. @+all
.. @+node:ekr.20170619165453.1: ** Branch: string-gui
Status: merged into master

TM.doTests now runs all unit tests with string gui (StringTextWrapper class).

This has three advantages:

1. The tests run much more quickly than before.
2. Leo does no redraws during the tests.
3. Clicks in the Leo window can now longer spoil running unit tests.

Notes:

1. Several unit tests that require the qt gui now call skipTest.  This is an interim measure. 

2. TM.doTests contains a switch that determines which gui will be used.
.. @+node:ekr.20170807103720.1: ** Branch: redraw
Note: cc.selectChapterForPosition calls c.redraw *only* if the chapter changes.

- Investigate running unit tests without redraw.
  Related to string-gui branch: Use string/null gui for unit tests.
  https://github.com/leo-editor/leo-editor/issues/503

- Added support for c.redraw_later, called from cc.selectChapterForPosition.
- c.bringToFront now works without using c.outerUpdate.
- c.widgetWantsFocusNow now just calls c.set_focus & clears c.requestedFocusWidget.
- c.outerUpdate no longer handles recoloring or redrawing.
- Replaced all calls to c.recolor_now by c.recolor.
- Replaced all calls to redraw_now by redraw.
- Removed all calls to body.forceFullRecolor.
- Removed forceFullRecolorFlag.
- Done: removed c.incrementalRecolorFlag.
- Done: c.selectPosition never calls c.redraw. All unit tests pass.
- Done: Removed c.requestRedrawFlag and c.outerUpdate never calls c.redraw.  All tests pass.
.. @+node:ekr.20171120061142.1: ** #327: Create a way to unbind bindings in leoSettings.leo.
Rev 24da84a completes #327: Create a way to unbind bindings in leoSettings.leo.
https://github.com/leo-editor/leo-editor/issues/327

This enhancement allows you to override bindings made in leoSettings.leo or myLeoSettings.leo by setting:

    command-name = None

in the local .leo file, that is, outside of leoSettings.leo or myLeoSettings.leo. Important: binding:

    do-nothing = <key>

does not work.  That would eat <key> entirely.  Instead, the new code calls k.handleUnboundKeys when it sees any key previously bound to command-name.
.. @+node:ekr.20171203110825.1: ** Added verbose option to g.callers()
@language rest
@wrap

g.callers(verbose=True) returns the callers on separate lines, displaying file name, line number **and class name**. This is especially useful for gui programming, where there may be many 'display, 'edit', 'redraw' and 'update' methods.  It's also useful where you just don't have any idea where a function or method resides.

For example, these traces, in BoxTitle.edit::

    g.trace('===== (BoxTitle:%s) entry_widget: %s' % (
        self.__class__.__name__,
        self.entry_widget.__class__.__name__))
    g.trace('CALLERS', g.callers(verbose=True))

Produce::

    trace: edit ===== (BoxTitle:BoxTitleLog) entry_widget: LeoLog
    trace: edit CALLERS
      line   32 apNPSApplication.py            LeoApp.__remove_argument_call_main
      line 2711 cursesGui2.py                  LeoApp.main
      line 1632 cursesGui2.py                  LeoCursesGui.run
      line   66 fm_form_edit_loop.py           LeoForm.edit

Each line shows the line number and file containing the function or method.  All the above lines show methods.
.. @-all
.. @@nosearch
.. @@killbeautify
.. @@language rest
.. @@wrap
.. @@pagewidth 60
.. @-leo
