<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5">
	<global_window_position top="68" left="623" height="800" width="620"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070416075121" str_leo_pos="2"><vh>Startup</vh>
<v t="ekr.20070529172620"><vh>@chapters</vh>
<v t="ekr.20070529173219"><vh>@chapter abc</vh>
<v t="ekr.20070529173219.1"><vh>abc node 1</vh></v>
<v t="ekr.20071206070207"><vh>cross-chapter-clone-test</vh></v>
</v>
<v t="ekr.20070603190944"><vh>@chapter xyz</vh>
<v t="ekr.20070603190944.1"><vh>xyz node 1</vh></v>
<v t="ekr.20071206070207"><vh>cross-chapter-clone-test</vh></v>
</v>
</v>
<v t="ekr.20070224123943"><vh>@settings</vh>
<v t="ekr.20070701090143"><vh>@@bool force_newlines_in_at_nosent_bodies = False</vh></v>
<v t="ekr.20070504080933"><vh>@bool create_nonexistent_directories = True</vh></v>
<v t="ekr.20080412082246.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20070604100125"><vh>@bool use_chapter_tabs = True</vh></v>
<v t="ekr.20070503085527"><vh>@bool use_chapters = True</vh></v>
<v t="ekr.20071025193940"><vh>@enabled-plugins</vh></v>
<v t="ekr.20080529111617.1"><vh>plugins</vh>
<v t="ekr.20070723091227"><vh>http plugin</vh>
<v t="ekr.20070723091227.1"><vh>@bool http_active = True</vh></v>
<v t="ekr.20070723091227.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20070723091227.3"><vh>@string rst_http_attributename = 'rst_http_attribute'</vh></v>
</v>
<v t="ekr.20070305085403"><vh>vim plugin</vh>
<v t="ekr.20070305085403.1"><vh>@string vim_cmd = c:\vim\vim63\gvim --servername LEO</vh></v>
<v t="ekr.20070305085403.2"><vh>@string vim_exe = c:\vim\vim63\gvim</vh></v>
</v>
<v t="ekr.20080529111617.2"><vh>cleo</vh>
<v t="ekr.20080529111617.3"><vh>@color cleo_color_prog_green =</vh></v>
<v t="ekr.20080529111617.4"><vh>@color cleo_color_prog_red =</vh></v>
<v t="ekr.20080529111617.5"><vh>@data cleo_color_file_node_list</vh></v>
<v t="ekr.20080529111617.6"><vh>@int cleo_prog_width = 18</vh></v>
<v t="ekr.20080529111617.7"><vh>@float cleo_time_init = 1.0</vh></v>
<v t="ekr.20080529111617.8"><vh>@int cleo_prog_scale = 1</vh></v>
<v t="ekr.20080529111617.9"><vh>@float cleo_prog_extra = 4</vh></v>
<v t="ekr.20080529111617.10"><vh>@string cleo_time_name = 'days'</vh></v>
</v>
</v>
</v>
<v t="ekr.20041001211817"><vh>Buttons</vh>
<v t="ekr.20061030041450"><vh>Run Iron Python scripts</vh>
<v t="ekr.20061030041356"><vh>@url c:\prog\IronPython-1.0.1\Doc\IronPythonApiReference.chm</vh></v>
</v>
<v t="ekr.20070531102813"><vh>Disabled buttons</vh>
<v t="ekr.20060814111542"><vh>@@button add-e</vh></v>
<v t="ekr.20060918083159"><vh>@@button Clear uAs</vh></v>
<v t="ekr.20071002150320"><vh>@@button create-canvas</vh></v>
<v t="ekr.20060809084033"><vh>@@button cvt to g.et</vh>
<v t="ekr.20060809104405"><vh>&lt;&lt; version history &gt;&gt;</vh></v>
<v t="ekr.20060809092023"><vh>test</vh>
<v t="ekr.20060809103738"><vh>test1</vh></v>
<v t="ekr.20060809103738.1"><vh>test2</vh></v>
</v>
<v t="ekr.20060809090508"><vh>replace</vh>
<v t="ekr.20060809091749.72"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="ekr.20060809091749.73"><vh>&lt;&lt; handle g.es &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20070531104646"><vh>@@button da-comp</vh></v>
<v t="ekr.20070531103315"><vh>@@button da-expand</vh></v>
<v t="ekr.20070530072113"><vh>@@button hide-ch</vh></v>
<v t="ekr.20071025192258"><vh>@@button local-tests @key=Alt+4</vh></v>
<v t="ekr.20071006084354"><vh>@@button print tk line number</vh></v>
<v t="ekr.20080105115712"><vh>@@button pylint</vh>
<v t="ekr.20080115085447"><vh>harmless warnings, errors</vh></v>
<v t="ekr.20080105130903"><vh>warnings</vh></v>
<v t="ekr.20080105120559"><vh>&lt;&lt; define data &gt;&gt;</vh></v>
</v>
<v t="ekr.20070515073111"><vh>@@button sep</vh></v>
<v t="ekr.20060427103457"><vh>@@button settings.leo</vh></v>
<v t="ekr.20080310111916.1"><vh>@@button Translate "can not" to "can't"</vh></v>
<v t="ekr.20070115092430"><vh>@@button winpdb</vh></v>
<v t="ekr.20071128122043"><vh>@@command create-shell-tab @key = Alt+5</vh></v>
<v t="ekr.20071101163934"><vh>@@command rst3</vh></v>
<v t="ekr.20070604095313"><vh>Chapter buttons</vh>
<v t="ekr.20070530072113.1"><vh>@@button show-ch</vh></v>
<v t="ekr.20070603175054.1"><vh>@@button ch-main</vh></v>
<v t="ekr.20070603175054"><vh>@@button ch-abc</vh></v>
<v t="ekr.20070603190713.1"><vh>@@button ch-xyz</vh></v>
<v t="ekr.20070603190713"><vh>@@button ch-add-xyz</vh></v>
</v>
<v t="ekr.20060904110922"><vh>OPML buttons</vh>
<v t="ekr.20060904111037.1"><vh>@@button opml-write</vh></v>
<v t="ekr.20060904111037"><vh>@@button opml-read</vh></v>
</v>
</v>
<v t="ekr.20061030041200"><vh>@@button iron-py @key=Alt-5</vh></v>
</v>
<v t="ekr.20070410063214"><vh>Commands</vh>
<v t="ekr.20060924180049"><vh>@@command clones-tab</vh>
<v t="ekr.20060924180049.1"><vh>class cloneNavigator</vh>
<v t="ekr.20060924180049.2"><vh>init</vh></v>
<v t="ekr.20060924180049.3"><vh>getAllClones</vh></v>
<v t="ekr.20060924180049.4"><vh>displayClones</vh>
<v t="ekr.20060924180049.5"><vh>&lt;&lt;Fill listbox with clone parent headlines&gt;&gt;</vh></v>
<v t="ekr.20060924180049.6"><vh>&lt;&lt;Goto selected position when listbox selection changes&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20080214091706.2"><vh>@@command ekr-command</vh></v>
</v>
<v t="ekr.20071026102420.3"><vh>Scripts</vh>
<v t="ekr.20071129103842"><vh>create-at-auto-nodes</vh></v>
<v t="ekr.20070223164126"><vh>Recursive import script</vh>
<v t="ekr.20070223164126.1"><vh>importFiles</vh></v>
<v t="ekr.20070223164126.2"><vh>importDir</vh></v>
<v t="ekr.20070223164126.3"><vh>createLastChildOf</vh></v>
</v>
<v t="ekr.20070517070854"><vh>run script in nullGui</vh></v>
<v t="ekr.20070517071510"><vh>run script with leoBridge</vh></v>
<v t="ekr.20080206055658"><vh>Script to print font settings</vh></v>
</v>
</v>
<v t="ekr.20080604110043.1"><vh>Vim stuff</vh>
<v t="ekr.20080604104453.1"><vh>@strings  [ignore,insert, overwrite] top_level_unbound_key_action = ignore</vh></v>
<v t="ekr.20080604104453.2"><vh>Vim bindings by TL </vh>
<v t="ekr.20080604104453.3"><vh>Vi Documentation</vh></v>
<v t="ekr.20080604104453.4"><vh>Settings for vim bindings</vh>
<v t="ekr.20080604104453.5"><vh>@strings [command,insert, overwrite] top_level_unbound_key_action = command</vh></v>
<v t="ekr.20080604104453.6"><vh>@bool stayInTreeAfterEditHeadline = True</vh></v>
<v t="ekr.20080604104453.7"><vh>@bool outline_pane_has_initial_focus = True</vh></v>
<v t="ekr.20080604104453.8"><vh>@bool stayInTreeAfterSelect = True</vh></v>
</v>
<v t="ekr.20080604104453.9" a="E"><vh>@keys</vh>
<v t="ekr.20080604104453.10"><vh>@shortcuts - Unbind all commands</vh></v>
<v t="ekr.20080604104453.11" a="E"><vh>@shortcuts - vi in Outline pane</vh>
<v t="ekr.20080604104453.12"><vh>@mode tree-double-click-node</vh></v>
<v t="ekr.20080604104453.13"><vh>@mode tree-save-file</vh></v>
<v t="ekr.20080604104453.14"><vh>@mode tree-command-line</vh>
<v t="ekr.20080604104453.15"><vh>@mode tree-command-revert</vh></v>
<v t="ekr.20080604104453.16"><vh>@mode tree-command-save</vh>
<v t="ekr.20080604104453.17"><vh>@mode tree-command-save-quit</vh></v>
</v>
<v t="ekr.20080604104453.18"><vh>@mode tree-command-quit</vh></v>
</v>
<v t="ekr.20080604104453.19"><vh>@mode tree-select-object</vh>
<v t="ekr.20080604104453.20"><vh>@mode tree-yank-line</vh></v>
<v t="ekr.20080604104453.21"><vh>@mode tree-yank-to-beginning-of-next-word</vh></v>
<v t="ekr.20080604104453.22"><vh>@mode tree-yank-to-beginning-of-current-word</vh></v>
</v>
<v t="ekr.20080604104453.23"><vh>@ignore tree-yank-object</vh>
<v t="ekr.20080604104453.24"><vh>@mode tree-yank-line</vh></v>
<v t="ekr.20080604104453.25"><vh>@mode tree-yank-to-beginning-of-next-word</vh></v>
<v t="ekr.20080604104453.26"><vh>@mode tree-yank-to-beginning-of-current-word</vh></v>
</v>
<v t="ekr.20080604104453.27"><vh>@ignore tree-change-object</vh>
<v t="ekr.20080604104453.28"><vh>@mode vi-Change-line</vh></v>
<v t="ekr.20080604104453.29"><vh>@mode vi-change-to-end-of-word</vh></v>
<v t="ekr.20080604104453.30"><vh>@mode vi-change-to-beginning-of-word</vh></v>
</v>
<v t="ekr.20080604104453.31"><vh>@ignore tree-delete-to-end-of-line</vh></v>
<v t="ekr.20080604104453.32"><vh>@ignore tree-delete</vh></v>
<v t="ekr.20080604104453.33"><vh>@ignore tree-delete-text-object</vh>
<v t="ekr.20080604104453.34"><vh>@mode tree-delete-line</vh></v>
<v t="ekr.20080604104453.35"><vh>@mode tree-delete-to-end-of-word</vh></v>
<v t="ekr.20080604104453.36"><vh>@mode tree-delete-to-beginning-of-word</vh></v>
<v t="ekr.20080604104453.37"><vh>@mode tree-delete-to-char</vh></v>
</v>
<v t="ekr.20080604104453.38"><vh>@mode tree-copy-node</vh></v>
<v t="ekr.20080604104453.39"><vh>@mode tree-paste-node</vh></v>
<v t="ekr.20080604104453.40"><vh>@mode tree-delete-node</vh></v>
<v t="ekr.20080604104453.41"><vh>@mode focus-to-tree</vh></v>
<v t="ekr.20080604104453.42"><vh>@mode focus-to-body</vh></v>
<v t="ekr.20080604104453.43"><vh>@mode tree-undo</vh></v>
<v t="ekr.20080604104453.44"><vh>@mode tree-redo</vh></v>
<v t="ekr.20080604104453.45"><vh>@mode tree-goto-last-node</vh></v>
<v t="ekr.20080604104453.46"><vh>@mode tree-goto</vh>
<v t="ekr.20080604104453.47"><vh>@mode node-goto-first-node</vh></v>
</v>
<v t="ekr.20080604104453.48"><vh>@mode tree-goto-next-visible</vh></v>
<v t="ekr.20080604104453.49"><vh>@mode body-goto-next-visible</vh></v>
<v t="ekr.20080604104453.50"><vh>@mode tree-goto-prev-visible</vh></v>
<v t="ekr.20080604104453.51"><vh>@mode body-goto-prev-visible</vh></v>
<v t="ekr.20080604104453.52"><vh>@mode tree-contract-or-go-left</vh></v>
<v t="ekr.20080604104453.53"><vh>@mode body-contract-or-go-left</vh></v>
<v t="ekr.20080604104453.54"><vh>@mode tree-expand-and-go-right</vh></v>
<v t="ekr.20080604104453.55"><vh>@mode body-expand-and-go-right</vh></v>
<v t="ekr.20080604104453.56"><vh>@mode tree-move-outline-up</vh></v>
<v t="ekr.20080604104453.57"><vh>@mode tree-move-outline-down</vh></v>
<v t="ekr.20080604104453.58"><vh>@mode tree-move-outline-left</vh></v>
<v t="ekr.20080604104453.59"><vh>@mode tree-move-outline-right</vh></v>
<v t="ekr.20080604104453.60"><vh>@mode tree-contract-node</vh></v>
<v t="ekr.20080604104453.61"><vh>@mode tree-clone-node</vh></v>
<v t="ekr.20080604104453.62"><vh>@mode tree-goto-next-cloned-node</vh></v>
<v t="ekr.20080604104453.63"><vh>@mode tree-mark-node</vh></v>
<v t="ekr.20080604104453.64"><vh>@mode tree-goto-next-marked-node</vh></v>
<v t="ekr.20080604104453.65"><vh>@mode tree-unmark-all-nodes</vh></v>
<v t="ekr.20080604104453.66"><vh>@mode tree-find-in-headline</vh></v>
</v>
<v t="ekr.20080604104453.67" a="E"><vh>@shortcuts - vi in Body pane</vh>
<v t="ekr.20080604104453.68"><vh>@mode vi-command-line</vh>
<v t="ekr.20080604104453.69"><vh>@mode vi-command-revert</vh></v>
<v t="ekr.20080604104453.70"><vh>@mode vi-command-save</vh>
<v t="ekr.20080604104453.71"><vh>@mode vi-command-save-quit</vh></v>
</v>
<v t="ekr.20080604104453.72"><vh>@mode vi-command-quit</vh></v>
</v>
<v t="ekr.20080604104453.73"><vh>@mode vi-goto-end-of-buffer</vh></v>
<v t="ekr.20080604104453.74"><vh>@mode vi-goto</vh>
<v t="ekr.20080604104453.75"><vh>@mode vi-goto-beginning-of-buffer</vh></v>
</v>
<v t="ekr.20080604104453.76"><vh>@mode vi-save-buffers-exit</vh></v>
<v t="ekr.20080604104453.77"><vh>@mode vi-new-line-below</vh></v>
<v t="ekr.20080604104453.78"><vh>@mode vi-new-line-above</vh></v>
<v t="ekr.20080604104453.79"><vh>@mode vi-append</vh></v>
<v t="ekr.20080604104453.80"><vh>@mode vi-insert-at-indent</vh></v>
<v t="ekr.20080604104453.81"><vh>@mode vi-delete-to-end-of-line</vh></v>
<v t="ekr.20080604104453.82"><vh>@mode vi-delete-object</vh>
<v t="ekr.20080604104453.83"><vh>@mode vi-delete-line</vh></v>
<v t="ekr.20080604104453.84"><vh>@mode vi-delete-to-end-of-word</vh></v>
<v t="ekr.20080604104453.85"><vh>@mode vi-delete-to-begin-of-word</vh></v>
<v t="ekr.20080604104453.86"><vh>@mode vi-delete-to-end-of-sentence</vh></v>
<v t="ekr.20080604104453.87"><vh>@mode vi-delete-to-beginning-of-sentence</vh></v>
<v t="ekr.20080604104453.88"><vh>@mode vi-delete-to-end-of-paragraph</vh></v>
<v t="ekr.20080604104453.89"><vh>@mode vi-delete-to-beginning-of-paragraph</vh></v>
<v t="ekr.20080604104453.90"><vh>@mode vi-delete-section</vh></v>
<v t="ekr.20080604104453.91" a="M"><vh>@mode vi-delete-to-char</vh></v>
</v>
<v t="ekr.20080604104453.92"><vh>@mode vi-yank-to-end-of-line</vh></v>
<v t="ekr.20080604104453.93"><vh>@mode vi-yank</vh>
<v t="ekr.20080604104453.94"><vh>@mode vi-yank-line</vh></v>
<v t="ekr.20080604104453.95"><vh>@mode vi-yank-to-beginning-of-next-word</vh></v>
<v t="ekr.20080604104453.96"><vh>@mode vi-yank-to-beginning-of-current-word</vh></v>
<v t="ekr.20080604104453.97"><vh>@mode vi-yank-to-end-of-sentence</vh></v>
<v t="ekr.20080604104453.98"><vh>@mode vi-yank-to-beginning-of-sentence</vh></v>
<v t="ekr.20080604104453.99"><vh>@mode vi-yank-to-end-of-paragraph</vh></v>
<v t="ekr.20080604104453.100"><vh>@mode vi-yank-to-beginning-of-paragraph</vh></v>
<v t="ekr.20080604104453.101"><vh>@mode vi-yank-section</vh></v>
</v>
<v t="ekr.20080604104453.102"><vh>@mode vi-change-to-end-of-line</vh></v>
<v t="ekr.20080604104453.103"><vh>@mode vi-change</vh>
<v t="ekr.20080604104453.104"><vh>@mode vi-Change-line</vh></v>
<v t="ekr.20080604104453.105"><vh>@mode vi-change-to-end-of-word</vh></v>
<v t="ekr.20080604104453.106"><vh>@mode vi-change-to-beginning-of-word</vh></v>
<v t="ekr.20080604104453.107"><vh>@mode vi-change-to-end-of-sentence</vh></v>
<v t="ekr.20080604104453.108"><vh>@mode vi-change-to-beginning-of-sentence</vh></v>
<v t="ekr.20080604104453.109"><vh>@mode vi-change-to-end-of-paragraph</vh></v>
<v t="ekr.20080604104453.110"><vh>@mode vi-change-to-beginning-of-paragraph</vh></v>
<v t="ekr.20080604104453.111"><vh>@mode vi-change-section</vh></v>
</v>
<v t="ekr.20080604104453.112"><vh>@mode vi-substitute-char</vh></v>
<v t="ekr.20080604104453.113"><vh>@mode vi-substitute-line</vh></v>
<v t="ekr.20080604104453.114"><vh>@mode vi-indent</vh>
<v t="ekr.20080604104453.115"><vh>@mode vi-indent-line</vh></v>
<v t="ekr.20080604104453.116"><vh>@mode vi-indent-to-beginning-of-sentence</vh></v>
<v t="ekr.20080604104453.117"><vh>@mode vi-indent-to-beginning-of-sentence</vh></v>
<v t="ekr.20080604104453.118"><vh>@mode vi-indent-to-end-of-paragraph</vh></v>
<v t="ekr.20080604104453.119"><vh>@mode vi-indent-to-beginning-of-paragraph</vh></v>
<v t="ekr.20080604104453.120"><vh>@mode vi-indent-to-beginning-of-buffer</vh></v>
<v t="ekr.20080604104453.121"><vh>@mode vi-indent-to-end-of-buffer</vh></v>
</v>
<v t="ekr.20080604104453.122"><vh>@mode vi-deindent</vh>
<v t="ekr.20080604104453.123"><vh>@mode vi-deindent-less</vh></v>
<v t="ekr.20080604104453.124"><vh>@ignore vi-deindent-to-end-of-paragraph</vh></v>
<v t="ekr.20080604104453.125"><vh>@ignore vi-deindent-to-beginning-of-paragraph</vh></v>
<v t="ekr.20080604104453.126"><vh>@ignore vi-deindent-to-end-of-sentence</vh></v>
<v t="ekr.20080604104453.127"><vh>@ignore vi-deindent-to-beginning-of-sentence</vh></v>
</v>
<v t="ekr.20080604104453.128"><vh>@mode vi-beginning-of-line</vh></v>
<v t="ekr.20080604104453.129"><vh>@mode vi-goto-indent-beginning-previous-line</vh></v>
<v t="ekr.20080604104453.130"><vh>@mode vi-end-of-line</vh></v>
<v t="ekr.20080604104453.131"><vh>@mode vi-goto-after-paragraph</vh></v>
<v t="ekr.20080604104453.132"><vh>@mode vi-goto-before-paragraph</vh></v>
<v t="ekr.20080604104453.133"><vh>@mode vi-join</vh></v>
<v t="ekr.20080604104453.134"><vh>@mode vi-match</vh></v>
<v t="ekr.20080604104453.135"><vh>@mode vim-window-commands</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20071025193940" annotate="7d71002855087072696f7269747971015504393939397102550870726f67726573737103550071045509617263686574797065710568045502666771066804752e"><vh>@enabled-plugins</vh></v>
<v t="ekr.20080412082246.1"><vh>@bool fixedWindow = False</vh></v>
<v t="ekr.20070517160058.1"><vh>Prototypes</vh>
<v t="ekr.20070929062147"><vh>Prototype of networkx graph tools</vh>
<v t="ekr.20070929122956"><vh>Data trees</vh>
<v t="ekr.20070929114617"><vh>@graph-target</vh></v>
<v t="ekr.20070929072043"><vh>@networkx</vh>
<v t="ekr.20070929072506.1"><vh>@nodes</vh></v>
<v t="ekr.20070929072506"><vh>@edges</vh></v>
</v>
<v t="ekr.20070929070257"><vh>@graph</vh>
<v t="ekr.20070929070257.1"><vh>@node child1</vh>
<v t="ekr.20070929070632"><vh>@link ('ekr', '20070929070257', 2): @node child2</vh></v>
</v>
<v t="ekr.20070929070257.2"><vh>@node child2</vh>
<v t="ekr.20070929070632.1"><vh>@link ('ekr', '20070929070257', 1): @node child1</vh></v>
</v>
</v>
<v t="ekr.20070928095102"><vh>root-node</vh>
<v t="ekr.20070928095102.1"><vh>child1</vh></v>
<v t="ekr.20070928095102.2"><vh>child2</vh></v>
</v>
</v>
<v t="ekr.20070929122956.1"><vh>buttons</vh>
<v t="ekr.20070929070426"><vh>@@button print link</vh></v>
<v t="ekr.20070927175908"><vh>@@button leo2graph</vh></v>
<v t="ekr.20070929062147.1"><vh>@@button at-graph2graph</vh></v>
<v t="ekr.20070929062147.2"><vh>@@button at-networkx2graph</vh>
<v t="ekr.20070929081505"><vh>error</vh></v>
<v t="ekr.20070929074830"><vh>parse</vh></v>
<v t="ekr.20070929072506.2"><vh>parseNodes</vh></v>
<v t="ekr.20070929074830.1"><vh>parseEdges</vh></v>
</v>
<v t="ekr.20070929082546"><vh>@@button at-networkx2at-graph</vh>
<v t="ekr.20070929120541"><vh>createEdges</vh></v>
<v t="ekr.20070929120541.1"><vh>createNodes</vh></v>
<v t="ekr.20070929115302"><vh>createTree</vh></v>
<v t="ekr.20070929114410.2"><vh>error</vh></v>
<v t="ekr.20070929114410.3"><vh>parse</vh></v>
<v t="ekr.20070929114410.5"><vh>parseEdges</vh></v>
<v t="ekr.20070929114410.4"><vh>parseNodes</vh></v>
</v>
</v>
</v>
<v t="ekr.20070630142904"><vh>Prototype of pyrex</vh>
<v t="ekr.20070630142904.2"><vh>gcc build docs</vh></v>
<v t="ekr.20070630142904.3"><vh>pyrexc command-line options</vh></v>
<v t="ekr.20070630142904.4"><vh>@@file myModule.pyx</vh></v>
<v t="ekr.20070630142904.5"><vh>Make myModule.c</vh></v>
</v>
<v t="ekr.20071026102420.2"><vh>Screen capture</vh>
<v t="ekr.20070528111805"><vh>FrontWindowCapture.pyw</vh></v>
<v t="ekr.20070609085533"><vh>@@url c:\prog\wink\ChangeViewMenu.htm</vh></v>
</v>
<v t="edreamleo.20080110083531"><vh>gtk stuff</vh>
<v t="edreamleo.20080110130828"><vh>createWindow</vh></v>
<v t="bob.20080111200056"><vh>@thin gtkOutlineDemo.py</vh></v>
</v>
</v>
<v t="ekr.20070315071830"><vh>Test files (do not delete)</vh>
<v t="ekr.20070227104713"><vh>@thin leoBridgeTest.py</vh></v>
<v t="ekr.20070626153912"><vh>@thin leoDynamicTest.py</vh></v>
</v>
<v t="ekr.20071105085941"><vh>Tests</vh>
<v t="ekr.20080531080812.1"><vh>tracer test</vh></v>
<v t="ekr.20080531131542.1"><vh>mxTextTools proto</vh>
<v t="ekr.20080531141227.1"><vh>&lt;&lt; define s &gt;&gt;</vh></v>
<v t="ekr.20080531131542.2"><vh>&lt;&lt; define scan4 tables &gt;&gt;</vh></v>
<v t="ekr.20080531131542.4"><vh>printItem</vh></v>
</v>
</v>
<v t="ekr.20080503202744.3"><vh>Rope</vh></v>
<v t="ekr.20080604101239.1"><vh>Test misspelled word at index 0</vh></v>
</vnodes>
<tnodes>
<t tx="edreamleo.20080110083531">import gtk

@others

createWindow()

gtk.main()</t>
<t tx="edreamleo.20080110130828">def createWindow():

    def onKeyUp(w,event):
        g.trace(event.state,event.keyval,event.string)

    window = gtk.Window()
    window.set_title("Hello World")

    # button = gtk.Button("-----Press me-----")
    # button.connect("clicked",onButtonPressed)
    # window.add(button)

    splitter1 = gtk.VPaned()
    window.add(splitter1)

    tree = gtk.TextView()
    buf1 = tree.get_buffer()
    buf1.set_text("tree")

    body = gtk.TextView()
    buf2 = body.get_buffer()
    buf2.set_text("body")
    body.connect("key_release_event",onKeyUp)

    splitter1.add(tree)
    splitter1.add2(body)

    window.connect("delete-event",gtk.main_quit)
    window.show_all()
    return window
</t>
<t tx="ekr.20041001211817">import os

print os.path.exists(os.path.normpath("C:\\Progra~1\\Eclipse"))</t>
<t tx="ekr.20060427103457"># Open leoSettings.leo
c.openLeoSettings()</t>
<t tx="ekr.20060809084033">'''A script to convert calls to g.es to g.et, and raw strings s to g._(s)'''

__version__ = 0.2
&lt;&lt; version history &gt;&gt;

@others

trace = False # For debugging.
doReplace = True # True: actually replace the body text.

if not doReplace: g.es_print('-' * 40)
c.beginUpdate()
try:
    u = c.undoer
    undoType = 'Convert g.es'
    u.beforeChangeGroup (p,undoType)
    for p in c.currentPosition().self_and_subtree_iter():
        replace(p)
    u.afterChangeGroup(p,undoType,reportFlag=True)
finally:
    c.endUpdate()</t>
<t tx="ekr.20060809090508"># Based on leoImport.scanPythonText.
def replace(p):
    '''Replace g.es by g.et and strings s by g._(s)'''
    s = p.bodyString()
    if not s.strip(): return
    result = [] ;  i = 0 ; count = 0
    while i &lt; len(s):
        progress = j = i
        ch = s[i]
        if ch == '\n' or ch == '\r':
            i = g.skip_nl(s,i)
            result.append(s[j:i])
        elif ch == '#':
            i = g.skip_to_end_of_line(s,i)
            result.append(s[j:i])
        elif ch == '"' or ch == "'":
            &lt;&lt; handle string &gt;&gt;
        elif g.is_c_id(ch):
            if g.match_word(s,i,'g.es'):
                &lt;&lt; handle g.es &gt;&gt;
            else:
                i = g.skip_c_id(s,i)
                result.append(s[j:i])
        else:
            i += 1
            result.append(s[j:i])
        assert(progress &lt; i)
    if count:
        result = ''.join(result)
        if doReplace:
            undoData = u.beforeChangeNodeContents(p)
            p.setBodyStringOrPane(result)
            p.v.t.setDirty()
            u.afterChangeNodeContents(p,'Change Body',undoData)
        else:
            g.trace('result...\n',result)</t>
<t tx="ekr.20060809091749.72">i = g.skip_python_string(s,i)
s2 = s[j:i].strip()
result.append('g._(%s)' % s2)
if trace: g.trace('string:',s2)
count += 1</t>
<t tx="ekr.20060809091749.73">i += 4 ; k1 = i
i = g.skip_ws(s,i)
found = False
if g.match(s,i,'('):
    k2 = i
    k3 = g.skip_parens(s,i)
    if g.match(s,k3,')'):
        # Only translate if there are exactly one string in the parens.
        s2 = s[k2+1:k3]
        if (
            s2 and s2.count(',') == 0 and
            (s2.count('"') == 2 or s2.count("'") == 2)
        ):
            i = k3
            if trace: g.trace('call g.es:',g.get_line(s,i))
            result.append('g.et')
            result.append(s[k1:i])
            count += 1 ; found = True
if not found:
    result.append(s[j:i])</t>
<t tx="ekr.20060809092023"></t>
<t tx="ekr.20060809103738">def test1():
    
    g.es('abc')
    g.es('abc',xyz)
    g.es(xyz)</t>
<t tx="ekr.20060809103738.1">def test2():

    x = 'abc' + 'xyz'
    y = abc</t>
<t tx="ekr.20060809104405">@nocolor
@
0.1 EKR: Initial version.
0.2 EKR: Support doReplace and made script fully undoable.</t>
<t tx="ekr.20060814111542"># Add an editor to the body pane.
c.frame.body.addEditor()</t>
<t tx="ekr.20060904110922"></t>
<t tx="ekr.20060904111037">if hasattr(c,'opmlCommands'):
    c.opmlCommands.readOpmlCommand()
else:
    g.es_print('opml plugin not loaded')</t>
<t tx="ekr.20060904111037.1">if hasattr(c,'opmlCommands'):
    c.opmlCommands.writeOpmlCommand()
else:
    g.es_print('opml plugin not loaded')</t>
<t tx="ekr.20060918083159">put = g.es_print

for p in c.allNodes_iter():

    if hasattr(p.v,"unknownAttributes"):
        put("deleting v.unknownAttributes:",
            p.headString(),
            g.listToString(p.v.unknownAttributes.keys()))
        delattr(p.v,"unknownAttributes")

    if hasattr(p.v.t,"unknownAttributes"):
        put("deleting t.unknownAttributes:",
            p.headString(),
            g.listToString(p.v.t.unknownAttributes.keys()))
        delattr(p.v.t,"unknownAttributes")
           
put('done') 
c.redraw()</t>
<t tx="ekr.20060924180049">@
Ever have a clone that is difficult to understand outside the context of its
original parent? Here's some code to help. It displays the headline of the
current node plus the headlines of all the parents of all the clones of the
current node. Selecting a displayed parent headline moves the current node to
the corresponding clone in the outline.

The idea is to be able to quickly see the context of all the clones of the
current node and to be able to easily navigate from one clone instance to the
next.
@c

@others
c.cn = cloneNavigator(c)
c.cn.displayClones(c)
</t>
<t tx="ekr.20060924180049.1">class cloneNavigator:
    '''
       Displays the headline of the current node plus the headlines of
       all the parents of all the clones of the current node.  Selecting
       a displayed parent headline moves the current node to the
       corresponding clone in the outline.
       
       The idea is to be able to quickly see the context of all the clones
       of the current node and to be able to easily navigate from one clone
       instance to the next.
    '''
    @others</t>
<t tx="ekr.20060924180049.2">def __init__ (self,c):
    self.c = c
    import Tkinter as Tk
    if 0:
        f = Tk.Toplevel()
    else:
        log = c.frame.log
        log.selectTab('Clones')
        f = log.tabFrame
        for w in f.winfo_children():
            w.destroy()
    
    # Create and pack empty label and listbox
    self.title = Tk.Label(f)
    self.title.pack(anchor="nw")
    self.lb = Tk.Listbox(f)
    self.lb.pack(expand=1,fill="both")</t>
<t tx="ekr.20060924180049.3">def getAllClones(self,p):
    c = self.c
    def clonesOf(p,p1=p):
        return p.v.t == p1.v.t
    return filter(clonesOf, c.allNodes_iter(copy=True))</t>
<t tx="ekr.20060924180049.4">def displayClones(self,c):
    '''Displays the parent headline for all the clones of the current position'''
    cp = c.currentPosition()
    
    # "Title" is the headline of the current node
    self.title.configure(text=cp.headString())
    
    # Initialize listbox and clone list
    clones = self.getAllClones(cp)
    self.lb.delete(0,self.lb.size()-1)
    
    &lt;&lt;Fill listbox with clone parent headlines&gt;&gt;    
    &lt;&lt;Goto selected position when listbox selection changes&gt;&gt;
</t>
<t tx="ekr.20060924180049.5"># Add the headlines of all the clone parents to the listbox
for p in clones:
    if p.parent():
        text = p.parent().headString()
    else:
        text = "&lt;root&gt;"
    self.lb.insert(self.lb.size(),text)
    
    # Initial listbox selection corresponds to current position
    if p.v == cp.v:
        self.lb.selection_set(self.lb.size()-1)</t>
<t tx="ekr.20060924180049.6"># Callback for when a listbox entry is selected            
def gotoSelectedPosition(event,lb=self.lb,c=c,positions=clones):
    idx = int(lb.curselection()[0])
    p = positions[idx]
    c.frame.tree.expandAllAncestors(p)
    c.selectPosition(p)
    return
self.lb.bind(g.angleBrackets("ListboxSelect"), gotoSelectedPosition)</t>
<t tx="ekr.20061030041200">import os, sys

if 1: # Executes Iron Python in the console. (But not from the tutorials directory).
    path = r'c:\prog\IronPython-1.0.1\ipy.exe'
    args = ['-i']
        
    if 1: # Use present environment.
        os.spawnv(os.P_NOWAIT, path, args)
    else: # Use a pristine environment.
        os.spawnve(os.P_NOWAIT, path, args, os.environ)</t>
<t tx="ekr.20061030041356"></t>
<t tx="ekr.20061030041450"></t>
<t tx="ekr.20070115092430"># Invoke winpdb for general scripts **not** containing the predefined g, p or d constants.

# This is essentially the same as using the debug command.

import os,subprocess,sys

# Important: scriptFile2 must be different from scriptFile.
filename = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','scriptFile2'))
f = open(filename,'w') 
f.write(p.bodyString()) 
f.close() 
python = sys.executable
pythonDir = g.os_path_dirname(python) 
#winpdb = g.os_path_join(pythonDir,'Scripts','_winpdb.py') # For older versions of winpdb.
winpdb = g.os_path_join(pythonDir,'Lib','site-packages','winpdb.py') # For version 1.1.2 and newer.
os.chdir(g.app.loadDir)
cmdline = '%s %s -t %s' % (python,winpdb,filename) 
subprocess.Popen(cmdline)
</t>
<t tx="ekr.20070223164126"># An example of running this script:
    
import os

@others

types = (".py",) #,".c",".html",".txt")

dir = r'C:\prog\Notabene'

c.beginUpdate()
try:
    importFiles(dir,types,recursive=True)
finally:
    c.endUpdate()

g.es("done",color="blue")
</t>
<t tx="ekr.20070223164126.1">def importFiles (dir,type=None,kind="@file",recursive=False):
    
    v = c.currentVnode()

    # Check the params.
    if kind != "@file" and kind != "@root":
        g.es("kind must be @file or @root: " + kind)
        return

    if not g.os_path_exists(dir):
        g.es("directory does not exist: " + dir)
        return
    
    c.beginUpdate()
    try:
        root = createLastChildOf(v,"imported files")
        try:
            importDir (dir,type,kind,recursive,root)
            root.contract()
        except:
            g.es_exception()
    finally:
        c.endUpdate()</t>
<t tx="ekr.20070223164126.2">def importDir (dir,types,kind,recursive,root):

    g.es("dir: " + dir,color="blue")
    
    try:
        files = os.listdir(dir)
        files2 = [] ; dirs =[]
        for f in files:
            path = g.os_path_join(dir,f)
            if g.os_path_isfile(path):
                name, ext = g.os_path_splitext(f)
                if not types or ext in types:
                    files2.append(path)
            elif recursive:
                dirs.append(path)
        if len(files2) &gt; 0 or len(dirs) &gt; 0:
            child = createLastChildOf(root,dir)
            c.selectVnode(child)
        if len(files2) &gt; 0:
            c.importCommands.importFilesCommand(files2,kind)
        if len(dirs) &gt; 0:
            dirs.sort()
            for dir in dirs:
                importDir(dir,types,kind,recursive,child)
    except:
        g.es("exception in importFiles script")
        g.es_exception()
</t>
<t tx="ekr.20070223164126.3">def createLastChildOf (v,headline):
    
    child = v.insertAsLastChild()
    child.initHeadString(headline)
    return child
</t>
<t tx="ekr.20070224123943"></t>
<t tx="ekr.20070305085403">For MacOS X (darwin) the following are typical defaults:

vim_cmd = /Applications/gvim.app/Contents/MacOS/gvim --servername LEO
vim_exe = /Applications/gvim.app/Contents/MacOS/gvim
</t>
<t tx="ekr.20070305085403.1"></t>
<t tx="ekr.20070305085403.2"></t>
<t tx="ekr.20070315071830"># Do not remove these nodes.</t>
<t tx="ekr.20070410063214"></t>
<t tx="ekr.20070416075121">g.app.gui.set_focus(c,w)</t>
<t tx="ekr.20070503085527"></t>
<t tx="ekr.20070504080933">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.</t>
<t tx="ekr.20070515073111">print '=' * 50</t>
<t tx="ekr.20070517070854">import leoGui
oldGui = g.app.gui
g.app.gui = leoGui.nullGui(guiName='testGui')
try:
    fileName = g.os_path_abspath(g.os_path_join(
        g.app.loadDir,'..','doc','LeoDocs.leo'))
    ok,frame = g.openWithFileName(fileName,old_c=c)
    if ok:
        c2 = frame.c
        for p in c2.allNodes_iter():
            print '.'*p.level(),p.headString()
        g.app.closeLeoWindow(frame)
finally:
    g.app.gui = oldGui</t>
<t tx="ekr.20070517071510">import leoBridge

path = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','doc','LeoDocs.leo'))

if 0: # This can not be run locally: leoBridge.controller starts a Tk event loop.

    controller = leoBridge.controller(gui='nullGui')
    g = controller.globals()
    c = controller.openLeoFile(path)
    n = 0
    for p in c.allNodes_iter():
        n += 1
    print '%d nodes in %s' % (n,path)
    # g.app.closeLeoWindow(c.frame)</t>
<t tx="ekr.20070517160058.1"></t>
<t tx="ekr.20070528111805"># FrontWindowCapture.pyw
# Version 0.1
# Date    20070526
# Author  Roger Erens (roger AT erens-krekels.net)
"""
        Purpose:
        Capture the image of the front-most window into a fixed-name
        (_front_window), max-size (default MAX_WIDTH is 640 pixels), and
        fixed-format (PNG) file that can easily be used when creating
        documentation for an application on a wiki or in some HTML-docs.
        This script does _not_ copy the captured image to the clipboard (handy
        when creating MS Word or OpenOffice documents) since MS Windows already
        has ALT-PRTSCR to do so.

        Dependencies:
        Fairly recent versions of Python, wxPython, and PIL should be installed

        Start:
        Double click FrontWindowCapture.pyw; an icon appears in the Task Bar (lower right of
        the screen).

        Use:
        Bring a window to the front and then left-click on the
        icon in the Task Bar. A file named '_front_window.png' will be saved
        in the current directory.
        A pictures wider than MAXWIDTH is scaled down in order to make it easily
        used in wikis or HTML-documentation.
        Usually, human intelligence is needed to rename that file; this is also
        why this script does not copy the image to the clipboard.

        End:
        Close the application by right-clicking the icon in the Task Bar.

        Note:
        Make sure that your system is fast enough to find the frontmost
        window. That is, when a virusscanner is running or virtual memory is
        low, this script will choke. You can see what happens by enabling the
        print statements and running this script from a console (change the
        extension from .pyw to .py).
"""
import wx
import sys
import win32ui
import win32gui
import win32con
import time
from PIL import Image, ImageGrab

Image.init()

MAX_WIDTH = 640
BLINK_STATE = 0

class TaskBarApp(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, -1, title, size = (1, 1),
            style=wx.FRAME_NO_TASKBAR| wx.NO_FULL_REPAINT_ON_RESIZE)
        self.tbicon = wx.TaskBarIcon()
        icon = wx.Icon('LeoApp16.ico', wx.BITMAP_TYPE_ICO)
        self.tbicon.SetIcon(icon, 'Click to capture the foremost window')
        self.tbicon.Bind(wx.EVT_TASKBAR_LEFT_UP, self.OnTaskBarLeftClick)
        self.tbicon.Bind(wx.EVT_TASKBAR_RIGHT_UP, self.OnTaskBarRightClick)
        self.Show(True)

    def OnTaskBarLeftClick(self, evt):

        self.FlashIcon(evt)

        def _MyCallback(hwnd, extra ):
            extra.append(hwnd)

        windows = []
        win32gui.EnumWindows(_MyCallback, windows)

        winList = []
        for i in windows:
            if win32gui.IsWindowVisible(i):
                winList.append(i)
                #print i

        win32gui.SetForegroundWindow(winList[1])    # found by trial and error
                                                    # that I need the second
                                                    # window from the list
        time.sleep(0.1)  # give the previous command some time to finish

        fgwindow = win32ui.GetForegroundWindow()
        #print "(C)lick!"

        bbox = fgwindow.GetWindowRect()
        img = ImageGrab.grab( bbox)
        width = bbox[2] - bbox[0]
        if width &gt; MAX_WIDTH:
            coeff = MAX_WIDTH * 1. / width
            height = bbox[3] - bbox[1]
            newHeight = int( coeff * height)
            #print width, height, "scaled down to", MAX_WIDTH, newHeight
            img = img.resize((MAX_WIDTH,newHeight), Image.ANTIALIAS)
        img = img.convert("P", dither=Image.NONE,
                              palette=Image.ADAPTIVE, colors=256)
        img.save("_front_window.png", "PNG", optimize=1)
        #img.show() # show the image in an image viewer

        self.FlashIcon(evt)

    def OnTaskBarRightClick(self, evt):
        #print "Auta..." # that's about it...
        self.tbicon.Destroy()
        self.Close(True)
        wx.GetApp().ProcessIdle()

    def FlashIcon(self, evt):
        global BLINK_STATE
        if BLINK_STATE == 0:
            icon = wx.Icon('LeoApp16lick.ico', wx.BITMAP_TYPE_ICO)
            self.tbicon.SetIcon(icon, 'Window is being captured...')
            BLINK_STATE = 1
            return
        else:
            icon = wx.Icon('LeoApp16.ico', wx.BITMAP_TYPE_ICO)
            self.tbicon.SetIcon(icon, 'Click to capture the foremost window')
            BLINK_STATE = 0
            return

class MyApp(wx.App):
    def OnInit(self):
        frame = TaskBarApp(None, -1, ' ')
        frame.Center(wx.BOTH)
        frame.Show(False)
        return True

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == '__main__':
    main()

""" CREDITS

    Thanks to
    Roger Upole:
    http://groups.google.com/group/comp.lang.python/
    browse_thread/thread/ff39ec79f7c3248a/
    e600c892772bf52a?lnk=gst&amp;q=screen+capture&amp;rnum=6#e600c892772bf52a
    for his time.sleep() Aha (This took me a year and a half to note!)

    Christian Wyglendowski, Werner Bruhin, and Xavier Morel for the
    http://wiki.wxpython.org/index.cgi/FlashingTaskbarIcon
    discussion

    'Rob aspn at msolutionsinc.com '
    http://mail.python.org/pipermail/python-win32/2003-June/001129.html
    for his suggestion to find out the foremost window

    and of course the usual suspects that created/maintain
    wxPython,
    PIL,
    pywin32,
    LEO,
    gvim,
    and Python itself.
"""</t>
<t tx="ekr.20070529172620"></t>
<t tx="ekr.20070529173219"></t>
<t tx="ekr.20070529173219.1"></t>
<t tx="ekr.20070530072113">c.chapterController.hideChapters()</t>
<t tx="ekr.20070530072113.1">c.chapterController.showChapters()</t>
<t tx="ekr.20070531102813"></t>
<t tx="ekr.20070531103315">c.abbrevCommands.dynamicExpansion(event=None)</t>
<t tx="ekr.20070531104646">c.abbrevCommands.dynamicCompletion()</t>
<t tx="ekr.20070603175054">cc = c.chapterController
cc.selectChapterByName('abc')</t>
<t tx="ekr.20070603175054.1">cc = c.chapterController
cc.selectChapterByName('main')</t>
<t tx="ekr.20070603190713">cc = c.chapterController
cc.createChapterByName('xyz')</t>
<t tx="ekr.20070603190713.1">cc = c.chapterController
cc.selectChapterByName('xyz')</t>
<t tx="ekr.20070603190944"></t>
<t tx="ekr.20070603190944.1"></t>
<t tx="ekr.20070604095313"></t>
<t tx="ekr.20070604100125"></t>
<t tx="ekr.20070609085533"></t>
<t tx="ekr.20070630142904"></t>
<t tx="ekr.20070630142904.2">@nocolor

To build your module using GCC is a three step process on Unix:

1. Use Pyrex to translate mymodule.pyx to mymodule.c::

    python pyrexc mymodule.pyx

mymodule.pyx is the name of the Pyrex module you are writing.

2. Compile mymodule.c to mymodule.o::

    gcc -c -fPIC -I/usr/include/python2.2/ mymodule.c

-c  Produces a .o file instead of an executable. 
-fPIC Produces position independent code, so we can dynamically link against it later. 
-I/usr/include/python2.2/ is the location of the Python 2.2 include file.
 The location of your Python include file may differ from /usr/include/python2.2/. 

3 Link the mymodule.o into a mymodule.so::
    
    gcc -shared mymodule.o -lxosd -o mymodule.so

-shared produces a shared-object file, instead of an executable. 
-lxosd links against a C-library, with the name of the library given as the argument. 
</t>
<t tx="ekr.20070630142904.3">@nocolor

The pyrexc command supports the following options:

  Short Long              Argument    Description
  ----- ----              --------    -----------
  -v    --version                     Display version number of pyrex compiler
  -l    --create-listing              Write error messages to a .lis file
  -I    --include-dir     &lt;directory&gt; Search for include files in named 
                                      directory (may be repeated)
  -o    --output-file     &lt;filename&gt;  Specify name of generated C file (only
                                      one source file allowed if this is used)

Anything else is taken as the name of a Pyrex source file and compiled
to a C source file. Multiple Pyrex source files can be specified
(unless -o is used), in which case each source file is treated as the
source of a distinct extension module and compiled separately to
produce its own C file.
</t>
<t tx="ekr.20070630142904.4">def spam(int i, char *s):
    if 1:
        print i,s</t>
<t tx="ekr.20070630142904.5"># Use pyrexc to create myModule.c from myModule.pyx.

import os,sys
python = sys.executable
theFile = r'C:\prog\tigris-cvs\leo\test\myModule.pyx'
pyrexc = r'c:\prog\Pyrex-0.9.6.4\pyrexc.py'
os.system(r'%s %s %s' % (python,pyrexc,theFile))

# Use pyrex/Demos/setup.py to create module on Linux.</t>
<t tx="ekr.20070701090143"></t>
<t tx="ekr.20070723091227">
        
        
        </t>
<t tx="ekr.20070723091227.1"></t>
<t tx="ekr.20070723091227.2"></t>
<t tx="ekr.20070723091227.3"></t>
<t tx="ekr.20070927175908">'''Convert a normal Leo tree to a networkx graph'''
import networkx as nx
import sys

x = nx.Graph()

def node_id(p):
    return '%s: %s' % (id(p.v.t),p.headString())

def addTree(p):
    x.add_node(node_id(p))
    for child in p.children_iter():
        addTree(child)
        x.add_edge(node_id(p),node_id(child))

addTree(p)

print 'nodes...\n', g.listToString(x.nodes(),sort=True)
print 'edges...\n', g.listToString(x.edges(),sort=True)
print 'yaml...\n'
nx.write_yaml(x,sys.stdout) # 'graph.yaml')
</t>
<t tx="ekr.20070928095102">@ This is a plain Leo tree.

You can convert it to a networkx graph using the leo2graph button.
</t>
<t tx="ekr.20070928095102.1"></t>
<t tx="ekr.20070928095102.2"></t>
<t tx="ekr.20070929062147">@nocolor

The following scripts convert between Leo trees and NetworkX graphs.

- leo2graph:            convert a normal Leo tree to a NetworkX graph.
- at-graph2graph:       convert an @graph tree to a Networkx graph.
- at-networkx2graph:    convert an @networkx tree to a Networkx graph
- at-networkx2at-graph: create an @graph tree from an @networkx tree.

Not ready yet:

- tree2pict: convert a Leo @graph tree to a picture of the corresponding graph.

@color</t>
<t tx="ekr.20070929062147.1">'''Convert an @graph tree to a networkx graph.'''
import networkx as nx
import sys

x = nx.Graph()

def node_id(p):
    return '%s: %s' % (str(p.v.t.fileIndex),p.headString())

def addTree(p):
    tag = '@link'
    h = p.headString()
    if h.startswith('@graph'):
        for child in p.children_iter():
            addTree(child)
    elif h.startswith('@node'):
        x.add_node(node_id(p))
        for child in p.children_iter():
            h = child.headString()
            if h.startswith(tag):
                link = h[len(tag):].strip()
                if link: x.add_edge(node_id(p),link)
            elif child.headString().startswith('@node'):
                addTree(child)
                x.add_edge(node_id(p),node_id(child))

addTree(p)

print 'nodes...\n', g.listToString(x.nodes(),sort=True)
print 'edges...\n', g.listToString(x.edges(),sort=True)
print 'yaml...\n'
nx.write_yaml(x,sys.stdout) # 'graph.yaml')</t>
<t tx="ekr.20070929062147.2">'''Convert an @networkx node to a networkx graph.'''
import networkx as nx
import sys

@others

x = nx.Graph()

edges,nodes = parse(p)

for z in nodes:
    x.add_node(z)

for z in edges:
    a,b = z
    x.add_edge(a,b)

print 'nodes...\n', g.listToString(x.nodes(),sort=True)
print 'edges...\n', g.listToString(x.edges(),sort=True)
print 'yaml...\n'
nx.write_yaml(x,sys.stdout) # 'graph.yaml')
</t>
<t tx="ekr.20070929070257">@ This is an @graph tree.

You can convert it to a networkx graph using the at-graph2graph button.</t>
<t tx="ekr.20070929070257.1"></t>
<t tx="ekr.20070929070257.2"></t>
<t tx="ekr.20070929070426">g.es('@link %s: %s' % (str(p.v.t.fileIndex),p.headString()))</t>
<t tx="ekr.20070929070632"></t>
<t tx="ekr.20070929070632.1"></t>
<t tx="ekr.20070929072043">@ This node defines a networkx graph using nodes and edges.

You can create an @graph tree from this node using the graph2at-graph button.
</t>
<t tx="ekr.20070929072506"># Each edge is represented as two lines.

# child1 --&gt; child2
('ekr', '20070929070257', 1): @node child1
('ekr', '20070929070257', 2): @node child2

# child2 --&gt; child1
('ekr', '20070929070257', 2): @node child2
('ekr', '20070929070257', 1): @node child1

</t>
<t tx="ekr.20070929072506.1"># Each node is on a separate line.

('ekr', '20070929070257', 1): @node child1
('ekr', '20070929070257', 2): @node child2
</t>
<t tx="ekr.20070929072506.2">def parseNodes (p):

    s = p.bodyString()
    lines = [str(z).strip() for z in g.splitLines(s) if z.strip() and not z.startswith('#')]
    # g.trace(g.listToString(lines))
    return lines
</t>
<t tx="ekr.20070929074830">def parse (p):

    tag = '@networkx'
    if not p.headString().startswith(tag):
        p = g.findNodeAnywhere(c,tag)
        if not p.headString().startswith(tag):
            error('No %s node in the outline' % tag)
            return [],[]

    nodes = []
    for tag in ('@edges','@nodes'):
        node = g.findNodeInTree(c,p,tag)
        if node:
            nodes.append(node)
        else:
            error('No %s node in @networkx tree' % tag)
            return [],[]
    edgesNode,nodesNode = nodes
    edges = parseEdges(edgesNode)
    nodes = parseNodes(nodesNode)
    return edges,nodes
</t>
<t tx="ekr.20070929074830.1">def parseEdges (p):

    s = p.bodyString()
    lines = [str(z).strip() for z in g.splitLines(s) if z.strip() and not z.startswith('#')]
    # g.trace(len(lines),lines)
    if (len(lines) % 2) == 0:
        i = 0 ; edges = []
        while i &lt; len(lines):
            data = lines[i],lines[i+1]
            edges.append(data)
            i += 2
        # g.trace(g.listToString(edges))
        return edges
    else:
        error('edges node must have even number of lines')
        return []

</t>
<t tx="ekr.20070929081505">def error (s):

    g.es_print(s,color='red')
</t>
<t tx="ekr.20070929082546">'''Convert an @networkx node to an @graph tree.
Create the tree as the child of the @graph-target node,
or the current position if no such node.'''

import networkx as nx
import sys

@others

print '=' * 10

p,edges,nodes = parse(p)

createTree(p,edges,nodes)
</t>
<t tx="ekr.20070929114410.2">def error (s):

    g.es_print(s,color='red')
</t>
<t tx="ekr.20070929114410.3">def parse (p):

    tag = '@graph-target'
    if not p.headString().startswith(tag):
        p = g.findNodeAnywhere(c,tag)
    if not (p and p.headString().startswith(tag)):
        p = c.currentPosition() # Use the presently selected node.

    nodes = [] ; tag = '@networkx'
    data = g.findNodeAnywhere(c,tag)
    if not data:
        error('No %s tree' % tag)
        return None,[],[]
    for tag in ('@edges','@nodes'):
        node = g.findNodeInTree(c,data,tag)
        if node:
            nodes.append(node)
        else:
            error('No %s node in @networkx tree' % tag)
            return None,[],[]
    edgesNode,nodesNode = nodes
    edges = parseEdges(edgesNode)
    nodes = parseNodes(nodesNode)
    return p,edges,nodes
</t>
<t tx="ekr.20070929114410.4">def parseNodes (p):

    s = p.bodyString()
    lines = [str(z).strip() for z in g.splitLines(s) if z.strip() and not z.startswith('#')]
    # g.trace(g.listToString(lines))
    return lines
</t>
<t tx="ekr.20070929114410.5">def parseEdges (p):

    s = p.bodyString()
    lines = [str(z).strip() for z in g.splitLines(s) if z.strip() and not z.startswith('#')]
    # g.trace(len(lines),lines)
    if (len(lines) % 2) == 0:
        i = 0 ; edges = []
        while i &lt; len(lines):
            data = lines[i],lines[i+1]
            edges.append(data)
            i += 2
        # g.trace(g.listToString(edges))
        return edges
    else:
        error('edges node must have even number of lines')
        return []

</t>
<t tx="ekr.20070929114617">@ This will be the root node for the @graph tree produced by the at-networkx2at-graph button.</t>
<t tx="ekr.20070929115302">def createTree (parent,edges,nodes):

    if 0:
        g.trace('nodes...\n', g.listToString(nodes,sort=True))
        g.trace('edges...\n', g.listToString(edges,sort=True))

    c.beginUpdate()
    try:
        p = parent.insertAsLastChild()
        p.setHeadString('@graph')
        d = createNodes(p,nodes)
        createEdges(d,edges)
        c.selectPosition(p)
    finally:
        c.endUpdate()
</t>
<t tx="ekr.20070929120541">def createEdges (d,edges):

    for edge in edges:
        a,b = edge
        g.trace('\n%s --&gt; %s' % (a,b))
        p = d.get(a)
        if p:
            p2 = p.insertAsLastChild()
            p2.setHeadString('@link %s' % (b))
        else:
            error('@node not found: %s' % (a))
</t>
<t tx="ekr.20070929120541.1">def createNodes (parent,nodes):

    d = {}

    for node in nodes:
        # g.trace(node)
        p = parent.insertAsLastChild()
        p.setHeadString('@node %s' % (node))
        d[node] = p.copy()

    return d
</t>
<t tx="ekr.20070929122956"></t>
<t tx="ekr.20070929122956.1"></t>
<t tx="ekr.20071002150320">log = c.frame.log
tag = 'my-canvas'

w = log.canvasDict.get(tag)
if not w:
    w = log.createCanvas(tag)
    w.configure(bg='yellow')

log.selectTab(tag)
</t>
<t tx="ekr.20071006084354">w = c.frame.body.bodyCtrl
s = w.getAllText()
ins = w.getInsertPoint()
row,col = g.convertPythonIndexToRowCol(s,ins)
print 'row',row,'col',col</t>
<t tx="ekr.20071025192258">import leoTest
leoTest.doTests (c,all=False)</t>
<t tx="ekr.20071025193940"># Caution: you will have to disable cursesGui in an external editor
# if you enable the cursesGui plugin it here

plugins_menu.py

# ipython.py
cleo.py
rClick.py
toolbar.py

add_directives.py
color_markup.py
threading_colorizer.py
rst3.py
UNL.py
open_with.py
mod_scripting.py

nav_buttons.py
hoist.py
image.py
leo_to_html.py

# vim.py
print_cp.py
</t>
<t tx="ekr.20071026102420.2"></t>
<t tx="ekr.20071026102420.3"></t>
<t tx="ekr.20071101163934">import leoPlugins

rst3 = leoPlugins.getPluginModule('rst3')

if rst3:
    controller = rst3.controllers.get(c)
    if controller:
        controller.processTopTree(p)
else:
    rst3 = leoPlugins.loadOnePlugin('rst3',verbose=True)
    if rst3:
        g.es('rst3 loaded')
        rst3.onCreate('tag',{'c':c})
    else:
        # Ask to be removed.
        g.app.scriptDict['removeMe'] = True</t>
<t tx="ekr.20071105085941"></t>
<t tx="ekr.20071128122043">log = c.frame.log ; tag = 'Shell'
frame1 = log.frameDict.get(tag)
shellKind = 'text' # in ('plain','text','canvas')

if frame1:
    log.selectTab(tag)
elif shellKind == 'plain':
    log.selectTab (tag,createText=False)
    frame = log.frameDict.get(tag)
elif shellKind == 'text':
    log.selectTab (tag,createText=True)
    frame = log.textDict.get(tag)
elif shellKind == 'canvas':
    log.createCanvas(tag)
    log.selectTab(tag)
    frame = log.canvasDict.get(tag)
else:
    frame = None
    g.es('bad shellKind',shellKind)

if frame and not frame1:
    frame.configure(bg='white')
    print 'logFrame',log.frameDict.get(tag)
</t>
<t tx="ekr.20071129103842"># A script to create @auto nodes from all .py files in a directory.

import glob,os

reallyCreate = False
baseDir = r'c:\Python25\Lib\site-packages\pubsub'
dirs = ('',) #'Extensions','UserConfig',)
print '-----'

c.beginUpdate()
try:
    for theDir in dirs:
        pattern = g.os_path_join(baseDir,theDir,'*.py')
        files = glob.glob(pattern)
        print pattern
        # print g.listToString(files)
        for name in files:
            h = '@auto %s' % (name[len(baseDir) + 1:].strip())
            print 'creating',h
            if reallyCreate:
                child = p.insertAsLastChild()
                child.initHeadString(h)
finally:
    c.endUpdate()
</t>
<t tx="ekr.20071206070207"></t>
<t tx="ekr.20080105115712"># This hangs Leo while pylint is running.
import pylint.lint as lint
import sys

rcFile = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','pylint-leo-rc.txt'))
rcArg = '--rcfile=%s' % rcFile
&lt;&lt; define data &gt;&gt;

# We expect only one W104 error, in leoGlobals.py
print ; print '=' * 40
for name,s in data:
    name2 = g.os_path_abspath(g.os_path_join(g.app.loadDir,name))
    args = [name2,rcArg]
    if s.strip():
        args.append('--disable-msg=%s' % s)
    print name,s
    lint.Run(args)
print ; print 'End of pylint run'</t>
<t tx="ekr.20080105120559">data = (
    ('leoAtFile.py',''), 
    ('leoChapters.py',''),
    ('leoCommands.py',''), 
    ('leoEditCommands.py','E1101'),
    ('leoFileCommands.py',''), 
    ('leoFind.py',''),
    ('leoFrame.py',''),
    ('leoGlobals.py','E0602,E1101'),
    ('leoGui.py',''),
    ('leoImport.py',''),
    ('leoMenu.py',''),
    ('leoNodes.py',''),
    ('leoPlugins.py',''),
    ('leoTangle.py',''),
    ('leoUndo.py','W0102'),
    ('leoTkinterDialog.py',''),
    ('leoTkinterFind.py',''),
    ('leoTkinterGui.py',''),
    ('leoTkinterFrame.py','W0221'),
    ('leoTkinterKeys.py',''), 
    ('leoTkinterMenu.py',''), 
    ('leoTkinterTree.py',''),
)
</t>
<t tx="ekr.20080105130903">@nocolor
@
C0111 Missing docstring
C0301 Line too long
C0311 Bad indentation
C0321 More than one statement on a single line
C0322 Operator not preceded by a space
C0323 Operator not followed by a space
C0324 Comma not followed by a space

R0201 Method could be a function.
R0903 Too few public methods (0/1)

W0102 Dangerous default value [] as argument
W0104 Statement seems to have no effect
W0106 Unnecessary semicolon
W0107 Unnecessary pass statement
W0122 Use of the exec statement
W0141 Used builtin function 'map'
W0142 Used * or * magic*
W0201 Attribute defined outside __init__
W0212 Access to a protected member of a client class
W0231 __init__ method from base class is not called
W0232 Class has no __init__ method
W0401 Wildcard import (pychecker)
W0402 Uses of a deprecated module (like string)
W0404 Reimport &lt;module&gt;: let pychecker do this.
W0406 Module import itself
W0602 Using global for x but no assigment is done (leoEditCommands defines classList after all classes).
W0603 Using the global statement
W0612 Unused variable
W0613 Unused argument (sometimes used for debugging)
W0621 Redefining &lt;name&gt; from outer scope: especially __pychecker__
W0622 Redefining built-in
W0631 Using possibly undefined loop variable
W0702 No exception type specified
W0703 Catch "Exception"
W0704 Except doesn't do anything (Except: pass)
W1111 Assigning to a function call that only returns None</t>
<t tx="ekr.20080115085447">@nocolor
@

************* Module leoGlobals
W0104:3871: Statement seems to have no effect
</t>
<t tx="ekr.20080206055658">print 'settings...'
for z in ('body','button','headline','log','menu','outline'):
    for z2 in ('family','size','slant','weight',):
        setting = '%s_text_font_%s' % (z,z2)
        print setting,c.config.get(setting,z2)

print 'default sizes...'
for z in ('Body','Log','Menu','Tree'):
    setting = 'default%sFontSize' % z
    print setting,getattr(c.config,setting)

print 'actual fonts...'
for z in ('body','button','headline','log','menu','outline'):
    kind = ('family','size','slant','weight')
    arg0,arg1,arg2,arg3 = args = ['%s_text_font_%s' % (z,z2) for z2 in kind]
    setting = '%s_text_font' % (z)
    print '%20s' % (setting),c.config.getFontFromParams(arg0,arg1,arg2,arg3,defaultSize=12)
</t>
<t tx="ekr.20080214091706.2">print 'hello from ekr'</t>
<t tx="ekr.20080310111916.1">def myTranslateString (s):

    i = s.lower().find('can not')
    if i == -1:
        return s
    else:
        return s[:i+1] + "an't" + s[i+7:]

g.translateString = myTranslateString

</t>
<t tx="ekr.20080412082246.1"></t>
<t tx="ekr.20080503202744.3">import rope.base.project
import rope.contrib.codeassist as codeassist
import leo.core.leoGlobals as g
import leo.core.leoCommands as leoCommands
c2 = leoCommands.Commands(frame=c.frame,fileName='xyz-file')

class leoFSCommands (object):
    def create_file(self,path):         g.trace(path)
    def create_folder(self,path):       g.trace(path)
    def move (self,path,new_location):  g.trace(path,new_location)
    def remove (self,path):             g.trace(path)
    def write (self,path,data):         g.trace(path,data)

path = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','..'))
    # Make the trunk folder a project
project = rope.base.project.Project(path,fscommands=leoFSCommands)
s = p.bodyString() # Could simulate a write to allow @others.

print '*' * 40
for pattern in (
    # 'g.', # works.
    # 'g.trace(', # weird.
    # 'rope.base.', # works.
    'g.list', # works: gives g.listToString
    'c2.de', # works.
):
    i = s.find(pattern)
    if i &gt; -1:
        proposals = codeassist.code_assist(project,s,i+len(pattern))
        print '-' * 20
        print 'pattern:',pattern
        print g.listToString(proposals)</t>
<t tx="ekr.20080529111617.1"></t>
<t tx="ekr.20080529111617.2"></t>
<t tx="ekr.20080529111617.3">The colour used instead of green in progress bars</t>
<t tx="ekr.20080529111617.4">The colour used instead of red in progress bars</t>
<t tx="ekr.20080529111617.5"># list of @file node types to color.
# Uncomment these to enable coloring for these kinds of nodes.
# @asis
# @file
# @auto
# @thin
@auto</t>
<t tx="ekr.20080529111617.6">The base width of progress bars, in pixels.</t>
<t tx="ekr.20080529111617.7">The default number of time units.</t>
<t tx="ekr.20080529111617.8">0: no progress bars
1: unscaled progress bars
2: scaled progress bars</t>
<t tx="ekr.20080529111617.9">pixels per time unit to add to width of scaled progress bars</t>
<t tx="ekr.20080529111617.10">The name of time unit (e.g. days, weeks, hours)</t>
<t tx="ekr.20080531080812.1">def eggs():
    g.trace()

def spam():
    g.trace()
    eggs()

t = g.startTracer()
spam()
t.stop()
</t>
<t tx="ekr.20080531131542.1">import mx.TextTools as tt

&lt;&lt; define scan4 tables &gt;&gt;
&lt;&lt; define s &gt;&gt;

@others

print '*' * 60
ok,taglist,nextindex = tt.tag(s,lineTable)
# print g.listToString(taglist)
for z in taglist:
    printItem(z,level=0)
print 'ok:',ok
</t>
<t tx="ekr.20080531131542.2">from mx.TextTools import * # Required for tags.

ws_charset   = CharSet(' \t')
name_charset = CharSet(alpha)

gnxTable = (
    (None,Is,':',MatchFail),
    (None,AllNotIn,':',MatchFail),
    (None,Is,':',MatchFail,MatchOk),
)

sentinelNameTable = (
    (None,Is,'@',+1,+3),
    (None,Is,'+',+1,+2),
    (None,Is,'-',+1),
    (None,AllInCharSet,name_charset,MatchFail,MatchOk),
)

sentinelTable = (
    # Start of another line.
    # Skip ws.
    (None,AllInCharSet,ws_charset,+1),
    # Require sentinel comment.
    (None,Word,'#@',MatchFail),
    ('kind',Table,sentinelNameTable,MatchFail),
    ('gnx',Table,gnxTable,+1),
    # Everything else is the sentinel value
    ('extra',AllNotIn,'\n',+1),
    (None,Is,'\n',MatchOk,MatchOk),
)

normalLineTable = (
    (None,AllNotIn,'\n',+1),
    (None,Is,'\n',MatchOk,MatchOk),
)

lineTable = (
    ('sent',Table,sentinelTable,+1,+2),
    ('line',Table,normalLineTable,+1,+1),
    ('eof',EOF,Here,-2),
)</t>
<t tx="ekr.20080531131542.4">def printItem(aList,level):

    obj,lt_index,rt_index,subtag = aList
    print '  '*level,obj,repr(s[lt_index:rt_index])
    if subtag:
        for z in subtag:
            printItem(z,level+1)
</t>
<t tx="ekr.20080531141227.1">path = r'c:\leo.repo\trunk\leo\core\runLeo.py'
f = file(path)
s = f.read()
f.close()</t>
<t tx="ekr.20080604101239.1">Martin Lëwis and friends.</t>
<t tx="ekr.20080604104453.1">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

ignore:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="ekr.20080604104453.2">@language otl</t>
<t tx="ekr.20080604104453.3">Leo's vi support:
	History
		Version 4 (27-May-08)
			Newly found commands
				| Additional commands were found that are available for mapping to
				| keys.  The "@shortcuts - unbind all commands" node has been
				| updated.
			Added Vim's window support (basic) to the body pane (Leo's editors)
				| 'Ctrl-w s' or 'Ctrl-w n' will add another editing window.
				| 'Ctrl-w w' or 'Ctrl-w p' will cycle focus between editor windows.
				| 'Ctrl-w c' or 'Ctrl-w q' will close the editor window with focus.
			Fixed Arrow mappings
				| All arrows were mapped to a goto-node command in outline pane.
				| Left and right arrows in outline pane move cursor one character.
			Added Ctrl-Arrow support in Outline and Body pane.
				| Ctrl-Arrow keys are also mapped to the goto-node commands
			Added Ctrl-Shift-Arrow support in Outline pane
				| Ctrl-Shift-Arrow keys are also mapped to the move-node commands
			Added vi's 'e' key mapping to move to the end of the current word.
				| Made possible by the newly found forward-end-word command.
			Added 'Shift-e' key mapping to select to the end of the current word.
				| Not-vi but useful until text editing commands work in headlines.
				| Made possible by the newly found forward-end-word-extend-select
			Added vi's Shift-f key mapping to go backwards to a character.
				| Made possible by the newly found backward-to-character command.
			Mapped '=' to double-click-icon-box command (Not Vi/Vim)
				| Use open-with plugin to invoke external Vim editor without mouse.
				| Made possible by the newly found double-click-icon-box command.
			Added vi's Ctrl-y and Ctrl-e to scroll outline up and down by lines.
				| Made possible by newly found scroll-outline-up/down-line commands
				| Also mapped vi's Ctrl-d,-u,-f,-b to same (until implemented).
			Removed Ctrl-y,Ctrl-d,Ctrl-p in outline to copy,delete,paste nodes.
				| Keys are used in vi for other functions. Use Ctrl-c,Ctrl-x,Ctrl-v
			Remapped copy-text to Alt-y to avoid use of vi key mappings
				| copy-text yanks the currently selected text into the clipboard.
				| Vi doesn't have a concept of "selected text" but it is useful.
			Mapped vi's Ctrl-d,-u,-e,-y to Ctrl-f,-b in body (until implemented)
			Fixed missing @mode node mapped to Ctrl-Shift-l
		Version 3 (26-May-08)
			Body pane key mappings - added and corrected
			Outline pane key mappings - initial release
			non-vi support key mappings - merged into Body and Outline mappings
			Documentation - Added
		Version 2 (22-May-08)
			Body pane key mappings - Released
			non-vi support key mappings - Released
		Version 1 (18-May-08)
			Body pane key mappings - Updated
			non-vi support key mappings - Updated
		
	Realization:
		Leo Configuration:
			| The following configuration was used for all testing:
				@strings  top_level_unbound_key_action = command
				@bool stayInTreeAfterEditHeadline = True
				@bool stayInTreeAfterSelect = True
				@bool outline_pane_has_initial_focus = True
		
		Leo's Panes:
			| A "pane" is a area of the screen containing a user interface
			| dedicated to supporting a common set of tasks.  Vi key mappings are
			| associated with the Outline pane, the Body pane, or to the Leo
			| program.  See the no pane (see "General Commands" below). (Outline
			| pane, Body pane)
		
		Leo's Command/Insert States:
			Command state - Denoted by a blue background color (Outline,Body pane)
				| Keys are mapped to commands.
			Insert state - Denoted by a red background color (Outline,Body pane)
				| Keys pressed are inserted into the text.
			Grayed state - Denoted by a gray background color (Outline pane)
				| Keys pressed will cause the next node with a headline starting
				| with that key to be selected.  This "select node by first
				| character" feature is built into Leo. It is not part of the vi
				| support.
				| 
				| This state is intentionally avoided in the vi based outline key
				| mappings. If in the "Grayed" state, enter Ctrl-i to switch to the
				| "Command" state.  The "Grayed" state can be entered from the
				| outline's "Command" state by pressing the Ctrl-] key.
		
		Leo's modes:
		| Most vi commands are implemented using Leo's "mode" functionality.
		| Modes beginning with "vi-" denote a vi command for the body pane.
		| Modes beginning with "tree-" denote a vi-like command for the outline.
		| Modes beginning with "body-" denote outline commands that can be called
		| from the body pane (and return focus back to the body pane)
		| 
		| Modes are used both for managing multi-key vi commands and for defining
		| macros.
			
			Multi-key command modes:
			| Vi has many commands that require multiple keys to invoke.  Each key
			| accept the last in the command are assigned to a mode that, when
			| executed, maps the subsequent allowed keys in the command sequence.
			| The last key in the sequence is mapped directly to a Leo command or
			| to a "Macro" mode (see below). Any modes mapped to a key by another
			| mode are located in a child node of the mode node doing the mapping.
			| 
			| Example:
			|     dtw = Delete To the 'W' character (note the capital letters)
			|   The 'd' key is mapped to vi-delete-object
			|   vi-delete-object maps the 't' key to vi-delete-to-char
			|   vi-delete-to-char contains Leo commands to perform the vi command.

			Macros modes:
			| Most vi commands do not have an equivalent Leo command.  Instead, a
			| series of Leo commands must be issued to emulate the vi command.
			| The Leo commands needed to emulate a vi command are placed in a
			| single @mode node.
		
		Code limitations:
			Current character:
			| Vi implementation normally use two different "current character"
			| designators depending on the current state.

				Insert state:
				| In the Insert state, a vertical bar is placed between two
				| characters to indicate where the next key will be inserted.
				| Leo's cursor is of this type.

				Command state: 
				| In the Command state, vi expects that the cursor is highlighting
				| a current character and provides commands to enter the insert
				| state or paste text either before or after that current
				| character.  Leo's vi emulation currently does not support a
				| "current character" cursor. As a result, inserting and pasting
				| before or after is replaced by inserting or pasting "at" the
				| current cursor location.  For example, the 'i' and 'a' command
				| are both mapped to enter the insert state at the current cursor
				| location.

			Conditional code execution:
			| No conditional command invocation exits.  Instead, conditional
			| branching is replace by setup commands that insure that, regardless
			| of current state, the command performs correctly.  For example,
			| Beginning-of-line command will go to previous line if called when
			| cursor is at beginning of line.  Vi requires that '|' always goes to
			| beginning of current line.  Problme is solved by issueing
			| forward-char command to insure cursor is moved off of the beginning
			| of the line before beginning-of-line command is issued.

			Commands requesting user input:
			| Commands getting user input must be the last command within the
			| mode.  See "Commands getting user input" in Problems section below.

			Edit headings using modes:
			| Commands modifying or selecting headline text do not work correctly
			| within a mode.  See "Editing headlines within modes" in Problems
			| section below.  This eliminates accurate implementation of vi's
			| delete/change/substitute/yank object commands.  Instead, the
			| commands are modified to only select text.

	General Commands:
	| The following commands are independent of the current pane in focus.

		State change commands
			      i : Change state to insert from command state
			 Ctrl-[ : Change state to command from insert state
				 Esc : Change state to command from insert state

		Miscellaneous commands
			      : : Enter vi's command line
			 Ctrl-: : Enter Leo's command line
			 Ctrl-s : Save '.leo' file
			      u : Undo previous command
			 Ctrl-r : Redo previous command
			    Tab : Toggle focus between Outline and Body pane
			      = : Simulate double-click on current node's icon box
			  Alt-G : Go to specified line number (relative to derived file)

Outline Pane
	Outline Features:
	| Outline navigation and manipulation are mapped to keys using vi's text
	| navigation key mapping as a guide.  Outline navigation commands can also
	| be invoked while in the body pane's command mode.  This reduces the
	| keystrokes necessary to make changes to the body text of multiple nodes.
	| Node headline editing uses vi's line editing key mapping (Limited by the
	| "Headline editing in modes" problem).

	Outline Commands:
	| The following commands are supported when in a node's headline's command
	| mode.
		State change commands
			 Ctrl-i : Change state to command from grayed state
			 return : Change state to command from insert state
			 Ctrl-] : Change state to grayed from command state

		Miscellaneous commands
			      : : Enter vi's command line
			 Ctrl-: : Enter Leo's command line
			 Ctrl-s : Save '.leo' file
			      u : Undo previous command
			 Ctrl-r : Redo previous command
			    Tab : Toggle focus between Outline and Body pane
			  Alt-G : Go to specified line number (relative to derived file)

		Go to node commands
			Ctrl-h, Ctrl-j, Ctrl-k, Ctrl-l : Go to: parent, up, down, child node
			                                 (also Ctrl-arrows)
				| These keys can also be used while in the command state of the
				| node's body.  The commands return the focus back to the headline
				| or body depending on the location of the cursor when the key was
				| pressed.
				| 
				| Ctrl-h closes any sub-nodes of the node.  If no sub-nodes
				| are visible, the node's parent becomes the current node.
				| 
				| Ctrl-l opens any sub-nodes of the node.  If sub-nodes are
				| already visible, the node's first child becomes the current node.
			 Ctrl-G : Go to the outline's last node
			     gg : Go to the outline's first node

		Scroll commands
			 Ctrl-y : Scroll outline up one line   (also Ctrl-b, Ctrl-u)
			 Ctrl-e : Scroll outline down one line (also Ctrl-f, Ctrl-d)
		
		Move node commands
			Shift-Ctrl-h, Shift-Ctrl-l : Move node: left (promote), Right (demote)
			Shift-Ctrl-j, Shift-Ctrl-k : Move node: up, down

		Mark node commands
			      m : Mark / unmark the current node
			 Ctrl-m : Go to next marked node
			  Alt-m : Clear all marked nodes

		Transclude node commands (Clone)
		| Given that 'c' is used by vi to change text and that "Transclusion"
		| provides a better descriptor for the ability to include the same text
		| into multiple documents (see Wikipedia's "Transclusion" article), Leo's
		| clone related commands have been mapped to 't'.
			      t : Transclude node (clone node)
			 Ctrl-t : Go to next transcluded node (go to next cloned node)

		Select headline text
		| Due to the "Editing headlines within modes" problem, the delete, yank,
		| and change text object commands are not available.  Instead, commands
		| are provided to facilitate the selection of text which the user can
		| follow with 'i', 'x', or 'y' to change, delete, or yank the text.
					s : Select current character
			      W : Select text to the end of the current word
			      B : Select text to the beginning of the current word
			Shift-D : Select to end of line

		Delete/Yank/Paste node commands
		    Ctrl-x : Delete current node
		    Ctrl-c : Yank current node
		    Ctrl-v : Paste current node

		Move cursor comamnds
					w : Go to next word
					b : Go to previous word
					e : Go to endo of word
				   | : Go to Beginning of line
					$ : Go to end of line

		Find commands
			      f : Find character

	Outline Patches:
	| The following patch is needed for the vi outline commands to work.
		Prevent "--&gt; exit-named-modes" from switching focus to the Body pane.
		| Remove the call to "deleteTab" (see "Focus to Body pane" problem).
		| Don't create "Mode" tabs by not using "--&gt; mode-help" commands (see
		| "Displaying mode help" problem).
			Function: endMode (File: core\leoKeys.py)
			| Remove the following line:
			|     c.frame.log.deleteTab('Mode')

Body Pane
	| All vi text navigation and editing functionality has been implemented
	| except for the following.
	Missing commands:
	| The following vi commands are NOT supported in the Body pane.
		'cf&lt;char&gt;' - Change up to and including specified character
			| Implementation requires commands after the find-character command.
			| see "Commands getting user input" problem.
		'ct&lt;char&gt;' - Change up to specified character
			| Implementation requires commands after the find-character command.
			| see "Commands getting user input" problem.
		'yf&lt;char&gt;' - Yank up to and including specified character
			| Implementation requires commands after the find-character command.
			| see "Commands getting user input" problem.
		'yt&lt;char&gt;' - Yank up to specified character
			| Implementation requires commands after the find-character command.
			| see "Commands getting user input" problem.
		't&lt;char&gt;' - Move cursor to character before specified character
			| Implementation requires "back-char" command after "find-character".
			| see "Commands getting user input" problem.
		'r' - Replace a single character with a single character
			| Leo does not provide commands to support this function.
		'?' - Search backwards
			| See "Binding '?' key" problem
		'1G' - Use 'gg' instead (Vim method)
			| See "Binding numeric keys" problem
		'0' - Use '-' instead (Vim method)
			| See "Binding numeric keys" problem
		'bksp' - Move one character to the left
			| See "Binding 'bksp' key" ploblem
		'm&lt;label&gt;', '`', ''' - Mark text location and goto marked location
			| Leo does not provide commands that support the concept of marking a
			| location within text.
		'~' - Toggle character's case
			| See "Toggle case" problem
		'.' - Repeat last command
			| Partial solution would be to have each mode bind itself to the '.'
			| key.
		&lt;n&gt;&lt;cmd&gt; - Perform command 'n' number of times
			| Solution may exist in use of existing 'numbercommand' support in
			| Leo.
		&lt;cmd&gt;&lt;n&gt;&lt;object&gt; - Performing the command on/upto n'th object
			| Leo does not provide support for specifying any n'th instance of a
			| object.  Specific modes could be created to support n'th instances
			| of 2 through 9 if numeric key bindings were supported (see "Binding
			| numeric keys" problem).
		'Ctrl-u, 'Ctrl-d' - Move cursor up/down lines (defaults to 1/2 screen)
			| Leo does not provide commands to support this function.
		'Ctrl-e, 'Ctrl-y' - Slide buffer up/down (leaving cursor on same line)
			| Leo does not provide commands to support this function.
		'z', 'z.', 'z-' - Slide buffer to put current line at top,middle,bottom
			| Leo does not provide commands to support this function.
	Patches:
	| The following patches are recommended to enhance vi functionality within
	| the body pane.

		Enable search for 'space' character in text
		| Commands 'f&lt;char&gt;' and 'dt&lt;char&gt;' should support specifying space
		| character.
			Function: zapToCharacter (File: leoEditCommands.py)
			| Remove the following line:
			| 		if ch.isspace(): return

		Eliminate delete-word from removing trailing white space
		| delete-word discards trailing spaces instead of placing them in the
		| clipboard resulting in subsequent paste operations only pasting the
		| alpha-numeric portion.  The following patch does not discard the
		| trailing spaces.
			Function: killWord (File: leoEditCommands.py)
			| Remove the following line:
			|     self.killWs(event)

		Put zapped text to clipboard
		| To save a copy of text deleted using the zap-to-Character command to
		| the clipboard make the following change:
			Function: zapToCharacter (File: leoEditCommands.py)
			| Add the following line after sel.addToKillBuffer(s[ins:i])
			|     g.app.gui.replaceClipboardWith(s[ins:i])

Problems

	Binding numeric keys:
	| Mapping a number to a command or mode prevents the number from being
	| entered as text while in the insert state.

	Binding '?' key:
	| No response when key pressed.

	Binding 'bksp' key:
	| Binding 'bksp' key to back-char to move back a character in command mode
	| prevents 'bksp' from deleting characters in text edit mode.

	Commands getting user input:
	| Commands requesting user input must be the last command executed.  These
	| commands include: find-character and zap-to-character.

	Editing headlines within modes:
	| Text editing commands do not work within modes assigned to outline key
	| mappings.

	Undo command:
	| The 'undo' command sometimes does not work when returning to a node's
	| command mode.  Moving to another node fixes the problem.(i.e. delete-char, set-insert-state, ...)

	Matching bracket command:
	| Performs bracket matching on Body text when in node's headline command
	| state.

	Word definition:
	| "Word" related commands determine boundries of a word differently.

	Toggle case:
	| Leo provides support for switching to upper or lower case but no method |
	| exists to toggle between cases.

	Find settings
	| Leo commands only allow toggling of search settings.  If specific "set"
	| and "clear" search setting commands were available then searches from the
	| body pane could be restricted to the body pane and searches from the
	| outline could be restricted to the outline.
	Forward and backward sentences:
	| Leo's forwardSentenceHelper and backSentenceHelper functions do not stop
	| at empty lines nor do they skip over periods within words nor do they stop
	| at sentences ending in non-periods nor do they stop at the end or
	| beginning of the buffer.

	Focus to Body pane:
	| Leo functions exist which unconditionally set focus to the body pane
	| regardless of the active pane.
		deleteTab() function:
			| Issuing "--&gt; exit-named-mode" calls "endMode" function which calls
			| "c.frame.log.deleteTab('Mode')" function which sets the focus to the
			| body pane.  

	Displaying mode help:
	| The "--&gt; mode-help" command displays all mapped keys using a capitol
	| letter regardless of the actual binding.
		Recommendations:
		| To better support narrow tab cards, display the mode's label without
		| the "enter-" and "-mode" text and place key label before mode label.
		| Results in change from:
		|                enter-vi-delete-line-mode D
		|    enter-vi-delete-to-begin-of-word-mode B 
		| to:
		|    D : vi-delete-line
		|    B : vi-delete-to-begin-of-word

Notes:
	Yank vs. Yank
	| A vi "yank" operation copies the selected text TO the clipboard.
	| A Leo "yank" operation inserts text FROM the clipboard.

	copy-text in modes:
	| Leo's copy-text does not work within a mode.  As a result, all "copy to
	| clipboard" capability is being implemented using kill-&lt;object&gt; command
	| followed by a "yank" command.

	paste-text in modes:
	| paste-text in modes does not work.  Use Leo's "yank" instead.

	delete-node does not copy node to clipboard:
	| Issue copy-node command followed by delete-node

Vim Modeline (used by Vim for file specific settings)
	| vim: noet filetype=otl foldcolumn=1
</t>
<t tx="ekr.20080604104453.4"></t>
<t tx="ekr.20080604104453.5">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

command:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="ekr.20080604104453.6">This allows the newline character to switch from the outline pane to the body pane.</t>
<t tx="ekr.20080604104453.7"></t>
<t tx="ekr.20080604104453.8"></t>
<t tx="ekr.20080604104453.9"></t>
<t tx="ekr.20080604104453.10"># List of commands available for key binding.
# Put the contents of this file as the first
#     @shortcuts node under @Keys to disable
#     all keys defined in leoSettings.leo
#--------------------------------------------
abbrev-mode                            = None
abort-edit-headline                    = None
about-leo                              = None
activate-cmds-menu                     = None #Newly found
activate-edit-menu                     = None #Newly found
activate-file-menu                     = None #Newly found
activate-help-menu                     = None #Newly found
activate-outline-menu                  = None #Newly found
activate-plugins-menu                  = None #Newly found
activate-window-menu                   = None #Newly found
add-comments                           = None
add-editor                             = None #Newly found
add-global-abbrev                      = None
add-space-to-lines                     = None #Newly found
add-tab-to-lines                       = None #Newly found
advertised-undo                        = None
# append-next-kill                       = None
append-to-buffer                       = None
append-to-register                     = None
# apply-settings                         = None
auto-complete                          = None
back-char                              = None
back-char-extend-selection             = None
back-paragraph                         = None
back-paragraph-extend-selection        = None
back-sentence                          = None
back-sentence-extend-selection         = None
back-to-indentation                    = None
back-word                              = None
back-word-extend-selection             = None
backward-delete-char                   = None
backward-find-character                = None #Newly found
backward-find-character-extend-selection = None #Newly found
backward-kill-paragraph                = None
backward-kill-sentence                 = None
backward-kill-word                     = None
beginning-of-buffer                    = None
beginning-of-buffer-extend-selection   = None
beginning-of-line                      = None
beginning-of-line-extend-selection     = None
call-last-keyboard-macro               = None
capitalize-word                        = None
cascade-windows                        = None
center-line                            = None
center-region                          = None
change                                 = None
change-all                             = None
change-then-find                       = None
check-all-python-code                  = None
check-outline                          = None
check-python-code                      = None
# check-spelling                         = None
clean-all-lines                        = None #Newly found
clean-lines                            = None #Newly found
clear-extend-mode                      = None
clear-kill-ring                        = None
clear-recent-files                     = None
clear-rectangle                        = None
clear-selected-text                    = None #Newly found
click-click-box                        = None #Newly found
click-headline                         = None #Newly found
click-icon-box                         = None #Newly found
clone-node                             = None
close-rectangle                        = None
close-window                           = None
contract-all                           = None
contract-body-pane                     = None #Newly found
contract-log-pane                      = None #Newly found
contract-node                          = None
contract-or-go-left                    = None
contract-outline-pane                  = None #Newly found
contract-pane                          = None #Newly found
contract-parent                        = None
convert-all-blanks                     = None
convert-all-tabs                       = None
convert-blanks                         = None
convert-tabs                           = None
copy-node                              = None
copy-rectangle-to-register             = None
copy-text                              = None
# copy-to-buffer                         = None
copy-to-register                       = None
count-region                           = None
cut-text                               = None
cycle-all-focus                        = None #Newly found
cycle-editor-focus                     = None #Newly found
cycle-focus                            = None
dabbrev-completion                     = None
dabbrev-expands                        = None
de-hoist                               = None
# delete-all-icons                       = None #Newly found
delete-char                            = None
delete-comments                        = None
delete-editor                          = None #Newly found
delete-file                            = None
delete-first-icon                      = None #Newly found
delete-indentation                     = None
delete-last-icon                       = None #Newly found
delete-node                            = None
# delete-node-icons                      = None #Newly found
delete-rectangle                       = None
delete-spaces                          = None
demote                                 = None
diff                                   = None
digit-argument                         = None
do-nothing                             = None #Newly found
double-click-headline                  = None #Newly found
double-click-icon-box                  = None #Newly found
downcase-region                        = None
downcase-word                          = None
dump-outline                           = None
edit-headline                          = None
end-edit-headline                      = None
end-kbd-macro                          = None
end-of-buffer                          = None
end-of-buffer-extend-selection         = None
end-of-line                            = None
end-of-line-extend-selection           = None
enter-destination-mode                 = None
equal-sized-panes                      = None
escape                                 = None
eval-expression                        = None
exchange-point-mark                    = None
execute-script                         = None
exit-leo                               = None
exit-named-mode                        = None
expand-all                             = None
expand-and-go-right                    = None
expand-body-pane                       = None #Newly found
expand-log-pane                        = None #Newly found
expand-next-level                      = None
expand-node                            = None
expand-or-go-right                     = None
expand-outline-pane                    = None #Newly found
expand-pane                            = None #Newly found
expand-prev-level                      = None
# expand-region-abbrevs                  = None
expand-to-level-1                      = None
expand-to-level-2                      = None
expand-to-level-3                      = None
expand-to-level-4                      = None
expand-to-level-5                      = None
expand-to-level-6                      = None
expand-to-level-7                      = None
expand-to-level-8                      = None
expand-to-level-9                      = None
export-headlines                       = None
extend-to-line                         = None #Newly found
extend-to-paragraph                    = None
extend-to-sentence                     = None #Newly found
extend-to-word                         = None #Newly found
extract                                = None
extract-names                          = None
extract-section                        = None
fill-paragraph                         = None
fill-region                            = None
fill-region-as-paragraph               = None
find-character                         = None
find-character-extend-selection        = None #Newly found
find-next                              = None
find-prev                              = None
find-word                              = None #Newly found
find-word-in-line                      = None #Newly found
flatten-outline                        = None
flush-lines                            = None
focus-to-body                          = None
focus-to-log                           = None
focus-to-minibuffer                    = None
focus-to-tree                          = None
forward-char                           = None
forward-char-extend-selection          = None
forward-end-word                       = None #Newly found
forward-end-word-extend-selection      = None #Newly found
forward-paragraph                      = None
forward-paragraph-extend-selection     = None
forward-sentence                       = None
forward-sentence-extend-selection      = None
forward-word                           = None
forward-word-extend-selection          = None
full-command                           = None
fully-expand-body-pane                 = None #Newly found
fully-expand-log-pane                  = None #Newly found
fully-expand-outline-pane              = None #Newly found
fully-expand-pane                      = None #Newly found
go-back                                = None
go-forward                             = None
goto-char                              = None
goto-first-node                        = None
goto-first-sibling                     = None
goto-global-line                       = None
goto-last-node                         = None
goto-last-sibling                      = None
goto-last-visible-node                 = None
goto-line                              = None
goto-line-number                       = None
goto-next-changed                      = None
goto-next-clone                        = None
goto-next-marked                       = None
goto-next-node                         = None
goto-next-sibling                      = None
goto-next-visible                      = None
goto-parent                            = None
goto-prev-node                         = None
goto-prev-sibling                      = None
goto-prev-visible                      = None
help-for-minibuffer                    = None
hide-body-pane                         = None #Newly found
hide-find-tab                          = None
hide-log-pane                          = None #Newly found
hide-mini-buffer                       = None
hide-outline-pane                      = None #Newly found
hide-pane                              = None #Newly found
hide-spell-tab                         = None
hoist                                  = None
how-many                               = None
iconify-frame                          = None
import-at-file                         = None
import-at-root                         = None
import-cweb-files                      = None
import-derived-file                    = None
import-flattened-outline               = None
import-noweb-files                     = None
increment-register                     = None
# indent-for-tab                         = None
indent-region                          = None
indent-relative                        = None
indent-rigidly                         = None
indent-to-comment-column               = None
insert-body-time                       = None
insert-child                           = None
insert-file                            = None
insert-headline-time                   = None
insert-icon                            = None #Newly found
insert-keyboard-macro                  = None
insert-newline                         = None
insert-node                            = None
insert-parentheses                     = None
insert-register                        = None
# insert-to-buffer                       = None
inverse-add-global-abbrev              = None
isearch-backward                       = None
isearch-backward-regexp                = None
isearch-forward                        = None
isearch-forward-regexp                 = None
jump-to-register                       = None
keep-lines                             = None
keyboard-quit                          = None
kill-all-abbrevs                       = None
kill-buffer                            = None
kill-line                              = None
kill-paragraph                         = None
kill-rectangle                         = None
kill-region                            = None
kill-region-save                       = None
kill-sentence                          = None
kill-word                              = None
line-number                            = None
list-abbrevs                           = None
list-buffers                           = None
list-buffers-alphabetically            = None
make-directory                         = None
mark                                   = None
mark-changed-items                     = None
mark-changed-roots                     = None
mark-clones                            = None
mark-subheads                          = None
match-brackets                         = None
minimize-all                           = None
mode-help                              = None
move-lines-down                        = None #Newly found
move-lines-up                          = None #Newly found
move-outline-down                      = None
move-outline-left                      = None
move-outline-right                     = None
move-outline-up                        = None
move-past-close                        = None
move-past-close-extend-selection       = None
name-last-kbd-macro                    = None
negative-argument                      = None
new                                    = None
newline-and-indent                     = None
next-line                              = None
next-line-extend-selection             = None
number-command                         = None
number-command-0                       = None
number-command-1                       = None
number-command-2                       = None
number-command-3                       = None
number-command-4                       = None
number-command-5                       = None
number-command-6                       = None
number-command-7                       = None
number-command-8                       = None
number-command-9                       = None
# number-to-register                     = None
open-compare-window                    = None
open-find-tab                          = None
open-leoDocs-leo                       = None
open-leoPlugins-leo                    = None
open-leoSettings-leo                   = None
open-offline-tutorial                  = None
open-online-home                       = None
open-online-tutorial                   = None
open-outline                           = None
open-python-window                     = None
open-rectangle                         = None
open-scripts-leo                       = None
open-spell-tab                         = None
open-with                              = None
outline-to-cweb                        = None
outline-to-noweb                       = None
paste-node                             = None
paste-retaining-clones                 = None
paste-text                             = None
point-to-register                      = None
prepend-to-buffer                      = None
prepend-to-register                    = None
pretty-print-all-python-code           = None
pretty-print-python-code               = None
previous-line                          = None
previous-line-extend-selection         = None
print-bindings                         = None
print-commands                         = None
promote                                = None
query-replace                          = None
query-replace-regex                    = None
quick-command                          = None
re-search-backward                     = None
re-search-forward                      = None
read-abbrev-file                       = None
read-at-file-nodes                     = None
read-outline-only                      = None
redo                                   = None
reformat-paragraph                     = None
remove-blank-lines                     = None
remove-directory                       = None
remove-sentinels                       = None
remove-space-from-lines                = None #Newly found
remove-tab-from-lines                  = None #Newly found
rename-buffer                          = None
repeat-complex-command                 = None
replace-string                         = None
resize-to-screen                       = None
reverse-region                         = None
reverse-sort-lines                     = None #Newly found
reverse-sort-lines-ignoring-case       = None #Newly found
revert                                 = None
# save-buffer                          = None
save-buffers-kill-leo                  = None
save-file                              = None
save-file-as                           = None
save-file-to                           = None
scroll-down                            = None
scroll-down-extend-selection           = None
scroll-outline-down-line               = None #Newly found
scroll-outline-down-page               = None #Newly found
scroll-outline-left                    = None #Newly found
scroll-outline-right                   = None #Newly found
scroll-outline-up-line                 = None #Newly found
scroll-outline-up-page                 = None #Newly found
scroll-up                              = None
scroll-up-extend-selection             = None
search-again                           = None
search-backward                        = None
search-forward                         = None
search-with-present-options            = None
select-all                             = None
# self-insert-command                    = None #Newly found
set-colors                             = None
set-command-state                      = None
set-comment-column                     = None
set-extend-mode                        = None
set-fill-column                        = None
set-fill-prefix                        = None
set-find-everywhere                    = None
set-find-node-only                     = None
set-find-suboutline-only               = None
set-font                               = None
set-insert-state                       = None
# set-mark-command                       = None
set-overwrite-state                    = None
settings                               = None
shell-command                          = None
shell-command-on-region                = None
show-colors                            = None
show-fonts                             = None
show-invisibles                        = None
show-mini-buffer                       = None
simulate-begin-drag                    = None #Newly found
simulate-end-drag                      = None #Newly found
sort-children                          = None
sort-columns                           = None
sort-fields                            = None
sort-lines                             = None
sort-lines-ignoring-case               = None #Newly found
sort-siblings                          = None
spell-change                           = None
spell-change-then-find                 = None
spell-find                             = None
spell-ignore                           = None
split-line                             = None
start-kbd-macro                        = None
string-rectangle                       = None
suspend                                = None
switch-to-buffer                       = None
tabify                                 = None
tangle                                 = None
tangle-all                             = None
tangle-marked                          = None
toggle-active-pane                     = None
toggle-angle-brackets                  = None
toggle-extend-mode                     = None
toggle-find-ignore-case-option         = None
toggle-find-in-body-option             = None
toggle-find-in-headline-option         = None
toggle-find-mark-changes-option        = None
toggle-find-mark-finds-option          = None
toggle-find-regex-option               = None
toggle-find-reverse-option             = None
toggle-find-word-option                = None
toggle-find-wrap-around-option         = None
toggle-mini-buffer                     = None
toggle-split-direction                 = None
transpose-chars                        = None
transpose-lines                        = None
transpose-words                        = None
undo                                   = None
unindent-region                        = None
universal-argument                     = None
unmark-all                             = None
untabify                               = None
untangle                               = None
untangle-all                           = None
untangle-marked                        = None
upcase-region                          = None
upcase-word                            = None
view-lossage                           = None
view-register                          = None
weave                                  = None
what-line                              = None
word-search-backward                   = None
word-search-forward                    = None
write-abbrev-file                      = None
write-at-file-nodes                    = None
write-dirty-at-file-nodes              = None
write-missing-at-file-nodes            = None
write-outline-only                     = None 
yank                                   = None
yank-pop                               = None
yank-rectangle                         = None
zap-to-character                       = None
</t>
<t tx="ekr.20080604104453.11"># vi key bindings - Outline pane #
 ################################

#Miscellaneous
#--------------------------------
enter-tree-command-line-mode     ! tree = :
full-command                     ! tree = Ctrl-:   #Enter Leo's command line
enter-tree-save-file-mode        ! tree = Ctrl-s
enter-tree-undo-mode             ! tree = u
enter-tree-redo-mode             ! tree = Ctrl-r
enter-focus-to-tree-mode         ! body = Tab
enter-focus-to-body-mode         ! tree = Tab
enter-tree-double-click-node-mode   ! tree = =
goto-global-line                 ! tree = Alt-g    #Goto line (in derived file)

#State change commands
#--------------------------------
set-insert-state                 ! tree = i        #To insert from command state
edit-headline                    ! tree = Ctrl-i   #To command from grayed state
set-command-state                ! tree = Ctrl-[   #To command from insert state
set-command-state                ! tree = Esc      #To command from insert state
set-command-state                ! tree = return   #To command from insert state
end-edit-headline                ! tree = Ctrl-]   #To grayed from command state

#Yank text commands
#--------------------------------
end-of-line-extend-selection     ! tree = Shift-y  #Select to end of line
copy-text                        ! tree = Alt-y
toggle-extend-mode               ! tree = v        #select characters on/off

#Change text commands
#--------------------------------
end-of-line-extend-selection     ! tree = Shift-c  #Select to end of line
enter-tree-select-object-mode    ! tree = c

#Substitute text commands
#--------------------------------
forward-char-extend-selection    ! tree = s
select-all                       ! tree = Shift-s

#Delete text commands
#--------------------------------
#enter-tree-delete-text-object-mode ! tree = d  #Modes don't work in tree
end-of-line-extend-selection        ! tree = Shift-d  #Select to end of line
                                                         #Should use Shift-y
#enter-tree-select-object-mode   ! tree = d
###end-of-line-extend-selection     ! tree = Shift-d  #Select to end of line
#enter-tree-delete-to-end-of-line-mode ! tree = Shift-d  #modes not working
delete-char                      ! tree = x
delete-char                      ! tree = delete

#Scroll commands
#--------------------------------
scroll-outline-up-line           ! tree = Ctrl-b   #Should scroll full window
scroll-outline-down-line         ! tree = Ctrl-f

scroll-outline-up-line           ! tree = Ctrl-u   #Should scroll 1/2 window
scroll-outline-down-line         ! tree = Ctrl-d

scroll-outline-up-line           ! tree = Ctrl-y   #Scroll 1 line
scroll-outline-down-line         ! tree = Ctrl-e

#Move within line commands
#--------------------------------
forward-char                     ! tree = RtArrow
forward-char                     ! tree = l
back-char                        ! tree = LtArrow
back-char                        ! tree = h

forward-word                     ! tree = w
forward-word-extend-selection    ! tree = Shift-w  #no before/after support.
back-word                        ! tree = b
back-word-extend-selection       ! tree = Shift-b  #no before/after support.
forward-end-word                 ! tree = e        #no before/after support.
forward-end-word-extend-selection   ! tree = Shift-e

beginning-of-line                ! tree = | #beginning-of-line (Vi style)
end-of-line                      ! tree = $ #end-of-line (Vi style)

match-brackets                   ! tree = % #Go to matching bracket

find-character                   ! tree = f
backward-find-character          ! tree = Shift-f

#Move within tree commands
#--------------------------------
enter-tree-goto-mode                ! tree = g        #gg command (go to first)
enter-tree-goto-last-node-mode      ! tree = Shift-g

enter-tree-goto-next-visible-mode   ! tree = Ctrl-j
enter-tree-goto-next-visible-mode   ! tree = DnArrow
enter-tree-goto-next-visible-mode   ! tree = Ctrl-DnArrow
enter-body-goto-next-visible-mode   ! body = Ctrl-j
enter-body-goto-next-visible-mode   ! body = Ctrl-DnArrow

enter-tree-goto-prev-visible-mode   ! tree = Ctrl-k
enter-tree-goto-prev-visible-mode   ! tree = UpArrow
enter-tree-goto-prev-visible-mode   ! tree = Ctrl-UpArrow
enter-body-goto-prev-visible-mode   ! body = Ctrl-k
enter-body-goto-prev-visible-mode   ! body = Ctrl-UpArrow

enter-tree-contract-or-go-left-mode ! tree = Ctrl-h
enter-tree-contract-or-go-left-mode ! tree = Ctrl-LtArrow
enter-body-contract-or-go-left-mode ! body = Ctrl-h
enter-body-contract-or-go-left-mode ! body = Ctrl-LtArrow
enter-tree-expand-and-go-right-mode ! tree = Ctrl-l
enter-tree-expand-and-go-right-mode ! tree = Ctrl-RtArrow
enter-body-expand-and-go-right-mode ! body = Ctrl-l
enter-body-expand-and-go-right-mode ! body = Ctrl-RtArrow

search-forward                      ! tree = /
#search-backward                    ! tree = question #Binding '?' doesn't work
find-next                           ! tree = n
find-prev                           ! tree = Shift-n

#Node create/delete commands
#--------------------------------
insert-node                      ! tree = Ctrl-o

enter-tree-copy-node-mode        ! tree = Ctrl-c
enter-tree-delete-node-mode      ! tree = Ctrl-x
enter-tree-paste-node-mode       ! tree = Ctrl-v

#Move nodes
#--------------------------------
enter-tree-move-outline-down-mode   ! tree = Ctrl-Shift-j
enter-tree-move-outline-left-mode   ! tree = Ctrl-Shift-h
enter-tree-move-outline-right-mode  ! tree = Ctrl-Shift-l
enter-tree-move-outline-up-mode     ! tree = Ctrl-Shift-k

enter-tree-move-outline-down-mode   ! tree = Ctrl-Shift-DnArrow
enter-tree-move-outline-left-mode   ! tree = Ctrl-Shift-LtArrow
enter-tree-move-outline-right-mode  ! tree = Ctrl-Shift-RtArrow
enter-tree-move-outline-up-mode     ! tree = Ctrl-Shift-UpArrow

#Transclude nodes commands
#--------------------------------
enter-tree-clone-node-mode             ! tree = t        #Clone current node
enter-tree-goto-next-clone-node-mode   ! tree = Ctrl-t

#Mark nodes commands
#--------------------------------
enter-tree-mark-node-mode              ! tree = m
enter-tree-goto-next-marked-node-mode  ! tree = Ctrl-m
enter-tree-unmark-all-nodes-mode       ! tree = Alt-m
</t>
<t tx="ekr.20080604104453.12">#Simulate a left mouse button double click on the current node
#Bind: =

--&gt; double-click-icon-box
--&gt; edit-headline</t>
<t tx="ekr.20080604104453.13">--&gt; save-file
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.14">#Enter vi's command line
#Bind: :

--&gt; set-silent-mode
#--&gt; mode-help

enter-tree-command-revert-mode = e
enter-tree-command-save-mode = w
enter-tree-command-quit-mode = q
</t>
<t tx="ekr.20080604104453.15">#Reload current file
#Bind: :e&lt;cr&gt;
#Note: Vi command is :e!&lt;cr&gt;.
#      '!' not used since Leo prompts to save file changes.

revert = return</t>
<t tx="ekr.20080604104453.16">#Save current file (and maybe quit)
#Bind: :w[q]&lt;cr&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-tree-save-file-mode = return
enter-tree-command-save-quit-mode = q</t>
<t tx="ekr.20080604104453.17">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

--&gt; save-file
--&gt; exit-leo
</t>
<t tx="ekr.20080604104453.18">#Exit Leo
#Bind: :q&lt;cr&gt;

exit-leo = return</t>
<t tx="ekr.20080604104453.19">#Yank &lt;obj&gt; (Leo's copy-text)
#Bind: y&lt;obj&gt;
#Note: yank-to-character not supported.  Can not issue yank command.
      #Leo's zap-to-character must be last command (needs user input)
      #Issue 'dt&lt;char&gt;' followed by 'p'
      
--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-select-line-mode                         = y
enter-vi-select-to-beginning-of-next-word-mode    = w
enter-vi-select-to-beginning-of-current-word-mode = b</t>
<t tx="ekr.20080604104453.20">#Yank current line
#Bind: yy
#Note: Problem yanking empty line. Also yanks line below it.
#Note: Problem yanking last line.  Does not yank a trailing &lt;cr&gt;

#--&gt; set-silent-mode

#vi-delete-line macro
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
#--&gt; kill-region                     #Remove text, place in paste buffer

#Put text back
#--&gt; yank
#Clear selection
#--&gt; back-char
#--&gt; forward-char

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.21">#Yank to beginning of next word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to beginning of next word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.22">#Yank to beginning of current word.
#Bind: yb
#Note: Travels past beginning of line.
#Note: AlphaNumeric word in contact with a non-alphanumeric word
      #is not handled correctly. Can cause text to be deleted or replicated.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.23">#Yank &lt;obj&gt; (Leo's copy-text)
#Bind: y&lt;obj&gt;
#Note: yank-to-character not supported.  Can not issue yank command.
      #Leo's zap-to-character must be last command (needs user input)
      #Issue 'dt&lt;char&gt;' followed by 'p'
      
--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-yank-line-mode                         = y
enter-vi-yank-to-beginning-of-next-word-mode    = w
enter-vi-yank-to-beginning-of-current-word-mode = b</t>
<t tx="ekr.20080604104453.24">#Yank current line
#Bind: yy
#Note: Problem yanking empty line. Also yanks line below it.
#Note: Problem yanking last line.  Does not yank a trailing &lt;cr&gt;

#--&gt; set-silent-mode

#vi-delete-line macro
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
#--&gt; kill-region                     #Remove text, place in paste buffer

#Put text back
#--&gt; yank
#Clear selection
#--&gt; back-char
#--&gt; forward-char

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.25">#Yank to beginning of next word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to beginning of next word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.26">#Yank to beginning of current word.
#Bind: yb
#Note: Travels past beginning of line.
#Note: AlphaNumeric word in contact with a non-alphanumeric word
      #is not handled correctly. Can cause text to be deleted or replicated.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.27">#Change &lt;object&gt;
#Bind: c&lt;obj&gt;
#Note: change-to-character not supported.  Can not issue set-insert-state.
      #Leo's zap-to-character must be last command (needs user input)
      #Emulate command by issuing 'dt&lt;char&gt;' followed by 'i'

--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-change-line-mode              = c
enter-vi-change-to-end-of-word-mode    = w
enter-vi-change-to-beginning-of-word-mode  = b</t>
<t tx="ekr.20080604104453.28">#Change to end of line
#Bind: cc
#Note: Performs vi-delete-line followed by a an insert-newline

#Note: Problem deleting empty line. Also deletes line below it.
      #Use Join function instead (key 'J')
#Note: Problem deleting last line.  Also deletes line above it.
      #Invoke undo one time to restore line ('u' key)

--&gt; set-silent-mode
--&gt; forward-char                    #Insure beginning-of-line puts cursor 
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.29">#Change to end of word
#Bind: cw
#Note: Travels past end of line.
#Note: forward-word-extend-selection not used,
#      it skips non-alphanumeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to end of word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.30">#Change to beginning of word
#Bind: cb

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.31">#Delete to the end of the current line
#Bind: D
#Note: If cursor at end of line, command will delete next line
#--&gt; focus-to-tree
#--&gt; edit-headline
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.32">#Delete to the end of the current line
#Bind: D
#Note: If cursor at end of line, command will delete next line
#--&gt; focus-to-tree
#--&gt; edit-headline
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.33">--&gt; set-silent-mode
enter-tree-delete-line-mode = d
enter-tree-delete-to-char-mode = t</t>
<t tx="ekr.20080604104453.34">#Deleted current line
#Bind: dd

--&gt; set-silent-mode
--&gt; kill-line
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.35">#Deleted to end of word
#Bind: dw
#Note: Forward-word-extend-selection it consumes all
      #trailing non-alpha-numeric characters.

--&gt; Forward-word-extend-selection
--&gt; kill-region
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.36">#Delete to beginning of word.i
#Bind: db
#Note: Deleted text not copied into paste buffer.
#Note: Travels past beginning of line.
#Note: back-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; insert-newline   #Split word so kill-word only deletes first part
--&gt; keyboard-quit
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.37">#Delete to character
#Bind: dt&lt;character&gt;
#Note: Deleted text not copied into paste buffer.
#Note: Character search not limited to current line.

--&gt; set-silent-mode
--&gt; zap-to-character
</t>
<t tx="ekr.20080604104453.38">--&gt; end-edit-headline
--&gt; copy-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.39">--&gt; end-edit-headline
--&gt; paste-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.40">--&gt; end-edit-headline
--&gt; copy-node
--&gt; delete-node         #Does not copy to clipboard
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.41">#--&gt; end-edit-headline
--&gt; focus-to-tree
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.42">#--&gt; end-edit-headline
--&gt; focus-to-body
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.43">#Undo last headline edit
#Bind: u
#Note: undo only seems to work from body pane
--&gt; focus-to-body
--&gt; undo
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.44">#Redo last headline edit
#Bind: Ctrl-r
#Note: redo only seems to work from body pane
--&gt; focus-to-body
--&gt; redo
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.45">#Go to first node
#Bind: gg 

--&gt; set-silent-mode
--&gt; goto-last-node
--&gt; edit-headline

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.46">#Go to specified node location
#Bind: g&lt;location&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-node-goto-first-node-mode     = g</t>
<t tx="ekr.20080604104453.47">#Go to first node
#Bind: gg 

--&gt; set-silent-mode
--&gt; goto-first-node
--&gt; edit-headline

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.48">--&gt; goto-next-visible
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.49">--&gt; focus-to-tree
--&gt; goto-next-visible
--&gt; edit-headline
--&gt; focus-to-body
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.50">--&gt; goto-prev-visible
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.51">--&gt; focus-to-tree
--&gt; goto-prev-visible
--&gt; edit-headline
--&gt; focus-to-body
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.52">--&gt; contract-or-go-left
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.53">--&gt; focus-to-tree
--&gt; contract-or-go-left
--&gt; edit-headline
--&gt; focus-to-body

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.54">--&gt; expand-and-go-right
--&gt; edit-headline

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.55">--&gt; focus-to-tree
--&gt; expand-and-go-right
--&gt; edit-headline
--&gt; focus-to-body

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.56">--&gt; move-outline-up
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.57">--&gt; move-outline-down
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.58">--&gt; move-outline-left
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.59">--&gt; move-outline-right
--&gt; edit-headline
--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.60">--&gt; contract-node
--&gt; edit-headline

--&gt; exit-named-mode 
</t>
<t tx="ekr.20080604104453.61">#Clone current node
#Bind: t

--&gt; clone-node
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.62">#Go to next cloned node
#Bind: ctrl-t

--&gt; goto-next-clone
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.63">#Mark current node
#Bind: m

--&gt; mark
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.64">#Go to next marked node
#Bind: ctrl-m

--&gt; goto-next-marked
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.65">#Unmark all nodes
#Bind: Alt-m

--&gt; unmark-all
--&gt; edit-headline
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.66">--&gt; set-find-node-only
--&gt; search-forward
</t>
<t tx="ekr.20080604104453.67"># vi key bindings - body pane #
 ##############################

#Miscellaneous
#--------------------------------
enter-vi-command-line-mode       ! body = :        #Enter vi's command mode
full-command                     = Ctrl-Shift-:    #Enter Leo's command mode
keyboard-quit                    ! body = Ctrl-[   #Exit insert state
keyboard-quit                    ! body = esc      #Exit insert state
double-click-icon-box            ! body = =
undo                             = u
redo                             = Ctrl-r
enter-vi-save-buffers-exit-mode  = Shift-z         #ZZ command

#Insert commands
#--------------------------------
enter-vi-insert-at-indent-mode   ! body = Shift-i  #Insert at first non-space
set-insert-state                 ! body = i        #Insert at cursor
set-insert-state                 ! body = a        #Insert at cursor
enter-vi-append-mode             ! body = Shift-a  #Insert at end of line
set-overwrite-state              ! body = Shift-r  #Overwrite text
enter-vi-new-line-below-mode     ! body = o        #Open new line below
enter-vi-new-line-above-mode     ! body = Shift-o  #Open new line above

#Change commands
#--------------------------------
enter-vi-change-to-end-of-line-mode ! body = Shift-c
enter-vi-change-mode                ! body = c        #Supports 'cd','cw','cb'

#Substitute commands
#--------------------------------
enter-vi-substitute-char-mode    ! body = s        #Replace current character
enter-vi-substitute-line-mode    ! body = Shift-s  #Replace current line

#Delete commands
#--------------------------------
enter-vi-delete-object-mode         ! body = d        #Supports 'dd','dw','db'
enter-vi-delete-to-end-of-line-mode ! body = Shift-d
delete-char                         ! body = x
delete-char                         ! body = delete

#Yank text commands
#--------------------------------
enter-vi-yank-to-end-of-line-mode   ! body = Shift-y  #Supports 'yd','yw','yb'
enter-vi-yank-mode               ! body = y        #Yank objects
copy-text                        ! body = Alt-y    #Yank selected text
toggle-extend-mode               ! body = v        #select characters-on/off

#Paste text commands
#--------------------------------
paste-text                       ! body = Shift-p  #Paste text before cursor.
paste-text                       ! body = p        #To paste a line before
                                                   #current: use '-' then 'p'
#Indent line commands
#--------------------------------
enter-vi-indent-mode             ! body = greater  #&gt;&lt;obj&gt; commands
enter-vi-deindent-mode           ! body = less     #&lt;&lt; command

#Join lines
#--------------------------------
enter-vi-join-mode               ! body = Shift-j

#Move within line commands
#--------------------------------
back-char                        ! body = h
back-char                        ! body = LtArrow
#back-char                       ! body = bksp     #Prob: Effects bksp in edit
forward-char                     ! body = l
forward-char                     ! body = RtArrow

forward-word                     ! body = w        #no before/after support.
forward-word                     ! body = Shift-w
back-word                        ! body = b        #no before/after support.
back-word                        ! body = Shift-b  #
forward-end-word                 ! body = e        #no before/after support.
forward-end-word                 ! body = Shift-e

enter-vi-beginning-of-line-mode  ! body = |
back-to-indentation              ! body = ^
enter-vi-end-of-line-mode        ! body = $
enter-vi-goto-indent-of-previous-line-mode   !body = minus

#Move within buffer commands
#--------------------------------
next-line                           ! body = j
next-line                           ! body = DnArrow
previous-line                       ! body = k
previous-line                       ! body = UpArrow

forward-sentence                    ! body = )
back-sentence                       ! body = (
enter-vi-goto-after-paragraph-mode  ! body = }
enter-vi-goto-before-paragraph-mode ! body = {

enter-vi-goto-mode                  ! body = g        #gg command
enter-vi-goto-end-of-buffer-mode    ! body = Shift-g
goto-line                           ! body = Ctrl-g

enter-vi-match-mode                 ! body = %

#Scroll commands
#--------------------------------
scroll-up                           ! body = Ctrl-b   #Scrolls full window
scroll-down                         ! body = Ctrl-f

scroll-up                           ! body = Ctrl-u   #should scroll 1/2
scroll-down                         ! body = Ctrl-d

scroll-up                           ! body = Ctrl-y   #should scroll 1 line
scroll-down                         ! body = Ctrl-e

#Window commands
#--------------------------------
enter-vim-window-commands-mode      ! body = Ctrl-w

#Find commands
#--------------------------------
find-character                      ! body = f
backward-find-character             ! body = Shift-f
search-forward                      ! body = /
search-backward                     ! body = question     #bound to '?'
find-next                           ! body = n
find-prev                           ! body = Shift-n
</t>
<t tx="ekr.20080604104453.68">#Enter vi's command line
#Bind: :

--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-command-revert-mode = e
enter-vi-command-save-mode = w
enter-vi-command-quit-mode = q
</t>
<t tx="ekr.20080604104453.69">#Reload current file
#Bind: :e&lt;cr&gt;
#Note: Vi command is :e!&lt;cr&gt;.
#      '!' not used since Leo prompts to save file changes.

revert = return</t>
<t tx="ekr.20080604104453.70">#Save current file (and maybe quit)
#Bind: :w[q]&lt;cr&gt;

--&gt; set-silent-mode
#--&gt; mode-help

save-file = return
enter-vi-command-save-quit-mode = q</t>
<t tx="ekr.20080604104453.71">#Save file and exit Leo
#Bind: :wq&lt;cr&gt;

--&gt; save-file
--&gt; exit-leo
</t>
<t tx="ekr.20080604104453.72">#Exit Leo
#Bind: :q&lt;cr&gt;

exit-leo = return</t>
<t tx="ekr.20080604104453.73">#Go to end of buffer
#Bind: G

--&gt; set-silent-mode
--&gt; end-of-buffer
--&gt; beginning-of-line   #vi puts curser in first column of last row

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.74">#Go to &lt;object&gt;
#Bind: g&lt;obj&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-goto-beginning-of-buffer-mode   ! body = g</t>
<t tx="ekr.20080604104453.75">#Go to top of buffer
#Bind: gg (Vim)
#Note: Vi key binding of '1G' not used. Bound numbers are not entered when editing.
#Note: Vim also supports 'gg' to go to top of buffer.
--&gt; set-silent-mode
--&gt; beginning-of-buffer

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.76">#Save buffers and exit Leo
#Bind: ZZ

save-buffers-kill-leo = Shift-Z</t>
<t tx="ekr.20080604104453.77">#Open new line below current line
#Bind: o

--&gt; set-silent-mode
--&gt; back-char        #Insure end-of-line stays on same line
--&gt; end-of-line
--&gt; insert-newline   #Enter insert mode

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.78">#Open new line above current line
#Bind: O

--&gt; set-silent-mode
--&gt; forward-char
--&gt; beginning-of-line
--&gt; insert-newline
--&gt; keyboard-quit
--&gt; previous-line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.79">#Append text to end of current line
#Bind: A

--&gt; set-silent-mode
--&gt; back-char        #Insure end-of-line does not move curser to new line
--&gt; end-of-line      #Delete the &lt;cr&gt;&lt;lf&gt; at the end of the line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.80">#Insert text at first non-blank character in current line
#Bind: I

--&gt; set-silent-mode
--&gt; back-char        #Move cursor to cancel any selected text.
--&gt; forward-char     #  otherwise insert will replace selected text.
--&gt; back-to-indentation #cursor to beginning of first word in line
--&gt; set-insert-state

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.81">#Delete to the end of the current line
#Bind: D
#Note: If cursor at end of line, command will delete next line

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.82">#Delete &lt;obj&gt; command
#Bind: d&lt;obj&gt;

--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-delete-line-mode = d

enter-vi-delete-to-end-of-word-mode       = w
enter-vi-delete-to-begin-of-word-mode     = b
enter-vi-delete-to-end-of-sentence-mode         = )
enter-vi-delete-to-beginning-of-sentence-mode   = (
enter-vi-delete-to-end-of-paragraph-mode        = }
enter-vi-delete-to-beginning-of-paragraph-mode  = {
enter-vi-delete-section-mode                    = %

enter-vi-delete-to-char-mode     = t</t>
<t tx="ekr.20080604104453.83">#Deleted current line
#Bind: dd
#Note: Problem deleting empty line. Also deletes line below it.
      #Use Join function instead (key 'J')
#Note: Problem deleting last line.  Also deletes line above it.
      #Invoke undo one time to restore line ('u' key)

--&gt; set-silent-mode
--&gt; forward-char                    #Insure beginning-of-line puts cursor 
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.84">#Deleted to end of word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line       #Split word (kill-word only deletes whole words)
--&gt; kill-word        #Delete to end of word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.85">#Delete to beginning of word.i
#Bind: db
#Note: Travels past beginning of line.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.86">#Delete to end of sentence
#Bind: d)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.87">#Delete to beginning of sentence
#Bind: d(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.88">#Delete to end of paragraph
#Bind: d}

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.89">#Delete to beginning of paragraph
#Bind: d{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.90">#Delete from current bracket type to its apposing bracket
#Bind: d%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

--&gt; kill-region

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.91">#Delete to character
#Bind: dt&lt;character&gt;
#Note: Character search not limited to current line.

--&gt; set-silent-mode
--&gt; zap-to-character

</t>
<t tx="ekr.20080604104453.92">#Yank text to the end of the current line
#Bind: Y

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region
--&gt; yank
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.93">#Yank &lt;obj&gt; (Leo's copy-text)
#Bind: y&lt;obj&gt;
#Note: yank-to-character not supported.  Can not issue yank command.
      #Leo's zap-to-character must be last command (needs user input)
      #Issue 'dt&lt;char&gt;' followed by 'p'
      
--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-yank-line-mode                         = y
enter-vi-yank-to-beginning-of-next-word-mode    = w
enter-vi-yank-to-beginning-of-current-word-mode = b
enter-vi-yank-to-end-of-sentence-mode           = )
enter-vi-yank-to-beginning-of-sentence-mode     = (
enter-vi-yank-to-end-of-paragraph-mode          = }
enter-vi-yank-to-beginning-of-paragraph-mode    = {
enter-vi-yank-section-mode                      = %
</t>
<t tx="ekr.20080604104453.94">#Yank current line
#Bind: yy
#Note: Problem yanking empty line. Also yanks line below it.
#Note: Problem yanking last line.  Does not yank a trailing &lt;cr&gt;

--&gt; set-silent-mode

#vi-delete-line macro
--&gt; set-silent-mode
--&gt; forward-char                    #Insure beginning-of-line puts cursor 
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode
</t>
<t tx="ekr.20080604104453.95">#Yank to beginning of next word
#Bind: dw
#Note: Travels past end of line.
#Note: Forward-word-extend-selection not used, it consumes all
#      trailing non-alpha-numeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to beginning of next word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.96">#Yank to beginning of current word.
#Bind: yb
#Note: Travels past beginning of line.
#Note: AlphaNumeric word in contact with a non-alphanumeric word
      #is not handled correctly. Can cause text to be deleted or replicated.

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char


--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.97">#Yank to end of sentence
#Bind: y)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.98">#Yank to beginning of sentence
#Bind: y(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.99">#Yank to end of paragraph
#Bind: y}

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.100">#Yank to beginning of paragraph
#Bind: y{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region
#Put text back
--&gt; yank
#Clear selection
--&gt; back-char
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.101">#Yank from current bracket type to its opposing bracket
#Bind: y%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

#Copy to clipboard (copy-text doesn't work in modes)
--&gt; kill-region
--&gt; yank

#Remove highlighting of selection
--&gt; back-char
--&gt; forward-char
--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.102">#Change to end of line
#Bind: C
#Note: If cursor at end of line, command will delete next line and enter insert mode
#      Use 'i' command instead (enter insert mode)

--&gt; set-silent-mode
--&gt; end-of-line-extend-selection
--&gt; kill-region

--&gt; set-insert-state           #Enter insert mode</t>
<t tx="ekr.20080604104453.103">#Change &lt;object&gt;
#Bind: c&lt;obj&gt;
#Note: change-to-character not supported.  Can not issue set-insert-state.
      #Leo's zap-to-character must be last command (needs user input)
      #Emulate command by issuing 'dt&lt;char&gt;' followed by 'i'

--&gt; set-silent-mode
#--&gt; mode-help

enter-vi-change-line-mode              = c
enter-vi-change-to-end-of-word-mode    = w
enter-vi-change-to-beginning-of-word-mode  = b
enter-vi-change-to-end-of-sentence-mode           = )
enter-vi-change-to-beginning-of-sentence-mode     = (
enter-vi-change-to-end-of-paragraph-mode          = }
enter-vi-change-to-beginning-of-paragraph-mode    = {
enter-vi-change-section-mode                      = %</t>
<t tx="ekr.20080604104453.104">#Change to end of line
#Bind: cc
#Note: Performs vi-delete-line followed by a an insert-newline

#Note: Problem deleting empty line. Also deletes line below it.
      #Use Join function instead (key 'J')
#Note: Problem deleting last line.  Also deletes line above it.
      #Invoke undo one time to restore line ('u' key)

--&gt; set-silent-mode
--&gt; forward-char                    #Insure beginning-of-line puts cursor 
--&gt; beginning-of-line               #   on beginning of current line
--&gt; end-of-line-extend-selection    #Select all text on current line and
--&gt; forward-char-extend-selection   #  select the &lt;cr&gt;
--&gt; kill-region                     #Remove text, place in paste buffer

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.105">#Change to end of word
#Bind: cw
#Note: Travels past end of line.
#Note: forward-word-extend-selection not used,
#      it skips non-alphanumeric characters.

--&gt; set-silent-mode
--&gt; split-line
--&gt; kill-word        #Delete to end of word, copies text into paste-buffer
--&gt; back-char        #Restore split line
--&gt; delete-char      #

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.106">#Change to beginning of word
#Bind: cb

--&gt; set-silent-mode
--&gt; split-line
--&gt; back-word        #Problem: doesn't stop at beginning of line
--&gt; kill-word
--&gt; delete-char      #Restore split line

--&gt; set-insert-state</t>
<t tx="ekr.20080604104453.107">#Delete to end of sentence
#Bind: d)

--&gt; set-silent-mode
--&gt; forward-sentence-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.108">#Delete to beginning of sentence
#Bind: d(

--&gt; set-silent-mode
--&gt; back-sentence-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.109">#Delete to end of paragraph
#Bind: d}

--&gt; set-silent-mode
--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; back-char-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.110">#Delete to beginning of paragraph
#Bind: d{

--&gt; set-silent-mode
--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; kill-region
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.111">#Change from current bracket type its matching bracket type
#Bind: c%

--&gt; set-silent-mode

--&gt; set-extend-mode
--&gt; match-brackets
--&gt; clear-extend-mode

--&gt; kill-region
--&gt; yank             #Show what text will be replaced
--&gt; set-insert-state

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.112">#Substitute character
#Bind: s

--&gt; set-silent-mode
--&gt; delete-char
--&gt; set-insert-state           #Enter insert mode</t>
<t tx="ekr.20080604104453.113">#Substitute line
#Bind: S

--&gt; set-silent-mode
--&gt; kill-line
--&gt; set-insert-state           #Enter insert mode</t>
<t tx="ekr.20080604104453.114">#Indent &lt;object&gt;
#Bind: &gt;&lt;obj&gt;

--&gt; set-silent-mode

enter-vi-indent-line-mode = greater
enter-vi-indent-to-end-of-sentence-mode = )
enter-vi-indent-to-beginning-of-sentence-mode = (
enter-vi-indent-to-end-of-paragraph-mode = }
enter-vi-indent-to-beginning-of-paragraph-mode = {
enter-vi-indent-to-beginning-of-buffer-mode = g
enter-vi-indent-to-end-of-buffer-mode = Shift-g
</t>
<t tx="ekr.20080604104453.115">#Indent line
#Bind: &gt;&gt;

--&gt; set-silent-mode
--&gt; back-to-indentation #cursor to beginning of first word in line
--&gt; forward-char-extend-selection

--&gt; indent-rigidly
--&gt; back-char
</t>
<t tx="ekr.20080604104453.116">#Indent to beginning of sentence
#Bind: &gt;(

--&gt; back-sentence-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.117">#Indent to beginning of sentence
#Bind: &gt;(

--&gt; back-sentence-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.118">#Indent to end of paragraph
#Bind: &gt;}

--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.119">#Indent to beginning of paragraph
#Bind: &gt;{

--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.120">#Indent to end of buffer
#Bind: &gt;G

--&gt; set-silent-mode
--&gt; beginning-of-buffer-extend-selection
--&gt; indent-region

</t>
<t tx="ekr.20080604104453.121">#Indent to end of buffer
#Bind: &gt;G

--&gt; set-silent-mode
--&gt; end-of-buffer-extend-selection
--&gt; indent-region

</t>
<t tx="ekr.20080604104453.122">#Unindent object
#Bind: &lt;&lt;obj&gt;

--&gt; set-silent-mode

enter-vi-deindent-less-mode = less

#No "deindent-region" command.
	#enter-vi-deindent-to-end-of-sentence-mode = )
	#enter-vi-deindent-to-beginning-of-sentence-mode = (
	#enter-vi-deindent-to-end-of-paragraph-mode = }
	#enter-vi-deindent-to-beginning-of-paragraph-mode = {
</t>
<t tx="ekr.20080604104453.123">#Unindent current line
#Bind: &lt;&lt;
#Note: Unindents to first column instead of previous tab stop

--&gt; set-silent-mode
--&gt; back-to-indentation #cursor to beginning of first word in line

--&gt; delete-indentation

</t>
<t tx="ekr.20080604104453.124">#Indent to end of paragraph
#Bind: &lt;}

--&gt; forward-paragraph-extend-selection
--&gt; back-char-extend-selection
--&gt; deindent-region
</t>
<t tx="ekr.20080604104453.125">#Indent to beginning of paragraph
#Bind: &lt;{

--&gt; back-paragraph-extend-selection
--&gt; forward-char-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.126">#Indent to end of sentence
#Bind: &lt;)

--&gt; forward-sentence-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.127">#Indent to beginning of sentence
#Bind: &lt;(

--&gt; back-sentence-extend-selection
--&gt; indent-region
</t>
<t tx="ekr.20080604104453.128">#Goto beginning of current line
#Bind: -
#Note: Vi binding of '0' not used.  Numbers not inserted during edit if bound to a key.
#Note: Vim uses '-' to move to beginning of previous line instead of current line first.

--&gt; set-silent-mode
--&gt; beginning-of-line

--&gt; exit-named-mode

</t>
<t tx="ekr.20080604104453.129">#Goto beginning of current line
#Bind: -
#Note: Vi binding of '0' not used.  Numbers not inserted during edit if bound to a key.
#Note: Vim uses '-' to move to beginning of previous line instead of current line first.

--&gt; set-silent-mode
--&gt; beginning-of-line

--&gt; exit-named-mode

</t>
<t tx="ekr.20080604104453.130">#Goto end of current line
#Bind: $

--&gt; set-silent-mode
--&gt; back-char        #Insure end-of-line does not move curser to new line
--&gt; end-of-line

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.131">#Go to end of paragraph
#Bind: }

--&gt; set-silent-mode

--&gt; forward-char        #Be sure cursor in a paragraph
--&gt; forward-paragraph
--&gt; back-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.132">#Go to beginning of paragraph
#Bind: {

--&gt; set-silent-mode

--&gt; back-char        #Be sure cursor in a paragraph
--&gt; back-paragraph
--&gt; forward-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.133">#Join next line to end of current line
#Bind: J

--&gt; set-silent-mode
--&gt; back-char        #Insure end-of-line does not move curser to new line
--&gt; end-of-line      #Delete the &lt;cr&gt;&lt;lf&gt; at the end of the line
--&gt; delete-char

--&gt; exit-named-mode

</t>
<t tx="ekr.20080604104453.134">#Goto matching bracket: () [] {}
#Bind: %

--&gt; set-silent-mode
--&gt; match-brackets
--&gt; forward-char
--&gt; back-char

--&gt; exit-named-mode</t>
<t tx="ekr.20080604104453.135">#Window commands
#Bind: Ctrl-w

add-editor           = s   #Split current window
add-editor           = n   #should open "New" blank window

cycle-editor-focus   = w   #Vim goes to next below-right window (wraps)
cycle-editor-focus   = p   #Vim goes to previous window with focus

delete-editor        = c   #Close
delete-editor        = q   #Close</t>
<t tx="ekr.20080604110043.1"></t>
</tnodes>
</leo_file>
