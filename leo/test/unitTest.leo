<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.50" body_secondary_ratio="0.70">
	<global_window_position top="95" left="571" height="929" width="1307"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070417092935"><vh>Startup</vh>
<v t="ekr.20140103103143.4095"><vh>@views</vh></v>
<v t="ekr.20101220161557.6011"><vh>@file unitTestStartup.txt</vh></v>
<v t="ekr.20041121151002"><vh>@settings</vh>
<v t="ekr.20140902101931.4478"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="ekr.20110521073115.3494"><vh>colorizer colors</vh>
<v t="ekr.20110521073115.3495"><vh>@@color keyword3_color = orange</vh></v>
<v t="ekr.20110521073115.3496"><vh>@@color keyword4_color = pink</vh></v>
</v>
<v t="ekr.20111026111009.3972"><vh>@data import_xml_tags</vh></v>
<v t="ekr.20140217055617.4231"><vh>@bool scriptingatscriptnodes = True</vh></v>
<v t="ekr.20080324133327.2"><vh>@bool allow_middle_button_paste = True</vh></v>
<v t="ekr.20101009105124.6195"><vh>@bool put_expansion_bits_in_leo_files = False</vh></v>
<v t="ekr.20051013162226"><vh>@bool test_setting = True</vh></v>
<v t="ekr.20070503064257"><vh>@bool use_chapters = True</vh></v>
<v t="ekr.20070528100318"><vh>@bool write_strips_blank_lines = False</vh></v>
<v t="ekr.20111123042627.6654"><vh>@enabled-plugins</vh></v>
<v t="ekr.20111112093605.4679"><vh>@shortcuts</vh></v>
<v t="ekr.20111124094121.3941"><vh>Empty @buttons and @commands nodes</vh>
<v t="ekr.20111124094121.3942"><vh>@buttons</vh></v>
<v t="ekr.20111124094121.3943"><vh>@commands</vh></v>
</v>
<v t="ekr.20050328101834"><vh>@page http plugin</vh>
<v t="ekr.20050328101834.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050328101834.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050328101834.3"><vh>@string rst_http_attributename = ''</vh></v>
</v>
<v t="ekr.20131111155830.4249"><vh>Vim settings</vh>
<v t="ekr.20131111155830.4250"><vh>@@@data vim-control-character-commands</vh></v>
<v t="ekr.20131111155830.4251"><vh>@data vim-command-tails</vh></v>
<v t="ekr.20131111155830.4252"><vh>@data vim-commands</vh></v>
<v t="ekr.20131111155830.4253"><vh>@data vim-motions</vh></v>
<v t="ekr.20131111155830.4254"><vh>@data vim-motion-tails</vh></v>
</v>
</v>
<v t="ekr.20111112092813.4154"><vh>@command cls</vh></v>
<v t="ekr.20140712144020.4334"><vh>@persistence</vh>
<v t="ekr.20140724164208.5573"><vh>@data:@auto root</vh>
<v t="ekr.20140724164208.5574"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20140921190548.4838"><vh>@data:#@auto</vh>
<v t="ekr.20140922054250.4786"><vh>@gnxs</vh></v>
</v>
<v t="ekr.20140921190548.4840"><vh>@data:#@auto</vh>
<v t="ekr.20140922054250.4787"><vh>@gnxs</vh></v>
</v>
</v>
<v t="ekr.20140716121225.4354"><vh>@@button print-gnx</vh></v>
</v>
<v t="ekr.20140902101931.4478"></v>
<v t="ekr.20111123042627.6654"></v>
<v t="ekr.20111112093605.4679"></v>
<v t="ekr.20051012104957"><vh>Docs</vh>
<v t="bwmulder.20050108100437.1"><vh>How to run unit tests</vh></v>
<v t="ekr.20050618061835"><vh>How to use the @test directive, by Roger Erens</vh>
<v t="ekr.20050618061835.1"><vh>Intro</vh>
<v t="ekr.20050618061835.2"><vh>@url http://www.onlamp.com/pub/a/python/2005/02/03/tdd_pyunit2.html</vh></v>
</v>
<v t="ekr.20050618061835.3"><vh>Preparations: adding a button</vh>
<v t="ekr.20050618061835.4"><vh>@@button Do @test</vh></v>
</v>
<v t="ekr.20050618061835.5"><vh>Alpha</vh>
<v t="ekr.20050618061835.6"><vh>@test my first Leo test</vh></v>
<v t="ekr.20050618061835.7"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.8"><vh>Bravo</vh>
<v t="ekr.20050618061835.9"><vh>@@test my second Leo test</vh></v>
<v t="ekr.20050618061835.10"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.11"><vh>It takes two to tango</vh>
<v t="ekr.20050618061835.6"></v>
<v t="ekr.20050618061835.9"></v>
<v t="ekr.20050618061835.12"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.13"><vh>Life gets more interesting</vh>
<v t="ekr.20050618061835.14"><vh>@@test koekiemonster.wants()</vh>
<v t="ekr.20050618061835.15"><vh>input data</vh></v>
<v t="ekr.20050618061835.16"><vh>expected result</vh></v>
</v>
<v t="ekr.20050618061835.17"><vh>output on the console</vh></v>
<v t="ekr.20050618061835.18"><vh>output on the console using print statements</vh></v>
</v>
<v t="ekr.20050618061835.19"><vh>How about @suite?</vh></v>
<v t="ekr.20050618061835.20"><vh>Final remarks</vh></v>
</v>
</v>
<v t="ekr.20100123172713.5114"><vh>Scripts</vh>
<v t="ekr.20100102164959.5088"><vh>Count pages</vh></v>
<v t="ekr.20100123172713.5116"><vh>Clean all tnodeLists</vh></v>
<v t="ekr.20070217065840"><vh>Scripts that make unit tests</vh>
<v t="ekr.20070217065840.1"><vh>@@command make-test @key = Alt-5</vh></v>
<v t="ekr.20070217065840.2"><vh>@@command do-before @key = Alt-6</vh>
<v t="ekr.20070217065840.3"><vh>getSel</vh></v>
<v t="ekr.20070217065840.4"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.5"><vh>putSelectionInHeadline</vh></v>
</v>
<v t="ekr.20070217065840.6"><vh>@@command do-after @key = Alt-7</vh>
<v t="ekr.20070217072822"><vh>getSel</vh></v>
<v t="ekr.20070217065840.8"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.9"><vh>putSelectionInHeadline</vh></v>
</v>
</v>
<v t="ekr.20070113145100"><vh>Create chinese folder</vh></v>
<v t="ekr.20071113140035"><vh>Find unique @ test nodes</vh></v>
<v t="ekr.20091206090247.5060"><vh>Clear all uA's, tnodeLists, etc.</vh>
<v t="ekr.20091206090247.5061"><vh>Clean unused tnodeLists</vh></v>
<v t="ekr.20091206090247.5062"><vh>Clear all timestamps</vh></v>
<v t="ekr.20091206090247.5063"><vh>Clear all uAs (unknown attributes)</vh></v>
</v>
</v>
<v t="ekr.20071113203234"><vh>Test files</vh>
<v t="ekr.20090704085350.5028"><vh>@asis ../test/unittest/at-asis-test.py</vh>
<v t="ekr.20090704085350.5029"><vh>spam</vh></v>
<v t="ekr.20090704085350.5030"><vh>eggs</vh></v>
</v>
<v t="ekr.20110610122533.3407"><vh>@auto ../test/at-auto-unit-test.py</vh></v>
<v t="ekr.20111214104615.3942"><vh>@auto ../test/unittest/at-auto-section-ref-test.py</vh></v>
<v t="ekr.20090704085350.5056"><vh>@auto ../test/unittest/at-auto-test.py</vh></v>
<v t="ekr.20080904084223.1"><vh>@auto unittest/at-auto-line-number-test.py</vh></v>
<v t="ekr.20111021115306.3697"><vh>@file ../test/unittest/tex-error.tex</vh></v>
<v t="ekr.20110615130436.3317" a="O"><vh>@file nonexistent-directory/orphan-bit-test.txt</vh>
<v t="ekr.20110615130436.3318"><vh>Child goes here.</vh></v>
</v>
<v t="ekr.20080904102243.2"><vh>@file unittest/at-file-line-number-test.py</vh></v>
<v t="ekr.20130912092638.4150"><vh>@file ../test/utf-16-test.txt</vh></v>
<v t="ekr.20090704085350.5034"><vh>@nosent ../test/unittest/at-nosent-test.py</vh>
<v t="ekr.20090704085350.5035"><vh>spam</vh></v>
<v t="ekr.20090704085350.5036"><vh>eggs</vh></v>
</v>
<v t="ekr.20080907123324.2"><vh>@nosent unittest/at-nosent-line-number-test.py</vh>
<v t="ekr.20080907123324.3"><vh>at-nosent-child</vh></v>
</v>
<v t="ekr.20090704085350.5014"><vh>@shadow ../test/unittest/at-shadow-test.py</vh></v>
<v t="ekr.20080907122804.1"><vh>@shadow unittest/at-shadow-line-number-test.py</vh></v>
<v t="ekr.20111213122041.3930"><vh>@shadow unittest/at-shadow-unlink-clones.py</vh></v>
<v t="ekr.20120229082711.3934"><vh>@@@shadow unittest/at-shadow-unlink-clones.py (COPY)</vh>
<v t="ekr.20120229082711.3935"><vh>Node 1</vh></v>
<v t="ekr.20120229082711.3936"><vh>Node 2</vh></v>
</v>
<v t="ekr.20100731163237.5782"><vh>@thin ../test/unittest/at-thin-html-test.html</vh></v>
<v t="ekr.20090704085350.5022"><vh>@thin ../test/unittest/at-thin-test.py</vh></v>
<v t="ekr.20070627082044.811"><vh>@thin ../test/unittest/batchTest.py</vh></v>
<v t="ekr.20070627082044.808"><vh>@thin ../test/unittest/errorTest.py</vh></v>
<v t="ekr.20080905130723.3"><vh>@thin unittest/at-thin-line-number-test.py</vh></v>
</v>
<v t="ekr.20111211094936.3970"><vh>To do</vh>
<v t="ekr.20111115080347.3872"><vh>To do: tests of the high-level interface</vh>
<v t="ekr.20100131171342.5478"><vh>@@@test that log and body implements high-level interface</vh></v>
</v>
<v t="ekr.20100131171342.5473"><vh>Tk gui tests</vh>
<v t="ekr.20100131171342.5474"><vh>@test leoBody is subset of leoTkBody</vh></v>
<v t="ekr.20100131171342.5475"><vh>@test leoFrame is subset of leoTkFrame</vh></v>
<v t="ekr.20100131171342.5476"><vh>@test leoGui is subset of leoTkGui</vh></v>
<v t="ekr.20100131171342.5477"><vh>@test leoTree is subset of leoTkTree</vh></v>
</v>
<v t="ekr.20111125183140.3952"><vh>@test ic.createOutline changes back-slashes to slashes</vh></v>
<v t="ekr.20111125182408.3947"><vh>@test ic.createImportParent changes back-slashes to slashes</vh></v>
</v>
<v t="ekr.20101220161557.6013"><vh>Slow and unused tests</vh>
<v t="ekr.20101220161557.6014"><vh>@file inactiveTests.txt</vh></v>
</v>
<v t="ekr.20140906072925.5224"><vh>Scintilla fails</vh>
<v t="ekr.20100223123103.5382"><vh>@test expand/contract-pane</vh></v>
<v t="ekr.20111112171235.3854"><vh>@test add/delete html comments</vh>
<v t="ekr.20111112171235.3855"><vh>html</vh></v>
</v>
<v t="ekr.20111112171235.3858"><vh>@test add/delete python comments</vh>
<v t="ekr.20111112171235.3859"><vh>python</vh></v>
</v>
<v t="ekr.20061101121602.126"><vh>@test backward-kill-paragraph</vh>
<v t="ekr.20061101121602.127"><vh>work</vh></v>
<v t="ekr.20061101121602.128"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.129"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.154"><vh>@test center-region</vh>
<v t="ekr.20061101121602.155"><vh>work</vh></v>
<v t="ekr.20061101121602.156"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.157"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.174"><vh>@test downcase-region</vh>
<v t="ekr.20061101121602.175"><vh>work</vh></v>
<v t="ekr.20061101121602.176"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.177"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20061101121602.282"><vh>@test kill-paragraph</vh>
<v t="ekr.20061101121602.283"><vh>work</vh></v>
<v t="ekr.20061101121602.285"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.284"><vh>after sel=8.0,8.0</vh></v>
</v>
<v t="ekr.20071113145804.4"><vh>@test selfInsertCommand-1</vh></v>
<v t="ekr.20061101121602.350"><vh>@test upcase-region</vh>
<v t="ekr.20061101121602.351"><vh>work</vh></v>
<v t="ekr.20061101121602.352"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.353"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20110118082508.3766"><vh>@test reformat-paragraph paragraph 1 of 3</vh>
<v t="ekr.20110118082508.3772"><vh>work</vh></v>
<v t="ekr.20110118082508.3773"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3792"><vh>after sel=11.14,11.14</vh></v>
</v>
<v t="ekr.20110118082508.3779"><vh>@test reformat-paragraph paragraph 2 of 3</vh>
<v t="ekr.20110118082508.3780"><vh>work</vh></v>
<v t="ekr.20110118082508.3781"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3782"><vh>after sel=23.33,23.33</vh></v>
</v>
<v t="ekr.20110118082508.3787"><vh>@test reformat-paragraph paragraph 3 of 3</vh>
<v t="ekr.20110118082508.3788"><vh>work</vh></v>
<v t="ekr.20110118082508.3789"><vh>before sel=25.10,25.10</vh></v>
<v t="ekr.20110118082508.3790"><vh>after sel=32.11,32.11</vh></v>
</v>
<v t="ekr.20100204165850.5373"><vh>@test most toggle commands</vh></v>
<v t="ekr.20040712101754.37"><vh>@suite Edit body tests</vh>
<v t="ekr.20040712101754.38"><vh>editBodyTests</vh>
<v t="ekr.20060127120604"><vh>tempNode</vh></v>
<v t="ekr.20050417202713"><vh>addComments</vh>
<v t="ekr.20050417202713.1"><vh>before</vh></v>
<v t="ekr.20050417202713.2"><vh>after</vh></v>
<v t="ekr.20050417202713.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417204940"><vh>convertAllBlanks</vh>
<v t="ekr.20050417204940.1"><vh>before</vh></v>
<v t="ekr.20050417204940.2"><vh>after</vh></v>
<v t="ekr.20050417204940.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417205012"><vh>convertAllTabs</vh>
<v t="ekr.20050417205012.1"><vh>before</vh></v>
<v t="ekr.20050417205012.2"><vh>after</vh></v>
<v t="ekr.20050417205012.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417203114"><vh>convertBlanks</vh>
<v t="ekr.20050417203310"><vh>before</vh></v>
<v t="ekr.20050417203310.1"><vh>after</vh></v>
<v t="ekr.20050417203336"><vh>selection</vh></v>
</v>
<v t="ekr.20050417203114.1"><vh>convertTabs</vh>
<v t="ekr.20050417204834"><vh>before</vh></v>
<v t="ekr.20050417204830"><vh>after</vh></v>
<v t="ekr.20050417204901"><vh>selection</vh></v>
</v>
<v t="ekr.20040712101754.49"><vh>dedentBody</vh>
<v t="ekr.20040712101754.50"><vh>before</vh></v>
<v t="ekr.20040712101754.51"><vh>after</vh></v>
<v t="ekr.20040712101754.52"><vh>selection</vh></v>
</v>
<v t="ekr.20050417202817"><vh>deleteComments</vh>
<v t="ekr.20050417202817.1"><vh>before</vh></v>
<v t="ekr.20050417202817.2"><vh>after</vh></v>
<v t="ekr.20050417202817.3"><vh>selection</vh></v>
</v>
<v t="ekr.20111112211307.3910"><vh>deleteComments</vh>
<v t="ekr.20111112211307.3911"><vh>before</vh></v>
<v t="ekr.20111112211307.3912"><vh>after</vh></v>
<v t="ekr.20111112211307.3913"><vh>selection</vh></v>
</v>
<v t="ekr.20050417201845"><vh>extract test1</vh>
<v t="ekr.20050417201845.1"><vh>before</vh></v>
<v t="ekr.20050417201845.2"><vh>after</vh>
<v t="ekr.20050417201845.3"><vh>&lt;&lt; section &gt;&gt; @nonl</vh></v>
</v>
<v t="ekr.20050417201845.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518070540"><vh>extract test2</vh>
<v t="ekr.20050518070540.1"><vh>before</vh></v>
<v t="ekr.20050518070545"><vh>after</vh></v>
<v t="ekr.20050518070540.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518070927"><vh>extractSection test1</vh>
<v t="ekr.20050518070927.1"><vh>before</vh></v>
<v t="ekr.20050518070927.2"><vh>after</vh>
<v t="ekr.20050518070927.3"><vh>&lt;&lt; section &gt;&gt; @nonl</vh></v>
</v>
<v t="ekr.20050518070927.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518071251"><vh>extractSection test2</vh>
<v t="ekr.20050518071251.1"><vh>before</vh></v>
<v t="ekr.20050518071258"><vh>after</vh></v>
<v t="ekr.20050518071251.4"><vh>selection</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20101220161557.6016"><vh>Active Unit Tests</vh>
<v t="ekr.20070114140212" descendentVnodeUnknownAttributes="7d7100285505302e372e3771017d71025808000000616e6e6f7461746571037d7104735508302e362e31302e3971057d71065809000000756e69745f7465737471075804000000616263647108735508302e362e31342e3371097d710a5808000000616e6e6f74617465710b7d710c735508302e362e31362e37710d7d710e5808000000616e6e6f74617465710f7d711073752e"><vh>@file activeUnitTests.txt</vh></v>
</v>
<v t="ekr.20071113194858"><vh>Organized by file</vh>
<v t="ekr.20100223123103.5382"></v>
<v t="ekr.20100131171342.5506"><vh>leoApp</vh>
<v t="ekr.20100131171342.5507"><vh>@test consistency of leoApp tables</vh></v>
<v t="ekr.20100131180007.5417"><vh>@test lm.openLeoOrZipFile</vh></v>
<v t="ekr.20100211110729.5389"><vh>@test rfm.writeRecentFilesFileHelper</vh></v>
<v t="ekr.20130503061820.4186"><vh>@test consistency of leoApp tables</vh></v>
</v>
<v t="ekr.20050112095306.1"><vh>leoAtFile</vh>
<v t="ekr.20041021065844"><vh>@test @asis</vh>
<v t="ekr.20041021065903"><vh>#@asis</vh>
<v t="ekr.20041021065903.1"><vh>&lt;&lt; section &gt;&gt;</vh></v>
<v t="ekr.20041021065903.2"><vh>unnamed node</vh></v>
</v>
<v t="ekr.20041021065844.1"><vh>Output</vh></v>
</v>
<v t="ekr.20090627070131.4971"><vh>@test @auto (newlines at end of nodes)</vh>
<v t="ekr.20090627070131.4975"><vh>#@auto</vh>
<v t="ekr.20090627070131.4976"><vh>spam</vh></v>
<v t="ekr.20090627070131.4977"><vh>cheese</vh></v>
</v>
<v t="ekr.20090627070131.4978"><vh>Output</vh></v>
</v>
<v t="ekr.20100801125533.5787"><vh>@test @auto (no newline at end of nodes)</vh>
<v t="ekr.20100801125533.5788"><vh>#@auto</vh>
<v t="ekr.20100801125533.5789"><vh>spam</vh></v>
<v t="ekr.20100801125533.5790"><vh>cheese</vh></v>
</v>
<v t="ekr.20100801125533.5791"><vh>Output</vh></v>
</v>
<v t="ekr.20090225102051.2"><vh>@test @edit</vh>
<v t="ekr.20090225102051.3"><vh>#@edit</vh></v>
<v t="ekr.20090225102051.4"><vh>Output</vh></v>
</v>
<v t="ekr.20110524120515.3489"><vh>@test @raw</vh>
<v t="ekr.20110524120515.3490"><vh>#@file</vh></v>
<v t="ekr.20110524120515.3491"><vh>Output</vh></v>
</v>
<v t="ekr.20071113145804.8"><vh>@test at.directiveKind4</vh></v>
<v t="ekr.20100225094004.5385"><vh>@test at.isFileLike</vh></v>
<v t="ekr.20071113143844.5"><vh>@test at.isSignificantTree</vh></v>
<v t="ekr.20110524091618.3488"><vh>@test at.massageDocPart</vh></v>
<v t="ekr.20090529115704.4562"><vh>@test at.open/closeStringFile</vh></v>
<v t="ekr.20090529115704.4563"><vh>@test at.openForWrite: not a shadow file</vh></v>
<v t="ekr.20071113145804.7"><vh>@test at.parseLeoSentinel</vh></v>
<v t="ekr.20090529115704.4564"><vh>@test at.readOneAtShadowNode</vh>
<v t="ekr.20090529115704.4565"><vh>@@shadow unittest/read_test.py</vh></v>
</v>
<v t="ekr.20120228174052.3929"><vh>Node 1</vh></v>
<v t="ekr.20111210175541.3957"><vh>@test at.readOneAtShadowNode retains @shadow links clones</vh>
<v t="ekr.20120228174052.3929"></v>
</v>
<v t="ekr.20050105093136"><vh>@test at.remove</vh></v>
<v t="ekr.20050105093524"><vh>@test at.rename</vh></v>
<v t="ekr.20090529115704.4566"><vh>@test at.replaceFileWithString</vh></v>
<v t="ekr.20050105094311"><vh>@test at.replaceTargetFileIfDifferent (different)</vh></v>
<v t="ekr.20050105095743"><vh>@test at.replaceTargetFileIfDifferent (identical)</vh></v>
<v t="ekr.20050105100227"><vh>@test at.replaceTargetFileIfDifferent (no target file)</vh></v>
<v t="ekr.20060602195313"><vh>@test at.write using @comment</vh>
<v t="ekr.20060602195313.2"><vh>root</vh>
<v t="ekr.20060602195313.3"><vh>&lt;&lt; Get LRR Task &gt;&gt;</vh></v>
<v t="ekr.20060602195313.4"><vh>&lt;&lt; Start LRR &gt;&gt;</vh></v>
</v>
<v t="ekr.20060602195914"><vh>Result</vh></v>
</v>
<v t="ekr.20090529115704.4567"><vh>@test at.writeOneAtShadowNode</vh>
<v t="ekr.20090529115704.4568"><vh>@@shadow unittest/test_1.py</vh></v>
</v>
<v t="ekr.20130912092638.4151"><vh>@test utf-16 encoding</vh></v>
<v t="ekr.20100131180007.5462"><vh>@test verbatim sentinel</vh></v>
<v t="ekr.20071113201736"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20101021205258.6011"><vh>at.Directives &amp; directories</vh>
<v t="ekr.20100131180007.5455"><vh>@test at.fullDirectoryPath</vh>
<v t="ekr.20100131180007.5456"><vh>@path abc</vh>
<v t="ekr.20100131180007.5457"><vh>xyz</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5454"><vh>@test at.get/setPathUa</vh></v>
<v t="ekr.20100131180007.5461"><vh>@test at.replaceFileWithString</vh></v>
<v t="ekr.20100131180007.5458"><vh>@test at.scanAllDirectives (minimal)</vh></v>
<v t="ekr.20071113090055.4"><vh>@test at.scanAllDirectives</vh></v>
</v>
<v t="ekr.20111113091935.4786"><vh>Not valid when run externally</vh>
<v t="ekr.20090704085350.5044"><vh>@test @asis: shape of tree</vh></v>
<v t="ekr.20090704085350.5052"><vh>@test @auto: shape of tree</vh></v>
<v t="ekr.20090704085350.5018"><vh>@test @shadow: shape of tree</vh></v>
<v t="ekr.20100731163237.5778"><vh>@test @thin: html section references</vh></v>
<v t="ekr.20090704085350.5046"><vh>@test @thin: shape of tree</vh></v>
<v t="ekr.20111021115306.3696"><vh>@test @file: tex bug</vh></v>
<v t="ekr.20100802220019.5795"><vh>@test at.deleteUnvistedNodes</vh></v>
<v t="ekr.20110615130436.3319"><vh>@test writing a .leo file retains orphan bits</vh></v>
<v t="ekr.20040707141957.12"><vh>@test @thin: @last</vh>
<v t="ekr.20040707141957.13"><vh>#@thin</vh></v>
<v t="ekr.20040707141957.14"><vh>Output</vh></v>
</v>
</v>
<v t="ekr.20101021210253.6018"><vh>Unused</vh>
<v t="ekr.20040712101754.103"><vh>@@test @file no newline</vh>
<v t="ekr.20040712101754.104"><vh>#@file</vh></v>
<v t="ekr.20040712101754.105"><vh>Output</vh></v>
</v>
<v t="ekr.20040712101754.106"><vh>@@test @file one newline</vh>
<v t="ekr.20040712101754.107"><vh>#@file</vh></v>
<v t="ekr.20040712101754.108"><vh>Output</vh></v>
</v>
<v t="ekr.20040712101754.109"><vh>@@test @file two newlines</vh>
<v t="ekr.20040712101754.110"><vh>#@file</vh></v>
<v t="ekr.20040712101754.111"><vh>Output</vh></v>
</v>
<v t="ekr.20090704085350.5010"><vh>@@test @file: shape of tree</vh></v>
</v>
</v>
<v t="ekr.20100131171342.5508"><vh>leoBridge</vh>
<v t="ekr.20100131171342.5509"><vh>@test leoBridge init logic</vh></v>
</v>
<v t="ekr.20110608135658.3377"><vh>leoChapters</vh>
<v t="ekr.20110608162543.3363"><vh>@test chapter-create/remove &amp; undo</vh></v>
<v t="ekr.20110608162543.3365"><vh>@test chapter-rename &amp; undo</vh></v>
<v t="ekr.20110608181936.3368"><vh>@test chapter-move/clone/copy-node-to</vh></v>
<v t="ekr.20080503132221.1"><vh>@test chapter-create-from-node</vh></v>
</v>
<v t="ekr.20090615053403.4876"><vh>leoColor</vh>
<v t="ekr.20090615053403.4877"><vh>@test @comment after @language plain</vh>
<v t="ekr.20090615053403.4878"><vh>plain code</vh></v>
</v>
<v t="ekr.20090615053403.4879"><vh>@test colorizer Actionscript</vh>
<v t="ekr.20090615053403.4880"><vh>actionscript test</vh></v>
</v>
<v t="ekr.20090615053403.4881"><vh>@test colorizer C</vh>
<v t="ekr.20090615053403.4882"><vh>c code</vh></v>
</v>
<v t="ekr.20090615053403.4883"><vh>@test colorizer C#</vh>
<v t="ekr.20090615053403.4884"><vh>c# code</vh></v>
</v>
<v t="ekr.20090615053403.4885"><vh>@test colorizer css</vh>
<v t="ekr.20090615053403.4886"><vh>css</vh></v>
</v>
<v t="ekr.20090615053403.4887"><vh>@test colorizer CWEB</vh>
<v t="ekr.20090615053403.4888"><vh>CWEB</vh>
<v t="ekr.20090615053403.4889"><vh>&lt;&lt; section ref &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20110521073115.3486"><vh>@test colorizer cython</vh>
<v t="ekr.20110521073115.3490"><vh>cython</vh></v>
</v>
<v t="ekr.20090615053403.4890"><vh>@test colorizer elisp</vh>
<v t="ekr.20090615053403.4891"><vh>elisp</vh></v>
</v>
<v t="ekr.20090615053403.4892"><vh>@test colorizer erlang</vh>
<v t="ekr.20090615053403.4893"><vh>erlang</vh></v>
</v>
<v t="ekr.20090615053403.4894"><vh>@test colorizer forth</vh>
<v t="ekr.20090615053403.4895"><vh>forth</vh></v>
</v>
<v t="ekr.20090615053403.4896"><vh>@test colorizer HTML string bug</vh>
<v t="ekr.20090615053403.4897"><vh>html</vh></v>
</v>
<v t="ekr.20090615053403.4898"><vh>@test colorizer HTML1</vh>
<v t="ekr.20090615053403.4899"><vh>html</vh></v>
</v>
<v t="ekr.20090615053403.4900"><vh>@test colorizer HTML2</vh>
<v t="ekr.20090615053403.4901"><vh>html</vh></v>
</v>
<v t="ekr.20090615053403.4902"><vh>@test colorizer Java</vh>
<v t="ekr.20090615053403.4903"><vh>html</vh></v>
</v>
<v t="ekr.20090615053403.4904"><vh>@test colorizer LaTex</vh>
<v t="ekr.20090615053403.4905"><vh>LaTex</vh></v>
</v>
<v t="ekr.20090615053403.4906"><vh>@test colorizer lisp</vh>
<v t="ekr.20090615053403.4907"><vh>lisp</vh></v>
</v>
<v t="ekr.20101020123501.6005"><vh>@test colorizer objective-c</vh>
<v t="ekr.20101020123501.6006"><vh>objective-c</vh></v>
</v>
<v t="ekr.20090615053403.4908"><vh>@test colorizer perl</vh>
<v t="ekr.20090615053403.4909"><vh>perl</vh></v>
</v>
<v t="ekr.20090615053403.4910"><vh>@test colorizer PHP</vh>
<v t="ekr.20090615053403.4911"><vh>PHP</vh></v>
</v>
<v t="ekr.20090615053403.4912"><vh>@test colorizer plsql</vh>
<v t="ekr.20090615053403.4913"><vh>plsql</vh></v>
</v>
<v t="ekr.20090615053403.4914"><vh>@test colorizer python.xml (jEdit)</vh>
<v t="ekr.20090615053403.4915"><vh>python.xml</vh>
<v t="ekr.20090615053403.4916"><vh>&lt;&lt; remarks &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4917"><vh>&lt;&lt; comments &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4918"><vh>&lt;&lt; literals &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4919"><vh>&lt;&lt; operators &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4920"><vh>&lt;&lt; keywords &gt;&gt;</vh>
<v t="ekr.20090615053403.4921"><vh>&lt;&lt; reserved words &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4922"><vh>&lt;&lt; builtins &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4923"><vh>&lt;&lt; exceptions &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4924"><vh>&lt;&lt; types &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20090615053403.4925"><vh>@test colorizer Python1</vh>
<v t="ekr.20090615053403.4926"><vh>python</vh></v>
</v>
<v t="ekr.20090615053403.4927"><vh>@test colorizer Python2</vh>
<v t="ekr.20090615053403.4928"><vh>python</vh></v>
</v>
<v t="ekr.20090615053403.4929"><vh>@test colorizer r</vh>
<v t="ekr.20090615053403.4930"><vh>r</vh></v>
</v>
<v t="ekr.20090615053403.4931"><vh>@test colorizer rapidq</vh>
<v t="ekr.20090615053403.4932"><vh>rapidq</vh></v>
</v>
<v t="ekr.20090615053403.4933"><vh>@test colorizer Rebol</vh>
<v t="ekr.20090615053403.4934"><vh>Rebol</vh></v>
</v>
<v t="ekr.20090615053403.4935"><vh>@test colorizer rest</vh>
<v t="ekr.20090615053403.4936"><vh>rest</vh></v>
</v>
<v t="ekr.20110529215703.3494"><vh>@test colorizer scala</vh>
<v t="ekr.20110529215703.3495"><vh>scala</vh></v>
</v>
<v t="ekr.20090615053403.4937"><vh>@test colorizer shell</vh>
<v t="ekr.20090615053403.4938"><vh>shell</vh></v>
</v>
<v t="ekr.20090615053403.4939"><vh>@test colorizer shellscript</vh>
<v t="ekr.20090615053403.4940"><vh>shellscript</vh></v>
</v>
<v t="ekr.20090615053403.4941"><vh>@test colorizer tex.xml (jEdit)</vh>
<v t="ekr.20090615053403.4942"><vh>tex.xml</vh>
<v t="ekr.20090615053403.4943"><vh>&lt;&lt; general rules &gt;&gt;</vh></v>
<v t="ekr.20090615053403.4944"><vh>&lt;&lt; math rules &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20090615053403.4945"><vh>@test colorizer wikiTest1</vh>
<v t="ekr.20090615053403.4946"><vh>wiki</vh></v>
</v>
<v t="ekr.20090615053403.4947"><vh>@test colorizer wikiTest2</vh>
<v t="ekr.20090615053403.4948"><vh>wiki</vh></v>
</v>
<v t="ekr.20090615053403.4949"><vh>@test colorizer wikiTest3</vh>
<v t="ekr.20090615053403.4950"><vh>wiki</vh></v>
</v>
<v t="ekr.20090615053403.4951"><vh>@test leoColor.doNowebSecRef</vh>
<v t="ekr.20090615053403.4952"><vh>&lt;&lt; test defined &gt;&gt;</vh></v>
</v>
<v t="ekr.20090615053403.4953"><vh>@test python keywords (new colorizer)</vh></v>
<v t="ekr.20090615053403.4954"><vh>@test scanColorDirectives</vh></v>
<v t="ekr.20090615053403.4955"><vh>@test vbscript</vh>
<v t="ekr.20090615053403.4956"><vh>vbscript</vh></v>
</v>
<v t="ekr.20090615053403.4957"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113193624"><vh>leoCommands</vh>
<v t="ekr.20100203103015.5356"><vh>@@@test c.openTempFileInExternalEditor</vh></v>
<v t="ekr.20090104053806.1"><vh>@@test c.checkFileTimeStamp &amp; c.setFileTimeStamp</vh></v>
<v t="ekr.20111112171235.3854"></v>
<v t="ekr.20111112171235.3858"></v>
<v t="ekr.20120309155126.3949"><vh>@test add/delete comments with multiple @language directives</vh>
<v t="ekr.20120309155126.3950"><vh>rest and python</vh></v>
</v>
<v t="ekr.20110510054817.3475"><vh>@test c.alert</vh></v>
<v t="ekr.20050512084850"><vh>@test c.checkOutline</vh>
<v t="ekr.20040713070526"><vh>Scripts</vh>
<v t="ekr.20040713123617"><vh>tempNode</vh></v>
<v t="ekr.20050726141158"><vh>before</vh></v>
<v t="ekr.20040713123828.1"><vh>after</vh></v>
</v>
</v>
<v t="ekr.20071113145804.10"><vh>@test c.contractAllHeadlines</vh></v>
<v t="ekr.20070611105423.1"><vh>@test c.contractAllHeadlines</vh></v>
<v t="ekr.20111104171708.3843"><vh>@test c.CPrettyPrinter</vh>
<v t="ekr.20111104171708.3844"><vh>c tokenize test</vh></v>
</v>
<v t="ekr.20100209155559.5386"><vh>@test c.createOpenWithTempFile</vh></v>
<v t="ekr.20070611105728"><vh>@test c.demote: illegal clone demote</vh></v>
<v t="ekr.20100203103015.5355"><vh>@test c.getOpenWithExt</vh></v>
<v t="ekr.20100212072149.5341"><vh>@test c.goToScriptLineNumber</vh>
<v t="ekr.20100212072149.5342"><vh>syntax-error</vh></v>
</v>
<v t="ekr.20071113105654.1"><vh>@test c.hoist with no children</vh></v>
<v t="ekr.20120310121839.3949"><vh>@test c.hoist @chapter node</vh></v>
<v t="ekr.20120311124038.3951"><vh>@test c.hoist followed by goto-first-node</vh></v>
<v t="ekr.20061106112522"><vh>@test c.insertBodyTime</vh></v>
<v t="ekr.20050512083807.1"><vh>@test c.markAllAtFileNodesDirty</vh></v>
<v t="ekr.20050512083822.1"><vh>@test c.markSubheads</vh>
<v t="ekr.20050512084850.1"><vh>child 1</vh></v>
<v t="ekr.20050512084850.2"><vh>child 2</vh></v>
</v>
<v t="ekr.20100203103015.5354"><vh>@test c.openWithTempFilePath</vh></v>
<v t="ekr.20111212142649.3971"><vh>@test c.pasteOutline does not clone top node</vh>
<v t="ekr.20111212142649.3972"><vh>child</vh></v>
</v>
<v t="ekr.20041019124050"><vh>@test c.prettyPrintPythonCode</vh>
<v t="ekr.20041019124050.1"><vh>Original</vh></v>
<v t="ekr.20041019124050.2"><vh>Test</vh></v>
</v>
<v t="ekr.20040802065214"><vh>@test c.setHeadString marks descendent @thin nodes dirty</vh>
<v t="ekr.20040802065214.1"><vh>bogus</vh></v>
</v>
<v t="ekr.20050512083822.2"><vh>@test c.unmarkAll</vh></v>
<v t="ekr.20100131180007.5465"><vh>@test class StubConfig</vh></v>
<v t="ville.20090602190735.4770"><vh>@test g.command decorator</vh></v>
<v t="ekr.20100203103015.5357"><vh>@test g.isCallable</vh></v>
<v t="ekr.20100203103015.5353"><vh>@test open-with conflict dialog</vh></v>
<v t="ekr.20071113201833"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20101021205258.6009"><vh>c.Directives &amp; directories</vh>
<v t="ekr.20080917151620.9"><vh>@test c.scanAllDirectives</vh></v>
<v t="ekr.20100131180007.5466"><vh>@test c.scanAtPathDirectives</vh>
<v t="ekr.20100131180007.5467"><vh>@path one</vh>
<v t="ekr.20100131180007.5468"><vh>@path two</vh>
<v t="ekr.20100131180007.5469"><vh>xyz</vh></v>
</v>
</v>
</v>
<v t="sps.20100531034136.20110"><vh>@test c.scanAtPathDirectives same name subdirs</vh>
<v t="sps.20100531034136.20111"><vh>@path again</vh>
<v t="sps.20100531034136.20112"><vh>@path again</vh>
<v t="sps.20100531034136.20113"><vh>xyz</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20071113194216"><vh>leoConfig</vh>
<v t="ekr.20120201125738.3958"><vh>@@@test g.app.config.getShortcuts works when no local shortcuts</vh></v>
<v t="ekr.20060325071703.2"><vh>@@@test ifgui</vh></v>
<v t="ekr.20111115071700.3870"><vh>@test c.config.printSettings</vh></v>
<v t="ekr.20120201101804.3907"><vh>@test c.config.updateSetting with no @settings node</vh></v>
<v t="ekr.20111124090010.3939"><vh>@test g.app.config @buttons and @commands logic</vh></v>
<v t="ekr.20050203084930.1"><vh>@test g.app.config.get</vh></v>
<v t="ekr.20111105124216.3840"><vh>@test g.app.config.set</vh></v>
<v t="ekr.20060325071703.1"><vh>@test ifplatform</vh></v>
<v t="ekr.20050203001146"><vh>@test local settings (c.page_width)</vh></v>
<v t="ekr.20071113201854"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20100131171342.5592"><vh>leoDialogs</vh>
<v t="ekr.20100131171342.5593"><vh>@test ctors for all dialogs</vh></v>
</v>
<v t="ekr.20071113192611"><vh>leoEditCommands</vh>
<v t="ekr.20070131175538"><vh> Commands A-B</vh>
<v t="ekr.20061101121602.78"><vh>@test add-space-to-lines</vh>
<v t="ekr.20061101121602.79"><vh>work</vh></v>
<v t="ekr.20061101121602.80"><vh>before sel=2.0,4.6</vh></v>
<v t="ekr.20061101121602.81"><vh>after sel=2.0,4.7</vh></v>
</v>
<v t="ekr.20061101121602.82"><vh>@test add-tab-to-lines</vh>
<v t="ekr.20061101121602.83"><vh>work</vh></v>
<v t="ekr.20061101121602.84"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.85"><vh>after sel=2.0,5.10</vh></v>
</v>
<v t="ekr.20071113145804.16"><vh>@test helpForbindings</vh></v>
<v t="ekr.20071113145804.17"><vh>@test helpForFindCommands</vh></v>
<v t="ekr.20061101121602.86"><vh>@test back-char</vh>
<v t="ekr.20061101121602.87"><vh>work</vh></v>
<v t="ekr.20061101121602.88"><vh>before sel=3.8,3.8</vh></v>
<v t="ekr.20061101121602.89"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20061101121602.90"><vh>@test back-char-extend-selection</vh>
<v t="ekr.20061101121602.91"><vh>work</vh></v>
<v t="ekr.20061101121602.92"><vh>before sel=4.12,4.12</vh></v>
<v t="ekr.20061101121602.93"><vh>after sel=4.11,4.12</vh></v>
</v>
<v t="ekr.20061101121602.94"><vh>@test back-paragraph</vh>
<v t="ekr.20061101121602.95"><vh>work</vh></v>
<v t="ekr.20061101121602.96"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.97"><vh>after sel=6.7,6.7</vh></v>
</v>
<v t="ekr.20061101121602.98"><vh>@test back-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.99"><vh>work</vh></v>
<v t="ekr.20061101121602.100"><vh>before sel=9.0,9.5</vh></v>
<v t="ekr.20061101121602.101"><vh>after sel=6.7,9.5</vh></v>
</v>
<v t="ekr.20061101121602.102"><vh>@test back-sentence</vh>
<v t="ekr.20061101121602.103"><vh>work</vh></v>
<v t="ekr.20061101121602.104"><vh>before sel=3.169,3.169</vh></v>
<v t="ekr.20061101121602.105"><vh>after sel=3.143,3.143</vh></v>
</v>
<v t="ekr.20061101121602.106"><vh>@test back-sentence-extend-selection</vh>
<v t="ekr.20061101121602.107"><vh>work</vh></v>
<v t="ekr.20061101121602.108"><vh>before sel=3.208,3.208</vh></v>
<v t="ekr.20061101121602.109"><vh>after sel=3.143,3.208</vh></v>
</v>
<v t="ekr.20061101121602.110"><vh>@test back-to-indentation</vh>
<v t="ekr.20061101121602.111"><vh>work</vh></v>
<v t="ekr.20061101121602.112"><vh>before sel=4.13,4.13</vh></v>
<v t="ekr.20061101121602.113"><vh>after sel=4.8,4.8</vh></v>
</v>
<v t="ekr.20090427104851.7"><vh>@test back-to-home (at start of line)</vh>
<v t="ekr.20090427104851.8"><vh>work</vh></v>
<v t="ekr.20090427104851.9"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20090427104851.10"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20090427104851.15"><vh>@test back-to-home (at indentation</vh>
<v t="ekr.20090427104851.16"><vh>work</vh></v>
<v t="ekr.20090427104851.17"><vh>before sel=2.4,2.4</vh></v>
<v t="ekr.20090427104851.18"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20090427104851.11"><vh>@test back-to-home (at end of line)</vh>
<v t="ekr.20090427104851.12"><vh>work</vh></v>
<v t="ekr.20090427104851.13"><vh>before sel=2.12,2.12</vh></v>
<v t="ekr.20090427104851.14"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.114"><vh>@test back-word</vh>
<v t="ekr.20061101121602.115"><vh>work</vh></v>
<v t="ekr.20061101121602.116"><vh>before sel=1.183,1.183</vh></v>
<v t="ekr.20061101121602.117"><vh>after sel=1.177,1.177</vh></v>
</v>
<v t="ekr.20061101121602.118"><vh>@test back-word-extend-selection</vh>
<v t="ekr.20061101121602.119"><vh>work</vh></v>
<v t="ekr.20061101121602.120"><vh>before sel=3.342,3.342</vh></v>
<v t="ekr.20061101121602.121"><vh>after sel=3.331,3.342</vh></v>
</v>
<v t="ekr.20061101121602.122"><vh>@test backward-delete-char</vh>
<v t="ekr.20061101121602.123"><vh>work</vh></v>
<v t="ekr.20061101121602.124"><vh>before sel=1.9,1.9</vh></v>
<v t="ekr.20061101121602.125"><vh>after sel=1.8,1.8</vh></v>
</v>
<v t="ekr.20071007121529"><vh>@test backward-delete-char  (middle of line)</vh>
<v t="ekr.20071007121529.1"><vh>work</vh></v>
<v t="ekr.20071007121529.2"><vh>before sel=1.6,1.6</vh></v>
<v t="ekr.20071007121529.3"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120947"><vh>@test backward-delete-char (last char)</vh>
<v t="ekr.20071007120947.6"><vh>work</vh></v>
<v t="ekr.20071007120947.7"><vh>before sel=2.9,2.9</vh></v>
<v t="ekr.20071007120947.8"><vh>after sel=2.8,2.8</vh></v>
</v>
<v t="ekr.20100817131738.5886"><vh>@test backward-delete-word (no selection)</vh>
<v t="ekr.20100817131738.5887"><vh>work</vh></v>
<v t="ekr.20100817131738.5888"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20100817131738.5889"><vh>after sel=1.4,1.4</vh></v>
</v>
<v t="ekr.20100817131738.5894"><vh>@test backward-delete-word (selection)</vh>
<v t="ekr.20100817131738.5895"><vh>work</vh></v>
<v t="ekr.20100817131738.5896"><vh>before sel=1.7,1.12</vh></v>
<v t="ekr.20100817131738.5897"><vh>after sel=1.7,1.7</vh></v>
</v>
<v t="ekr.20061101121602.126"></v>
<v t="ekr.20070131173932"><vh>@test backward-kill-sentence</vh>
<v t="ekr.20070131173932.1"><vh>work</vh></v>
<v t="ekr.20070131173932.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131173932.3"><vh>after sel=2.23,2.23</vh></v>
</v>
<v t="ekr.20081215084144.2"><vh>@test backward-kill-word</vh>
<v t="ekr.20081215084144.3"><vh>work</vh></v>
<v t="ekr.20081215084144.4"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20081215084144.5"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.130"><vh>@test beginning-of-buffer</vh>
<v t="ekr.20061101121602.131"><vh>work</vh></v>
<v t="ekr.20061101121602.132"><vh>before sel=5.56,5.56</vh></v>
<v t="ekr.20061101121602.133"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.134"><vh>@test beginning-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.135"><vh>work</vh></v>
<v t="ekr.20061101121602.136"><vh>before sel=3.423,3.423</vh></v>
<v t="ekr.20061101121602.137"><vh>after sel=1.0,3.423</vh></v>
</v>
<v t="ekr.20061101121602.138"><vh>@test beginning-of-line</vh>
<v t="ekr.20061101121602.139"><vh>work</vh></v>
<v t="ekr.20061101121602.140"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.141"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.142"><vh>@test beginning-of-line-extend-selection</vh>
<v t="ekr.20061101121602.143"><vh>work</vh></v>
<v t="ekr.20061101121602.144"><vh>before sel=4.10,4.10</vh></v>
<v t="ekr.20061101121602.145"><vh>after sel=4.0,4.10</vh></v>
</v>
<v t="ekr.20081111084046.1"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20081111084046.2"><vh> Commands C-E</vh>
<v t="ekr.20111104171708.3847"><vh>@test c-to-python</vh>
<v t="ekr.20111104171708.3848"><vh>c tokenize test</vh></v>
</v>
<v t="ekr.20061101121602.146"><vh>@test capitalize-word</vh>
<v t="ekr.20061101121602.147"><vh>work</vh></v>
<v t="ekr.20061101121602.148"><vh>before sel=3.6,3.6</vh></v>
<v t="ekr.20061101121602.149"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20061101121602.150"><vh>@test center-line</vh>
<v t="ekr.20061101121602.151"><vh>work</vh></v>
<v t="ekr.20061101121602.152"><vh>before sel=3.0,9.0</vh></v>
<v t="ekr.20061101121602.153"><vh>after sel=3.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.154"></v>
<v t="ekr.20061101121602.158"><vh>@test clear-selected-text</vh>
<v t="ekr.20061101121602.159"><vh>work</vh></v>
<v t="ekr.20061101121602.160"><vh>before sel=2.4,4.4</vh></v>
<v t="ekr.20061101121602.161"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20120525072421.3889"><vh>@test clean-lines</vh>
<v t="ekr.20120525072421.3890"><vh>work</vh></v>
<v t="ekr.20120525072421.3891"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20120525072421.3892"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20111006105711.3544"><vh>@test clone-marked-nodes</vh></v>
<v t="ekr.20061101121602.162"><vh>@test count-region</vh>
<v t="ekr.20061101121602.163"><vh>work</vh></v>
<v t="ekr.20061101121602.164"><vh>before sel=2.4,4.8</vh></v>
<v t="ekr.20061101121602.165"><vh>after sel=2.4,4.8</vh></v>
</v>
<v t="ekr.20111120124051.3994"><vh>@test cycle-all-focus</vh></v>
<v t="ekr.20111121164644.3928"><vh>@test cycle-tab-focus</vh></v>
<v t="ekr.20061101121602.166"><vh>@test delete-char</vh>
<v t="ekr.20061101121602.167"><vh>work</vh></v>
<v t="ekr.20061101121602.168"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.169"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120750.3"><vh>@test delete-indentation</vh>
<v t="ekr.20071007121115.1"><vh>work</vh></v>
<v t="ekr.20071007121115.2"><vh>before sel=2.8,2.8</vh></v>
<v t="ekr.20071007121115.3"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20111006064419.3491"><vh>@test delete-marked-nodes</vh></v>
<v t="ekr.20070131162935"><vh>@test delete-spaces</vh>
<v t="ekr.20070131162935.1"><vh>work</vh></v>
<v t="ekr.20070131162935.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131162935.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20100830113702.5969"><vh>@test delete-word (no selection)</vh>
<v t="ekr.20100830113702.5970"><vh>work</vh></v>
<v t="ekr.20100830113702.5971"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20100830113702.5972"><vh>after sel=1.10,1.10</vh></v>
</v>
<v t="ekr.20100830113702.5977"><vh>@test delete-word (selection)</vh>
<v t="ekr.20100830113702.5978"><vh>work</vh></v>
<v t="ekr.20100830113702.5979"><vh>before sel=1.7,1.12</vh></v>
<v t="ekr.20100830113702.5980"><vh>after sel=1.7,1.7</vh></v>
</v>
<v t="ekr.20061101121602.170"><vh>@test do-nothing</vh>
<v t="ekr.20061101121602.171"><vh>work</vh></v>
<v t="ekr.20061101121602.172"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.173"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.174"></v>
<v t="ekr.20061101121602.178"><vh>@test downcase-word</vh>
<v t="ekr.20061101121602.179"><vh>work</vh></v>
<v t="ekr.20061101121602.180"><vh>before sel=1.4,1.4</vh></v>
<v t="ekr.20061101121602.181"><vh>after sel=1.4,1.4</vh></v>
</v>
<v t="ekr.20061101121602.182"><vh>@test end-of-buffer</vh>
<v t="ekr.20061101121602.183"><vh>work</vh></v>
<v t="ekr.20061101121602.184"><vh>before sel=1.3,1.3</vh></v>
<v t="ekr.20061101121602.185"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.186"><vh>@test end-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.187"><vh>work</vh></v>
<v t="ekr.20061101121602.188"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.189"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.190"><vh>@test end-of-line</vh>
<v t="ekr.20061101121602.191"><vh>work</vh></v>
<v t="ekr.20061101121602.192"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.193"><vh>after sel=1.10,1.10</vh></v>
</v>
<v t="ekr.20061128082002"><vh>@test end-of-line 2</vh>
<v t="ekr.20061128082002.1"><vh>work</vh></v>
<v t="ekr.20061128082002.2"><vh>before sel=6.0,6.0</vh></v>
<v t="ekr.20061128082002.3"><vh>after sel=6.9,6.9</vh></v>
</v>
<v t="ekr.20061101121602.194"><vh>@test end-of-line-extend-selection</vh>
<v t="ekr.20061101121602.195"><vh>work</vh></v>
<v t="ekr.20061101121602.196"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061101121602.197"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="ekr.20061101121602.198"><vh>@test exchange-point-mark</vh>
<v t="ekr.20061101121602.199"><vh>work</vh></v>
<v t="ekr.20061101121602.200"><vh>before sel=1.0,1.10</vh></v>
<v t="ekr.20061101121602.201"><vh>after sel=1.0,1.10</vh></v>
</v>
<v t="ekr.20120303054735.3931"><vh>@test expand-and-go-right</vh>
<v t="ekr.20120303054735.3932"><vh>child</vh></v>
</v>
<v t="ekr.20061101121602.202"><vh>@test extend-to-line</vh>
<v t="ekr.20061101121602.203"><vh>work</vh></v>
<v t="ekr.20061101121602.204"><vh>before sel=3.3,3.3</vh></v>
<v t="ekr.20061101121602.205"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="ekr.20061101121602.206"><vh>@test extend-to-paragraph</vh>
<v t="ekr.20061101121602.207"><vh>work</vh></v>
<v t="ekr.20061101121602.208"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.209"><vh>after sel=8.0,13.33</vh></v>
</v>
<v t="ekr.20061101121602.210"><vh>@test extend-to-sentence</vh>
<v t="ekr.20061101121602.211"><vh>work</vh></v>
<v t="ekr.20061101121602.212"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061101121602.213"><vh>after sel=1.395,3.142</vh></v>
</v>
<v t="ekr.20061101121602.214"><vh>@test extend-to-word</vh>
<v t="ekr.20061101121602.215"><vh>work</vh></v>
<v t="ekr.20061101121602.216"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.217"><vh>after sel=3.4,3.12</vh></v>
</v>
<v t="ekr.20081111082931.1"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20120212130242.3942"><vh>data</vh>
<v t="ekr.20120212130242.3948"><vh>a</vh>
<v t="ekr.20120212130242.3949"><vh>b</vh></v>
</v>
<v t="ekr.20120212130242.3945"><vh>c</vh></v>
<v t="ekr.20120212130242.3946"><vh>d</vh></v>
<v t="ekr.20120212130242.3947"><vh>e</vh>
<v t="ekr.20120212130242.3948"></v>
</v>
</v>
</v>
<v t="ekr.20070131175538.1"><vh> Commands F-L</vh>
<v t="ekr.20061101121602.218"><vh>@test fill-paragraph</vh>
<v t="ekr.20061101121602.219"><vh>work</vh></v>
<v t="ekr.20061101121602.220"><vh>before sel=3.0,3.7</vh></v>
<v t="ekr.20061101121602.221"><vh>after sel=8.33,8.33</vh></v>
</v>
<v t="ekr.20071007120750.4"><vh>@@test fill-region (one paragraph)</vh>
<v t="ekr.20071007121312.1"><vh>work</vh></v>
<v t="ekr.20071007121312.2"><vh>before sel=1.0,9.7</vh></v>
<v t="ekr.20071007121312.3"><vh>after sel=6.7,6.7</vh></v>
</v>
<v t="ekr.20071007124202"><vh>@@test fill-region (three paragraphs)</vh>
<v t="ekr.20071007124202.1"><vh>work</vh></v>
<v t="ekr.20071007124202.2"><vh>before sel=1.0,24.78</vh></v>
<v t="ekr.20071007124202.3"><vh>after sel=18.19,18.19</vh></v>
</v>
<v t="ekr.20061101121602.222"><vh>@test forward-char</vh>
<v t="ekr.20061101121602.223"><vh>work</vh></v>
<v t="ekr.20061101121602.224"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.225"><vh>after sel=1.3,1.3</vh></v>
</v>
<v t="ekr.20061101121602.226"><vh>@test forward-char-extend-selection</vh>
<v t="ekr.20061101121602.227"><vh>work</vh></v>
<v t="ekr.20061101121602.228"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20061101121602.229"><vh>after sel=1.1,1.2</vh></v>
</v>
<v t="ekr.20061101121602.230"><vh>@test forward-end-word (end of line)</vh>
<v t="ekr.20061101121602.231"><vh>work</vh></v>
<v t="ekr.20061101121602.232"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.233"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20061101121602.234"><vh>@test forward-end-word (start of word)</vh>
<v t="ekr.20061101121602.235"><vh>work</vh></v>
<v t="ekr.20061101121602.236"><vh>before sel=1.310,1.310</vh></v>
<v t="ekr.20061101121602.237"><vh>after sel=1.317,1.317</vh></v>
</v>
<v t="ekr.20061101121602.238"><vh>@test forward-end-word-extend-selection</vh>
<v t="ekr.20061101121602.239"><vh>work</vh></v>
<v t="ekr.20061101121602.240"><vh>before sel=3.20,3.20</vh></v>
<v t="ekr.20061101121602.241"><vh>after sel=3.20,3.30</vh></v>
</v>
<v t="ekr.20061101121602.242"><vh>@test forward-paragraph</vh>
<v t="ekr.20061101121602.243"><vh>work</vh></v>
<v t="ekr.20061101121602.244"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.245"><vh>after sel=15.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.246"><vh>@test forward-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.247"><vh>work</vh></v>
<v t="ekr.20061101121602.248"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20061101121602.249"><vh>after sel=10.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.250"><vh>@test forward-sentence</vh>
<v t="ekr.20061101121602.251"><vh>work</vh></v>
<v t="ekr.20061101121602.252"><vh>before sel=3.17,3.17</vh></v>
<v t="ekr.20061101121602.253"><vh>after sel=3.142,3.142</vh></v>
</v>
<v t="ekr.20061101121602.254"><vh>@test forward-sentence-extend-selection</vh>
<v t="ekr.20061101121602.255"><vh>work</vh></v>
<v t="ekr.20061101121602.256"><vh>before sel=1.264,1.264</vh></v>
<v t="ekr.20061101121602.257"><vh>after sel=1.264,1.395</vh></v>
</v>
<v t="ekr.20061101121602.258"><vh>@test forward-word</vh>
<v t="ekr.20061101121602.259"><vh>work</vh></v>
<v t="ekr.20061101121602.260"><vh>before sel=1.261,1.261</vh></v>
<v t="ekr.20061101121602.261"><vh>after sel=1.273,1.273</vh></v>
</v>
<v t="ekr.20061101121602.262"><vh>@test forward-word-extend-selection</vh>
<v t="ekr.20061101121602.263"><vh>work</vh></v>
<v t="ekr.20061101121602.264"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.265"><vh>after sel=1.395,3.0</vh></v>
</v>
<v t="ekr.20070305095401"><vh>@test goNext/PrevVisitedNode</vh></v>
<v t="ekr.20100212104817.5351"><vh>@test help-for-command</vh></v>
<v t="ekr.20061101121602.266"><vh>@test indent-relative</vh>
<v t="ekr.20061101121602.267"><vh>work</vh></v>
<v t="ekr.20061101121602.268"><vh>before sel=5.0,5.0</vh></v>
<v t="ekr.20061101121602.269"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20061101121602.270"><vh>@test indent-rigidly</vh>
<v t="ekr.20061101121602.271"><vh>work</vh></v>
<v t="ekr.20061101121602.272"><vh>before sel=2.0,5.0</vh></v>
<v t="ekr.20061101121602.273"><vh>after sel=2.0,5.1</vh></v>
</v>
<v t="ekr.20071007120750.5"><vh>@test indent-to-comment-column</vh>
<v t="ekr.20071007121312.5"><vh>work</vh></v>
<v t="ekr.20071007121312.6"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20071007121312.7"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.274"><vh>@test insert-newline</vh>
<v t="ekr.20061101121602.275"><vh>work</vh></v>
<v t="ekr.20061101121602.276"><vh>before sel=1.8,1.8</vh></v>
<v t="ekr.20061101121602.277"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20061101121602.278"><vh>@test insert-parentheses</vh>
<v t="ekr.20061101121602.279"><vh>work</vh></v>
<v t="ekr.20061101121602.280"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.281"><vh>after sel=1.6,1.6</vh></v>
</v>
<v t="ekr.20130918043621.4172"><vh>kill-line tests</vh>
<v t="ekr.20130918051958.4176"><vh>@test kill-line end-body-text</vh>
<v t="ekr.20130918051958.4177"><vh>work</vh></v>
<v t="ekr.20130918051958.4178"><vh>before sel=4.1,4.1</vh></v>
<v t="ekr.20130918051958.4179"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20061128090338"><vh>@test kill-line end-line-text</vh>
<v t="ekr.20061128090338.1"><vh>work</vh></v>
<v t="ekr.20061128090338.2"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061128090338.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090021"><vh>@test kill-line start-line</vh>
<v t="ekr.20061128090021.1"><vh>work</vh></v>
<v t="ekr.20061128090021.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090021.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090147"><vh>@test kill-line start-blank-line</vh>
<v t="ekr.20061128090147.1"><vh>work</vh></v>
<v t="ekr.20061128090147.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090147.3"><vh>after sel=3.0,3.0</vh></v>
</v>
</v>
<v t="ekr.20130918043621.4190"><vh>kill-to-end-of-line tests</vh>
<v t="ekr.20130918043621.4195"><vh>@test kill-to-end-of-line end-body-text</vh>
<v t="ekr.20130918043621.4196"><vh>work</vh></v>
<v t="ekr.20130918043621.4197"><vh>before sel=4.1,4.1</vh></v>
<v t="ekr.20130918043621.4198"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20130918050446.4202"><vh>@test kill-to-end-of-line end-line</vh>
<v t="ekr.20130918050446.4203"><vh>work</vh></v>
<v t="ekr.20130918050446.4204"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20130918050446.4205"><vh>after sel=2.6,2.6</vh></v>
</v>
<v t="ekr.20130918052416.4180"><vh>@test kill-to-end-of-line after last visible char</vh>
<v t="ekr.20130918052416.4181"><vh>work</vh></v>
<v t="ekr.20130918052416.4182"><vh>before sel=3.6,3.6</vh></v>
<v t="ekr.20130918052416.4183"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20130918043621.4199"><vh>@test kill-to-end-of-line start-line</vh>
<v t="ekr.20130918043621.4200"><vh>work</vh></v>
<v t="ekr.20130918043621.4201"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20130918043621.4202"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20130918050446.4210"><vh>@test kill-to-end-of-line start-blank-line</vh>
<v t="ekr.20130918050446.4211"><vh>work</vh></v>
<v t="ekr.20130918050446.4212"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20130918050446.4213"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20130918043621.4203"><vh>@test kill-to-end-of-line middle-line</vh>
<v t="ekr.20130918043621.4204"><vh>work</vh></v>
<v t="ekr.20130918043621.4205"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20130918043621.4206"><vh>after sel=2.2,2.2</vh></v>
</v>
</v>
<v t="ekr.20061101121602.282"></v>
<v t="ekr.20070131172706"><vh>@test kill-sentence</vh>
<v t="ekr.20070131172706.1"><vh>work</vh></v>
<v t="ekr.20070131172706.2"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20070131172706.3"><vh>after sel=1.27,1.27</vh></v>
</v>
<v t="ekr.20081215084144.7"><vh>@test kill-word</vh>
<v t="ekr.20081215084144.8"><vh>work</vh></v>
<v t="ekr.20081215084144.9"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20081215084144.10"><vh>after sel=2.7,2.7</vh></v>
</v>
<v t="ekr.20110610122533.3369"><vh>goto-global-line tests</vh>
<v t="ekr.20110610122533.3388"><vh>Tests with @auto as the root</vh>
<v t="ekr.20110610122533.3389"><vh>@test goto-line-number @auto 1</vh></v>
<v t="ekr.20110610122533.3390"><vh>@test goto-global-line @auto 2</vh></v>
<v t="ekr.20110610122533.3391"><vh>@test goto-global-line @auto 3</vh></v>
<v t="ekr.20110610122533.3392"><vh>@test goto-global-line @auto 4</vh></v>
<v t="ekr.20110610122533.3406"><vh>@test goto-global-line @auto 5</vh></v>
<v t="ekr.20110610122533.3401"><vh>@test GoToLineNumber.findRoot 1</vh></v>
</v>
<v t="ekr.20110610122533.3393"><vh>Tests with @file as the root</vh>
<v t="ekr.20110610122533.3394"><vh>@test goto-global-line @file 1</vh></v>
<v t="ekr.20110610122533.3395"><vh>@test goto-global-line @file 2</vh></v>
</v>
<v t="ekr.20110610122533.3396"><vh>Tests with @shadow as the root</vh>
<v t="ekr.20110610122533.3397"><vh>@test goto-global-line @shadow</vh></v>
</v>
<v t="ekr.20110610122533.3398"><vh>Tests with @nosent as the root</vh>
<v t="ekr.20110610122533.3399"><vh>@test goto-global-line @nosent</vh></v>
</v>
<v t="ekr.20110610122533.3404"><vh>@test goto_showResults not found</vh></v>
<v t="ekr.20110610122533.3405"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20081111084046.3"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20070131175646"><vh> Commands M-Z</vh>
<v t="ekr.20070131171218.1"><vh>@@test zap-to-chararacter</vh>
<v t="ekr.20070131171218.2"><vh>work</vh></v>
</v>
<v t="ekr.20061101121602.286"><vh>@test move-lines-down</vh>
<v t="ekr.20061101121602.287"><vh>work</vh></v>
<v t="ekr.20061101121602.288"><vh>before sel=3.3,4.3</vh></v>
<v t="ekr.20061101121602.289"><vh>after sel=4.3,5.3</vh></v>
</v>
<v t="ekr.20061101121602.290"><vh>@test move-lines-up</vh>
<v t="ekr.20061101121602.291"><vh>work</vh></v>
<v t="ekr.20061101121602.292"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.293"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20120306201833.3942"><vh>@test move-lines-up (into docstring)</vh>
<v t="ekr.20120306201833.3943"><vh>work</vh></v>
<v t="ekr.20120306201833.3944"><vh>before sel=7.1,7.1</vh></v>
<v t="ekr.20120306201833.3945"><vh>after sel=6.1,6.1</vh></v>
</v>
<v t="ekr.20111006064419.3493"><vh>@test move-marked-nodes</vh></v>
<v t="ekr.20061101121602.294"><vh>@test move-past-close</vh>
<v t="ekr.20061101121602.295"><vh>work</vh></v>
<v t="ekr.20061101121602.296"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20061101121602.297"><vh>after sel=1.12,1.12</vh></v>
</v>
<v t="ekr.20061101121602.298"><vh>@test move-past-close-extend-selection</vh>
<v t="ekr.20061101121602.299"><vh>work</vh></v>
<v t="ekr.20061101121602.300"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.301"><vh>after sel=3.7,3.11</vh></v>
</v>
<v t="ekr.20061101121602.302"><vh>@test newline-and-indent</vh>
<v t="ekr.20061101121602.303"><vh>work</vh></v>
<v t="ekr.20061101121602.304"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20061101121602.305"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20070315065720"><vh>@test next-line</vh>
<v t="ekr.20070315065720.1"><vh>work</vh></v>
<v t="ekr.20070315065720.2"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20070315065720.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070315065849"><vh>@test previous-line</vh>
<v t="ekr.20070315065849.1"><vh>work</vh></v>
<v t="ekr.20070315065849.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20070315065849.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070217071121.1"><vh>@test rectangle-clear</vh>
<v t="ekr.20070217071121.2"><vh>work</vh></v>
<v t="ekr.20070217071121.3"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.4"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.5"><vh>@test rectangle-close</vh>
<v t="ekr.20070217071121.6"><vh>work</vh></v>
<v t="ekr.20070217071121.7"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.8"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.9"><vh>@test rectangle-delete</vh>
<v t="ekr.20070217071121.10"><vh>work</vh></v>
<v t="ekr.20070217071121.11"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.12"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.17"><vh>@test rectangle-kill</vh>
<v t="ekr.20070217071121.18"><vh>work</vh></v>
<v t="ekr.20070217071121.19"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.20"><vh>after sel=5.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.13"><vh>@test rectangle-open</vh>
<v t="ekr.20070217071121.14"><vh>work</vh></v>
<v t="ekr.20070217071121.15"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.16"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.21"><vh>@test rectangle-string</vh>
<v t="ekr.20070217071121.22"><vh>work</vh></v>
<v t="ekr.20070217071121.23"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.24"><vh>after sel=2.3,5.8</vh></v>
</v>
<v t="ekr.20070217071121.25"><vh>@test rectangle-yank</vh>
<v t="ekr.20070217071121.26"><vh>work</vh></v>
<v t="ekr.20070217071121.28"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.27"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20061101121602.306"><vh>@test remove-blank-lines</vh>
<v t="ekr.20061101121602.307"><vh>work</vh></v>
<v t="ekr.20061101121602.308"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.309"><vh>after sel=1.0,6.9</vh></v>
</v>
<v t="ekr.20061101121602.310"><vh>@test remove-space-from-lines</vh>
<v t="ekr.20061101121602.311"><vh>work</vh></v>
<v t="ekr.20061101121602.312"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.313"><vh>after sel=1.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.314"><vh>@test remove-tab-from-lines</vh>
<v t="ekr.20061101121602.315"><vh>work</vh></v>
<v t="ekr.20061101121602.316"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.317"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.318"><vh>@test reverse-region</vh>
<v t="ekr.20061101121602.319"><vh>work</vh></v>
<v t="ekr.20061101121602.320"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.321"><vh>after sel=7.10,7.10</vh></v>
</v>
<v t="ekr.20071113081247"><vh>@test reverse-sort-lines</vh>
<v t="ekr.20071113081247.1"><vh>work</vh></v>
<v t="ekr.20071113081247.2"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.3"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20071113082531"><vh>@test reverse-sort-lines-ignoring-case</vh>
<v t="ekr.20071113082531.1"><vh>work</vh></v>
<v t="ekr.20071113082531.2"><vh>before sel=1.0,6.1</vh></v>
<v t="ekr.20071113082531.3"><vh>after sel=1.0,6.1</vh></v>
</v>
<v t="ekr.20111121140833.3916"><vh>@test selectToMatchingBracket</vh></v>
<v t="ekr.20071113145804.4"></v>
<v t="ekr.20071113145804.5"><vh>@test selfInsertCommand-2 (replacing tabs)</vh></v>
<v t="ekr.20071007120750.6"><vh>@test set-fill-prefix</vh></v>
<v t="ekr.20061101121602.322"><vh>@test sort-columns</vh>
<v t="ekr.20061101121602.323"><vh>work</vh></v>
<v t="ekr.20061101121602.324"><vh>before sel=1.0,6.2</vh></v>
<v t="ekr.20061101121602.325"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.326"><vh>@test sort-lines</vh>
<v t="ekr.20061101121602.327"><vh>work</vh></v>
<v t="ekr.20061101121602.328"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.329"><vh>after sel=2.0,5.6</vh></v>
</v>
<v t="ekr.20071113081247.8"><vh>@test sort-lines-ignoring-case</vh>
<v t="ekr.20071113081247.9"><vh>work</vh></v>
<v t="ekr.20071113081247.10"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.11"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20100212104817.5346"><vh>@test sort-recent-files (new)</vh></v>
<v t="ekr.20100212104817.5347"><vh>@test sort-siblings (new)</vh>
<v t="ekr.20100212104817.5348"><vh>b</vh></v>
<v t="ekr.20100212104817.5349"><vh>a</vh></v>
<v t="ekr.20100212104817.5350"><vh>c</vh></v>
</v>
<v t="ekr.20061101121602.330"><vh>@test split-line</vh>
<v t="ekr.20061101121602.331"><vh>work</vh></v>
<v t="ekr.20061101121602.332"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.333"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20061101121602.334"><vh>@test tabify</vh>
<v t="ekr.20061101121602.335"><vh>work</vh></v>
<v t="ekr.20061101121602.336"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.337"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.338"><vh>@test transpose-chars</vh>
<v t="ekr.20061101121602.339"><vh>work</vh></v>
<v t="ekr.20061101121602.340"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.341"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20061101121602.342"><vh>@test transpose-lines</vh>
<v t="ekr.20061101121602.343"><vh>work</vh></v>
<v t="ekr.20061101121602.344"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.345"><vh>after sel=2.10,2.10</vh></v>
</v>
<v t="ekr.20121016134831.3906"><vh>@test typescript-to-python</vh>
<v t="ekr.20121016134831.3907"><vh>typescript tokenize test</vh></v>
</v>
<v t="ekr.20061101121602.346"><vh>@test untabify</vh>
<v t="ekr.20061101121602.347"><vh>work</vh></v>
<v t="ekr.20061101121602.348"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.349"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.350"></v>
<v t="ekr.20061101121602.354"><vh>@test upcase-word</vh>
<v t="ekr.20061101121602.355"><vh>work</vh></v>
<v t="ekr.20061101121602.356"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.357"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20081111084046.4"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20110118082508.3729"><vh>reformat-paragraph tests</vh>
<v t="ekr.20110118082508.3793"><vh>@test reformat-paragraph list 1 of 5</vh>
<v t="ekr.20110118082508.3799"><vh>work</vh></v>
<v t="ekr.20110118082508.3800"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3803"><vh>after sel=2.21,2.21</vh></v>
</v>
<v t="ekr.20110118082508.3808"><vh>@test reformat-paragraph list 2 of 5</vh>
<v t="ekr.20110118082508.3809"><vh>work</vh></v>
<v t="ekr.20110118082508.3810"><vh>before sel=4.0,4.0</vh></v>
<v t="ekr.20110118082508.3811"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20110118082508.3816"><vh>@test reformat-paragraph list 3 of 5</vh>
<v t="ekr.20110118082508.3817"><vh>work</vh></v>
<v t="ekr.20110118082508.3818"><vh>before sel=7.0,7.0</vh></v>
<v t="ekr.20110118082508.3819"><vh>after sel=8.29,8.29</vh></v>
</v>
<v t="ekr.20110118082508.3824"><vh>@test reformat-paragraph list 4 of 5</vh>
<v t="ekr.20110118082508.3825"><vh>work</vh></v>
<v t="ekr.20110118082508.3826"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20110118082508.3827"><vh>after sel=11.28,11.28</vh></v>
</v>
<v t="ekr.20110118082508.3832"><vh>@test reformat-paragraph list 5 of 5</vh>
<v t="ekr.20110118082508.3833"><vh>work</vh></v>
<v t="ekr.20110118082508.3834"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3835"><vh>after sel=14.19,14.19</vh></v>
</v>
<v t="ekr.20131103084038.4274"><vh>@test reformat-paragraph new code 1 of 8</vh>
<v t="ekr.20131103084038.4275"><vh>work</vh></v>
<v t="ekr.20131103084038.4276"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4277"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20131103084038.4282"><vh>@test reformat-paragraph new code 2 of 8</vh>
<v t="ekr.20131103084038.4283"><vh>work</vh></v>
<v t="ekr.20131103084038.4284"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20131103084038.4285"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20131103084038.4290"><vh>@test reformat-paragraph new code 3 of 8</vh>
<v t="ekr.20131103084038.4291"><vh>work</vh></v>
<v t="ekr.20131103084038.4292"><vh>before sel=3.1,4.1</vh></v>
<v t="ekr.20131103084038.4293"><vh>after sel=3.26,3.26</vh></v>
</v>
<v t="ekr.20131103084038.4298"><vh>@test reformat-paragraph new code 4 of 8</vh>
<v t="ekr.20131103084038.4299"><vh>work</vh></v>
<v t="ekr.20131103084038.4300"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4301"><vh>after sel=2.10,2.10</vh></v>
</v>
<v t="ekr.20131103084038.4306"><vh>@test reformat-paragraph new code 5 of 8</vh>
<v t="ekr.20131103084038.4307"><vh>work</vh></v>
<v t="ekr.20131103084038.4308"><vh>before sel=1.0,2.0</vh></v>
<v t="ekr.20131103084038.4309"><vh>after sel=2.11,2.11</vh></v>
</v>
<v t="ekr.20131103084038.4314"><vh>@test reformat-paragraph new code 6 of 8</vh>
<v t="ekr.20131103084038.4315"><vh>work</vh></v>
<v t="ekr.20131103084038.4316"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4317"><vh>after sel=2.11,2.11</vh></v>
</v>
<v t="ekr.20131103084038.4322"><vh>@test reformat-paragraph new code 7 of 8</vh>
<v t="ekr.20131103084038.4323"><vh>work</vh></v>
<v t="ekr.20131103084038.4324"><vh>before sel=2.11,2.11</vh></v>
<v t="ekr.20131103084038.4325"><vh>after sel=3.1,3.1</vh></v>
</v>
<v t="ekr.20131103084038.4330"><vh>@test reformat-paragraph new code 8 of 8</vh>
<v t="ekr.20131103084038.4331"><vh>work</vh></v>
<v t="ekr.20131103084038.4332"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20131103084038.4333"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20110118082508.3766"></v>
<v t="ekr.20110118082508.3779"></v>
<v t="ekr.20110118082508.3787"></v>
<v t="ekr.20110118082508.3730"><vh>@test reformat-paragraph simple hanging indent</vh>
<v t="ekr.20110118082508.3745"><vh>work</vh></v>
<v t="ekr.20110118082508.3746"><vh>before sel= 1.0,1.0</vh></v>
<v t="ekr.20110118082508.3747"><vh>after sel= 5.8,5.8</vh></v>
</v>
<v t="ekr.20110118082508.3748"><vh>@test reformat-paragraph simple hanging indent 2</vh>
<v t="ekr.20110118082508.3754"><vh>work</vh></v>
<v t="ekr.20110118082508.3755"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20110118082508.3756"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20110118082508.3757"><vh>@test reformat-paragraph simple hanging indent 3</vh>
<v t="ekr.20110118082508.3763"><vh>work</vh></v>
<v t="ekr.20110118082508.3764"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3765"><vh>after sel=5.8,5.8</vh></v>
</v>
</v>
</v>
<v t="ekr.20061104172236.1"><vh> Function tests</vh>
<v t="ekr.20100902074747.5970"><vh>@test addAbbrevHelper</vh></v>
<v t="ekr.20061104172236.3"><vh>@test capitalizeHelper</vh></v>
<v t="ekr.20061104172236.5"><vh>@test extendHelper</vh></v>
<v t="ekr.20080408094623.1"><vh>@test findWord</vh></v>
<v t="ekr.20061104172236.2"><vh>@test findWordInLine</vh></v>
<v t="ekr.20071113145804.15"><vh>@test helpForMinibuffer</vh></v>
<v t="ekr.20061104172236.6"><vh>@test moveToHelper</vh></v>
<v t="ekr.20061110094226"><vh>@test moveUpOrDownHelper</vh></v>
<v t="ekr.20061104172236.7"><vh>@test scrollHelper</vh></v>
<v t="ekr.20061104172236.4"><vh>@test setMoveCol</vh></v>
</v>
<v t="ekr.20051107115231"><vh> Typing</vh>
<v t="ekr.20060208072415"><vh>@test Delete key sticks in body</vh></v>
<v t="ekr.20051125170139"><vh>@test Delete key sticks in headline</vh></v>
<v t="ekr.20051109091333"><vh>@test deleting the last body character text redraws the screen (and icon)</vh></v>
<v t="ekr.20051107115231.15"><vh>@test editLabel selects entire headline</vh></v>
<v t="ekr.20051120110335"><vh>@test insert-node can be undone and redone</vh></v>
<v t="ekr.20130923090601.4178"><vh>@test insert-node-before node can be undone and redone</vh></v>
<v t="ekr.20051125155134"><vh>@test inserting a new node draws the screen exactly once</vh></v>
<v t="ekr.20051107115231.18"><vh>@test paste and undo in headline - at end</vh></v>
<v t="ekr.20051107115231.20"><vh>@test paste and undo in headline - with selection</vh></v>
<v t="ekr.20051107115231.16"><vh>@test paste at end of headline</vh></v>
<v t="ekr.20060208072307"><vh>@test paste from menu into body sticks</vh></v>
<v t="ekr.20060208072331"><vh>@test paste from menu into headline sticks</vh></v>
<v t="ekr.20051107115231.24"><vh>@test paste from menu to body recolors the body</vh></v>
<v t="ekr.20051107115231.14"><vh>@test return ends editing of headline</vh></v>
<v t="ekr.20051107115231.28"><vh>@test selecting new node retains paste in headline</vh></v>
<v t="ekr.20051107115231.21"><vh>@test selecting new node retains typing in headline</vh></v>
<v t="ekr.20051107115231.17"><vh>@test typing and undo in headline - at end</vh></v>
<v t="ekr.20060208072358"><vh>@test typing in empty body text redraws the screen (and icon)</vh></v>
<v t="ekr.20051109091731"><vh>@test typing in non-empty body text does not redraw the screen</vh></v>
<v t="ekr.20051120115046"><vh>@test undoing insert node restores previous node's body text</vh></v>
<v t="ekr.20060131102450"><vh>print end of typing and undo tests</vh></v>
<v t="ekr.20051109143831"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20100131180007.5453"><vh>@test dynamicExpandHelper</vh></v>
<v t="ekr.20070306091949"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20100204165850.5371"><vh>Toggle commands</vh>
<v t="ekr.20100119102849.5108"><vh>@test toggle-extend-mode</vh>
<v t="ekr.20100119102849.5109"><vh>&lt;&lt; define table &gt;&gt;</vh></v>
<v t="ekr.20100119102849.5110"><vh>work</vh></v>
</v>
<v t="ekr.20100204165850.5373"></v>
<v t="ekr.20100204173354.5375"><vh>@test toggle-find-x</vh></v>
</v>
</v>
<v t="ekr.20061001114637"><vh>leoFileCommands</vh>
<v t="ekr.20100206165505.5386"><vh>@@test fc.handleNodeConflicts</vh></v>
<v t="ekr.20100131180007.5451"><vh>@test fc.cleanSaxInputString</vh></v>
<v t="ekr.20071113145804.18"><vh>@test fc.deleteFileWithMessage</vh></v>
<v t="ekr.20100131180007.5450"><vh>@test fc.getSaxUa</vh></v>
<v t="ekr.20100131180007.5463"><vh>@test fc.handleTnodeSaxAttributes</vh></v>
<v t="ekr.20100131180007.5460"><vh>@test fc.handleVnodeSaxAttributes</vh></v>
<v t="ekr.20080806072412.1"><vh>@test fc.resolveArchivedPosition</vh>
<v t="ekr.20080806072412.2"><vh>first child</vh></v>
<v t="ekr.20080806072412.3"><vh>second child</vh>
<v t="ekr.20080806072412.4"><vh>grandChild1</vh>
<v t="ekr.20080806080425.1"><vh>greatGrandChild11</vh></v>
<v t="ekr.20080806080425.2"><vh>greatGrandChild12</vh></v>
</v>
<v t="ekr.20080806072412.5"><vh>grandChild 2</vh>
<v t="ekr.20080806080425.3"><vh>greatGrandChild21</vh></v>
<v t="ekr.20080806080425.4"><vh>greatGrandChild22</vh></v>
</v>
</v>
</v>
<v t="ekr.20080805105541.1"><vh>@test p.archivedPosition</vh>
<v t="ekr.20080805122315.1"><vh>first child</vh></v>
<v t="ekr.20080805122315.2"><vh>second child</vh>
<v t="ekr.20080805122315.3"><vh>grandChild</vh></v>
<v t="ekr.20080805122315.4"><vh>grandChild 2</vh></v>
</v>
</v>
<v t="ekr.20080805104144.1"><vh>@test putDescendentVnodeUas</vh>
<v t="ekr.20080805104144.2"><vh>child</vh>
<v t="ekr.20080805104144.3"><vh>grandChild</vh></v>
</v>
</v>
<v t="ekr.20061001114236"><vh>@test putUa</vh></v>
<v t="ekr.20051107115231.9"><vh>@test Select a node when file is first loaded</vh></v>
<v t="ekr.20090507084947.5152"><vh>@test t.fileIndex remains the same</vh></v>
<v t="ekr.20071113202045"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113193527"><vh>leoFind</vh>
<v t="ekr.20051107115231.29"><vh>@@test Find keeps focus in body &amp; shows selected text</vh></v>
<v t="ekr.20060130151716.3"><vh>@test minibuffer find commands</vh></v>
<v t="ekr.20060130151716.2"><vh>@test set find mode commands</vh></v>
<v t="ekr.20060130151716.4"><vh>@test show-find-options</vh></v>
<v t="ekr.20060130151716.1"><vh>@test toggle find options commands</vh></v>
<v t="ekr.20071113202153"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113194424"><vh>leoFrame</vh>
<v t="ekr.20060912091510.1"><vh>@@test add-editor &amp; delete-editor</vh></v>
<v t="ekr.20090608174319.4791"><vh>@@test delete-editor</vh></v>
<v t="ekr.20061106201509.6"><vh>@test c.frame.body.getInsertLines</vh></v>
<v t="ekr.20061106201509.7"><vh>@test c.frame.body.getSelectionAreas</vh></v>
<v t="ekr.20071113145804.32"><vh>@test c.frame.body.getSelectionAreas &amp; test</vh></v>
<v t="ekr.20111121152019.3929"><vh>@test c.frame.body.updateEditors</vh></v>
<v t="ekr.20111121142012.4030"><vh>@test c.frame.log relationships</vh></v>
<v t="ekr.20111121081052.3908"><vh>@test c.frame.log.numberOfVisibleTabs</vh></v>
<v t="ekr.20111121140833.3917"><vh>@test c.frame.log.put &amp; putNl</vh></v>
<v t="ekr.20111107065245.3833"><vh>@test c.frame.minimize-all</vh></v>
<v t="ekr.20061104172236.22"><vh>@test c.frame.pasteText</vh></v>
<v t="ekr.20071113145804.33"><vh>@test c.frame.pasteText 2</vh></v>
<v t="ekr.20111107065530.3833"><vh>@test c.frame.resize-to-screen</vh></v>
<v t="ekr.20100131180007.5359"><vh>@test c.frame.tree.OnIconDoubleClick</vh></v>
<v t="ekr.20071113202153.1"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113194033.3"><vh>leoGlobals</vh>
<v t="ekr.20100131180007.5398"><vh>@test g.adjustTripleString</vh></v>
<v t="ekr.20110510054817.3476"><vh>@test g.alert</vh></v>
<v t="ekr.20040917062206"><vh>@test g.cantImport returns None</vh></v>
<v t="ekr.20060921115303"><vh>@test g.checkVersion</vh></v>
<v t="ekr.20071113143844.9"><vh>@test g.CheckVersionToInt</vh></v>
<v t="ekr.20100131180007.5428"><vh>@test g.comment_delims_from_extension</vh></v>
<v t="ekr.20071113145804.26"><vh>@test g.convertPythonIndexToRowCol</vh></v>
<v t="ekr.20071113145804.27"><vh>@test g.convertRowColToPythonIndex</vh></v>
<v t="ekr.20071113145804.21"><vh>@test g.create_temp_file</vh></v>
<v t="ekr.20100131180007.5403"><vh>@test g.ensureLeadingNewlines</vh></v>
<v t="ekr.20100131180007.5404"><vh>@test g.ensureTrailingNewlines</vh></v>
<v t="ekr.20111110073834.3843"><vh>@test g.es_print</vh></v>
<v t="ekr.20071113145804.22"><vh>@test g.es_trace</vh></v>
<v t="ekr.20140702101937.4245"><vh>@test g.find_word</vh></v>
<v t="ekr.20071113090055.5"><vh>@test g.get_directives_dict</vh></v>
<v t="ekr.20100131180007.5434"><vh>@test g.get_directives_dict 2</vh></v>
<v t="ekr.20111018163546.3690"><vh>@test g.getDocString</vh></v>
<v t="ekr.20061104172236.18"><vh>@test g.getLine</vh></v>
<v t="ekr.20071113145804.28"><vh>@test g.getScript strips crlf</vh></v>
<v t="ekr.20061104172236.11"><vh>@test g.getWord</vh></v>
<v t="ekr.20110612064437.3310"><vh>@test g.guessExternalEditor</vh></v>
<v t="ekr.20120307133953.3947"><vh>@test g.handleUrl</vh></v>
<v t="ekr.20111103213154.3824"><vh>@test g.importFromPath</vh></v>
<v t="ekr.20101021205258.6010"><vh>@test g.makeAllNonExistentDirectories</vh></v>
<v t="ekr.20111104112332.3953"><vh>@test g.os_path_finalize_join with thumb drive</vh></v>
<v t="ekr.20071113145804.19"><vh>@test g.pdb</vh></v>
<v t="ekr.20111110073528.3843"><vh>@test g.pr</vh></v>
<v t="ekr.20100212112056.5361"><vh>@test g.printGcAll</vh></v>
<v t="ekr.20100131180007.5396"><vh>@test g.removeBlankLines</vh></v>
<v t="ekr.20071113145804.29"><vh>@test g.removeExtraLws</vh></v>
<v t="ekr.20100131180007.5395"><vh>@test g.removeLeadingBlankLines</vh></v>
<v t="ekr.20100131180007.5402"><vh>@test g.removeTrailing</vh></v>
<v t="ekr.20080917151620.13"><vh>@test g.scanAtHeaderDirectives header</vh></v>
<v t="ekr.20100131180007.5435"><vh>@test g.scanAtHeaderDirectives header</vh></v>
<v t="ekr.20080917151620.14"><vh>@test g.scanAtHeaderDirectives noheader</vh></v>
<v t="ekr.20080917151620.15"><vh>@test g.scanAtLineendingDirectives cr</vh></v>
<v t="ekr.20080917151620.16"><vh>@test g.scanAtLineendingDirectives crlf</vh></v>
<v t="ekr.20080917151620.17"><vh>@test g.scanAtLineendingDirectives lf</vh></v>
<v t="ekr.20080917151620.18"><vh>@test g.scanAtLineendingDirectives nl</vh></v>
<v t="ekr.20080917151620.19"><vh>@test g.scanAtLineendingDirectives platform</vh></v>
<v t="ekr.20100131180007.5442"><vh>@test g.scanAtPagewidthDirectives -40</vh></v>
<v t="ekr.20080917151620.21"><vh>@test g.scanAtPagewidthDirectives 40</vh></v>
<v t="ekr.20080917151620.22"><vh>@test g.scanAtPathDirectives ../test/unittest/at-path-test1.py</vh>
<v t="ekr.20080917151620.23"><vh>@thin ../test/unittest/at-path-test1.py</vh></v>
</v>
<v t="ekr.20080917151620.27"><vh>@test g.scanAtPathDirectives @path ../test @path unittest @thin at-path-test3.py</vh>
<v t="ekr.20080917151620.28"><vh>@path ../test</vh>
<v t="ekr.20080917151620.29"><vh>@path unittest</vh>
<v t="ekr.20080917151620.30"><vh>@thin at-path-test3.py</vh></v>
</v>
</v>
</v>
<v t="ekr.20080917151620.24"><vh>@test g.scanAtPathDirectives @path ../test/unittest @thin at-path-test2.py</vh>
<v t="ekr.20080917151620.25"><vh>@path ../test/unittest</vh>
<v t="ekr.20080917151620.26"><vh>@thin at-path-test2.py</vh></v>
</v>
</v>
<v t="ekr.20080917151620.31"><vh>@test g.scanAtTabwidthDirectives +6</vh></v>
<v t="ekr.20080917151620.32"><vh>@test g.scanAtTabwidthDirectives -6</vh></v>
<v t="ekr.20080917151620.33"><vh>@test g.scanAtWrapDirectives nowrap</vh></v>
<v t="ekr.20080917151620.34"><vh>@test g.scanAtWrapDirectives wrap (with @wrap)</vh></v>
<v t="ekr.20080917151620.35"><vh>@test g.scanAtWrapDirectives wrap (without @nowrap)</vh></v>
<v t="ekr.20100131180007.5426"><vh>@test g.set_delims_from_language</vh></v>
<v t="ekr.20100131180007.5425"><vh>@test g.set_delims_from_string</vh></v>
<v t="ekr.20100131180007.5421"><vh>@test g.setDefaultDirectory</vh></v>
<v t="sps.20100609234650.16094"><vh>@test g.skip_blank_lines</vh></v>
<v t="ekr.20061104172236.15"><vh>@test g.skip_line</vh></v>
<v t="ekr.20061104172236.16"><vh>@test g.skip_to_end_of_line</vh></v>
<v t="ekr.20061104172236.17"><vh>@test g.skip_to_start_of_line</vh></v>
<v t="ekr.20130910062920.4149"><vh>@test g.stripBOM</vh></v>
<v t="ekr.20100131180007.5427"><vh>@test g.stripPathCruft</vh></v>
<v t="ekr.20111110072415.3841"><vh>@test g.trace</vh></v>
<v t="ekr.20050105084757.1"><vh>@test g.utils_remove</vh></v>
<v t="ekr.20050105091547"><vh>@test g.utils_rename</vh></v>
<v t="ekr.20100131180007.5429"><vh>@test g.warnOnReadOnlyFile</vh></v>
<v t="ekr.20050208135429"><vh>@test pre-definition of g in scripts</vh></v>
<v t="ekr.20071113202153.2"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20100131171342.5599"><vh>leoGui &amp; leoQtGui</vh>
<v t="ekr.20111120124051.3992"><vh>@test Ctrl-I inserts only one headline</vh></v>
<v t="ekr.20111003145300.3466"><vh>@test illegal drag gives warning</vh>
<v t="ekr.20111003145300.3467"><vh>a</vh></v>
</v>
<v t="ekr.20111123214629.3941"><vh>@test unbound Alt-9 key is completely ignored</vh></v>
<v t="ekr.20100131171342.5603"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20090529141856.4682"><vh>leoImport</vh>
<v t="ekr.20090529141856.4684"><vh> Export tests</vh>
<v t="ekr.20090529141856.4685"><vh>@suite Export tests</vh></v>
</v>
<v t="ekr.20090529141856.4698"><vh> Import tests</vh>
<v t="ekr.20090529141856.4699"><vh>@suite Import tests</vh></v>
</v>
<v t="ekr.20090529141856.4790"><vh> Test files</vh></v>
<v t="ekr.20090529141856.4716"><vh> Tests of @auto</vh>
<v t="ekr.20090529141856.4782"><vh>@test checkTrialWrite</vh></v>
<v t="ekr.20090529141856.4783"><vh>@test collapse-all</vh></v>
<v t="ekr.20090529141856.4717"><vh>C tests</vh>
<v t="ekr.20090529141856.4718"><vh>@test c class 1</vh></v>
<v t="ekr.20090529141856.4719"><vh>@test c class--underindented line</vh></v>
<v t="ekr.20090529141856.4720"><vh>@test defaultImporter</vh></v>
<v t="ekr.20090529141856.4721"><vh>@test c test--comment follows arg list</vh></v>
<v t="ekr.20090529141856.4722"><vh>@test c test--comment follows block delim</vh></v>
<v t="ekr.20090529141856.4723"><vh>@test c test--intermixed blanks and tabs</vh></v>
<v t="ekr.20090529141856.4724"><vh>@test c old-style decl 1</vh></v>
<v t="ekr.20090529141856.4725"><vh>@test c old-style decl 2</vh></v>
<v t="ekr.20090529141856.4726"><vh>@test c extern</vh></v>
</v>
<v t="ekr.20090529141856.4727"><vh>c# tests</vh>
<v t="ekr.20090529141856.4728"><vh>@test c# namespace indent</vh></v>
<v t="ekr.20090529141856.4729"><vh>@test c# namespace no indent</vh></v>
<v t="ekr.20090529141856.4730"><vh>@@test c# ref card</vh></v>
</v>
<v t="ekr.20090529141856.4731"><vh>elisp tests</vh>
<v t="ekr.20090529141856.4732"><vh>@test elisp functions</vh></v>
<v t="ekr.20090529141856.4733"><vh>@test elisp 2</vh></v>
</v>
<v t="ekr.20111029112647.4099"><vh>html tests</vh>
<v t="ekr.20111107102431.3849"><vh>@@test html whitespace bug</vh></v>
<v t="ekr.20111029112647.4101"><vh>@test html: lowercase tags</vh></v>
<v t="ekr.20111109143012.3839"><vh>@test html: multiple tags on a line</vh></v>
<v t="ekr.20140218122321.4349"><vh>@test html: multple node starts on a line</vh></v>
<v t="ekr.20111102164107.3975"><vh>@test html: underindented comment</vh></v>
<v t="ekr.20111029120441.3982"><vh>@test html: uppercase tags</vh></v>
<v t="ekr.20111112103320.3849"><vh>@test html: improperly nested tags</vh></v>
<v t="ekr.20111112103320.3887"><vh>@test html: improperly terminated tags</vh></v>
<v t="ekr.20111112103320.3893"><vh>@test html: improperly terminated tags2</vh></v>
</v>
<v t="ekr.20100803234640.5804"><vh>ini tests</vh>
<v t="ekr.20100803234640.5805"><vh>@test ini-test-1</vh></v>
</v>
<v t="ekr.20090529141856.4766"><vh>Java tests</vh>
<v t="ekr.20090529141856.4767"><vh>@test java interface test1</vh></v>
<v t="ekr.20090529141856.4768"><vh>@test java interface test2</vh></v>
<v t="ekr.20090529141856.4769"><vh>@@test constants.java</vh></v>
<v t="ekr.20090529141856.4770"><vh>@test from AdminPermission.java</vh></v>
<v t="ekr.20090529141856.4771"><vh>@@test AdminPermission.java</vh></v>
<v t="ekr.20090529141856.4773"><vh>@test from BundleException.java</vh></v>
</v>
<v t="ekr.20090529141856.4774"><vh>Javascript tests</vh>
<v t="ekr.20090529141856.4775"><vh>Problems</vh></v>
<v t="ekr.20090529141856.4776"><vh>@test Javascript-regex-1</vh></v>
<v t="ekr.20090529141856.4777"><vh>@test Javascript-2</vh></v>
<v t="ekr.20090529141856.4778"><vh>@test Javascript-3</vh></v>
<v t="ekr.20140218042220.4347"><vh>@test Javascript-4</vh></v>
<v t="ekr.20140218151418.4353"><vh>@test Javascript-5</vh></v>
</v>
<v t="ekr.20121011094154.3906"><vh>TypeScript tests</vh>
<v t="ekr.20121011094154.3911"><vh>@test TypeScript class</vh></v>
<v t="ekr.20121011100210.4035"><vh>@test TypeScript module</vh></v>
</v>
<v t="ekr.20090529141856.4734"><vh>Pascal tests</vh>
<v t="ekr.20090529141856.4735"><vh>@test pascal-to-delphi interface</vh></v>
</v>
<v t="ekr.20100219080213.5365"><vh>PHP tests</vh>
<v t="ekr.20100219080213.5366"><vh>@test php import class</vh></v>
<v t="ekr.20100219080213.5367"><vh>@test php import conditional class</vh></v>
<v t="ekr.20100219080213.5368"><vh>@test php import classes &amp; functions</vh></v>
</v>
<v t="ekr.20090529141856.4736"><vh>Python tests</vh>
<v t="ekr.20090529141856.4737"><vh>@@test nested class</vh></v>
<v t="ekr.20090529141856.4738"><vh>@test python comment after dict assign</vh></v>
<v t="ekr.20090529141856.4739"><vh>@test python decorator</vh></v>
<v t="ekr.20090529141856.4740"><vh>@test python def inside def</vh></v>
<v t="ekr.20090529141856.4741"><vh>@test docstring only</vh></v>
<v t="ekr.20090529141856.4742"><vh>@test overindent def--no following def</vh></v>
<v t="ekr.20090529141856.4743"><vh>@test overindent def--one following def</vh></v>
<v t="ekr.20090529141856.4744"><vh>@test overindented def 3</vh></v>
<v t="ekr.20090529141856.4745"><vh>@test python bad class test</vh></v>
<v t="ekr.20101101034131.6042"><vh>@test python bug 603720</vh></v>
<v t="ekr.20090529141856.4746"><vh>@test python class test 2</vh></v>
<v t="ekr.20090529141856.4747"><vh>@test python class tests 1</vh></v>
<v t="ekr.20090529141856.4748"><vh>@test python decls test 1</vh></v>
<v t="ekr.20090529141856.4749"><vh>@test python def test 1</vh></v>
<v t="ekr.20090529141856.4750"><vh>@test python def test 2</vh></v>
<v t="ekr.20090529141856.4751"><vh>@test python empty decls</vh></v>
<v t="ekr.20090529141856.4752"><vh>@test python extra leading ws test</vh></v>
<v t="ekr.20090529141856.4753"><vh>@test python indent decls</vh></v>
<v t="ekr.20090529141856.4754"><vh>@test python minimal class 1</vh></v>
<v t="ekr.20090529141856.4755"><vh>@test python minimal class 2</vh></v>
<v t="ekr.20090529141856.4756"><vh>@test python minimal class 3</vh></v>
<v t="ekr.20090529141856.4757"><vh>@test python underindent method</vh></v>
<v t="ekr.20090529141856.4758"><vh>@test scanPythonText: leoImportNosent.py</vh></v>
<v t="ekr.20090529141856.4759"><vh>@test string test: extra indent</vh></v>
<v t="ekr.20090529141856.4760"><vh>@test string underindent lines</vh></v>
<v t="ekr.20090529141856.4761"><vh>@test string underindent lines 2</vh></v>
<v t="ekr.20090529141856.4762"><vh>@test trailing comment</vh></v>
<v t="ekr.20090529141856.4763"><vh>@test trailing comment--outer levels</vh></v>
<v t="ekr.20090529141856.4764"><vh>@test two functions (for comparison with unindent does not end function)</vh></v>
<v t="ekr.20090529141856.4765"><vh>@test unindent in triple string does not end function</vh></v>
</v>
<v t="ekr.20090529141856.4780"><vh>xml tests</vh>
<v t="ekr.20090529141856.4781"><vh>@test xml 1</vh></v>
<v t="ekr.20111026105935.3966"><vh>@test xml 2</vh></v>
<v t="ekr.20120306173116.3933"><vh>@test xml non-ascii tags</vh></v>
</v>
</v>
<v t="ekr.20090529141856.4784"><vh> Tests of @auto-rst</vh>
<v t="ekr.20090529141856.4785"><vh>@test rST import test</vh></v>
<v t="ekr.20140725132959.4593"><vh>@test rST import test: simple</vh></v>
<v t="ekr.20090529141856.4786"><vh>@test rST import test: no double-underlines</vh></v>
<v t="ekr.20090529141856.4787"><vh>@test rST import test: long underlines</vh></v>
<v t="ekr.20090529141856.4788"><vh>@test rST import test: long overlines</vh></v>
<v t="ekr.20090529141856.4789"><vh>@test rST import test: trailing whitespace</vh></v>
</v>
<v t="ekr.20090529141856.4793"><vh>@@test test imports for modes</vh></v>
<v t="ekr.20140723134017.4464"><vh>@test @auto importers</vh></v>
<v t="ekr.20140724220921.5199"><vh> Tests of individual methods</vh>
<v t="ekr.20111228125719.3909"><vh>@test ic.BaseScanner.insertIgnoreDirective</vh></v>
<v t="ekr.20111110095252.3845"><vh>@test ic.compareTokens: mismatched length</vh>
<v t="ekr.20111110095252.3846"><vh>&lt;&lt; define tokens &gt;&gt;</vh></v>
</v>
<v t="ekr.20111105221757.3831"><vh>@test ic.createImportParent</vh></v>
<v t="ekr.20111214100515.3921"><vh>@test ic.createOutline: at-auto with lines that look like section references</vh></v>
<v t="ekr.20111104112332.3954"><vh>@test ic.HtmlScanner.adjust_class_ref</vh></v>
<v t="ekr.20111111074026.3972"><vh>@test ic.HtmlScanner.skipComment/Id/String</vh></v>
<v t="ekr.20140206132559.4567"><vh>@test ic.parse-body</vh>
<v t="ekr.20140206132559.4560"><vh>before</vh></v>
<v t="ekr.20140206132559.4564"><vh>expected</vh>
<v t="ekr.20140531190926.4382"><vh>class aClass</vh>
<v t="ekr.20140531190926.4383"><vh>__init__</vh></v>
<v t="ekr.20140531190926.4384"><vh>spam</vh></v>
</v>
</v>
</v>
<v t="ekr.20100131180007.5393"><vh>@test ic.reportMismatch</vh></v>
<v t="ekr.20111105065243.3837"><vh>@test ic.RstScanner.removeBlankLinesTokens (rst)</vh></v>
<v t="ekr.20111104112332.3955"><vh>@test ic.skip...Token (HtmlScanner)</vh></v>
<v t="ekr.20111104112332.3956"><vh>@test ic.skip...Token (PythonScanner)</vh></v>
<v t="ekr.20111104114406.3833"><vh>@test ic.tokenize (HtmlScanner)</vh>
<v t="ekr.20111104114406.3834"><vh>&lt;&lt; define expected &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20140724164600.4590"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20100131171342.5604"><vh>leoKeys</vh>
<v t="ekr.20100131171342.5606"><vh>@@test k.autoCompleterClass.calltip</vh></v>
<v t="ekr.20110509104953.3474"><vh>@test k.get_leo_completions</vh></v>
<v t="ekr.20111121224307.3934"><vh>@test k.handleDefaultChar from log pane</vh></v>
<v t="ekr.20100131171342.5605"><vh>@test k.isPlainKey</vh></v>
<v t="ekr.20100212110954.5359"><vh>@test k.print-bindings</vh></v>
<v t="ekr.20100131171342.5607"><vh>@test k.registerCommand</vh></v>
<v t="ekr.20100131171342.5608"><vh>@test k.strokeFromSetting</vh></v>
<v t="ekr.20100131171342.5609"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113194424.1"><vh>leoNodes</vh>
<v t="ekr.20040712101754.181"><vh> inner @test: Test consistency between parents iter and v.parents</vh>
<v t="ekr.20040712101754.182"><vh>parent</vh>
<v t="ekr.20040712101754.183"><vh>@test consistency between parents_iter and v.parents</vh></v>
</v>
</v>
<v t="ville.20090312195309.2"><vh>@@@test find_h / find_b / filter_h / filter_b</vh></v>
<v t="ekr.20040712101754.175"><vh>@@test p.t == p.v</vh></v>
<v t="ekr.20040712101754.200"><vh>@@test that clones share subtrees</vh></v>
<v t="ekr.20070611071101"><vh>@@test visback</vh>
<v t="ekr.20070611071101.1"><vh>a</vh>
<v t="ekr.20070611071101.2"><vh>b</vh>
<v t="ekr.20070611071101.3"><vh>c2</vh></v>
</v>
</v>
<v t="ekr.20070611071101.4"><vh>limit</vh>
<v t="ekr.20070611071101.5"><vh>d</vh></v>
</v>
<v t="ekr.20070611071954"><vh>e</vh></v>
</v>
<v t="ekr.20040712101754.99"><vh>@test c iters</vh>
<v t="ekr.20040712101754.100"><vh>&lt;&lt; coverage tests &gt;&gt;</vh></v>
<v t="ekr.20040712101754.101"><vh>&lt;&lt; duplicate tests &gt;&gt;</vh></v>
</v>
<v t="ekr.20090102061858.2"><vh>@test c.positionExists</vh>
<v t="ekr.20120212130242.4704"><vh>newHeadline</vh></v>
</v>
<v t="ekr.20090102062037.2"><vh>@test c.positionExists for all nodes</vh></v>
<v t="ekr.20040712101754.204"><vh>@test consistency of back/next links</vh></v>
<v t="ekr.20040712101754.201"><vh>@test consistency of c.all_positions() and p.ThreadNext()</vh></v>
<v t="ekr.20040712101754.202"><vh>@test consistency of firstChild &amp; children_iter()</vh></v>
<v t="ekr.20040712101754.203"><vh>@test consistency of level</vh></v>
<v t="ekr.20040712101754.205"><vh>@test consistency of parent &amp; parents_iter()</vh></v>
<v t="ekr.20040712101754.206"><vh>@test consistency of parent/child links</vh></v>
<v t="ekr.20040712101754.207"><vh>@test consistency of threadBack/Next links</vh></v>
<v t="ekr.20040712101754.177"><vh>@test convertTreeToString and allies</vh>
<v t="ekr.20040712101754.178"><vh>File Conversion</vh>
<v t="ekr.20040712101754.179"><vh>moreHead</vh></v>
<v t="ekr.20040712101754.180"><vh>moreBody</vh></v>
</v>
</v>
<v t="ekr.20090130133404.2"><vh>@test leoNodes properties</vh></v>
<v t="ekr.20130524112342.4137"><vh>@test new vnodes methods</vh>
<v t="ekr.20140724164208.5505"><vh>insertAsFirstChild</vh></v>
<v t="ekr.20140724164208.5507"><vh>insertAsNthChild(1)</vh></v>
<v t="ekr.20140724164208.5506"><vh>insertAsLastChild</vh></v>
</v>
<v t="ekr.20080310073711.1"><vh>@test nodeIndices.toString(None) allocates a new index</vh></v>
<v t="ekr.20041013062906"><vh>@test onHyperLinkControlClick</vh></v>
<v t="ekr.20131220083358.3982"><vh>@test p._relinkAsCloneOf</vh>
<v t="ekr.20131220083358.3983"><vh>a</vh></v>
<v t="ekr.20131220083358.3984"><vh>b</vh></v>
</v>
<v t="ekr.20100131180007.5369"><vh>@test p.adjustPositionBeforeUnlink</vh>
<v t="ekr.20100131180007.5370"><vh>node 1</vh>
<v t="ekr.20100131180007.5371"><vh>node 1-1</vh>
<v t="ekr.20100131180007.5372"><vh>node 1-1-1</vh></v>
<v t="ekr.20100131180007.5373"><vh>node 1-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5374"><vh>node 1-2</vh>
<v t="ekr.20100131180007.5375"><vh>node 1-2-1</vh></v>
<v t="ekr.20100131180007.5376"><vh>node 1-2-2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5377"><vh>node 2</vh>
<v t="ekr.20100131180007.5378"><vh>node 2-1</vh>
<v t="ekr.20100131180007.5379"><vh>node 2-1-1</vh></v>
<v t="ekr.20100131180007.5380"><vh>node 2-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5381"><vh>node 2-2</vh>
<v t="ekr.20100131180007.5382"><vh>node 2-2-1</vh></v>
<v t="ekr.20100131180007.5383"><vh>node 2-2-2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5384"><vh>node 3</vh>
<v t="ekr.20100131180007.5385"><vh>node 3-1</vh>
<v t="ekr.20100131180007.5386"><vh>node 3-1-1</vh></v>
<v t="ekr.20100131180007.5387"><vh>node 3-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5388"><vh>node 3-2</vh>
<v t="ekr.20100131180007.5389"><vh>node 3-2-1</vh></v>
<v t="ekr.20100131180007.5390"><vh>node 3-2-2</vh></v>
</v>
</v>
</v>
<v t="ekr.20040712101754.199"><vh>@test p.comparisons</vh></v>
<v t="ekr.20130703132516.4188"><vh>@test p.deletePositionsInList</vh></v>
<v t="ekr.20040712101754.209"><vh>@test p.hasNextBack</vh></v>
<v t="ekr.20040712101754.210"><vh>@test p.hasParentChild</vh></v>
<v t="ekr.20040712101754.211"><vh>@test p.hasThreadNextBack</vh></v>
<v t="ekr.20040722055040"><vh>@test p.isAncestorOf</vh></v>
<v t="ekr.20060106211922"><vh>@test p.isCurrentPosition</vh></v>
<v t="ekr.20060106211922.1"><vh>@test p.isRootPosition</vh></v>
<v t="ekr.20040712101754.188"><vh>@test p.iters and v.iters</vh>
<v t="ekr.20040712101754.189"><vh>child1</vh>
<v t="ekr.20040712101754.190"><vh>a</vh>
<v t="ekr.20040712101754.191"><vh>b</vh></v>
</v>
<v t="ekr.20040712101754.192"><vh>c</vh></v>
<v t="ekr.20040712101754.193"><vh>d</vh>
<v t="ekr.20040712101754.194"><vh>e</vh></v>
</v>
</v>
<v t="ekr.20040712101754.195"><vh>child2</vh></v>
<v t="ekr.20040712101754.196"><vh>&lt;&lt; tests of consistency of p and v iters &gt;&gt;</vh></v>
<v t="ekr.20040712101754.197"><vh>&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;</vh></v>
<v t="ekr.20040712101754.198"><vh>&lt;&lt; print nodes returned by iterators &gt;&gt;</vh></v>
</v>
<v t="ekr.20111210104652.3958"><vh>@test p.moveToFirst/LastChild</vh>
<v t="ekr.20111210104652.3959"><vh>child</vh></v>
<v t="ekr.20120212130242.4755"><vh>test</vh></v>
</v>
<v t="ekr.20131227150324.3983"><vh>@test p.moveToVisBack in a chapter</vh></v>
<v t="ekr.20140218045755.4348"><vh>@test p.nosentinels</vh></v>
<v t="ekr.20040802071519"><vh>@test p.setBodyString</vh>
<v t="ekr.20040802071519.1"><vh>child</vh></v>
</v>
<v t="ekr.20110502130500.3471"><vh>@test p.unique_nodes</vh>
<v t="ekr.20110502130500.3472"><vh>node 1</vh>
<v t="ekr.20110502130500.3473"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5391"><vh>@test v.atAutoNodeName &amp; v.atAutoRstNodeName</vh></v>
<v t="ekr.20060913084600"><vh>@test v/t.__hash__</vh></v>
<v t="ekr.20080501121449.1"><vh>Fundamental node operations (undo operations fail)</vh>
<v t="ekr.20080423110627.2"><vh>@test at most one VNode has str_leo_pos attribute</vh></v>
<v t="ekr.20080423110627.3"><vh>@test clone and move the clone to the root</vh></v>
<v t="ekr.20080503082625.3"><vh>@test delete node</vh></v>
<v t="ekr.20080423110627.13"><vh>@test deleting the root should select another node</vh></v>
<v t="ekr.20080503082625.5"><vh>@test demote</vh></v>
<v t="ekr.20080501121449.3"><vh>@test insert node</vh></v>
<v t="ekr.20080423110627.11"><vh>@test move-outline-down &amp; undo/redo</vh></v>
<v t="ekr.20080503073030.1"><vh>@test move-outline-left</vh></v>
<v t="ekr.20080503073030.2"><vh>@test move-outline-right</vh></v>
<v t="ekr.20080423110627.12"><vh>@test move-outline-up</vh></v>
<v t="ekr.20080423110627.5"><vh>@test paste-node</vh></v>
<v t="ekr.20080423110627.8"><vh>@test paste-retaining-clones</vh></v>
<v t="ekr.20080503082625.4"><vh>@test promote</vh></v>
</v>
<v t="ekr.20081001094920.2"><vh>tests for p.textOffset()</vh>
<v t="ekr.20081001094920.3"><vh>@test node that doesn't belong to a derived file</vh></v>
<v t="ekr.20081001094920.4"><vh>@test root of a derived file</vh></v>
<v t="ekr.20081001094920.5"><vh>@test organizer node</vh></v>
<v t="ekr.20081001094920.6"><vh>@test section node</vh></v>
<v t="ekr.20081001094920.7"><vh>@test "others" directive</vh></v>
</v>
<v t="ekr.20071113202452"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20140712142620.4458"><vh>leoPersistence tests</vh>
<v t="ekr.20140712142620.4537"><vh>@@@test pd.find_absolute_unl_node</vh></v>
<v t="ekr.20140712142620.4583"><vh>@@@test pd.pack &amp; pd.unpack</vh>
<v t="ekr.20140712142620.4587"><vh>clone</vh></v>
<v t="ekr.20140712142620.4585"><vh>@view test</vh>
<v t="ekr.20140712142620.4586"><vh>not a clone</vh></v>
<v t="ekr.20140712142620.4587"></v>
</v>
</v>
<v t="ekr.20140712142620.4503"><vh>@test p.sort_key</vh></v>
<v t="ekr.20140712142620.4550"><vh>@test pd.find_at_...</vh>
<v t="ekr.20140712142620.4551"><vh>root</vh>
<v t="ekr.20140712142620.4552"><vh>aClass</vh>
<v t="ekr.20140712142620.4556"><vh>clone</vh></v>
</v>
</v>
<v t="ekr.20140712142620.4556"></v>
</v>
<v t="ekr.20140712142620.4538"><vh>@test pd.find_at_persistence_node</vh></v>
<v t="ekr.20140712142620.4539"><vh>@test pd.find_position_for_relative_unl</vh>
<v t="ekr.20140712142620.4540"><vh>node1</vh>
<v t="ekr.20140712142620.4541"><vh>child11</vh></v>
<v t="ekr.20140712142620.4542"><vh>child12</vh></v>
</v>
<v t="ekr.20140712142620.4543"><vh>node2</vh>
<v t="ekr.20140712142620.4544"><vh>child21</vh></v>
<v t="ekr.20140712142620.4545"><vh>child22</vh></v>
</v>
<v t="ekr.20140715080507.4340"><vh>node3</vh>
<v t="ekr.20140715080507.4341"><vh>node3_child1</vh>
<v t="ekr.20140715080507.4339"><vh>child21</vh></v>
</v>
</v>
</v>
<v t="ekr.20140712142620.4546"><vh>@test pd.find_representative_node</vh>
<v t="ekr.20140712142620.4547"><vh>root</vh>
<v t="ekr.20140712142620.4549"><vh>clone</vh></v>
</v>
<v t="ekr.20140712142620.4549"></v>
</v>
<v t="ekr.20140712142620.4557"><vh>@test pd.has_..._node</vh>
<v t="ekr.20140712142620.4558"><vh>root</vh>
<v t="ekr.20140712142620.4559"><vh>aClass</vh>
<v t="ekr.20140712142620.4563"><vh>clone-test</vh></v>
<v t="ekr.20140712142620.4561"><vh>organizer node</vh>
<v t="ekr.20140712142620.4562"><vh>child2</vh></v>
</v>
</v>
</v>
<v t="ekr.20140712142620.4563"></v>
</v>
<v t="ekr.20140712142620.4564"><vh>@auto-rst test_rst.py</vh></v>
<v t="ekr.20140716115306.4345"><vh>@test pd.recovery_ua_for_gnx (fails)</vh></v>
<v t="ekr.20140712142620.4507"><vh>@test pd.restore_gnxs</vh>
<v t="ekr.20140712142620.4508"><vh>@gnxs</vh></v>
<v t="ekr.20140724164208.5572"><vh>node1</vh></v>
<v t="ekr.20140712142620.4510"><vh>root</vh>
<v t="ekr.20140724164208.5572"></v>
</v>
</v>
<v t="ekr.20140712142620.4574"><vh>@test pd.unl</vh></v>
<v t="ekr.20140712142620.4575"><vh>@test pd.update_before_write_foreign_file</vh>
<v t="ekr.20140712142620.4576"><vh>root</vh>
<v t="ekr.20140712142620.4577"><vh>aClass</vh>
<v t="ekr.20140712142620.4582"><vh>clone</vh></v>
</v>
<v t="ekr.20140712142620.4579"><vh>organizer node</vh>
<v t="ekr.20140712142620.4580"><vh>child1</vh></v>
<v t="ekr.20140712142620.4581"><vh>child2</vh></v>
</v>
</v>
<v t="ekr.20140712142620.4582"></v>
</v>
</v>
<v t="ekr.20100131171342.5610"><vh>leoPlugins</vh>
<v t="ekr.20100131171342.5611"><vh>@test getHandlersForTag</vh></v>
<v t="ekr.20100909082308.5990"><vh>@test regularizeName</vh></v>
</v>
<v t="ekr.20091219122958.5066"><vh>leoRst</vh>
<v t="ekr.20100813100841.5825"><vh>@@@test show_doc_parts_in_rst_mode</vh></v>
<v t="ekr.20100813100841.5847"><vh>@ignore</vh>
<v t="ekr.20100812213445.5824"><vh>@test code_mode: rst3 show_doc_parts_as_paragraphs</vh>
<v t="ekr.20100812213445.5825"><vh>source</vh>
<v t="ekr.20100812213445.5826"><vh>@rst test.html</vh>
<v t="ekr.20100812213445.5827"><vh>section</vh></v>
</v>
</v>
<v t="ekr.20100812213445.5828"><vh>expected</vh>
<v t="ekr.20100813100841.5843"><vh>rst</vh></v>
<v t="ekr.20100813100841.5844"><vh> html</vh></v>
</v>
</v>
<v t="ekr.20100813100841.5827"><vh>@test code_mode: show_leo_directives</vh></v>
<v t="ekr.20100813100841.5828"><vh>@test code_mode: show_markup_doc_parts</vh></v>
<v t="ekr.20100813100841.5829"><vh>@test code_mode: show_options_doc_parts</vh></v>
</v>
<v t="ekr.20091219121039.5065"><vh>@test c.rstCommands.handleMissingStyleSheetArgs</vh></v>
<v t="ekr.20111103213154.3823"><vh>@test c.rstCommands.writeToDocutils: pdf</vh></v>
<v t="ekr.20100131180007.5459"><vh>@test rst.initAtAutoWrite</vh></v>
<v t="ekr.20100813100841.5850"><vh>@test rst3Test @no-head</vh>
<v t="ekr.20100813100841.5854"><vh>source</vh>
<v t="ekr.20100813100841.5855"><vh>@rst test.html</vh>
<v t="ekr.20100813100841.5856"><vh>@rst-no-head section</vh></v>
</v>
</v>
<v t="ekr.20100813100841.5857"><vh>expected</vh>
<v t="ekr.20100813100841.5858"><vh>rst</vh></v>
<v t="ekr.20100813100841.5859"><vh>html</vh></v>
</v>
<v t="ekr.20100827182529.6843"><vh>got</vh>
<v t="ekr.20100827182529.6844"><vh>rst</vh></v>
<v t="ekr.20100827182529.6845"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20100812172232.5801"><vh>@test rst3Test default</vh>
<v t="ekr.20100812182942.5805"><vh>source</vh>
<v t="ekr.20100812182942.5807"><vh>@rst test.html</vh>
<v t="ekr.20100812182942.5808"><vh>section</vh></v>
</v>
</v>
<v t="ekr.20100812213445.5814"><vh>expected</vh>
<v t="ekr.20100813100841.5848"><vh>rst</vh></v>
<v t="ekr.20100813100841.5849"><vh> html</vh></v>
</v>
<v t="ekr.20100827182529.6840"><vh>got</vh>
<v t="ekr.20100827182529.6841"><vh>rst</vh></v>
<v t="ekr.20100827182529.6842"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20100813100841.5824"><vh>@test rst3Test doc_only_mode (set in headline)</vh>
<v t="ekr.20100813100841.5839"><vh>source</vh>
<v t="ekr.20100813100841.5840"><vh>@rst test.html</vh>
<v t="ekr.20100813124317.5868"><vh>@rst-option doc_only_mode=True</vh>
<v t="ekr.20100813100841.5841"><vh>section</vh></v>
</v>
</v>
</v>
<v t="ekr.20100813100841.5842"><vh>expected</vh>
<v t="ekr.20100813124317.5869"><vh>rst</vh></v>
<v t="ekr.20100813124317.5870"><vh> html</vh></v>
</v>
<v t="ekr.20100827182529.6846"><vh>got</vh>
<v t="ekr.20100827182529.6847"><vh>rst</vh></v>
<v t="ekr.20100827182529.6848"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20100813124317.5879"><vh>@test rst3Test doc_only_mode (set in options doc part)</vh>
<v t="ekr.20100813124317.5880"><vh>source</vh>
<v t="ekr.20100813124317.5881"><vh>@rst test.html</vh>
<v t="ekr.20100813124317.5883"><vh>section</vh></v>
</v>
</v>
<v t="ekr.20100813124317.5884"><vh>expected</vh>
<v t="ekr.20100813124317.5889"><vh>rst</vh></v>
<v t="ekr.20100813124317.5890"><vh> html</vh></v>
</v>
<v t="ekr.20100827182529.6849"><vh>got</vh>
<v t="ekr.20100827182529.6850"><vh>rst</vh></v>
<v t="ekr.20100827182529.6851"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20100827140832.5913"><vh>@test rst3Test show_leo_directives=False</vh>
<v t="ekr.20100827140832.5917"><vh>source</vh>
<v t="ekr.20100827140832.5918"><vh>@rst test.html</vh>
<v t="ekr.20100827140832.5919"><vh>section</vh></v>
</v>
</v>
<v t="ekr.20100827140832.5926"><vh>expected</vh>
<v t="ekr.20100827140832.5929"><vh>rst</vh></v>
<v t="ekr.20100827140832.5930"><vh>html</vh></v>
</v>
<v t="ekr.20100827182529.6852"><vh>got</vh>
<v t="ekr.20100827182529.6853"><vh>rst</vh></v>
<v t="ekr.20100827182529.6854"><vh>html</vh></v>
</v>
</v>
<v t="ekr.20120307070541.3937"><vh>@test rst3Test unicode characters</vh>
<v t="ekr.20120307070541.3941"><vh>source</vh>
<v t="ekr.20120307070541.3942"><vh>@rst test.html</vh></v>
</v>
<v t="ekr.20120307070541.3944"><vh>expected</vh>
<v t="ekr.20120307070541.3946"><vh>rst</vh></v>
<v t="ekr.20120307070541.3947"><vh>html</vh></v>
</v>
<v t="ekr.20120307070541.3945"><vh>got</vh>
<v t="ekr.20120307070541.3948"><vh>rst</vh></v>
<v t="ekr.20120307070541.3949"><vh>html</vh></v>
</v>
</v>
</v>
<v t="ekr.20090529115704.4396"><vh>leoShadow</vh>
<v t="ekr.20090529115704.4560"><vh>@@test (minitest) x.show_error</vh></v>
<v t="ekr.20090529115704.4397"><vh>@suite run @shadow-test nodes in the @shadow-tests tree</vh>
<v t="ekr.20090529115704.4398"><vh>@shadow-tests</vh>
<v t="ekr.20101023195640.6033"><vh>@shadow-test replace in node new &gt; old</vh>
<v t="ekr.20101023195640.6034"><vh>old</vh>
<v t="ekr.20101023195640.6035"><vh>node 1</vh></v>
</v>
<v t="ekr.20101023195640.6037"><vh>new</vh>
<v t="ekr.20101023195640.6038"><vh>node 1</vh></v>
</v>
</v>
<v t="ekr.20101023204543.6042"><vh>@shadow-test replace in node new &lt; old</vh>
<v t="ekr.20101023204543.6043"><vh>old</vh>
<v t="ekr.20101023204543.6044"><vh>node 1</vh></v>
</v>
<v t="ekr.20101023204543.6045"><vh>new</vh>
<v t="ekr.20101023204543.6046"><vh>node 1</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4400"><vh>@shadow-test change middle line</vh>
<v t="ekr.20090529115704.4401"><vh>old</vh></v>
<v t="ekr.20090529115704.4402"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4403"><vh>@shadow-test change first line</vh>
<v t="ekr.20090529115704.4404"><vh>old</vh></v>
<v t="ekr.20090529115704.4405"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4406"><vh>@shadow-test change last line</vh>
<v t="ekr.20090529115704.4407"><vh>old</vh></v>
<v t="ekr.20090529115704.4408"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4409"><vh>@shadow-test delete first line</vh>
<v t="ekr.20090529115704.4410"><vh>old</vh></v>
<v t="ekr.20090529115704.4411"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4412"><vh>@shadow-test delete middle line</vh>
<v t="ekr.20090529115704.4413"><vh>old</vh></v>
<v t="ekr.20090529115704.4414"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4415"><vh>@shadow-test delete last line</vh>
<v t="ekr.20090529115704.4416"><vh>old</vh></v>
<v t="ekr.20090529115704.4417"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4418"><vh>@shadow-test insert before first line</vh>
<v t="ekr.20090529115704.4419"><vh>old</vh></v>
<v t="ekr.20090529115704.4420"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4421"><vh>@shadow-test insert after first line</vh>
<v t="ekr.20090529115704.4422"><vh>old</vh></v>
<v t="ekr.20090529115704.4423"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4424"><vh>@shadow-test insert before last line</vh>
<v t="ekr.20090529115704.4425"><vh>old</vh></v>
<v t="ekr.20090529115704.4426"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4427"><vh>@shadow-test insert after last line</vh>
<v t="ekr.20090529115704.4428"><vh>old</vh></v>
<v t="ekr.20090529115704.4429"><vh>new</vh></v>
</v>
<v t="ekr.20090529115704.4430"><vh>@shadow-test-lax insert between nodes: at end of prev node</vh>
<v t="ekr.20090529115704.4431"><vh>old</vh>
<v t="ekr.20090529115704.4432"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4433"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4434"><vh>new</vh>
<v t="ekr.20090529115704.4435"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4436"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4437"><vh>@shadow-test insert between nodes: at start of next node</vh>
<v t="ekr.20090529115704.4438"><vh>old</vh>
<v t="ekr.20090529115704.4439"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4440"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4441"><vh>new</vh>
<v t="ekr.20090529115704.4442"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4443"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4444"><vh>@shadow-test delete between nodes: at end of prev node</vh>
<v t="ekr.20090529115704.4445"><vh>old</vh>
<v t="ekr.20090529115704.4446"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4447"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4448"><vh>new</vh>
<v t="ekr.20090529115704.4449"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4450"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4451"><vh>@shadow-test delete between nodes: at start of next node</vh>
<v t="ekr.20090529115704.4452"><vh>old</vh>
<v t="ekr.20090529115704.4453"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4454"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4455"><vh>new</vh>
<v t="ekr.20090529115704.4456"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4457"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4458"><vh>@shadow-test change end of prev node</vh>
<v t="ekr.20090529115704.4459"><vh>old</vh>
<v t="ekr.20090529115704.4460"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4461"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4462"><vh>new</vh>
<v t="ekr.20090529115704.4463"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4464"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4465"><vh>@shadow-test change start of next node</vh>
<v t="ekr.20090529115704.4466"><vh>old</vh>
<v t="ekr.20090529115704.4467"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4468"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4469"><vh>new</vh>
<v t="ekr.20090529115704.4470"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4471"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4472"><vh>@shadow-test-lax multiple-line insert between nodes: at end of prev node</vh>
<v t="ekr.20090529115704.4473"><vh>old</vh>
<v t="ekr.20090529115704.4474"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4475"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4476"><vh>new</vh>
<v t="ekr.20090529115704.4477"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4478"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4479"><vh>@shadow-test multiple-line insert between nodes: at start of next node</vh>
<v t="ekr.20090529115704.4480"><vh>old</vh>
<v t="ekr.20090529115704.4481"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4482"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4483"><vh>new</vh>
<v t="ekr.20090529115704.4484"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4485"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4486"><vh>@shadow-test multiple-line change end of prev node</vh>
<v t="ekr.20090529115704.4487"><vh>old</vh>
<v t="ekr.20090529115704.4488"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4489"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4490"><vh>new</vh>
<v t="ekr.20090529115704.4491"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4492"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4493"><vh>@shadow-test multiple-line change start of next node</vh>
<v t="ekr.20090529115704.4494"><vh>old</vh>
<v t="ekr.20090529115704.4495"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4496"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4497"><vh>new</vh>
<v t="ekr.20090529115704.4498"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4499"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20100107110353.5105"><vh>@shadow-test NEW multiple-NODE changes</vh>
<v t="ekr.20100107110353.5106"><vh>old</vh>
<v t="ekr.20100107110353.5107"><vh>node 1</vh></v>
<v t="ekr.20100107110353.5108"><vh>node 2</vh></v>
</v>
<v t="ekr.20100107110353.5109"><vh>new</vh>
<v t="ekr.20100107110353.5110"><vh>node 1</vh></v>
<v t="ekr.20100107110353.5111"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4500"><vh>@shadow-test multiple-line delete between nodes: at end of prev node</vh>
<v t="ekr.20090529115704.4501"><vh>old</vh>
<v t="ekr.20090529115704.4502"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4503"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4504"><vh>new</vh>
<v t="ekr.20090529115704.4505"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4506"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4507"><vh>@shadow-test multiple-line delete between nodes: at start of next node</vh>
<v t="ekr.20090529115704.4508"><vh>old</vh>
<v t="ekr.20090529115704.4509"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4510"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4511"><vh>new</vh>
<v t="ekr.20090529115704.4512"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4513"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4514"><vh>@shadow-test verbatim sentinels-delete verbatim line</vh>
<v t="ekr.20090529115704.4515"><vh>old</vh>
<v t="ekr.20090529115704.4516"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4517"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4518"><vh>new</vh>
<v t="ekr.20090529115704.4519"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4520"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4521"><vh>@shadow-test verbatim sentinels-delete verbatim line: at start of node</vh>
<v t="ekr.20090529115704.4522"><vh>old</vh>
<v t="ekr.20090529115704.4523"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4524"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4525"><vh>new</vh>
<v t="ekr.20090529115704.4526"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4527"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4528"><vh>@shadow-test verbatim sentinels-no change</vh>
<v t="ekr.20090529115704.4529"><vh>old</vh>
<v t="ekr.20090529115704.4530"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4531"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4532"><vh>new</vh>
<v t="ekr.20090529115704.4533"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4534"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4535"><vh>@shadow-test verbatim sentinels-delete verbatim line: at end of node</vh>
<v t="ekr.20090529115704.4536"><vh>old</vh>
<v t="ekr.20090529115704.4537"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4538"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4539"><vh>new</vh>
<v t="ekr.20090529115704.4540"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4541"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20090529115704.4542"><vh>@shadow-test verbatim sentinels-add verbatim line</vh>
<v t="ekr.20090529115704.4543"><vh>old</vh>
<v t="ekr.20090529115704.4544"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4545"><vh>node 2</vh></v>
</v>
<v t="ekr.20090529115704.4546"><vh>new</vh>
<v t="ekr.20090529115704.4547"><vh>node 1</vh></v>
<v t="ekr.20090529115704.4548"><vh>node 2</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20100131180007.5363"><vh>@test class MarkerClass.getDelims</vh></v>
<v t="ekr.20100131180007.5362"><vh>@test class MarkerClass.isSentinel</vh></v>
<v t="ekr.20100131180007.5361"><vh>@test class MarkerClass.isVerbatimSentinel</vh></v>
<v t="ekr.20090529115704.4550"><vh>@test x.baseDirName</vh></v>
<v t="ekr.20090529115704.4552"><vh>@test x.dirName</vh></v>
<v t="ekr.20100131180007.5366"><vh>@test x.findAtLeoLine</vh></v>
<v t="ekr.20090529115704.4557"><vh>@test x.makeShadowDirectory</vh>
<v t="ekr.20090529115704.4558"><vh>deleteShadowDir</vh></v>
</v>
<v t="ekr.20100131180007.5365"><vh>@test x.markerFromFileLines</vh></v>
<v t="ekr.20100131180007.5364"><vh>@test x.markerFromFileName</vh></v>
<v t="ekr.20090529115704.4551"><vh>@test x.pathName</vh></v>
<v t="ekr.20090529115704.4555"><vh>@@test x.rename</vh></v>
<v t="ekr.20090529115704.4559"><vh>@test x.replaceFileWithString</vh></v>
<v t="ekr.20100131180007.5367"><vh>@test x.replaceFileWithString 2</vh></v>
<v t="ekr.20090529115704.4554"><vh>@test x.shadowDirName</vh></v>
<v t="ekr.20090529115704.4553"><vh>@test x.shadowPathName</vh></v>
<v t="ekr.20090529115704.4556"><vh>@test x.unlink</vh></v>
</v>
<v t="ekr.20100131171342.5612"><vh>leoTest</vh>
<v t="ekr.20111102122424.3975"><vh>@test all unit tests have access to sources</vh></v>
<v t="ekr.20111105221757.3833"><vh>@test TM.findAllUnitTestNodes</vh></v>
<v t="ekr.20100131171342.5613"><vh>@test unit testing with embedded class</vh></v>
</v>
<v t="ekr.20071113193729"><vh>leoUndo</vh>
<v t="ekr.20040712101754.37"></v>
<v t="ekr.20071113202510"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20140802074328.4471"><vh>leoVim.py</vh>
<v t="ekr.20140802074328.4472"><vh>@test vc.on_same_line</vh></v>
<v t="ekr.20140802074328.4473"><vh>@test vc.to_bol</vh></v>
<v t="ekr.20140802074328.4474"><vh>@test vc.to_eol</vh></v>
</v>
</v>
<v t="ekr.20140922150219.7144"><vh>Clones of failed tests (run externally)</vh>
<v t="ekr.20140922150219.8512"><vh>Collective failures</vh>
<v t="ekr.20090529141856.4682"></v>
<v t="ekr.20071113194424.1"></v>
<v t="ekr.20140712142620.4458"></v>
</v>
<v t="ekr.20140922150219.8227"><vh>Pass when run individually</vh>
<v t="ekr.20121011100210.4035"></v>
</v>
<v t="ekr.20140922150219.8090"><vh>Individual failures</vh>
<v t="ekr.20080501121449.3"></v>
<v t="ekr.20131227150324.3983"></v>
<v t="ekr.20140712142620.4546"></v>
<v t="ekr.20140712142620.4557"></v>
</v>
</v>
<v t="ekr.20140922150219.4749"><vh>Passed, but...</vh>
<v t="ekr.20080503082625.3"></v>
</v>
</vnodes>
<tnodes>
<t tx="bwmulder.20050108100437.1">@killcolor

Running unit tests from test.leo is easy, provided you have enabled the
Scripting plugin. When this plugin is enabled Leo will create a blue 'script
button' in the icon bar called 'unit test'. 

- To run all unit tests, select the node in test.leo called 'Unit tests...',
then do &lt;alt-4&gt; 

- To run a single test, select an @test node and do &lt;alt-4&gt;.

- To run a suite of tests, select an @suite node and do &lt;alt-4&gt;.

- To run any other collection of tests, create an outline containing those @test
or @suite nodes, select the root of that tree and do &lt;alt-4&gt; .

Several nodes in the tree @thin ../src/leoTest.py (in test.leo) contain support
code for @test, @suite, etc. so if you want all the gory details you can read
the code. It's not complicated: Leo creates UnitTest classes automatically whose
run method is the body of the @suite or @test node.
</t>
<t tx="ekr.20040707141957.12"># Doesn't work when run externally because the copy operation changes the gnx.
if not g.app.isExternalUnitTest:

    c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20040707141957.13">Line 1

@last last line 1: no newline
</t>
<t tx="ekr.20040707141957.14">#@+leo-ver=5-thin
#@+node:ekr.20040707141957.13: * #@thin
Line 1

#@@last
#@-leo
last line 1: no newline
</t>
<t tx="ekr.20040712101754.100">v1 = [p.v for p in c.all_positions()]
v2 = [v for v in c.all_nodes()]
for v in v2: assert(v in v1)
for v in v1: assert(v in v2)

# print("coverage tests pass")
</t>
<t tx="ekr.20040712101754.101">nodes = []
for v in c.all_unique_nodes():
    assert v not in nodes
    nodes.append(v)

# print("duplicate tests pass")
</t>
<t tx="ekr.20040712101754.103">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20040712101754.104">Line 1

@last last line 1: no newline
</t>
<t tx="ekr.20040712101754.105">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@nonl
#@-node:#@file
#@-leo
last line 1: no newline
</t>
<t tx="ekr.20040712101754.106">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20040712101754.107">Line 1

@last last line 1: newline
</t>
<t tx="ekr.20040712101754.108">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@-node:#@file
#@-leo
last line 1: newline
</t>
<t tx="ekr.20040712101754.109">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20040712101754.110">Line 1

@last last line 1: two trailing newlines
</t>
<t tx="ekr.20040712101754.111">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@-node:#@file
#@-leo
last line 1: two trailing newlines
</t>
<t tx="ekr.20040712101754.175"># p.__getattr__ must be enabled for this test to work.

for p in c.all_positions():
    assert(p.t == p.v)
</t>
<t tx="ekr.20040712101754.177">p = p.firstChild()
assert(p.h=="File Conversion")
p.convertTreeToString()
</t>
<t tx="ekr.20040712101754.178">@
- convertTreeToString and moreHead can't be VNode methods because they uses level().
- moreBody could be anywhere: it may as well be a postion method.
</t>
<t tx="ekr.20040712101754.179">def moreHead (self, firstLevel,useVerticalBar=False):

    """Return the headline string in MORE format."""

    p = self

    level = self.level() - firstLevel
    plusMinus = g.choose(p.hasChildren(), "+", "-")

    return "%s%s %s" % ('\t'*level,plusMinus,p.h)
</t>
<t tx="ekr.20040712101754.180">@ 
    + test line
    - test line
    \ test line
    test line +
    test line -
    test line \
    More lines...
@c

def moreBody (self):

    """Returns the body string in MORE format.  

    Inserts a backslash before any leading plus, minus or backslash."""

    p = self ; list = []

    # Only escape the first non-blank character of the line.
    s =  p.b ; result = []
    lines = string.split(s,'\n')
    for s in lines:
        i = g.skip_ws(s,0)
        if i &lt; len(s):
            ch = s[i]
            if ch == '+' or ch == '-' or ch == '\\':
                s = s[:i] + '\\' + s[i:]
        result.append(s)
    return string.join(result,'\n')
</t>
<t tx="ekr.20040712101754.181"># The actual test is in a child node.
</t>
<t tx="ekr.20040712101754.182"></t>
<t tx="ekr.20040712101754.183">try:
    for p in c.all_positions():
        if 0: # Check all ancestors.  This is tricky and doesn't work yet.
            parents1 = [parent.v for parent in p.parents_iter()]
            parents2 = []
            parent2 = p.v.directParents()
            while parent2:
                v = parent2[0]
                parents2.append(v)
                parent2 = v.directParents()
        else:
            parents1 = p.v.parents
            parents2 = p.v.directParents()

        assert len(parents1) == len(parents2), "length mismatch: %s" % (p)
        for parent in parents1:
            assert parent in parents2, "%s not in %s" % (parent,parent1)
        for parent in parents2:
            assert parent in parents1, "%s not in %s" % (parent,parent2)

except AssertionError:
    print("parents1")
    for parent in parents1: print(parent)
    print("parents2")
    for parent in parents2: print(parent)
    raise
</t>
<t tx="ekr.20040712101754.188">import leo.core.leoNodes as leoNodes

current = c.p
child = current.firstChild()

allList = [p.v for p in c.all_positions_iter()]
vList1 = [v for v in c.p.vnodes_iter()]
vList2 = [v for v in c.p.unique_vnodes_iter()]

if 0:
    for v in vList1: print(v)
    for v in vList2: print(v)

if 0:
    print(len(allList),len(vList1),len(vList2))

if 0: # v.iters no longer exist.
    &lt;&lt; tests of consistency of p and v iters &gt;&gt;
&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;
&lt;&lt; print nodes returned by iterators &gt;&gt;
</t>
<t tx="ekr.20040712101754.189"></t>
<t tx="ekr.20040712101754.190"></t>
<t tx="ekr.20040712101754.191"></t>
<t tx="ekr.20040712101754.192"></t>
<t tx="ekr.20040712101754.193"></t>
<t tx="ekr.20040712101754.194"></t>
<t tx="ekr.20040712101754.195"></t>
<t tx="ekr.20040712101754.196">try:
    tag = "test1"
    list1 = [v for v in current.vnodes_iter()]
    list2 = [v for v in current.v.self_and_subtree_iter()]
    assert(list1==list2)

    tag = "test2"
    list1 = [p.v for p in c.all_positions_iter()]
    list2 = [v   for v in c.all_vnodes_iter()]
    assert(list1==list2)

    # print("consistency tests pass")

except AssertionError:
    print(tag)
    print("list1")
    for v in list1: print(v)
    print("list2")
    for v in list2: print(v)
    raise
</t>
<t tx="ekr.20040712101754.197">nodes = []
for v in current.unique_vnodes_iter():
    assert v not in nodes
    nodes.append(v)

nodes = []
for t in current.unique_tnodes_iter():
    assert t not in nodes
    nodes.append(t)

# print("duplicate tests pass")
</t>
<t tx="ekr.20040712101754.198">if 0:
    for v in current.vnodes_iter(): print(v)
    for v in current.unique_vnodes_iter(): print(v)

if 0: # subtree of root node:
    root = c.rootPosition()
    for v in root.vnodes_iter(): print(v)
    for t in root.tnodes_iter(): print(t)

if 0: # child1's tree.  child2 should not be included.
    for v in child.vnodes_iter(): print(v)
    for t in child.tnodes_iter(): print(t)
</t>
<t tx="ekr.20040712101754.199">copy = p.copy()
assert(p == copy)
assert(p != p.threadNext())

root = c.rootPosition()
# assert p.equal(p.copy()) is True
# assert p.equal(root) is False
assert p.__eq__(copy) is True
assert p.__ne__(copy) is False
assert p.__eq__(root) is False
assert p.__ne__(root) is True
</t>
<t tx="ekr.20040712101754.200">for p in c.all_positions():
    if p.isCloned() and p.hasChildren():
        childv = p.firstChild().v
        firstChild = p.v.children[0]
        assert childv == firstChild
</t>
<t tx="ekr.20040712101754.201">p2 = c.rootPosition()
for p in c.all_positions():
    assert p==p2, "%s != %s" % (p,p2)
    p2.moveToThreadNext()

assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.202">for p in c.all_positions():
    p2 = p.firstChild()
    for p3 in p.children_iter():
        assert p3==p2, "%s != %s" % (p3,p2)
        p2.moveToNext()

assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.203">for p in c.all_positions():

    if p.hasParent():
        assert(p.parent().level() == p.level() - 1)

    if p.hasChildren():
        assert(p.firstChild().level() == p.level() + 1)

    if p.hasNext():
        assert(p.next().level() == p.level())

    if p.hasBack():
        assert(p.back().level() == p.level())
</t>
<t tx="ekr.20040712101754.204">for p in c.all_positions():

    back = p.back()
    next = p.next()
    if back: assert(back.getNext() == p)
    if next: assert(next.getBack() == p)
</t>
<t tx="ekr.20040712101754.205">for p in c.all_positions():
    p2 = p.parent()
    for p3 in p.parents_iter():
        assert p3==p2, "%s != %s" % (p3,p2)
        p2.moveToParent()

    assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.206"># Test consistency of p.parent, p.next, p.back and p.firstChild.
for p in c.all_positions():

    if p.hasParent():
        n = p.childIndex()
        assert(p == p.parent().moveToNthChild(n))

    for child in p.children_iter():
        assert(p == child.parent())

    if p.hasNext():
        assert(p.next().parent() == p.parent())

    if p.hasBack():
        assert(p.back().parent() == p.parent())
</t>
<t tx="ekr.20040712101754.207">for p in c.all_positions():

    threadBack = p.threadBack()
    threadNext = p.threadNext()

    if threadBack:
        assert(p == threadBack.getThreadNext())

    if threadNext:
        assert(p == threadNext.getThreadBack())
</t>
<t tx="ekr.20040712101754.209">for p in c.all_positions():

    back = p.back()
    next = p.next()

    assert(
        (back and p.hasBack()) or
        (not back and not p.hasBack()))

    assert(
        (next and p.hasNext()) or
        (not next and not p.hasNext()))
</t>
<t tx="ekr.20040712101754.210">for p in c.all_positions():

    child = p.firstChild()
    parent = p.parent()

    assert(
        (child and p.hasFirstChild()) or
        (not child and not p.hasFirstChild()))

    assert(
        (parent and p.hasParent()) or
        (not parent and not p.hasParent()))
</t>
<t tx="ekr.20040712101754.211">for p in c.all_positions():

    threadBack = p.getThreadBack()
    threadNext = p.getThreadNext()

    assert(
        (threadBack and p.hasThreadBack()) or
        (not threadBack and not p.hasThreadBack()))

    assert(
        (threadNext and p.hasThreadNext()) or
        (not threadNext and not p.hasThreadNext()))
</t>
<t tx="ekr.20040712101754.37"># Create unit tests in g.app.scriptDict["suite"]

suite = c.testManager.makeEditBodySuite(p)

# g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20040712101754.38">@language plain
@

The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two or more children:

- a "before" node
- an "after" node
- an optional selection node containing two lines giving the selection range in Tk coordinates.
- An optional insert node containing one line giving the insert point in Tk coordinates.
</t>
<t tx="ekr.20040712101754.49"></t>
<t tx="ekr.20040712101754.50">line 1
    line 2
    line 3
line 4
</t>
<t tx="ekr.20040712101754.51">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20040712101754.52">2.0
3.5
</t>
<t tx="ekr.20040712101754.99">&lt;&lt; coverage tests &gt;&gt;
&lt;&lt; duplicate tests &gt;&gt;

if 0:
    print("vnodes",len([v for v in c.all_vnodes_iter()]),len([v for v in c.all_unique_vnodes_iter()]))
    print("tnodes",len([t for t in c.all_tnodes_iter()]),len([t for t in c.all_unique_tnodes_iter()]))

if 0: # all nodes
    for v in c.all_vnodes_iter(): print(v)
    for t in c.all_tnodes_iter(): print(t)

if 0: # unique nodes
    for v in c.all_unique_vnodes_iter(): print(v)
    for t in c.all_unique_tnodes_iter(): print(t)
</t>
<t tx="ekr.20040713070526">@language python 

dump = False 
all = False 

tm = c.testManager

if all:
    c.prettyPrintAllPythonCode(dump=dump)
else:
    # Warning: at present the before and after text is unprotected:
    # Running Pretty Print on these nodes will negate the value of the test.
    temp = tm.findNodeInTree(p,"tempNode")
    c.setBodyString(temp,"")
    before = tm.findNodeInTree(p,"before")
    after = tm.findNodeInTree(p,"after")
    temp.scriptSetBodyString(before.b)
    c.prettyPrintPythonCode(p=temp,dump=dump)
    assert temp.b == after.b,"Pretty Print Test failed"
</t>
<t tx="ekr.20040713123617">@ This is a test of stuff.in doc parts.

         I wonder what will happen.
@c

def spam (self):

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a == 3:
        g.pr("Ä á Û")

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
</t>
<t tx="ekr.20040713123828.1">@ This is a test of stuff.in doc parts.

         I wonder what will happen.
@c

def spam (self):

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a == 3:
        g.pr("Ä á Û")

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
</t>
<t tx="ekr.20040722055040">for p in c.all_positions():

    child = p.firstChild()
    while child:
        for parent in p.self_and_parents_iter():
            assert parent.isAncestorOf(child)
        child.moveToNext()

    next = p.next()
    assert not p.isAncestorOf(next)
</t>
<t tx="ekr.20040802065214"># Make sure that changing this headline marks descendant @thin nodes dirty.
h = p.h

try:
    child = p.firstChild()
    child.initHeadString("@thin bogus")
    assert child.h == "@thin bogus", "setting headline failed"
    child.clearDirty()
    assert not child.isDirty(), "clearing dirty failed"
    c.setHeadString(p,"changed")
    assert child.isDirty(), "setting descendant @thin nodes dirty failed."
finally:
    try:
        c.setHeadString(p,h)
        c.setHeadString(child,"bogus")
        p.clearDirty()
        child.clearDirty()
    finally: pass

#### c.redraw()
</t>
<t tx="ekr.20040802065214.1">test
</t>
<t tx="ekr.20040802071519"># Tests that c.setBodyString works immediately.
h = p.h

try:
    w = c.frame.body.wrapper
    child = p.firstChild()
    before = child.b
    after = "after"
    c.setBodyString(child,"after")
    c.selectPosition(child)
    s = w.get("1.0","end")
    assert s.rstrip() == after.rstrip(), 'expected %s, got %s' % (
        repr(after),repr(s))
finally:
    c.setBodyString(child,before)
    c.selectPosition(p)
</t>
<t tx="ekr.20040802071519.1">before
</t>
<t tx="ekr.20040917062206">assert(g.cantImport("xyzzy","during unit testing") is None)
</t>
<t tx="ekr.20041013062906"># This hack is needed only for tkinter gui.
if g.app.gui.guiName() == 'tkinter':
    p.OnHyperLinkControlClick(event=None)
</t>
<t tx="ekr.20041019124050">test1 = p.firstChild()
test2 = p.firstChild().next()

c.prettyPrintPythonCode(p=test2,dump=False)

assert(test2.b==test1.b)
</t>
<t tx="ekr.20041019124050.1">"""
line 1
line 2
line 3
"""
</t>
<t tx="ekr.20041019124050.2">"""
line 1
line 2
line 3
"""
</t>
<t tx="ekr.20041021065844">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20041021065844.1"># Test that @nosent generates no sentinels

&lt;&lt; section &gt;&gt;

@others

last line
section line 1
unnamed node line 1
</t>
<t tx="ekr.20041021065903"># Test that @nosent generates no sentinels

&lt;&lt; section &gt;&gt;

@others

last line
</t>
<t tx="ekr.20041021065903.1">section line 1
</t>
<t tx="ekr.20041021065903.2">unnamed node line 1
</t>
<t tx="ekr.20041121151002"></t>
<t tx="ekr.20050105084757.1">import os

exists = g.os_path_exists

path = g.os_path_join(g.app.testDir,'xyzzy')
if exists(path):
    os.remove(path)

assert not exists(path)
assert not g.utils_remove(path,verbose=False)

f = open(path,'w')
f.write('test')
f.close()

assert exists(path)
assert g.utils_remove(path,verbose=True)
assert not exists(path)
</t>
<t tx="ekr.20050105091547">import os

exists = g.os_path_exists
path = g.os_path_join(g.app.testDir,'xyzzy')
path2 = g.os_path_join(g.app.testDir,'xyzzy2')

# Create both paths.
for p in (path,path2):
    if exists(p):
        os.remove(p)
    assert not exists(p)
    f = open(p,'w')
    f.write('test %s' % p)
    f.close()
    assert exists(p)

assert g.utils_rename(c,path,path2) #,verbose=True)
assert exists(path2)
f = open(path2)
s = f.read()
f.close()
# print('Contents of %s: %s' % (path2,s))
assert s == 'test %s' % path
os.remove(path2)
assert not exists(path)
</t>
<t tx="ekr.20050105093136">import os

at = c.atFileCommands
exists = g.os_path_exists

path = g.os_path_join(g.app.testDir,'xyzzy')
if exists(path):
    os.remove(path)

assert not exists(path)
assert not at.remove(path,verbose=False)

f = open(path,'w')
f.write('test')
f.close()

assert exists(path)
assert at.remove(path)
assert not exists(path)
</t>
<t tx="ekr.20050105093524">import os

at = c.atFileCommands
exists = g.os_path_exists
path = g.os_path_join(g.app.testDir,'xyzzy')
path2 = g.os_path_join(g.app.testDir,'xyzzy2')

# Create both paths.
for p in (path,path2):
    if exists(p):
        os.remove(p)
    assert not exists(p)
    f = open(p,'w')
    f.write('test %s' % p)
    f.close()
    assert exists(p)

assert at.rename(path,path2,verbose=True)
assert exists(path2)
f = open(path2)
s = f.read()
f.close()
# print('Contents of %s: %s' % (path2,s))
assert s == 'test %s' % path
os.remove(path2)
assert not exists(path)
</t>
<t tx="ekr.20050105094311">import os
import leo.core.leoAtFile as leoAtFile
at = c.atFileCommands
exists = g.os_path_exists
at.outputFileName = None
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2')
try:
    # Create both paths (different contents)
    table = (at.targetFileName,)
    at.outputContents = contents = g.toUnicode('test contents')
    for fn in table:
        if fn and exists(fn):
            os.remove(fn)
        assert not exists(fn)
        f = open(fn,'w')
        s = 'test %s' % fn
        f.write(s)
        f.close()
        assert exists(fn),fn
    at.toString = False # Set by execute script stuff.
    at.shortFileName = at.targetFileName
    val = at.replaceTargetFileIfDifferent(at.root)
    assert val
    if 0:
        print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
        print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
    assert not exists(at.outputFileName), 'oops, output file exists'
    assert exists(at.targetFileName), 'oops, target file does not exist'
    f = open(at.targetFileName)
    s = f.read()
    f.close()
    assert s == contents,s
finally:
    if 1:
        for fn in (at.outputFileName,at.targetFileName):
            if fn and exists(fn):
                os.remove(fn)
</t>
<t tx="ekr.20050105095743">import os
import leo.core.leoAtFile as leoAtFile
at = c.atFileCommands
exists = g.os_path_exists
at.outputFileName = None
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2')
# Create both paths (identical contents)
contents = g.toUnicode('test contents')
try:
    table = (at.targetFileName,)
    at.outputContents = contents
    for fn in table:
        if fn and exists(fn):
            os.remove(fn)
        assert not exists(fn)
        f = open(fn,'w')
        f.write(contents)
        f.close()
        assert exists(fn)
    at.toString = False # Set by execute script stuff.
    at.shortFileName = at.targetFileName
    assert not at.replaceTargetFileIfDifferent(at.root)
    if 0:
        print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
        print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
    assert not exists(at.outputFileName)
    assert exists(at.targetFileName)
    f = open(at.targetFileName)
    s = f.read()
    f.close()
    assert s == contents,contents
finally:
    if 1:
        for fn in (at.outputFileName,at.targetFileName):
            if fn and exists(fn):
                os.remove(fn)
</t>
<t tx="ekr.20050105100227">import os
import leo.core.leoAtFile as leoAtFile
at = c.atFileCommands
exists = g.os_path_exists
at.outputFileName = None ### g.os_path_join(g.app.testDir,'xyzzy1.txt')
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2.txt')
# Remove both files.
for fn in (at.outputFileName,at.targetFileName):
    if fn and exists(fn):
        os.remove(fn)
try:
    # Create the output file or contents.
    at.outputContents = contents = g.toUnicode('test output')
    at.toString = False # Set by execute script stuff.
    at.shortFileName = at.targetFileName
    val = at.replaceTargetFileIfDifferent(at.root)
    assert not val
    if 0:
        print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
        print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
    assert not exists(at.outputFileName),at.outputFileName
    assert exists(at.targetFileName),at.targetFileName
    f = open(at.targetFileName)
    s = f.read()
    f.close()
    assert s == contents,'%s len(%s)' % (fn,len(s))
finally:
    if 1:
        for fn in (at.outputFileName,at.targetFileName):
            if fn and exists(fn):
                os.remove(fn)
</t>
<t tx="ekr.20050112095306.1"></t>
<t tx="ekr.20050203001146">assert c.page_width == c.config.getInt('page_width'),c.page_width
</t>
<t tx="ekr.20050203084930.1">w = g.app.config.get('global_setting_for_unit_tests','int')

assert w in (None,132) # Will be None when tests run dynamically.
</t>
<t tx="ekr.20050208135429"># print(g.listToString(dir()))

for ivar in ('c','g','p'):
    assert ivar in dir()
</t>
<t tx="ekr.20050328101834"></t>
<t tx="ekr.20050328101834.1"></t>
<t tx="ekr.20050328101834.2"></t>
<t tx="ekr.20050328101834.3"></t>
<t tx="ekr.20050417201845"></t>
<t tx="ekr.20050417201845.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050417201845.2">before
    &lt;&lt; section &gt;&gt;
after
</t>
<t tx="ekr.20050417201845.3">sec line 1
    sec line 2 indented
sec line 3
</t>
<t tx="ekr.20050417201845.4">2.0
5.10
</t>
<t tx="ekr.20050417202713"></t>
<t tx="ekr.20050417202713.1">@language python

def addCommentTest():

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20050417202713.2">@language python

def addCommentTest():

    # if 1:
        # a = 2
        # b = 3

    pass
</t>
<t tx="ekr.20050417202713.3">5.0
7.8
</t>
<t tx="ekr.20050417202817"># created by new add-comments
</t>
<t tx="ekr.20050417202817.1">@language python

def deleteCommentTest():

#     if 1:
#         a = 2
#         b = 3

    pass
</t>
<t tx="ekr.20050417202817.2">@language python

def deleteCommentTest():

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20050417202817.3">5.0
7.8
</t>
<t tx="ekr.20050417203114"></t>
<t tx="ekr.20050417203114.1"></t>
<t tx="ekr.20050417203310">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417203310.1">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417203336">1.0
6.5
</t>
<t tx="ekr.20050417204830">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417204834">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417204901">1.0
6.5
</t>
<t tx="ekr.20050417204940"></t>
<t tx="ekr.20050417204940.1">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417204940.2">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417204940.3">1.0
6.5
</t>
<t tx="ekr.20050417205012"></t>
<t tx="ekr.20050417205012.1">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417205012.2">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417205012.3">1.0
6.5
</t>
<t tx="ekr.20050512083807.1">marks = [p.v for p in c.all_positions() if p.isMarked()]
try:
    ok = True
    try:
        c.markAllAtFileNodesDirty()
    except Exception:
        ok = False
finally:
    for p in c.all_positions():
        if p.v in marks:
            if not p.isMarked():
                c.setMarked(p)
        else:
            if p.isMarked():
                c.clearMarked(p)

if not ok: raise
</t>
<t tx="ekr.20050512083822.1">marks = [p.v for p in c.all_positions() if p.isMarked()]
try:
    ok = True
    try:
        c.markSubheads()
    except Exception:
        ok = False
finally:
    for p in c.all_positions():
        if p.v in marks:
            if not p.isMarked():
                c.setMarked(p)
        else:
            if p.isMarked():
                c.clearMarked(p)

if not ok: raise
</t>
<t tx="ekr.20050512083822.2">marks = [p.v for p in c.all_positions() if p.isMarked()]
try:
    ok = True
    try:
        c.unmarkAll()
    except Exception:
        ok = False
finally:
    for p in c.all_positions():
        if p.v in marks:
            if not p.isMarked():
                c.setMarked(p)
        else:
            if p.isMarked():
                c.clearMarked(p)

if not ok: raise
</t>
<t tx="ekr.20050512084850">errors = c.checkOutline(verbose=False,unittest=True,full=True) # Run full check.

assert errors == 0, "Check Outline reported %d errors" % errors
</t>
<t tx="ekr.20050512084850.1">pass
</t>
<t tx="ekr.20050512084850.2">pass
</t>
<t tx="ekr.20050518070540"></t>
<t tx="ekr.20050518070540.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070540.4">2.0
2.16
</t>
<t tx="ekr.20050518070545">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070927"></t>
<t tx="ekr.20050518070927.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070927.2">before
    &lt;&lt; section &gt;&gt;
after
</t>
<t tx="ekr.20050518070927.3">sec line 1
    sec line 2 indented
sec line 3
</t>
<t tx="ekr.20050518070927.4">2.0
5.10
</t>
<t tx="ekr.20050518071251"></t>
<t tx="ekr.20050518071251.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518071251.4">2.0
2.16
</t>
<t tx="ekr.20050518071258">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050618061835">@killcolor

Here is a tutorial written by Roger Erens.

Version Date        LeoID       Remarks
------- ----        -----       -------
0.1     20050519    rogererens  Initial version</t>
<t tx="ekr.20050618061835.1">So you think "Well, since I've written this piece of funky Python software, and everybody keeps saying how useful unit testing is, I really ought to start using unit tests." And since Leo's creator has said countless times in the Leo forums how easy unit testing in Leo is, a few uncomplicated examples might help convince you that he's not spamming.

Beware: this How-To should be the last time that you write tests AFTER having written your funky software! Test Driven Development dictates that tests have to be prepared BEFORE you get down to writing your actual code. See a nice tutorial on O'Reilly's website (url given in the descendant node).</t>
<t tx="ekr.20050618061835.10">Start of Do @test
F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Documents and Settings\re1705\My Documents\PythonStuff\leo\src\leoTes
t.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.010s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.11">A real fun feature of Leo is that Leo saves you from having to select each and single @test node and press the 'Do @test' button to obtain testing results. Just collecting the @test nodes under an organizing node, selecting that organizing node, and pressing the 'Do @test' button will suffice.
Of course, this was one of the key ideas of unit testing, but it's nice to see it being implemented by Leo so smoothly!

So, press the button while having this node selected, and see if your console's output matches the third child node more or less. </t>
<t tx="ekr.20050618061835.12">Start of Do @test
.F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 2 tests in 0.040s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.13">Okay: so you've seen now some simple stand-alone tests to get your toes wet.
Now, we get to the 'grande finale' and see real-life usage of the @test nodes.

The @test child node below illustrates the following points:

1.  The node imports the module to test (and keeps it up to date by reloading it).
2.  It also obtains data to use as input and referral. This is what you might call
    the setUp methods in traditional unit tests. If more tests need the same data,
    you can put the nodes in a central place where all the @test nodes can find
    them. Likewise, common code for several unit tests might be collected in a
    central place.
3.  Comparable with the traditional unit tests' tearDown method, some statements
    can follow the test itself, if neccessary. You might also consider using a
    try/finally construct.
4.  I have used g.es() statements instead of print statements, since the latter
    clutter the console. Try replacing the g.es() statements by corresponding
    print statements to see what I mean. With more than one @test node being tested,
    this will give quite a dreadful look.</t>
<t tx="ekr.20050618061835.14">@color

try:
    # SETUP
    import koekiemonster # this module defines a function want() which we want to test
    reload(koekiemonster) # changes in koekiemonster need to propagate to the test

    # obtaining the input parameter for the function
    inputNode = p.firstChild()
    inputData = inputNode.b
    
    # obtaining the expected result from the function with above input parameter
    expectedResultNode = inputNode.next()
    expected = expectedResultNode.b
    
    # execute the function with above input parameter
    result = koekiemonster.wants(inputData)
    
    # TEST
    assert(result == expected)
    
    # TEARDOWN
    g.es("Now it's time to clean up")

except AssertionError:
    # TEARDOWN
    g.es("Oh oh! %s failed:" % p.h.strip())
    g.es("koekiemonster.wants(%s)==%s" % (inputData, result))
    g.es("Expected: %s" % expected)
    raise # pass the exception on to the unit test machinery</t>
<t tx="ekr.20050618061835.15">vegetables</t>
<t tx="ekr.20050618061835.16">Yuck!</t>
<t tx="ekr.20050618061835.17">Start of Do @test
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.070s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.18">Start of Do @test
Oh oh: @test koekiemonster.wants() failed:
koekiemonster.wants(vegetables)=Yack!
Expected: Yuck!
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.051s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.19">With the aforementioned possibilities of running all @test nodes in a subtree
with a single click on a button, the sharing of input/expected data, and the
sharing of setUp/tearDown code, there hardly seems a need for the @suite nodes.

On Leo's website
(http://webpages.charter.net/edreamleo/scripting.html#unit-testing-with-test-and-suite)
I could still find some extra info on @suite nodes, not found in LeoDocs.leo:

&lt;quote&gt;

Using @suite nodes

Such nodes create a suite of tests. Leo executes the script in these nodes similar to @test nodes, but Leo assumes that the script in an @suite node will do the following:

    * Create a suite of unit tests
    * Put the suite in g.app.scriptDict["suite"]

The difference between @test and @suite is:

    * Leo creates a unit test from script in an @test node by creating an instance of generalTestCase, a subclass of unittest.TestCase.
    * The script in an @suite node creates the test suite.

An @suite nodes allows us to create "legacy" unit tests simply. For example,
rather than rewriting all the reformatParagraph unit tests to use @test nodes, I
simply wrote an @suite node with the following body.

    suite = c.testManager.makeReformatParagraphSuite()
    g.app.scriptDict['suite'] = suite

&lt;/quote&gt;

Well, that's almost, but not quite completely, totally incomprehensible to me.
Fortunately, since Leo's creator removed most of this quote from LeoDocs.leo and
test.leo, this information appears to be outdated
.</t>
<t tx="ekr.20050618061835.2"></t>
<t tx="ekr.20050618061835.20">Don't forget to read the node
Users Guide--&gt;Chapter 7: Scripting Leo with Python--&gt;Unit testing with @test, @suite
in LeoDocs.leo, especially the final notes. Also investigate a little further in test.leo to see some heavy weight lifting.

This concludes my How-To on using @test. It was not written by an expert on (unit) testing;
it is more or less the result of keeping notes on my way to find out how I could get started
with unit tests in Leo. Maybe it's useful for other newbies as well.

Please post any remarks on one of the Leo Fora, and if deemed helpful, I'll be glad to incorporate them into a next version.

Happy testing!</t>
<t tx="ekr.20050618061835.3">Comment by EKR: There is no need to do this if you use test.leo for your unit tests:  just use the unit test button.

From the console, start up a Leo instance. On MS Windows: go to the folder in which you installed Leo 4.3, open up the 'src' folder and double click the 'leo.py' file. Opening a command window, and typing "python leo.py" may be another way.

Use the File--&gt;Open... menu item to open the outline containing your code.

Choose a good-looking position to insert a new node called 'Test zone'. Copy the child node of the node you're reading right now, and paste it as a child node of 'Test zone'. The code it contains is essentially the same as found in the node
Unit tests...--&gt;Do @test
in the file 'test.leo' in the 'test' folder. I just added my 0.2 cents by adding some starting and finishing remarks. Remove them if they clutter your console too much.

Also, make sure that you have an entry 'Scripting' in the 'Plugins' menu (enable the plugin if neccessary). Now is a good time to save your leo file.

With the 'Scripting' plugin (also known as the 'mod_scripting' plugin) enabled, the net effect will be that the next time you open your outline, a blue button with the caption 'Do @test' shows up in the tool bar of Leo, if your screen is wide enough.
To get the button right away in the tool bar, I have to assume that you started Leo with the scripting plugin enabled. In this case, a yellow button with the caption 'script Button' can be pressed while having the node '@button Do @test' selected. Note: the resulting button will not be blue, but pink. Removing a button from the tool bar can be done by right-clicking it.

We'll see the use of this added button soon, but before that, read up on the 'assert' function in the Python manuals, since it is used a lot in testing. It won't be long before you're back here!</t>
<t tx="ekr.20050618061835.4">@color

g.pr("\nStart of Do @test")
c.testManager.doTests(all=False)
g.pr("End of Do @test")</t>
<t tx="ekr.20050618061835.5">The first child node of the node you're reading right now, contains the simplest succeeding test possible.
Select it, and press the button 'Do @test'.
You can find the verbatim result as it got sent to my console in the second child node.

A few things are worth noting here:

1.  The node containing the test must have its headline start with '@test'.
2.  Whenever the 'assert' statement finds out that the expression given to it
    is 'True', a test passes successfully. There are more ways to pass a test, but
    for now, let us stick to the use of assert functions.
3.  A passed test is denoted with a single dot in the output. See the line between
    'Start of Do @test' and the line filled with dashes. This is compatible with the
    way traditional unit testing shows its progress.
4.  Below the dashed line in the output, a summary is printed. This one surely gives
    us a reason to lean back for a moment, and congratualate ourselves with another
    piece of robust, funky code!</t>
<t tx="ekr.20050618061835.6">@color
assert(True)</t>
<t tx="ekr.20050618061835.7">Start of Do @test
.
----------------------------------------------------------------------
Ran 1 test in 0.010s

OK
End of Do @test</t>
<t tx="ekr.20050618061835.8">Now that you've seen a passing test, it should be obvious to imagine how a failing test would look like. See the first child node, and then run it by pressing the 'Do @test' button as before.

Instead of a dot denoting success, we get an 'F' denoting a failure on the line following 'Start of Do @test'. When running a lot of tests, the next part, following the lines filled with '='s, helps to identify which test failed.
It also includes a trace back, but for AssertionErrors, it does not seem to offer much added value to me right now. On second thought: when you have multiple asserts in a test, the trace back can tell you which assert function failed. Still, I would choose for only one assert function per test and get rid of this trace back altogether. This would keep the console much cleaner, IMHO.</t>
<t tx="ekr.20050618061835.9">@color
assert('Spam' == 'Ham')</t>
<t tx="ekr.20050726141158">@ This is    a test of stuff.in doc parts.

         I wonder           what will happen.
@c

def        spam (self         )  :   

    """ This is a ' triple'   quoted string:
        It should remain untouched."""

    if a==3:
        g.pr("Ä á Û")

    ''' Another ' triple'   quoted string:
        It should remain untouched.'''

    "yet another\
    multi-line string"

class eggs:

    """ A typical doc string """

    @others
</t>
<t tx="ekr.20051012104957"></t>
<t tx="ekr.20051013162226"></t>
<t tx="ekr.20051107115231"># These are mysteriously fragile tests, so they go first
</t>
<t tx="ekr.20051107115231.14">h = '@test return ends editing of headline'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
guiName = g.app.gui.guiName()
wName = g.app.gui.widget_name(w)
assert wName.startswith('head'),'w.name:%s' % wName
g.app.gui.event_generate(c,'\n','Return',w)
c.outerUpdate()
assert w != c.get_focus(),'oops2: focus in headline'
</t>
<t tx="ekr.20051107115231.15">k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = '@test editLabel selects entire headline'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
assert w
s = w.getAllText()
selectAll = c.config.getBool('select_all_text_when_editing_headlines')
# g.trace('editLabel selects entire headline',selectAll)
i,j = w.getSelectionRange()
if selectAll:
    assert i == 0 and j == len(s),'oops1: i: %d, j: %d' % (i,j)
else:
    assert i == len(s) and j == len(s),'oops2: i: %d, j: %d' % (i,j)
</t>
<t tx="ekr.20051107115231.16">k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
g.app.gui.set_focus(c,w)
w2 = g.app.gui.get_focus(c)

try:
    assert w
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    g.app.gui.set_focus(c,w)
    w2 = g.app.gui.get_focus(c)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + paste,'Expected: %s, got %s' % (
        h + paste,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.17">k = c.k

if k.defaultUnboundKeyAction == 'insert':
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redrawAndEdit(p) # To make the node visible.
    w = c.edit_widget(p)
    # print('guiName',g.app.gui.guiName())
    try:
        assert w, 'oops1'
        wName = g.app.gui.widget_name(w)
        assert wName.startswith('head'),'w.name:%s' % wName
        w.setSelectionRange('end','end')
        g.app.gui.event_generate(c,'X','Shift+X',w)
        g.app.gui.event_generate(c,'Y','Shift+Y',w)
        g.app.gui.event_generate(c,'Z','Shift+Z',w)
        g.app.gui.event_generate(c,'\n','Return',w)
        assert p.h == h + 'XYZ',(
            'oops2: expected: %s, got: %s' % (
                h + 'XYZ',p.h))
        if g.app.gui.guiName() != 'nullGui':
            assert c.undoer.undoMenuLabel == 'Undo Typing','oops3: %s' % (
                c.undoer.undoMenuLabel)
        k.manufactureKeyPressForCommandName(w,'undo')
        if g.app.gui.guiName() != 'nullGui':
            assert c.undoer.redoMenuLabel == 'Redo Typing','oops4'
        assert p.h == h,'oops5 got: %s, expected: %s' % (
            p.h,h)
    finally:
        if 1:
            c.setHeadString(p,h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.18">k = c.keyHandler
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
frame = c.frame
tree = frame.tree
canvas = tree.canvas
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + paste,'oops2 got: %s' % p.h
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h,'oops3 got: %s' % p.h
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.20">k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w, 'Null w'
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('1.1','1.2')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h[0] + paste + h[2:]
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h, 'head mismatch'
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.21">k = c.k

if k.defaultUnboundKeyAction == 'insert':
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p) # To make node visible
    tree.editLabel(p)
    w = c.edit_widget(p)
    try:
        assert w
        w.setSelectionRange('end','end')
        g.app.gui.event_generate(c,'X','Shift+X',w)
        g.app.gui.event_generate(c,'Y','Shift+Y',w)
        g.app.gui.event_generate(c,'Z','Shift+Z',w)
        g.app.gui.event_generate(c,'\n','Return',w)
        assert p.h == h + 'XYZ'
        k.manufactureKeyPressForCommandName(w,'undo')
        assert p.h == h
    finally:
        if 1:
            c.setHeadString(p,h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.24"># Should be a comment
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
w = c.frame.body.wrapper
assert p,'node not found: %s' % h
c.selectPosition(p)
c.bodyWantsFocus()
paste = '# Should be a comment'
g.app.gui.replaceClipboardWith(paste)
c.outerUpdate()
n = c.frame.body.colorizer.count
event = g.app.gui.create_key_event(c,None,None,c.frame.body.wrapper)
# i = w.getInsertPoint()
c.frame.pasteText(event)
# assert w.getInsertPoint()==i

# Move around and and make sure it doesn't change.
try:
    # There is no colorizer to test for wx.
    if g.app.gui.guiName() == 'tkinter':
        c.outerUpdate() # Force the coloring before doing the test.
        assert c.frame.body.colorizer.count &gt; n, 'did not recolor text'
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.28">k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    c.selectPosition(p.visBack(c))
    assert p.h == h + paste
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h,'expected: %s, got: %s' % (
        h,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.29">import leo.core.leoEditCommands as leoEditCommands
s = 'foo' ; wrapper = c.frame.body.wrapper
c.searchCommands.openFindTab()
h = c.searchCommands.findTabHandler
w = h.find_ctrl
w.setAllText(s)
c.bodyWantsFocus()
wrapper.setInsertPoint(0)
c.searchCommands.findTabFindNext()
w = c.get_focus()
wName = g.app.gui.widget_name(w)
assert 'body' in wName, 'focus: %s = %s, expected %s = %s' % (
    w,wName,wrapper,g.app.gui.widget_name(wrapper))
</t>
<t tx="ekr.20051107115231.9">c.redraw(p) # To make node visible

c2 = c.new()
p2 = c2.p

try:
    # This fails, but it is possible to edit the headline.
    # assert c2.edit_widget(p2),'c2.edit_widget(p2) failed: %s' % repr(p2)
    assert p2,'p2 failed: %s' % repr(p2)
    # assert c.edit_widget(p),'c.edit_widget(p) failed: %s' % repr(p)
finally:
    c2.setChanged(False)
    c2.close()
</t>
<t tx="ekr.20051109091333">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.setBodyString(p,'a')
c.redraw_now() # To make node visible and to set the icon.
try:
    c.bodyWantsFocus()
    n = c.frame.tree.redrawCount
    w = c.frame.body.wrapper
    w.setInsertPoint('end')
    g.app.gui.event_generate(c,'\b','BackSpace',w)
    n2 = c.frame.tree.redrawCount
    if not g.app.isExternalUnitTest:
        # This test is meaningless with a nullGui.
        assert n2 == n + 1,'too many or too few redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
</t>
<t tx="ekr.20051109091731">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.setBodyString(p,'a')
c.redraw(p) # To make node visible
# print('after redraw_now')
c.bodyWantsFocus()
n = c.frame.tree.redrawCount
try:
    w = c.frame.body.wrapper
    g.app.gui.event_generate(c,'a','a',w)
    n2 = c.frame.tree.redrawCount
    assert n2 == n,'too many redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20051109143831"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractAllHeadlines()
g.app.unitTestDict['restoreSelectedNode']=False


</t>
<t tx="ekr.20051120110335">u = c.undoer
assert u
c.insertHeadline()
assert u.undoMenuLabel == 'Undo Insert Node',repr(u.undoMenuLabel)
c.undoer.undo()
assert u.redoMenuLabel == 'Redo Insert Node',repr(u.undoMenuLabel)
</t>
<t tx="ekr.20051120115046">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
body = 'This is a test'
c.setBodyString(p,body)

try:
    assert p.b == body
    c.insertHeadline()
    c.undoer.undo()
    assert p.b == body
finally:
    c.setBodyString(p,'')
</t>
<t tx="ekr.20051125155134">n = c.frame.tree.redrawCount
# print('before')
c.insertHeadline()
c.outerUpdate() # Not actually needed, but should not matter.
# print('after')

try:
    n2 = c.frame.tree.redrawCount
    if g.app.isExternalUnitTest:
        pass # Fails, and it doesn't matter why.
    else:
        assert n2 == n + 1,'redraws: %d' % (n2 - n)
finally:
    c.undoer.undo()
</t>
<t tx="ekr.20051125170139">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20060106211922">n = g.app.positions
assert c.isCurrentPosition(None) is False
assert c.isCurrentPosition(p) is True
assert g.app.positions == n
</t>
<t tx="ekr.20060106211922.1">assert not c.isRootPosition(None),'fail 1'
assert not c.isRootPosition(p),'fail 2'
</t>
<t tx="ekr.20060127120604"></t>
<t tx="ekr.20060130151716.1">if g.app.isExternalUnitTest:
    pass
else:
    table = (
        # 'toggle-find-clone-find-all-option',
        'toggle-find-ignore-case-option',
        'toggle-find-in-body-option',
        'toggle-find-in-headline-option',
        'toggle-find-mark-changes-option',
        'toggle-find-mark-finds-option',
        'toggle-find-regex-option',
        # 'toggle-find-reverse-option',
        'toggle-find-word-option',
        'toggle-find-wrap-around-option',
    )
    for command in table:
        c.k.simulateCommand(command)
        c.k.simulateCommand(command)
</t>
<t tx="ekr.20060130151716.2">if g.app.isExternalUnitTest:
    pass
else:
    table = (
        'set-find-everywhere',
        'set-find-node-only',
        'set-find-suboutline-only',
    )
    # show-find-tab-options     = Ctrl-o
    # show-find-options         = o
    for command in table:
        c.k.simulateCommand(command)
</t>
<t tx="ekr.20060130151716.3">if g.app.isExternalUnitTest:
    pass
else:
    table = (
        're-search-forward',
        're-search-backward',
        'search-forward',
        'search-backward',
        'word-search-forward',
        'word-search-backward',
    )
    
    for command in table:
        # This is not a full test.  We must use keyboardQuit here!
        c.k.simulateCommand(command)
        c.k.keyboardQuit(None)
</t>
<t tx="ekr.20060130151716.4">c.k.simulateCommand('show-find-options')
</t>
<t tx="ekr.20060131102450">print('\nEnd of typing and undo tests')
</t>
<t tx="ekr.20060208072307">if c.k.defaultUnboundKeyAction == 'insert':
    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p)
    c.bodyWantsFocus()
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    event = g.app.gui.create_key_event(c,None,None,c.frame.body.wrapper)
    c.frame.pasteText(event)
    
    # Move around and and make sure it doesn't change.
    try:
        assert p.b == paste, 'paste1 failed'
        c.selectPosition(p.threadBack())
        assert p.b == paste, 'stick failed'
        c.selectPosition(p)
        assert p.b == paste, 'revisit failed'
    finally:
        if 1:
            c.setBodyString(p,'')
            c.redraw(p)
</t>
<t tx="ekr.20060208072331">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
w.setSelectionRange('end','end',insert='end')
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
event = g.app.gui.create_key_event(c,None,None,w)
c.frame.pasteText(event)
# Move around and and make sure it doesn't change.
try:
    # g.trace('before select',w,w.getAllText())
    c.selectPosition(p.threadBack())
    assert p.h == h + paste,'oops1: expected: %s, got %s' % (h + paste,p.h)
    c.selectPosition(p)
    assert p.h == h + paste,'oops2: expected: %s, got %s' % (h + paste,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20060208072358"># This test is too flaky for Tk.
if g.app.gui.guiName() != 'tkinter':

    h = 'Test headline abc'
    p = c.testManager.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.selectPosition(p)
    c.bodyWantsFocus()
    c.redraw(p) # To make node visible
    n = c.frame.tree.redrawCount
    assert not p.b, 'oops1'
    try:
        # print('before insert a',c.p)
        assert p == c.p,'position has changed!'
        w = c.frame.body.wrapper
        if c.vim_mode and c.vimCommands:
            if c.vimCommands.state == 'normal':
                # Enter insert mode ;-)
                g.app.gui.event_generate(c,'i','i',w)
        g.app.gui.event_generate(c,'a','a',w)
        assert p.b == 'a', 'expected "a", got: %s' % repr(p.b)
        if g.app.gui.guiName() != 'nullGui':
            n2 = c.frame.tree.redrawCount
            c.outerUpdate() # Force the coloring before doing the test.
            assert n2 == n + 1,'too many or too few redraws: expected 1: got: %d' % (n2-n)
    finally:
        if 1:
            c.setBodyString(p,'')
            c.redraw(p)
</t>
<t tx="ekr.20060208072415">h = 'Test headline abc'
p = c.testManager.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
s = 'ABC'
c.setBodyString(p,s)
try:
    c.bodyWantsFocus()
    w = c.frame.body.wrapper
    w.setInsertPoint(2)
    c.outerUpdate() # This fixed the problem.
    if 1:
        c.k.simulateCommand('delete-char')
    else:
        # This fails unless Delete is bound to delete-char
        g.app.gui.event_generate(c,'Delete','Delete',w) # Calls c.outerUpdate()
    assert p.b == s[:-1],'oops1: expected "AB", got %s' % p.b
    c.selectPosition(p.threadBack())
    c.selectPosition(p)
    assert p.b == s[:-1],'oops2: expected "AB", got %s' % p.b
finally:
    if 0:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20060325071703.1">import sys

win32  = c.config.getBool('test_win32_setting')
darwin = c.config.getBool('test_darwin_setting')

if sys.platform == 'win32':
    assert(win32)
    assert(not darwin)

elif sys.platform== 'darwin':
    assert(not win32)
    assert(darwin)

</t>
<t tx="ekr.20060325071703.2">guiname = g.app.gui.guiName()

tkinter = c.config.getBool('test_tkinter_setting')
wx      = c.config.getBool('test_wxWindows_setting')

print(guiname)

if guiname == 'tkinter':
    assert(tkinter)
    assert(not wx)

if guiname == 'wxWindows':
    assert(not tkinter)
    assert(wx)
</t>
<t tx="ekr.20060602195313">at = c.atFileCommands
child = p.firstChild()
child2 = child.next()
result = str(child2.b)
at.write(child,nosentinels=False,thinFile=False,scriptWrite=False,toString=True)
s = str(at.stringOutput)

if s != result:
    print('-' * 30)
    print(s)
    print('-' * 30)
    print(result)

assert s == result
</t>
<t tx="ekr.20060602195313.2">@language c
#ifdef COMMENT
@comment /* */ 
#endif
@tabwidth 4
@lineending crlf

@others

&lt;&lt; Get LRR Task &gt;&gt;
&lt;&lt; Start LRR &gt;&gt;
</t>
<t tx="ekr.20060602195313.3"></t>
<t tx="ekr.20060602195313.4"></t>
<t tx="ekr.20060602195914">/*@+leo-ver=5*/
/*@+node:root*/
/*@@language c*/
#ifdef COMMENT
/*@@comment /* */ */
#endif
/*@@tabwidth 4*/
/*@@lineending crlf*/

/*@+others*/
/*@-others*/

/*@+&lt;&lt; Get LRR Task &gt;&gt;*/
/*@+node:&lt;&lt; Get LRR Task &gt;&gt;*/
/*@-&lt;&lt; Get LRR Task &gt;&gt;*/
/*@+&lt;&lt; Start LRR &gt;&gt;*/
/*@+node:&lt;&lt; Start LRR &gt;&gt;*/
/*@-&lt;&lt; Start LRR &gt;&gt;*/
/*@-leo*/
</t>
<t tx="ekr.20060912091510.1">import time

c.frame.body.addEditor()

time.sleep(0.5)

c.frame.body.deleteEditor()

time.sleep(0.5)
</t>
<t tx="ekr.20060913084600">import leo.core.leoNodes as leoNodes

if leoNodes.use_zodb:
    p.v.__hash__()
</t>
<t tx="ekr.20060921115303"># for condition in ('&lt;','&lt;=','&gt;','&gt;='):

for v1,condition,v2 in (
    ('8.4.12','&gt;','8.4.3'),
    ('1','==','1.0'),
    ('2','&gt;','1'),
    ('1.2','&gt;','1'),
    ('2','&gt;','1.2.3'),
    ('1.2.3','&lt;','2'),
    ('1','&lt;','1.1'),
):
    assert g.CheckVersion(v1,v2,condition=condition,trace=False)
</t>
<t tx="ekr.20061001114236" unit_test="58040000006162636471002e">fc = c.fileCommands # self is a dummy
p.v.unknownAttributes = {g.u('unit_test'):g.u('abcd')}
s = fc.putUnknownAttributes (p.v)
expected = g.u(' unit_test="58040000006162636471002e"')
assert s == expected, '\nexpected: %s\ngot:      %s' % (repr(expected),repr(s))
</t>
<t tx="ekr.20061001114637"># 3 failures with Alt-5
</t>
<t tx="ekr.20061101121602.100">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.101">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.102">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.103">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.104">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.105">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.106">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.107">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.108">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.109">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.110">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.111">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.112">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.113">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.114">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.115">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.116">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.117">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.118">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.119">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.120">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.121">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.122">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.123">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.124">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.125">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.126">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.127">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.128">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.129">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.130">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.131">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.132">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.133">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.134">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.135">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.136">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.137">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.138">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.139">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.140">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.141">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.142">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.143">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.144">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.145">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.146">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.147">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.148">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.149">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.150">@pagewidth 70 # Required for unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.151">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.152">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.153">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.154">@pagewidth 70 # Required for unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.155">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.156">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.157">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.158">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.159">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.160">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.161">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.162">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.163">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.164">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.165">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.166">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.167">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.168">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.169">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.170">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.171">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.172">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.173">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.174">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.175">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.176">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.177">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.178">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.179">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.180">XYZZY line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.181">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.182">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.183">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.184">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.185">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.186">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.187">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.188">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.189">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.190">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.191">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.192">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.193">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.194">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.195">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.196">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.197">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.198">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.199">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.200">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.201">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.202">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.203">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.204">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.205">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.206">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.207">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.208">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.209">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.210">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.211">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.212">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.213">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.214">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.215">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.216">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.217">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.218">@pagewidth 80
    # Required for external unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.219">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property--before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.220">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially
declared disasters are weather related,
leading to around 500 deaths per year
and nearly $14 billion in damage.
StormReady, a program
started in 1999 in Tulsa, OK,
helps arm America's
communities with the communication and
safety skills needed to save lives and
property--before and during the event.
StormReady helps community leaders and
emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.221">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Services StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property--before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.222">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.223">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.224">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.225">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.226">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.227">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.228">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.229">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.230">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.231">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.232">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.233">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.234">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.235">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.236">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.237">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.238">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.239">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.240">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.241">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.242">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.243">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.244">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.245">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.246">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.247">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.248">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.249">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.250">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.251">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.252">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.253">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.254">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.255">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.256">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.257">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.258">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.259">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.260">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.261">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.262">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.263">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.264">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.265">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.266">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.267">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.268">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.269">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.270">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.271">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.272">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.273">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.274">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.275">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.276">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.277">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.278">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.279">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.280">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.281">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.282">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.283">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.284">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.285">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.286">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.287">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.288">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.289">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.290">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.291">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.292">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.293">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.294">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.295">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.296">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.297">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.298">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.299">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.300">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.301">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.302">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.303">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.304">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.305">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.306">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.307">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.308">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.309">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.310">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.311">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.312">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.313">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.314">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.315">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.316">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.317">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.318">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.319">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.320">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.321">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.322">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.323">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.324">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.325">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.326">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.327">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.328">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.329">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.330">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.331">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.332">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.333">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.334">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.335">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.336">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.337">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.338">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.339">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.340">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.341">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.342">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.343">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.344">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.345">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.346">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.347">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.348">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.349">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.350">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.351">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.352">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.353">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.354">c.testManager.runEditCommandTest(p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.355">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.356">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.357">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.78">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.79">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.80">first line
line 1
    line a
line b
last line
</t>
<t tx="ekr.20061101121602.81">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.82">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.83">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.84">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.85">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.86">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.87">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.88">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.89">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.90">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.91">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.92">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.93">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.94">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.95">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.96">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.97">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.98">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061101121602.99">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061104172236.1"></t>
<t tx="ekr.20061104172236.11">s = 'abc xy_z5 pdq'
i,j = g.getWord(s,5)
assert s[i:j] == 'xy_z5','got %s' % s[i:j]
</t>
<t tx="ekr.20061104172236.15">s = 'a\n\nc'

for i,result in (
    (-1,2), # One too few.
    (0,2),(1,2),
    (2,3),
    (3,4),
    (4,4), # One too many.
):
    j = g.skip_line(s,i)
    assert j == result, 'i: %d, expected %d, got %d' % (i,result,j)
</t>
<t tx="ekr.20061104172236.16">s = 'a\n\nc'

for i,result in (
    (-1,1), # One too few.
    (0,1),(1,1),
    (2,2),
    (3,4),
    (4,4), # One too many.
):
    j = g.skip_to_end_of_line(s,i)
    assert j == result, 'i: %d, expected %d, got %d' % (i,result,j)
</t>
<t tx="ekr.20061104172236.17">s1 = 'a\n\nc'
table1 = (
    (-1,0), # One too few.
    (0,0),(1,0),
    (2,2),
    (3,3),
    (4,4), # One too many.
)
s2 = 'a\n'
table2 = ((1,0),(2,2)) # A special case at end.

for s,table in ((s1,table1),(s2,table2)):
    for i,result in table:
        j = g.skip_to_start_of_line(s,i)
        assert j == result, 'i: %d, expected %d, got %d' % (i,result,j)
</t>
<t tx="ekr.20061104172236.18">s = 'a\ncd\n\ne'

for i,result in (
    (-1,(0,2)), # One too few.
    (0,(0,2)),(1,(0,2)),
    (2,(2,5)),(3,(2,5)),(4,(2,5)),
    (5,(5,6)),
    (6,(6,7)),
    (7,(6,7)), # One too many.
):
    j,k = g.getLine(s,i)
    assert (j,k) == result, 'i: %d, expected %d,%d, got %d,%d' % (i,result[0],result[1],j,k)
</t>
<t tx="ekr.20061104172236.2"># targetWord

e = c.editCommands
k = c.k ; w = c.frame.body.wrapper

w.setInsertPoint(0)
k.arg = 't' # 'targetWord'
k.setState('find-word',1)
for val in (True,False):
    e.oneLineFlag = val
    f = e.findWordInLine(event=None)
    i,j = w.getSelectionRange()
    assert i == 2, 'expected 2, got %s' % (i)
    # s = w.getAllText()
    # ch = s[i]
    # assert word == 'targetWord', 'got: %s' % word

</t>
<t tx="ekr.20061104172236.22"># target.

try:
    w = c.frame.body.wrapper
    s = w.getAllText()
    w.setInsertPoint(len(s))
    c.k.previousSelection = 2,8
    event = g.app.gui.create_key_event(c,None,None,w)
    c.frame.pasteText(event=event,middleButton=True)
    s2 = w.getAllText()
    assert len(s2) == len(s) + len('target')
finally:
    w.setAllText(s)
    p.setBodyString(s)
    # g.trace(repr(s))
    c.recolor()

# end
</t>
<t tx="ekr.20061104172236.3"># TARGETWORD

w = c.frame.body.wrapper

for (which,result) in (('cap','Targetword'),('low','targetword'),('up','TARGETWORD')):
    w.setInsertPoint(5)
    c.editCommands.capitalizeHelper(event=None,which=which,undoType=None)
    s = w.getAllText()
    word = s[2:12]
    assert word == result, 'Expected %s, got: %s' % (result,repr(word))
    i = w.getInsertPoint()
    assert i == 5, 'Expected 5, got: %d' % i
</t>
<t tx="ekr.20061104172236.4">w = c.frame.body.wrapper
ec = c.editCommands

for spot,result in (('1.0',0),(5,5)):
    ec.setMoveCol(w,spot)
    assert ec.moveSpot == result
    assert ec.moveCol == result
</t>
<t tx="ekr.20061104172236.5">ec = c.editCommands ; w = c.frame.body.wrapper

for i,j,python in (
    # ('1.0','4.5',False),
    (5,50,True),
):
    extend = True
    ec.moveSpot = None # It's hard to init this properly.
    ec.extendHelper(w,extend,j)
    i2,j2 = w.getSelectionRange()
    # print(i2,j2)
    #assert 0==i2, 'Expected i=%s, got %s' % (repr(i),repr(i2))
    #assert j==j2, 'Expected j=%s, got %s' % (repr(j),repr(j2))
</t>
<t tx="ekr.20061104172236.6">ec = c.editCommands ; w = c.frame.body.wrapper

for i,j,python in (
    #('1.0','4.5',False),
    (5,50,True),
):
    event = None ; extend = True ; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveToHelper (event,j,extend)
    i2,j2 = w.getSelectionRange()
    assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
    assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
    w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061104172236.7">ec = c.editCommands
w = c.frame.body.wrapper

for direction in ('up','down'):
    for distance in ('line','page','half-page'):
        event = g.app.gui.create_key_event(c,None,None,w)
        ec.scrollHelper(event,direction,distance)
</t>
<t tx="ekr.20061106112522">w = c.frame.body.wrapper
s = w.getAllText()

try:
    w.setInsertPoint(len(s))
    c.insertBodyTime()
finally:
    w.setAllText(s)
    p.setBodyString(s)
    # c.recolor()

# end:
</t>
<t tx="ekr.20061106201509.6"># line 1
# line 2
# line 3

w = c.frame.body.wrapper
index = 11 # in the second line.
w.setInsertPoint(index)
before,ins,after = c.frame.body.getInsertLines()
assert before == '# line 1\n','Got %s' % repr(before)
assert ins    == '# line 2\n','Got %s' % repr(ins)
assert after.startswith('# line 3\n'),'line3'
assert after.endswith('# end.\n'),'end'

# end.
</t>
<t tx="ekr.20061106201509.7"># line 1
# line 2
# line 3

w = c.frame.body.wrapper
s = w.getAllText()
start,end = 11,15
w.setSelectionRange(start,end)
before,ins,after = c.frame.body.getSelectionAreas()
assert before == s[0:start],'Got %s' % repr(before)
assert ins    == s[start:end],'Got %s' % repr(ins)
assert after == s[end:]

# end.
</t>
<t tx="ekr.20061110094226">ec = c.editCommands ; w = c.frame.body.wrapper

for i,result,direction in (('5.8','4.8','up'),('5.8','6.8','down')):
    event = None ; extend = False; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveUpOrDownHelper (event,direction,extend)
    i2,j2 = w.getSelectionRange()
    if 1:
        break
    else:
        assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
        assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
        w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061128082002">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128082002.1">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128090021">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090021.1">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090021.2">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20061128090021.3">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090147.1">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090147.2">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147.3">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090338">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20061128090338.1">line 1
line 2

</t>
<t tx="ekr.20061128090338.2">line 1
line 2
line 3
</t>
<t tx="ekr.20061128090338.3">line 1
line 2

</t>
<t tx="ekr.20070113145100"># Not part of cvs distributions, but needed for two unit tests.

dir = g.os_path_join(g.app.loadDir,'..','test','unittest',g.u('chinese\u8116folder'),encoding='utf-8')
s   = g.os_path_join(dir,g.u('chinese\u8116test.leo'),encoding='utf-8')
    
if not g.os_path_exists(dir):
    import os
    os.mkdir(dir)
    g.pr('created chinese folder')
    
if not g.os_path_exists(s):
    f = file(s,'w')
    f.close()
    g.pr('created chinese file')
    
</t>
<t tx="ekr.20070131162935">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131162935.1">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.3">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131171218.1"></t>
<t tx="ekr.20070131171218.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20070131172706">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131172706.1">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.3">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070131173932.1">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131173932.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932.3">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131175538"></t>
<t tx="ekr.20070131175538.1"></t>
<t tx="ekr.20070131175646"></t>
<t tx="ekr.20070217065840">@nocolor-node

@
To make unit tests, do the following:
    
- Use the make-test script (Alt-5) to create a suboutline for a unit test.
- Put text in the before node, selected desired text, then do the do-before script (Alt-6).
- Execute the command, then do the do-after script (Alt-7).
</t>
<t tx="ekr.20070217065840.1">try:
    p1 = p.insertAfter()
    c.setHeadString(p1,'@test ')
    body = 'c.testManager.runEditCommandTest(c,p)'
    c.setBodyString(p1,body)
    for s in ('work','before','after'):
        p2 = p1.insertAsLastChild()
        c.setHeadString(p2,s)
    p1.expand()
finally:
    c.redraw()
    c.editPosition(p1)</t>
<t tx="ekr.20070217065840.2">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. The work node should have body text. If all is as expected,
copy the body text the work node to the before node, and represent the selection
range of the work in the headline of the before node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top and work.b:

    c.setBodyString(before,work.b)
    c.setBodyString(after,'')
    putSelectionInHeadline(c,before,'before',sel)
    c.redraw()
else:
    g.es_print('do-before: not in a proper @test tree')</t>
<t tx="ekr.20070217065840.3">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070217065840.4">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild() 
    before = work and work.next()     
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.5">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))

    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217065840.6">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. If all is as expected, copy the work node to the after node,
and represent the selection range of the work node in the headline of the after node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top:
    c.setBodyString(after,work.b)
    putSelectionInHeadline(c,after,'after',sel)
    c.redraw()
else:
    g.es_print('do-after: not in @test tree')</t>
<t tx="ekr.20070217065840.8">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild()
    before = work and work.next()
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.9">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))
    
    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217071121.1">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.10">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.11">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.12">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.13">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.14">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.15">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.16">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.17">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.18">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.19">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.2">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.20">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.21">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.22">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.23">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.24">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.25">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.26">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.27">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.28">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.3">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.4">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.5">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217071121.6">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.7">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.8">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.9">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070217072822">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070305095401">p = c.p.copy()
c.selectPosition(p.threadBack())
p1 = c.p
# print(p1)
c.goPrevVisitedNode()
p2 = c.p
# print(p2)
c.goNextVisitedNode()
p3 = c.p
# print(p3)
# assert p == p3
</t>
<t tx="ekr.20070306091949"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoEditCommands tests.')
</t>
<t tx="ekr.20070315065720">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070315065720.1">a

b
</t>
<t tx="ekr.20070315065720.2">a

b
</t>
<t tx="ekr.20070315065720.3">a

b
</t>
<t tx="ekr.20070315065849">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20070315065849.1">a

b
</t>
<t tx="ekr.20070315065849.2">a

b
</t>
<t tx="ekr.20070315065849.3">a

b
</t>
<t tx="ekr.20070417092935" str_leo_pos="10"></t>
<t tx="ekr.20070503064257"></t>
<t tx="ekr.20070528100318"># Required to make a typing test work.
</t>
<t tx="ekr.20070611071101">p1 = p.copy()
a = p.firstChild()
b = a.firstChild()
c2 = b.firstChild()
limit = a.next()
d = limit.firstChild()
e = limit.next()
assert e.h == 'e'
for p2,h in ((a,'a'),(b,'b'),(c2,'c2'),(d,'d'),(limit,'limit')):
    p2.expand()
    assert p2.h==h,'headString mismatch'

try: # Tests without hoist...
    p1.expand()
    assert not c.hoistStack
    c.selectPosition(limit)
    result = limit.copy().moveToVisBack(c)
    assert result==c2,'visBack != c2: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'visNext != d: %s' % result
finally:
    p1.contract()

try: # Tests with hoist.
    p1.expand()
    c.selectPosition(limit)
    c.hoist()
    result = limit.copy().moveToVisBack(c)
    assert not result,'limited visBack: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'limited visNext !=d: %s' % result
finally:
    c.dehoist()
    c.selectPosition(p1)
    p1.contract()
    c.redraw_now()

</t>
<t tx="ekr.20070611071101.1"></t>
<t tx="ekr.20070611071101.2"></t>
<t tx="ekr.20070611071101.3"></t>
<t tx="ekr.20070611071101.4"></t>
<t tx="ekr.20070611071101.5"></t>
<t tx="ekr.20070611071954"></t>
<t tx="ekr.20070611105423.1">c.contractAllHeadlines()
</t>
<t tx="ekr.20070611105728"># Remove any previous children.
while p.hasChildren():
    p.firstChild().doDelete()
# Create two cloned children.
c.selectPosition(p)
c.insertHeadline()
p2 = c.p
p2.moveToFirstChildOf(p)
p2.setHeadString('aClone')
c.selectPosition(p2)
c.clone()
assert 2 == p.numberOfChildren()

# Select the first clone and demote (it should be illegal)
c.selectPosition(p2)
c.demote() # This should do nothing.
assert g.app.unitTestDict.get('checkMoveWithParentWithWarning'),'fail 1'
assert 0 == c.checkOutline(event=None,verbose=False,unittest=True,full=True), 'fail 2'
assert 2 == p.numberOfChildren(), 'fail 3'
# Delete the children, but only if there are no errors.
while p.hasChildren():
    p.firstChild().doDelete()
</t>
<t tx="ekr.20071007120750.3">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120750.4">@pagewidth 80
    # Required for external unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120750.5">c.editCommands.ccolumn = 4 # Set the comment column
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120750.6"># xxxx.yyyy

s = p.b
w = c.frame.body.wrapper
w.setSelectionRange(2,11)
c.editCommands.setFillPrefix(event=None)
prefix = c.editCommands.fillPrefix
assert prefix == 'xxxx.yyyy',repr(prefix)
</t>
<t tx="ekr.20071007120947">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007120947.6">first line
last lin
</t>
<t tx="ekr.20071007120947.7">first line
last line
</t>
<t tx="ekr.20071007120947.8">first line
last lin
</t>
<t tx="ekr.20071007121115.1">first line
line 1
last line
</t>
<t tx="ekr.20071007121115.2">first line
    line 1
last line
</t>
<t tx="ekr.20071007121115.3">first line
line 1
last line
</t>
<t tx="ekr.20071007121312.1">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.2">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms,
2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes.
Potentially deadly
weather impacts every American.
Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.3">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.5">first line
    line b
last line
</t>
<t tx="ekr.20071007121312.6">first line
line b
last line
</t>
<t tx="ekr.20071007121312.7">first line
    line b
last line
</t>
<t tx="ekr.20071007121529">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007121529.1">firstline
last line
</t>
<t tx="ekr.20071007121529.2">first line
last line
</t>
<t tx="ekr.20071007121529.3">firstline
last line
</t>
<t tx="ekr.20071007124202">@pagewidth 80
    # Required for external unit test.

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071007124202.1">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20071007124202.2">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms,
2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes.
Potentially deadly
weather impacts every American.
Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007124202.3">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20071113081247">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113081247.1">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.10">x
z
A
c
B
</t>
<t tx="ekr.20071113081247.11">A
B
c
x
z
</t>
<t tx="ekr.20071113081247.2">a
d
e
z
x
</t>
<t tx="ekr.20071113081247.3">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.8">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113081247.9">A
B
c
x
z
</t>
<t tx="ekr.20071113082531">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20071113082531.1">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113082531.2">c
A
z
X
Y
b
</t>
<t tx="ekr.20071113082531.3">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113090055.4"># This will work regardless of where this method is.
@language python
@tabwidth -4
# @path xyzzy # Creates folder called xyzzy: interferes with other unit tests.
@pagewidth 120

d = c.atFileCommands.scanAllDirectives(p)

assert d.get('language') == 'python'
assert d.get('tabwidth') == -4
# assert d.get('path').endswith('xyzzy')
assert d.get('pagewidth') == 120
</t>
<t tx="ekr.20071113090055.5"># This will work regardless of where this method is.
@language python
@tabwidth -4
# @path xyzzy # Creates folder called xyzzy: interferes with other unit tests.
@pagewidth 120

d = c.atFileCommands.scanAllDirectives(p)
# print(d)
assert d.get('language') == 'python'
assert d.get('tabwidth') == -4
# assert d.get('path').endswith('xyzzy')
assert d.get('pagewidth') == 120
</t>
<t tx="ekr.20071113105654.1">c.hoist()
c.dehoist()
</t>
<t tx="ekr.20071113140035">fn = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','core','leoPy.leo'))
assert g.os_path_exists(fn),fn
c1 = c
c2 = g.openWithFileName(fn,old_c=None,enableLog=False)
assert c2
c.frame.bringToFront()
g.app.setLog(c.frame.log)

d1 = {} ; d2 = {}
for c,d in ( (c1,d1),(c2,d2)):
    for p in c.all_unique_positions():
        if p.h.startswith('@test'):
            d[p.h]=p.h

if 0: # not important
    g.pr()
    g.pr('----- Only in unitTest.leo')
    for h in sorted(d1.keys()):
        if not d2.get(h):
            print(h)

print('\n----- Only in leoPy.leo')
for h in sorted(d2.keys()):
    if not d1.get(h):
        print(h)</t>
<t tx="ekr.20071113143844.5">assert c.atFileCommands.isSignificantTree(p)

</t>
<t tx="ekr.20071113143844.9">assert g.CheckVersionToInt('12') == 12,'fail 1'
assert g.CheckVersionToInt('2a5') == 2, 'fail 2'
assert g.CheckVersionToInt('b2') == 0, 'fail 3'
</t>
<t tx="ekr.20071113145804.10">c.contractAllHeadlines()
p = c.rootPosition()
while p.hasNext():
    p.moveToNext()
c.selectPosition(p)
</t>
<t tx="ekr.20071113145804.15">if g.app.isExternalUnitTest:
    pass
else:
    c.helpCommands.helpForMinibuffer()
</t>
<t tx="ekr.20071113145804.16"># vr plugin not loaded externally.
if not g.app.isExternalUnitTest:

    c.helpCommands.helpForBindings()
</t>
<t tx="ekr.20071113145804.17"># vr plugin not loaded externally.
if not g.app.isExternalUnitTest:

    c.helpCommands.helpForFindCommands()
</t>
<t tx="ekr.20071113145804.18">fc=c.fileCommands
fc.deleteFileWithMessage('xyzzy','test')

if 0: # one-time test of es statements.
    fileName = 'fileName' ; kind = 'kind'
    g.es("read only",color="red")
    g.es("exception deleting %s file: %s" % (fileName,kind))
    g.es("exception deleting backup file:" + fileName)
</t>
<t tx="ekr.20071113145804.19">import sys

# Not a good unit test; it probably will never fail.
def aFunction(): pass
assert type(g.pdb)==type(aFunction), 'wrong type for g.pdb: %s' % type(g.pdb)

class myStdout:
    def write(self,s):
        pass # g.es('From pdb:',s)

class myStdin:
    def readline (self):
        return 'c' # Return 'c' (continue) for all requests for input.

def restore():
    sys.stdout,sys.stdin = sys.__stdout__,sys.__stdin__

try:
    sys.stdin = myStdin() # Essential
    sys.stdout=myStdout() # Optional
    g.pdb()
    restore()
    # assert False,'test of reraising'
except Exception:
    restore()
    raise
</t>
<t tx="ekr.20071113145804.21">theFile,fn = g.create_temp_file()
assert theFile
assert g.isString(fn)
</t>
<t tx="ekr.20071113145804.22">@first # -*- coding: utf-8 -*-

import sys

s = 'test ɯ'

def test():
    g.es_trace(s,color='red')

try:
    # Don't worry about the exact output.
    # Just test that it doesn't throw an exception.
    sys.stdout = g.fileLikeObject()
    test()

finally:
    sys.stdout = sys.__stdout__
</t>
<t tx="ekr.20071113145804.26">s1 = 'abc\n\np\nxy'
table1 = (
    (-1,(0,0)), # One too small.
    (0,(0,0)),
    (1,(0,1)),
    (2,(0,2)),
    (3,(0,3)), # The newline ends a row.
    (4,(1,0)),
    (5,(2,0)),
    (6,(2,1)),
    (7,(3,0)),
    (8,(3,1)),
    (9,(3,2)), # One too many.
    (10,(3,2)), # Two too many.
)
s2 = 'abc\n\np\nxy\n'
table2 = (
    (9,(3,2)),
    (10,(4,0)), # One too many.
    (11,(4,0)), # Two too many.
)
s3 = 'ab' # Test special case.  This was the cause of off-by-one problems.
table3 = (
    (-1,(0,0)), # One too small.
    (0,(0,0)),
    (1,(0,1)),
    (2,(0,2)), # One too many.
    (3,(0,3)), # Two too many.
)

for s,table in ((s1,table1),(s2,table2)):
    for i,result in table:
        row,col = g.convertPythonIndexToRowCol(s,i)
        assert row == result[0], 'i: %d, expected row %d, got %d' % (i,result[0],row)
        assert col == result[1], 'i: %d, expected col %d, got %d' % (i,result[1],col)
</t>
<t tx="ekr.20071113145804.27">s1 = 'abc\n\np\nxy'
s2 = 'abc\n\np\nxy\n'
table1 = (
    (0,(-1,0)), # One too small.
    (0,(0,0)),
    (1,(0,1)),
    (2,(0,2)),
    (3,(0,3)), # The newline ends a row.
    (4,(1,0)),
    (5,(2,0)),
    (6,(2,1)),
    (7,(3,0)),
    (8,(3,1)),
    (9,(3,2)), # One too large.
)
table2 = (
    (9,(3,2)),
    (10,(4,0)), # One two many.
)
for s,table in ((s1,table1),(s2,table2)):
    for i,data in table:
        row,col = data
        result = g.convertRowColToPythonIndex(s,row,col)
        assert i == result, 'row: %d, col: %d, expected: %d, got: %s' % (row,col,i,result)
</t>
<t tx="ekr.20071113145804.28">script = g.getScript(c,p) # This will get the text of this node.
assert script.find('\r\n') == -1, repr(script)
</t>
<t tx="ekr.20071113145804.29">for s,expected in (
    (' a\n b\n c', 'a\nb\nc'),
    (' \n  A\n    B\n  C\n', '\nA\n  B\nC\n'),
):
    result = g.removeExtraLws(s,c.tab_width)
    assert result == expected, '\ns: %s\nexpected: %s\nresult:   %s' % (
        repr(s),repr(expected),repr(result))
</t>
<t tx="ekr.20071113145804.32"># line 1
# line 2
# line 3

w = c.frame.body.wrapper
s = w.getAllText()
start,end = 11,15
w.setSelectionRange(start,end)
before,ins,after = c.frame.body.getSelectionAreas()
assert before == s[0:start],'Got %s' % repr(before)
assert ins    == s[start:end],'Got %s' % repr(ins)
assert after == s[end:]

# end.
</t>
<t tx="ekr.20071113145804.33"># target

try:
    w = c.frame.body.wrapper
    # print((w))
    s2 = p.b
    s = w.getAllText()
    assert s == s2, 'w.getAllText() != p.b: len(w)=%d, len(p)=%d' % (len(s),len(s2))
    w.setInsertPoint(len(s))
    c.k.previousSelection = 2,8
    event = g.app.gui.create_key_event(c,None,None,w)
    c.frame.pasteText(event=event,middleButton=True)
    s2 = w.getAllText()
    assert len(s2) == len(s) + len('target')
finally:
    w.setAllText(s)
    p.setBodyString(s)
    c.recolor()

# end5target
</t>
<t tx="ekr.20071113145804.4">@first # -*- coding: utf-8 -*-
@language python

try:
    ec = c.editCommands ; w = c.frame.body.wrapper
    s = w.getAllText()

    # This strings tests unicode, paren matching, and auto-indentation.
    u = g.u('(a\u00c9\u03a9B\u3045\u4e7cz):\n') # '(aÉΩBぅ乼cz):\n'
    u = g.u('(pdq):\n')
    w.setInsertPoint(len(s))
    for char in u:
        stroke = g.choose(char=='\n','Return',char)
        event = g.app.gui.create_key_event(c,char,stroke,w)
        ec.selfInsertCommand(event)
    result = w.getAllText()
    #g.trace('result',repr(result))
    assert result.endswith('    '),'result:\n%s' % result
    # Test of autocompleter.
finally:
    if 1:
        w.setAllText(s)
        p.setBodyString(s)
        # g.trace(repr(s))
        c.recolor()

# end:
</t>
<t tx="ekr.20071113145804.5">@language python
@tabwidth -4

try:
    ec = c.editCommands ; w = c.frame.body.wrapper
    s = w.getAllText()
    w.setSelectionRange(len(s)-9,len(s)-6)
    event = g.app.gui.create_key_event(c,'\t','Tab',w)
    ec.selfInsertCommand(event)
    result = w.getAllText()
    # print('result %s' % result)
    assert result.endswith('\n    ###abcdef\n'),'result\n%s' % (repr(result))
finally:
    w.setAllText(s)
    p.setBodyString(s)
    c.recolor_now()
    
###abcdef
</t>
<t tx="ekr.20071113145804.7">s1 = '#@+leo-ver=4-thin-encoding=utf-8,.'  # 4.2 format.
s2 = '#@+leo-ver=4-thin-encoding=utf-8.' # pre-4.2 format.

at=c.atFileCommands # Self is a dummy argument.

for s in (s1,s2):
    valid,new_df,start,end,isThinDerivedFile = at.parseLeoSentinel(s)
    # g.trace('start',start,'end',repr(end),'len(s)',len(s))
    assert valid, 'not valid'
    assert new_df, 'not new_df'
    assert isThinDerivedFile, 'not thin'
    assert end == '', 'invalid end: %s' % repr(end)
    assert at.encoding == 'utf-8', 'bad encoding: %s' % repr(at.encoding)
</t>
<t tx="ekr.20071113145804.8">at=c.atFileCommands
table = [
    ('@=',0,at.noDirective),
    ('@',0,at.atDirective),
    ('@ ',0,at.atDirective),
    ('@\t',0,at.atDirective),
    ('@\n',0,at.atDirective),
    ('@all',0,at.allDirective),
    ('    @all',4,at.allDirective),
    ("@c",0,at.cDirective),
    ("@code",0,at.codeDirective),
    ("@doc",0,at.docDirective),
    ("@end_raw",0,at.endRawDirective),
    ('@others',0,at.othersDirective),
    ('    @others',4,at.othersDirective),
    ("@raw",0,at.rawDirective),
]
for name in g.globalDirectiveList:
    # Note: entries in g.globalDirectiveList do not start with '@'
    if name not in ('all','c','code','doc','end_raw','others','raw',):
        table.append(('@' + name,0,at.miscDirective),)

for s,i,expected in table:
    result = at.directiveKind4(s,i)
    assert result == expected, '%d %s result: %s expected: %s' % (
        i,repr(s),at.sentinelName(result),at.sentinelName(expected))
</t>
<t tx="ekr.20071113192611"></t>
<t tx="ekr.20071113193527"># 4 failures with Alt-5
</t>
<t tx="ekr.20071113193624"># 7 failures with Alt-5
</t>
<t tx="ekr.20071113193729">@

9 failures with Alt-5.

Any unit test that changes the structure of the outline should do the
following:

- The setUp method should do
    self.undoMark = c.undoer.getMark()
before altering the outline.

- The tearDown method should do
    c.undoer.rollBackToMark(self.undoMark)
after restoring the outline.

u.rollBackToMark deletes all entries in the undo stack following the saved mark.
This eliminates references to nodes that no longer exist in the present outline.
</t>
<t tx="ekr.20071113194033.3"># No failures with Alt-5 but warnings about no tnode lists.
</t>
<t tx="ekr.20071113194216"># 3 failurs with Alt-5
</t>
<t tx="ekr.20071113194424"># 3 failures with Alt-5
</t>
<t tx="ekr.20071113194424.1"></t>
<t tx="ekr.20071113194858"># All the following files have problems when run with Alt-5.
</t>
<t tx="ekr.20071113201736"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoAtFile tests')
</t>
<t tx="ekr.20071113201833"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoCommands tests')
</t>
<t tx="ekr.20071113201854"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoConfig tests')
</t>
<t tx="ekr.20071113202045"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoFileCommands tests.')
</t>
<t tx="ekr.20071113202153"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoFind tests.')
</t>
<t tx="ekr.20071113202153.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoFrame tests.')
</t>
<t tx="ekr.20071113202153.2"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoGlobals tests.')
</t>
<t tx="ekr.20071113202452"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoNodes tests.')
</t>
<t tx="ekr.20071113202510"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoUndo tests.')
</t>
<t tx="ekr.20071113203234"></t>
<t tx="ekr.20080310073711.1">gnx = g.app.nodeIndices.toString(None)
assert(gnx not in (None,'None'))
assert(len(gnx) &gt; 1)
</t>
<t tx="ekr.20080324133327.2">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.
</t>
<t tx="ekr.20080408094623.1"># start
# targetWord

e = c.editCommands
k = c.k
w = c.frame.body.wrapper

w.setInsertPoint(0)
k.arg = 't' # 'targetWord'
k.setState('find-word',1)
e.oneLineFlag = False
f = e.findWord(event=None)
i,j = w.getSelectionRange()
assert i == 10, 'expected 15, got %s' % (i)
</t>
<t tx="ekr.20080423110627.11">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p3)
    c.moveOutlineDown()
    moved = c.p
    assert moved.h == 'B',          'fail 1: %s' % moved.h
    assert moved.back().h == 'C',   'fail 2'
    assert moved.next().h == 'D',   'fail 3'
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    # assert moved.back() == p4, 'fail 4: %s != %s' % (moved.back(),p4)
    assert moved.next() == p5,      'fail 5: %s != %s' % (moved.next(),p5)
    c.undoer.undo()
    moved = c.p
    assert moved.back() == p2,      'fail 4'
    assert moved.next() == p4,      'fail 5'
    c.undoer.redo()
    moved = c.p
    assert moved.h == 'B',          'fail 1-2: %s' % moved.h
    assert moved.back().h == 'C',   'fail 2-2'
    assert moved.next().h == 'D',   'fail 3-2'
    c.undoer.undo()
    moved = c.p
    assert moved.back() == p2,      'fail 4-2'
    assert moved.next() == p4,      'fail 5-2'
    c.undoer.redo()
    moved = c.p
    assert moved.h == 'B',          'fail 1-3'
    assert moved.back().h == 'C',   'fail 2-3'
    assert moved.next().h == 'D',   'fail 3-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080423110627.12">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p4)
    c.moveOutlineUp()
    moved = c.p
    assert moved.h == 'C',          'fail 1'
    assert moved.back().h == 'A',   'fail 2'
    assert moved.next().h == 'B',   'fail 3'
    assert moved.back() == p2,      'fail 4: %s != %s' % (moved.back(),p2)
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    # assert moved.next() == p3,    'fail 5: %s != %s' % (moved.next(),p3)
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.13"># Do not change the root during external unit tests!
if not g.app.isExternalUnitTest:

    import leo.core.leoNodes as leoNodes
    
    while p.hasChildren():
        p.firstChild().doDelete(newNode=None)
    
    child = p.insertAsNthChild(0)
    child.setHeadString('child')
    
    try:
        oldRoot = c.rootPosition()
        child.moveToRoot(oldRoot=oldRoot) # Does not change child position.
        c.setRootPosition(child)
        assert c.positionExists(child)
        assert c.rootPosition().h == 'child', 'fail 1'
        next = c.rootPosition().next()
        assert next.h == 'Startup', 'fail 2: next: %s' % next
        c.rootPosition().doDelete(newNode=next)
        c.setRootPosition(next)
    finally:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
        # c.selectPosition(p)
        c.redraw_now()
</t>
<t tx="ekr.20080423110627.2">n = 0
for v in c.all_unique_vnodes_iter():
    if hasattr(v,'unknownAttributes'):
        d = v.unknownAttributes
        if d.get('str_leo_pos'):
            n += 1

# print(n)
assert n &lt; 2
</t>
<t tx="ekr.20080423110627.3"># Delete all children.
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
c.setHeadString(child,'child') # Force the headline to update.

try:
    assert child, 'no child'
    c.selectPosition(child)
    clone = c.clone()
    assert clone == c.p
    assert clone.h == 'child','fail headstring: %s' % clone.h
    assert child.isCloned(), 'fail 1'
    assert clone.isCloned(), 'fail 2'
    assert child.isCloned(), 'fail 3'
    assert clone.isCloned(), 'fail 4'
    c.undoer.undo()
    assert not child.isCloned(), 'fail 1-a'
    c.undoer.redo()
    assert child.isCloned(),    'fail 1-b'
    c.undoer.undo()
    assert not child.isCloned(), 'fail 1-c'
    c.undoer.redo()
    assert child.isCloned(),    'fail 1-d'
    oldRoot = c.rootPosition()
    clone.moveToRoot(oldRoot=oldRoot) # Does not change child position.
    assert child.isCloned(),    'fail 3-2'
    assert clone.isCloned(),    'fail 4-2'
    assert not clone.parent(),  'fail 5'
    assert not clone.back(),    'fail 6'
    clone.doDelete()
    assert not child.isCloned(), 'fail 7'
finally:
    # Delete all children.
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.5">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
child.setHeadString('child')
child2 = p.insertAsNthChild(1)
child2.setHeadString('child2')
grandChild = child.insertAsNthChild(0)
grandChild.setHeadString('grand child')
c.selectPosition(grandChild)
c.clone()
c.selectPosition(child)

try:
    p.expand()
    c.selectPosition(child)
    assert c.p.h == 'child','fail 1'
    c.copyOutline()
    oldVnodes = [p2.v for p2 in child.self_and_subtree()]
    c.selectPosition(child)
    c.p.contract() # Essential
    c.pasteOutline()
    assert c.p != child, 'fail 2'
    assert c.p.h == 'child','fail 3'
    newVnodes = [p2.v for p2 in c.p.self_and_subtree()]
    for v in newVnodes:
        assert v not in oldVnodes, 'fail 4'
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()

finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.8">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
child.setHeadString('child')
assert child, 'no child'
grandChild = child.insertAsNthChild(0)
grandChild.setHeadString('grand child')

try:
    c.selectPosition(child)
    c.copyOutline()
    oldVnodes = [p2.v for p2 in child.self_and_subtree()]
    c.p.contract() # Essential
    c.pasteOutlineRetainingClones()
    assert c.p != child, 'fail 2'
    newVnodes = [p2.v for p2 in c.p.self_and_subtree()]
    for v in newVnodes:
        assert v in oldVnodes, 'fail 3'
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080501121449.1"></t>
<t tx="ekr.20080501121449.3">assert p.h == '@test insert node',repr(p.h)
root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    assert p.h == '@test insert node',repr(p.h)
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p.expand()
    c.setCurrentPosition(p2)
    p4 = c.insertHeadline()
    assert p4 == c.p
    p = c.p
    assert p,'no p'
    p.setHeadString('inserted')
    assert p.back(),'no p.back(): %s' % (p)
    assert p.back().h == 'A', 'fail 1'
    assert p.next().h == 'B', 'fail 2'
    c.undoer.undo()
    # With the new undo logic, it takes 2 undoes.
    # The first undo undoes the headline changes,
    # the second undo undoes the insert node.
    c.undoer.undo() 
    p = c.p
    assert p == p2,         'fail 3:\n p: %s\np2: %s' % (p,p2)
    assert p.next() == p3,  'fail 4'
    c.undoer.redo()
    p = c.p
    assert p.back().h == 'A', 'fail 1-2'
    assert p.next().h == 'B', 'fail 2-2'
    c.undoer.undo()
    p = c.p
    assert p == p2,         'fail 3-2'
    assert p.next() == p3,  'fail 3-2'
    c.undoer.redo()
    p = c.p
    assert p.back().h == 'A', 'fail 1-3'
    assert p.next().h == 'B', 'fail 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503073030.1">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p.expand()
    c.setCurrentPosition(p2)
    c.moveOutlineLeft()
    moved = c.p
    assert moved.h == 'A','fail 1'
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    assert moved.back() == p, 'fail 2: %s != %s' % (moved.back(),p4)
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()

    moved.doDelete(newNode=p)

finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
        c.redraw_now(p)
</t>
<t tx="ekr.20080503073030.2">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p.expand()
    c.setCurrentPosition(p3)
    c.moveOutlineRight()
    moved = c.p
    assert moved.h == 'B', 'fail 1'
    assert moved.parent() == p2
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080503082625.3">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)
try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    if p.parent(): p.parent().expand()
        # A hack for external unit tests.
        # This should be corrected at the source.
    p.expand()
    c.selectPosition(p3)
    # print(c.p.h) # Correct: B
    c.deleteOutline()
    # print(c.p.h) # Should be A. was All unit tests until the hack above.
    c.redraw_now()
    p = c.p
    assert p.h == 'A', 'fail 1: got %s' % p.h
    assert p.next().h == 'C', 'fail 2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2, 'fail 4 %s' % p.back()
    assert p.next() == p4, 'fail 5'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-2'
    assert p.next().h == 'C',   'fail 2-2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2,  'fail 4-2'
    assert p.next() == p4,  'fail 5-2'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-3'
    assert p.next().h == 'C',   'fail 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503082625.4">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p3.insertAsNthChild(0)
    p4.setHeadString('child 1')
    p5 = p3.insertAsNthChild(1)
    p5.setHeadString('child 2')
    p.expand()
    p6 = p.insertAsNthChild(2)
    p6.setHeadString('C')
    c.setCurrentPosition(p3)
    c.promote()
    p = c.p
    assert p == p3,         'fail 1'
    assert p.h == 'B',      'fail 2'
    assert p.next().h=='child 1',            'fail 3'
    assert p.next().next().h == 'child 2',   'fail child 1'
    assert p.next().next().next().h == 'C',  'fail child 2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2,  'fail 5'
    assert p.next() == p6,  'fail 6'
    assert p.firstChild().h=='child 1',          'fail child 3'
    assert p.firstChild().next().h == 'child 2', 'fail child 4'
    c.undoer.redo()
    p = c.p
    assert p == p3,         'fail 1-2'
    assert p.h == 'B',      'fail 2-2'
    assert p.next().h=='child 1',            'fail 3-2'
    assert p.next().next().h == 'child 2',   'fail child 1-2'
    assert p.next().next().next().h == 'C',  'fail child 2-2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2,                      'fail 5-2'
    assert p.next() == p6,                      'fail 6-2'
    assert p.firstChild().h=='child 1',         'fail child 3-2'
    assert p.firstChild().next().h == 'child 2','fail child 4-2'
    c.undoer.redo()
    p = c.p
    assert p == p3,     'fail 1-3'
    assert p.h == 'B',  'fail 2-3'
    assert p.next().h=='child 1',            'fail 3-3'
    assert p.next().next().h == 'child 2',   'fail child 1-3'
    assert p.next().next().next().h == 'C',  'fail child 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503082625.5">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p3)
    c.demote()
    p = c.p
    assert p == p3,         'fail 1'
    assert p.h == 'B',      'fail 2'
    assert not p.next(),    'fail 3'
    assert p.firstChild().h == 'C',          'fail child 1'
    assert p.firstChild().next().h == 'D',   'fail child 2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2, 'fail 5'
    assert p.next() == p4, 'fail 6'
    c.undoer.redo()
    assert p == p3,         'fail 1-2'
    assert p.h == 'B',      'fail 2-2'
    assert not p.next(),    'fail 3-2'
    assert p.firstChild().h == 'C',         'fail child 1-2'
    assert p.firstChild().next().h == 'D',  'fail child 2-2'
    c.undoer.undo()
    p = c.p
    assert p.back() == p2, 'fail 4-2'
    assert p.next() == p4, 'fail 5-2'
    c.undoer.redo()
    assert p == p3,         'fail 1-3'
    assert p.h == 'B',      'fail 2-3'
    assert not p.next(),    'fail 3-3'
    assert p.firstChild().h == 'C',         'fail child 1-3'
    assert p.firstChild().next().h == 'D',  'fail child 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503132221.1"># cc will be None when unit tests run dynamically.
cc = c.chapterController
if cc and not g.app.isExternalUnitTest:
    root = p.copy()
    # Init the children
    while p.hasChildren():
        p.firstChild().doDelete(newNode=None)
    child = p.insertAsNthChild(0)
    # c.setHeadString(child,'child') # Force the headline to update.
    child.h = 'child'
    child.b = '# child'
    # Kill the chapter so the test will not fail if run twice.
    chapter = cc.chaptersDict.get('new-chapter')
    if chapter:
        cc.removeChapterByName('new-chapter')
    try:
        c.selectPosition(child)
        c.chapterController.createChapterByName(
            'new-chapter',child,'Create Chapter From Node')
        if 0:
            c.undoer.undo()
            c.undoer.redo()
            c.undoer.undo()
            c.undoer.redo()
            c.undoer.undo() # Don't pollute future unit tests.
        else:
            c.redraw_now() # Required.
            chapterNode = cc.findChapterNode('new-chapter')
            assert chapterNode,'fail 1: %s' % (undoType)
            chapterNode.doDelete()
            c.redraw_now()
    finally:
        cc.selectChapterByName('main',collapse=True)
        if 1: # Do this so the activeUnitTests.txt does not change.
            while root.hasChildren():
                root.firstChild().doDelete(newNode=None)
        c.redraw_now()
</t>
<t tx="ekr.20080805104144.1">fc = c.fileCommands
child = p.firstChild()
grandChild = child.firstChild()
child.v.unknownAttributes = {'unit_test_child':'abcd'}
grandChild.v.unknownAttributes = {'unit_test_grandchild':'wxyz'}


try:
    s = fc.putDescendentVnodeUas (p)
    
    if 0: # This test is too flaky to be useful.
        if g.isPython3:
            expected = ' descendentVnodeUnknownAttributes=\
7d7100285803000000302e3071017d7102580f000000756e6974\
5f746573745f6368696c64710358040000006162636471047358\
05000000302e302e3071057d71065814000000756e69745f7465\
73745f6772616e646368696c64710758040000007778797a710873752e"'
        else:
            expected = ' descendentVnodeUnknownAttributes="\
7d7100285503302e3071017d7102550f756e69745f746573745f\
6368696c6471035504616263647104735505302e302e3071057d\
71065514756e69745f746573745f6772616e646368696c647107\
55047778797a710873752e"'
    
        assert s == expected, 'expected: %s, got: %s' % (repr(expected),repr(s))
finally:
    del child.v.unknownAttributes
    del grandChild.v.unknownAttributes
</t>
<t tx="ekr.20080805104144.2"></t>
<t tx="ekr.20080805104144.3"></t>
<t tx="ekr.20080805105541.1">val = p.archivedPosition(root_p=p)
assert val == [0],'expected %s, got %s' % ([0],val)

i = 0
for z in p.parent().children_iter():
    val = z.archivedPosition(root_p=p.parent())
    assert val == [0,i],'expected %s, got %s'%([0,i],val)
    i += 1

i = 0
for z in p.children_iter():
    val = z.archivedPosition(root_p=p)
    assert val == [0,i],'expected %s, got %s'%([0,i],val)
    i += 1

i = 0
for z in p.firstChild().next().children_iter():
    val = z.archivedPosition(root_p=p)
    assert val == [0,1,i],'expected %s, got %s'%([0,1,i],val)
    i += 1
</t>
<t tx="ekr.20080805122315.1"></t>
<t tx="ekr.20080805122315.2"></t>
<t tx="ekr.20080805122315.3"></t>
<t tx="ekr.20080805122315.4"></t>
<t tx="ekr.20080806072412.1">child1 = p.firstChild()
child2 = p.firstChild().next()
grandChild1 = child2.firstChild()
grandChild2 = grandChild1.next()
greatGrandChild11 = grandChild1.firstChild()
greatGrandChild12 = greatGrandChild11.next()
greatGrandChild21 = grandChild2.firstChild()
greatGrandChild22 = greatGrandChild21.next()
root_v = p.v

table = (
    # Errors.
    (None,'-1'),
    (None,'1'),
    (None,'0.2'),
    (None,'0.0.0'),
    (None,'0.1.2'),
    # Valid.
    (root_v,'0'),
    (child1.v,'0.0'),
    (child2.v,'0.1'),
    (grandChild1.v,'0.1.0'),
    (greatGrandChild11.v,'0.1.0.0'),
    (greatGrandChild12.v,'0.1.0.1'),
    (grandChild2.v,'0.1.1'),
    (greatGrandChild21.v,'0.1.1.0'),
    (greatGrandChild22.v,'0.1.1.1'),
)

for v,archivedPosition in table:
    v2 = c.fileCommands.resolveArchivedPosition(archivedPosition,root_v)
    assert v == v2,'got %s, expected %s' % (v2,v)
</t>
<t tx="ekr.20080806072412.2"></t>
<t tx="ekr.20080806072412.3"></t>
<t tx="ekr.20080806072412.4"></t>
<t tx="ekr.20080806072412.5"></t>
<t tx="ekr.20080806080425.1"></t>
<t tx="ekr.20080806080425.2"></t>
<t tx="ekr.20080806080425.3"></t>
<t tx="ekr.20080806080425.4"></t>
<t tx="ekr.20080907123324.2">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20080907123324.3">def child():
    pass

#
#
#
#
#
#
</t>
<t tx="ekr.20080917151620.13">@header

aList = g.get_directives_dict_list(p)
g.scanAtHeaderDirectives(aList)
</t>
<t tx="ekr.20080917151620.14">@noheader

aList = g.get_directives_dict_list(p)
g.scanAtHeaderDirectives(aList)
</t>
<t tx="ekr.20080917151620.15">@lineending cr

aList = g.get_directives_dict_list(p)
s = g.scanAtLineendingDirectives(aList)

assert s == '\r'
</t>
<t tx="ekr.20080917151620.16">@lineending crlf

aList = g.get_directives_dict_list(p)
s = g.scanAtLineendingDirectives(aList)
# print('@lineending: %s'%repr(s))

assert s == '\r\n'
</t>
<t tx="ekr.20080917151620.17">@lineending lf

aList = g.get_directives_dict_list(p)
s = g.scanAtLineendingDirectives(aList)

assert s == '\n'
</t>
<t tx="ekr.20080917151620.18">@lineending nl

aList = g.get_directives_dict_list(p)
s = g.scanAtLineendingDirectives(aList)

assert s == '\n'
</t>
<t tx="ekr.20080917151620.19">@lineending platform

import sys

aList = g.get_directives_dict_list(p)
s = g.scanAtLineendingDirectives(aList)

if sys.platform.startswith('win'):
    assert s == '\r\n'
else:
    assert s == '\n'
</t>
<t tx="ekr.20080917151620.21">@pagewidth 40

aList = g.get_directives_dict_list(p)
n = g.scanAtPagewidthDirectives(aList)

assert n == 40
</t>
<t tx="ekr.20080917151620.22">aList = g.get_directives_dict_list(p.firstChild())
s = c.scanAtPathDirectives(aList)
end = g.os_path_normpath(r'leo/test')

assert s.endswith(end),repr(s)
</t>
<t tx="ekr.20080917151620.24">grandChild = p.firstChild().firstChild()
aList = g.get_directives_dict_list(grandChild)
s = c.scanAtPathDirectives(aList)
end = g.os_path_normpath(r'leo/test/unittest')

assert s.endswith(end),repr(s)
</t>
<t tx="ekr.20080917151620.25"></t>
<t tx="ekr.20080917151620.27">greatGrandChild = p.firstChild().firstChild().firstChild()
aList = g.get_directives_dict_list(greatGrandChild)
s = c.scanAtPathDirectives(aList)
end = g.os_path_normpath(r'leo/test/unittest')

assert s.endswith(end),repr(s)
</t>
<t tx="ekr.20080917151620.28"></t>
<t tx="ekr.20080917151620.29"></t>
<t tx="ekr.20080917151620.31">@tabwidth 6

aList = g.get_directives_dict_list(p)
n = g.scanAtTabwidthDirectives(aList)

assert n == 6,repr(n)
</t>
<t tx="ekr.20080917151620.32">@tabwidth -6

aList = g.get_directives_dict_list(p)
n = g.scanAtTabwidthDirectives(aList)

assert n == -6
</t>
<t tx="ekr.20080917151620.33">@nowrap

aList = g.get_directives_dict_list(p)
s = g.scanAtWrapDirectives(aList)

assert s is False,repr(s)
</t>
<t tx="ekr.20080917151620.34">@wrap

aList = g.get_directives_dict_list(p)
s = g.scanAtWrapDirectives(aList)

assert s is True,repr(s)
</t>
<t tx="ekr.20080917151620.35">aList = g.get_directives_dict_list(p)
s = g.scanAtWrapDirectives(aList)

assert s is None,repr(s)
</t>
<t tx="ekr.20080917151620.9">@language python
@comment a b c
    # @comment must follow @language
@tabwidth -4
@pagewidth 72
@encoding utf-8
@lineending crlf

d = c.scanAllDirectives(p)
# print(g.dictToString(d))

table = (
    ('delims', ('a','b','c'),),
    ('encoding','utf-8'),
    ('language','python'),
    ('lineending','\r\n'),
    ('pagewidth',72),
    ('tabwidth',-4),
)

for kind,expected in table:
    got = d.get(kind)
    assert got == expected, 'kind: %s, expected %s, got %s' % (
        kind,repr(expected),repr(got))
</t>
<t tx="ekr.20081001094920.2"></t>
<t tx="ekr.20081001094920.3">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    assert p1.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.4">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    assert p1.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.5">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    p2 = p1.insertAsLastChild()
    assert p1.textOffset() == 0
    assert p2.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.6">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    body = '''   %s
    ''' % (g.angleBrackets(' section '))
    p1.setBodyString(body)
    p2 = p1.insertAsLastChild()
    head = g.angleBrackets(' section ')
    p2.setHeadString(head)
    assert p1.textOffset() == 0
    assert p2.textOffset() == 3

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.7">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    body = '''     %s
    ''' % (chr(64) + 'others') # ugly hack
    p1.setBodyString(body)
    p2 = p1.insertAsLastChild()
    assert p1.textOffset() == 0
    assert p2.textOffset() == 5
    root.firstChild().doDelete(newNode = None)

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081111082931.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20081111084046.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

</t>
<t tx="ekr.20081111084046.2"></t>
<t tx="ekr.20081111084046.3"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20081111084046.4"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

</t>
<t tx="ekr.20081215084144.10">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.2">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20081215084144.3">This is the first sentence.  This
is the second sentence.  And
 is the last sentence.
</t>
<t tx="ekr.20081215084144.4">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.5">This is the first sentence.  This
is the second sentence.  And
 is the last sentence.
</t>
<t tx="ekr.20081215084144.7">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20081215084144.8">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.9">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20090102061858.2">child = p.insertAsLastChild()
assert c.positionExists(child)
child.doDelete()
assert not c.positionExists(child),'fail 1'

# also check the same on root level
child = c.rootPosition().insertAfter()
assert c.positionExists(child)
child.doDelete()
assert not c.positionExists(child),'fail 2'
</t>
<t tx="ekr.20090102062037.2">for p in c.all_positions():
    assert c.positionExists(p)
        # 2012/03/08: If a root is given, the search is confined to that root only.

</t>
<t tx="ekr.20090104053806.1"># Disabled because modifying errorTest.py creates annoying bzr conflicts.

import os

path = g.os_path_finalize_join(g.app.testDir,'unittest','errorTest.py')
assert g.os_path_exists(path),path
timeStamp = c.timeStampDict.get(path)
val = c.checkFileTimeStamp(path)
assert val == True

f = open(path)
s = f.read()
lines = g.splitLines(s)
result = [] ; found = False
tag = '# timestamp:'
for line in lines:
    if line.startswith(tag):
        timeStamp = os.path.getmtime(path)
        result.append('%s %s\n' % (tag,timeStamp))
        found = True
    else:
        result.append(line)
f.close()

assert found,' no line starts with "%s"' % tag

f = open(path,'w')
f.write(''.join(result))
f.close()

timeStamp2 = os.path.getmtime(path)
assert timeStamp != timeStamp2
val = c.checkFileTimeStamp(path)
assert not val,repr(val)
c.setFileTimeStamp(path)
val = c.checkFileTimeStamp(path)
assert val,repr(val)
</t>
<t tx="ekr.20090130133404.2">v = p.v
b = p.b
p.b = b
assert p.b == b
v.b = b
assert v.b == b

h = p.h
p.h = h
assert p.h == h
v.h = h
assert v.h == h

for p in c.all_positions():
    assert p.b == p.bodyString()
    assert p.v.b == p.v.bodyString()
    assert p.h == p.headString()
    assert p.v.h == p.v.headString()
</t>
<t tx="ekr.20090225102051.2">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20090225102051.3">Line 1

Last line: no newline
</t>
<t tx="ekr.20090225102051.4">Line 1

Last line: no newline
</t>
<t tx="ekr.20090427104851.10">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.11">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.12">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.13">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.14">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.15">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.16">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.17">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.18">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.7">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20090427104851.8">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.9">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090507084947.5152"># print(p.v.fileIndex)

if g.app.isExternalUnitTest:
    pass # Not a valid test when run externally.
else:
    # new_gnxs:
    assert p.v.fileIndex == 'ekr.20090507084947.5152',p.v.fileIndex
    # old gnxs:
    # assert p.v.fileIndex == ('ekr', '20090507084947', 5152)
</t>
<t tx="ekr.20090529115704.4396"></t>
<t tx="ekr.20090529115704.4397">import unittest

if 1:
    x = c.shadowController
else:
    import leo.core.leoShadow as leoShadow
    x = leoShadow.shadowController(c,trace=False,trace_writers=False)

suite = unittest.makeSuite(unittest.TestCase)
root = g.findNodeAnywhere(c,'@shadow-tests')
assert root, 'Node not found: @shadow-tests'

trace = False ; vrbose = False
for p in root.children_iter():
    h = p.h.strip()
    if h.startswith('@shadow-test-lax'):
        test = x.AtShadowTestCase(c,p,x,lax=True)
    elif h.startswith('@shadow-test'):
        test = x.AtShadowTestCase(c,p,x,lax=False)
    else:
        test = None
    if test:
        if trace and verbose: print(h)
        suite.addTest(test)
# if suite:
    # g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20090529115704.4398">@

All the tags should be tested at least once (equal, replace, delete, insert).

The replace, delete, insert operations should happen at least once:
    1. At the beginning of a node.
    2. In the middle of a node.
    3. At the end of a node.

For the delete and replace operators we must also test the case that the
deletion or replacement spans more than one block.
</t>
<t tx="ekr.20090529115704.4400"></t>
<t tx="ekr.20090529115704.4401">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4402">line 1
line 2 changed
line 3
</t>
<t tx="ekr.20090529115704.4403"></t>
<t tx="ekr.20090529115704.4404">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4405">line 1 changed
line 2
line 3
</t>
<t tx="ekr.20090529115704.4406"></t>
<t tx="ekr.20090529115704.4407">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4408">line 1
line 2
line 3 changed
</t>
<t tx="ekr.20090529115704.4409"></t>
<t tx="ekr.20090529115704.4410">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4411">line 2
line 3
</t>
<t tx="ekr.20090529115704.4412"></t>
<t tx="ekr.20090529115704.4413">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4414">line 1
line 3
</t>
<t tx="ekr.20090529115704.4415"></t>
<t tx="ekr.20090529115704.4416">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4417">line 1
line 2
</t>
<t tx="ekr.20090529115704.4418"></t>
<t tx="ekr.20090529115704.4419">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4420">inserted line
line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4421"></t>
<t tx="ekr.20090529115704.4422">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4423">line 1
inserted line
line 2
line 3
</t>
<t tx="ekr.20090529115704.4424"></t>
<t tx="ekr.20090529115704.4425">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4426">line 1
line 2
inserted line
line 3
</t>
<t tx="ekr.20090529115704.4427"></t>
<t tx="ekr.20090529115704.4428">line 1
line 2
line 3
</t>
<t tx="ekr.20090529115704.4429">line 1
line 2
line 3
inserted line
</t>
<t tx="ekr.20090529115704.4430"></t>
<t tx="ekr.20090529115704.4431">@others
</t>
<t tx="ekr.20090529115704.4432">node 1 line 1
</t>
<t tx="ekr.20090529115704.4433">node 2 line 1
</t>
<t tx="ekr.20090529115704.4434">@others
</t>
<t tx="ekr.20090529115704.4435">node 1 line 1
inserted node at end of node 1
</t>
<t tx="ekr.20090529115704.4436">node 2 line 1
</t>
<t tx="ekr.20090529115704.4437"></t>
<t tx="ekr.20090529115704.4438">@others
</t>
<t tx="ekr.20090529115704.4439">node 1 line 1
</t>
<t tx="ekr.20090529115704.4440">node 2 line 1
</t>
<t tx="ekr.20090529115704.4441">@others
</t>
<t tx="ekr.20090529115704.4442">node 1 line 1
</t>
<t tx="ekr.20090529115704.4443">inserted node at start of node 2
node 2 line 1
</t>
<t tx="ekr.20090529115704.4444"></t>
<t tx="ekr.20090529115704.4445">@others
</t>
<t tx="ekr.20090529115704.4446">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4447">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4448">@others
</t>
<t tx="ekr.20090529115704.4449">node 1 line 1
</t>
<t tx="ekr.20090529115704.4450">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4451"></t>
<t tx="ekr.20090529115704.4452">@others
</t>
<t tx="ekr.20090529115704.4453">node 1 line 1
</t>
<t tx="ekr.20090529115704.4454">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4455">@others
</t>
<t tx="ekr.20090529115704.4456">node 1 line 1
</t>
<t tx="ekr.20090529115704.4457">node 2 line 2
</t>
<t tx="ekr.20090529115704.4458"></t>
<t tx="ekr.20090529115704.4459">@others
</t>
<t tx="ekr.20090529115704.4460">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4461">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4462">@others
</t>
<t tx="ekr.20090529115704.4463">node 1 line 1
node 1 line 1 changed
</t>
<t tx="ekr.20090529115704.4464">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4465"></t>
<t tx="ekr.20090529115704.4466">@others
</t>
<t tx="ekr.20090529115704.4467">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4468">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4469">@others
</t>
<t tx="ekr.20090529115704.4470">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4471">node 2 line 1 changed
node 2 line 2
</t>
<t tx="ekr.20090529115704.4472"></t>
<t tx="ekr.20090529115704.4473">@others
</t>
<t tx="ekr.20090529115704.4474">node 1 line 1
</t>
<t tx="ekr.20090529115704.4475">node 2 line 1
</t>
<t tx="ekr.20090529115704.4476">@others
</t>
<t tx="ekr.20090529115704.4477">node 1 line 1
inserted node 1 at end of node 1
inserted node 2 at end of node 1
</t>
<t tx="ekr.20090529115704.4478">node 2 line 1
</t>
<t tx="ekr.20090529115704.4479"></t>
<t tx="ekr.20090529115704.4480">@others
</t>
<t tx="ekr.20090529115704.4481">node 1 line 1
</t>
<t tx="ekr.20090529115704.4482">node 2 line 1
</t>
<t tx="ekr.20090529115704.4483">@others
</t>
<t tx="ekr.20090529115704.4484">node 1 line 1
</t>
<t tx="ekr.20090529115704.4485">inserted node 1 at start of node 2
inserted node 2 at start of node 2
node 2 line 1
</t>
<t tx="ekr.20090529115704.4486"></t>
<t tx="ekr.20090529115704.4487">@others
</t>
<t tx="ekr.20090529115704.4488">node 1 line 1
node 1 line 2
node 1 line 3
</t>
<t tx="ekr.20090529115704.4489">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4490">@others
</t>
<t tx="ekr.20090529115704.4491">node 1 line 1
node 1 line 2 changed
node 1 line 3 changed
</t>
<t tx="ekr.20090529115704.4492">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4493"></t>
<t tx="ekr.20090529115704.4494">@others
</t>
<t tx="ekr.20090529115704.4495">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4496">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4497">@others
</t>
<t tx="ekr.20090529115704.4498">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4499">node 2 line 1 changed
node 2 line 2 changed
</t>
<t tx="ekr.20090529115704.4500"></t>
<t tx="ekr.20090529115704.4501">@others
</t>
<t tx="ekr.20090529115704.4502">node 1 line 1
node 1 line 2
node 1 line 3
</t>
<t tx="ekr.20090529115704.4503">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4504">@others
</t>
<t tx="ekr.20090529115704.4505">node 1 line 1
</t>
<t tx="ekr.20090529115704.4506">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4507"></t>
<t tx="ekr.20090529115704.4508">@others
</t>
<t tx="ekr.20090529115704.4509">node 1 line 1
</t>
<t tx="ekr.20090529115704.4510">node 2 line 1
node 2 line 2
node 2 line 3
</t>
<t tx="ekr.20090529115704.4511">@others
</t>
<t tx="ekr.20090529115704.4512">node 1 line 1
</t>
<t tx="ekr.20090529115704.4513">node 2 line 3
</t>
<t tx="ekr.20090529115704.4514"></t>
<t tx="ekr.20090529115704.4515">@others
</t>
<t tx="ekr.20090529115704.4516">node 1 line 1
@verbatim
@verbatim
@verbatim
@verbatim
#@ should be handled by verbatim
line 1 line 3
</t>
<t tx="ekr.20090529115704.4517">node 2 line 1
node 2 line 2
node 2 line 3
</t>
<t tx="ekr.20090529115704.4518">@others
</t>
<t tx="ekr.20090529115704.4519">node 1 line 1
line 1 line 3
</t>
<t tx="ekr.20090529115704.4520">node 2 line 1
node 2 line 2
node 2 line 3
</t>
<t tx="ekr.20090529115704.4521"></t>
<t tx="ekr.20090529115704.4522">@others
</t>
<t tx="ekr.20090529115704.4523">node 1 line 1
</t>
<t tx="ekr.20090529115704.4524">@verbatim
@verbatim
@verbatim
@verbatim
#@ should be handled by verbatim
node 2 line 2
</t>
<t tx="ekr.20090529115704.4525">@others
</t>
<t tx="ekr.20090529115704.4526">node 1 line 1
</t>
<t tx="ekr.20090529115704.4527">node 2 line 2
</t>
<t tx="ekr.20090529115704.4528"></t>
<t tx="ekr.20090529115704.4529">@others
</t>
<t tx="ekr.20090529115704.4530">node 1 line 1
@verbatim
@verbatim
@verbatim
@verbatim
#@ should be handled by verbatim
line 1 line 3
</t>
<t tx="ekr.20090529115704.4531">node 2 line 1
node 2 line 2
node 2 line 3
</t>
<t tx="ekr.20090529115704.4532">@others
</t>
<t tx="ekr.20090529115704.4533">node 1 line 1
@verbatim
@verbatim
@verbatim
@verbatim
#@ should be handled by verbatim
line 1 line 3
</t>
<t tx="ekr.20090529115704.4534">node 2 line 1
node 2 line 2
node 2 line 3
</t>
<t tx="ekr.20090529115704.4535"></t>
<t tx="ekr.20090529115704.4536">@others
</t>
<t tx="ekr.20090529115704.4537">node 1 line 1
@verbatim
@verbatim
@verbatim
@verbatim
#@ should be handled by verbatim
</t>
<t tx="ekr.20090529115704.4538">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4539">@others
</t>
<t tx="ekr.20090529115704.4540">node 1 line 1
</t>
<t tx="ekr.20090529115704.4541">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4542"># This fails because the @all read logic inserts a second verbatim, I think.
</t>
<t tx="ekr.20090529115704.4543">@others
</t>
<t tx="ekr.20090529115704.4544">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20090529115704.4545">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4546">@others
</t>
<t tx="ekr.20090529115704.4547">node 1 line 1
@verbatim
#@ should be handled by verbatim
node 1 line 2
</t>
<t tx="ekr.20090529115704.4548">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20090529115704.4550">x = c.shadowController

path = x.baseDirName()
expected = g.os_path_dirname(g.os_path_abspath(g.os_path_join(c.fileName())))

# print(path)
# print(expected)

assert path == expected,'\nexpected: %s\ngot     : %s' % (expected,path)
</t>
<t tx="ekr.20090529115704.4551">x = c.shadowController

filename = 'xyzzy'

path = x.pathName(filename)
expected = g.os_path_abspath(g.os_path_join(x.baseDirName(),filename))

# print(path)
# print(expected)

assert path == expected,'\nexpected: %s\ngot     : %s' % (expected,path)
</t>
<t tx="ekr.20090529115704.4552">x = c.shadowController

filename = 'xyzzy'
path = x.dirName(filename)
expected = g.os_path_dirname(g.os_path_abspath(
    g.os_path_join(g.os_path_dirname(c.fileName()),filename)))

# print(path)
# print(expected)

assert path == expected,'\nexpected: %s\ngot     : %s' % (expected,path)
</t>
<t tx="ekr.20090529115704.4553">x = c.shadowController

# print(c.config.getString('shadow_subdir'))

subdir = c.config.getString('shadow_subdir') or '.leo_shadow'
prefix = c.config.getString('shadow_prefix') or ''

# print('c.fileName',c.fileName())
# print('c.relativeFileName',c.relativeFileName())

filename = 'xyzzy'
path = x.shadowPathName(filename)
expected = g.os_path_abspath(g.os_path_join(
    g.os_path_dirname(c.fileName()),subdir,prefix+filename))

if 0:
    print('prefix',prefix)
    print(path)
    print(expected)

assert path == expected,'\nexpected: %s\ngot     : %s' % (expected,path)
</t>
<t tx="ekr.20090529115704.4554">x = c.shadowController

subdir = c.config.getString('shadow_subdir') or '.leo_shadow'
prefix = c.config.getString('shadow_prefix') or ''

# print('c.fileName',c.fileName())
# print('c.relativeFileName',c.relativeFileName())

filename = 'xyzzy'
path = x.shadowDirName(filename)
expected = g.os_path_abspath(
    g.os_path_join(g.os_path_dirname(c.fileName()),subdir))

# print(path)
# print(expected)

assert path == expected,'\nexpected: %s\ngot     : %s' % (expected,path)
</t>
<t tx="ekr.20090529115704.4555">if 0: # x.rename no longer exists
    x = c.shadowController

    filename = x.pathName('xyzzy')
    assert not g.os_path_exists(filename)
    n = x.errors
    x.rename('xyzzy','xyzzy2',silent=True)
    assert x.errors == n+1
    assert x.last_error.startswith('can not rename')
    # print(x.last_error)
</t>
<t tx="ekr.20090529115704.4556">x = c.shadowController

filename = x.pathName('xyzzy')
# print(filename)
assert not g.os_path_exists(filename)
n = x.errors
x.unlink('xyzzy',silent=True)
assert x.errors == n+1
assert x.last_error.startswith('can not delete xyzzy')
# print(x.last_error)
</t>
<t tx="ekr.20090529115704.4557">import glob
import os

x = c.shadowController

@others

shadow_fn  = x.shadowPathName('unittest/xyzzy/test.py')
shadow_dir = x.shadowDirName('unittest/xyzzy/test.py')

if g.os_path_exists(shadow_fn):
    g.utils_remove(shadow_fn,verbose=True)
    assert not os.path.exists(shadow_fn),'still exists: %s' % shadow_fn

deleteShadowDir(shadow_dir)

x.makeShadowDirectory(shadow_dir)
assert os.path.exists(shadow_dir)

deleteShadowDir(shadow_dir)
</t>
<t tx="ekr.20090529115704.4558">def deleteShadowDir(shadowDir):

    if g.os_path_exists(shadow_dir):
        files = g.os_path_abspath(g.os_path_join(shadow_dir,"*.*"))
        files = glob.glob(files)
        for z in files:
            if z != shadow_dir:
                # g.trace(z)
                os.unlink(z)
        # g.trace(shadow_dir)
        os.rmdir(shadow_dir)
        assert not os.path.exists(shadow_dir),'still exists: %s' % shadow_dir
</t>
<t tx="ekr.20090529115704.4559">x = c.shadowController
s = 'abc'

fn = '../test/unittest/replaceFileWithStringTestFile.py'
path = g.os_path_abspath(g.os_path_join(g.app.loadDir,fn))

x.replaceFileWithString(path,s)
f = open(path)
s2 = f.read()
f.close()
assert s == s2
</t>
<t tx="ekr.20090529115704.4560">x = c.shadowController

lines1 = ('a','b','c')
lines2 = ('a','x','c')

x.show_error(
    lines1,lines2,
    message = "Test of x.show_error",
    lines1_message = "lines1",
    lines2_message = "lines2")
</t>
<t tx="ekr.20090529115704.4562">at = c.atFileCommands

# at.toString is set by the execute-script command.
# at.outputFile = f = g.fileLikeObject() # Re-allocate for the test.
f = at.openStringFile('abc')
assert isinstance(f,g.fileLikeObject)
s = 'abc'
f.write(s)
s2 = at.closeStringFile(f)
assert s == s2,s2
# assert at.toString
</t>
<t tx="ekr.20090529115704.4563">at = c.atFileCommands
x = c.shadowController

filename = x.pathName('xyzzy')
assert not g.os_path_exists(filename)

try:
    kind,theFile = at.openForWrite(filename)
    assert kind == 'check'
    # print(repr(theFile))
    if theFile: theFile.close()

finally:
    if g.os_path_exists(filename):
        x.unlink(filename)
        assert not g.os_path_exists(filename)
</t>
<t tx="ekr.20090529115704.4564">at = c.atFileCommands
x = c.shadowController

changed = c.changed
child = p.firstChild()
s = child.b

try:
    fn = 'unittest/read_test.py'
    child.setHeadString('@shadow %s' % fn)
    at.writeOneAtShadowNode(child,toString=False,force=True)
    at.readOneAtShadowNode(fn,child)
finally:
    child.setHeadString('@@shadow %s' % fn)
    c.setChanged(changed)
</t>
<t tx="ekr.20090529115704.4565">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20090529115704.4566">import os
s = 'abc'
fn = 'unitTestFile.py'
path = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','unittest',fn))
try:
    c.atFileCommands.replaceFileWithString(path,s)
    f = open(path)
    s2 = f.read()
    f.close()
    assert s == s2
finally:
    if g.os_path_exists(path):
        os.unlink(path)
</t>
<t tx="ekr.20090529115704.4567">at = c.atFileCommands
x = c.shadowController
changed = c.changed
child = p.firstChild()
s = child.b

try:
    child.setHeadString('@shadow unittest/test_1.py')
    fn = 'unittest/test_1.py'
    shadow_fn = x.shadowPathName(fn)
    shadow_dir = x.shadowDirName(fn)
    x.makeShadowDirectory(shadow_dir)
    if g.os_path_exists(shadow_fn):
        g.utils_remove(shadow_fn,verbose=True)
    at.writeOneAtShadowNode(child,toString=True,force=True)
    assert at.startSentinelComment == '#','startSentinelComment: %s' % (
        repr(at.startSentinelComment))
    assert at.endSentinelComment == '','endSentinelComment: %s' % (
        repr(at.endSentinelComment))
    if 0:
        print('public...\n',at.public_s)
        print('private...\n',at.private_s)
    at.writeOneAtShadowNode(child,toString=False,force=True)
    assert g.os_path_exists(shadow_fn),'not found: %s' % shadow_fn
    # No need to remove this: it's in the unittest directory.
    # g.utils_remove(shadow_fn,verbose=True)
finally:

    child.setHeadString('@@shadow unittest/test_1.py')
    c.setChanged(changed)
    # c.redraw_now()
</t>
<t tx="ekr.20090529115704.4568"># body of @shadow test node
# The last line.
</t>
<t tx="ekr.20090529141856.4682"></t>
<t tx="ekr.20090529141856.4684">@language python
@tabwidth -4
</t>
<t tx="ekr.20090529141856.4685"># Create unit tests in g.app.scriptDict["suite"]

suite = c.testManager.makeImportExportSuite("exportTests",doImport=False)

# g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20090529141856.4698"></t>
<t tx="ekr.20090529141856.4699"># Create unit tests in g.app.scriptDict["suite"]

suite = c.testManager.makeImportExportSuite("importTests",doImport=True)

# g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20090529141856.4716">@tabwidth -4
@language python
</t>
<t tx="ekr.20090529141856.4717"></t>
<t tx="ekr.20090529141856.4718">fileName = p.h

s = '''\
class cTestClass1 {

    int foo (int a) {
        a = 2 ;
    }

    char bar (float c) {
        ;
    }
}
'''

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4719">fileName = p.h

s = '''\
class cTestClass1 {

    int foo (int a) {
# an underindented line.
        a = 2 ;
    }

    # This should go with the next function.

    char bar (float c) {
        ;
    }
}
'''

g.app.unitTestDict ['expectedErrors'] = 1
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4720">fileName = p.h

s = '''\
class cTestClass1 {

    int foo (int a) {
        a = 2 ;
    }

    char bar (float c) {
        ;
    }
}
'''

c.importCommands.defaultImporterUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4721">fileName = p.h

s = '''\
void
aaa::bbb::doit
    (
    awk* b
    )
{
    assert(false);
}

bool
aaa::bbb::dothat
    (
    xyz *b
    ) //  &lt;---------------------problem
{
    return true;
}
'''

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4722">fileName = p.h

s = '''\
void
aaa::bbb::doit
    (
    awk* b
    )
{
    assert(false);
}

bool
aaa::bbb::dothat
    (
    xyz *b
    ) 
{
    return true;
} //  &lt;---------------------problem
'''

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4723">fileName = p.h

s = '''
void
aaa::bbb::doit
    (
    awk* b  // leading blank
    )
{
	assert(false); // leading tab
}

'''

g.app.unitTestDict ['expectedErrors'] = 0 # Intermixed blanks and tabs are ok for C.

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4724">fileName = p.h

s = '''\
static void
ReleaseCharSet(cset)
    CharSet *cset;
{
    ckfree((char *)cset-&gt;chars);
    if (cset-&gt;ranges) {
    ckfree((char *)cset-&gt;ranges);
    }
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4725">fileName = p.h

s = '''\
Tcl_Obj *
Tcl_NewLongObj(longValue)
    register long longValue;	/* Long integer used to initialize the
         * new object. */
{
    return Tcl_DbNewLongObj(longValue, "unknown", 0);
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4726">fileName = p.h

s = '''\
extern  "C"
{
#include "stuff.h"
void    init(void);
#include "that.h"
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.cUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4727"></t>
<t tx="ekr.20090529141856.4728">s = '''\
namespace {
    class cTestClass1 {
        ;
    }
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.cSharpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4729">s = '''\
namespace {
class cTestClass1 {
    ;
}
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.cSharpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4730">import sys

if sys.platform.lower().startswith('win'):

    fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','big-c#-test.c#'))

    f = open(fileName)
    s = f.read()
    f.close()

    c.importCommands.cSharpUnitTest(p,s=s,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4731"></t>
<t tx="ekr.20090529141856.4732">s = '''\
;;; a.el --- Test

;; some other verbose comment
;; some other verbose comment
;; some other verbose comment

(defun abc (a1 a2)
  "Return blah blah."
  (+ 1 2))

(defun fgh (a1 a2)
  "Return blah blah."
  (- 1 2))

;;; a.el ends here
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.elispUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4733">s = '''\
;;; comment
;;; continue
;;;

(defun abc (a b)
   (+ 1 2 3))

; comm
(defun cde (a b)
   (+ 1 2 3))
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.elispUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4734"></t>
<t tx="ekr.20090529141856.4735">s = '''
unit Unit1;

interface

uses
Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls,
Forms,
Dialogs;

type
TForm1 = class(TForm)
procedure FormCreate(Sender: TObject);
private
{ Private declarations }
public
{ Public declarations }
end;

var
Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.FormCreate(Sender: TObject);
var
x,y: double;
begin
x:= 4;
Y := x/2;
end;

end.
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pascalUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4736"># Warning: setting atAuto=True can wipe out unit tests.
</t>
<t tx="ekr.20090529141856.4737">s = '''\
NS = { 'i': 'http://www.inkscape.org/namespaces/inkscape',
      's': 'http://www.w3.org/2000/svg',
      'xlink' : 'http://www.w3.org/1999/xlink'}

tabLevels = 4  # number of defined tablevels, FIXME, could derive from template?
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4738">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
NS = { 'i': 'http://www.inkscape.org/namespaces/inkscape',
      's': 'http://www.w3.org/2000/svg',
      'xlink' : 'http://www.w3.org/1999/xlink'}

tabLevels = 4  # number of defined tablevels, FIXME, could derive from template?
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4739">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class Index:
    """docstring"""
    @cherrypy.nocolor
    @cherrypy.expose
    def index(self):
        return "Hello world!"
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4740">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass:
    def outerDef(self):
        """docstring.
        line two."""

        def pr(*args,**keys):
            g.es_print(color='blue',*args,**keys)

        a = 3
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4741">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
"""A file consisting only of a docstring.
"""
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4742">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass:
    def def1(self):
        pass

    if False or g.unitTesting:

        def pr(*args,**keys): # reportMismatch test
            g.es_print(color='blue',*args,**keys)

        pr('input...')
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4743">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass:
    def def1(self):
        pass

    if False or g.unitTesting:

        def pr(*args,**keys): # reportMismatch test
            g.es_print(color='blue',*args,**keys)

        pr('input...')

    def def2(self):
        pass
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4744">@tabwidth -4
    # Required when running unit tests externally.

# This caused PyParse.py not to be imported properly.
s = r'''
import re
if 0: # Causes the 'overindent'
   if 0:   # for throwaway debugging output
      def dump(*stuff):
        sys.__stdout__.write(" ".join(map(str, stuff)) + "\n")
for ch in "({[":
   _tran[ord(ch)] = '('
class testClass1:
    pass
'''
c.importCommands.pythonUnitTest(p,s=s,showTree=False)

</t>
<t tx="ekr.20090529141856.4745">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass1 # no colon
    pass

def spam():
    pass
'''

g.app.unitTestDict ['expectedErrors'] = 0 # Not really an error.

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4746">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass2:
    pass
'''

tree = c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4747">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class testClass1:
    """A docstring"""
    def __init__ (self):
        pass
    def f1(self):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4748">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
import leo.core.leoGlobals as g

a = 3
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4749">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class test:

    def importFilesCommand (self,files=None,treeType=None,
        perfectImport=True,testing=False,verbose=False):
            # Not a command.  It must *not* have an event arg.

        c = self.c
        if c == None: return
        p = c.currentPosition()

    # Used by paste logic.

    def convertMoreStringToOutlineAfter (self,s,firstVnode):
        s = string.replace(s,"\\r","")
        strings = string.split(s,"\\n")
        return self.convertMoreStringsToOutlineAfter(strings,firstVnode)
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4750">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class test:
    def spam(b):
        pass

    # Used by paste logic.

    def foo(a):
        pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4751">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
import leo.core.leoGlobals as g

a = 3
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4752">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class cls:
     def fun(): # one extra space.
        pass
'''

g.app.unitTestDict ['expectedErrors'] = None # No error unless we get an unexpected mismatch line.
g.app.unitTestDict ['expectedMismatchLine'] = 3 # The error happens before any lines are checked.
g.app.unitTestDict ['expectedErrorMessage'] = 'leading whitespace not consistent with @tabwidth -4'

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4753">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class mammalProviderBase(object):
    """Root class for content providers used by DWEtree.py"""
    def __init__(self, params):
        """store reference to parameters"""
        self.params = params
    def provide(self, what):
        """default &lt;BASE&gt; value"""
        if what == 'doctitle':
            return ELE('base', href=self.params['/BASE/'])
        return None

    def imagePath(self, sppdat):
        """return path to images and list of images for *species*"""
        path = 'MNMammals/imglib/Mammalia'
        for i in 'Order', 'Family', 'Genus', 'Species':
            path = os.path.join(path, sppdat['%sName' % (i,)])
        imglib = os.path.join('/var/www',path)
        imglib = os.path.join(imglib, '*.[Jj][Pp][Gg]')
        path = os.path.join('/',path)
        lst = [os.path.split(i)[1] for i in glob.glob(imglib)]
        lst.sort()
        return path, lst

class mainPages(mammalProviderBase):
    """provide content for pages in 'main' folder"""
    __parent = mammalProviderBase
    def provide(self, what):
        """add one layer to &lt;BASE&gt;"""
        ans = self.__parent.provide(self, what)
        if what == 'doctitle':
            return ELE('base', href=self.params['/BASE/']+'main/')
        return ans
''' 

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4754">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class ItasException(Exception):

    pass

def gpRun(gp, cmd, args, log = None):

    """Wrapper for making calls to the geoprocessor and reporting errors"""

    if log:

        log('gp: %s: %s\\n' % (cmd, str(args)))
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)


</t>
<t tx="ekr.20090529141856.4755">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class emptyClass: pass

def followingDef():
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4756">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class emptyClass: pass # comment

def followingDef(): # comment
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4757">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

class emptyClass: 

    def spam():

        """docstring line 1
under-indented docstring line"""
        pass

def followingDef(): # comment
    pass
'''

c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4758">@encoding utf-8
    # leoImport.py uses unicode characters, so *this* test must have the directive above.

@tabwidth -4
    # Required when running unit tests externally.

fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'leoImport.py'))

f = open(fileName)
s = f.read()
f.close()

g.app.unitTestDict['testingLeoImport.py'] = True

c.importCommands.pythonUnitTest(p,s=None,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4759">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:

        """The base class for all import scanner classes."""

        def __init__ (self,importCommands,language):

            self.c = ic.c

        def createHeadline (self,parent,body,headline):
            # g.trace("parent,headline:",parent,headline)
            return p
'''

# We expect mismatches because the indentation does not match @tabwidth -4.
g.app.unitTestDict ['expectedErrors'] = None # No error unless we get an unexpected mismatch line.
g.app.unitTestDict ['expectedMismatchLine'] = 3
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4760">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:
    def containsUnderindentedComment(self):
        a = 2
    # A true underindented comment.
        b = 3
    # This underindented comment should be placed with next function.
    def empty(self):
        pass
'''

g.app.unitTestDict ['expectedErrors'] = 0 # underindented comments are no longer an error.
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4761">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class BaseScanner:
    def containsUnderindentedComment(self):
        a = 2
    #
        b = 3
        # This comment is part of the present function.

    def empty(self):
        pass
'''

g.app.unitTestDict ['expectedErrors'] = 0 # underindented comments are no longer an error.
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4762">@tabwidth -4
    # Required when running unit tests externally.

s = '''\
class aClass: # trailing comment


    def def1(self):             # trailing comment
        pass
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4763">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

xyz = 6 # trailing comment
pass
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4764">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

def foo():
    pass

def bar():
    pass
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4765">@tabwidth -4
    # Required when running unit tests externally.

s = '''\

def foo():

    error("""line1
line2.
""")

    a = 5

def bar():
    pass
'''

showTree = False
keepTree = False

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.pythonUnitTest(p,s=s,showTree=showTree)

if showTree:
    try:
        child = p.firstChild()
        n = child.numberOfChildren()
        assert n == 2, 'expected 2 children, got %s' % n
    finally:
        if keepTree:
            h = child.h
            print('h',h)
            child.setHeadString('@'+h)
        else:
            while p.hasChildren():
                p.firstChild().doDelete()
        c.redraw(p)
</t>
<t tx="ekr.20090529141856.4766"></t>
<t tx="ekr.20090529141856.4767">s = '''\
interface Bicycle {
    void changeCadence(int newValue);
    void changeGear(int newValue);
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4768">s = '''\
interface Bicycle {
void changeCadence(int newValue);
void changeGear(int newValue);
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4769">import sys

if sys.platform.lower().startswith('win'):

    fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','constants.java'))

    f = open(fileName)
    s = f.read()
    f.close()

    c.importCommands.javaUnitTest(p,s=None,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4770">s = '''\
/**
 * Indicates the caller's authority to perform lifecycle operations on
 */

public final class AdminPermission extends BasicPermission
{
    /**
     * Creates a new &lt;tt&gt;AdminPermission&lt;/tt&gt; object.
     */
    public AdminPermission()
    {
        super("AdminPermission");
    }
}
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaUnitTest(p,s=s,showTree=False)

</t>
<t tx="ekr.20090529141856.4771">import sys

if sys.platform.lower().startswith('win'):


    fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','AdminPermission.java'))

    f = open(fileName)
    s = f.read()
    f.close()

    c.importCommands.javaUnitTest(p,s=s,fileName=fileName,showTree=False)
</t>
<t tx="ekr.20090529141856.4773">@language python
@tabwidth 8
    # Must be in this node when run externally.

s = '''\
/*
 * $Header: /cvs/leo/test/unitTest.leo,v 1.247 2008/02/14 14:59:04 edream Exp $
 * 
 * Copyright (c) OSGi Alliance (2000, 2005). All Rights Reserved.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this 
 * distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.
 */

package org.osgi.framework;

/**
 * A Framework exception used to indicate that a bundle lifecycle problem
 * occurred.
 * 
 * &lt;p&gt;
 * &lt;code&gt;BundleException&lt;/code&gt; object is created by the Framework to denote
 * an exception condition in the lifecycle of a bundle.
 * &lt;code&gt;BundleException&lt;/code&gt;s should not be created by bundle developers.
 * 
 * &lt;p&gt;
 * This exception is updated to conform to the general purpose exception
 * chaining mechanism.
 * 
 * @version $Revision: 1.247 $
 */

public class BundleException extends Exception {
	static final long	serialVersionUID	= 3571095144220455665L;
	/**
	 * Nested exception.
	 */
	private Throwable	cause;

	/**
	 * Creates a &lt;code&gt;BundleException&lt;/code&gt; that wraps another exception.
	 * 
	 * @param msg The associated message.
	 * @param cause The cause of this exception.
	 */
	public BundleException(String msg, Throwable cause) {
		super(msg);
		this.cause = cause;
	}
}

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4774">@language python
</t>
<t tx="ekr.20090529141856.4775">@language javascript

// regexps that look like section references.

{
	name: "macro",
	match: "&lt;&lt;",
	lookaheadRegExp: /&lt;&lt;([^&gt;\s]+)(?:\s*)((?:[^&gt;]|(?:&gt;(?!&gt;)))*)&gt;&gt;/mg,
	handler: function(w)
	{
		this.lookaheadRegExp.lastIndex = w.matchStart;
		var lookaheadMatch = this.lookaheadRegExp.exec(w.source);
		if(lookaheadMatch &amp;&amp; lookaheadMatch.index == w.matchStart &amp;&amp; lookaheadMatch[1]) {
			w.nextMatch = this.lookaheadRegExp.lastIndex;
			invokeMacro(w.output,lookaheadMatch[1],lookaheadMatch[2],w,w.tiddler);
		}
	}
},

// Comments that look like section references.

// &lt;&lt;gradient [[tiddler name]] vert|horiz rgb rgb rgb rgb... &gt;&gt;

config.macros.gradient.handler = function(place,macroName,params,wikifier)
{
	var panel = wikifier ? createTiddlyElement(place,"div",null,"gradient") : place;
	panel.style.position = "relative";
	panel.style.overflow = "hidden";
	panel.style.zIndex = "0";
	if(wikifier) {
		var styles = config.formatterHelpers.inlineCssHelper(wikifier);
		config.formatterHelpers.applyCssHelper(panel,styles);
	}
	var colours = [];
	for(var t=1; t&lt;params.length; t++) {
		var c = new RGB(params[t]);
		if(c)
			colours.push(c);
	}
	drawGradient(panel,params[0] != "vert",colours);
	if(wikifier)
		wikifier.subWikify(panel,"&gt;&gt;");
	if(document.all) {
		panel.style.height = "100%";
		panel.style.width = "100%";
	}
};

// @Deprecated: Use &lt;br&gt; or &lt;br /&gt; instead of &lt;&lt;br&gt;&gt;
config.macros.br = {};
config.macros.br.handler = function(place)
{
	createTiddlyElement(place,"br");
};
</t>
<t tx="ekr.20090529141856.4776">s = '''\

String.prototype.toJSONString = function()
{
    if(/["\\\\\\x00-\\x1f]/.test(this))
		return '"' + this.replace(/([\\x00-\\x1f\\"])/g,replaceFn) + '"';

	return '"' + this + '"';
};

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4777">s = '''\

// Convert a string to it's JSON representation by encoding control characters, double quotes and backslash. See json.org
String.prototype.toJSONString = function()
{
	var m = {
		'\\b': '\\\\b',
		'\\f': '\\\\f',
		'\\n': '\\\\n',
		'\\r': '\\\\r',
		'\\t': '\\\\t',
		'"' : '\\\\"',
		'\\\\': '\\\\\\\\'
		};
	var replaceFn = function(a,b) {
		var c = m[b];
		if(c)
			return c;
		c = b.charCodeAt();
		return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
		};
    if(/["\\\\\\x00-\\x1f]/.test(this))
		return '"' + this.replace(/([\\x00-\\x1f\\"])/g,replaceFn) + '"';

	return '"' + this + '"';
};

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4778">s = '''\

// Restarting
function restart()
{
	invokeParamifier(params,"onstart");
	if(story.isEmpty()) {
		var tiddlers = store.filterTiddlers(store.getTiddlerText("DefaultTiddlers"));
		for(var t=0; t&lt;tiddlers.length; t++) {
			story.displayTiddler("bottom",tiddlers[t].title);
		}
	}
	window.scrollTo(0,0);
}

'''

# Double each backslash (they are in a docstring).
# chars = [z for z in s]
# s = []
# for z in char:
    # if z == '\\': s.append('\\\\')
    # else: s.append(z)
# s = s.join('')

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4780"></t>
<t tx="ekr.20090529141856.4781">s = '''\
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/head&gt;
&lt;body class='bodystring'&gt;
&lt;div id='bodydisplay'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.xmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4782">@first # -*- coding: utf-8 -*-

import leo.core.leoImport as leoImport
import leo.plugins.importers.basescanner as basescanner
import sys

ic = c.importCommands
runner = basescanner.BaseScanner(ic,atAuto=True,language='python')
runner.root = p.copy()

g.app.unitTestDict ['expectedMismatchLine'] = 0

s1 = 'line Ä, 궯, 奠 end'
s2 = 'line Ä, 궯, end'

# Tracing checkTrialWrite causes a UnicodeDecodeError.
ok = runner.checkTrialWrite(s1=s1,s2=s2)

assert ok
</t>
<t tx="ekr.20090529141856.4783">c.contractAllHeadlines()
</t>
<t tx="ekr.20090529141856.4784"></t>
<t tx="ekr.20090529141856.4785">s = '''\
.. toc

====
top
====

The top section

section 1
---------

section 1, line 1
--
selction 1, line 2

section 2
---------

section 2, line 1

section 2.1
~~~~~~~~~~~

section 2.1, line 1

section 2.1.1
.............

section 2.2.1 line 1

section 3
---------

section 3, line 1

section 3.1.1
.............

section 3.1.1, line 1
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4786">s = '''\
.. toc

top
====

The top section

section 1
---------

section 1, line 1
--
selction 1, line 2

section 2
---------

section 2, line 1

section 2.1
~~~~~~~~~~~

section 2.1, line 1

section 2.1.1
.............

section 2.2.1 line 1

section 3
---------

section 3, line 1

section 3.1.1
.............

section 3.1.1, line 1
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4787">s = '''\
.. toc

top
-------------

The top section
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4788">s = '''\
.. toc

======
top
======

The top section
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4789">s = '''\
.. toc

.. The section name contains trailing whitespace.

======
top 
======

The top section.
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20090529141856.4790">import leo.core.leoImport as leoImport
import leo.plugins.importers.basescanner as basescanner
ic = c.importCommands
runner = basescanner.BaseScanner(ic,atAuto=True,language='python')
i = 0
lines1 = ['abc',]
lines2 = ['xyz',]

g.app.unitTestDict ['expectedErrors'] = 1
g.app.unitTestDict ['expectedMismatchLine'] = 1

runner.compareHelper(lines1,lines2,i,strict=True)
</t>
<t tx="ekr.20090529141856.4793">d = g.app.extra_extension_dict

for ext in g.app.extension_dict.keys():
    language =  c.importCommands.languageForExtension(ext)
    language2 = c.importCommands.languageForExtension('.'+ext)
    assert language == language2

    # Now a many-one relationship.
    if language:
        # Do not test extensions that have 'none' as the value of d.get(ext)
        # Otherwise, test only d.get(ext).
        language2 = d.get(ext)
        if language2 in ('None','none'):  continue
        if language2: language = language2
        # Made-up languages do not have mode files.
        if not language.endswith('_language') and language not in ('autohotkey','rest',):
            path = g.os_path_join(g.app.loadDir,'..','modes','%s.py' % (language))
            assert g.os_path_exists(path), 'for ext=%s does not exist: %s' % (ext,path)

    if 0:
        if language is None:
            print('no language for ext=%s' % (ext))
</t>
<t tx="ekr.20090608174319.4791"># This causes trouble if executed quickly after the add-editor command.
# Presumably this is a timing condition that will never happen in practice.

if 0:
    c.frame.body.deleteEditor()
</t>
<t tx="ekr.20090615053403.4876"></t>
<t tx="ekr.20090615053403.4877">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4878">@language plain
@comment # /* */

This is plain text.

# This is a comment.

More plain text.

/* A block comment
continues */

More plain text.
</t>
<t tx="ekr.20090615053403.4879">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4880">@language actionscript

break
call, continue
delete, do
else
false, for, function
goto
if, in
new, null
return
true, typeof
undefined
var, void, while, with
#include
catch, constructor
prototype
this, try
_parent, _root, __proto__
// Jeeze hasn't anyone ever heard of namespaces??
ASnative, abs, acos, appendChild, asfunction, asin, atan, atan2, attachMovie, attachSound, attributes
BACKSPACE
CAPSLOCK, CONTROL, ceil, charAt, charCodeAt, childNodes, chr, cloneNode, close, concat, connect, cos, createElement, createTextNode
DELETEKEY, DOWN, docTypeDecl, duplicateMovieClip
END, ENTER, ESCAPE, enterFrame, entry, equal, eval, evaluate, exp
firstChild, floor, fromCharCode, fscommand, getAscii
getBeginIndex, getBounds, getBytesLoaded, getBytesTotal, getCaretIndex, getCode, getDate, getDay, getEndIndex, getFocus, getFullYear, getHours, getMilliseconds, getMinutes, getMonth, getPan, getProperty, getRGB, getSeconds, getTime, getTimer, getTimezoneOffset, getTransform, getURL, getUTCDate, getUTCDay, getUTCFullYear, getUTCHours, getUTCMilliseconds, getUTCMinutes, getUTCMonth, getUTCSeconds, getVersion, getVolume, getYear, globalToLocal, gotoAndPlay, gotoAndStop
HOME, haschildNodes, hide, hitTest
INSERT, Infinity, ifFrameLoaded, ignoreWhite, indexOf, insertBefore, int, isDown, isFinite, isNaN, isToggled
join
keycode, keyDown, keyUp
LEFT, LN10, LN2, LOG10E, LOG2E, lastChild, lastIndexOf, length, load, loaded, loadMovie, loadMovieNum, loadVariables, loadVariablesNum, localToGlobal, log
MAX_VALUE, MIN_VALUE, max, maxscroll, mbchr, mblength, mbord, mbsubstring, min, 
NEGATIVE_INFINITY, NaN, newline, nextFrame, nextScene, nextSibling, nodeName, nodeType, nodeValue
on, onClipEvent, onClose, onConnect, onData, onLoad, onXML, ord
PGDN, PGUP, PI, POSITIVE_INFINITY, parentNode, parseFloat, parseInt, parseXML, play, pop, pow, press, prevFrame, previousSibling, prevScene, print, printAsBitmap, printAsBitmapNum, printNum, push
RIGHT, random, release, removeMovieClip, removeNode, reverse, round
SPACE, SQRT1_2, SQRT2, scroll, send, sendAndLoad, set, setDate, setFocus, setFullYear, setHours, setMilliseconds, setMinutes, setMonth, setPan, setProperty, setRGB, setSeconds, setSelection, setTime, setTransform, setUTCDate, setUTCFullYear, setUTCHours, setUTCMilliseconds, setUTCMinutes, setUTCMonth, setUTCSeconds, setVolume, setYear, shift, show, sin, slice, sort, start, startDrag, status, stop, stopAllSounds, stopDrag, substr, substring, swapDepths, splice, split, sqrt
TAB, tan, targetPath, tellTarget, toggleHighQuality, toLowerCase, toString, toUpperCase, trace
UP, UTC, unescape, unloadMovie, unLoadMovieNum, unshift, updateAfterEvent
valueOf
xmlDecl, _alpha
_currentframe
_droptarget
_focusrect, _framesloaded
_height, _highquality
_name
_quality
_rotation
_soundbuftime
_target, _totalframes
_url
_visible
_width
_x, _xmouse, _xscale
_y, _ymouse, _yscale
and, add, eq, ge, gt, le, lt, ne, not, or, Array, Boolean, Color, Date, Key, Math, MovieClip, Mouse, Number, Object, Selection, Sound, String, XML, XMLSocket
</t>
<t tx="ekr.20090615053403.4881">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4882">@language c
@comment /* */

@
@c

#define WIPEOUT 0 /* 
                   * Causes database card number &amp; flags to be set to zero. 
                   * This is so I don't need an infinite supply of cards!
                   */
// Not colored (because of @language /* */)
#include "equ.h"
#include "cmn.h"
#include "ramdef.h"
#include "eeprom.h"
#include &lt;hpc_ram.h&gt;
#include &lt;rlydef.h&gt;
</t>
<t tx="ekr.20090615053403.4883">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4884">@language csharp
@ comment
@c

/* block
comment */

// test

id // not a keyword

abstract as 
base bool break byte 
case catch char checked class const continue 
decimal default delegate do double 
else enum event explicit extern 
false finally fixed float for foreach 
get goto 
if implicit in int interface internal is 
lock long 
namespace new null 
object operator out override 
params partial private protected public 
readonly ref return 
sbyte sealed set short sizeof stackalloc 
static string struct switch 
this throw true try typeof 
uint ulong unchecked unsafe ushort using 
value virtual void volatile 
where while
yield
</t>
<t tx="ekr.20090615053403.4885">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4886">@language css
/* New in 4.2. */

/*html tags*/
address, applet, area, a, base, basefont,
big, blockquote, body, br, b, caption, center,
cite, code, dd, dfn, dir, div, dl, dt, em, font,
form, h1, h2, h3, h4, h5, h6, head, hr, html, img,
input, isindex, i, kbd, link, li, link, map, menu,
meta, ol, option, param, pre, p, samp,
select, small, span, strike, strong, style, sub, sup,
table, td, textarea, th, title, tr, tt, ul, u, var,
/*units*/
mm, cm, in, pt, pc, em, ex, px,
/*colors*/
aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, yellow, white,
/*important directive*/
!important,
/*font rules*/
font, font-family, font-style, font-variant, font-weight, font-size,
/*font values*/
cursive, fantasy, monospace, normal, italic, oblique, small-caps,
bold, bolder, lighter, medium, larger, smaller,
serif, sans-serif,
/*background rules*/
background, background-color, background-image, background-repeat, background-attachment, background-position,
/*background values*/
contained, none, top, center, bottom, left, right, scroll, fixed,
repeat, repeat-x, repeat-y, no-repeat,
/*text rules*/
word-spacing, letter-spacing, text-decoration, vertical-align, text-transform, text-align, text-indent, text-transform, text-shadow, unicode-bidi, line-height,
/*text values*/
normal, none, underline, overline, blink, sub, super, middle, top, text-top, text-bottom,
capitalize, uppercase, lowercase, none, left, right, center, justify,
line-through,
/*box rules*/
margin, margin-top, margin-bottom, margin-left, margin-right,
margin, padding-top, padding-bottom, padding-left, padding-right,
border, border-width, border-style, border-top, border-top-width, border-top-style, border-bottom, border-bottom-width, border-bottom-style, border-left, border-left-width, border-left-style, border-right, border-right-width, border-right-style, border-color,
/*box values*/
width, height, float, clear,
auto, thin, medium, thick, left, right, none, both,
none, dotted, dashed, solid, double, groove, ridge, inset, outset,
/*display rules*/
display, white-space, 
min-width, max-width, min-height, max-height,
outline-color, outline-style, outline-width,
/*display values*/
run-in, inline-block, list-item, block, inline, none, normal, pre, nowrap, table-cell, table-row, table-row-group, table-header-group, inline-table, table-column, table-column-group, table-cell, table-caption
/*list rules*/
list-style, list-style-type, list-style-image, list-style-position,
/*list values*/
disc, circle, square, decimal, decimal-leading-zero, none,
lower-roman, upper-roman, lower-alpha, upper-alpha, lower-latin, upper-latin,
/*table rules*/
border-collapse, caption-side,
/*table-values*/
empty-cells, table-layout,
/*misc values/rules*/
counter-increment, counter-reset,
marker-offset, z-index,
cursor, direction, marks, quotes,
clip, content, orphans, overflow, visibility,
/*aural rules*/
pitch, range, pitch-during, cue-after, pause-after, cue-before, pause-before, speak-header, speak-numeral, speak-punctuation, speed-rate, play-during, voice-family,
/*aural values*/
stress, azimuth, elevation, pitch, richness, volume,
page-break, page-after, page-inside
</t>
<t tx="ekr.20090615053403.4887">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4888">@language cweb

% This is limbo in cweb mode... It should be in \LaTeX mode, not \c mode.
% The following should not be colorized: class,if,else.

@* this is a _cweb_ comment.  Code is written in \c.
"strings" should not be colorized.
It should be colored in \LaTeX mode.
The following are not keywords in latex mode: if, else, etc.
Noweb section references are _valid_ in cweb comments!
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;
@c

and this is C code. // It is colored in \LaTeX mode by default.
/* This is a C block comment.  It may also be colored in restricted \LaTeX mode. */

// Section refs are valid in code too, of course.
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;

\LaTeX and \c should not be colored.
if else, while, do // C keywords.
</t>
<t tx="ekr.20090615053403.4889">&lt;&lt; section def &gt;&gt;=

    my \c code goes here // This is \LaTeX text
    /* This is also \LaTeX text */
</t>
<t tx="ekr.20090615053403.4890">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4891">@language elisp

; Maybe...
error princ 

; More typical of other lisps...
and apply
car cdr cons cond
defconst defun defvar 
eq equal eval
gt ge
if 
let le lt
mapcar 
ne nil 
or not 
prog progn 
set setq 
t type-of 
unless 
when while
</t>
<t tx="ekr.20090615053403.4892">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4893">@language erlang

halt()

-module()
</t>
<t tx="ekr.20090615053403.4894">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4895">@language forth

\ tiny demo of Leo forth syntax colouring

: some-forth-word ( x1 x2 -- x3 ) \ blue :, black/bold some-forth-word
   label: y  \ blue label:
   asm[ s" some string" type ]asm cr
   asm[ abc ]asm
   a
   s" abc "
   s" abc"
   a
   tty" abc "
   lcd2" abc "
   until

@ test
@c

{ abc }

a b @ c

asm[ abc ]asm

.( ab ) \ a string

: foo [ .s ] ;

   [ a b c
   x y z]
;
</t>
<t tx="ekr.20090615053403.4896">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4897">@language html

b = "cd"
d
</t>
<t tx="ekr.20090615053403.4898">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4899">@language html

&lt;HTML&gt;
&lt;!-- Author: Edward K. Ream, edream@tds.net --&gt;
&lt;HEAD&gt;
  &lt;META NAME="GENERATOR" CONTENT="Microsoft FrontPage 4.0"&gt;
  &lt;TITLE&gt; Leo's Home Page &lt;/TITLE&gt;
  &lt;META NAME="description" CONTENT="This page describes Leo.
Leo adds powerful outlines to the noweb and CWEB literate programming languages."&gt;
  &lt;META NAME="keywords" CONTENT="LEO, LITERATE PROGRAMMING, OUTLINES, CWEB,
NOWEB, OUTLINES, EDWARD K. REAM, DONALD E. KNUTH, SILVIO LEVY, OPEN SOFTWARE"&gt;
&lt;/HEAD&gt;
&lt;!-- Last Modified: May 12, 2002 --&gt;
&lt;BODY BGCOLOR="#fffbdc"&gt;

&lt;H1 ALIGN=CENTER&gt;&lt;a NAME="top"&gt;&lt;/a&gt;&lt;IMG SRC="Blank.gif" width=
"32" height="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;IMG SRC="leo.gif" 
WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;a href="leo_TOC.html#top"&gt;&lt;IMG SRC=
"arrow_rt.gif" WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;/a&gt; &amp;nbsp;&lt;/H1&gt;

&lt;H1 ALIGN=CENTER&gt; Leo's Home Page&lt;/H1&gt;

&lt;p align="center"&gt;&lt;a href="http://www.python.org/"&gt;&lt;img border="0" src="PythonPowered.gif" width="110" height="44"&gt; &lt;/a&gt; &lt;A HREF="http://sourceforge.net/"&gt;&lt;IMG SRC="http://sourceforge.net/sflogo.php?group_id=3458&amp;type=1" NATURALSIZEFLAG="0" ALT="SourceForge Logo"&gt;&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo at SourceForge&lt;/A&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoCodeGray.gif" width="77" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoProse.gif" width="81" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;

&lt;H3&gt;&lt;A NAME="anchor127554"&gt;&lt;/A&gt;Summary&lt;/H3&gt;

&lt;UL&gt;
  &lt;LI&gt;Leo is a &lt;i&gt; programmer's editor&lt;/i&gt;  and a flexible &lt;i&gt;browser&lt;/i&gt; for
    projects, programs, classes or data. Leo clarifies design, coding, debugging, testing
  and maintenance.
  &lt;LI&gt;Leo is an &lt;i&gt;outlining editor&lt;/i&gt;. Outlines clarify the big picture while
    providing unlimited space for details.
  &lt;LI&gt;Leo
    is a &lt;a HREF="http://www.literateprogramming.com/"&gt;&lt;i&gt;literate
    programming&lt;/i&gt;&lt;/a&gt; tool, compatible with &lt;A HREF="http://www.eecs.harvard.edu/~nr/noweb/"&gt;noweb&lt;/A&gt;
    and &lt;a HREF="http://www-cs-faculty.stanford.edu/~knuth/cweb.html"&gt;CWEB&lt;/a&gt;.
    Leo enhances any text-based
programming language, from assembly language and C to Java, Python and XML.
  &lt;LI&gt;Leo is also a &lt;i&gt;data organizer&lt;/i&gt;. A single Leo outline can generate complex
    data spanning many different files.&amp;nbsp; Leo has been used to manage web sites.
  &lt;LI&gt;Leo is a &lt;i&gt; project manager&lt;/i&gt;. Leo provides multiple views
of a project within a single outline. Leo naturally represents tasks that remain
    up-to-date.
  &lt;LI&gt;Leo is fully &lt;i&gt; scriptable&lt;/i&gt; using &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
  and saves its files in &lt;A HREF="http://www.w3.org/XML/"&gt;XML&lt;/A&gt; format.
  &lt;LI&gt;Leo is &lt;i&gt;portable&lt;/i&gt;.&amp;nbsp; Leo.py is 100% pure Python and will run on
    any platform supporting &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
    and &lt;a href="http://tcl.activestate.com/"&gt;Tk/tcl&lt;/a&gt;, including Windows,
    Linux and MacOS X.&amp;nbsp; Leo.exe runs on any Windows platform.
  &lt;LI&gt;Leo is &lt;a href="http://www.opensource.org/"&gt; &lt;i&gt; Open Software&lt;/i&gt;&lt;/a&gt;, distributed under
    the &lt;a href="http://www.python.org/doc/Copyright.html"&gt; Python License&lt;/a&gt;.
&lt;/UL&gt;

&lt;H3&gt;More Information and downloads&lt;/H3&gt;

&lt;ul&gt;
  &lt;LI&gt;An excellent &lt;a href="http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"&gt;online
    tutorial&lt;/a&gt; and &lt;A HREF="http://www.jserv.com/jk_orr/xml/leo.htm"&gt;Leo resource
  page&lt;/A&gt;, both written by &lt;a href="http://www.jserv.com/jk_orr"&gt;Joe Orr&lt;/a&gt;.
  &lt;LI&gt;My brother's &lt;a href="SpeedReam.html"&gt;slashdot
    article about Leo&lt;/a&gt;, the best description about why Leo is special.
  &lt;LI&gt;&lt;A HREF="testimonials.html#anchor104391"&gt;What people are saying about Leo&lt;/A&gt;
  &lt;LI&gt;&lt;A HREF="leo_TOC.html#anchor964914"&gt;Complete users guide&lt;/A&gt;
    and
    &lt;A HREF="intro.html#anchor887874"&gt;tutorial introduction&lt;/A&gt;  with
  screen shots.
  &lt;li&gt;&lt;a href="FAQ.html"&gt;FAQ&lt;/a&gt; and &lt;a href="http://sourceforge.net/forum/?group_id=3458"&gt;help and discussion
    forums&lt;/a&gt;, preferable to &lt;A HREF="mailto:edream@tds.net"&gt;email&lt;/A&gt; so others may join
    in.&lt;/li&gt;
  &lt;li&gt;&lt;a href="icons.html"&gt;Icons&lt;/a&gt; for bragging about Leo.&lt;/li&gt;
&lt;/ul&gt;

&lt;a href="http://sourceforge.net/project/showfiles.php?group_id=3458"&gt;Download
    Leo&lt;/a&gt; from &lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo's SourceForge
site&lt;/A&gt;.

&lt;P ALIGN=left&gt;Leo's author is &lt;A HREF="http://personalpages.tds.net/~edream/index.html"&gt;Edward
  K. Ream&lt;/A&gt; email: &lt;A HREF="mailto:edream@tds.net"&gt;edream@tds.net&lt;/A&gt; voice: (608) 231-0766

&lt;HR ALIGN=LEFT&gt;

&lt;p align="center"&gt;

&lt;IMG SRC="Blank.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="34" height="34"&gt;&lt;IMG SRC="leo.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="32" height="32"&gt;&lt;a HREF="leo_TOC.html"&gt;&lt;IMG SRC="arrow_rt.gif" WIDTH="32"
HEIGHT="32" ALIGN="left" NATURALSIZEFLAG="3"&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</t>
<t tx="ekr.20090615053403.4900">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4901">@language html

&lt;? xml version="1.0"&gt;
&lt;!-- test --&gt;
&lt;project name="Converter" default="dist"&gt;
&lt;/project&gt;"""
</t>
<t tx="ekr.20090615053403.4902">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4903">@ doc part
@c

@language java /* Colored by match_leo_keyword: tag = leoKeyword. */

@whatever /* Colored by java match_following rule: tag = keyword4. */

/** A javadoc: tag = comment3 */

/** &lt;!-- comment --&gt; tag = comment1. */

/** @see tag = label */
</t>
<t tx="ekr.20090615053403.4904">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4905">@language latex

% This is a \LaTeX mode comment.

This is a test of \LaTeX mode.

@ blah blah blah
@c

\c and \LaTeX are latex keywords.

This is a keyword \% not the start of a comment.

More keywords: \@ and \( and \) and \{ and \}

The following should be colored:

\documentclass{report}

The following 2-letter words should be colored, regardless of what follows:

\(\)\{\}\@
\(abc\)abc\{abc\}abc\@abc
</t>
<t tx="ekr.20090615053403.4906">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4907">@language lisp

; Maybe...
error princ 

; More typical of other lisps...
and apply
car cdr cons cond
defconst defun defvar 
eq equal eval
gt ge
if 
let le lt
mapcar 
ne nil 
or not 
prog progn 
set setq 
t type-of 
unless 
when while
</t>
<t tx="ekr.20090615053403.4908">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4909">@language perl

# From a perl tutorial.

print 'Hello world.';		# Print a message

$a = $b;	# Assign $b to $a

@food  = ("apples", "pears", "eels");

$grub = pop(@food);	# Now $grub = "eels"

$#food

@lines = &lt;INFO&gt;;

#!/usr/local/bin/perl
print "Password? ";		# Ask for input
$a = &lt;STDIN&gt;;			# Get input
chop $a;			# Remove the newline at end
while ($a ne "fred")		# While input is wrong...
{
    print "sorry. Again? ";	# Ask again
    $a = &lt;STDIN&gt;;		# Get input again
    chop $a;			# Chop off newline again
}

if ($sentence =~ /under/)
{
	print "We're talking about rugby\\n";
}

$sentence =~ s/london/London/

$_ = "Capes:Geoff::Shot putter:::Big Avenue";
@personal = split(/:/);

foreach $age (values %ages)
{
	print "Somebody is $age\\n";
}

&amp;mysubroutine;		# Call the subroutine
&amp;mysubroutine($_);	# Call it with a parameter
&amp;mysubroutine(1+2, $_);	# Call it with two parameters

sub inside
{
	local($a, $b);			# Make local variables
	($a, $b) = ($_[0], $_[1]);	# Assign values
	$a =~ s/ //g;			# Strip spaces from
	$b =~ s/ //g;			#   local variables
	($a =~ /$b/ || $b =~ /$a/);	# Is $b inside $a
					#   or $a inside $b?
}
</t>
<t tx="ekr.20090615053403.4910">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4911">@language php
@ doc
This is a doc part.
@c

and or
array
array()
/* Multi-line comment
*/
this is a test.
__CLASS__
&lt;?php and or array() ?&gt;
&lt;?PHP and or array() ?&gt;
</t>
<t tx="ekr.20090615053403.4912">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4913">@language plsql

"a string"
-- reserved keywords
ABORT,
abort,
ACceSS,
access,
add,
all,
allocate,
alter,
analyze,
and,
any,
archive,
archivelog,
array,
arraylen,
as,
asc,
assert,
assign,
at,
audit,
authorization,
avg,
backup,
base_table,
become,
before,
begin,
between,
binary_integer,
block,
body,
boolean,
by,
cache,
cancel,
cascade,
case,
change,
char,
char_base,
character,
check,
checkpoint,
close,
cluster,
clusters,
cobol,
colauth,
column,
columns,
comment,
commit,
compile,
compress,
connect,
constant,
constraint,
constraints,
contents,
continue,
controlfile,
count,
crash,
create,
current,
currval,
cursor,
cycle,
data_base,
database,
datafile,
date,
dba,
debugoff,
debugon,
dec,
decimal,
declare,
default,
definition,
delay,
delete,
delta,
desc,
digits,
disable,
dismount,
dispose,
distinct,
distinct,
do,
double,
drop,
drop,
dump,
each,
else,
else,
elsif,
enable,
end,
end,
entry,
escape,
events,
except,
exception,
exception_init,
exceptions,
exclusive,
exec,
execute,
exists,
exists,
exit,
explain,
extent,
externally,
false,
fetch,
fetch,
file,
float,
float,
flush,
for,
for,
force,
foreign,
form,
fortran,
found,
freelist,
freelists,
from,
from,
function,
generic,
go,
goto,
grant,
group,
groups,
having,
identified,
if,
immediate,
in,
including,
increment,
index,
indexes,
indicator,
initial,
initrans,
insert,
instance,
int,
integer,
intersect,
into,
is,
key,
language,
layer,
level,
like,
limited,
link,
lists,
lock,
logfile,
long,
loop,
manage,
manual,
max,
maxdatafiles,
maxextents,
maxinstances,
maxlogfiles,
maxloghistory,
maxlogmembers,
maxtrans,
maxvalue,
min,
minextents,
minus,
minvalue,
mlslabel,
mod,
mode,
modify,
module,
mount,
natural,
new,
new,
next,
nextval,
noarchivelog,
noaudit,
nocache,
nocompress,
nocycle,
nomaxvalue,
nominvalue,
none,
noorder,
noresetlogs,
normal,
nosort,
not,
notfound,
nowait,
null,
number,
number_base,
numeric,
of,
off,
offline,
old,
on,
online,
only,
open,
open,
optimal,
option,
or,
order,
others,
out,
own,
package,
package,
parallel,
partition,
pctfree,
pctincrease,
pctused,
plan,
pli,
positive,
pragma,
precision,
primary,
prior,
private,
private,
privileges,
procedure,
procedure,
profile,
public,
quota,
raise,
range,
raw,
read,
real,
record,
recover,
references,
referencing,
release,
remr,
rename,
resetlogs,
resource,
restricted,
return,
reuse,
reverse,
revoke,
role,
roles,
rollback,
row,
rowid,
rowlabel,
rownum,
rows,
rowtype,
run,
savepoint,
schema,
scn,
section,
segment,
select,
select,
separate,
sequence,
session,
set,
set,
share,
shared,
size,
size,
smallint,
smallint,
snapshot,
some,
sort,
space,
sql,
sqlbuf,
sqlcode,
sqlerrm,
sqlerror,
sqlstate,
start,
start,
statement,
statement_id,
statistics,
stddev,
stop,
storage,
subtype,
successful,
sum,
sum,
switch,
synonym,
sysdate,
system,
tabauth,
table,
tables,
tables,
tablespace,
task,
temporary,
terminate,
then,
thread,
time,
to,
tracing,
transaction,
trigger,
triggers,
true,
truncate,
type,
uid,
under,
union,
unique,
unlimited,
until,
update,
use,
user,
using,
validate,
values,
varchar,
varchar2,
variance,
view,
views,
when,
whenever,
where,
while,
with,
work,
write,
xor
</t>
<t tx="ekr.20090615053403.4914">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4915">@language html

&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;
&lt;&lt; remarks &gt;&gt;

&lt;MODE&gt;
    &lt;PROPS&gt;
        &lt;PROPERTY NAME="indentPrevLine" VALUE="\s*.{3,}:\s*(#.*)?" /&gt;
        &lt;PROPERTY NAME="lineComment" VALUE="#" /&gt;
    &lt;/PROPS&gt;
    &lt;RULES ESCAPE="\" IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE"&gt;
        &lt;&lt; comments &gt;&gt;
        &lt;&lt; literals &gt;&gt;
        &lt;&lt; operators &gt;&gt;
        &lt;MARK_PREVIOUS TYPE="FUNCTION" EXCLUDE_MATCH="TRUE"&gt;(&lt;/MARK_PREVIOUS&gt;
        &lt;&lt; keywords &gt;&gt;
    &lt;/RULES&gt;
&lt;/MODE&gt;
</t>
<t tx="ekr.20090615053403.4916">&lt;!-- Python mode, by Slava Pestov. Based on PythonTokenMarker by --&gt;
&lt;!-- Jonathan Revusky --&gt;

&lt;!-- Modified 19-Jul-00 by Ivan Frohne to: --&gt;
&lt;!--  (a) implement 'indentOnEnter'; --&gt;
&lt;!--  (b) indent next line automatically after control structures followed --&gt;
&lt;!--	  by ':'; --&gt;
&lt;!--  (c) make """ or ''' multiline quotes TYPE LITERAL2; --&gt;
&lt;!--  (d) add TYPE FUNCTION identified by a following '(' --&gt;
&lt;!--  (e) eliminate the '?' SEQ TYPE ('?' has no meaning in Python); --&gt;
&lt;!--  (f) change the TYPE of 'and', 'or', and 'not' to KEYWORD1; and --&gt;
&lt;!--  (g) add all builtin functions, builtin exceptions, --&gt;
&lt;!--	  builtin type methods, File object methods, and special type --&gt;
&lt;!--	  attributes as TYPE KEYWORD3. --&gt;
</t>
<t tx="ekr.20090615053403.4917">&lt;!-- Comment --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;#&lt;/EOL_SPAN&gt;

&lt;!-- Triple-quotes --&gt;
&lt;SPAN TYPE="LITERAL2"&gt;
    &lt;BEGIN&gt;"""&lt;/BEGIN&gt;
    &lt;END&gt;"""&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL2"&gt;
    &lt;BEGIN&gt;'''&lt;/BEGIN&gt;
    &lt;END&gt;'''&lt;/END&gt;
&lt;/SPAN&gt;
</t>
<t tx="ekr.20090615053403.4918">&lt;!-- Standard literals --&gt;
&lt;SPAN TYPE="LITERAL1"&gt;
    &lt;BEGIN&gt;"&lt;/BEGIN&gt;
    &lt;END&gt;"&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL1"&gt;
    &lt;BEGIN&gt;'&lt;/BEGIN&gt;
    &lt;END&gt;'&lt;/END&gt;
&lt;/SPAN&gt;
</t>
<t tx="ekr.20090615053403.4919">&lt;SEQ TYPE="OPERATOR"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;%&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;~&lt;/SEQ&gt;
</t>
<t tx="ekr.20090615053403.4920">&lt;KEYWORDS&gt;
    &lt;&lt; reserved words &gt;&gt;
    &lt;&lt; builtins &gt;&gt;
    &lt;&lt; exceptions &gt;&gt;
    &lt;&lt; types &gt;&gt;
&lt;/KEYWORDS&gt;
</t>
<t tx="ekr.20090615053403.4921">&lt;!--  Reserved Words  --&gt;
&lt;KEYWORD1&gt;and&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;as&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;assert&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;break&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;class&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;continue&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;def&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;del&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;elif&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;else&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;except&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;exec&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;finally&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;for&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;from&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;global&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;if&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;import&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;in&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;is&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;lambda&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;not&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;or&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;pass&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;print&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;raise&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;return&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;try&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;while&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;yield&lt;/KEYWORD1&gt;
</t>
<t tx="ekr.20090615053403.4922">&lt;!-- builtins --&gt;
&lt;KEYWORD2&gt;abs&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;apply&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;bool&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;buffer&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;callable&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;chr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;classmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;cmp&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;coerce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;compile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;complex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;delattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dict&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dir&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;divmod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;eval&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;execfile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;file&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;filter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;float&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;getattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;globals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hasattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hash&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;id&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;int&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;intern&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;isinstance&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;issubclass&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;iter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;len&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;list&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;locals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;long&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;map&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;max&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;min&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;object&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;oct&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;open&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;ord&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;pow&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;property&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;range&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;raw_input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reduce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reload&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;repr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;round&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;setattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;slice&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;staticmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;str&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;super&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;tuple&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;type&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unichr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unicode&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;vars&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;xrange&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;zip&lt;/KEYWORD2&gt;
</t>
<t tx="ekr.20090615053403.4923">&lt;!-- exceptions --&gt;
&lt;KEYWORD3&gt;ArithmeticError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AssertionError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AttributeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DeprecationWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EOFError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EnvironmentError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Exception&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatingPointError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IOError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ImportError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndentationError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndexError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyboardInterrupt&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LookupError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MemoryError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NameError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplemented&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplementedError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OSError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ReferenceError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StandardError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StopIteration&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemExit&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TabError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundLocalError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UserWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ValueError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Warning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;WindowsError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ZeroDivisionError&lt;/KEYWORD3&gt;
</t>
<t tx="ekr.20090615053403.4924">&lt;!-- types (from types module) --&gt;
&lt;KEYWORD3&gt;BufferType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinFunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ClassType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;CodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ComplexType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictProxyType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictionaryType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EllipsisType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FileType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FrameType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;GeneratorType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;InstanceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IntType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LambdaType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ListType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LongType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ModuleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NoneType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ObjectType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SliceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringTypes&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TracebackType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TupleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;XRangeType&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;False&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;None&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;True&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;__abs__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__add__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__all__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__author__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__bases__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__builtins__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__call__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__class__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__cmp__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__coerce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__contains__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__debug__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__del__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__dict__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__div__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__divmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__doc__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__eq__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__file__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__float__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__floordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__future__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ge__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattribute__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__gt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hash__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hex__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iadd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__import__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__imul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__init__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__int__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__invert__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iter__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__le__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__len__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__long__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__members__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__metaclass__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mro__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__name__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ne__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__neg__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__new__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__nonzero__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__oct__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__or__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__path__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pos__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__radd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdivmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__reduce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__repr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rfloordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rlshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ror__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rpow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rrshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rsub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rtruediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rxor__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__self__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__slots__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__str__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__sub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__truediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__version__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__xor__&lt;/KEYWORD3&gt;
</t>
<t tx="ekr.20090615053403.4925">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4926">@language python

int
float
dict
</t>
<t tx="ekr.20090615053403.4927">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4928">"""This creates a free-floating copy of v's tree for undo.
The copied trees must use different tnodes than the original."""

def copyTree(self,root):

    c = self
    # Create the root VNode.
    result = v = leoNodes.VNode(c)
    # Copy the headline and icon values v.copyNode(root,v)
    # Copy the rest of tree.
    v.copyTree(root,v)
    # Replace all tnodes in v by copies.
    assert(v.nodeAfterTree() == None)
    while v:
        v = leoNodes.VNode(c)
        v = v.threadNext()
    return result
</t>
<t tx="ekr.20090615053403.4929">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4930">@language r

x &lt;- rnorm(10) 

vv &lt;- function(z) return(z) 

def python_funct(uu): 
return uu
</t>
<t tx="ekr.20090615053403.4931">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4932">' New in 4.2.
@language rapidq
' a comment.

$APPTYPE,$DEFINE,$ELSE,$ENDIF,$ESCAPECHARS,$IFDEF,$IFNDEF,
$INCLUDE,$MACRO,$OPTIMIZE,$OPTION,$RESOURCE,$TYPECHECK,$UNDEF,
ABS,ACOS,ALIAS,AND,AS,ASC,ASIN,ATAN,ATN,BIN$,BIND,BYTE,
CALL,CALLBACK,CALLFUNC,CASE,CEIL,CHDIR,CHDRIVE,CHR$,CINT,
CLNG,CLS,CODEPTR,COMMAND$,COMMANDCOUNT,CONSOLE,CONST,CONSTRUCTOR,
CONVBASE$,COS,CREATE,CSRLIN,CURDIR$,DATA,DATE$,DEC,DECLARE,
DEFBYTE,DEFDBL,DEFDWORD,DEFINT,DEFLNG,DEFSHORT,DEFSNG,DEFSTR,
DEFWORD,DELETE$,DIM,DIR$,DIREXISTS,DO,DOEVENTS,DOUBLE,DWORD,
ELSE,ELSEIF,END,ENVIRON,ENVIRON$,EVENT,EXIT,EXP,EXTENDS,
EXTRACTRESOURCE,FIELD$,FILEEXISTS,FIX,FLOOR,FOR,FORMAT$,FRAC,
FUNCTION,FUNCTIONI,GET$,GOSUB,GOTO,HEX$,IF,INC,INITARRAY,
INKEY$,INP,INPUT,INPUT$,INPUTHANDLE,INSERT$,INSTR,INT,INTEGER,
INV,IS,ISCONSOLE,KILL,KILLMESSAGE,LBOUND,LCASE$,LEFT$,LEN,
LFLUSH,LIB,LIBRARYINST,LOCATE,LOG,LONG,LOOP,LPRINT,LTRIM$,
MEMCMP,MESSAGEBOX,MESSAGEDLG,MID$,MKDIR,MOD,MOUSEX,MOUSEY,
NEXT,NOT,OFF,ON,OR,OUT,OUTPUTHANDLE,PARAMSTR$,PARAMSTRCOUNT,
PARAMVAL,PARAMVALCOUNT,PCOPY,PEEK,PLAYWAV,POKE,POS,POSTMESSAGE,
PRINT,PROPERTY,QUICKSORT,RANDOMIZE,REDIM,RENAME,REPLACE$,
REPLACESUBSTR$,RESOURCE,RESOURCECOUNT,RESTORE,RESULT,RETURN,
REVERSE$,RGB,RIGHT$,RINSTR,RMDIR,RND,ROUND,RTRIM$,RUN,
SCREEN,SELECT,SENDER,SENDMESSAGE,SETCONSOLETITLE,SGN,SHELL,
SHL,SHORT,SHOWMESSAGE,SHR,SIN,SINGLE,SIZEOF,SLEEP,SOUND,
SPACE$,SQR,STACK,STATIC,STEP,STR$,STRF$,STRING,STRING$,
SUB,SUBI,SWAP,TALLY,TAN,THEN,TIME$,TIMER,TO,TYPE,UBOUND,
UCASE$,UNLOADLIBRARY,UNTIL,VAL,VARIANT,VARPTR,VARPTR$,VARTYPE,
WEND,WHILE,WITH,WORD,XOR
</t>
<t tx="ekr.20090615053403.4933">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4934">@language rebol

; a comment
about abs absolute add alert alias all alter and and~ any append arccosine arcsine arctangent array ask at  
back bind boot-prefs break browse build-port build-tag  
call caret-to-offset catch center-face change change-dir charset checksum choose clean-path clear clear-fields close comment complement compose compress confirm continue-post context copy cosine create-request crypt cvs-date cvs-version  
debase decode-cgi decode-url decompress deflag-face dehex delete demo desktop detab dh-compute-key dh-generate-key dh-make-key difference dirize disarm dispatch divide do do-boot do-events do-face do-face-alt does dsa-generate-key dsa-make-key dsa-make-signature dsa-verify-signature  
echo editor either else emailer enbase entab exclude exit exp extract 
fifth find find-key-face find-window flag-face first flash focus for forall foreach forever form forskip fourth free func function  
get get-modes get-net-info get-style  
halt has head help hide hide-popup  
if import-email in inform input insert insert-event-func intersect 
join 
last launch launch-thru layout license list-dir load load-image load-prefs load-thru log-10 log-2 log-e loop lowercase  
make make-dir make-face max maximum maximum-of min minimum minimum-of mold multiply  
negate net-error next not now  
offset-to-caret open open-events or or~ 
parse parse-email-addrs parse-header parse-header-date parse-xml path-thru pick poke power prin print probe protect protect-system  
q query quit  
random read read-io read-net read-thru reboot recycle reduce reform rejoin remainder remold remove remove-event-func rename repeat repend replace request request-color request-date request-download request-file request-list request-pass request-text resend return reverse rsa-encrypt rsa-generate-key rsa-make-key 
save save-prefs save-user scroll-para second secure select send send-and-check set set-modes set-font set-net set-para set-style set-user set-user-name show show-popup sine size-text skip sort source split-path square-root stylize subtract switch  
tail tangent textinfo third throw throw-on-error to to-binary to-bitset to-block to-char to-date to-decimal to-email to-event to-file to-get-word to-hash to-hex to-idate to-image to-integer to-issue to-list to-lit-path to-lit-word to-local-file to-logic to-money to-none to-pair to-paren to-path to-rebol-file to-refinement to-set-path to-set-word to-string to-tag to-time to-tuple to-url to-word trace trim try  
unfocus union unique uninstall unprotect unset until unview update upgrade uppercase usage use  
vbug view view-install view-prefs  
wait what what-dir while write write-io  
xor xor~  
action! any-block! any-function! any-string! any-type! any-word!  
binary! bitset! block!  
char!  
datatype! date! decimal! 
email! error! event!  
file! function!  
get-word!  
hash!  
image! integer! issue!  
library! list! lit-path! lit-word! logic!  
money!  
native! none! number!  
object! op!  
pair! paren! path! port!  
refinement! routine!  
series! set-path! set-word! string! struct! symbol!  
tag! time! tuple!  
unset! url!  
word!  
any-block? any-function? any-string? any-type? any-word?  
binary? bitset? block?  
char? connected? crypt-strength? 
datatype? date? decimal? dir?  
email? empty? equal? error? even? event? exists? exists-key?
file? flag-face? found? function?  
get-word? greater-or-equal? greater?  
hash? head?  
image? in-window? index? info? input? inside? integer? issue?  
length? lesser-or-equal? lesser? library? link-app? link? list? lit-path? lit-word? logic?  
modified? money?  
native? negative? none? not-equal? number?  
object? odd? offset? op? outside?  
pair? paren? path? port? positive?  
refinement? routine?  
same? screen-offset? script? series? set-path? set-word? size? span? strict-equal? strict-not-equal? string? struct?  
tag? tail? time? tuple? type?  
unset? url?  
value? view? 
within? word?  
zero?
</t>
<t tx="ekr.20090615053403.4935">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4936">@language rest

@ @rst-options
code_mode=False
generate_rst=True
http_server_support = False
show_organizer_nodes=True
show_headlines=True
show_leo_directives=True
stylesheet_path=..\doc
write_intermediate_file = False
verbose=True
@c

. Links used in this document...

.. _`Pmw`:                  http://pmw.sourceforge.net/
.. _run:                    `Running Leo`_

.. WARNING: image targets may not have upper case letters!

.. |back| image:: arrow_lt.gif
    :target: FAQ.html

.. |leo| image:: leo.gif
    :target: front.html

.. |next| image:: arrow_rt.gif
    :target: intro.html

|back| |leo| |next|

###########################
Chapter 1: Installing Leo
###########################

This chapter tells how to install and run Leo.

**Important**:

If you have *any* problems installing Leo,
please ask for help on Leo's help forum:

.. contents::

**Windows**
    If you have `associated .leo files with Leo`_ you may run Leo by double-clicking any .leo file.
    You can also use a batch file.
    Put the following .bat file in c:\\Windows::

        cd c:\prog\LeoCVS\leo
        c:\python22\python c:\prog\LeoCVS\leo\leo.py %1

-   Download the latest version of Leo from `Leo's download page`_.

-   In Windows 2K or XP, go to ``Start-&gt;Settings-&gt;Control panel``, open the ``Folder Options`` tab.

    **Warning**: When building Tcl on Linux, do **not** specify
    "--enable-threads".
    Only use Tcl with the default "threads not enabled" case.

-------------

|back| |leo| |next|
</t>
<t tx="ekr.20090615053403.4937">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4938"># New in 4.2.

@language shell

# comment
$# not a comment
break
case,continue,
do,done
elif,else,esac
fi,for
if,in
return,
then
until
while,

cd,chdir,eval,exec,
exit,kill,newgrp,pwd,read,readonly,
shift,test,trap,ulimit,
umask,wait
</t>
<t tx="ekr.20090615053403.4939">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4940">@language shellscript

# comment
$# not a comment
break
case,continue,
do,done
elif,else,esac
fi,for
if,in
return,
then
until
while,

cd,chdir,eval,exec,
exit,kill,newgrp,pwd,read,readonly,
shift,test,trap,ulimit,
umask,wait
</t>
<t tx="ekr.20090615053403.4941">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4942">@language html

&lt;!-- ekr uses the MARK_FOLLOWING to mark _anything_ after \ --&gt;

&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;

&lt;MODE&gt;
    &lt;PROPS&gt;
        &lt;PROPERTY NAME="lineComment" VALUE="%" /&gt;
    &lt;/PROPS&gt;

    &lt;RULES&gt;
        &lt;&lt; general rules &gt;&gt;
    &lt;/RULES&gt;

    &lt;RULES SET="MATH" DEFAULT="MARKUP"&gt;
        &lt;&lt; math rules &gt;&gt;
    &lt;/RULES&gt;
&lt;/MODE&gt;
</t>
<t tx="ekr.20090615053403.4943">&lt;!-- $$...$$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;$$&lt;/BEGIN&gt;
    &lt;END&gt;$$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- $...$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;$&lt;/BEGIN&gt;
    &lt;END&gt;$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- \[...\] (LaTeX math mode) --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;\[&lt;/BEGIN&gt;
    &lt;END&gt;\]&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD1"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="OPERATOR"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;]&lt;/SEQ&gt;
</t>
<t tx="ekr.20090615053403.4944">&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD3"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;)&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;(&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;]&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;~&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;.&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;,&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;?&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;:&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;'&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;"&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;`&lt;/SEQ&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;
</t>
<t tx="ekr.20090615053403.4945">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4946"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki
@language python

""" {picture file=../Icons/Leoapp.GIF}this """ # Problems with correct indexing following a graphic.

""" {picture file=../Icons/Leoapp.GIF}this """ # two copies work.

abc

""" {picture file=../Icons/Leodoc.GIF} """ # xyz

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ff00ff:some text~~more text"""

if 1 and 2:
    pass

print(g.app().loadDir)
</t>
<t tx="ekr.20090615053403.4947">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4948"># both color_markup &amp; add_directives plugins must be enabled.
@markup wiki

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__  __''bolditalic''__ and ''__italicbold__''
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

__abc__ 

# Test

""" ''' """ ''' """'''  # Leo handles the __b__ common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""


if 1 and 2:
    pass

print(g.app().loadDir)
</t>
<t tx="ekr.20090615053403.4949">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4950"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki

""" text~~red:some text~~more text"""

""" text~~#ee0ff:some text~~more text"""

if 1 and 2:
    pass
</t>
<t tx="ekr.20090615053403.4951">&lt;&lt; test defined &gt;&gt;
</t>
<t tx="ekr.20090615053403.4952">pass
</t>
<t tx="ekr.20090615053403.4953">try:
    mode = c.frame.body.colorizer.modes.get('python')
    mode.keywords['as'] = 1 # append the keyword, colorize with 'keyword1' tag.
except AttributeError:
    pass # modes only exists for new colorizer.
</t>
<t tx="ekr.20090615053403.4954"># This will work regardless of where this method is.
@language python

language = g.findLanguageDirectives(c,p)
assert language == 'python','got:%s' % language
</t>
<t tx="ekr.20090615053403.4955">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20090615053403.4956">@language vbscript

if
IF
</t>
<t tx="ekr.20090615053403.4957"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoColor tests')
</t>
<t tx="ekr.20090627070131.4971">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20090627070131.4975">@language python
@tabwidth -4
@others
#end
</t>
<t tx="ekr.20090627070131.4976">def spam(cheese):

    print(cheese)
</t>
<t tx="ekr.20090627070131.4977">def cheese():

    pass
</t>
<t tx="ekr.20090627070131.4978">def spam(cheese):

    print(cheese)
def cheese():

    pass
#end
</t>
<t tx="ekr.20090704085350.5010">h = '@file ../test/unittest/at-file-test.py'
p = g.findNodeAnywhere(c,h)
assert p
assert not p.isDirty(),p.h # Do not ignore this failure!

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

for p2,h2 in table:
    assert p2.h == h2
    assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5018"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    h = '@shadow ../test/unittest/at-shadow-test.py'
    p = g.findNodeAnywhere(c,h)
    assert p
    
    table = (
        (p.firstChild(),'spam'),
        (p.firstChild().next(),'eggs')
    )
    
    assert not p.isDirty(),p.h # Do not ignore this failure!
    
    for p2,h2 in table:
        assert len(p2.h) == len(h2)
</t>
<t tx="ekr.20090704085350.5028">@language python
@others</t>
<t tx="ekr.20090704085350.5029">def spam():
    pass</t>
<t tx="ekr.20090704085350.5030">def eggs():
    pass</t>
<t tx="ekr.20090704085350.5034">@language python
@others</t>
<t tx="ekr.20090704085350.5035">def spam():
    pass</t>
<t tx="ekr.20090704085350.5036">def eggs():
    pass</t>
<t tx="ekr.20090704085350.5044"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    h = '@asis ../test/unittest/at-asis-test.py'
    p = g.findNodeAnywhere(c,h)
    assert p
    
    table = (
        (p.firstChild(),'spam'),
        (p.firstChild().next(),'eggs')
    )
    
    assert not p.isDirty(),p.h # Do not ignore this failure!
    
    for p2,h2 in table:
        assert p2.h == h2
        assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5046"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    h = '@thin ../test/unittest/at-thin-test.py'
    p = g.findNodeAnywhere(c,h)
    assert p
    
    table = (
        (p.firstChild(),'spam'),
        (p.firstChild().next(),'eggs')
    )
    
    assert not p.isDirty(),p.h # Do not ignore this failure!
    
    for p2,h2 in table:
        assert p2.h == h2
        assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5052"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    h = '@auto ../test/unittest/at-auto-test.py'
    p = g.findNodeAnywhere(c,h)
    assert p
    
    table = (
        (p.firstChild(),'spam'),
        (p.firstChild().next(),'eggs')
    )
    
    assert not p.isDirty(),p.h # Do not ignore this failure!
    
    for p2,h2 in table:
        assert p2.h == h2
        assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20091206090247.5060"># Use these with caution.</t>
<t tx="ekr.20091206090247.5061">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print(s) ; g.es(s)</t>
<t tx="ekr.20091206090247.5062"># About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

if 0: # This is usually a very bad idea.

    for p in c.all_positions():
        p.v.fileIndex = None

    g.es("all timestamps cleared")</t>
<t tx="ekr.20091206090247.5063">doDelete = False
put = g.es_print
for p in c.all_positions():
    if p.v.u:
        put("found v.u:",p.h,
            g.listToString(p.v.u.keys()))
        if doDelete:
            p.v.u = None
put('done') 
c.redraw()</t>
<t tx="ekr.20091219121039.5065">x = c.rstCommands

result = x.handleMissingStyleSheetArgs(s=None)
assert result == {},'expected {}, got %s' % result

expected = {
    'documentoptions':'[english,12pt,lettersize]',
    'language':'ca',
    'use-latex-toc':'1',
}

for s in (
    '--language=ca, --use-latex-toc,--documentoptions=[english,12pt,lettersize]',
    '--documentoptions=[english,12pt,lettersize],--language=ca, --use-latex-toc',
    '--use-latex-toc,--documentoptions=[english,12pt,lettersize],--language=ca, ',
):

    result = x.handleMissingStyleSheetArgs(s=s)
    assert result == expected,'expected %s\ngot %s' % (expected,result)
</t>
<t tx="ekr.20091219122958.5066"># Warning: these depend on the .css files in leo\test\unittest.
</t>
<t tx="ekr.20100102164959.5088">nodes = 0 ; lines = 0
for p in c.all_unique_positions():
    nodes += 1
    lines += len(g.splitLines(p.b))

pages = ((nodes * 10) + lines) / 50
s = "%d nodes,  %d lines, %d pages" % (nodes,lines,pages)
print(s); g.es(s)</t>
<t tx="ekr.20100107110353.5105"></t>
<t tx="ekr.20100107110353.5106">@others
</t>
<t tx="ekr.20100107110353.5107">node 1 line 1
node 1 line 2
</t>
<t tx="ekr.20100107110353.5108">node 2 line 1
node 2 line 2
</t>
<t tx="ekr.20100107110353.5109">@others
</t>
<t tx="ekr.20100107110353.5110">node 1 line 1
node 1 line 2 changed
</t>
<t tx="ekr.20100107110353.5111">node 2 line 1 changed
node 2 line 2 changed
</t>
<t tx="ekr.20100119102849.5108"># backward-find-character and find-character
# can't be tested this way because they require k.getarg.
# They pass hand tests.

&lt;&lt; define table &gt;&gt;

w = c.frame.body.wrapper
child = g.findNodeInChildren(c,p,'work')
assert child
c.selectPosition(child)

for commandName in table:
    # Put the cursor in the middle of the middle line
    # so all cursor moves will actually do something.
    w.setInsertPoint(15) # for move-past-close
    try:
        c.editCommands.extendMode = True
        c.keyHandler.simulateCommand(commandName)
        i,j = w.getSelectionRange()
        assert i != j,'i == j: %s %s' % (i,commandName)
    finally:
        c.editCommands.extendMode = False

</t>
<t tx="ekr.20100119102849.5109"># Cursor movement commands affected by extend mode.
# The x-extend-selection commands are not so affected.
table = (
    'back-to-indentation',
    'back-to-home',
    'back-char',
    'back-page',
    'back-paragraph',
    'back-sentence',
    'back-word',
    'beginning-of-buffer',
    'beginning-of-line',
    'end-of-buffer',
    'end-of-line',
    'forward-char',
    'forward-page',
    'forward-paragraph',
    'forward-sentence',
    'forward-end-word',
    'forward-word',
    'move-past-close',
    'next-line',
    'previous-line',
)
</t>
<t tx="ekr.20100119102849.5110">line 1.
line 2(xxx).
line 3.
</t>
<t tx="ekr.20100123172713.5114"></t>
<t tx="ekr.20100123172713.5116">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList"): # and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print s ; g.es(s)</t>
<t tx="ekr.20100131171342.5473"></t>
<t tx="ekr.20100131171342.5474">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)
    assert(tkGui)

    import leo.core.leoFrame as leoFrame
    import inspect,sys

    baseClass = leoFrame.leoBody
    subClasses  = (tkGui.leoTkinterBody,leoFrame.nullBody)
    baseObject = c.frame.body

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        try:
            assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)
        except AssertionError:
            exctype, value = sys.exc_info()[:2]
            print(value)
            raise

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                #raise
                exctype, value = sys.exc_info()[:2]
                print(value)
</t>
<t tx="ekr.20100131171342.5475">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoFrame
    subClasses  = (tkGui.leoTkinterFrame,leoFrame.NullFrame)
    baseObject = c.frame

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5476">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoGui as leoGui
    import inspect

    baseClass = leoGui.leoGui
    subClasses  = (tkGui.tkinterGui,) # nullGui can inherit almost all leoGui dummy methods.
    baseObject = g.app.gui

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            try:
                if name in baseObject.mustBeDefinedOnlyInBaseClass:
                    assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
                if name in baseObject.mustBeDefinedInSubclasses:
                    assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
            except AssertionError:
                raise
</t>
<t tx="ekr.20100131171342.5477">if g.app.gui.guiName() == 'tkinter':

    pc = g.app.pluginsController
    tkGui = pc.loadOnePlugin('leo.plugins.tkGui',verbose=False)

    import leo.core.leoFrame as leoFrame
    import inspect

    baseClass = leoFrame.leoTree
    subClasses  = (tkGui.leoTkinterTree,leoFrame.nullTree)
    baseObject = c.frame.tree

    methods = inspect.getmembers(baseClass,inspect.ismethod)
    methodNames = [z[0] for z in methods]

    for name in baseObject.mustBeDefinedOnlyInBaseClass:
        assert name in methodNames, 'not defined in base class %s.%s' % (baseClass.__name__,name)

    for subClass in subClasses:
        subclassName = subClass.__name__
        for name in methodNames:
            base_func = getattr(baseClass,name)
            sub_func =  getattr(subClass,name)
            if name in baseObject.mustBeDefinedOnlyInBaseClass:
                assert base_func.im_func == sub_func.im_func, 'defined in subclass %s.%s' % (subclassName,name)
            if name in baseObject.mustBeDefinedInSubclasses:
                assert base_func.im_func != sub_func.im_func, 'not defined in subclass %s.%s' % (subclassName,name)
</t>
<t tx="ekr.20100131171342.5478">logCtrl = c.frame.log.logCtrl

table = (
    ('mustBeDefinedInSubclasses',logCtrl.mustBeDefinedInSubclasses),
    ('mustBeDefinedInBaseClass',logCtrl.mustBeDefinedOnlyInBaseClass),
    ('mustBeDefined',logCtrl.mustBeDefined),
)

# Check existence.
for tag,aList in table:
    for z in aList:
        assert hasattr(c.frame.log,z),'%s %s %s' % (tag,c.frame.log,z)
        assert hasattr(c.frame.body,z),'%s %s %s' % (tag,c.frame.body,z)

# Check signatures.
import inspect
for tag,aList in table:
    for z in aList:
        func = getattr(c.frame.body.bodyCtrl,z)
        func2 = getattr(c.frame.log.logCtrl,z)
        assert func,z
        assert func2,z
        d1 = inspect.getargspec(func)
        d2 = inspect.getargspec(func2)
        assert d1==d2,'\n%s\n\nd1 %s\n\nd2 %s' % (z,d1,d2)
</t>
<t tx="ekr.20100131171342.5506"></t>
<t tx="ekr.20100131171342.5507">@
language_delims_dict 
    # Keys are languages, values are 1,2 or 3-tuples of delims. 
language_extension_dict
    # Keys are languages, values are extensions.
extension_dict = {
    # Keys are extensions, values are languages.
@c

delims_d    = g.app.language_delims_dict
lang_d      = g.app.language_extension_dict
ext_d       = g.app.extension_dict

for lang in lang_d:
    ext = lang_d.get(lang)
    assert lang in delims_d,'fail 1: %s' % lang
    assert ext in ext_d,'fail 2: %s' % ext
for ext in ext_d:
    lang = ext_d.get(ext)
    assert lang in lang_d,'fail 3: %s' % lang
</t>
<t tx="ekr.20100131171342.5508"></t>
<t tx="ekr.20100131171342.5509">import leo.core.leoBridge as leoBridge

if g.app.isExternalUnitTest:
    print('running @test leoBridge init logic')
    # This can not be run locally!
    b = leoBridge.controller(gui='nullGui',
        loadPlugins=True,
        readSettings=True,
        silent=False,
        tracePlugins=True,
        verbose=True)
    g = b.globals()
    path = g.os_path_finalize_join(g.app.loadDir,'..','doc','LeoDocs.leo')
    assert g.os_path_exists(path)
    c = b.openLeoFile(path)
    assert c
    assert c.rootPosition()
</t>
<t tx="ekr.20100131171342.5592"></t>
<t tx="ekr.20100131171342.5593"># For some reason these don't select the dialog properly when run as a script.
# However, the main reason for the tests is to make sure the ctors don't crash.
# Also, for unit testing the value of c doesn't matter.

oldGui = g.app.gui ; guis = [g.app.gui]

import leo.core.leoGui as leoGui
guis.append(leoGui.UnitTestGui())

for gui in guis:
    gui.runAboutLeoDialog(c,'version','copyright','url','email')
    gui.runAskLeoIDDialog()
    gui.runAskOkDialog(c,'title','message')
    gui.runAskOkCancelNumberDialog(c,'title','message')
    gui.runAskOkCancelStringDialog(c,'title','message')
    gui.runAskYesNoDialog(c,'title','message')
    gui.runAskYesNoCancelDialog(c,'title','message')
    # gui.runCompareDialog(c) # Removed.

g.app.gui = oldGui
</t>
<t tx="ekr.20100131171342.5599"></t>
<t tx="ekr.20100131171342.5603" annotate="7d71002e"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoGui tests.')
</t>
<t tx="ekr.20100131171342.5604"></t>
<t tx="ekr.20100131171342.5605">import string

k = c.k

for ch in (string.printable):
    if ch == '\n': continue # A special case.
    assert k.isPlainKey(ch), 'wrong: not plain: %s' % (ch)

special = (
    'Return', # A special case.
    'Begin','Break','Caps_Lock','Clear','Down','End','Escape',
    'F1','F2','F3','F4','F5','F6','F7','F8','F9','F10','F11','F12',
    'KP_Add', 'KP_Decimal', 'KP_Divide', 'KP_Enter', 'KP_Equal',
    'KP_Multiply, KP_Separator,KP_Space, KP_Subtract, KP_Tab',
    'KP_F1','KP_F2','KP_F3','KP_F4',
    'KP_0','KP_1','KP_2','KP_3','KP_4','KP_5','KP_6','KP_7','KP_8','KP_9',
    'Home','Left','Linefeed','Next','Num_Lock',
    'PageDn','PageUp','Pause','Prior','Right','Up',
    'Sys_Req',
)

for ch in special:
    assert not k.isPlainKey(ch), 'wrong: is plain: %s' % (ch)
</t>
<t tx="ekr.20100131171342.5606"># This test is difficult to get right on all platforms.
# It's not worth doing.

try:
    k = c.k
    w = c.frame.body.wrapper
    ac = k.autoCompleter
    # Set the insertion point.
    s = w.getAllText()
    w.setInsertPoint(len(s)-1)
    # Just test that this doesn't crash.
    ac.w = w
    ac.calltip()
finally:
    w.setAllText(s)
    p.setBodyString(s)
    c.recolor()

# c.frame
</t>
<t tx="ekr.20100131171342.5607">k = c.k ; p = c.p
w = c.edit_widget(p)
commandName = 'test-registerCommand'

def callback (event=None,c=c): # Must have an event param to pass later unit test.
    g.app.unitTestDict[commandName] = True

# Test 1
g.app.unitTestDict[commandName] = False
k.registerCommand(commandName,'Alt-Ctrl-Shift-z',callback,pane='all',verbose=True)
k.simulateCommand(commandName)
assert g.app.unitTestDict.get(commandName)

if 0: # Test 2
    g.app.unitTestDict[commandName] = False
    k.manufactureKeyPressForCommandName(w,commandName)
    assert g.app.unitTestDict.get(commandName)
</t>
<t tx="ekr.20100131171342.5608"># print('settingsNameDict',c.k.settingsNameDict)

table = (
    ('a','a'),
    ('A','a'),
    ('Alt-a','Alt+a'),
    ('Alt-A','Alt+a'),
    ('Alt-Shift-a','Alt+A'),
    ('Alt-=','Alt+equal'),
    ('Alt-+','Alt+plus'),
    # We can no longer igtnore the shift.
    # ('Alt-Shift++','Alt+plus'), # Ignore the shift.
    ('Alt--','Alt+minus'),
    ('Shift-a','A'),
    ('Shift-A','A'),
    ('RtArrow','Right'),
    ('Shift-RtArrow','Shift+Right'),
    ('Ctrl-RtArrow','Ctrl+Right'),
    ('Control-Right','Ctrl+Right'),
    ('PageUp','Prior'), ('Prior','Prior'),('Shift-PageUp','Shift+Prior'),
    ('PageDn','Next'),('Next','Next'),('Shift-Next','Shift+Next'),
)
for setting, result in table:
    val = c.k.strokeFromSetting(setting)
    assert val==result,'Expected %s, Got %s' % (result,val)
</t>
<t tx="ekr.20100131171342.5609" annotate="7d71002e"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoKeys tests.')
</t>
<t tx="ekr.20100131171342.5610"></t>
<t tx="ekr.20100131171342.5611">pc = g.app.pluginsController

aList1 = pc.getHandlersForTag('select1')
aList2 = pc.getHandlersForOneTag('select1')

assert type(aList1) == type([])
assert type(aList2) == type([])
assert aList1 == aList2
</t>
<t tx="ekr.20100131171342.5612"></t>
<t tx="ekr.20100131171342.5613">def sendEmail(self):
    pass # g.trace('self2',self)

class test:
    pass

X = test()
sendEmail(X)
</t>
<t tx="ekr.20100131180007.5359">c.frame.tree.OnIconDoubleClick(p)
</t>
<t tx="ekr.20100131180007.5361">x = c.shadowController
table = (
    ('python','abc',False),
    ('python','#abc',False),
    ('python','#verbatim',False),
    ('python','#@verbatim',True),
    ('c','abc',False),
    ('c','//@',False),
    ('c','//@verbatim',True),
    ('html','#@abc',False),
    ('html','&lt;!--abc--&gt;',False),
    ('html','&lt;!--@verbatim --&gt;',True),
    ('xxxx','#--unknown-language--@verbatim',True)
)
for language,s,expected in table:
    delims = g.set_delims_from_language(language)
    marker = x.MarkerClass(delims)
    result = marker.isVerbatimSentinel(s)
    assert result==expected,'language %s s: %s expected %s got %s' % (
        language,s,expected,result)
</t>
<t tx="ekr.20100131180007.5362">x = c.shadowController
table = (
    ('python','abc',False),
    ('python','#abc',False),
    ('python','#@abc',True),
    ('python','@abc#',False),
    ('c','abc',False),
    ('c','//@',True),
    ('c','// @abc',False),
    ('c','/*@ abc */',True),
    ('c','/*@ abc',False),
    ('html','#@abc',False),
    ('html','&lt;!--abc--&gt;',False),
    ('html','&lt;!--@ abc --&gt;',True),
    ('html','&lt;!--@ abc -&gt;',False),
    ('xxxx','#--unknown-language--@',True)
)
for language,s,expected in table:
    delims = g.set_delims_from_language(language)
    marker = x.MarkerClass(delims)
    result = marker.isSentinel(s)
    assert result==expected,'language %s s: %s expected %s got %s' % (
        language,s,expected,result)
</t>
<t tx="ekr.20100131180007.5363">x = c.shadowController
table = (
    ('python','#',''),
    ('c','//',''),
    ('html','&lt;!--','--&gt;'),
    ('xxxx','#--unknown-language--',''),
)
for language,delim1,delim2 in table:
    delims = g.set_delims_from_language(language)
    marker = x.MarkerClass(delims)
    result = marker.getDelims()
    expected = delim1,delim2
    assert result==expected,'language %s expected %s got %s' % (
        language,expected,result)
</t>
<t tx="ekr.20100131180007.5364">x = c.shadowController

table = (
    ('ini',';','',),
    ('c','//',''),
    ('h','//',''),
    ('py','#',''),
    ('xyzzy','#--unknown-language--',''),
)

for ext,delim1,delim2 in table:
    filename = 'x.%s' % ext
    marker = x.markerFromFileName(filename)
    result1,result2 = marker.getDelims()
    assert delim1==result1, 'ext=%s, got %s, expected %s' % (
        ext,delim1,result1)
    assert delim2==result2, 'ext=%s, got %s, expected %s' % (
        ext,delim2,result2)
</t>
<t tx="ekr.20100131180007.5365">x = c.shadowController
# Add -ver=4 so at.parseLeoSentinel does not complain.
table = (
    ('c',('//@+leo-ver=4','a'),                   '//',''),
    ('c',('//@first','//@+leo-ver=4','b'),        '//',''),
    ('c',('/*@+leo-ver=4*/','a'),                 '/*','*/'),
    ('c',('/*@first*/','/*@+leo-ver=4*/','b'),    '/*','*/'),
    ('python',('#@+leo-ver=4','a'),               '#',''),
    ('python',('#@first','#@+leo-ver=4','b'),     '#',''),
    ('error',('',),             '#--unknown-language--',''),
    ('html',('&lt;!--@+leo-ver=4--&gt;','a'),                '&lt;!--','--&gt;'),
    ('html',('&lt;!--@first--&gt;','&lt;!--@+leo-ver=4--&gt;','b'),'&lt;!--','--&gt;'),
)

for language,lines,delim1,delim2 in table:
    s = x.findLeoLine(lines)
    marker = x.markerFromFileLines(lines,'test-file-name')
    result1,result2 = marker.getDelims()
    assert delim1==result1, 'language %s expected1 %s got %s lines %s' % (
        language,delim1,result1,'\n'.join(lines))
    assert delim2==result2, 'language %s expected2 %s got %s lines %s' % (
        language,delim1,result1,'\n'.join(lines))
</t>
<t tx="ekr.20100131180007.5366">x = c.shadowController
table = (
    ('c',('//@+leo','a'),                   '//@+leo'),
    ('c',('//@first','//@+leo','b'),        '//@+leo'),
    ('c',('/*@+leo*/','a'),                 '/*@+leo*/'),
    ('c',('/*@first*/','/*@+leo*/','b'),    '/*@+leo*/'),
    ('python',('#@+leo','a'),               '#@+leo'),
    ('python',('#@first','#@+leo','b'),     '#@+leo'),
    ('error',('',),''),
    ('html',('&lt;!--@+leo--&gt;','a'),                '&lt;!--@+leo--&gt;'),
    ('html',('&lt;!--@first--&gt;','&lt;!--@+leo--&gt;','b'),'&lt;!--@+leo--&gt;'),
)
for language,lines,expected in table:
    result = x.findLeoLine(lines)
    assert expected==result, 'language %s expected %s got %s lines %s' % (
        language,expected,result,'\n'.join(lines))
</t>
<t tx="ekr.20100131180007.5367">c,p = g.getTestVars()
x = c.shadowController

fn = 'does/not/exist'
assert not g.os_path_exists(fn)
assert not x.replaceFileWithString (fn,'abc')
</t>
<t tx="ekr.20100131180007.5369">table = (
    '1',
    '1-1','1-1-1','1-1-2',
    '1-2','1-2-1','1-2-2',
    '2',
    '2-1','2-1-1','2-1-2',
    '2-2','2-2-1','2-2-2',
    '3',
    '3-1','3-1-1','3-1-2',
    '3-2','3-2-1','3-2-2',
)

for suffix in table:
    h = 'node %s' % suffix
    p2 = g.findNodeInTree(c,p,h)
    assert p2,h

table2 = (
    ('2-1-2','2-1-1','2-1-1'),
    ('3','2','2'),
)  

for h1,h2,h3 in table2:
    p1 = g.findNodeInTree(c,p,'node %s' % h1)
    p2 = g.findNodeInTree(c,p,'node %s' % h2)
    p3 = g.findNodeInTree(c,p,'node %s' % h3)
    p1._adjustPositionBeforeUnlink(p2)
    result = p1
    assert result.stack == p3.stack,'expected %s got %s' % (
        p3.h,result and result.h or '&lt;none&gt;')

# Data.
@others
</t>
<t tx="ekr.20100131180007.5370"># Node 1
</t>
<t tx="ekr.20100131180007.5371"># node 1-1
</t>
<t tx="ekr.20100131180007.5372"># node 1-1-1
</t>
<t tx="ekr.20100131180007.5373"># node 1-1-2
</t>
<t tx="ekr.20100131180007.5374"># node 1-2
</t>
<t tx="ekr.20100131180007.5375"># node 1-2-1
</t>
<t tx="ekr.20100131180007.5376"># node 1-2-2
</t>
<t tx="ekr.20100131180007.5377"># node 2
</t>
<t tx="ekr.20100131180007.5378"># node 2-1
</t>
<t tx="ekr.20100131180007.5379"># node 2-1-1
</t>
<t tx="ekr.20100131180007.5380"># node 2-1-2
</t>
<t tx="ekr.20100131180007.5381"># node 2-2
</t>
<t tx="ekr.20100131180007.5382"># node 2-2-1
</t>
<t tx="ekr.20100131180007.5383"># node 2-2-2
</t>
<t tx="ekr.20100131180007.5384"># node 3
</t>
<t tx="ekr.20100131180007.5385"># node 3-1
</t>
<t tx="ekr.20100131180007.5386"># node 3-1-1
</t>
<t tx="ekr.20100131180007.5387"># node 3-1-2
</t>
<t tx="ekr.20100131180007.5388"># node 3-2
</t>
<t tx="ekr.20100131180007.5389"># node 3-2-1
</t>
<t tx="ekr.20100131180007.5390"># node 3-2-2
</t>
<t tx="ekr.20100131180007.5391">table = (
    ('@auto-rst rst-file','rst-file','rst-file'),
    ('@auto x','x',''),
    ('xyz','',''),
)

for s,expected1,expected2 in table:
    result1 = p.v.atAutoNodeName(h=s)
    result2 = p.v.atAutoRstNodeName(h=s)
    assert result1 == expected1,'fail1: given %s expected %s got %s' % (
        repr(s),repr(expected1),repr(result1))
    assert result2 == expected2,'fail2: given %s expected %s got %s' % (
        repr(s),repr(expected2),repr(result2))
</t>
<t tx="ekr.20100131180007.5393">import leo.plugins.importers.leo_rst as leo_rst
ic = c.importCommands
scanner = leo_rst.RstScanner(importCommands=ic,atAuto=True)
scanner.root = p
s1 = ["abc","xyz",]
s2 = ["xyz",]
scanner.reportMismatch(s1,s2,1,1)
s1 = ["xyz",]
s2 = ["abc","xyz",]
scanner.reportMismatch(s1,s2,1,1)
</t>
<t tx="ekr.20100131180007.5395">for s,expected in (
    ('a\nb', 'a\nb'),
    ('\n  \nb\n', 'b\n'),
    (' \t \n\n\n c', ' c'),
):
    result = g.removeLeadingBlankLines(s)
    assert result == expected, '\ns: %s\nexpected: %s\nresult:   %s' % (
        repr(s),repr(expected),repr(result))
</t>
<t tx="ekr.20100131180007.5396">for s,expected in (
    ('a\nb', 'a\nb'),
    ('\n  \n\nb\n', 'b\n'),
    (' \t \n\n  \n c\n\t\n', ' c\n'),
):
    result = g.removeBlankLines(s)
    assert result == expected, '\ns: %s\nexpected: %s\nresult:   %s' % (
        repr(s),repr(expected),repr(result))
</t>
<t tx="ekr.20100131180007.5398">if 1: # The following must be indented.

    s = '''\
    a
      b

c
    d'''

    s2 = '    a\n      b\n\nc\n    d'

    result = g.adjustTripleString(s,c.tab_width)
    # print(c.tab_width)
    # print(result)
    # print('=====')
    # print(s2)
    assert result == s2,repr(result)


</t>
<t tx="ekr.20100131180007.5402">s = 'aa bc \n \n\t\n'
table = (
    ('\t\n ','aa bc'),
    ('abc\t\n ',''),
    ('c\t\n ','aa b'),
)

for arg,val in table:
    result = g.removeTrailing(s,arg)
    assert result == val, 'expected %s, got %s' % (val,result)
</t>
<t tx="ekr.20100131180007.5403">s = ' \n \n\t\naa bc'
s2 = 'aa bc'

for i in range(3):
    result = g.ensureLeadingNewlines(s,i)
    val = ('\n' * i) + s2
    assert result == val, 'expected %s, got %s' % (
        repr(val),repr(result))
</t>
<t tx="ekr.20100131180007.5404">s = 'aa bc \n \n\t\n'
s2 = 'aa bc'

for i in range(3):
    result = g.ensureTrailingNewlines(s,i)
    val = s2 + ('\n' * i)
    assert result == val, 'expected %s, got %s' % (
        repr(val),repr(result))
</t>
<t tx="ekr.20100131180007.5417">import zipfile
lm = g.app.loadManager

# Create a zip file for testing.
s = 'this is a test file'
testDir = g.os_path_join(g.app.loadDir,'..','test')
assert g.os_path_exists(testDir)
path = g.os_path_finalize_join(testDir,'testzip.zip')
theFile = zipfile.ZipFile(path,'w')
theFile.writestr('leo-zip-file',s)
theFile.close()

# Open the file, and use read (with no args) to get the contents.
theFile = lm.openLeoOrZipFile(path)
assert theFile
s2 = theFile.read()
assert s == s2,'s:  %s\ns2: %s' % (repr(s),repr(s2))
</t>
<t tx="ekr.20100131180007.5421">c,p = g.getTestVars()

# result,error = g.setDefaultDirectory(c,p,importing=False)
# assert error == ''
# assert result == c.openDirectory,result

result = g.setDefaultDirectory(c,p,importing=False)
assert result == c.openDirectory,result
</t>
<t tx="ekr.20100131180007.5425"># New in Leo 4.6, set_delims_from_string returns '' instead of None.
table = (
    ('c','@comment // /* */',   ('//','/*','*/')),
    ('c','// /* */',            ('//','/*','*/')),
    ('python','@comment #',     ('#','','')),
    ('python','#',              ('#','','')),
    ('xxxyyy','@comment a b c', ('a','b','c')),
    ('xxxyyy','a b c',          ('a','b','c')),
)

for language,s,expected in table:
    result = g.set_delims_from_string(s)
    assert result==expected,'language %s expected %s, got %s' % (
        language,expected,result)
</t>
<t tx="ekr.20100131180007.5426"># New in Leo 4.6, set_delims_from_language returns '' instead of None.
table = (
    ('c',       ('//','/*','*/')),
    ('python',  ('#','','')),
    ('xxxyyy',  ('','','')),
)

for language, expected in table:
    result = g.set_delims_from_language(language)
    assert result==expected,'language %s expected %s, got %s' % (
        language,expected,result)
</t>
<t tx="ekr.20100131180007.5427">table =  (
    (None,None), # Retain empty paths for warnings.
    ('',''),
    (g.app.loadDir,g.app.loadDir),
    ('&lt;abc&gt;','abc'),
    ('"abc"','abc'),
    ("'abc'",'abc'),
)

for path,expected in table:
    result = g.stripPathCruft(path)
    assert result == expected
</t>
<t tx="ekr.20100131180007.5428"># New in Leo 4.6, set_delims_from_language returns '' instead of None.
table = (
    ('.c',      ('//','/*','*/')),
    ('.html',   ('', '&lt;!--', '--&gt;')),
    ('.py',     ('#','','')),
    ('.xxx',    ('','','')),
)

for ext, expected in table:
    result = g.comment_delims_from_extension(ext)
    assert result==expected,'ext %s expected %s, got %s' % (
        ext,expected,result)
</t>
<t tx="ekr.20100131180007.5429">import os,stat

fc = c.fileCommands
path = g.os_path_finalize_join(g.app.loadDir,'..','test','test-read-only.txt')
if os.path.exists(path):
    os.chmod(path, stat.S_IREAD)
    fc.warnOnReadOnlyFiles(path)
    assert fc.read_only
else:
    fc.warnOnReadOnlyFiles(path)
</t>
<t tx="ekr.20100131180007.5434">@language python
@comment a b c
    # @comment must follow @language.
@tabwidth -8
@pagewidth 72
@encoding utf-8
@path: anError # @path ends with ':'.

# @path xyzzy # Creates folder called xyzzy: interferes with other unit tests.

d = g.get_directives_dict(p)

# assert d.get('_p') == p # Never used, and a bad idea.
assert d.get('language') == 'python'
assert d.get('tabwidth') == '-8'
assert d.get('pagewidth') == '72'
assert d.get('encoding') == 'utf-8'
assert d.get('comment') == 'a b c'
assert not d.get('path'),d.get('path')
# assert d.get('path').endswith('xyzzy')
</t>
<t tx="ekr.20100131180007.5435">@header

c,p = g.getTestVars()
aList = g.get_directives_dict_list(p)
g.scanAtHeaderDirectives(aList)
</t>
<t tx="ekr.20100131180007.5442">@pagewidth -40

aList = g.get_directives_dict_list(p)
n = g.scanAtPagewidthDirectives(aList)

# The @pagewidth directive in the parent should control.
# Depending on how this test is run, the result could be 80 or None.
assert n in (None,80),repr(n)
</t>
<t tx="ekr.20100131180007.5450">expectedIconDictList = [
{
    'on': 'tnode',
    'where': 'beforeHeadline',
    'yoffset': 0,
    # 'file': u'C:\\leo.repo\\trunk\\leo\\Icons\\Tango\\16x16\\actions\\add.png',
    'file': 'C:\\leo.repo\\trunk\\leo\\Icons\\Tango\\16x16\\actions\\add.png',
    'xpad': 1,
    'type': 'file',
    'xoffset': 2,
    # 'relPath': u'Tango\\16x16\\actions\\add.png',
    'relPath': 'Tango\\16x16\\actions\\add.png',
},
{
    'on': 'tnode',
    'where': 'beforeHeadline',
    'yoffset': 0,
    # 'file': u'C:\\leo.repo\\trunk\\leo\\Icons\\Tango\\16x16\\actions\\bottom.png',
    'file': 'C:\\leo.repo\\trunk\\leo\\Icons\\Tango\\16x16\\actions\\bottom.png',
    'xpad': 1,
    'type': 'file',
    'xoffset': 2,
    # 'relPath': u'Tango\\16x16\\actions\\bottom.png',
    'relPath': 'Tango\\16x16\\actions\\bottom.png',
}]
table = (
('tx','raw',None,"ekr.20090701133940.1767"),
('lineYOffset',None,3,"4b032e"),
# A real icon
('icons',None,expectedIconDictList,
"5d7100287d71012855026f6e71025505746e6f6465710355047479\
70657104550466696c6571055507796f666673657471064b006805583700000\
0433a5c6c656f2e7265706f5c7472756e6b5c6c656f5c49636f6e735c54616e\
676f5c31367831365c616374696f6e735c6164642e706e67710755047870616\
471084b01550577686572657109550e6265666f7265486561646c696e65710a\
5507786f6666736574710b4b02550772656c50617468710c581b00000054616\
e676f5c31367831365c616374696f6e735c6164642e706e67710d757d710e28\
55026f6e710f68035504747970657110550466696c6571115507796f6666736\
57471124b006811583a000000433a5c6c656f2e7265706f5c7472756e6b5c6c\
656f5c49636f6e735c54616e676f5c31367831365c616374696f6e735c626f7\
4746f6d2e706e67711355047870616471144b01550577686572657115550e62\
65666f7265486561646c696e6571165507786f666673657471174b025507726\
56c506174687118581e00000054616e676f5c31367831365c616374696f6e73\
5c626f74746f6d2e706e67711975652e"),
)
for attr,kind,expected,val in table:
    result = c.fileCommands.getSaxUa(attr,val,kind=kind)
    if expected is None: expected = val
    assert g.toEncodedString(expected)==result,'expected %s got %s' % (
        expected,result)
</t>
<t tx="ekr.20100131180007.5451">s = 'test%cthis' % 27

assert c.fileCommands.cleanSaxInputString(s) == 'test this'
</t>
<t tx="ekr.20100131180007.5453"># A totally wimpy test.
c.abbrevCommands.dynamicExpandHelper(event=None,prefix='',aList=[],w=None)
</t>
<t tx="ekr.20100131180007.5454">at = c.atFileCommands

at.setPathUa(p,'abc')
d = p.v.tempAttributes
d2 = d.get('read-path')
val1 = d2.get('path')
val2 = at.getPathUa(p)

table = (
    ('d2.get',val1),
    ('at.getPathUa',val2),
)
for kind,val in table:
    assert val == 'abc','kind %s expected %s got %s' % (
        kind,'abc',val)
</t>
<t tx="ekr.20100131180007.5455">at = c.atFileCommands

p2 = p.firstChild().firstChild()
path = at.fullPath(p2,simulate=True)
end = g.os_path_normpath('abc/xyz')
assert path.endswith(end),repr(path)
</t>
<t tx="ekr.20100131180007.5456"></t>
<t tx="ekr.20100131180007.5457"></t>
<t tx="ekr.20100131180007.5458">at = c.atFileCommands
d = at.scanAllDirectives(p)
</t>
<t tx="ekr.20100131180007.5459">rst = c.rstCommands
rst.initAtAutoWrite(p,fileName='&lt;test file&gt;',outputFile=None)

# Ensure we are actually testing the default logic.
d = p.v.u.get('rst-import',{})
underlines = d.get('underline_characters')
assert underlines is None,'fail 1: %s' % repr(underlines)
assert d == {},'fail 2: %s' % repr(d)
# Now test the logic.
assert rst.underlines2 == '','fail 3: %s' % repr(rst.underlines2)
assert rst.underlines1 == '=+*^~"\'`-:&gt;&lt;_', 'fail4 %s' % repr(rst.underlines1)
assert rst.atAutoWriteUnderlines == '=+*^~"\'`-:&gt;&lt;_', 'fail 5: %s' % (
    repr(rst.atAutoWriteUnderlines))
</t>
<t tx="ekr.20100131180007.5460">sax_node = g.bunch(
    attributes={
'a':'M',
'lineYOffset':"4b032e",
# A real icon attribute, see the tests below for what we expect
'icons':"5d7100287d71012855026f6e71025505746e6f6465710355047479\
70657104550466696c6571055507796f666673657471064b006805583700000\
0433a5c6c656f2e7265706f5c7472756e6b5c6c656f5c49636f6e735c54616e\
676f5c31367831365c616374696f6e735c6164642e706e67710755047870616\
471084b01550577686572657109550e6265666f7265486561646c696e65710a\
5507786f6666736574710b4b02550772656c50617468710c581b00000054616\
e676f5c31367831365c616374696f6e735c6164642e706e67710d757d710e28\
55026f6e710f68035504747970657110550466696c6571115507796f6666736\
57471124b006811583a000000433a5c6c656f2e7265706f5c7472756e6b5c6c\
656f5c49636f6e735c54616e676f5c31367831365c616374696f6e735c626f7\
4746f6d2e706e67711355047870616471144b01550577686572657115550e62\
65666f7265486561646c696e6571165507786f666673657471174b025507726\
56c506174687118581e00000054616e676f5c31367831365c616374696f6e73\
5c626f74746f6d2e706e67711975652e"
})
try:
    p2 = p.insertAsLastChild()
    v = p2.v
    c.fileCommands.handleVnodeSaxAttributes(sax_node,v)
    # print v,v.u
    d = v.u
    for attr in ('lineYOffset','icons'):
        assert d.get(attr) is not None,attr
    # The a:M attribute should mark the node.
    assert d.get('a') is None
    assert v.isMarked()
    aList = d.get('icons')
    assert aList
    assert len(aList) == 2
    for d2 in aList:
        for key in ('on','where','yoffset','file'):
            assert d2.get(key) is not None,key
finally:
    if 1:
        while p.hasChildren():
            # print('deleting',p.firstChild())
            p.firstChild().doDelete()
</t>
<t tx="ekr.20100131180007.5461">at = c.atFileCommands

fn = 'does/not/exist'
assert not g.os_path_exists(fn)
assert not at.replaceFileWithString (fn,'abc')
</t>
<t tx="ekr.20100131180007.5462"># Here is something that should generate a verbtim sentinel::

#@+leo-encoding=iso-8859-1.

# The length of this node should remain constant.

assert len(p.b) == 175,len(p.b)
</t>
<t tx="ekr.20100131180007.5463">sax_node = g.bunch(
    tnodeAttributes={
# The 'tx' attribute is handled by contentHandler.tnodeAttributes.
# 'tx':"ekr.20090701133940.1767",
'lineYOffset':"4b032e",
# A real icon attribute, see the tests below for what we expect
'icons':"5d7100287d71012855026f6e71025505746e6f6465710355047479\
70657104550466696c6571055507796f666673657471064b006805583700000\
0433a5c6c656f2e7265706f5c7472756e6b5c6c656f5c49636f6e735c54616e\
676f5c31367831365c616374696f6e735c6164642e706e67710755047870616\
471084b01550577686572657109550e6265666f7265486561646c696e65710a\
5507786f6666736574710b4b02550772656c50617468710c581b00000054616\
e676f5c31367831365c616374696f6e735c6164642e706e67710d757d710e28\
55026f6e710f68035504747970657110550466696c6571115507796f6666736\
57471124b006811583a000000433a5c6c656f2e7265706f5c7472756e6b5c6c\
656f5c49636f6e735c54616e676f5c31367831365c616374696f6e735c626f7\
4746f6d2e706e67711355047870616471144b01550577686572657115550e62\
65666f7265486561646c696e6571165507786f666673657471174b025507726\
56c506174687118581e00000054616e676f5c31367831365c616374696f6e73\
5c626f74746f6d2e706e67711975652e"
})
try:
    p2 = p.insertAsLastChild()
    v = p2.v
    c.fileCommands.handleTnodeSaxAttributes(sax_node,v)
    # print v,v.u
    d = v.u
    for attr in ('lineYOffset','icons'):
        assert d.get(attr),attr
    for attr in ('tx','a'):
        assert d.get(attr) is None,attr # A known attribute.
finally:
    if 1:
        while p.hasChildren():
            # print('deleting',p.firstChild())
            p.firstChild().doDelete()
</t>
<t tx="ekr.20100131180007.5465">class StubConfig(g.nullObject):
    pass

x = StubConfig()
assert not x.getBool(c,'mySetting')
assert not x.enabledPluginsFileName
</t>
<t tx="ekr.20100131180007.5466">p2 = p.firstChild().firstChild().firstChild()

aList = g.get_directives_dict_list(p2)
path = c.scanAtPathDirectives(aList)
# print (path,p2.h)
endpath = g.os_path_normpath('one/two')
assert path and path.endswith(endpath),'expected ending %s got %s' % (
    endpath,path)
</t>
<t tx="ekr.20100131180007.5467"></t>
<t tx="ekr.20100131180007.5468"></t>
<t tx="ekr.20100131180007.5469"></t>
<t tx="ekr.20100203103015.5353"># A copy of the code from c.createOrRecreateTempFileAsNeeded.
# Not a perfect test, but stil significant.

assert c.conflict_message,'fail 1'

result = g.app.gui.runAskYesNoCancelDialog(c,
    "Conflict!", c.conflict_message,
    yesMessage = "Outline",
    noMessage = "File",
    defaultButton = "Cancel")

assert result in (None,'cancel'),'fail 2: %s' % result
</t>
<t tx="ekr.20100203103015.5354">s = c.openWithTempFilePath(p,'.py')
assert s.find('LeoTemp') &gt; -1
assert s.endswith('.py')
</t>
<t tx="ekr.20100203103015.5355">@language python

table = (
    # (None,'.py'),
    # ('','.py'),
    ('txt','.txt'),
    ('.txt','.txt'),
)

for ext,result in table:
    result2 = c.getOpenWithExt(p,ext)
    assert result==result2,'ext: %s, expected %s, got %s' % (
        repr(ext),repr(result),repr(result2))
</t>
<t tx="ekr.20100203103015.5356">arg = ''
arg0 = 'one'
fn = '&lt;fn&gt;'
filename = '' # g.os.path.basename(arg)
vtuple = [arg0,fn]

table = (
    #('os.system',       'os.system(%s)' % (arg+fn)),
    #('os.startfile',    'os.startfile(%s)' % (arg+fn)),
    #('exec',            'exec(%s)' % (arg+fn)),
    #('os.spawnl',       'os.spawnl(%s,%s,%s)' % (arg,filename,fn)),
    #('os.spawnv',       'os.spawnv(%s,%s)' % (arg0,vtuple)),
    ('subprocess.Popen','subprocess.Popen(%s)' % vtuple),
    ('huh?',            'bad command:'+'huh?'),
)

for openType,result in table:
    if openType in ('os.spawnv','subprocess.Popen'):
        arg2 = ['one']
    else:
        arg2 = None
    result2 = c.openTempFileInExternalEditor(
        arg2,fn,openType,testing=True)
    assert result==result2,'expected %s, got %s' % (
        repr(result),repr(result2))
</t>
<t tx="ekr.20100203103015.5357">def spam(): pass
lam = lambda a: None
class aCallable:
    def __call__ (self):
        pass
c = aCallable()

table = (
    ('abc',False),
    (spam,True),
    (lam,True),
    (c,True)
)

for obj,val in table:
    val2 = g.isCallable(obj)
    assert val == val2,'%s, expected %s, got %s' % (
        repr(obj),val,val2)
</t>
<t tx="ekr.20100204165850.5371"># These tests will be important when revising config code.
</t>
<t tx="ekr.20100204165850.5373">k = c.k
colorizer = c.frame.body.getColorizer()
ed = c.editCommands

# These don't set ivars
    # 'toggle-active-pane'),
    # 'toggle-angle-brackets',
    # 'toggle-input-state'),
    # 'toggle-mini-buffer'),
    # 'toggle-split-direction'),

table = [
    (k,'abbrevOn','toggle-abbrev-mode'),
    (ed,'extendMode','toggle-extend-mode'),
]

# Not valid for external tests.
table2 = [
    (k,'enable_autocompleter','toggle-autocompleter'),
    (k,'enable_calltips','toggle-calltips'),
    (c,'sparse_find','toggle-find-collapses-nodes'),
    (colorizer,'showInvisibles','toggle-invisibles'),
    (c,'sparse_move','toggle-sparse-move'),
]

if not g.app.isExternalUnitTest:
    table.extend(table2)

for obj,ivar,command in table:
    val1 = getattr(obj,ivar)
    try:
        k.simulateCommand(command)
        val2 = getattr(obj,ivar)
        assert val2 == (not val1),'failed 1 %s' % command
        k.simulateCommand(command)
        val3 = getattr(obj,ivar)
        assert val3 == val1,'failed 2 %s' % command
        # print('pass',command)
    finally:
        setattr(obj,ivar,val1)
</t>
<t tx="ekr.20100204173354.5375">if g.app.isExternalUnitTest:
    pass
else:
    table = (
        ('ignore_case','toggle-find-ignore-case-option'),
        ('search_body','toggle-find-in-body-option'),
        ('search_headline','toggle-find-in-headline-option'),
        ('mark_changes','toggle-find-mark-changes-option'),
        ('mark_finds','toggle-find-mark-finds-option'),
        ('pattern_match','toggle-find-regex-option'),
        # ('reverse','toggle-find-reverse-option'),
        ('whole_word','toggle-find-word-option'),
        ('wrap','toggle-find-wrap-around-option'),
    )
    fc = c.findCommands
    for ivar,command in table:
        val1 = getattr(fc,ivar)
        try:
            c.k.simulateCommand(command)
            val2 = getattr(fc,ivar)
            assert val2 == (not val1),'failed 1 %s' % command
            c.k.simulateCommand(command)
            val3 = getattr(fc,ivar)
            assert val3 == val1,'failed 2 %s' % command
        finally:
            setattr(fc,ivar,val1)
</t>
<t tx="ekr.20100206165505.5386"># More suitable as a hand test:
# it makes no effort to delete the 'Recovered Nodes' node.

c.nodeConflictList = []

for i in range(2):
    c.nodeConflictList.append(g.bunch(
        tag='(uncached)',
        gnx='gnx %s' % (i),
        fileName ='filename %s' % (i),
        b_old='old body %s' % (i),
        b_new='new body %s' % (i),
        h_old='head %s' % (i),
        h_new='head %s' % (i),
    ))

c.fileCommands.handleNodeConflicts()

c.nodeConflictList = []

c.redraw()
</t>
<t tx="ekr.20100209155559.5386">c.createOpenWithTempFile(p,'.py')
</t>
<t tx="ekr.20100211110729.5389">@first # -*- coding: utf-8 -*-

# On Windows, this works with or without the following line in sitecustomize.py
# sys.setdefaultencoding('utf-8')

import os

if g.isPython3:
    fn ='ффф.leo'
else:
    fn = g.toUnicode('ффф.leo')

g.app.recentFilesManager.writeRecentFilesFileHelper(fn)
assert g.os_path_exists(fn),'fail 1'
os.remove(fn)
assert not g.os_path_exists(fn),'fail 1'
</t>
<t tx="ekr.20100212072149.5341">child = g.findNodeInChildren(c,p,'syntax-error')
assert child,'no child'
script = child.b
try:
    c.goToScriptLineNumber(child,script,1)
finally:
    p.contract()
    c.selectPosition(p)
    c.redraw()
</t>
<t tx="ekr.20100212072149.5342">@language python
def spam:
    pass
</t>
<t tx="ekr.20100212104817.5346">c.sortRecentFiles()
</t>
<t tx="ekr.20100212104817.5347">child = p.firstChild()
assert child.h == 'b','fail 1'
try:
    c.selectPosition(child)
    c.sortSiblings()
    c.redraw_now()
    child = p.firstChild()
    assert child.h == 'a'
    child = child.next()
    assert child.h == 'b'
    child = child.next()
    assert child.h == 'c'
    assert not child.next()
finally:
    c.undoer.undo()
    p.contract()
    c.redraw(p)
</t>
<t tx="ekr.20100212104817.5348"></t>
<t tx="ekr.20100212104817.5349"></t>
<t tx="ekr.20100212104817.5350"></t>
<t tx="ekr.20100212104817.5351">result = c.helpCommands.getBindingsForCommand('help')
assert result.strip().lower()=='f1'
</t>
<t tx="ekr.20100212110954.5359">lines = c.k.printBindings()
# assert lines[0].strip().endswith('Alt+Ctrl+Shift')
</t>
<t tx="ekr.20100212112056.5361">g.printGcAll()
</t>
<t tx="ekr.20100219080213.5365"></t>
<t tx="ekr.20100219080213.5366">s = '''\
&lt;?php

$type = 'cc';
$obj = new $type; // outputs "hi!"

class cc {
    function __construct() {
        echo 'hi!';
    }
}

?&gt;

'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100219080213.5367">s = '''\
&lt;?php

if (expr) {
    class cc {
        // version 1
    }
} else {
    class cc {
        // version 2
    }
}

?&gt;
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100219080213.5368">s = '''\
&lt;?php
class Enum {
    protected $self = array();
    public function __construct( /*...*/ ) {
        $args = func_get_args();
        for( $i=0, $n=count($args); $i&lt;$n; $i++ )
            $this-&gt;add($args[$i]);
    }

    public function __get( /*string*/ $name = null ) {
        return $this-&gt;self[$name];
    }

    public function add( /*string*/ $name = null, /*int*/ $enum = null ) {
        if( isset($enum) )
            $this-&gt;self[$name] = $enum;
        else
            $this-&gt;self[$name] = end($this-&gt;self) + 1;
    }
}

class DefinedEnum extends Enum {
    public function __construct( /*array*/ $itms ) {
        foreach( $itms as $name =&gt; $enum )
            $this-&gt;add($name, $enum);
    }
}

class FlagsEnum extends Enum {
    public function __construct( /*...*/ ) {
        $args = func_get_args();
        for( $i=0, $n=count($args), $f=0x1; $i&lt;$n; $i++, $f *= 0x2 )
            $this-&gt;add($args[$i], $f);
    }
}
?&gt;

'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.phpUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100223123103.5382">import leo.core.leoFrame as leoFrame

# Do nothing when run externally.
if g.app.isExternalUnitTest:
    pass
else:
    assert not isinstance(c.frame,leoFrame.NullFrame)
    def closeEnough(f1,f2):
        return abs(f1-f2) &lt; 0.0001
    f = c.frame
    ratio,ratio2 = f.ratio,f.secondary_ratio
    table = (
        c.bodyWantsFocusNow,
        c.logWantsFocusNow,
        c.treeWantsFocusNow,
    )
    for func in table:
        func()
        f.contractPane()
        if func == c.logWantsFocusNow:
            assert ratio2 != f.secondary_ratio,'fail 1'
        else:
            assert ratio != f.ratio,'fail 2: %s, %s' % (ratio,f.ratio)
        func()
        f.expandPane()
        assert closeEnough(ratio,f.ratio),'fail 3 %s != %s' % (
            ratio,f.ratio)
        assert closeEnough(ratio2,f.secondary_ratio),'fail 4 %s != %s' % (
            ratio2,f.secondary_ratio)
</t>
<t tx="ekr.20100225094004.5385">s1 = '''
#@+leo-ver=4
#@+node:#@file
Line 1
#@-node:#@file
#@-leo
'''

s2 = '''
#@+leo-ver=4-thin
#@+node:ekr.20040707141957.13:#@thin
#@-node:ekr.20040707141957.13:#@thin
#@-leo
'''

at = c.atFileCommands
assert at.isFileLike(s1),'fail1'
assert not at.isFileLike(s2),'fail2'
</t>
<t tx="ekr.20100731163237.5778">@language python

# Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    # html uses block comments.  This is an important test.
    
    h = '@thin ../test/unittest/at-thin-html-test.html'
    p = g.findNodeAnywhere(c,h)
    assert p
    
    s = (
    '@language html\n\n&lt;&lt; ' +
    'a section reference &gt;&gt;\n\n' +
    'after.\n')
    
    # print(repr(p.b)) ; print(repr(s))
    
    assert p.b == s,'body failure'
</t>
<t tx="ekr.20100801125533.5787">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20100801125533.5788">@language python
@tabwidth -4
@others
#end
</t>
<t tx="ekr.20100801125533.5789">def spam(cheese):

    print(cheese)
</t>
<t tx="ekr.20100801125533.5790">def cheese():

    pass
</t>
<t tx="ekr.20100801125533.5791">def spam(cheese):

    print(cheese)
def cheese():

    pass
#end
</t>
<t tx="ekr.20100802220019.5795">def clone (p,parent,n):
    p2 = p.clone()
    p2.moveToNthChildOf(parent,n)
    return p2

def make (parent,n,h):
    child = parent.insertAsNthChild(n)
    child.h = h
    return child

def delete_r():
    '''Delete all 'Resurrected Nodes' nodes.'''
    while True:
        r = g.findNodeAnywhere(c,'Resurrected Nodes')
        if r: r.doDelete(newNode=p)
        else: break

def delete_children():
    # Delete all children of p.
    while p.hasChildren():
        p.firstChild().doDelete(newNode=p)

def test(p,h,tag):
    assert p,'p'
    assert p.h == 'From root','p.h %s' % tag
    assert p.numberOfChildren() == 1,'number of children %s' % tag
    assert p.firstChild().h == h,'child.h %s' % tag

delete_r()
delete_children()

# Create some children.
root = make(p,0,'root')
child1 = make(root,0,'child1')
child2 = make(root,1,'child2')
child3 = make(root,2,'child3')
child11 = make(child1,0,'child11')
child21 = make(child2,0,'child21')
child31 = make(child3,0,'child31')
# Create some clones.
if 0:
    child4 = clone(child31,root,3)
# Set all bits except for child2 &amp; child31.
for z in root.self_and_subtree():
    z.setVisited()
for z in child2,child31: # These should be moved.
    z.clearVisited()
if 1:
    c.atFileCommands.deleteUnvisitedNodes(root)
    c.redraw()
if 1:
    r = g.findNodeAnywhere(c,'Resurrected Nodes')
    assert r,'r'
    r1 = r.firstChild()
    r2 = r1.next()
    # r3 = r2.next()
    test(r1,'child31','r1')
    test(r2,'child2','r2')
    # assert root.numberOfChildren() == 3,'root.n'
if 1:
    delete_r()
if 1:
    delete_children()
c.redraw()
</t>
<t tx="ekr.20100803234640.5804"></t>
<t tx="ekr.20100803234640.5805">s = '''\
; last modified 1 April 2001 by John Doe
[owner]
name=John Doe
organization=Acme Widgets Inc.

[database]
server=192.0.2.62     ; use IP address in case network name resolution is not working
port=143
file = "payroll.dat"
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.iniUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20100812172232.5801">s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20100812182942.5805">@language rest
</t>
<t tx="ekr.20100812182942.5807">@language rest

#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100812182942.5808">@ This is a doc part
it has two lines.
@c
This is the body of the section.
</t>
<t tx="ekr.20100812213445.5814">@language html
</t>
<t tx="ekr.20100812213445.5824">exec(g.findTestScript(c,'@common leoRst test code'))

rst3Test(c,p)
</t>
<t tx="ekr.20100812213445.5825">@language rest
</t>
<t tx="ekr.20100812213445.5826">@ @rst-options
show_doc_parts_as_paragraphs=True
@c
#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100812213445.5827">@ This is a doc part
it has two lines.
@c
This is the body of the section.
</t>
<t tx="ekr.20100812213445.5828">@language html
</t>
<t tx="ekr.20100813100841.5824"># Skip test when running test dynamically.
s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20100813100841.5825"># Applies to options doc parts as well.
</t>
<t tx="ekr.20100813100841.5827"></t>
<t tx="ekr.20100813100841.5828"></t>
<t tx="ekr.20100813100841.5829"></t>
<t tx="ekr.20100813100841.5839">@language rest
</t>
<t tx="ekr.20100813100841.5840">#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100813100841.5841">@ This is a doc part
it has two lines.
@c
This is the body of the section.
</t>
<t tx="ekr.20100813100841.5842"></t>
<t tx="ekr.20100813100841.5843">.. rst3: filename: test.html


#####
Title
#####

This is test.html

section
+++++++

@ This is a doc part
it has two lines.
@c

This is the body of the section.

</t>
<t tx="ekr.20100813100841.5844">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils 0.8: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;&amp;#64; This is a doc part
it has two lines.
&amp;#64;c&lt;/p&gt;
&lt;p&gt;This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100813100841.5847"></t>
<t tx="ekr.20100813100841.5848">.. rst3: filename: test.html


#####
Title
#####

This is test.html

section
+++++++

@ This is a doc part
it has two lines.
This is the body of the section.

</t>
<t tx="ekr.20100813100841.5849">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;&amp;#64; This is a doc part
it has two lines.
This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100813100841.5850">s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20100813100841.5854">@language rest
</t>
<t tx="ekr.20100813100841.5855">@language rest

#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100813100841.5856">This is the body of the section.
</t>
<t tx="ekr.20100813100841.5857"></t>
<t tx="ekr.20100813100841.5858">.. rst3: filename: test.html


#####
Title
#####

This is test.html

This is the body of the section.

</t>
<t tx="ekr.20100813100841.5859">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;p&gt;This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100813124317.5868"></t>
<t tx="ekr.20100813124317.5869">.. rst3: filename: test.html

#####
Title
#####

This is test.html



section
*******

This is a doc part
it has two lines.

</t>
<t tx="ekr.20100813124317.5870">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;This is a doc part
it has two lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100813124317.5879"># Skip test when running test dynamically.
s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20100813124317.5880">@language rest
</t>
<t tx="ekr.20100813124317.5881">#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100813124317.5883">@ @rst-options
doc_only_mode=True
@c
@ This is a doc part
it has two lines.
@c
This is the body of the section.
</t>
<t tx="ekr.20100813124317.5884"></t>
<t tx="ekr.20100813124317.5889">.. rst3: filename: test.html

#####
Title
#####

This is test.html

section
+++++++

This is a doc part
it has two lines.

</t>
<t tx="ekr.20100813124317.5890">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;This is a doc part
it has two lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100817131738.5886">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20100817131738.5887">aaaacccc dddd
</t>
<t tx="ekr.20100817131738.5888">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5889">aaaacccc dddd
</t>
<t tx="ekr.20100817131738.5894">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20100817131738.5895">aaaa bbcc dddd
</t>
<t tx="ekr.20100817131738.5896">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5897">aaaa bbcc dddd
</t>
<t tx="ekr.20100827140832.5913"># Skip test when running test dynamically.
s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20100827140832.5917">@language rest
</t>
<t tx="ekr.20100827140832.5918">@language rest

@ @rst-options
show_leo_directives=False
@c

#####
Title
#####

This is test.html
</t>
<t tx="ekr.20100827140832.5919">@ This is a doc part
it has two lines.
@c
This is the body of the section.
</t>
<t tx="ekr.20100827140832.5926"></t>
<t tx="ekr.20100827140832.5929">.. rst3: filename: test.html



#####
Title
#####

This is test.html

section
+++++++

@ This is a doc part
it has two lines.
This is the body of the section.

</t>
<t tx="ekr.20100827140832.5930">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;&amp;#64; This is a doc part
it has two lines.
This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100827182529.6840"></t>
<t tx="ekr.20100827182529.6841">.. rst3: filename: test.html


#####
Title
#####

This is test.html

section
+++++++

@ This is a doc part
it has two lines.
This is the body of the section.

</t>
<t tx="ekr.20100827182529.6842">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;&amp;#64; This is a doc part
it has two lines.
This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100827182529.6843"></t>
<t tx="ekr.20100827182529.6844">.. rst3: filename: test.html


#####
Title
#####

This is test.html

This is the body of the section.

</t>
<t tx="ekr.20100827182529.6845">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;p&gt;This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100827182529.6846"></t>
<t tx="ekr.20100827182529.6847">.. rst3: filename: test.html

#####
Title
#####

This is test.html



section
*******

This is a doc part
it has two lines.

</t>
<t tx="ekr.20100827182529.6848">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;This is a doc part
it has two lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100827182529.6849"></t>
<t tx="ekr.20100827182529.6850">.. rst3: filename: test.html

#####
Title
#####

This is test.html

section
+++++++

This is a doc part
it has two lines.

</t>
<t tx="ekr.20100827182529.6851">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;This is a doc part
it has two lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100827182529.6852"></t>
<t tx="ekr.20100827182529.6853">.. rst3: filename: test.html



#####
Title
#####

This is test.html

section
+++++++

@ This is a doc part
it has two lines.
This is the body of the section.

</t>
<t tx="ekr.20100827182529.6854">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document" id="title"&gt;
&lt;h1 class="title"&gt;Title&lt;/h1&gt;

&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;This is test.html&lt;/p&gt;
&lt;div class="section" id="section"&gt;
&lt;h1&gt;section&lt;/h1&gt;
&lt;p&gt;&amp;#64; This is a doc part
it has two lines.
This is the body of the section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20100830113702.5969">if g.app.gui.guiName() == 'qt':
    exec(g.findTestScript(c,'@common leoEditCommands test code'))
    runEditCommandTest(c,p,inHeadline=False)
    runEditCommandTest(c,p,inHeadline=True)
</t>
<t tx="ekr.20100830113702.5970">aaaa bbbb dddd
</t>
<t tx="ekr.20100830113702.5971">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100830113702.5972">aaaa bbbb dddd
</t>
<t tx="ekr.20100830113702.5977">if g.app.gui.guiName() == 'qt':

    exec(g.findTestScript(c,'@common leoEditCommands test code'))
    runEditCommandTest(c,p,inHeadline=False)
    runEditCommandTest(c,p,inHeadline=True)
</t>
<t tx="ekr.20100830113702.5978">aaaa bbcc dddd
</t>
<t tx="ekr.20100830113702.5979">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100830113702.5980">aaaa bbcc dddd
</t>
<t tx="ekr.20100902074747.5970">f = c.abbrevCommands.addAbbrevHelper
d = c.abbrevCommands.abbrevs

# New in Leo 4.10: whitespace (blank,tab,newline) *is* significant in definitions.
table = (
    ('ut1','ut1=aa','aa'),
    # ('ut2','ut2 =bb','bb'),
    ('ut3','ut3=cc=dd','cc=dd'),
    ('ut4','ut4= ee',' ee'),
    ('ut5','ut5= ff = gg',' ff = gg'),
    ('ut6','ut6= hh==ii',' hh==ii'),
    ('ut7','ut7=j=k','j=k'),
    ('ut8','ut8=l==m','l==m'),
    ('@ut1','@ut1=@a','@a'),
)

for name,s,expected in table:
    for s2,kind in ((s,'(no nl)'),(s+'\n','(nl)')):
        f(s2,tag='unit-test')
        result,tag = d.get(name,(None,None),)
        assert result==expected, '%s &lt;%s&gt; expected &lt;%s&gt;, got &lt;%s&gt;' % (
            kind,s,expected,result)
</t>
<t tx="ekr.20100909082308.5990">pc = g.app.pluginsController

table = (
    ('x',               'x'),
    ('foo.bar',         'foo.bar'),
    ('x.py',            'leo.plugins.x'),
    ('leo.plugins.x',   'leo.plugins.x')    
)

for fn,expected in table:
    result = pc.regularizeName(fn)
    assert result==expected,'expected %s, got %s' % (
        expected,result)
    # Make sure that calling regularizeName twice is benign.
    result2 = pc.regularizeName(result)
    assert result2==result
</t>
<t tx="ekr.20101009105124.6195">True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101020123501.6005">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20101020123501.6006">@language objective_c

@interface Application
    -(void) init;
    -(void) showMessage;
@end

@implementation Application 
    -(id) init {
        if (self = [super init]) {
            NSLog(@"Init ok");
            return self;
        }
        return nil;
    }
    -(void) showMessage {
        NSLog(@"Hello there");
    }
@end

@"Hello there"

,@interface
, @interface
the @interface

// By the way, I have noticed that such kind of words in doxygen block
// are highlighted properly, but they are labels here, not keywords1 as in my case.
/**
@var test
@todo
*/
</t>
<t tx="ekr.20101021205258.6009"></t>
<t tx="ekr.20101021205258.6010"></t>
<t tx="ekr.20101021205258.6011"></t>
<t tx="ekr.20101021210253.6018"></t>
<t tx="ekr.20101023195640.6033"></t>
<t tx="ekr.20101023195640.6034">@others
</t>
<t tx="ekr.20101023195640.6035">node 1 line 1
node 1 old line 1
node 1 old line 2
node 1 line 2
</t>
<t tx="ekr.20101023195640.6037">@others
</t>
<t tx="ekr.20101023195640.6038">node 1 line 1
node 1 new line 1
node 1 new line 2
node 1 new line 3
node 1 line 2
</t>
<t tx="ekr.20101023204543.6042"></t>
<t tx="ekr.20101023204543.6043">@others
</t>
<t tx="ekr.20101023204543.6044">node 1 line 1
node 1 old line 1
node 1 old line 2
node 1 old line 3
node 1 old line 4
node 1 line 2
</t>
<t tx="ekr.20101023204543.6045">@others
</t>
<t tx="ekr.20101023204543.6046">node 1 line 1
node 1 new line 1
node 1 new line 2
node 1 line 2
</t>
<t tx="ekr.20101101034131.6042">@tabwidth -4
    # Required when running unit tests externally.

# Leo bug 603720
# Within the docstring we must change '\' to '\\'
s = '''\
def foo():
    s = \\
"""#!/bin/bash
cd /tmp
ls"""
    file('/tmp/script', 'w').write(s)

class bar:
    pass

foo()
'''

showTree = False

tree = c.importCommands.pythonUnitTest(p,s=s,showTree=showTree)

if showTree:
    c.redraw_now()
    foo = g.findNodeInTree(c,p,'foo')
    assert foo
    s = "file('/tmp/script', 'w').write(s)"
    print('foo.b',repr(foo.b))
    assert foo.b.find(s) &gt; -1,"foo.b: %s" % foo.b
</t>
<t tx="ekr.20101220161557.6013"># Some of these tests give warnings.</t>
<t tx="ekr.20101220161557.6016"></t>
<t tx="ekr.20110118082508.3729"></t>
<t tx="ekr.20110118082508.3730"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3745">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3746">Honor this line that has a hanging indentation, please.  Hanging
  indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3747">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3748"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3754">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3755">Honor this line that has
  a hanging indentation, please.  Hanging
    indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3756">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3757"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3763">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3764">Honor this line that 
  has a hanging indentation, 
  please.  Hanging
   indentation is valuable
    for lists of all kinds.  But 
    it is tricky to get right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3765">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3766"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3772">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3773">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3779"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3780">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3781">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3782">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3787"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3788">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3789">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3790">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3792">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3793"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3799">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3800">This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3803">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3808"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3809">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3810">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3811">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3816"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3817">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3818">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3819">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3824"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3825">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3826">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3827">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3832"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20110118082508.3833">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110118082508.3834">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3835">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110502130500.3471">aList = [z for z in p.unique_nodes()]
assert len(aList) == 3,len(aList)
v1,v2,v3 = aList
assert v1.h == p.h,p.h
assert v2.h == 'node 1',v2.h
assert v3.h == 'node 2',v3.h
</t>
<t tx="ekr.20110502130500.3472"># Node 1
</t>
<t tx="ekr.20110502130500.3473"># node 3
</t>
<t tx="ekr.20110509104953.3474">table = (
    ( 50,'c.'),
    (  3,'p.ins'),
    ( 20,'g.print'),
)

ac = c.k.autoCompleter
ac.w = c.frame.body.wrapper

for expected,prefix in table:
    
    aList = ac.get_leo_completions(prefix)
    assert len(aList) &gt;= expected,'len(aList): %s, prefix: %s' % (len(aList),prefix)
    
    if 0:
        print()
        for z in aList:
            print(z)
</t>
<t tx="ekr.20110510054817.3475">c.alert('test of c.alert')
</t>
<t tx="ekr.20110510054817.3476">g.alert(c,'test of g.alert')
</t>
<t tx="ekr.20110521073115.3486">@language python

p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20110521073115.3490">@language cython

by cdef cimport cpdef ctypedef enum except?
extern gil include nogil property public
readonly struct union DEF IF ELIF ELSE
                    
NULL bint char dict double float int list
long object Py_ssize_t short size_t void

try:
    pass
except Exception:
    pass

</t>
<t tx="ekr.20110521073115.3494"></t>
<t tx="ekr.20110521073115.3495">builtins, including cython builtins
</t>
<t tx="ekr.20110521073115.3496">cython keywords
</t>
<t tx="ekr.20110524091618.3488">at = c.atFileCommands

# A mininimal test.

at.startSentinelComment = '&lt;!--'
at.endSentinelComment = '--&gt;'

s1 = '&lt;!--\nline 2.\n--&gt;\n'
s2 = at.massageAtDocPart(s1)

assert s2 == 'line 2.\n',repr(s2)
</t>
<t tx="ekr.20110524120515.3489">c.testManager.runAtFileTest(p)
</t>
<t tx="ekr.20110524120515.3490"># before

@raw

@c

&lt;&lt; ref &gt;&gt;

@end_raw

#after
</t>
<t tx="ekr.20110524120515.3491">#@+leo-ver=5
#@+node:#@file
# before

#@@raw

@c

&lt;&lt; ref &gt;&gt;

#@@end_raw

#after
#@-leo
</t>
<t tx="ekr.20110529215703.3494">p = c.p.firstChild()

c.selectPosition(p) # Sets body text.
val = c.frame.body.colorizer.colorize(p,incremental=False)
assert val=="ok", "colorizer test failed: %s" % p.h
</t>
<t tx="ekr.20110529215703.3495">@language scala

/* A comment */

object HelloWorld {
    def main(args: Array[String]) {
      println("Hello, world!")
    }
  }
</t>
<t tx="ekr.20110608135658.3377"></t>
<t tx="ekr.20110608162543.3363"># cc will be None when unit tests run dynamically.
cc = c.chapterController
if cc and not g.app.isExternalUnitTest:
    chaptersNode = cc.findChaptersNode()
    assert chaptersNode
    chapterNode = (
        cc.findChapterNode('aaa') or
        cc.createChapterByName('aaa',p=None))
    cc.selectChapterByName('aaa',chaptersNode)
    cc.removeChapterByName('aaa')
    c.undoer.undo()
    assert cc.findChapterNode('aaa')
    cc.selectChapterByName('main',collapse=True)
</t>
<t tx="ekr.20110608162543.3365"># cc will be None when unit tests run dynamically.
cc = c.chapterController
if cc and not g.app.isExternalUnitTest:
    chaptersNode = cc.findChaptersNode()
    assert chaptersNode
    chapterNode = (
        cc.findChapterNode('aaa') or
        cc.createChapterByName('aaa',p=None))
    try:
        cc.selectChapterByName('aaa',chaptersNode)
        cc.renameChapterByName('bbb')
        cc.selectChapterByName('bbb',chaptersNode)
        cc.renameChapterByName('aaa')
        assert cc.findChapterNode('aaa'),'after undo'
    finally:
        cc.selectChapterByName('main',collapse=True)
</t>
<t tx="ekr.20110608181936.3368"># cc will be None when unit tests run dynamically.
cc = c.chapterController
if cc and not g.app.isExternalUnitTest:
    chaptersNode = cc.findChaptersNode()
    assert chaptersNode,'fail 0'
    chapterNode = (
        cc.findChapterNode('aaa') or
        cc.createChapterByName('aaa',p=None))
    table = (
        ('node a',cc.moveNodeToChapterHelper),
        ('node b',cc.copyNodeToChapterHelper),
        ('node c',cc.cloneNodeToChapterHelper),
    )
    # Initialze 
    while p.hasChildren():
        p.firstChild().doDelete(newNode=None)
    for h,unused_f in table:
        p2 = p.insertAsLastChild()
        p2.h = h
        p2.b = '# %s' % h
    try:
        cc.selectChapterByName('aaa')
        for h,f in table:
            p2 = g.findNodeInTree(c,p,h)
            assert p2,'fail 1'
            c.selectPosition(p2) # All helpers work on c.p.
            f('aaa')
            assert g.findNodeInTree(c,chapterNode,h),'fail 2'
        assert not g.findNodeInTree(c,p,'node a')
        assert g.findNodeInTree(c,p,'node b')
        assert g.findNodeInTree(c,p,'node c')
    finally:
        if 1: # Restore the tree so activeUnitTests.txt does not change.
            while p.hasChildren():
                p.firstChild().doDelete(newNode=None)
            for h,f in table:
                # if not g.findNodeInTree(c,p,h):
                    # p2 = p.insertAsLastChild()
                    # p2.h = h
                    # p2.b = '# %s' % h
                p3 = g.findNodeInTree(c,chapterNode,h)
                if p3: p3.doDelete()
        cc.selectChapterByName('main',collapse=True)
        c.redraw()
</t>
<t tx="ekr.20110610122533.3369"></t>
<t tx="ekr.20110610122533.3388"></t>
<t tx="ekr.20110610122533.3389"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    root = p.parent().parent()
    h = '@auto unittest/at-auto-line-number-test.py'
    target = g.findNodeAnywhere(c,h)
    assert target,'no @auto node'
    
    p,n,found = c.GoToLineNumber(c).countLines(target,2)
    assert found,'not found'
    assert n == 1,'n: %s' % (n)
    assert p.h == 'at_auto_child',p.h
</t>
<t tx="ekr.20110610122533.3390"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    h = '@auto unittest/at-auto-line-number-test.py'
    root = g.findNodeAnywhere(c,h)
    assert root,'no root'
    p,n,found = c.GoToLineNumber(c).countLines(root,20)
    assert not found,'not found'
</t>
<t tx="ekr.20110610122533.3391"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    h = '@auto unittest/at-auto-line-number-test.py'
    root1 = g.findNodeAnywhere(c,h)
    assert root1
    assert root1.isAnyAtFileNode()
    
    fileName,lines,n,root = c.GoToLineNumber(c).setup_file(n=3,p=root1)
    assert fileName == h[6:],'fileName: %s' % (fileName)
    assert root == root1,'root: %s, root1: %s' % (root and root.h,root1 and root1.h)
    
    if 0:
        print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
            root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3392"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    h = '@auto unittest/at-auto-line-number-test.py'
    root1 = g.findNodeAnywhere(c,h)
    assert root1
    assert root1.isAnyAtFileNode()
    
    scriptData = {'p':root1.copy(),'lines':['a','b','c']}
    fileName,lines2,p2,root2 = c.GoToLineNumber(c).setup_script(scriptData)
    
    assert fileName == h[6:],'fileName'
    assert lines2 == scriptData.get('lines'),'lines'
    assert p2 == root1,'p'
    assert root2 == root1,'root'
    
    if 0:
        print('root:%s, n:%s, len(lines): %s' % (
            root and root.h,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3393"></t>
<t tx="ekr.20110610122533.3394"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    root = p.parent().parent()
    h = '@file unittest/at-file-line-number-test.py'
    target = g.findNodeAnywhere(c,h)
    assert target,'no target'
    
    gnx = g.app.nodeIndices.toString(target.v.fileIndex)
    assert gnx,'no gnx'
    
    delim = '#'
    found = c.GoToLineNumber(c).findGnx(delim,root,gnx,h)
    assert found,'not found'
</t>
<t tx="ekr.20110610122533.3395"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    root = p.parent().parent()
    h = '@file unittest/at-file-line-number-test.py'
    target = g.findNodeAnywhere(c,h)
    assert target,'no target'
    
    n = 2
    fileName,lines,n,root = c.GoToLineNumber(c).setup_file(n,p=target)
    assert fileName == h[6:]
    # print('lines\n%s' % g.listToString(lines))
    assert root == target
    
    ignoreSentinels = True
    vnodeName,gnx,offset,delim = c.GoToLineNumber(c).findVnode(root,lines,n,ignoreSentinels)
    
    assert lines,'no lines'
    assert offset is not None,repr(offset)
    assert vnodeName,repr(vnodeName)
</t>
<t tx="ekr.20110610122533.3396"></t>
<t tx="ekr.20110610122533.3397"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    h = '@shadow unittest/at-shadow-line-number-test.py'
    root1 = g.findNodeAnywhere(c,h)
    assert root1
    assert root1.isAnyAtFileNode()
    
    fileName,lines,n,root2 = c.GoToLineNumber(c).setup_file(n=6,p=root1)
    assert fileName == h[8:],'fileName'
    assert root2 == root1
    
    if 0:
        print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
            root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3398"></t>
<t tx="ekr.20110610122533.3399"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    h = '@nosent unittest/at-nosent-line-number-test.py'
    root1 = g.findNodeAnywhere(c,h)
    assert root1
    assert root1.isAnyAtFileNode()
    
    fileName,lines,n,root2 = c.GoToLineNumber(c).setup_file(n=6,p=root1)
    assert fileName == h[8:],'fileName'
    assert root2 == root1
    
    if 0:
        print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
            root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3401"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    root = p.parent().parent()
    h = '@auto unittest/at-auto-line-number-test.py'
    target = g.findNodeAnywhere(c,h)
    assert target,'no target'
    child = target.firstChild()
    assert child.h == 'at_auto_child','child.h'
    
    p,found = c.GoToLineNumber(c).findRoot(child)
    
    assert p == target,'p' #p and p.h
    assert found,'not found'
</t>
<t tx="ekr.20110610122533.3404">c.GoToLineNumber(c).showResults(
    found=False,p=p,n=3,n2=3,lines=['a','b'])



</t>
<t tx="ekr.20110610122533.3405"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20110610122533.3406"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:

    fn = '../test/at-auto-unit-test.py'
    root = g.findNodeAnywhere(c,'@auto %s' % (fn))
    assert root,'no root'
    
    child1 = root.firstChild()
    assert child1,'no child1'
    grand11 = child1.firstChild()
    assert grand11,'no grand11'
    grand12 = grand11.next()
    assert grand12,'no grand12'
    
    child2 = child1.next()
    assert child2,'no child2'
    grand21 = child2.firstChild()
    assert grand21,'no grand21'
    grand22 = grand21.next()
    assert grand22,'no grand22'
    
    def oops(found,p2,node,n,n2):
        result = [' ']
        result.append('goto-global-line test failed at line %s' % (n))
        if not found:
            result.append('line %s not found',n)
        else:
            result.append('got node "%s", expected "%s"' % (p2.h,node.h))
            result.append('got offset %s, expected %s' % (n2,n))
        return '\n'.join(result)
    
    table = (
        # Use 1-based numbers externally.
        # countLines converts to zero-based numbers.
        (1, child1,  0),
        (2, grand11, 0),
        (3, grand11, 1),
        (4, grand12, 0),
        (5, grand12, 1),
        (6, child1,  2),
        (7, child2,  0),
        (8, grand21, 0),
        (9, grand21, 1),
        (10,grand22, 0),
        (11,grand22, 1),
        (12,root,    3),
    )
    
    # Test against actual lines of the file.
    path = g.os_path_finalize_join(g.app.loadDir,'..','test',fn)
    f = open(path,'r') ; s = f.read() ; f.close()
    lines = g.splitLines(s) # The lines from the file.
    for n,node,index in table:
        goto = c.GoToLineNumber(c)
        p2,n2,found = goto.countLines(root,n)
            # n, the argument to countLines, is 1-based
            # n2, the returned index into p2.b, is zero-based
        n -= 1
            # Convert n to zero-based for the comparisons below.
        lines2 = g.splitLines(p2.b)
        if 0:
            print('%2d %s' % (n,repr(lines[n])))
        else:
            ok = lines2[n2].lstrip() == lines[n].lstrip() 
            if not ok:
                i = 0
                for z in lines:
                    print('%2d %s' % (i,repr(z)))
                    i += 1
            if not ok:
                print('at line %s, index %s, node %s\ngot line %s\nexpected %s' % (
                    n,n2,p2.h,repr(lines2[n2].lstrip()),repr(lines[n].lstrip())))
            assert ok
</t>
<t tx="ekr.20110612064437.3310">val = g.guessExternalEditor(c)
assert val,'no val' # This can be different on different platforms.
</t>
<t tx="ekr.20110615130436.3317">@language rest

This file is part of a unit test that ensures that orphan bits are retained when
writing .leo files.

The path is **supposed** not to exist.
</t>
<t tx="ekr.20110615130436.3318">Child content goes here.</t>
<t tx="ekr.20110615130436.3319"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    # Writing a .leo file must retain orphan bits of erroneous external files.
    
    h = '@file nonexistent-directory/orphan-bit-test.txt'
    p2 = g.findNodeAnywhere(c,h)
    assert p2,'not found: %s' % (h)
    assert p2.isOrphan(),'not an orphan originally'
    
    # It's dangerous to do the write, but this does test the bug fix.
    c.atFileCommands.clearAllOrphanBits(p2)
    assert p2.isOrphan(),'not an orphan after calling at.clearAllOrphanBits'
</t>
<t tx="ekr.20111003145300.3466">'''Test that dragging this node onto the child node generates a warning.'''

fn = '&lt;file name&gt;'
p2 = p.firstChild()
tree = c.frame.tree
if hasattr(tree,'treeWidget'):
    for cloneDrag in (True,False):
        tree.treeWidget.intraFileDrop(cloneDrag,fn,p,p2)
        assert True==g.app.unitTestDict['checkMoveWithParentWithWarning']
</t>
<t tx="ekr.20111003145300.3467"></t>
<t tx="ekr.20111006064419.3491">if not g.app.isExternalUnitTest:
    
    # Not valid when run externally.

    exec(g.findTestScript(c,'@common x-marked-nodes test code'))
    
    def test(p):
        setup_test(p)
        c.deleteMarked()
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
        c.undoer.undo()
        n = p.numberOfChildren()
        assert n == 4,'undo: children: %s' % (n)
        c.undoer.redo()
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
    try:
        test(p)
    finally:
        tear_down(p)
</t>
<t tx="ekr.20111006064419.3493">if not g.app.isExternalUnitTest:

    exec(g.findTestScript(c,'@common x-marked-nodes test code'))
    
    def test(p):
        setup_test(p)
        c.moveMarked()
        root = c.rootPosition()
        assert root.h == 'Moved marked nodes',root.h
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
        c.undoer.undo()
        n = p.numberOfChildren()
        assert n == 4,'undo: children: %s' % (n)
        c.undoer.redo()
        n = p.numberOfChildren()
        assert n == 2 ,'delete: children: %s' % (n)
    
    try:
        test(p)
    finally:
        tear_down(p,'Moved marked nodes')
</t>
<t tx="ekr.20111006105711.3544">if not g.app.isExternalUnitTest:
    
    # Not valid when run externally.

    exec(g.findTestScript(c,'@common x-marked-nodes test code'))
    
    def test(p):
        setup_test(p)
        c.cloneMarked()
        h = 'Clones of marked nodes'
        assert c.p.h == h,c.p.h
        c.undoer.undo()
        assert not g.findNodeAnywhere(c,h)
        c.undoer.redo()
        assert c.p.h == h,c.p.h
    try:
        test(p)
    finally:
        tear_down(p,'Clones of marked nodes')
</t>
<t tx="ekr.20111018163546.3690">s1 = 'no docstring'
s2 = '''
# comment
"""docstring2."""
'''
s3 = '''
"""docstring3."""
\'\'\'docstring2.\'\'\'
'''

table = (
    (s1,''),
    (s2,'docstring2.'),
    (s3,'docstring3.'),
)

for s,result in table:
    s2 = g.getDocString(s)
    assert s2 == result,'Expected %s, got %s' % (repr(result),repr(s2))
</t>
<t tx="ekr.20111021115306.3696"># Not valid for external tests: uses @&lt;file&gt; node.
if not g.app.isExternalUnitTest:
    
    p = g.findNodeAnywhere(c,"@file ../test/unittest/tex-error.tex")
    assert(p)
    
    s1 = r"""\begin{document}
&lt;&lt; Document """
    
    s2 = r"""&gt;&gt;
% hidden comment
\end{document}
"""
    
    s = s1 + s2
    s = g.adjustTripleString(s,c.tab_width)
    
    # print(repr(s))
    # print(repr(p.b))
    assert p.b == s
</t>
<t tx="ekr.20111026105935.3966">s = '''\
&lt;nodeA&gt;
&lt;nodeB/&gt;
&lt;/nodeA&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.xmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111026111009.3972"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20111029112647.4099"></t>
<t tx="ekr.20111029112647.4101">s = '''\
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/head&gt;
&lt;body class='bodystring'&gt;
&lt;div id='bodydisplay'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111029120441.3982">s = '''\
&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;title&gt;Bodystring&lt;/title&gt;
&lt;/HEAD&gt;
&lt;BODY class='bodystring'&gt;
&lt;DIV id='bodydisplay'&gt;&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111102122424.3975">if c.shortFileName() == 'dynamicUnitTest.leo':
    
    setting = 'c.write_script_file'
    assert c.write_script_file is True,'fail1: %s should be hard set' % (setting)
    
else:
    setting = "c.config.getBool('write_script_file')"
    assert c.write_script_file is True,'fail2: check %s' % (setting)
</t>
<t tx="ekr.20111102164107.3975">s = '''\

&lt;td width="550"&gt;
&lt;table cellspacing="0" cellpadding="0" width="600" border="0"&gt;
    &lt;td class="blutopgrabot" height="28"&gt;&lt;/td&gt;
    
    &lt;!-- The indentation of this element causes the problem. --&gt;
    &lt;table&gt;
    
&lt;!--
&lt;div align="center"&gt;
&lt;iframe src="http://www.amex.com/atamex/regulation/listingStatus/index.jsp"&lt;/iframe&gt;
&lt;/div&gt;
--&gt;

&lt;/table&gt;
&lt;/table&gt;

&lt;p&gt;Paragraph&lt;/p&gt;
&lt;/td&gt;

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111103213154.3823">@first # -*- coding: utf-8 -*-
@encoding utf-8

'''Test the interface between docutils and leo_pdf.py.
No file is written.
'''

try:
    import docutils
    import reportlab.platypus
except ImportError:
    # print('skipping test')
    docutils = None

if docutils:
    path = g.os_path_finalize_join(g.app.loadDir,'..','plugins')
    module = g.importFromPath(
        moduleName='leo_pdf',
        path=path,
        verbose = False)

    assert module
    s = '''This is a test.'''
    result = c.rstCommands.writeToDocutils(s,'.pdf')
    # print(result)
    assert result,result
elif 0:
    print('no docutils')
</t>
<t tx="ekr.20111103213154.3824">'''Make sure that trying to import a non-existent file does not crash g.importFromPath.'''

path = g.os_path_finalize_join(g.app.loadDir,'does_not_exist')
assert not g.os_path_exists(path)
module = g.importFromPath ('xyz',path,verbose=False)
assert not module,repr(module)
</t>
<t tx="ekr.20111104112332.3953">import os

path1 = r'C:\Python32\Lib\site-packages\leo-editor\leo\core'
path2 = r'\N:Home\PTC_Creo\Creo.wmv'
path3 = r'N:\Home\PTC_Creo\Creo.wmv'

path12 = os.path.join(path1,path2)
path13 = os.path.join(path1,path3)

if 0:

    print(path12,g.os.path.abspath(path12))
    print(path13,g.os.path.abspath(path13))
</t>
<t tx="ekr.20111104112332.3954">import leo.plugins.importers.html as html
ic = c.importCommands
hs = html.HtmlScanner(importCommands=ic,atAuto=True)

s = '''
&lt;aTag&gt;  @others
&lt;/aTag&gt;
'''

# Avoid probems with representation of @others in scripts.
expected = '\n&lt;aTag&gt;\n@others\n&lt;/aTag&gt;\n'

result = hs.adjust_class_ref(s)
assert result == expected,'expected...\n%s\ngot...\n%s' % (
    repr(expected),repr(result))
</t>
<t tx="ekr.20111104112332.3955">import leo.plugins.importers.html as html
ic = c.importCommands
scanner = html.HtmlScanner(importCommands=ic,atAuto=True)
tails = (
    '&lt;whatever&gt;',
    '+ abc', # don't concatenate with id or whitespace.
    '&lt;!-- tail comment --&gt;',
    '"tail string"',
) 
table = (
    (scanner.skipCommentToken,  '&lt;!-- Test --&gt;'),
    (scanner.skipIdToken,       'a_b-c.d:e'), # Valid in xml ids:  ".-:"
    # (scanner.skipNewlineToken,'\n'),
        # xmlScanner.skipNewlineToken throws exception (on purpose).
    (scanner.skipOtherToken,    '+'),
    (scanner.skipOtherToken,    '#'),
    (scanner.skipStringToken,   '"A string"'),
    (scanner.skipWsToken,       ' '),
)

# Special test for whitespace: Converts all runs of whitespace to a single blank.
if 0: # No longer does this.
    s = ' \n\t\t \n'
    i,result = scanner.skipWsToken(s+tails[0],0)
    assert i == len(s),'expected i==%s, got i==%s' % (len(s),i)
    expected = ' '
    assert result == expected,'expected...\n%s\ngot...\n%s' % (
        repr(expected),repr(result))
    
for f,s in table:
    for tail in tails:
        i,result = f(s+tail,0)
        expected = s
        assert i == len(s),'expected i==%s, got i==%s' % (len(s),i)
        assert result == expected,'expected...\n%s\ngot...\n%s' % (
            repr(expected),repr(result))
</t>
<t tx="ekr.20111104112332.3956">import leo.plugins.importers.python as python
ic = c.importCommands
scanner = python.PythonScanner(importCommands=ic,atAuto=True)
tails = (
    '+ abc', # don't concatenate with id or whitespace.
    '# tail comment',
    '"tail string"',
    "'tail string'",
)
table = (
    (scanner.skipCommentToken,  '# Test'),
    (scanner.skipIdToken,       'ab_c'),
    (scanner.skipNewlineToken,  '\n'),
    (scanner.skipOtherToken,    '+'),
    (scanner.skipOtherToken,    '#'),
    (scanner.skipStringToken,   '"A string"'),
    (scanner.skipWsToken,       ' '),
    (scanner.skipWsToken,       '\t '),
)
    
for f,s in table:
    for tail in tails:
        if f.__name__ == 'skipCommentToken':
            i,result = f(s,0)
        else:
            i,result = f(s+tail,0)
        expected = s
        assert i == len(s),'expected i==%s, got i==%s' % (len(s),i)
        assert result == expected,'expected...\n%s\ngot...\n%s' % (
            repr(expected),repr(result))
</t>
<t tx="ekr.20111104114406.3833">import leo.plugins.importers.html as html
ic = c.importCommands
hs = html.HtmlScanner(importCommands=ic,atAuto=True)
s = '''
&lt;!-- a comment --&gt;
&lt;html "string"&gt;
Test.
&lt;/html&gt;
'''
&lt;&lt; define expected &gt;&gt;
result = hs.tokenize(s)
if 1:
    assert result == expected,'expected...\n%s\ngot...\n%s' % (
        repr(expected),repr(result))
else:
    print(result)
    
@
AssertionError: expected...
[('ws', ' ', 0), ('comment', '&lt;!-- a comment --&gt;', 1), ('ws', ' ', 1), ('other', '&lt;', 2), ('id', 'html', 2), ('ws', ' ',
 2), ('string', '"string"', 2), ('other', '&gt;', 2), ('ws', ' ', 2), ('id', 'Test.', 3), ('ws', ' ', 3), ('other', '&lt;', 4)
, ('other', '/', 4), ('id', 'html', 4), ('other', '&gt;', 4), ('ws', ' ', 4)]
got...
[('nl', '\n', 0), ('comment', '&lt;!-- a comment --&gt;', 1), ('nl', '\n', 1), ('other', '&lt;', 2), ('id', 'html', 2), ('ws', '
', 2), ('string', '"string"', 2), ('other', '&gt;', 2), ('nl', '\n', 2), ('id', 'Test.', 3), ('nl', '\n', 3), ('other', '&lt;'
, 4), ('other', '/', 4), ('id', 'html', 4), ('other', '&gt;', 4), ('nl', '\n', 4)]

----------------------------------------------------------------------
Ran 1 test in 0.018s

FAILED (failures=1)

</t>
<t tx="ekr.20111104114406.3834"># expected = [
    # ('ws', ' ', 0),
    # ('comment', '&lt;!-- a comment --&gt;', 1),
    # ('ws', ' ', 1),
    # ('other', '&lt;', 2), ('id', 'html', 2),
    # ('ws', ' ',2), ('string', '"string"', 2),
    # ('other', '&gt;', 2),
    # ('ws', ' ', 2),
    # ('id', 'Test.', 3),
    # ('ws', ' ', 3),
    # ('other', '&lt;', 4), ('other', '/', 4), ('id', 'html', 4), ('other', '&gt;', 4),
    # ('ws', ' ', 4),
# ]

expected = [
    ('nl', '\n', 0),
    ('comment', '&lt;!-- a comment --&gt;', 1),
    ('nl', '\n', 1),
    ('other', '&lt;', 2),
    ('id', 'html', 2),
    ('ws', ' ', 2),
    ('string', '"string"', 2),
    ('other', '&gt;', 2),
    ('nl', '\n', 2),
    ('id', 'Test.', 3),
    ('nl', '\n', 3),
    ('other', '&lt;', 4),
    ('other', '/', 4),
    ('id', 'html', 4),
    ('other', '&gt;', 4),
    ('nl', '\n', 4),
]
</t>
<t tx="ekr.20111104171708.3843">cpp = c.CPrettyPrinter(c)
fn = 'c tokenize test'
p2 = g.findNodeInTree(c,p,fn)
assert p2,'not found: %s' % (fn)

if 1: # test of indent.
    # import os ; os.system('cls')
    cpp.indent(p2)

if 0: # test of tokenize.
    aList = cpp.tokenize(p2.b)
    assert(p2.b == ''.join(aList))
    if 0:
        import os ; os.system('cls')
        print('*' * 40)
        # print(''.join(aList))
        for z in aList:
            print(repr(z))
</t>
<t tx="ekr.20111104171708.3844">@language c

static exit_values_ty indent_main_loop(void)
{
    codes_ty         hd_type         = code_eof;
    char           * t_ptr           = NULL;
    codes_ty         type_code       = start_token;
    exit_values_ty   file_exit_value = total_success;
    int              dec_ind         = 0; /* current indentation for declarations */

    BOOLEAN          scase           = false; /* true when we've just see a "case";
                                               * determines what to do with the
                                               * following colon */
    BOOLEAN          flushed_nl;              /* Used when buffering up comments to remember that
                                               * a newline was passed over */
    BOOLEAN          sp_sw           = false; /* true when in the expression part of if(...),
                                               * while(...), etc. */
    BOOLEAN          force_nl        = false;

    /* last_token_ends_sp: True if we have just encountered the end of an if (...),
     * etc. (i.e. the ')' of the if (...) was the last token).  The variable is
     * set to 2 in the middle of the main token reading loop and is decremented
     * at the beginning of the loop, so it will reach zero when the second token
     * after the ')' is read.
     */

    BOOLEAN          last_token_ends_sp = false;

    BOOLEAN          last_else = false; /* true if last keyword was an else */

    for (;;)
    {
        /* this is the main loop.  it will go until
         * we reach eof */

        BOOLEAN is_procname_definition;
        bb_code_ty can_break;

        if (type_code != newline)
        {
            can_break = parser_state_tos-&gt;can_break;
        }

        parser_state_tos-&gt;last_saw_nl = false;
        parser_state_tos-&gt;can_break = bb_none;

        type_code = lexi ();    /* lexi reads one token.  "token" points to
                                 * the actual characters. lexi returns a code
                                 * indicating the type of token */

        /* If the last time around we output an identifier or
         * a paren, then consider breaking the line here if it's
         * too long.
         *
         * A similar check is performed at the end of the loop, after
         * we've put the token on the line. */

        if ((settings.max_col &gt; 0) &amp;&amp;
            (buf_break != NULL) &amp;&amp;
            ( ( (parser_state_tos-&gt;last_token == ident) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                (type_code != newline) &amp;&amp;
                (type_code != form_feed) &amp;&amp;
                (type_code != rparen) &amp;&amp;
                (type_code != struct_delim)) ||
              ( (parser_state_tos-&gt;last_token == rparen) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != rparen) ) ) &amp;&amp;
            (output_line_length () &gt; settings.max_col))
        {
            break_line = 1;
        }

        if (last_token_ends_sp &gt; 0)
        {
            last_token_ends_sp--;
        }

        is_procname_definition =
                (((parser_state_tos-&gt;procname[0] != '\0') &amp;&amp;
                  parser_state_tos-&gt;in_parameter_declaration) ||
                 (parser_state_tos-&gt;classname[0] != '\0'));

        /* The following code moves everything following an if (), while (),
         * else, etc. up to the start of the following stmt to a buffer. This
         * allows proper handling of both kinds of brace placement.
         */

        flushed_nl = false;

        if (!search_brace(&amp;type_code, &amp;force_nl, &amp;flushed_nl, &amp;last_else, &amp;is_procname_definition))
        {
            /* Hit EOF unexpectedly in comment. */
            return indent_punt;
        }
        
        if (type_code == code_eof)
        {
            /* we got eof */
            if (s_lab != e_lab || s_code != e_code || s_com != e_com)   /* must dump end of line */
            {
                dump_line(true, &amp;paren_target);
            }

            if (parser_state_tos-&gt;tos &gt; 1)      /* check for balanced braces */
            {
                ERROR (_("Unexpected end of file"), 0, 0);
                file_exit_value = indent_error;
            }

            if (settings.verbose)
            {
                printf (_("There were %d non-blank output lines and %d comments\n"),
                        (int) out_lines, (int) com_lines);
                if (com_lines &gt; 0 &amp;&amp; code_lines &gt; 0)
                {
                    printf (_("(Lines with comments)/(Lines with code): %6.3f\n"),
                            (1.0 * com_lines) / code_lines);
                }
            }
            flush_output ();

            return file_exit_value;                                              /* RETURN */
        }

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            if (force_nl &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                ( (type_code != lbrace) ||
                  (!parser_state_tos-&gt;in_decl &amp;&amp; !settings.btype_2) ||
                  (parser_state_tos-&gt;in_decl &amp;&amp; !settings.braces_on_struct_decl_line) ||
                  (parser_state_tos-&gt;last_token == rbrace)))
            {
                if (settings.verbose &amp;&amp; !flushed_nl)
                {
                    WARNING (_("Line broken 2"), 0, 0);
                }

                flushed_nl = false;
                dump_line(true, &amp;paren_target);
                parser_state_tos-&gt;want_blank = false;
                force_nl = false;
            }

            parser_state_tos-&gt;in_stmt = true;   /* turn on flag which causes
                                                 * an extra level of
                                                 * indentation. this is
                                                 * turned off by a ; or } */
            if (s_com != e_com)
            {
                /* the code has an embedded comment in the
                 * line. Move it from the com buffer to the
                 * code buffer.
                 *
                 * Do not add a space before the comment if it is the first
                 * thing on the line.
                 */

                if (e_code != s_code)
                {
                    set_buf_break (bb_embedded_comment_start, paren_target);
                    *e_code++ = ' ';
                    embedded_comment_on_line = 2;
                }
                else
                {
                    embedded_comment_on_line = 1;
                }

                for (t_ptr = s_com; *t_ptr; ++t_ptr)
                {
                    check_code_size();
                    *e_code++ = *t_ptr;
                }

                set_buf_break (bb_embedded_comment_end, paren_target);
                *e_code++ = ' ';
                *e_code = '\0'; /* null terminate code sect */
                parser_state_tos-&gt;want_blank = false;
                e_com = s_com;
            }
        }
        else if ((type_code != comment) &amp;&amp;
                 (type_code != cplus_comment) &amp;&amp;
                 !(settings.break_function_decl_args &amp;&amp;
                   (parser_state_tos-&gt;last_token == comma)) &amp;&amp;
                 !( (parser_state_tos-&gt;last_token == comma) &amp;&amp;
                    !settings.leave_comma))
        {
            /* preserve force_nl thru a comment but
             * cancel forced newline after newline, form feed, etc.
             * however, don't cancel if last thing seen was comma-newline
             * and -bc flag is on. */

            force_nl = false;
        }

        /* Main switch on type of token scanned */

        check_code_size();
        
        /* now, decide what to do with the token */

        handle_the_token(type_code, &amp;scase, &amp;force_nl, &amp;sp_sw, &amp;flushed_nl,
                         &amp;hd_type, &amp;dec_ind, &amp;last_token_ends_sp, &amp;file_exit_value,
                         can_break, &amp;last_else, is_procname_definition);
        
        *e_code = '\0';         /* make sure code section is null terminated */

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            parser_state_tos-&gt;last_token = type_code;
        }

        /* Now that we've put the token on the line (in most cases),
         * consider breaking the line because it's too long.
         *
         * Don't consider the cases of `unary_op', newlines,
         * declaration types (int, etc.), if, while, for,
         * identifiers (handled at the beginning of the loop),
         * periods, or preprocessor commands. */

        if ((settings.max_col &gt; 0) &amp;&amp; (buf_break != NULL))
        {
            if ( ( (type_code == binary_op) ||
                   (type_code == postop) ||
                   (type_code == question) ||
                   ((type_code == colon) &amp;&amp; (scase || (squest &lt;= 0))) ||
                   (type_code == semicolon) ||
                   (type_code == sp_nparen) ||
                   (type_code == sp_else) ||
                   ((type_code == ident) &amp;&amp; (*token == '\"')) ||
                   (type_code == struct_delim) ||
                   (type_code == comma)) &amp;&amp;
                 (output_line_length () &gt; settings.max_col))
            {
                break_line = 1;
            }
        }
    }                           /* end of main infinite loop */
}
</t>
<t tx="ekr.20111104171708.3847">cpp = c.CPrettyPrinter(c)
c2p = c.editCommands.C_To_Python(c)
fn = 'c tokenize test'
p2 = g.findNodeInTree(c,p,fn)
assert p2,'not found: %s' % (fn)
aList = cpp.tokenize(p2.b)
c2p.convertCodeList(aList)
s = ''.join(aList)
</t>
<t tx="ekr.20111104171708.3848">@language c

static exit_values_ty indent_main_loop(void)
{
    codes_ty         hd_type         = code_eof;
    char           * t_ptr           = NULL;
    codes_ty         type_code       = start_token;
    exit_values_ty   file_exit_value = total_success;
    int              dec_ind         = 0; /* current indentation for declarations */

    BOOLEAN          scase           = false; /* true when we've just see a "case";
                                               * determines what to do with the
                                               * following colon */
    BOOLEAN          flushed_nl;              /* Used when buffering up comments to remember that
                                               * a newline was passed over */
    BOOLEAN          sp_sw           = false; /* true when in the expression part of if(...),
                                               * while(...), etc. */
    BOOLEAN          force_nl        = false;

    /* last_token_ends_sp: True if we have just encountered the end of an if (...),
     * etc. (i.e. the ')' of the if (...) was the last token).  The variable is
     * set to 2 in the middle of the main token reading loop and is decremented
     * at the beginning of the loop, so it will reach zero when the second token
     * after the ')' is read.
     */

    BOOLEAN          last_token_ends_sp = false;

    BOOLEAN          last_else = false; /* true if last keyword was an else */

    for (;;)
    {
        /* this is the main loop.  it will go until
         * we reach eof */

        BOOLEAN is_procname_definition;
        bb_code_ty can_break;

        if (type_code != newline)
        {
            can_break = parser_state_tos-&gt;can_break;
        }

        parser_state_tos-&gt;last_saw_nl = false;
        parser_state_tos-&gt;can_break = bb_none;

        type_code = lexi ();    /* lexi reads one token.  "token" points to
                                 * the actual characters. lexi returns a code
                                 * indicating the type of token */

        /* If the last time around we output an identifier or
         * a paren, then consider breaking the line here if it's
         * too long.
         *
         * A similar check is performed at the end of the loop, after
         * we've put the token on the line. */

        if ((settings.max_col &gt; 0) &amp;&amp;
            (buf_break != NULL) &amp;&amp;
            ( ( (parser_state_tos-&gt;last_token == ident) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                (type_code != newline) &amp;&amp;
                (type_code != form_feed) &amp;&amp;
                (type_code != rparen) &amp;&amp;
                (type_code != struct_delim)) ||
              ( (parser_state_tos-&gt;last_token == rparen) &amp;&amp;
                (type_code != comma) &amp;&amp;
                (type_code != rparen) ) ) &amp;&amp;
            (output_line_length () &gt; settings.max_col))
        {
            break_line = 1;
        }

        if (last_token_ends_sp &gt; 0)
        {
            last_token_ends_sp--;
        }

        is_procname_definition =
                (((parser_state_tos-&gt;procname[0] != '\0') &amp;&amp;
                  parser_state_tos-&gt;in_parameter_declaration) ||
                 (parser_state_tos-&gt;classname[0] != '\0'));

        /* The following code moves everything following an if (), while (),
         * else, etc. up to the start of the following stmt to a buffer. This
         * allows proper handling of both kinds of brace placement.
         */

        flushed_nl = false;

        if (!search_brace(&amp;type_code, &amp;force_nl, &amp;flushed_nl, &amp;last_else, &amp;is_procname_definition))
        {
            /* Hit EOF unexpectedly in comment. */
            return indent_punt;
        }
        
        if (type_code == code_eof)
        {
            /* we got eof */
            if (s_lab != e_lab || s_code != e_code || s_com != e_com)   /* must dump end of line */
            {
                dump_line(true, &amp;paren_target);
            }

            if (parser_state_tos-&gt;tos &gt; 1)      /* check for balanced braces */
            {
                ERROR (_("Unexpected end of file"), 0, 0);
                file_exit_value = indent_error;
            }

            if (settings.verbose)
            {
                printf (_("There were %d non-blank output lines and %d comments\n"),
                        (int) out_lines, (int) com_lines);
                if (com_lines &gt; 0 &amp;&amp; code_lines &gt; 0)
                {
                    printf (_("(Lines with comments)/(Lines with code): %6.3f\n"),
                            (1.0 * com_lines) / code_lines);
                }
            }
            flush_output ();

            return file_exit_value;                                              /* RETURN */
        }

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            if (force_nl &amp;&amp;
                (type_code != semicolon) &amp;&amp;
                ( (type_code != lbrace) ||
                  (!parser_state_tos-&gt;in_decl &amp;&amp; !settings.btype_2) ||
                  (parser_state_tos-&gt;in_decl &amp;&amp; !settings.braces_on_struct_decl_line) ||
                  (parser_state_tos-&gt;last_token == rbrace)))
            {
                if (settings.verbose &amp;&amp; !flushed_nl)
                {
                    WARNING (_("Line broken 2"), 0, 0);
                }

                flushed_nl = false;
                dump_line(true, &amp;paren_target);
                parser_state_tos-&gt;want_blank = false;
                force_nl = false;
            }

            parser_state_tos-&gt;in_stmt = true;   /* turn on flag which causes
                                                 * an extra level of
                                                 * indentation. this is
                                                 * turned off by a ; or } */
            if (s_com != e_com)
            {
                /* the code has an embedded comment in the
                 * line. Move it from the com buffer to the
                 * code buffer.
                 *
                 * Do not add a space before the comment if it is the first
                 * thing on the line.
                 */

                if (e_code != s_code)
                {
                    set_buf_break (bb_embedded_comment_start, paren_target);
                    *e_code++ = ' ';
                    embedded_comment_on_line = 2;
                }
                else
                {
                    embedded_comment_on_line = 1;
                }

                for (t_ptr = s_com; *t_ptr; ++t_ptr)
                {
                    check_code_size();
                    *e_code++ = *t_ptr;
                }

                set_buf_break (bb_embedded_comment_end, paren_target);
                *e_code++ = ' ';
                *e_code = '\0'; /* null terminate code sect */
                parser_state_tos-&gt;want_blank = false;
                e_com = s_com;
            }
        }
        else if ((type_code != comment) &amp;&amp;
                 (type_code != cplus_comment) &amp;&amp;
                 !(settings.break_function_decl_args &amp;&amp;
                   (parser_state_tos-&gt;last_token == comma)) &amp;&amp;
                 !( (parser_state_tos-&gt;last_token == comma) &amp;&amp;
                    !settings.leave_comma))
        {
            /* preserve force_nl thru a comment but
             * cancel forced newline after newline, form feed, etc.
             * however, don't cancel if last thing seen was comma-newline
             * and -bc flag is on. */

            force_nl = false;
        }

        /* Main switch on type of token scanned */

        check_code_size();
        
        /* now, decide what to do with the token */

        handle_the_token(type_code, &amp;scase, &amp;force_nl, &amp;sp_sw, &amp;flushed_nl,
                         &amp;hd_type, &amp;dec_ind, &amp;last_token_ends_sp, &amp;file_exit_value,
                         can_break, &amp;last_else, is_procname_definition);
        
        *e_code = '\0';         /* make sure code section is null terminated */

        if ((type_code != comment) &amp;&amp;
            (type_code != cplus_comment) &amp;&amp;
            (type_code != newline) &amp;&amp;
            (type_code != preesc) &amp;&amp;
            (type_code != form_feed))
        {
            parser_state_tos-&gt;last_token = type_code;
        }

        /* Now that we've put the token on the line (in most cases),
         * consider breaking the line because it's too long.
         *
         * Don't consider the cases of `unary_op', newlines,
         * declaration types (int, etc.), if, while, for,
         * identifiers (handled at the beginning of the loop),
         * periods, or preprocessor commands. */

        if ((settings.max_col &gt; 0) &amp;&amp; (buf_break != NULL))
        {
            if ( ( (type_code == binary_op) ||
                   (type_code == postop) ||
                   (type_code == question) ||
                   ((type_code == colon) &amp;&amp; (scase || (squest &lt;= 0))) ||
                   (type_code == semicolon) ||
                   (type_code == sp_nparen) ||
                   (type_code == sp_else) ||
                   ((type_code == ident) &amp;&amp; (*token == '\"')) ||
                   (type_code == struct_delim) ||
                   (type_code == comma)) &amp;&amp;
                 (output_line_length () &gt; settings.max_col))
            {
                break_line = 1;
            }
        }
    }                           /* end of main infinite loop */
}
</t>
<t tx="ekr.20111105065243.3837"># Important: at present only the RstScanner sets ignoreBlankLines == True
import leo.plugins.importers.leo_rst as leo_rst
sc = leo_rst.RstScanner(importCommands=c.importCommands,atAuto=True)
assert sc.ignoreBlankLines,'fail0'
def strip(tokens):
    '''Remove the line number item from all tokens.'''
    return [(kind,val) for kind,val,n in tokens]
table = (
    ('a\n\nb',          'a\nb'),
    ('a\n \t\nb',       'a\nb'),
    ('a\n \n\t\n\n\nb', 'a\nb'),
    ('a\nb\n',          'a\nb\n'),
)
for s,expected in table:
    tokens = sc.tokenize(s)
    s2 = ''.join([val for (kind,val,n) in tokens])
    assert s == s2,'fail1\nexpected:\n%s\ngot:\n%s' % (
        repr(s),repr(s2))
    # A: Remove tokens for blank lines from tokens.
    tokens2 = sc.removeBlankLinesTokens(tokens)
    # B: Remove blank lines first, then tokenize.
    lines = g.splitLines(s)
    lines2 = [z for z in lines if z.strip()]
    s2 = ''.join(lines2)
    tokens3 = sc.tokenize(s2)
    if 0:
        for kind,val,n in tokens3:
            print('%3s %7s %s' % (n,kind,repr(val)))
    # A and B should give the same result: just like abstract algebra diagrams.
    if 0:
        if strip(tokens2) != strip(tokens3):
            sc.compareTokens(tokens2,tokens3,trace=True)
    assert strip(tokens2) == strip(tokens3),'fail2\nexpected:\n%s\ngot:\n%s' % (
        strip(tokens3),strip(tokens2))
    # C: Removing blank tokens from already-compressed tokens should have no effect.
    tokens4 = sc.removeBlankLinesTokens(tokens3)
    assert tokens4 == tokens3,'fail3'
</t>
<t tx="ekr.20111105124216.3840">setting = 'import_html_tags'
html_tags = ('body','head','html','table','xxx')

# When run externally, c.config.getData will return None.
existing_tags = c.config.getData(setting)
if not existing_tags:
    g.app.config.set(None,setting,'data',html_tags)
    tags = c.config.getData(setting)
    assert c.config.getData(setting) == html_tags
</t>
<t tx="ekr.20111105221757.3831">files = ('x.h','x.cpp')

while p.hasChildren():
    p.firstChild().doDelete()

try:
    current = c.importCommands.createImportParent(c.p,files)
    assert current
    assert current.h == 'x'
    assert p.firstChild() == current
finally:
    while p.hasChildren():
        p.firstChild().doDelete()
    c.redraw()
</t>
<t tx="ekr.20111105221757.3833">p1 = p.copy()

def found(p,result):
    return any([p.v == p2.v for p2 in result])

table = (('all',True,False),('marked',False,True))
try:
    p.setMarked()
    assert p.isMarked(),p
    for kind,all,marked in table:
        result = c.testManager.findAllUnitTestNodes(all,marked)
        assert found(p,result),(kind,len(result))
    assert p == p1,(p,p1)
finally:
    p1.clearMarked()
</t>
<t tx="ekr.20111107065245.3833"># The actual code contains the unit test.
# This test will have effect only when run locally.

if not g.app.isExternalUnitTest:
    d = g.app.unitTestDict
    tag = 'minimize-all'
    assert not d.get(tag)
    c.frame.minimizeAll()
    assert d.get(tag) is True
</t>
<t tx="ekr.20111107065530.3833"># The actual code contains the unit test.
# This test will have effect only when run locally.

if not g.app.isExternalUnitTest:

    d = g.app.unitTestDict
    tag = 'resize-to-screen'
    assert not d.get(tag)
    c.frame.resizeToScreen()
    assert d.get(tag) is True
</t>
<t tx="ekr.20111107102431.3849"># A good test, but we don't want this large a file included in the distro.

# fn = r'c:\recent\data4.html'
fn = r'c:\recent\data.html'

root = p.copy()

# Fails with more tags: a newline gets inserted between tags.

html_tags = ('body','head','html','table','xxx',)
setting = 'import_html_tags'

# Settings now work when run externally.
c.config.set(setting,'data',html_tags)
tags = c.config.getData(setting)
assert tags == html_tags,len(tags)

try:
    c.importCommands.importFilesCommand(files=[fn],treeType='@file')
finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete()
        c.redraw()
    assert not root.hasChildren()

fail = g.app.unitTestDict.get('fail')
assert not fail
</t>
<t tx="ekr.20111109143012.3839">@language html
    # Essential for the unit test.
    
# This part of the test file caused lots of problems.

s = '''

&lt;html&gt;

&lt;body&gt;

&lt;table id="0"&gt;
&lt;tr valign="top"&gt;
&lt;td width="619"&gt;
	&lt;table id="2"&gt;	&lt;tr valign="top"&gt;	&lt;td width="377"&gt;
		&lt;table id="3"&gt;
		&lt;tr&gt;
		&lt;td width="368"&gt;
			&lt;table id="4"&gt;

&lt;tbody id="5"&gt;

&lt;tr valign="top"&gt;
&lt;td width="550"&gt;
&lt;table id="6"&gt;

&lt;tbody id="6"&gt;
&lt;tr&gt;

&lt;td class="blutopgrabot"&gt;&lt;a href="href1"&gt;Listing Standards&lt;/a&gt; | &lt;a href="href2"&gt;Fees&lt;/a&gt; | &lt;strong&gt;Non-compliant Issuers&lt;/strong&gt; | &lt;a href="href3"&gt;Form 25 Filings&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;

&lt;/table&gt;

&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
&lt;td width="100%" colspan="2"&gt;


&lt;br /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;	
							&lt;/td&gt;
						&lt;/tr&gt;
						&lt;/table&gt;

	&lt;!-- View First part --&gt;	&lt;/td&gt;	&lt;td width="242"&gt;	&lt;!-- View Second part --&gt;

	&lt;!-- View Second part --&gt;	&lt;/td&gt;	&lt;/tr&gt;&lt;/table&gt;										


&lt;DIV class="webonly"&gt;

&lt;script src="/scripts/footer.js"&gt;&lt;/script&gt;
	
&lt;/DIV&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;script language="JavaScript1.1"&gt;var SA_ID="nyse;nyse";&lt;/script&gt;
&lt;script language="JavaScript1.1" src="/scripts/stats/track.js"&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;img src="/scripts/stats/track.js" height="1" width="1" alt="" border="0"&gt;&lt;/noscript&gt;
&lt;/body&gt;
&lt;/html&gt;

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111110072415.3841">'''Make sure that g.trace doesn't add an extra newline.'''

import sys

def test():
    g.trace('a')
    g.trace('b')

try:
    sys.stdout = g.fileLikeObject()
    test()
    result = sys.stdout.get()
    assert result == 'test a\ntest b\n',repr(result)
finally:
    sys.stdout = sys.__stdout__
</t>
<t tx="ekr.20111110073528.3843">'''Make sure that g.trace doesn't add an extra newline.'''

import sys

def test():
    g.pr('a')
    g.pr('b')

try:
    sys.stdout = g.fileLikeObject()
    test()
    result = sys.stdout.get()
    assert result == 'a\nb\n',repr(result)
finally:
    sys.stdout = sys.__stdout__
</t>
<t tx="ekr.20111110073834.3843">'''Make sure that g.trace doesn't add an extra newline.'''

import sys

def test():
    g.es_print('a')
    g.es_print('b')

try:
    sys.stdout = g.fileLikeObject()
    test()
    result = sys.stdout.get()
    assert result == 'a\nb\n',repr(result)
finally:
    sys.stdout = sys.__stdout__
</t>
<t tx="ekr.20111110095252.3845">import leo.core.leoImport as leoImport
import leo.plugins.importers.basescanner as basescanner

ic = c.importCommands
bs = basescanner.BaseScanner(ic,atAuto=True,language='html')

&lt;&lt; define tokens &gt;&gt;

table = (
    (tokens11,tokens12),
    (tokens21,tokens22),
)

for tokens1,tokens2 in table:
    bs.compareTokens(tokens1,tokens2)
</t>
<t tx="ekr.20111110095252.3846">@ 2011/11/10:

File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2074, in scanAndCompare
n1,n2,ok = self.compareTokens(tokens1,tokens2)
File "/usr/fetching/leo-editor/leo/core/leoImport.py", line 2094, in compareTokens
else:      kind1,val1 = 'eof','',n1
ValueError: too many values to unpack
@c

tokens11 = ()
tokens12 = (('id','abc',0),)

# Test similar situation, reversed.

tokens21 = (('id','abc',0),)
tokens22 = ()
</t>
<t tx="ekr.20111111074026.3972">import leo.plugins.importers.html as html
ic = c.importCommands
hs = html.HtmlScanner(importCommands=ic,atAuto=True)

table = (
    # Yes, both single and double quotes are valid in html.
    (hs.skipComment, '&lt;!-- comment --&gt; after',  '&lt;!-- comment --&gt;'),
    (hs.skipComment, '&lt;!-- a\nb --&gt; after',     '&lt;!-- a\nb --&gt;'),
    (hs.skipId,      'abc&gt;',                    'abc'),
    (hs.skipId,      'abc"',                    'abc'),
    (hs.skipId,      'abc&lt;!--',                 'abc'),
    (hs.skipId,      'a.b-c9:d after',          'a.b-c9:d'),
    (hs.skipString,  '"a string" after',        '"a string"'),
    (hs.skipString,  "'a string2' after",       "'a string2'"),
    (hs.skipString,  "'a string&lt;'&gt;",            "'a string&lt;'"),
    (hs.skipString,  "'a string&gt;'&lt;",            "'a string&gt;'"),
)

for func,s,expected in table:
    
    i = func(s,0)
    result = s[0:i]
    assert result == expected,'expected %s got %s' % (
        repr(expected),repr(result))
</t>
<t tx="ekr.20111112092813.4154">g.cls()</t>
<t tx="ekr.20111112093605.4679"># run-marked-unit-tests-externally = Alt-4 # Standard binding, unchanged.
# run-selected-unit-tests-externally = Alt-5 # Standard binding, unchanged.
# run-selected-unit-tests-locally = Alt-6

# From stc.leo.
run-selected-unit-tests-locally = Alt-4
run-marked-unit-tests-locally = Alt-5
# run-all-unit-tests-locally = Alt-6

run-selected-unit-tests-externally = Alt-7

# Unused Alt-number commands
# Alt-9 is used by a unit test
# Alt-6
do-nothing = Alt-6
</t>
<t tx="ekr.20111112103320.3849">s = '''\
&lt;body&gt;

&lt;!-- OOPS: the div and p elements not properly nested.--&gt;
&lt;!-- OOPS: this table got generated twice. --&gt;

&lt;p id="P1"&gt;
&lt;div id="D666"&gt;Paragraph&lt;/p&gt; &lt;!-- P1 --&gt;
&lt;p id="P2"&gt;

&lt;TABLE id="T666"&gt;&lt;/TABLE&gt;&lt;/p&gt; &lt;!-- P2 --&gt;
&lt;/div&gt;
&lt;/p&gt; &lt;!-- orphan --&gt;

&lt;/body&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111112103320.3887">s = '''\
&lt;html&gt;

&lt;head&gt;
    &lt;!-- oops: link elements terminated two different ways --&gt;
    &lt;link id="L1"&gt;
    &lt;link id="L2"&gt;
    &lt;link id="L3" /&gt;
    &lt;link id='L4' /&gt;
    
    &lt;title&gt;TITLE&lt;/title&gt;
    
&lt;!-- oops: missing tags. --&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111112103320.3893">s = '''\
&lt;html&gt;
&lt;head&gt;
    &lt;!-- oops: link elements terminated two different ways --&gt;
    &lt;link id="L1"&gt;
    &lt;link id="L2"&gt;
    &lt;link id="L3" /&gt;
    &lt;link id='L4' /&gt;
    
    &lt;title&gt;TITLE&lt;/title&gt;
    
&lt;/head&gt;
&lt;html&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20111112171235.3854">w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'html')
assert p,'no test node'
s = p.b
indent = c.config.getBool('indent_added_comments',default=True)
try:
    i = p.b.find('text')
    assert i &gt; -1,'fail1: %s' % (repr(p.b))
    c.selectPosition(p)
    w.setSelectionRange(i,i+4)
    c.addComments()
    if indent:
        i = p.b.find('&lt;!-- text')
    else:
        i = p.b.find('&lt;!--     text')
    assert i &gt; -1,'fail2: %s' % (repr(p.b))
    c.deleteComments()
    assert p.b == s,'fail3: s\n%s\nresult\n%s' % (repr(s),repr(p.b))
    # Add a comment delim without a blank.
    c.addComments()
    p.b = p.b.replace('&lt;!-- ','&lt;!--')
    i = p.b.find('&lt;!--')
    w.setSelectionRange(i,i+4)
    c.deleteComments()
    assert p.b == s,'fail5: s\n%s\nresult\n%s' % (repr(s),repr(p.b))
finally:
    # print('\n'.join([repr(z) for z in g.splitLines(p.b)]))
    p.b = s
</t>
<t tx="ekr.20111112171235.3855">@language html
&lt;html&gt;
    text 
&lt;/html&gt;
</t>
<t tx="ekr.20111112171235.3858"># Can't be run externally.
w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'python')
assert p,'no test node'
s = p.b
indent = c.config.getBool('indent_added_comments',default=True)

try:
    i = p.b.find('pass')
    assert i &gt; -1,'fail1: %s' % (repr(p.b))
    c.selectPosition(p)
    w.setSelectionRange(i,i+4)
    c.addComments()
    if indent:
        i = p.b.find('# pass')
    else:
        i = p.b.find('#     pass')
    assert i &gt; -1,'fail2: %s' % (repr(p.b))
    c.deleteComments()
    assert p.b == s,'fail3: %s' % (repr(p.b))
    # Add a comment delim without a blank.
    c.addComments()
    p.b = p.b.replace('# pass','#pass')
    i = p.b.find('#')
    w.setSelectionRange(i,i+4)
    c.deleteComments()
    assert p.b == s,'fail5: s\n%s\nresult\n%s' % (repr(s),repr(p.b))
finally:
    # print('\n'.join([repr(z) for z in g.splitLines(p.b)]))
    p.b = s
</t>
<t tx="ekr.20111112171235.3859">@language python

def spam():
    pass

# after
</t>
<t tx="ekr.20111112211307.3910"># created by old and new add-comments.
</t>
<t tx="ekr.20111112211307.3911">@language python

def deleteCommentTest():

#     if 1:
#         a = 2
#         b = 3

    # if 1:
        # a = 2
        # b = 3

    pass
</t>
<t tx="ekr.20111112211307.3912">@language python

def deleteCommentTest():

    if 1:
        a = 2
        b = 3

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20111112211307.3913">5.0
12.8
</t>
<t tx="ekr.20111113091935.4786">@nocolor-node

These all call g.findNodeAnywhere for an @&lt;file&gt; node.
We don't want to copy such nodes to dynamicUnitTest.leo
</t>
<t tx="ekr.20111115071700.3870">c.config.printSettings()

</t>
<t tx="ekr.20111115080347.3872"></t>
<t tx="ekr.20111120124051.3992">from leo.core.leoQt import QtCore,QtGui,QtWidgets
import leo.plugins.qt_events as qt_events

if g.app.isExternalUnitTest:
    pass
else:
    def setup(p):
        delete_children(p)
        p2 = p.insertAsLastChild()
        c.selectPosition(p2)
        p2.h = 'first-child'
    
    def delete_children(p):
        while p.hasChildren():
            p.firstChild().doDelete()
    
    app = g.app.gui.qtApp
    assert issubclass(app.__class__,QtWidgets.QApplication)
    wrapper = c.frame.body.wrapper
    w = wrapper.widget
    assert g.isTextWrapper(wrapper),wrapper
    assert g.isTextWidget(w),w
    # w_name = w.__class__.__name__
    # bassert w_name in('QsciScintilla','LeoQTextBrowser'),w_name
    p1 = p.copy()
    filter_obj = qt_events.LeoQtEventFilter(c,w=w)
    g.app.unitTestDict[p.h] = filter_obj # preserve a pointer to the filter.
    try:
        ev = QtCore.QEvent
        table = (
            ev.KeyPress,
            # ev.KeyRelease, # Ignored except in QLineEdit's.
            # ev.ShortcutOverride, # Ignored everywhere.
        )
        for theType in table:
            # Create the event.
            setup(p1)
            e = QtGui.QKeyEvent(theType,ord('i'),QtCore.Qt.ControlModifier)
            # Pass it to eventFilter.
            filter_obj.eventFilter(w,e)
            # Check the results.
            c.redraw()
            n = p1.numberOfChildren()
            assert n==2,'%s children' % (n)
            delete_children(p1)
    finally:
        delete_children(p1)
        c.redraw()
</t>
<t tx="ekr.20111120124051.3994">'''Test that cycle-all-focus cycles through all tabs.'''

if g.app.isExternalUnitTest:
    # print('external test')
    pass
else:
    log = c.frame.log
    c.bodyWantsFocusNow()
    w_name = g.app.gui.widget_name
    w = c.frame.body
    seen = []
    while w:
        event = g.bunch(widget=w)
        c.editCommands.cycleAllFocus(event=event)
        w = g.app.gui.get_focus()
        if w in seen: break
        seen.append(w)
        # print(id(w),w_name(w))
    assert len(seen) &gt;=3
</t>
<t tx="ekr.20111121081052.3908">if g.app.isExternalUnitTest:
    # print('external test')
    pass
else:
    log = c.frame.log
    d = log.contentsDict
    keys = list(d.keys())
    tabs = log.orderedTabNames()
    n = len(keys)
    n2 = log.numberOfVisibleTabs()
    n3 = len(tabs)
    assert n == n2,'n: %s n2: %s' % (n,n2)
    # The spell tab may not be in d.keys.
    assert n &lt;= n3,'n: %s len(log.orederedTabNames() %s): %s' % (n,n3,tabs)
</t>
<t tx="ekr.20111121140833.3916">'''selectToMatchingBracket was crashing.'''
ec = c.editCommands
w = c.frame.body.wrapper
s = w.getAllText()
i = s.find('(')
w.setInsertPoint(i)
ec.selectToMatchingBracket(event=None)
i,j = w.getSelectionRange()
assert i &lt; j,'i: %s j: %s' % (i,j)
</t>
<t tx="ekr.20111121140833.3917">'''These were changed, then reverted, but a unit test is important.'''

if g.app.isExternalUnitTest:
    pass # Prints to console, which is annoying.
else:
    log = c.frame.log
    log.put(p.h)
    log.putnl()
</t>
<t tx="ekr.20111121142012.4030">from leo.core.leoQt import QtGui,QtWidgets
log = c.frame.log
name = log.__class__.__name__

if g.app.isExternalUnitTest:
    assert name == 'NullLog',name
else:
    assert name == 'LeoQtLog',name
    assert log.logCtrl.__class__.__name__ == 'QTextEditWrapper',log.logCtrl
    assert not issubclass(log.logCtrl.__class__,QtWidgets.QWidget.__class__)
        # leoQTextEditWidget us a poor name: it is not a Qt widget.
    assert log.logCtrl.widget.__class__.__name__ == 'LeoQTextBrowser'
    assert hasattr(log.logCtrl,'widget') and log.logCtrl.widget
    assert hasattr(log.logCtrl.widget,'leo_log_wrapper')
    wrapper = log.logCtrl.widget.leo_log_wrapper
    assert wrapper == log.logCtrl

</t>
<t tx="ekr.20111121152019.3929">'''updateEditors was crashing due to calling setSelectionRange(ins=i).
The proper keyword argument is insert=i.
'''

c.frame.body.updateEditors()
</t>
<t tx="ekr.20111121164644.3928">'''Test that cycle-all-focus cycles through all tabs.'''

if g.app.isExternalUnitTest:
    # print('external test')
    pass
else:
    log = c.frame.log
    tabs = log.orderedTabNames()[1:]
    tabs.append('Log')
    
    # Set up the initial state.
    c.k.keyboardQuit()
    c.bodyWantsFocusNow()
    
    for tab in tabs:
        log.cycleTabFocus(event=None)
        assert log.tabName == tab,'expected %s, got %s' % (
            tab,log.tabName)
        # print('pass',tab)
</t>
<t tx="ekr.20111121224307.3934">if g.app.isExternalUnitTest:
    # print('external test')
    pass
else:
    tabs = ('Log','Find')
    log = c.frame.log
    c.bodyWantsFocusNow()
    last_widget = c.frame.body
        
    for tab in tabs:
        # A small hack: fudge up the widget to pass to the command.
        event = g.bunch(widget=last_widget)
        c.editCommands.cycleAllFocus(event=event)
        assert log.tabName == tab,'expected %s, got %s' % (
            tab,log.tabName)
        last_widget = log.contentsDict.get(tab)
        # print('pass',tab,last_widget)
        event = g.bunch(widget=last_widget)
        
        # This throws exception: LeoQTextBrowser has no attribute logCtrl.
        c.k.handleDefaultChar(event, stroke='a')
</t>
<t tx="ekr.20111123042627.6654"># Leo loads plugins in the order they appear here.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:
plugins_menu.py
free_layout.py # needs to be early
viewrendered.py

# Recommended plugins:
### contextmenu.py
# leo_to_html.py
mod_scripting.py
# nav_qt.py
# quicksearch.py
# stickynotes.py
# todo.py
</t>
<t tx="ekr.20111123214629.3941">from leo.core.leoQt import QtCore,QtGui,QtWidgets
import leo.plugins.qt_events as qt_events

if g.app.isExternalUnitTest:
    pass
else:
    wrapper = c.frame.body.wrapper
    w = wrapper.widget
    assert g.isTextWrapper(wrapper),wrapper
    assert g.isTextWidget(w),w
    filter_obj = qt_events.LeoQtEventFilter(c,w=w)
    g.app.unitTestDict[p.h] = filter_obj # keep a pointer to the filter.
    # Create an Alt-9 key event.
    ev = QtCore.QEvent
    e = QtGui.QKeyEvent(ev.KeyPress,ord('9'),QtCore.Qt.AltModifier)
    filter_obj.eventFilter(w,e)
    # Assert that handleUnboundChar actually ignored it.
    assert g.app.unitTestDict.get('handleUnboundChar-ignore-alt-or-ctrl')
</t>
<t tx="ekr.20111124090010.3939">'''Test that the config parser visits @buttons and @commands nodes for
leoSettings.leo and unitTest.leo.

If strict is True, also test that the config parser vists the nodes in
myLeoSettings.leo. This may fail on machines without @buttons and @commands
nodes in myLeoSettings.leo.
'''

if g.app.isExternalUnitTest:
    pass
else:
    strict = True # Set to False if you are not EKR.
    
    table = ['leoSettings.leo','unitTest.leo']
    if strict:
        table.append('myLeoSettings.leo')
    
    keys = ('config.doButtons-file-names','config.doCommands-file-names')
    d = g.app.config.unitTestDict # Always created for this unit test.
    
    for key in keys:
        aList = d.get(key,[])
        for fn in table:
            # print(fn)
            # print(repr(aList))
            assert fn in aList,'%s not in unitTestDict[%s]' % (fn,key)
</t>
<t tx="ekr.20111124094121.3941"># These exist for a unit test.</t>
<t tx="ekr.20111124094121.3942"></t>
<t tx="ekr.20111124094121.3943"></t>
<t tx="ekr.20111125182408.3947">def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()

try:
    files = (r'a\b.c',r'a\b.h',)
    c.importCommands.createImportParent(p,files)
    child = p.firstChild()
    assert child
    assert child.h == 'a/b',child.h
finally:
    setup()</t>
<t tx="ekr.20111125183140.3952">child = p.firstChild()
def setup():
    while p.hasChildren():
        p.firstChild().doDelete()

setup()
try:
    c.importCommands.createOutline(
        fileName=r'a\b\c.xyzzy',
        parent=p,
        atAuto=False,atShadow=False,
        s='test body',
        ext='xyzzy'
    )
    child = p.firstChild()
    assert child
    h = g.os_path_finalize_join(g.app.loadDir,'..','test','a','b','c.xyzzy')
    h = h.replace('\\','/')
    h = '@file ' + h
    # C: vs c: is not relevant here.
    assert child.h.lower() == h.lower(),child.h
finally:
    setup()</t>
<t tx="ekr.20111210104652.3958">def setup(p):
    while p.hasChildren():
        p.firstChild().doDelete()

child = p.firstChild()
assert child
setup(child)
p2 = child.insertAfter()
p2.h = "test"
try:
    assert c.positionExists(p2),p2
    p2.moveToFirstChildOf(child)
    assert c.positionExists(p2),p2
    p2.moveToLastChildOf(child)
    assert c.positionExists(p2),p2
finally:
    if 1:
        setup(child)
    c.redraw(p)
</t>
<t tx="ekr.20111210104652.3959"></t>
<t tx="ekr.20111210175541.3957"># Important: the child of this node must be a clone of
# the corresponding node in @shadow unittest/at-shadow-unlink-clones.py

# The @shadow node will not exist for an external test.
if not g.app.isExternalUnitTest:
    try:
        # print('start',p.h)
        b = c.undoer.beforeChangeTree(p)
        h = '@shadow unittest/at-shadow-unlink-clones.py'
        root = g.findNodeAnywhere(c,h)
        assert root
        assert root.h == h,repr(root.h)
        child = p.firstChild()
        assert child
        assert child.isCloned(),'fail 1: test not set up properly'
        c.selectPosition(root)
        fn = root.atShadowFileNodeName()
        assert fn
        c.atFileCommands.readOneAtShadowNode (fn,root,force=True)
        c.undoer.afterChangeTree(p,'fc.readOneAtShadowNode',b)
        assert child.isCloned(),'fail 2: intended test fails'
        c.undoer.undo()
    finally:
        c.selectPosition(p)
        c.redraw()
</t>
<t tx="ekr.20111211094936.3970"></t>
<t tx="ekr.20111212142649.3971">c.selectPosition(p)
c.copyOutline()
try:
    p2 = c.pasteOutline()
    assert p2
    assert not p2.isCloned()
finally:
    if p2: p2.doDelete()
    c.redraw(p)
</t>
<t tx="ekr.20111212142649.3972"># child text.
</t>
<t tx="ekr.20111214100515.3921">ic = c.importCommands

def setup(p):
    while p.hasChildren():
        p.firstChild().doDelete()

fn = g.os_path_finalize_join(g.app.loadDir,'..','test','unittest','at-auto-section-ref-test.py')
# fn = r'c:\Users\edreamleo\at-auto-test.py'
assert g.os_path_exists(fn),fn

try:
    setup(p)
    child = p.insertAsNthChild(0)
    child.h = 'child'
    assert child

    ic.errors = 0
    ic.createOutline (fn,parent=child,atAuto=True,atShadow=False,s=None,ext=None)
    assert ic.errors == 0
finally:
    setup(p)
    c.redraw(p)
</t>
<t tx="ekr.20111228125719.3909">import leo.core.leoImport as leoImport
import leo.plugins.importers.basescanner as basescanner

def setup(p):
    while p.hasChildren():
        p.firstChild().doDelete()

importCommands = c.importCommands
bic = basescanner.BaseScanner(importCommands,atAuto=False,language='python')

try:
    setup(p)
    child = p.insertAsLastChild()
    child.h = 'child'
    bic.insertIgnoreDirective(parent=child)
    assert child.b.find('@ignore') == 0
finally:
    if 1:
        setup(p)
</t>
<t tx="ekr.20120201101804.3907">import leo.core.leoConfig as leoConfig
    
p = c.config.settingsRoot()
assert c
if p:
    # p will not exist when run externally.
    h = p.h
    p.h = '@@' + h
try:
    parser = leoConfig.SettingsTreeParser(c,localFlag=True)
    d1,d2 = parser.traverse()
    assert isinstance(d1,g.TypedDictOfLists),d1
    assert isinstance(d2,g.TypedDict),d2
finally:
    if p:
        p.h = h
        c.redraw()
</t>
<t tx="ekr.20120201125738.3958"># This tests is valid only if not g.new_config.

sd = g.app.config.localShortcutsDict
d = sd.get(c.hash(),{})
try:
    sd[c.hash()] = {}
    key,aList = c.config.getShortcut('new')
    # print(key,aList)
    assert aList,'key: %s' % (key)
finally:
    sd[c.hash()] = d
</t>
<t tx="ekr.20120212130242.3942"></t>
<t tx="ekr.20120212130242.3945"></t>
<t tx="ekr.20120212130242.3946"></t>
<t tx="ekr.20120212130242.3947"></t>
<t tx="ekr.20120212130242.3948"></t>
<t tx="ekr.20120212130242.3949"></t>
<t tx="ekr.20120212130242.4704"></t>
<t tx="ekr.20120212130242.4755"></t>
<t tx="ekr.20120228174052.3929"># node 1 text A.
</t>
<t tx="ekr.20120229082711.3934">@language python
@tabwidth -4

# Begin

@others

# End
</t>
<t tx="ekr.20120229082711.3935"># node 1 text A.
</t>
<t tx="ekr.20120229082711.3936"># node 2 text B.
</t>
<t tx="ekr.20120303054735.3931"># Test of bug 930726: expandNodeAndGoToFirstChild only expands or only goes to first child .

p.contract()
c.expandNodeAndGoToFirstChild()
assert c.p == p.firstChild()
</t>
<t tx="ekr.20120303054735.3932"></t>
<t tx="ekr.20120306173116.3933">@first # -*- coding: utf-8 -*-

s = '''\
&lt;:À.Ç&gt;
&lt;Ì&gt;
&lt;_.ÌÑ&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.xmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20120306201833.3942"># Test of bug 799695: colorizer bug after move-lines-up into a docstring

# import os ; os.system('cls')

n = c.frame.body.colorizer.full_recolor_count

c.testManager.runEditCommandTest(p)

# Not an effective test, even though the bug fix was to call
# c.recolor_now(incremental=False)

# g.trace(n,c.frame.body.colorizer.full_recolor_count)

# assert c.frame.body.colorizer.full_recolor_count &gt; n
</t>
<t tx="ekr.20120306201833.3943">@language python
def test():
    """ a
    b
    c
    print 1
    """
    
    print 2
</t>
<t tx="ekr.20120306201833.3944">@language python
def test():
    """ a
    b
    c
    """
    print 1
    
    print 2
</t>
<t tx="ekr.20120306201833.3945">@language python
def test():
    """ a
    b
    c
    print 1
    """
    
    print 2
</t>
<t tx="ekr.20120307070541.3937">@first # -*- coding: utf-8 -*-

# Skip test when running test dynamically.
s = g.findTestScript(c,'@common leoRst test code',warn=False)
if s:
    exec(s)
    rst3Test(c,p)
</t>
<t tx="ekr.20120307070541.3941">@language rest
</t>
<t tx="ekr.20120307070541.3942">@language rest

Test of unicode characters: ÀǋϢﻙ

End of test.
</t>
<t tx="ekr.20120307070541.3944"></t>
<t tx="ekr.20120307070541.3945"></t>
<t tx="ekr.20120307070541.3946">.. rst3: filename: test.html


Test of unicode characters: ÀǋϢﻙ

End of test.

</t>
<t tx="ekr.20120307070541.3947">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document"&gt;


&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;Test of unicode characters: ÀǋϢﻙ&lt;/p&gt;
&lt;p&gt;End of test.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20120307070541.3948">.. rst3: filename: test.html


Test of unicode characters: ÀǋϢﻙ

End of test.

</t>
<t tx="ekr.20120307070541.3949">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;meta name="generator" content="Docutils VER: http://docutils.sourceforge.net/" /&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;

/*ORIGINAL GOODGER + changes; up to line 224 it's standard reST stylesheet
:Author: David Goodger
:Contact: goodger@users.sourceforge.net
:date: $Date: 2006/10/19 13:23:15 $
:version: $Revision: 1.2 $
:copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.
*/

/* EKR 10/19/06 */
/* some browsers require imported rules to precede all rulesets */
@import url(leo_rst.css);
@import url(silver_city.css);

.first {
  margin-top: 0 }

.last {
  margin-bottom: 0 }

a.toc-backref {
  text-decoration: none ;
  color: black }

dd {
  margin-bottom: 0.5em }

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.attention, div.caution, div.danger, div.error, div.hint,
div.important, div.note, div.tip, div.warning, div.admonition {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

div.hint p.admonition-title, div.important p.admonition-title,
div.note p.admonition-title, div.tip p.admonition-title,
div.admonition p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em }

div.footer, div.header {
  font-size: smaller }

div.sidebar {
  margin-left: 1em ;
  border: medium outset ;
  padding: 0em 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.line-block {
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em ;}
  /*background-color: #eeeeee }*/
  /*for some reason i can't overide in an import*/

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.option-argument {
  font-style: italic }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

table {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.citation {
  border-left: solid thin gray ;
  padding-left: 0.5ex }

table.docinfo {
  margin: 2em 4em }

table.footnote {
  border-left: solid thin black ;
  padding-left: 0.5ex }

td, th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

th.docinfo-name, th.field-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap }

h1 tt, h2 tt, h3 tt, h4 tt, h5 tt, h6 tt {
  font-size: 100% }

/*for some reason, the following isn't being overridden by the imports
at the end of this style sheet so I've commented it out*/
/*tt {
  background-color: #eeeeee }*/

ul.auto-toc {
  list-style-type: none }

hr { /* EKR */
  width: 100%;
  height: 1pt;
  color: gray;
}



&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class="document"&gt;


&lt;!-- rst3: filename: test.html --&gt;
&lt;p&gt;Test of unicode characters: ÀǋϢﻙ&lt;/p&gt;
&lt;p&gt;End of test.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="ekr.20120307133953.3947">import sys
if sys.platform.startswith('win'):
    fn1 = g.os_path_finalize_join(g.app.loadDir,'..','doc','LeoDocs.leo')
    assert g.os_path_exists(fn1),fn1
    url1 = 'file://' + fn1 + '#Leo 4.10 Release notes'
    table = (
        (r'file://C:/prog/test.sh',             ['os_startfile']),
        (r'file://C:/prog',                     ['os_startfile']),
        (r'http://writemonkey.com/index.php',   ['browser']),
        (url1,                                  ['g.openWithFileName']), # ,'g.recursiveUNLSearch']),
        (r'#--&gt;Before 4.10 b1',                 ['g.recursiveUNLSearch']),
    )
    for url,aList in table:
        g.handleUrl(c=c,p=c.p,url=url)
        for kind in aList:
            assert g.app.unitTestDict.get(kind),'kind: %s url: %s' % (
                kind,url)
</t>
<t tx="ekr.20120309155126.3949"># Can't be run externally.
w = c.frame.body.wrapper
p = g.findNodeInTree(c,p,'rest and python')
assert p,'no test node'
s = p.b
indent = c.config.getBool('indent_added_comments',default=True)

try:
    i = p.b.find('pass')
    assert i &gt; -1,'fail1: %s' % (repr(p.b))
    c.selectPosition(p)
    w.setSelectionRange(i,i+4)
    c.addComments()
    if indent:
        i = p.b.find('# pass')
    else:
        i = p.b.find('#     pass')
    assert i &gt; -1,'fail2: %s' % (repr(p.b))
    c.deleteComments()
    assert p.b == s,'fail3: %s' % (repr(p.b))
    # Add a comment delim without a blank.
    c.addComments()
    p.b = p.b.replace('# pass','#pass')
    i = p.b.find('#')
    w.setSelectionRange(i,i+4)
    c.deleteComments()
    assert p.b == s,'fail5: s\n%s\nresult\n%s' % (repr(s),repr(p.b))
finally:
    # print('\n'.join([repr(z) for z in g.splitLines(p.b)]))
    p.b = s
</t>
<t tx="ekr.20120309155126.3950">@language rest

This is rest text.

@language python

def spam():
    pass

# after
</t>
<t tx="ekr.20120310121839.3949"># Not valid when run externally: the chapter node will not exist.
if not g.app.isExternalUnitTest:

    p1 = g.findNodeAnywhere(c,'@chapter aaa')
    assert p1
    p2 = g.findNodeAnywhere(c,'aaa node 1')
    assert p2
    
    try:
        assert not c.hoistStack
        c.selectPosition(p1)
        assert c.p == p1
        c.hoist()
        assert c.p == p2
        c.dehoist()
        assert c.p == p2
        assert not c.hoistStack
    finally:
        c.selectPosition(p)
        c.redraw()
</t>
<t tx="ekr.20120311124038.3951">p1 = p.copy()
try:
    assert not c.hoistStack
    c.selectPosition(p1)
    assert c.p == p1
    c.hoist()
    c.goToFirstNode()
    assert not c.hoistStack
        # The hoist stack must be cleared to show the first node.
    assert c.p == c.rootPosition()
    assert c.p.isVisible(c)
finally:
    c.selectPosition(p1)
    c.redraw()
</t>
<t tx="ekr.20120525072421.3889">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20120525072421.3890"># Should remove all trailing whitespace.

a = 2

    b = 3
    c  = 4
d = 5
e = 6
x
</t>
<t tx="ekr.20120525072421.3891"># Should remove all trailing whitespace.

a = 2   
    
    b = 3
    c  = 4  
d = 5
e = 6  
x
</t>
<t tx="ekr.20120525072421.3892"># Should remove all trailing whitespace.

a = 2

    b = 3
    c  = 4
d = 5
e = 6
x
</t>
<t tx="ekr.20121011094154.3906">@language python
</t>
<t tx="ekr.20121011094154.3911">s = '''

class Greeter {
    greeting: string;
    constructor (message: string) {
        this.greeting = message;
    }
    greet() {
        return "Hello, " + this.greeting;
    }
}

var greeter = new Greeter("world");

var button = document.createElement('button')
button.innerText = "Say Hello"
button.onclick = function() {
    alert(greeter.greet())
}

document.body.appendChild(button)

'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.typeScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20121011100210.4035">s = '''

module Sayings {
    export class Greeter {
        greeting: string;
        constructor (message: string) {
            this.greeting = message;
        }
        greet() {
            return "Hello, " + this.greeting;
        }
    }
}
var greeter = new Sayings.Greeter("world");

var button = document.createElement('button')
button.innerText = "Say Hello"
button.onclick = function() {
	alert(greeter.greet())
}

document.body.appendChild(button)


'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.typeScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20121016134831.3906">cpp = c.CPrettyPrinter(c)
ts2p = c.editCommands.TS_To_Python(c)
fn = 'typescript tokenize test'
p2 = g.findNodeInTree(c,p,fn)
assert p2,'not found: %s' % (fn)
aList = cpp.tokenize(p2.b)
ts2p.convertCodeList(aList)
s = ''.join(aList)
</t>
<t tx="ekr.20121016134831.3907">@language javascript

public attemptIncrementalUpdateUnit(previousScript: Script,scriptId: string,newSourceText: ISourceText,editRange: ScriptEditRange): UpdateUnitResult
    self.logger.log("attemptIncrementalUpdateUnit(\"" + scriptId + "\")")
    if editRange === None:
        throw Error("editRange should be valid")
    var scope1 = self.getEnclosingScopeContextIfSingleScopeEdit(previousScript,scriptId,newSourceText,editRange)
    if scope1 === None:
        return None
    var newScopeLength = scope1.scopeStartAST.limChar - scope1.scopeStartAST.minChar + editRange.delta
    # Heuristic: if the range to reparse is too big,bail out.
    # This is because a full parse will be faster than an incremental parse followed by all the necessary fix-ups
    if newScopeLength &gt;= newSourceText.getLength()/ 2:
        self.logger.log("  Bailing out because range of scope to reparse(" + newScopeLength + " characters)is greater than half the size of the source text")
        return None
    # Capture parsing errors so that they are part of "updateResult"
    var parseErrors: TypeScript.ErrorEntry:[] = []
    var errorCapture = function(minChar: number,charLen: number,message: string,unitIndex: number): void
        parseErrors.push(TypeScript.ErrorEntry:(unitIndex,minChar,minChar + charLen,message))
    var quickParseResult = TypeScript.quickParse(self.logger,scope1.scopeStartAST,newSourceText,scope1.scopeStartAST.minChar,scope1.scopeStartAST.minChar + newScopeLength,errorCapture)
    if quickParseResult.endLexState != TypeScript.LexState.Start:
        self.logger.log("  Bailing out because scope contains unterminated comment")
        return None
    var scriptFragment = quickParseResult.Script
    if scriptFragment.vars.members.length !== 0:
        self.logger.log("  Bailing out because new source text defines variables")
        return None
    #if(scriptFragment.scopes.members.length !== 1)
    #    logger.log("  Bailing out because new source text defines more than one scope(or none)");
    #    return null;
    #
    # This detects adding close curlies,since they have the side effect of having the parser
    # parse more members in the scope range.
    if scriptFragment.bod.members.length !== 1:
        self.logger.log("  Bailing out because new source text defines more than one scope(or none)")
        return None
    var oldScope = scope1.scopeStartAST
    var newScope = scriptFragment.bod.members[0]
    if oldScope.nodeType != newScope.nodeType:
        self.logger.log("  Bailing out because new source text does not define the same scope type as the existing scope")
        return None
    if not (&lt;any&gt;oldScope).leftCurlyCount or not (&lt;any&gt;oldScope).rightCurlyCount:
        self.logger.log("  Bailing out because sopce doesn't have left/right curly count")
        return None
    if(&lt;any&gt;oldScope).leftCurlyCount !==(&lt;any&gt;newScope).leftCurlyCount:
        self.logger.log("  Bailing out because new source text contains more(or fewer)left curly braces")
        return None
    if(&lt;any&gt;oldScope).rightCurlyCount !==(&lt;any&gt;newScope).rightCurlyCount:
        self.logger.log("  Bailing out because new source text contains more(or fewer)right curly braces")
        return None
    if newScope.minChar !== 0:
        self.logger.log("  Bailing out because new function declaration does not start at position 0")
        return None
    if newScope.limChar !== newScopeLength:
        self.logger.log("  Bailing out because new function declaration does not end at the new end position")
        return None
    return TypeScript.UpdateUnitResult.singleScopeEdits(previousScript,scriptFragment,oldScope,newScope,editRange,parseErrors)
</t>
<t tx="ekr.20130503061820.4186">@
language_delims_dict 
    # Keys are languages, values are 1,2 or 3-tuples of delims. 
language_extension_dict
    # Keys are languages, values are extensions.
extension_dict = {
    # Keys are extensions, values are languages.
@c

delims_d    = g.app.language_delims_dict
lang_d      = g.app.language_extension_dict
ext_d       = g.app.extension_dict

for lang in lang_d:
    ext = lang_d.get(lang)
    assert lang in delims_d,'fail 1: %s' % lang
    assert ext in ext_d,'fail 2: %s' % ext
for ext in ext_d:
    lang = ext_d.get(ext)
    assert lang in lang_d,'fail 3: %s' % lang
</t>
<t tx="ekr.20130524112342.4137">parent_v = p.parent().v or c.hiddenRootNode
while p.hasChildren():
    p.firstChild().doDelete()
# print(parent_v,p.childIndex())
if 0: # passes
    p.v.cloneAsNthChild(parent_v,p.childIndex())
if 1:
    v2 = p.v.insertAsFirstChild()
    v2.h = 'insertAsFirstChild'
    v2 = p.v.insertAsLastChild()
    v2.h = 'insertAsLastChild'
    v2 = p.v.insertAsNthChild(1)
    v2.h = 'insertAsNthChild(1)'
p.expand()
c.redraw()
</t>
<t tx="ekr.20130703132516.4188">p1 = p.copy()
while p.hasChildren():
    p.firstChild().doDelete()
root = p.insertAsLastChild()
root.h = 'root'
# Top level
a1 = root.insertAsLastChild()
a1.h = 'a'
a2 = a1.clone()
d1 = a1.insertAfter()
d1.h = 'd'
b1 = root.insertAsLastChild()
b1.h = 'b'
# Children of a.
b11 = b1.clone()
b11.moveToLastChildOf(a1)
b12 = b11.clone()
c2 = b11.insertAfter()
c2.h = 'c'
# Children of d
b11 = b1.clone()
b11.moveToLastChildOf(d1)
def parent(p):
    return p.stack[-1][0].h
n = root.level()
aList = []
nodes = 0
for p in root.subtree():
    nodes += 1
    if p.h == 'b': # and p.level()-n != 1:
        parent = p.stack[-1][0]
        # print('found',p.level()-n,p.h,'childIndex',p.childIndex(),'parent:',parent.h)
        aList.append(p.copy())
n_aList = len(aList)
assert n_aList == 6,n_aList
try:
    c.deletePositionsInList(aList)
finally:
    if 1:
        while p1.hasChildren():
            p1.firstChild().doDelete()
c.redraw()
</t>
<t tx="ekr.20130910062920.4149">import codecs

# The hack of computing s below is not valid in Python 3.
if not g.isPython3:

    table = (
        ('utf-8',  codecs.BOM_UTF8),
        ('utf-16', codecs.BOM_UTF16_BE),
        ('utf-16', codecs.BOM_UTF16_LE),
        ('utf-32', codecs.BOM_UTF32_BE),
        ('utf-32', codecs.BOM_UTF32_LE),
    )
    for e,bom in table:
        s1 = 'this is a test'
        s = bom + 'this is a test'
        # print('%6s bom: %18r s: %s' % (e,bom,repr(s)))
        e2,s2 = g.stripBOM(s)
        assert e2 == e,'%s,%s' % (e,e2)
        assert s2 == s1,repr(s2)
</t>
<t tx="ekr.20130912092638.4151">if g.app.isExternalUnitTest:
    path = g.os_path_finalize_join(g.app.loadDir,'..','test','utf-16-test.txt')
    assert g.os_path_exists(path)
    f = open(path,'r')
    s = f.read()
    f.close()
    s = g.toUnicode(s,encoding='utf-16')
    assert s.find('Test of utf-16.') &gt; -1,s
else:
    h = '@file ../test/utf-16-test.txt'
    p = g.findNodeAnywhere(c,h)
    s = 'Test of utf-16.'
    assert p,h
    # It's hard to test the utf-16 text directly.
    assert p.b
    assert p.b.find(s) &gt; -1
    assert len(p.b)==66,len(p.b)
</t>
<t tx="ekr.20130918043621.4172"></t>
<t tx="ekr.20130918043621.4190"></t>
<t tx="ekr.20130918043621.4195"># First, we must remove the trailing newline from the 'after' line.
h = 'after sel=3.6,3.6'
p2 = g.findNodeInTree(c,p,h)
assert p2,h
s = p2.b
if s.endswith('\n'):
    p2.b = p2.b[:-1]
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4196">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4197">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4198">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4199">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4200">line 1
line 2

line 4
</t>
<t tx="ekr.20130918043621.4201">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20130918043621.4202">line 1
line 2

line 4
</t>
<t tx="ekr.20130918043621.4203">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918043621.4204">line 1
li
line 3
</t>
<t tx="ekr.20130918043621.4205">line 1
line 2
line 3
</t>
<t tx="ekr.20130918043621.4206">line 1
li
line 3
</t>
<t tx="ekr.20130918050446.4202">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918050446.4203">line 1
line 2line 3
</t>
<t tx="ekr.20130918050446.4204">line 1
line 2
line 3
</t>
<t tx="ekr.20130918050446.4205">line 1
line 2line 3
</t>
<t tx="ekr.20130918050446.4210">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918050446.4211">line 1
line 2
line 4
</t>
<t tx="ekr.20130918050446.4212">line 1
line 2

line 4
</t>
<t tx="ekr.20130918050446.4213">line 1
line 2
line 4
</t>
<t tx="ekr.20130918051958.4176"># First, we must remove the trailing newline from the 'after' line.
h = 'after sel=3.6,3.6'
p2 = g.findNodeInTree(c,p,h)
assert p2,h
s = p2.b
if s.endswith('\n'):
    p2.b = p2.b[:-1]
c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918051958.4177">line 1
line 2
line 3
</t>
<t tx="ekr.20130918051958.4178">line 1
line 2
line 3
</t>
<t tx="ekr.20130918051958.4179">line 1
line 2
line 3
</t>
<t tx="ekr.20130918052416.4180">c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20130918052416.4181">line 1
# The next line contains two trailing blanks.
line 3line 4
</t>
<t tx="ekr.20130918052416.4182">line 1
# The next line contains two trailing blanks.
line 3  
line 4
</t>
<t tx="ekr.20130918052416.4183">line 1
# The next line contains two trailing blanks.
line 3line 4
</t>
<t tx="ekr.20130923090601.4178">u = c.undoer
assert u
c.insertHeadlineBefore()
assert u.undoMenuLabel == 'Undo Insert Node Before',repr(u.undoMenuLabel)
c.undoer.undo()
assert u.redoMenuLabel == 'Redo Insert Node Before',repr(u.undoMenuLabel)
</t>
<t tx="ekr.20131103084038.4274"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4275">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4276">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4277">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4282"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4283">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4284">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4285">@pagewidth 40
'''
docstring.
'''
</t>
<t tx="ekr.20131103084038.4290"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4291">@pagewidth 40
'''
docstring. more docstring.
'''
</t>
<t tx="ekr.20131103084038.4292">@pagewidth 40
'''
docstring.
more docstring.
'''
</t>
<t tx="ekr.20131103084038.4293">@pagewidth 40
'''
docstring. more docstring.
'''
</t>
<t tx="ekr.20131103084038.4298"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4299">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4300">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4301">- Point 1. xxxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 11.
A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4306"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4307">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4308">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
  Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4309">A. Point 2. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 22.
1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4314"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4315">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4316">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4317">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4  xxxxxxxxxxxxxxxxxxxxxxxxxxx
</t>
<t tx="ekr.20131103084038.4322"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4323">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4324">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4325">1. Point 3. xxxxxxxxxxxxxxxxxxxxxxxxxxx
   Line 32.

2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4330"># Required when running tests externally
@language plain
@pagewidth 40
@tabwidth 8

c.testManager.runEditCommandTest(p)
</t>
<t tx="ekr.20131103084038.4331">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4332">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131103084038.4333">2. Point 4 xxxxxxxxxxxxxxxxxxxxxxxxxxx
        Line 41.
</t>
<t tx="ekr.20131111155830.4249"></t>
<t tx="ekr.20131111155830.4250"># Not yet...

    &lt;BS&gt;        delete the character in front of the cursor
N   &lt;Del&gt;       delete N characters under and after the cursor
    &lt;Del&gt;       delete the character under the cursor
    &lt;Del&gt;       while entering a count: delete last character
    &lt;Down&gt;      recall newer command-line that starts with current command
    &lt;Esc&gt;       abandon command-line (if 'wildchar' is &lt;Esc&gt;, type it twice)
    &lt;Left&gt;      (motion) cursor left
    &lt;Right&gt;     (motion) cursor right
    &lt;S-Down&gt;    recall newer command-line from history
    &lt;S-Left&gt;    (motion) cursor one word left
    &lt;S-Right&gt;   (motion) cursor one word right
    &lt;S-Up&gt;      recall older command-line from history
    &lt;Up&gt;        recall older command-line that starts with current command

N   CTRL-^                  Edit alternate file N (equivalent to ":e #N").
N   CTRL-A                  add N to the number at or after the cursor
N   CTRL-B                  window N pages Backwards (upwards)
    CTRL-B                  (motion?) cursor to beginning of command-line
    CTRL-BREAK              MS-DOS: during searches: interrupt the search
    CTRL-C                  during searches: interrupt the search
N   CTRL-D                  window N lines Downwards (default: 1/2 window)
N   CTRL-E                  window N lines downwards (default: 1)
    CTRL-E                  (motion?) cursor to end of command-line
N   CTRL-F                  (motion) window N pages Forwards (downwards)
    CTRL-G                  show current file name (with path) and cursor position
N   CTRL-I                  (motion) go to Nth newer position in jump list
    CTRL-K {char1} {char2}  enter digraph
    CTRL-L                  Clear and redraw the screen.
N   CTRL-O                  (motion) go to Nth older position in jump list
N   CTRL-R                  redo last N undone changes
    CTRL-R &lt;0-9a-z"%:-&gt;     insert contents of register &lt;0-9a-z"%:-&gt;
N   CTRL-T                  (motion) Jump back from Nth older tag in tag list
N   CTRL-U                  window N lines Upwards (default: 1/2 window)
    CTRL-U                  remove all characters
    CTRL-V                  highlight blockwise or stop highlighting
    CTRL-V                  start highlighting blockwise   }  highlighted text
    CTRL-V {char}           insert {char} literally
    CTRL-V {number}         enter decimal value of character (up to three digits)
    CTRL-W                  delete the word in front of the cursor
    CTRL-W +                Increase current window height
    CTRL-W -                Decrease current window height
    CTRL-W =                Make all windows equal height
    CTRL-W CTRL-W           Move cursor to window below (wrap)
    CTRL-W CTRL-^           Split window and edit alternate file
    CTRL-W R                Rotate windows upwards
    CTRL-W W                Move cursor to window above (wrap)
    CTRL-W ]                Split window and jump to tag under cursor
    CTRL-W _                Set current window height (default: very high)
    CTRL-W b                Move cursor to bottom window
    CTRL-W c  or :cl[ose]   Make buffer hidden and close window
    CTRL-W f                Split window and edit file name under the cursor
    CTRL-W j                Move cursor to window below
    CTRL-W k                Move cursor to window above
    CTRL-W n  or :new       Create new empty window
    CTRL-W o  or :on[ly]    Make current window only one on the screen
    CTRL-W p                Move cursor to previous active window
    CTRL-W q  or :q[uit]    Quit editing and close window
    CTRL-W r                Rotate windows downwards
    CTRL-W s                Split window into two parts
    CTRL-W t                Move cursor to top window
    CTRL-W x                Exchange current window with next one
N   CTRL-X                  subtract N from the number at or after the cursor
N   CTRL-Y                  window N lines upwards (default: 1)
    CTRL-Z                  Same as ":stop!"
    CTRL-]                  Jump to the tag under cursor, unless changes have been made</t>
<t tx="ekr.20131111155830.4251">char F
char T
char f
char r
char t
letter m
letter q
motion &lt;
motion &gt;
motion c
motion d
motion gU
motion gq
motion gu
motion g~
motion y
pattern /
pattern ?
register @
</t>
<t tx="ekr.20131111155830.4252"># http://tnerual.eriogerg.free.fr/vimqrc.html
vim_0 0
vim_tilda ~
vim_plus +
vim_underscore _
vim_minus -
vim_comma ,
vim_dot .
vim_semicolon ;
vim_lparen (
vim_rparen )
vim_lcurly {
vim_rcurly }
vim_vertical |
vim_backtick `
vim_dollar $
vim_caret ^
vim_percent %
vim_langle &lt;
vim_langle &lt;&lt;
vim_rangle &gt;
vim_rangle &gt;&gt;
vim_pound #
vim_star *
vim_slash /\\n
vim_slash /
vim_question ?\\n
vim_question ?
vim_at @
vim_at @@
vim_dquote "
vim_lsquare [#
vim_lsquare [(
vim_lsquare [*
vim_lsquare [[
vim_lsquare []
vim_lsquare [p
vim_lsquare [{
vim_rsquare ]#
vim_rsquare ])
vim_rsquare ]*
vim_rsquare ][
vim_rsquare ]]
vim_rsquare ]p
vim_rsquare ]}
vim_A A
vim_B B
vim_C C
vim_D D
vim_E E
vim_F F
vim_G G
vim_H H
vim_I I
vim_J J
vim_K K
vim_M M
vim_L L
vim_N N
vim_O O
vim_P P
vim_R R
vim_S S
vim_T T
vim_U U
vim_V V
vim_W W
vim_X X
vim_Y Y
vim_Z ZQ
vim_Z ZZ
vim_a a
vim_b b
vim_c c
vim_d dd
vim_d d
vim_g g~
vim_g g^
vim_g g#
vim_g g$
vim_g g*
vim_g g0
vim_g gD
vim_g gE
vim_g gI
vim_g gU
vim_g ga
vim_g gd
vim_g ge
vim_g gf
vim_g gg
vim_g gj
vim_g gk
vim_g gq
vim_g gs
vim_g gu
vim_g gv
vim_h h
vim_i i
vim_j j
vim_k k
vim_l l
vim_n n
vim_m m
vim_o o
vim_p p
vim_q q
vim_r r
vim_s s
vim_t t
vim_u u
vim_v v
vim_w w
vim_x x
vim_y y
vim_y yy
vim_z z-
vim_z z.
vim_z z&lt;CR&gt;
vim_z zb
vim_z zh
vim_z zl
vim_z zt
vim_z zz
</t>
<t tx="ekr.20131111155830.4253"># CR
# Ctrl-End
# Ctrl-Home
# Ctrl-Left
# Ctrl-M
# Ctrl-N
# Ctrl-P
# Ctrl-Right
# End
# Home
# Shift-Left
# Shift-Right

( 	
)
{
}
[[
[]
][
]]
$
^	
+
,
-
;
_
0
B
E
F
G
T
W
b
e
f
g$
g^
g0
gE
# gEnd
# gHome	
ge
gg
h
j
k
t
w
</t>
<t tx="ekr.20131111155830.4254">char F
char T
char f
char t
</t>
<t tx="ekr.20131220083358.3982">u = c.undoer
p1 = g.findNodeInTree(c,p,'a')
p2 = g.findNodeInTree(c,p,'b')
assert p1 and p2
assert not p1.isCloned()
assert not p2.isCloned()
bunch = u.beforeChangeTree(p)
p1._relinkAsCloneOf(p2)
u.afterChangeTree(p,'relink-clone',bunch)
assert p.firstChild().isCloned()
assert p.firstChild().next().isCloned()
c.redraw()
u.undo()
c.redraw()
p1 = g.findNodeInTree(c,p,'a')
p2 = g.findNodeInTree(c,p,'b')
assert not p1.isCloned()
assert not p2.isCloned()
assert p1 and p2
u.clearUndoState()
</t>
<t tx="ekr.20131220083358.3983"></t>
<t tx="ekr.20131220083358.3984">b text.
</t>
<t tx="ekr.20131227150324.3983"># Verify a fix for bug https://bugs.launchpad.net/leo-editor/+bug/1264350
aaa1 = g.findNodeAnywhere(c,'@chapter aaa')
assert aaa1
try:
    c.chapterController.selectChapterByName('aaa',collapse=True,create=False)
    aaa = c.p
    assert aaa.h == 'aaa node 1',repr(aaa)
    p2 = p.moveToVisBack(c)
    assert p2 is None,p2
finally:
    c.chapterController.selectChapterByName('main',collapse=True,create=False)
</t>
<t tx="ekr.20140103103143.4095"></t>
<t tx="ekr.20140206132559.4560">class aClass:
    def __init__(self):
        pass
    def spam(self):
        pass
bClass = aClass
</t>
<t tx="ekr.20140206132559.4564">@others
bClass = aClass
</t>
<t tx="ekr.20140206132559.4567">tm = c.testManager
before   = g.findNodeInTree(c,p,'before')
expected = g.findNodeInTree(c,p,'expected')
assert before,expected
try:
    c.selectPosition(before)
    before.h = 'expected' # To make the compare work.
    c.importCommands.parse_body(before)
    # compare tree.
    tm.compareOutlines(before,expected,compareHeadlines=True,tag='',report=True)
    c.undoer.undo()
finally:
    before.h = 'before'
    c.redraw()
</t>
<t tx="ekr.20140217055617.4231"># For a unit test.</t>
<t tx="ekr.20140218042220.4347">s = '''\

var c3 = (function () {
    "use strict";

    // Globals
    var c3 = { version: "0.0.1"   };

    c3.someFunction = function () {
        console.log("Just a demo...");
    };

    return c3;
}());

'''

g.app.unitTestDict ['expectedErrors'] = 0
c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140218045755.4348">@language python
@tabwidth -4

def not_a_sentinel(x):
    pass
@not_a_sentinel
def spam():
    pass

# s1 = ''.join([z for z in g.splitLines(p.b) if not z.startswith('@language')])
s1 = ''.join(g.splitLines(p.b)[2:])
s2 = p.nosentinels   
assert s1 == s2,'expected:\n%s\ngot:\n%s' % (s1,s2)
</t>
<t tx="ekr.20140218122321.4349">@language html

s = '''
&lt;!-- tags that start nodes: html,body,head,div,table,nodeA,nodeB --&gt;
&lt;html&gt;&lt;head&gt;headline&lt;/head&gt;&lt;body&gt;body&lt;/body&gt;&lt;/html&gt;
'''

g.app.unitTestDict ['expectedErrors'] = 0

c.importCommands.htmlUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140218151418.4353">s = '''\
var express = require('express');

var app = express.createServer(express.logger());

app.get('/', function(request, response) {
response.send('Hello World!');
});

var port = process.env.PORT || 5000;
app.listen(port, function() {
console.log("Listening on " + port);
});
'''

g.app.unitTestDict ['expectedErrors'] = 0
c.importCommands.javaScriptUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140531190926.4382">class aClass:
    @others
</t>
<t tx="ekr.20140531190926.4383">def __init__(self):
    pass
</t>
<t tx="ekr.20140531190926.4384">def spam(self):
    pass
</t>
<t tx="ekr.20140702101937.4245">table = (
    ('abc a bc x','bc',0,6),
    ('abc a bc x','bc',1,6),
    ('abc a x','bc',0,-1),
)
for s,word,i,expected in table:
    actual = g.find_word(s,word,i)
    assert actual == expected
</t>
<t tx="ekr.20140712142620.4458"></t>
<t tx="ekr.20140712142620.4503">aList = [p.copy() for p in c.all_positions()]
aList2 = sorted(reversed(aList),key=p.sort_key)
i = 0
for p in aList2:
    p2 = aList[i]
    i += 1
    assert p == p2,'\n%s:%s\n%s:%s' % (
        p.sort_key(p),p.h,p2.sort_key(p2),p2.h)
</t>
<t tx="ekr.20140712142620.4507">pd = c.persistenceController
gnxs = g.findNodeInTree(c,p,'@gnxs')
root = g.findNodeInTree(c,p,'root')
node1 = g.findNodeInTree(c,p,'node1')
assert gnxs and root and node1
root.deleteAllChildren()
new_node1 = root.insertAsLastChild()
new_node1.h = 'node1'
gnxs.b = 'gnx: %s\nunl: %s\n' % (node1.v.gnx,'node1')
try:
    pd.restore_gnxs(gnxs,root)
    # Important: p._relinkAsCloneOf leaves new_node1 unchanged,
    # but new_node1 should not be used.
finally:
    c.redraw()
</t>
<t tx="ekr.20140712142620.4508">gnx: ekr.20140724163840.5572
unl: node1
</t>
<t tx="ekr.20140712142620.4510"></t>
<t tx="ekr.20140712142620.4537">pd = c.persistenceController
root = c.rootPosition().insertAfter()
root.h = 'root'
child1 = root.insertAsLastChild()
child1.h = 'child1'
child2 = child1.insertAfter()
child2.h = 'child2'
child11 = child1.insertAsLastChild()
child11.h = 'child11'
try:
    for unl in ('root','root--&gt;child1','root--&gt;child2','root--&gt;child1--&gt;child11'):
        p = pd.find_absolute_unl_node(unl)
        parts = unl.split('--&gt;')
        assert p,unl
        assert p.h == parts[-1],p.h
finally:
    root.doDelete()
    c.selectPosition(p)
    c.redraw()
</t>
<t tx="ekr.20140712142620.4538">pd = c.persistenceController
h = '@persistence'
p1 = pd.find_at_persistence_node()
assert p1
p2 = pd.has_at_persistence_node()
assert p1 == p2,(p1,p2)
</t>
<t tx="ekr.20140712142620.4539">pd = c.persistenceController
parent = p.copy()
node1 = p.firstChild()
node2 = node1.next()
node3 = node2.next()
assert node1 and node2 and node3
child11 = node1.firstChild()
child12 = child11.next()
assert child11 and child12
child21 = node2.firstChild()
child22 = child21.next()
assert child21 and child22
node3_child1 = node3.firstChild()
assert node3_child1
node3_child1_child21 = node3_child1.firstChild()
assert node3_child1_child21
table = (
    ('node1',node1),
    ('',parent), # This special case is important.
    ('node1--&gt;child11',child11),
    ('node1--&gt;child12',child12),
    ('node2',node2),
    ('node2--&gt;child21',child21),
    ('node2--&gt;child22',child22),
    # Partial matches.
    ### ('node3--&gt;child1--&gt;child21',node3_child1_child21),
    ### ('child1--&gt;child21',node3_child1_child21),
    ### ('xxx--&gt;child21',node3_child1_child21),
        # This is ambiguous.
    # No matches.
    ('nodex',None),
    ('node1--&gt;childx',None),
    ('node3--&gt;childx',None),
)
for unl,expected in table:
    got = pd.find_position_for_relative_unl(parent,unl)
    assert got == expected,'unl: %s expected: %s got: %s' % (
        unl,expected and expected.h,got and got.h)
</t>
<t tx="ekr.20140712142620.4540"></t>
<t tx="ekr.20140712142620.4541"></t>
<t tx="ekr.20140712142620.4542"></t>
<t tx="ekr.20140712142620.4543"></t>
<t tx="ekr.20140712142620.4544"></t>
<t tx="ekr.20140712142620.4545"></t>
<t tx="ekr.20140712142620.4546">pd = c.persistenceController
root = g.findNodeInTree(c,p,'root')
assert root
root.h = '@auto root'
try:
    clone = root.next()
    assert clone and clone.h == 'clone'
    inner_clone = root.firstChild()
    assert inner_clone
    assert clone.v == inner_clone.v
    rep = pd.find_representative_node(root,inner_clone)
    # Careful: cloning this test can cause problems.
    oops = '\n  rep: %s\nparent:%s\nclone: %s\nparent:%s\ninner: %s\nparent: %s' % (
        rep,rep.parent(),clone,clone.parent(),inner_clone,inner_clone.parent())
    if True: ### p.isCloned():
        assert rep.v == clone.v and rep.parent().v == clone.parent().v,oops
    else:
        assert rep == clone
finally:
    root.h = 'root' # root must not be an @auto node.
    c.redraw()
</t>
<t tx="ekr.20140712142620.4547"></t>
<t tx="ekr.20140712142620.4549"></t>
<t tx="ekr.20140712142620.4550"># Also a test of find_at_views_node, find_at_organizers_node and find_at_clones_node.
pd = c.persistenceController
root = g.findNodeInTree(c,p,'root')
assert root
try:
    persistence = pd.find_at_persistence_node()
    assert persistence
    persistence.deleteAllChildren()
    root.h = '@auto root' # Make root look like an @auto node.
    assert pd.find_at_data_node(root)
    assert pd.find_at_gnxs_node(root)
finally:
    root.h = 'root' # Make sure root is *not* an @auto node.
    # views.deleteAllChildren()
    c.selectPosition(p)
    c.redraw()
</t>
<t tx="ekr.20140712142620.4551"></t>
<t tx="ekr.20140712142620.4552">class aClass:
    @others
</t>
<t tx="ekr.20140712142620.4556"></t>
<t tx="ekr.20140712142620.4557"># Test pd.has_at_auto_view_node, pd.has_at_clones_node and pd.has_at_organizers_node.
pd = c.persistenceController
persistence = g.findNodeAnywhere(c,'@persistence')
if persistence:
    assert pd.has_at_persistence_node()
    persistence.deleteAllChildren()
else:
    assert not pd.has_at_persistence_node()
    persistence = pd.find_at_views_node()
assert persistence
root = g.findNodeInTree(c,p,'root')
assert root
# The representative of clone_test node must appear outside of root's tree.
clone_test = g.findNodeInTree(c,p,'clone-test')
assert clone_test
assert clone_test.v == root.next().v,(clone_test.v,root.next().v)
try:
    root.h = '@auto root' # Make root look like an @auto node.
    pd.update_before_write_foreign_file(root)
    data = g.findNodeInTree(c,persistence,'@data:@auto root')
    assert data
    data2 = pd.has_at_data_node(root)
    assert data2
    assert data == data2,(data,data2)
    gnxs = g.findNodeInTree(c,persistence,'@gnxs')
    assert gnxs
    gnxs2 = pd.has_at_gnxs_node(root)
    assert gnxs2
    assert gnxs == gnxs2,(gnxs,gnxs2)
finally:
    root.h = 'root' # Make the root *not* an @auto node.
    c.redraw()
</t>
<t tx="ekr.20140712142620.4558">@others
</t>
<t tx="ekr.20140712142620.4559">class aClass:
    @others
</t>
<t tx="ekr.20140712142620.4561"></t>
<t tx="ekr.20140712142620.4562">def spam():
    pass
</t>
<t tx="ekr.20140712142620.4563">def clone_test():
    pass
</t>
<t tx="ekr.20140712142620.4574">pd = c.persistenceController
unl = pd.unl(p)
assert unl.endswith('--&gt;'+p.h),repr(unl)
</t>
<t tx="ekr.20140712142620.4575">pd = c.persistenceController
root = g.findNodeInTree(c,p,'root')
assert root
persistence = pd.find_at_persistence_node()
assert persistence
persistence.deleteAllChildren()
try:
    root.h = '@auto root' # Make root look like an @auto node.
    pd.update_before_write_foreign_file(root)
    data = g.findNodeAnywhere(c,'@data:@auto root')
    assert data
    gnxs = g.findNodeInTree(c,data,'@gnxs')
    assert gnxs
finally:
    root.h = 'root' # Make root *not* an @auto node.
    # persistence.deleteAllChildren()
    c.redraw()
</t>
<t tx="ekr.20140712142620.4576"></t>
<t tx="ekr.20140712142620.4577">class aClass:
    @others
</t>
<t tx="ekr.20140712142620.4579"></t>
<t tx="ekr.20140712142620.4580"></t>
<t tx="ekr.20140712142620.4581">def spam():
    pass
</t>
<t tx="ekr.20140712142620.4582"></t>
<t tx="ekr.20140712142620.4583"># At present, neither the pack nor the unpack commands exist.
pd = c.persistenceController
persistence = pd.find_at_persistence_node()
assert persistence
persistence.deleteAllChildren()
view = g.findNodeInTree(c,p,'@view test')
assert view
assert c.positionExists(view)
try:
    c.selectPosition(view)
    v_b = view.b
    pd.pack()
    assert c.p.v == view.v
    pd.unpack()
    assert view.b == v_b,view.b
    assert view.lastChild().isCloned()
finally:
    # views.deleteAllChildren()
    c.undoer.clearUndoState()
    c.redraw()
</t>
<t tx="ekr.20140712142620.4585">view body
</t>
<t tx="ekr.20140712142620.4586">not a clone text
</t>
<t tx="ekr.20140712142620.4587">clone body
</t>
<t tx="ekr.20140712144020.4334"></t>
<t tx="ekr.20140715080507.4339"></t>
<t tx="ekr.20140715080507.4340"></t>
<t tx="ekr.20140715080507.4341"></t>
<t tx="ekr.20140716115306.4345">pd = c.persistenceController
at_persistence = pd.find_at_persistence_node()
assert at_persistence
at_persistence.deleteAllChildren()
root = at_persistence.insertAsLastChild()
root.h = 'test root'
root.b = root.gnx
at_data = pd.find_at_data_node(root)
assert at_data
try:
    at_uas = at_data.insertAsLastChild()
    at_uas.h = '@uas'
    at_ua = at_uas.insertAsLastChild()
    at_ua.h = '@ua:dummy-gnx'
    at_ua.b = 'unl:dummy-unl\nua:dummy-ua'
    at_recovery = pd.find_at_recovery_node(root)
    if at_recovery:
        at_recovery.deleteAllChildren()
    pd.recover_ua_for_gnx('dummy-gnx',root,'dummy-unl')
    assert at_recovery
    at_ua2 = g.findNodeInTree(c,at_recovery,'@ua:dummy-gnx')
    assert at_ua2
    assert at_ua2.h == at_ua.h
    assert at_ua2.b == at_ua.b,repr(at_ua2.b)
finally:
    pass # root.doDelete()

</t>
<t tx="ekr.20140716121225.4354">print(p.v.gnx)</t>
<t tx="ekr.20140723134017.4464"># This causes problems!
import glob
import importlib
path = g.os_path_finalize_join(g.app.loadDir,'..','plugins','importers')
# print('path: %s' % path)
assert g.os_path_exists(path)
pattern = g.os_path_finalize_join(path,'*.py')
for fn in glob.glob(pattern):
    sfn = g.shortFileName(fn)
    m = importlib.import_module('leo.plugins.importers.%s' % sfn[:-3])
    assert m
</t>
<t tx="ekr.20140724164208.5505"></t>
<t tx="ekr.20140724164208.5506"></t>
<t tx="ekr.20140724164208.5507"></t>
<t tx="ekr.20140724164208.5572"></t>
<t tx="ekr.20140724164208.5573">gnx: ekr.20140712142620.4576
</t>
<t tx="ekr.20140724164208.5574">gnx: ekr.20140712142620.4577
unl: aClass
gnx: ekr.20140712142620.4582
unl: aClass--&gt;clone
gnx: ekr.20140712142620.4579
unl: organizer node
gnx: ekr.20140712142620.4580
unl: organizer node--&gt;child1
gnx: ekr.20140712142620.4581
unl: organizer node--&gt;child2
</t>
<t tx="ekr.20140724164600.4590"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoImport tests.')
</t>
<t tx="ekr.20140724220921.5199"></t>
<t tx="ekr.20140725132959.4593">s = '''\
.. toc

.. The section name contains trailing whitespace.

=======
Chapter 
=======

The top chapter.
'''

g.app.unitTestDict ['expectedErrors'] = None
g.app.unitTestDict ['expectedMismatchLine'] = None
c.importCommands.rstUnitTest(p,s=s,showTree=False)
</t>
<t tx="ekr.20140802074328.4471"></t>
<t tx="ekr.20140802074328.4472">vc = c.vimCommands
s = '''
abc
xyz
pdq
'''
table = (
    ('ab','y',False),
    ('a','c',True),
    ('x','\np',True),
    ('\nx','z',False),
)
for a,b,expected in table:
    i1,i2 = s.find(a),s.find(b)
    result = vc.on_same_line(s,i1,i2)
    assert result == expected,'%s expected: %s got: %s' % (
        s[i1:i2],expected,got)
</t>
<t tx="ekr.20140802074328.4473">vc = c.vimCommands
s = '''
abc
xyz
'''
table = (
    ('a','a'),
    ('a','b'),
    ('a','\nx')
)
for a,b,in table:
    i1,i2 = s.find(a),s.find(b)
    result = vc.to_bol(s,i2)
    assert result == i1,'%s expected: %s got: %s' % (
        s[i1:i2],expected,got)
</t>
<t tx="ekr.20140802074328.4474">vc = c.vimCommands
s = '''
abc
xyz
'''
table = (
    ('a','\nx'),
    ('b','\nx'),
    ('c','\nx'),
    ('\nx','\nx'),
)
for a,b,in table:
    i1,i2 = s.find(a),s.find(b)
    result = vc.to_eol(s,i1)
    assert result == i2,'%s expected: %s got: %s' % (
        s[i1:i2],expected,got)
</t>
<t tx="ekr.20140902101931.4478"></t>
<t tx="ekr.20140906072925.5224"></t>
<t tx="ekr.20140921190548.4838">gnx: ekr.20090627070131.4975
</t>
<t tx="ekr.20140921190548.4840">gnx: ekr.20100801125533.5788
</t>
<t tx="ekr.20140922054250.4786">gnx: ekr.20090627070131.4976
unl: spam
gnx: ekr.20090627070131.4977
unl: cheese
</t>
<t tx="ekr.20140922054250.4787">gnx: ekr.20100801125533.5789
unl: spam
gnx: ekr.20100801125533.5790
unl: cheese
</t>
<t tx="ekr.20140922150219.4749"></t>
<t tx="ekr.20140922150219.7144">@language rest

Apparently the unit tests are interfering with each other.
There are more failures when run all at once than when run separately.

======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)
@test TypeScript module
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoTest.py", line 413, in runTest
    execfile(scriptFile,d)
  File "C:\leo.repo\leo-editor\leo\test\scriptFile.py", line 31, in &lt;module&gt;
    c.importCommands.typeScriptUnitTest(p,s=s,showTree=False)
  File "c:\leo.repo\leo-editor\leo\core\leoImport.py", line 1392, in typeScriptUnitTest
    return self.scannerUnitTest (p,atAuto=False,fileName=fileName,s=s,showTree=showTree,ext='.ts')
  File "c:\leo.repo\leo-editor\leo\core\leoImport.py", line 1454, in scannerUnitTest
    assert ok,'\n'.join(table)
AssertionError:
ext:                  .ts
fileName:             @test TypeScript module
result:               False
actual errors:        1
expected errors:      0
actualMismatchLine:   None
expectedMismatchLine: None
actualErrorMessage:   u'import command did not import @file C:/leo.repo/leo-editor/leo/test/TypeScript module perfectly\
nThe clean-all-lines command may help fix whitespace problems\nfirst mismatched line: 5 (original) = 5 (imported)'
expectedErrorMessage: None

----------------------------------------------------------------------
Ran 103 tests in 1.996s

FAILED (failures=1)

======================================================================
ERROR: runTest (leo.core.leoTest.GeneralTestCase)
@test insert node
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoTest.py", line 413, in runTest
    execfile(scriptFile,d)
  File "C:\leo.repo\leo-editor\leo\test\scriptFile.py", line 34, in &lt;module&gt;
    assert p.back().h == 'A', 'fail 1-2'
  File "c:\leo.repo\leo-editor\leo\core\leoNodes.py", line 350, in __get_h
    return p.headString()
  File "c:\leo.repo\leo-editor\leo\core\leoNodes.py", line 436, in headString
    return self.v.headString()
AttributeError: 'NoneType' object has no attribute 'headString'

======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)

@test p.moveToVisBack in a chapter
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoTest.py", line 413, in runTest
    execfile(scriptFile,d)
  File "C:\leo.repo\leo-editor\leo\test\scriptFile.py", line 5, in &lt;module&gt;
    assert aaa1
AssertionError

----------------------------------------------------------------------
Ran 53 tests in 0.359s

FAILED (failures=1, errors=1)

======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)
@test pd.find_representative_node
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoTest.py", line 413, in runTest
    execfile(scriptFile,d)
  File "C:\leo.repo\leo-editor\leo\test\scriptFile.py", line 12, in &lt;module&gt;
    assert clone.v == inner_clone.v
AssertionError

======================================================================
FAIL: runTest (leo.core.leoTest.GeneralTestCase)
@test pd.has_..._node
----------------------------------------------------------------------
Traceback (most recent call last):
  File "c:\leo.repo\leo-editor\leo\core\leoTest.py", line 413, in runTest
    execfile(scriptFile,d)
  File "C:\leo.repo\leo-editor\leo\test\scriptFile.py", line 18, in &lt;module&gt;
    assert clone_test.v == root.next().v,(clone_test.v,root.next().v)
AssertionError: (&lt;VNode 2376c70 clone-test&gt;, &lt;VNode 2376c10 clone-test&gt;)

----------------------------------------------------------------------
Ran 10 tests in 0.063s

FAILED (failures=2)


</t>
<t tx="ekr.20140922150219.8090"></t>
<t tx="ekr.20140922150219.8227"></t>
<t tx="ekr.20140922150219.8512"></t>
<t tx="sps.20100531034136.20110">p2 = p.firstChild().firstChild().firstChild()

aList = g.get_directives_dict_list(p2)
path = c.scanAtPathDirectives(aList)
# print (path,p2.h)
endpath = g.os_path_normpath('again/again')
assert path and path.endswith(endpath),'expected ending %s got %s' % (
    endpath,path)
</t>
<t tx="sps.20100531034136.20111"></t>
<t tx="sps.20100531034136.20112"></t>
<t tx="sps.20100531034136.20113"></t>
<t tx="sps.20100609234650.16094">end = g.skip_blank_lines("",0)
assert end == 0, "expected 0, got %d" % end
end = g.skip_blank_lines(" ",0)
assert end == 0, "expected 0, got %d" % end
end = g.skip_blank_lines("\n",0)
assert end == 1, "expected 1, got %d" % end
end = g.skip_blank_lines(" \n",0)
assert end == 2, "expected 1, got %d" % end
end = g.skip_blank_lines("\n\na\n",0)
assert end == 2, "expected 2, got %d" % end
end = g.skip_blank_lines("\n\n a\n",0)
assert end == 2, "expected 2, got %d" % end
</t>
<t tx="ville.20090312195309.2">#if this starts failing due to much refacting in unitTest.leo,
# adjust accordingly

# These seem to fail if various nodes are cloned.
import random,fnmatch

all_h = [z.copy().h for z in c.find_h('.')]

assert len(all_h) &gt; 1000,'fail 1'

sample = random.sample(all_h, 20)    

# Test that all nodes are found at least once.
for h in sample:
    pat = fnmatch.translate(h)
    pl = c.find_h(pat)
    assert len(pl) &gt; 0 and len(pl) &lt; len(all_h),'fail 2'

tests = c.find_h('@test(.*)')

bm = tests.filter_b('(.*)all_positions')
forloops = 0
for node in bm:   
    # many of these are for loops
    for m in node.matchiter:
        if 'for' in m.group(1):
            forloops += 1

assert forloops &gt; 10,'fail for'

# all of these should also be found by find_b
all_bm = c.find_b('(.*)all_positions')
assert len(all_bm) &gt;= len(bm),'fail len'

assert set(el.h for el in bm).issubset(set(el.h for el in all_bm)),'fail set'

itertest = c.find_h('@test p.iters and v.iters')
assert len(itertest) &gt;= 1,'fail 3'
tn = itertest[0]
assert tn.h == '@test p.iters and v.iters','fail h'
assert len(itertest.filter_b('notfound, really')) == 0,'fail 4'
assert len(itertest.filter_b('leoNodes')) == 1,'fail 5'
chi = itertest.children().filter_h('child?')
assert chi[0].h == 'child1','fail 6'
assert chi[1].h == 'child2','fail 7'
# twice, in clones
chi_b = chi.children().filter_h('a').children().filter_h('b')

if 0:
    assert len(chi_b) == 2,'fail len 2: %s: %s' % (chi_b,len(chi_b))
    assert chi_b[0].h == chi_b[1].h == 'b'
    chi_e = chi.children().filter_h('d').children().filter_h('e')
    assert len(chi_e) == 1,'fail 8'
    assert chi_e[0].h == 'e','fail 9'

</t>
<t tx="ville.20090602190735.4770">_foo = 0

@g.command('my-test-command')
def mytestcommand(event):
    global _foo
    _foo = 1

try:
    c.k.simulateCommand('my-test-command')
    assert _foo == 1
    
    # bonus test: c.app.commanders()
    assert c in g.app.commanders()

except AttributeError:
    # Raised only for unit testing.
    pass
</t>
</tnodes>
</leo_file>
