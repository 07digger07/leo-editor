<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.55" body_secondary_ratio="0.59">
	<global_window_position top="39" left="191" height="977" width="1446"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070417092935"><vh>Startup</vh>
<v t="ekr.20101220161557.6011"><vh>@file unitTestStartup.txt</vh></v>
<v t="ekr.20041121151002"><vh>@settings</vh>
<v t="ekr.20110521073115.3494"><vh>colorizer colors</vh>
<v t="ekr.20110521073115.3495"><vh>@@color keyword3_color = orange</vh></v>
<v t="ekr.20110521073115.3496"><vh>@@color keyword4_color = pink</vh></v>
</v>
<v t="ekr.20111026111009.3972"><vh>@data import_xml_tags</vh></v>
<v t="ekr.20080324133327.2"><vh>@bool allow_middle_button_paste = True</vh></v>
<v t="ekr.20101009105124.6195"><vh>@bool put_expansion_bits_in_leo_files = False</vh></v>
<v t="ekr.20051013162226"><vh>@bool test_setting = True</vh></v>
<v t="ekr.20070503064257"><vh>@bool use_chapters = True</vh></v>
<v t="ekr.20070528100318"><vh>@bool write_strips_blank_lines = False</vh></v>
<v t="ekr.20111112093605.4679"><vh>@shortcuts</vh></v>
<v t="ekr.20050328101834"><vh>@page http plugin</vh>
<v t="ekr.20050328101834.1"><vh>@bool http_active = False</vh></v>
<v t="ekr.20050328101834.2"><vh>@int  port = 8080</vh></v>
<v t="ekr.20050328101834.3"><vh>@string rst_http_attributename = ''</vh></v>
</v>
</v>
<v t="ekr.20111112092813.4154"><vh>@command cls</vh></v>
</v>
<v t="ekr.20051012104957"><vh>Docs</vh>
<v t="bwmulder.20050108100437.1"><vh>How to run unit tests</vh></v>
<v t="ekr.20050618061835"><vh>How to use the @test directive, by Roger Erens</vh>
<v t="ekr.20050618061835.1"><vh>Intro</vh>
<v t="ekr.20050618061835.2"><vh>@url http://www.onlamp.com/pub/a/python/2005/02/03/tdd_pyunit2.html</vh></v>
</v>
<v t="ekr.20050618061835.3"><vh>Preparations: adding a button</vh>
<v t="ekr.20050618061835.4"><vh>@@button Do @test</vh></v>
</v>
<v t="ekr.20050618061835.5"><vh>Alpha</vh>
<v t="ekr.20050618061835.6"><vh>@test my first Leo test</vh></v>
<v t="ekr.20050618061835.7"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.8"><vh>Bravo</vh>
<v t="ekr.20050618061835.9"><vh>@@test my second Leo test</vh></v>
<v t="ekr.20050618061835.10"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.11"><vh>It takes two to tango</vh>
<v t="ekr.20050618061835.6"></v>
<v t="ekr.20050618061835.9"></v>
<v t="ekr.20050618061835.12"><vh>output on the console</vh></v>
</v>
<v t="ekr.20050618061835.13"><vh>Life gets more interesting</vh>
<v t="ekr.20050618061835.14"><vh>@@test koekiemonster.wants()</vh>
<v t="ekr.20050618061835.15"><vh>input data</vh></v>
<v t="ekr.20050618061835.16"><vh>expected result</vh></v>
</v>
<v t="ekr.20050618061835.17"><vh>output on the console</vh></v>
<v t="ekr.20050618061835.18"><vh>output on the console using print statements</vh></v>
</v>
<v t="ekr.20050618061835.19"><vh>How about @suite?</vh></v>
<v t="ekr.20050618061835.20"><vh>Final remarks</vh></v>
</v>
</v>
<v t="ekr.20100123172713.5114"><vh>Scripts</vh>
<v t="ekr.20100102164959.5088"><vh>Count pages</vh></v>
<v t="ekr.20100123172713.5116"><vh>Clean all tnodeLists</vh></v>
<v t="ekr.20070217065840"><vh>Scripts that make unit tests</vh>
<v t="ekr.20070217065840.1"><vh>@@command make-test @key = Alt-5</vh></v>
<v t="ekr.20070217065840.2"><vh>@@command do-before @key = Alt-6</vh>
<v t="ekr.20070217065840.3"><vh>getSel</vh></v>
<v t="ekr.20070217065840.4"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.5"><vh>putSelectionInHeadline</vh></v>
</v>
<v t="ekr.20070217065840.6"><vh>@@command do-after @key = Alt-7</vh>
<v t="ekr.20070217072822"><vh>getSel</vh></v>
<v t="ekr.20070217065840.8"><vh>findNodes</vh></v>
<v t="ekr.20070217065840.9"><vh>putSelectionInHeadline</vh></v>
</v>
</v>
<v t="ekr.20070113145100"><vh>Create chinese folder</vh></v>
<v t="ekr.20071113140035"><vh>Find unique @ test nodes</vh></v>
<v t="ekr.20091206090247.5060"><vh>Clear all uA's, tnodeLists, etc.</vh>
<v t="ekr.20091206090247.5061"><vh>Clean unused tnodeLists</vh></v>
<v t="ekr.20091206090247.5062"><vh>Clear all timestamps</vh></v>
<v t="ekr.20091206090247.5063"><vh>Clear all uAs (unknown attributes)</vh></v>
</v>
</v>
<v t="ekr.20071113203234"><vh>Test files</vh>
<v t="ekr.20090704085350.5007"><vh>@@file ../test/unittest/at-file-test.py</vh></v>
<v t="ekr.20090704085350.5040"><vh>@@noref ../test/unittest/at-noref-test.py</vh>
<v t="ekr.20100123093044.5115"><vh>spam</vh></v>
<v t="ekr.20100123093044.5117"><vh>eggs</vh></v>
</v>
<v t="ekr.20090704085350.5028"><vh>@asis ../test/unittest/at-asis-test.py</vh>
<v t="ekr.20090704085350.5029"><vh>spam</vh></v>
<v t="ekr.20090704085350.5030"><vh>eggs</vh></v>
</v>
<v t="ekr.20110610122533.3407"><vh>@auto ../test/at-auto-unit-test.py</vh></v>
<v t="ekr.20090704085350.5056"><vh>@auto ../test/unittest/at-auto-test.py</vh></v>
<v t="ekr.20080904084223.1"><vh>@auto unittest/at-auto-line-number-test.py</vh></v>
<v t="ekr.20111021115306.3697"><vh>@file ../test/unittest/tex-error.tex</vh></v>
<v t="ekr.20110615130436.3317" a="O"><vh>@file nonexistent-directory/orphan-bit-test.txt</vh>
<v t="ekr.20110615130436.3318"><vh>Child goes here.</vh></v>
</v>
<v t="ekr.20080904102243.2"><vh>@file unittest/at-file-line-number-test.py</vh></v>
<v t="ekr.20090704085350.5034"><vh>@nosent ../test/unittest/at-nosent-test.py</vh>
<v t="ekr.20090704085350.5035"><vh>spam</vh></v>
<v t="ekr.20090704085350.5036"><vh>eggs</vh></v>
</v>
<v t="ekr.20080907123324.2"><vh>@nosent unittest/at-nosent-line-number-test.py</vh>
<v t="ekr.20080907123324.3"><vh>at-nosent-child</vh></v>
</v>
<v t="ekr.20090704085350.5014"><vh>@shadow ../test/unittest/at-shadow-test.py</vh></v>
<v t="ekr.20080907122804.1"><vh>@shadow unittest/at-shadow-line-number-test.py</vh></v>
<v t="ekr.20100731163237.5782"><vh>@thin ../test/unittest/at-thin-html-test.html</vh></v>
<v t="ekr.20090704085350.5022"><vh>@thin ../test/unittest/at-thin-test.py</vh></v>
<v t="ekr.20070627082044.811"><vh>@thin ../test/unittest/batchTest.py</vh></v>
<v t="ekr.20070627082044.808"><vh>@thin ../test/unittest/errorTest.py</vh></v>
<v t="ekr.20080905130723.3"><vh>@thin unittest/at-thin-line-number-test.py</vh></v>
</v>
<v t="ekr.20101220161557.6013"><vh>Slow tests</vh>
<v t="ekr.20101220161557.6014"><vh>@file inactiveTests.txt</vh></v>
</v>
<v t="ekr.20101220161557.6016"><vh>Active Unit Tests</vh>
<v t="ekr.20070114140212" descendentVnodeUnknownAttributes="7d7100285808000000302e372e31362e3671017d71025808000000616e6e6f7461746571037d7104735805000000302e382e3671057d71065808000000616e6e6f7461746571077d7108735808000000302e372e31342e3471097d710a5808000000616e6e6f74617465710b7d710c735808000000302e372e31302e39710d7d710e5809000000756e69745f74657374710f580400000061626364711073752e"><vh>@file activeUnitTests.txt</vh></v>
</v>
<v t="ekr.20111113073542.3982"><vh>Failures when run externally</vh>
<v t="ekr.20050112095306.1"><vh>leoAtFile (not valid when run externally)</vh>
<v t="ekr.20041021065844"><vh>@test @asis</vh>
<v t="ekr.20041021065903"><vh>#@asis</vh>
<v t="ekr.20041021065903.1"><vh>&lt;&lt; section &gt;&gt;</vh></v>
<v t="ekr.20041021065903.2"><vh>unnamed node</vh></v>
</v>
<v t="ekr.20041021065844.1"><vh>Output</vh></v>
</v>
<v t="ekr.20090704085350.5044"><vh>@test @asis: shape of tree</vh></v>
<v t="ekr.20090627070131.4971"><vh>@test @auto (newlines at end of nodes)</vh>
<v t="ekr.20090627070131.4975"><vh>#@auto</vh>
<v t="ekr.20090627070131.4976"><vh>spam</vh></v>
<v t="ekr.20090627070131.4977"><vh>cheese</vh></v>
</v>
<v t="ekr.20090627070131.4978"><vh>Output</vh></v>
</v>
<v t="ekr.20100801125533.5787"><vh>@test @auto (no newline at end of nodes)</vh>
<v t="ekr.20100801125533.5788"><vh>#@auto</vh>
<v t="ekr.20100801125533.5789"><vh>spam</vh></v>
<v t="ekr.20100801125533.5790"><vh>cheese</vh></v>
</v>
<v t="ekr.20100801125533.5791"><vh>Output</vh></v>
</v>
<v t="ekr.20090704085350.5052"><vh>@test @auto: shape of tree</vh></v>
<v t="ekr.20090225102051.2"><vh>@test @edit</vh>
<v t="ekr.20090225102051.3"><vh>#@edit</vh></v>
<v t="ekr.20090225102051.4"><vh>Output</vh></v>
</v>
<v t="ekr.20110524120515.3489"><vh>@test @raw</vh>
<v t="ekr.20110524120515.3490"><vh>#@file</vh></v>
<v t="ekr.20110524120515.3491"><vh>Output</vh></v>
</v>
<v t="ekr.20090704085350.5018"><vh>@test @shadow: shape of tree</vh></v>
<v t="ekr.20040707141957.12"><vh>@test @thin: @last</vh>
<v t="ekr.20040707141957.13"><vh>#@thin</vh></v>
<v t="ekr.20040707141957.14"><vh>Output</vh></v>
</v>
<v t="ekr.20100731163237.5778"><vh>@test @thin: html section references</vh></v>
<v t="ekr.20090704085350.5046"><vh>@test @thin: shape of tree</vh></v>
<v t="ekr.20111021115306.3696"><vh>@test @file: tex bug</vh></v>
<v t="ekr.20100802220019.5795"><vh>@test at.deleteUnvistedNodes</vh></v>
<v t="ekr.20071113145804.8"><vh>@test at.directiveKind4</vh></v>
<v t="ekr.20100225094004.5385"><vh>@test at.isFileLike</vh></v>
<v t="ekr.20071113143844.5"><vh>@test at.isSignificantTree</vh></v>
<v t="ekr.20110524091618.3488"><vh>@test at.massageDocPart</vh></v>
<v t="ekr.20090529115704.4562"><vh>@test at.open/closeStringFile</vh></v>
<v t="ekr.20090529115704.4563"><vh>@test at.openForWrite: not a shadow file</vh></v>
<v t="ekr.20090529115704.4564"><vh>@test at.readOneAtShadowNode</vh>
<v t="ekr.20090529115704.4565"><vh>@@shadow unittest/read_test.py</vh></v>
</v>
<v t="ekr.20050105093136"><vh>@test at.remove</vh></v>
<v t="ekr.20050105093524"><vh>@test at.rename</vh></v>
<v t="ekr.20090529115704.4566"><vh>@test at.replaceFileWithString</vh></v>
<v t="ekr.20050105094311"><vh>@test at.replaceTargetFileIfDifferent (different)</vh></v>
<v t="ekr.20050105095743"><vh>@test at.replaceTargetFileIfDifferent (identical)</vh></v>
<v t="ekr.20050105100227"><vh>@test at.replaceTargetFileIfDifferent (no target file)</vh></v>
<v t="ekr.20090529115704.4567"><vh>@test at.writeOneAtShadowNode</vh>
<v t="ekr.20090529115704.4568"><vh>@@shadow unittest/test_1.py</vh></v>
</v>
<v t="ekr.20071113145804.7"><vh>@test parseLeoSentinel</vh></v>
<v t="ekr.20060602195313"><vh>@test reads/write using @comment</vh>
<v t="ekr.20060602195313.2"><vh>root</vh>
<v t="ekr.20060602195313.3"><vh>&lt;&lt; Get LRR Task &gt;&gt;</vh></v>
<v t="ekr.20060602195313.4"><vh>&lt;&lt; Start LRR &gt;&gt;</vh></v>
</v>
<v t="ekr.20060602195914"><vh>Result</vh></v>
</v>
<v t="ekr.20100131180007.5462"><vh>@test verbatim sentinel</vh></v>
<v t="ekr.20110615130436.3319"><vh>@test writing a .leo file retains orphan bits</vh></v>
<v t="ekr.20071113201736"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20101021205258.6011"><vh>at.Directives &amp; directories</vh>
<v t="ekr.20100131180007.5455"><vh>@test at.fullDirectoryPath</vh>
<v t="ekr.20100131180007.5456"><vh>@path abc</vh>
<v t="ekr.20100131180007.5457"><vh>xyz</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5454"><vh>@test at.get/setPathUa</vh></v>
<v t="ekr.20100131180007.5461"><vh>@test at.replaceFileWithString</vh></v>
<v t="ekr.20100131180007.5458"><vh>@test at.scanAllDirectives (minimal)</vh></v>
<v t="ekr.20071113090055.4"><vh>@test at.scanAllDirectives</vh></v>
</v>
<v t="ekr.20101021210253.6018"><vh>Unused</vh>
<v t="ekr.20040712101754.103"><vh>@@test @file no newline</vh>
<v t="ekr.20040712101754.104"><vh>#@file</vh></v>
<v t="ekr.20040712101754.105"><vh>Output</vh></v>
</v>
<v t="ekr.20040712101754.106"><vh>@@test @file one newline</vh>
<v t="ekr.20040712101754.107"><vh>#@file</vh></v>
<v t="ekr.20040712101754.108"><vh>Output</vh></v>
</v>
<v t="ekr.20040712101754.109"><vh>@@test @file two newlines</vh>
<v t="ekr.20040712101754.110"><vh>#@file</vh></v>
<v t="ekr.20040712101754.111"><vh>Output</vh></v>
</v>
<v t="ekr.20090704085350.5010"><vh>@@test @file: shape of tree</vh></v>
</v>
</v>
<v t="ekr.20071113192611"><vh>leoEditCommands (not valid when run externally)</vh>
<v t="ekr.20070131175538"><vh> Commands A-B</vh>
<v t="ekr.20061101121602.78"><vh>@test add-space-to-lines</vh>
<v t="ekr.20061101121602.79"><vh>work</vh></v>
<v t="ekr.20061101121602.80"><vh>before sel=2.0,4.6</vh></v>
<v t="ekr.20061101121602.81"><vh>after sel=2.0,4.7</vh></v>
</v>
<v t="ekr.20061101121602.82"><vh>@test add-tab-to-lines</vh>
<v t="ekr.20061101121602.83"><vh>work</vh></v>
<v t="ekr.20061101121602.84"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.85"><vh>after sel=2.0,5.10</vh></v>
</v>
<v t="ekr.20071113145804.16"><vh>@test apropos_bindings</vh></v>
<v t="ekr.20071113145804.17"><vh>@test apropos_find_commands</vh></v>
<v t="ekr.20061101121602.86"><vh>@test back-char</vh>
<v t="ekr.20061101121602.87"><vh>work</vh></v>
<v t="ekr.20061101121602.88"><vh>before sel=3.8,3.8</vh></v>
<v t="ekr.20061101121602.89"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20061101121602.90"><vh>@test back-char-extend-selection</vh>
<v t="ekr.20061101121602.91"><vh>work</vh></v>
<v t="ekr.20061101121602.92"><vh>before sel=4.12,4.12</vh></v>
<v t="ekr.20061101121602.93"><vh>after sel=4.11,4.12</vh></v>
</v>
<v t="ekr.20061101121602.94"><vh>@test back-paragraph</vh>
<v t="ekr.20061101121602.95"><vh>work</vh></v>
<v t="ekr.20061101121602.96"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.97"><vh>after sel=6.7,6.7</vh></v>
</v>
<v t="ekr.20061101121602.98"><vh>@test back-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.99"><vh>work</vh></v>
<v t="ekr.20061101121602.100"><vh>before sel=9.0,9.5</vh></v>
<v t="ekr.20061101121602.101"><vh>after sel=6.7,9.5</vh></v>
</v>
<v t="ekr.20061101121602.102"><vh>@test back-sentence</vh>
<v t="ekr.20061101121602.103"><vh>work</vh></v>
<v t="ekr.20061101121602.104"><vh>before sel=3.169,3.169</vh></v>
<v t="ekr.20061101121602.105"><vh>after sel=3.143,3.143</vh></v>
</v>
<v t="ekr.20061101121602.106"><vh>@test back-sentence-extend-selection</vh>
<v t="ekr.20061101121602.107"><vh>work</vh></v>
<v t="ekr.20061101121602.108"><vh>before sel=3.208,3.208</vh></v>
<v t="ekr.20061101121602.109"><vh>after sel=3.143,3.208</vh></v>
</v>
<v t="ekr.20061101121602.110"><vh>@test back-to-indentation</vh>
<v t="ekr.20061101121602.111"><vh>work</vh></v>
<v t="ekr.20061101121602.112"><vh>before sel=4.13,4.13</vh></v>
<v t="ekr.20061101121602.113"><vh>after sel=4.8,4.8</vh></v>
</v>
<v t="ekr.20090427104851.7"><vh>@test back-to-home (at start of line)</vh>
<v t="ekr.20090427104851.8"><vh>work</vh></v>
<v t="ekr.20090427104851.9"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20090427104851.10"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20090427104851.15"><vh>@test back-to-home (at indentation</vh>
<v t="ekr.20090427104851.16"><vh>work</vh></v>
<v t="ekr.20090427104851.17"><vh>before sel=2.4,2.4</vh></v>
<v t="ekr.20090427104851.18"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20090427104851.11"><vh>@test back-to-home (at end of line)</vh>
<v t="ekr.20090427104851.12"><vh>work</vh></v>
<v t="ekr.20090427104851.13"><vh>before sel=2.12,2.12</vh></v>
<v t="ekr.20090427104851.14"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.114"><vh>@test back-word</vh>
<v t="ekr.20061101121602.115"><vh>work</vh></v>
<v t="ekr.20061101121602.116"><vh>before sel=1.183,1.183</vh></v>
<v t="ekr.20061101121602.117"><vh>after sel=1.177,1.177</vh></v>
</v>
<v t="ekr.20061101121602.118"><vh>@test back-word-extend-selection</vh>
<v t="ekr.20061101121602.119"><vh>work</vh></v>
<v t="ekr.20061101121602.120"><vh>before sel=3.342,3.342</vh></v>
<v t="ekr.20061101121602.121"><vh>after sel=3.331,3.342</vh></v>
</v>
<v t="ekr.20061101121602.122"><vh>@test backward-delete-char</vh>
<v t="ekr.20061101121602.123"><vh>work</vh></v>
<v t="ekr.20061101121602.124"><vh>before sel=1.9,1.9</vh></v>
<v t="ekr.20061101121602.125"><vh>after sel=1.8,1.8</vh></v>
</v>
<v t="ekr.20071007121529"><vh>@test backward-delete-char  (middle of line)</vh>
<v t="ekr.20071007121529.1"><vh>work</vh></v>
<v t="ekr.20071007121529.2"><vh>before sel=1.6,1.6</vh></v>
<v t="ekr.20071007121529.3"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120947"><vh>@test backward-delete-char (last char)</vh>
<v t="ekr.20071007120947.6"><vh>work</vh></v>
<v t="ekr.20071007120947.7"><vh>before sel=2.9,2.9</vh></v>
<v t="ekr.20071007120947.8"><vh>after sel=2.8,2.8</vh></v>
</v>
<v t="ekr.20100817131738.5886"><vh>@test backward-delete-word (no selection)</vh>
<v t="ekr.20100817131738.5887"><vh>work</vh></v>
<v t="ekr.20100817131738.5888"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20100817131738.5889"><vh>after sel=1.4,1.4</vh></v>
</v>
<v t="ekr.20100817131738.5894"><vh>@test backward-delete-word (selection)</vh>
<v t="ekr.20100817131738.5895"><vh>work</vh></v>
<v t="ekr.20100817131738.5896"><vh>before sel=1.7,1.12</vh></v>
<v t="ekr.20100817131738.5897"><vh>after sel=1.7,1.7</vh></v>
</v>
<v t="ekr.20061101121602.126"><vh>@test backward-kill-paragraph</vh>
<v t="ekr.20061101121602.127"><vh>work</vh></v>
<v t="ekr.20061101121602.128"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.129"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20070131173932"><vh>@test backward-kill-sentence</vh>
<v t="ekr.20070131173932.1"><vh>work</vh></v>
<v t="ekr.20070131173932.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131173932.3"><vh>after sel=2.23,2.23</vh></v>
</v>
<v t="ekr.20081215084144.2"><vh>@test backward-kill-word</vh>
<v t="ekr.20081215084144.3"><vh>work</vh></v>
<v t="ekr.20081215084144.4"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20081215084144.5"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.130"><vh>@test beginning-of-buffer</vh>
<v t="ekr.20061101121602.131"><vh>work</vh></v>
<v t="ekr.20061101121602.132"><vh>before sel=5.56,5.56</vh></v>
<v t="ekr.20061101121602.133"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.134"><vh>@test beginning-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.135"><vh>work</vh></v>
<v t="ekr.20061101121602.136"><vh>before sel=3.423,3.423</vh></v>
<v t="ekr.20061101121602.137"><vh>after sel=1.0,3.423</vh></v>
</v>
<v t="ekr.20061101121602.138"><vh>@test beginning-of-line</vh>
<v t="ekr.20061101121602.139"><vh>work</vh></v>
<v t="ekr.20061101121602.140"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.141"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.142"><vh>@test beginning-of-line-extend-selection</vh>
<v t="ekr.20061101121602.143"><vh>work</vh></v>
<v t="ekr.20061101121602.144"><vh>before sel=4.10,4.10</vh></v>
<v t="ekr.20061101121602.145"><vh>after sel=4.0,4.10</vh></v>
</v>
<v t="ekr.20081111084046.1"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20081111084046.2"><vh> Commands C-E</vh>
<v t="ekr.20061101121602.146"><vh>@test capitalize-word</vh>
<v t="ekr.20061101121602.147"><vh>work</vh></v>
<v t="ekr.20061101121602.148"><vh>before sel=3.6,3.6</vh></v>
<v t="ekr.20061101121602.149"><vh>after sel=3.6,3.6</vh></v>
</v>
<v t="ekr.20061101121602.150"><vh>@test center-line</vh>
<v t="ekr.20061101121602.151"><vh>work</vh></v>
<v t="ekr.20061101121602.152"><vh>before sel=3.0,9.0</vh></v>
<v t="ekr.20061101121602.153"><vh>after sel=3.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.154"><vh>@test center-region</vh>
<v t="ekr.20061101121602.155"><vh>work</vh></v>
<v t="ekr.20061101121602.156"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.157"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.158"><vh>@test clear-selected-text</vh>
<v t="ekr.20061101121602.159"><vh>work</vh></v>
<v t="ekr.20061101121602.160"><vh>before sel=2.4,4.4</vh></v>
<v t="ekr.20061101121602.161"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20111006105711.3544"><vh>@test clone-marked-nodes</vh></v>
<v t="ekr.20061101121602.162"><vh>@test count-region</vh>
<v t="ekr.20061101121602.163"><vh>work</vh></v>
<v t="ekr.20061101121602.164"><vh>before sel=2.4,4.8</vh></v>
<v t="ekr.20061101121602.165"><vh>after sel=2.4,4.8</vh></v>
</v>
<v t="ekr.20061101121602.166"><vh>@test delete-char</vh>
<v t="ekr.20061101121602.167"><vh>work</vh></v>
<v t="ekr.20061101121602.168"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.169"><vh>after sel=1.5,1.5</vh></v>
</v>
<v t="ekr.20071007120750.3"><vh>@test delete-indentation</vh>
<v t="ekr.20071007121115.1"><vh>work</vh></v>
<v t="ekr.20071007121115.2"><vh>before sel=2.8,2.8</vh></v>
<v t="ekr.20071007121115.3"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20111006064419.3491"><vh>@test delete-marked-nodes</vh></v>
<v t="ekr.20070131162935"><vh>@test delete-spaces</vh>
<v t="ekr.20070131162935.1"><vh>work</vh></v>
<v t="ekr.20070131162935.2"><vh>before sel=3.2,3.2</vh></v>
<v t="ekr.20070131162935.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20100830113702.5969"><vh>@test delete-word (no selection)</vh>
<v t="ekr.20100830113702.5970"><vh>work</vh></v>
<v t="ekr.20100830113702.5971"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20100830113702.5972"><vh>after sel=1.10,1.10</vh></v>
</v>
<v t="ekr.20100830113702.5977"><vh>@test delete-word (selection)</vh>
<v t="ekr.20100830113702.5978"><vh>work</vh></v>
<v t="ekr.20100830113702.5979"><vh>before sel=1.7,1.12</vh></v>
<v t="ekr.20100830113702.5980"><vh>after sel=1.7,1.7</vh></v>
</v>
<v t="ekr.20061101121602.170"><vh>@test do-nothing</vh>
<v t="ekr.20061101121602.171"><vh>work</vh></v>
<v t="ekr.20061101121602.172"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.173"><vh>after sel=1.0,1.0</vh></v>
</v>
<v t="ekr.20061101121602.174"><vh>@test downcase-region</vh>
<v t="ekr.20061101121602.175"><vh>work</vh></v>
<v t="ekr.20061101121602.176"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.177"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20061101121602.178"><vh>@test downcase-word</vh>
<v t="ekr.20061101121602.179"><vh>work</vh></v>
<v t="ekr.20061101121602.180"><vh>before sel=1.4,1.4</vh></v>
<v t="ekr.20061101121602.181"><vh>after sel=1.4,1.4</vh></v>
</v>
<v t="ekr.20061101121602.182"><vh>@test end-of-buffer</vh>
<v t="ekr.20061101121602.183"><vh>work</vh></v>
<v t="ekr.20061101121602.184"><vh>before sel=1.3,1.3</vh></v>
<v t="ekr.20061101121602.185"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.186"><vh>@test end-of-buffer-extend-selection</vh>
<v t="ekr.20061101121602.187"><vh>work</vh></v>
<v t="ekr.20061101121602.188"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.189"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.190"><vh>@test end-of-line</vh>
<v t="ekr.20061101121602.191"><vh>work</vh></v>
<v t="ekr.20061101121602.192"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20061101121602.193"><vh>after sel=1.10,1.10</vh></v>
</v>
<v t="ekr.20061128082002"><vh>@test end-of-line 2</vh>
<v t="ekr.20061128082002.1"><vh>work</vh></v>
<v t="ekr.20061128082002.2"><vh>before sel=6.0,6.0</vh></v>
<v t="ekr.20061128082002.3"><vh>after sel=6.9,6.9</vh></v>
</v>
<v t="ekr.20061101121602.194"><vh>@test end-of-line-extend-selection</vh>
<v t="ekr.20061101121602.195"><vh>work</vh></v>
<v t="ekr.20061101121602.196"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061101121602.197"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="ekr.20061101121602.198"><vh>@test exchange-point-mark</vh>
<v t="ekr.20061101121602.199"><vh>work</vh></v>
<v t="ekr.20061101121602.200"><vh>before sel=1.0,1.10</vh></v>
<v t="ekr.20061101121602.201"><vh>after sel=1.0,1.10</vh></v>
</v>
<v t="ekr.20061101121602.202"><vh>@test extend-to-line</vh>
<v t="ekr.20061101121602.203"><vh>work</vh></v>
<v t="ekr.20061101121602.204"><vh>before sel=3.3,3.3</vh></v>
<v t="ekr.20061101121602.205"><vh>after sel=3.0,3.10</vh></v>
</v>
<v t="ekr.20061101121602.206"><vh>@test extend-to-paragraph</vh>
<v t="ekr.20061101121602.207"><vh>work</vh></v>
<v t="ekr.20061101121602.208"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.209"><vh>after sel=8.0,13.33</vh></v>
</v>
<v t="ekr.20061101121602.210"><vh>@test extend-to-sentence</vh>
<v t="ekr.20061101121602.211"><vh>work</vh></v>
<v t="ekr.20061101121602.212"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061101121602.213"><vh>after sel=1.395,3.142</vh></v>
</v>
<v t="ekr.20061101121602.214"><vh>@test extend-to-word</vh>
<v t="ekr.20061101121602.215"><vh>work</vh></v>
<v t="ekr.20061101121602.216"><vh>before sel=3.10,3.10</vh></v>
<v t="ekr.20061101121602.217"><vh>after sel=3.4,3.12</vh></v>
</v>
<v t="ekr.20081111082931.1"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20070131175538.1"><vh> Commands F-L</vh>
<v t="ekr.20061128090441"><vh>@@test kill-line end-2</vh>
<v t="ekr.20061128090441.1"><vh>work</vh></v>
<v t="ekr.20061128090441.3"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090441.2"><vh>after sel=2.6,2.6</vh></v>
</v>
<v t="ekr.20061101121602.218"><vh>@test fill-paragraph</vh>
<v t="ekr.20061101121602.219"><vh>work</vh></v>
<v t="ekr.20061101121602.220"><vh>before sel=3.0,3.7</vh></v>
<v t="ekr.20061101121602.221"><vh>after sel=8.33,8.33</vh></v>
</v>
<v t="ekr.20071007120750.4"><vh>@test fill-region (one paragraph)</vh>
<v t="ekr.20071007121312.1"><vh>work</vh></v>
<v t="ekr.20071007121312.2"><vh>before sel=1.0,9.7</vh></v>
<v t="ekr.20071007121312.3"><vh>after sel=6.7,6.7</vh></v>
</v>
<v t="ekr.20071007124202"><vh>@test fill-region (three paragraphs)</vh>
<v t="ekr.20071007124202.1"><vh>work</vh></v>
<v t="ekr.20071007124202.2"><vh>before sel=1.0,24.78</vh></v>
<v t="ekr.20071007124202.3"><vh>after sel=18.18,18.18</vh></v>
</v>
<v t="ekr.20061101121602.222"><vh>@test forward-char</vh>
<v t="ekr.20061101121602.223"><vh>work</vh></v>
<v t="ekr.20061101121602.224"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.225"><vh>after sel=1.3,1.3</vh></v>
</v>
<v t="ekr.20061101121602.226"><vh>@test forward-char-extend-selection</vh>
<v t="ekr.20061101121602.227"><vh>work</vh></v>
<v t="ekr.20061101121602.228"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20061101121602.229"><vh>after sel=1.1,1.2</vh></v>
</v>
<v t="ekr.20061101121602.230"><vh>@test forward-end-word (end of line)</vh>
<v t="ekr.20061101121602.231"><vh>work</vh></v>
<v t="ekr.20061101121602.232"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.233"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20061101121602.234"><vh>@test forward-end-word (start of word)</vh>
<v t="ekr.20061101121602.235"><vh>work</vh></v>
<v t="ekr.20061101121602.236"><vh>before sel=1.310,1.310</vh></v>
<v t="ekr.20061101121602.237"><vh>after sel=1.317,1.317</vh></v>
</v>
<v t="ekr.20061101121602.238"><vh>@test forward-end-word-extend-selection</vh>
<v t="ekr.20061101121602.239"><vh>work</vh></v>
<v t="ekr.20061101121602.240"><vh>before sel=3.20,3.20</vh></v>
<v t="ekr.20061101121602.241"><vh>after sel=3.20,3.30</vh></v>
</v>
<v t="ekr.20061101121602.242"><vh>@test forward-paragraph</vh>
<v t="ekr.20061101121602.243"><vh>work</vh></v>
<v t="ekr.20061101121602.244"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.245"><vh>after sel=15.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.246"><vh>@test forward-paragraph-extend-selection</vh>
<v t="ekr.20061101121602.247"><vh>work</vh></v>
<v t="ekr.20061101121602.248"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20061101121602.249"><vh>after sel=10.0,15.0</vh></v>
</v>
<v t="ekr.20061101121602.250"><vh>@test forward-sentence</vh>
<v t="ekr.20061101121602.251"><vh>work</vh></v>
<v t="ekr.20061101121602.252"><vh>before sel=3.17,3.17</vh></v>
<v t="ekr.20061101121602.253"><vh>after sel=3.142,3.142</vh></v>
</v>
<v t="ekr.20061101121602.254"><vh>@test forward-sentence-extend-selection</vh>
<v t="ekr.20061101121602.255"><vh>work</vh></v>
<v t="ekr.20061101121602.256"><vh>before sel=1.264,1.264</vh></v>
<v t="ekr.20061101121602.257"><vh>after sel=1.264,1.395</vh></v>
</v>
<v t="ekr.20061101121602.258"><vh>@test forward-word</vh>
<v t="ekr.20061101121602.259"><vh>work</vh></v>
<v t="ekr.20061101121602.260"><vh>before sel=1.261,1.261</vh></v>
<v t="ekr.20061101121602.261"><vh>after sel=1.273,1.273</vh></v>
</v>
<v t="ekr.20061101121602.262"><vh>@test forward-word-extend-selection</vh>
<v t="ekr.20061101121602.263"><vh>work</vh></v>
<v t="ekr.20061101121602.264"><vh>before sel=1.395,1.395</vh></v>
<v t="ekr.20061101121602.265"><vh>after sel=1.395,3.0</vh></v>
</v>
<v t="ekr.20070305095401"><vh>@test goNext/PrevVisitedNode</vh></v>
<v t="ekr.20100212104817.5351"><vh>@test help-for-command</vh></v>
<v t="ekr.20061101121602.266"><vh>@test indent-relative</vh>
<v t="ekr.20061101121602.267"><vh>work</vh></v>
<v t="ekr.20061101121602.268"><vh>before sel=5.0,5.0</vh></v>
<v t="ekr.20061101121602.269"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20061101121602.270"><vh>@test indent-rigidly</vh>
<v t="ekr.20061101121602.271"><vh>work</vh></v>
<v t="ekr.20061101121602.272"><vh>before sel=2.0,5.0</vh></v>
<v t="ekr.20061101121602.273"><vh>after sel=2.0,5.1</vh></v>
</v>
<v t="ekr.20071007120750.5"><vh>@test indent-to-comment-column</vh>
<v t="ekr.20071007121312.5"><vh>work</vh></v>
<v t="ekr.20071007121312.6"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20071007121312.7"><vh>after sel=2.4,2.4</vh></v>
</v>
<v t="ekr.20061101121602.274"><vh>@test insert-newline</vh>
<v t="ekr.20061101121602.275"><vh>work</vh></v>
<v t="ekr.20061101121602.276"><vh>before sel=1.8,1.8</vh></v>
<v t="ekr.20061101121602.277"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20061101121602.278"><vh>@test insert-parentheses</vh>
<v t="ekr.20061101121602.279"><vh>work</vh></v>
<v t="ekr.20061101121602.280"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.281"><vh>after sel=1.6,1.6</vh></v>
</v>
<v t="ekr.20061128090338"><vh>@test kill-line end-1</vh>
<v t="ekr.20061128090338.1"><vh>work</vh></v>
<v t="ekr.20061128090338.2"><vh>before sel=3.5,3.5</vh></v>
<v t="ekr.20061128090338.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090021"><vh>@test kill-line middle-1</vh>
<v t="ekr.20061128090021.1"><vh>work</vh></v>
<v t="ekr.20061128090021.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090021.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061128090147"><vh>@test kill-line middle-2</vh>
<v t="ekr.20061128090147.1"><vh>work</vh></v>
<v t="ekr.20061128090147.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20061128090147.3"><vh>after sel=3.0,3.0</vh></v>
</v>
<v t="ekr.20061101121602.282"><vh>@test kill-paragraph</vh>
<v t="ekr.20061101121602.283"><vh>work</vh></v>
<v t="ekr.20061101121602.285"><vh>before sel=9.0,9.0</vh></v>
<v t="ekr.20061101121602.284"><vh>after sel=8.0,8.0</vh></v>
</v>
<v t="ekr.20070131172706"><vh>@test kill-sentence</vh>
<v t="ekr.20070131172706.1"><vh>work</vh></v>
<v t="ekr.20070131172706.2"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20070131172706.3"><vh>after sel=1.27,1.27</vh></v>
</v>
<v t="ekr.20081215084144.7"><vh>@test kill-word</vh>
<v t="ekr.20081215084144.8"><vh>work</vh></v>
<v t="ekr.20081215084144.9"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20081215084144.10"><vh>after sel=2.7,2.7</vh></v>
</v>
<v t="ekr.20081111084046.3"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20110610122533.3369"><vh>goto-global-line tests</vh>
<v t="ekr.20110610122533.3388"><vh>Tests with @auto as the root</vh>
<v t="ekr.20110610122533.3389"><vh>@test goto-line-number @auto 1</vh></v>
<v t="ekr.20110610122533.3390"><vh>@test goto-global-line @auto 2</vh></v>
<v t="ekr.20110610122533.3391"><vh>@test goto-global-line @auto 3</vh></v>
<v t="ekr.20110610122533.3392"><vh>@test goto-global-line @auto 4</vh></v>
<v t="ekr.20110610122533.3406"><vh>@test goto-global-line @auto 5</vh></v>
</v>
<v t="ekr.20110610122533.3393"><vh>Tests with @file as the root</vh>
<v t="ekr.20110610122533.3394"><vh>@test goto-global-line @file 1</vh></v>
<v t="ekr.20110610122533.3395"><vh>@test goto-global-line @file 2</vh></v>
</v>
<v t="ekr.20110610122533.3396"><vh>Tests with @shadow as the root</vh>
<v t="ekr.20110610122533.3397"><vh>@test goto-global-line @shadow</vh></v>
</v>
<v t="ekr.20110610122533.3398"><vh>Tests with @nosent as the root</vh>
<v t="ekr.20110610122533.3399"><vh>@test goto-global-line @nosent</vh></v>
</v>
<v t="ekr.20110610122533.3401"><vh>@test goToLineNumber.findRoot 1</vh></v>
<v t="ekr.20110610122533.3404"><vh>@test goto_showResults not found</vh></v>
<v t="ekr.20110610122533.3405"><vh>@test zz restore the screen</vh></v>
</v>
</v>
<v t="ekr.20070131175646"><vh> Commands M-Z</vh>
<v t="ekr.20070131171218.1"><vh>@@test zap-to-chararacter</vh>
<v t="ekr.20070131171218.2"><vh>work</vh></v>
</v>
<v t="ekr.20061101121602.286"><vh>@test move-lines-down</vh>
<v t="ekr.20061101121602.287"><vh>work</vh></v>
<v t="ekr.20061101121602.288"><vh>before sel=3.3,4.3</vh></v>
<v t="ekr.20061101121602.289"><vh>after sel=4.3,5.3</vh></v>
</v>
<v t="ekr.20061101121602.290"><vh>@test move-lines-up</vh>
<v t="ekr.20061101121602.291"><vh>work</vh></v>
<v t="ekr.20061101121602.292"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.293"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20111006064419.3493"><vh>@test move-marked-nodes</vh></v>
<v t="ekr.20061101121602.294"><vh>@test move-past-close</vh>
<v t="ekr.20061101121602.295"><vh>work</vh></v>
<v t="ekr.20061101121602.296"><vh>before sel=1.10,1.10</vh></v>
<v t="ekr.20061101121602.297"><vh>after sel=1.12,1.12</vh></v>
</v>
<v t="ekr.20061101121602.298"><vh>@test move-past-close-extend-selection</vh>
<v t="ekr.20061101121602.299"><vh>work</vh></v>
<v t="ekr.20061101121602.300"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.301"><vh>after sel=3.7,3.11</vh></v>
</v>
<v t="ekr.20061101121602.302"><vh>@test newline-and-indent</vh>
<v t="ekr.20061101121602.303"><vh>work</vh></v>
<v t="ekr.20061101121602.304"><vh>before sel=2.6,2.6</vh></v>
<v t="ekr.20061101121602.305"><vh>after sel=3.4,3.4</vh></v>
</v>
<v t="ekr.20070315065720"><vh>@test next-line</vh>
<v t="ekr.20070315065720.1"><vh>work</vh></v>
<v t="ekr.20070315065720.2"><vh>before sel=1.1,1.1</vh></v>
<v t="ekr.20070315065720.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070315065849"><vh>@test previous-line</vh>
<v t="ekr.20070315065849.1"><vh>work</vh></v>
<v t="ekr.20070315065849.2"><vh>before sel=3.0,3.0</vh></v>
<v t="ekr.20070315065849.3"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20070217071121.1"><vh>@test rectangle-clear</vh>
<v t="ekr.20070217071121.2"><vh>work</vh></v>
<v t="ekr.20070217071121.3"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.4"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.5"><vh>@test rectangle-close</vh>
<v t="ekr.20070217071121.6"><vh>work</vh></v>
<v t="ekr.20070217071121.7"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.8"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.9"><vh>@test rectangle-delete</vh>
<v t="ekr.20070217071121.10"><vh>work</vh></v>
<v t="ekr.20070217071121.11"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.12"><vh>after sel=2.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.17"><vh>@test rectangle-kill</vh>
<v t="ekr.20070217071121.18"><vh>work</vh></v>
<v t="ekr.20070217071121.19"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.20"><vh>after sel=5.3,5.3</vh></v>
</v>
<v t="ekr.20070217071121.13"><vh>@test rectangle-open</vh>
<v t="ekr.20070217071121.14"><vh>work</vh></v>
<v t="ekr.20070217071121.15"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.16"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20070217071121.21"><vh>@test rectangle-string</vh>
<v t="ekr.20070217071121.22"><vh>work</vh></v>
<v t="ekr.20070217071121.23"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.24"><vh>after sel=2.3,5.8</vh></v>
</v>
<v t="ekr.20070217071121.25"><vh>@test rectangle-yank</vh>
<v t="ekr.20070217071121.26"><vh>work</vh></v>
<v t="ekr.20070217071121.28"><vh>before sel=2.3,5.6</vh></v>
<v t="ekr.20070217071121.27"><vh>after sel=2.3,5.6</vh></v>
</v>
<v t="ekr.20061101121602.306"><vh>@test remove-blank-lines</vh>
<v t="ekr.20061101121602.307"><vh>work</vh></v>
<v t="ekr.20061101121602.308"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.309"><vh>after sel=1.0,6.9</vh></v>
</v>
<v t="ekr.20061101121602.310"><vh>@test remove-space-from-lines</vh>
<v t="ekr.20061101121602.311"><vh>work</vh></v>
<v t="ekr.20061101121602.312"><vh>before sel=1.0,9.0</vh></v>
<v t="ekr.20061101121602.313"><vh>after sel=1.0,9.0</vh></v>
</v>
<v t="ekr.20061101121602.314"><vh>@test remove-tab-from-lines</vh>
<v t="ekr.20061101121602.315"><vh>work</vh></v>
<v t="ekr.20061101121602.316"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.317"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.318"><vh>@test reverse-region</vh>
<v t="ekr.20061101121602.319"><vh>work</vh></v>
<v t="ekr.20061101121602.320"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.321"><vh>after sel=7.10,7.10</vh></v>
</v>
<v t="ekr.20071113081247"><vh>@test reverse-sort-lines</vh>
<v t="ekr.20071113081247.1"><vh>work</vh></v>
<v t="ekr.20071113081247.2"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.3"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20071113082531"><vh>@test reverse-sort-lines-ignoring-case</vh>
<v t="ekr.20071113082531.1"><vh>work</vh></v>
<v t="ekr.20071113082531.2"><vh>before sel=1.0,6.1</vh></v>
<v t="ekr.20071113082531.3"><vh>after sel=1.0,6.1</vh></v>
</v>
<v t="ekr.20071113145804.4"><vh>@test selfInsertCommand-1</vh></v>
<v t="ekr.20071113145804.5"><vh>@test selfInsertCommand-2 (replacing tabs)</vh></v>
<v t="ekr.20071007120750.6"><vh>@test set-fill-prefix</vh></v>
<v t="ekr.20061101121602.322"><vh>@test sort-columns</vh>
<v t="ekr.20061101121602.323"><vh>work</vh></v>
<v t="ekr.20061101121602.324"><vh>before sel=1.0,6.2</vh></v>
<v t="ekr.20061101121602.325"><vh>after sel=1.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.326"><vh>@test sort-lines</vh>
<v t="ekr.20061101121602.327"><vh>work</vh></v>
<v t="ekr.20061101121602.328"><vh>before sel=2.0,5.6</vh></v>
<v t="ekr.20061101121602.329"><vh>after sel=2.0,5.6</vh></v>
</v>
<v t="ekr.20071113081247.8"><vh>@test sort-lines-ignoring-case</vh>
<v t="ekr.20071113081247.9"><vh>work</vh></v>
<v t="ekr.20071113081247.10"><vh>before sel=1.0,5.1</vh></v>
<v t="ekr.20071113081247.11"><vh>after sel=1.0,5.1</vh></v>
</v>
<v t="ekr.20100212104817.5346"><vh>@test sort-recent-files (new)</vh></v>
<v t="ekr.20100212104817.5347"><vh>@test sort-siblings (new)</vh>
<v t="ekr.20100212104817.5348"><vh>b</vh></v>
<v t="ekr.20100212104817.5349"><vh>a</vh></v>
<v t="ekr.20100212104817.5350"><vh>c</vh></v>
</v>
<v t="ekr.20061101121602.330"><vh>@test split-line</vh>
<v t="ekr.20061101121602.331"><vh>work</vh></v>
<v t="ekr.20061101121602.332"><vh>before sel=1.5,1.5</vh></v>
<v t="ekr.20061101121602.333"><vh>after sel=2.0,2.0</vh></v>
</v>
<v t="ekr.20061101121602.334"><vh>@test tabify</vh>
<v t="ekr.20061101121602.335"><vh>work</vh></v>
<v t="ekr.20061101121602.336"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.337"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.338"><vh>@test transpose-chars</vh>
<v t="ekr.20061101121602.339"><vh>work</vh></v>
<v t="ekr.20061101121602.340"><vh>before sel=1.2,1.2</vh></v>
<v t="ekr.20061101121602.341"><vh>after sel=1.2,1.2</vh></v>
</v>
<v t="ekr.20061101121602.342"><vh>@test transpose-lines</vh>
<v t="ekr.20061101121602.343"><vh>work</vh></v>
<v t="ekr.20061101121602.344"><vh>before sel=2.2,2.2</vh></v>
<v t="ekr.20061101121602.345"><vh>after sel=2.10,2.10</vh></v>
</v>
<v t="ekr.20061101121602.346"><vh>@test untabify</vh>
<v t="ekr.20061101121602.347"><vh>work</vh></v>
<v t="ekr.20061101121602.348"><vh>before sel=1.0,7.0</vh></v>
<v t="ekr.20061101121602.349"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20061101121602.350"><vh>@test upcase-region</vh>
<v t="ekr.20061101121602.351"><vh>work</vh></v>
<v t="ekr.20061101121602.352"><vh>before sel=3.0,4.0</vh></v>
<v t="ekr.20061101121602.353"><vh>after sel=3.0,4.0</vh></v>
</v>
<v t="ekr.20061101121602.354"><vh>@test upcase-word</vh>
<v t="ekr.20061101121602.355"><vh>work</vh></v>
<v t="ekr.20061101121602.356"><vh>before sel=3.7,3.7</vh></v>
<v t="ekr.20061101121602.357"><vh>after sel=3.7,3.7</vh></v>
</v>
<v t="ekr.20081111084046.4"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20110118082508.3729"><vh>reformat-paragraph tests</vh>
<v t="ekr.20110118082508.3730"><vh>@test reformat-paragraph simple hanging indent</vh>
<v t="ekr.20110118082508.3745"><vh>work</vh></v>
<v t="ekr.20110118082508.3746"><vh>before sel= 1.0,1.0</vh></v>
<v t="ekr.20110118082508.3747"><vh>after sel= 5.8,5.8</vh></v>
</v>
<v t="ekr.20110118082508.3748"><vh>@test reformat-paragraph simple hanging indent 2</vh>
<v t="ekr.20110118082508.3754"><vh>work</vh></v>
<v t="ekr.20110118082508.3755"><vh>before sel=2.0,2.0</vh></v>
<v t="ekr.20110118082508.3756"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20110118082508.3757"><vh>@test reformat-paragraph simple hanging indent 3</vh>
<v t="ekr.20110118082508.3763"><vh>work</vh></v>
<v t="ekr.20110118082508.3764"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3765"><vh>after sel=5.8,5.8</vh></v>
</v>
<v t="ekr.20110118082508.3766"><vh>@test reformat-paragraph paragraph 1 of 3</vh>
<v t="ekr.20110118082508.3772"><vh>work</vh></v>
<v t="ekr.20110118082508.3773"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3792"><vh>after sel=11.14,11.14</vh></v>
</v>
<v t="ekr.20110118082508.3779"><vh>@test reformat-paragraph paragraph 2 of 3</vh>
<v t="ekr.20110118082508.3780"><vh>work</vh></v>
<v t="ekr.20110118082508.3781"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3782"><vh>after sel=23.33,23.33</vh></v>
</v>
<v t="ekr.20110118082508.3787"><vh>@test reformat-paragraph paragraph 3 of 3</vh>
<v t="ekr.20110118082508.3788"><vh>work</vh></v>
<v t="ekr.20110118082508.3789"><vh>before sel=25.10,25.10</vh></v>
<v t="ekr.20110118082508.3790"><vh>after sel=32.11,32.11</vh></v>
</v>
<v t="ekr.20110118082508.3793"><vh>@test reformat-paragraph list 1 of 5</vh>
<v t="ekr.20110118082508.3799"><vh>work</vh></v>
<v t="ekr.20110118082508.3800"><vh>before sel=1.0,1.0</vh></v>
<v t="ekr.20110118082508.3803"><vh>after sel=2.21,2.21</vh></v>
</v>
<v t="ekr.20110118082508.3808"><vh>@test reformat-paragraph list 2 of 5</vh>
<v t="ekr.20110118082508.3809"><vh>work</vh></v>
<v t="ekr.20110118082508.3810"><vh>before sel=4.0,4.0</vh></v>
<v t="ekr.20110118082508.3811"><vh>after sel=7.0,7.0</vh></v>
</v>
<v t="ekr.20110118082508.3816"><vh>@test reformat-paragraph list 3 of 5</vh>
<v t="ekr.20110118082508.3817"><vh>work</vh></v>
<v t="ekr.20110118082508.3818"><vh>before sel=7.0,7.0</vh></v>
<v t="ekr.20110118082508.3819"><vh>after sel=8.29,8.29</vh></v>
</v>
<v t="ekr.20110118082508.3824"><vh>@test reformat-paragraph list 4 of 5</vh>
<v t="ekr.20110118082508.3825"><vh>work</vh></v>
<v t="ekr.20110118082508.3826"><vh>before sel=10.0,10.0</vh></v>
<v t="ekr.20110118082508.3827"><vh>after sel=11.28,11.28</vh></v>
</v>
<v t="ekr.20110118082508.3832"><vh>@test reformat-paragraph list 5 of 5</vh>
<v t="ekr.20110118082508.3833"><vh>work</vh></v>
<v t="ekr.20110118082508.3834"><vh>before sel=13.0,13.0</vh></v>
<v t="ekr.20110118082508.3835"><vh>after sel=14.18,14.18</vh></v>
</v>
</v>
</v>
<v t="ekr.20061104172236.1"><vh> Function tests</vh>
<v t="ekr.20100902074747.5970"><vh>@test addAbbrevHelper</vh></v>
<v t="ekr.20061104172236.3"><vh>@test capitalizeHelper</vh></v>
<v t="ekr.20061104172236.5"><vh>@test extendHelper</vh></v>
<v t="ekr.20080408094623.1"><vh>@test findWord</vh></v>
<v t="ekr.20061104172236.2"><vh>@test findWordInLine</vh></v>
<v t="ekr.20071113145804.15"><vh>@test helpForMinibuffer</vh></v>
<v t="ekr.20061104172236.6"><vh>@test moveToHelper</vh></v>
<v t="ekr.20061110094226"><vh>@test moveUpOrDownHelper</vh></v>
<v t="ekr.20061104172236.7"><vh>@test scrollHelper</vh></v>
<v t="ekr.20061104172236.4"><vh>@test setMoveCol</vh></v>
</v>
<v t="ekr.20051107115231"><vh> Typing</vh>
<v t="ekr.20051122095426"><vh>Doctests</vh></v>
<v t="ekr.20051216171321"><vh>General</vh></v>
<v t="ekr.20051107115231.13"><vh>Plugins</vh>
<v t="ekr.20090128184952.3"><vh>Test headline abc</vh></v>
<v t="ekr.20060208072415"><vh>@test Delete key sticks in body</vh></v>
<v t="ekr.20051125170139"><vh>@test Delete key sticks in headline</vh></v>
<v t="ekr.20051109091333"><vh>@test deleting the last body character text redraws the screen (and icon)</vh></v>
<v t="ekr.20051107115231.15"><vh>@test editLabel selects entire headline</vh></v>
<v t="ekr.20051120110335"><vh>@test inserting a new node can be undone and redone</vh></v>
<v t="ekr.20051125155134"><vh>@test inserting a new node draws the screen exactly once</vh></v>
<v t="ekr.20051107115231.18"><vh>@test paste and undo in headline - at end</vh></v>
<v t="ekr.20051107115231.20"><vh>@test paste and undo in headline - with selection</vh></v>
<v t="ekr.20051107115231.16"><vh>@test paste at end of headline</vh></v>
<v t="ekr.20060208072307"><vh>@test paste from menu into body sticks</vh></v>
<v t="ekr.20060208072331"><vh>@test paste from menu into headline sticks</vh></v>
<v t="ekr.20051107115231.24"><vh>@test paste from menu to body recolors the body</vh></v>
<v t="ekr.20051107115231.14"><vh>@test return ends editing of headline</vh></v>
<v t="ekr.20051107115231.28"><vh>@test selecting new node retains paste in headline</vh></v>
<v t="ekr.20051107115231.21"><vh>@test selecting new node retains typing in headline</vh></v>
<v t="ekr.20051107115231.17"><vh>@test typing and undo in headline - at end</vh></v>
<v t="ekr.20060208072358"><vh>@test typing in empty body text redraws the screen (and icon)</vh></v>
<v t="ekr.20051107115231.25"><vh>@test typing in headline recomputes width</vh></v>
<v t="ekr.20051109091731"><vh>@test typing in non-empty body text does not redraw the screen</vh></v>
<v t="ekr.20051120115046"><vh>@test undoing insert node restores previous node's body text</vh></v>
<v t="ekr.20060131102450"><vh>print end of typing and undo tests</vh></v>
</v>
<v t="ekr.20051109143831"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20100131180007.5453"><vh>@test dynamicExpandHelper</vh></v>
<v t="ekr.20070306091949"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20100204165850.5371"><vh>Toggle commands</vh>
<v t="ekr.20100119102849.5108"><vh>@test toggle-extend-mode</vh>
<v t="ekr.20100119102849.5109"><vh>&lt;&lt; define table &gt;&gt;</vh></v>
<v t="ekr.20100119102849.5110"><vh>work</vh></v>
</v>
<v t="ekr.20100204165850.5373"><vh>@test most toggle commands</vh></v>
<v t="ekr.20100204173354.5375"><vh>@test toggle-find-x</vh></v>
</v>
</v>
<v t="ekr.20071113193527"><vh>leoFind (not valid when run externally)</vh>
<v t="ekr.20051107115231.29"><vh>@@test Find keeps focus in body &amp; shows selected text</vh></v>
<v t="ekr.20060130151716.3"><vh>@test minbuffer find commands</vh></v>
<v t="ekr.20060130151716.2"><vh>@test set find mode commands</vh></v>
<v t="ekr.20060130151716.4"><vh>@test show-find-options</vh></v>
<v t="ekr.20060130151716.1"><vh>@test toggle find options commands</vh></v>
<v t="ekr.20071113202153"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113194424"><vh>leoFrame (not valid when run externally)</vh>
<v t="ekr.20060912091510.1"><vh>@@test add-editor &amp; delete-editor</vh></v>
<v t="ekr.20090608174319.4791"><vh>@@test delete-editor</vh></v>
<v t="ekr.20061104172236.22"><vh>@test c.frame.pasteText</vh></v>
<v t="ekr.20071113145804.33"><vh>@test c.frame.pasteText 2</vh></v>
<v t="ekr.20061106201509.6"><vh>@test leoBody.getInsertLines</vh></v>
<v t="ekr.20061106201509.7"><vh>@test leoBody.getSelectionAreas</vh></v>
<v t="ekr.20071113145804.32"><vh>@test leoBody.getSelectionAreas &amp; test</vh></v>
<v t="ekr.20100131180007.5359"><vh>@test OnIconDoubleClick</vh></v>
<v t="ekr.20061104172236.23"><vh>@test tkBody.onClick</vh></v>
<v t="ekr.20071113202153.1"><vh>@test zz restore the screen</vh></v>
</v>
<v t="ekr.20071113194424.1"><vh>leoNodes (not valid when run externally)</vh>
<v t="ekr.20040712101754.181"><vh> inner @test: Test consistency between parents iter and v.parents</vh>
<v t="ekr.20040712101754.182"><vh>parent</vh>
<v t="ekr.20040712101754.183"><vh>@test consistency between parents_iter and v.parents</vh></v>
</v>
</v>
<v t="ekr.20040712101754.175"><vh>@@test p.t == p.v</vh></v>
<v t="ekr.20040712101754.200"><vh>@@test that clones share subtrees</vh></v>
<v t="ekr.20070611071101"><vh>@@test visback</vh>
<v t="ekr.20070611071101.1"><vh>a</vh>
<v t="ekr.20070611071101.2"><vh>b</vh>
<v t="ekr.20070611071101.3"><vh>c2</vh></v>
</v>
</v>
<v t="ekr.20070611071101.4"><vh>limit</vh>
<v t="ekr.20070611071101.5"><vh>d</vh></v>
</v>
<v t="ekr.20070611071954"><vh>e</vh></v>
</v>
<v t="ekr.20040712101754.99"><vh>@test c iters</vh>
<v t="ekr.20040712101754.100"><vh>&lt;&lt; coverage tests &gt;&gt;</vh></v>
<v t="ekr.20040712101754.101"><vh>&lt;&lt; duplicate tests &gt;&gt;</vh></v>
</v>
<v t="ekr.20090102061858.2"><vh>@test c.positionExists</vh></v>
<v t="ekr.20090102062037.2"><vh>@test c.positionExists for all nodes</vh></v>
<v t="ekr.20040712101754.204"><vh>@test consistency of back/next links</vh></v>
<v t="ekr.20040712101754.201"><vh>@test consistency of c.all_positions() and p.ThreadNext()</vh></v>
<v t="ekr.20040712101754.202"><vh>@test consistency of firstChild &amp; children_iter()</vh></v>
<v t="ekr.20040712101754.203"><vh>@test consistency of level</vh></v>
<v t="ekr.20040712101754.205"><vh>@test consistency of parent &amp; parents_iter()</vh></v>
<v t="ekr.20040712101754.206"><vh>@test consistency of parent/child links</vh></v>
<v t="ekr.20040712101754.207"><vh>@test consistency of threadBack/Next links</vh></v>
<v t="ekr.20040712101754.177"><vh>@test convertTreeToString and allies</vh>
<v t="ekr.20040712101754.178"><vh>File Conversion</vh>
<v t="ekr.20040712101754.179"><vh>moreHead</vh></v>
<v t="ekr.20040712101754.180"><vh>moreBody</vh></v>
</v>
</v>
<v t="ville.20090312195309.2"><vh>@@@test find_h / find_b / filter_h / filter_b</vh></v>
<v t="ekr.20090130133404.2"><vh>@test leoNodes properties</vh></v>
<v t="ekr.20080310073711.1"><vh>@test nodeIndices.toString(None) allocates a new index</vh></v>
<v t="ekr.20041013062906"><vh>@test onHyperLinkControlClick</vh></v>
<v t="ekr.20100131180007.5369"><vh>@test p.adjustPositionBeforeUnlink</vh>
<v t="ekr.20100131180007.5370"><vh>node 1</vh>
<v t="ekr.20100131180007.5371"><vh>node 1-1</vh>
<v t="ekr.20100131180007.5372"><vh>node 1-1-1</vh></v>
<v t="ekr.20100131180007.5373"><vh>node 1-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5374"><vh>node 1-2</vh>
<v t="ekr.20100131180007.5375"><vh>node 1-2-1</vh></v>
<v t="ekr.20100131180007.5376"><vh>node 1-2-2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5377"><vh>node 2</vh>
<v t="ekr.20100131180007.5378"><vh>node 2-1</vh>
<v t="ekr.20100131180007.5379"><vh>node 2-1-1</vh></v>
<v t="ekr.20100131180007.5380"><vh>node 2-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5381"><vh>node 2-2</vh>
<v t="ekr.20100131180007.5382"><vh>node 2-2-1</vh></v>
<v t="ekr.20100131180007.5383"><vh>node 2-2-2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5384"><vh>node 3</vh>
<v t="ekr.20100131180007.5385"><vh>node 3-1</vh>
<v t="ekr.20100131180007.5386"><vh>node 3-1-1</vh></v>
<v t="ekr.20100131180007.5387"><vh>node 3-1-2</vh></v>
</v>
<v t="ekr.20100131180007.5388"><vh>node 3-2</vh>
<v t="ekr.20100131180007.5389"><vh>node 3-2-1</vh></v>
<v t="ekr.20100131180007.5390"><vh>node 3-2-2</vh></v>
</v>
</v>
</v>
<v t="ekr.20040712101754.199"><vh>@test p.comparisons</vh></v>
<v t="ekr.20040712101754.209"><vh>@test p.hasNextBack</vh></v>
<v t="ekr.20040712101754.210"><vh>@test p.hasParentChild</vh></v>
<v t="ekr.20040712101754.211"><vh>@test p.hasThreadNextBack</vh></v>
<v t="ekr.20040722055040"><vh>@test p.isAncestorOf</vh></v>
<v t="ekr.20060106211922"><vh>@test p.isCurrentPosition</vh></v>
<v t="ekr.20060106211922.1"><vh>@test p.isRootPosition</vh></v>
<v t="ekr.20040712101754.188"><vh>@test p.iters and v.iters</vh>
<v t="ekr.20040712101754.189"><vh>child1</vh>
<v t="ekr.20040712101754.190"><vh>a</vh>
<v t="ekr.20040712101754.191"><vh>b</vh></v>
</v>
<v t="ekr.20040712101754.192"><vh>c</vh></v>
<v t="ekr.20040712101754.193"><vh>d</vh>
<v t="ekr.20040712101754.194"><vh>e</vh></v>
</v>
</v>
<v t="ekr.20040712101754.195"><vh>child2</vh></v>
<v t="ekr.20040712101754.196"><vh>&lt;&lt; tests of consistency of p and v iters &gt;&gt;</vh></v>
<v t="ekr.20040712101754.197"><vh>&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;</vh></v>
<v t="ekr.20040712101754.198"><vh>&lt;&lt; print nodes returned by iterators &gt;&gt;</vh></v>
</v>
<v t="ekr.20040802071519"><vh>@test p.setBodyStringOrPane</vh>
<v t="ekr.20040802071519.1"><vh>Test</vh></v>
</v>
<v t="ekr.20110502130500.3471"><vh>@test p.unique_nodes</vh>
<v t="ekr.20110502130500.3472"><vh>node 1</vh>
<v t="ekr.20110502130500.3473"><vh>node 2</vh></v>
</v>
</v>
<v t="ekr.20100131180007.5391"><vh>@test v.atAutoNodeName &amp; v.atAutoRstNodeName</vh></v>
<v t="ekr.20060913084600"><vh>@test v/t.__hash__</vh></v>
<v t="ekr.20071113202452"><vh>@test zz restore the screen</vh></v>
<v t="ekr.20080501121449.1"><vh>Fundamental node operations</vh>
<v t="ekr.20080423110627.2"><vh>@test at most one vnode has str_leo_pos attribute</vh></v>
<v t="ekr.20080423110627.3"><vh>@test clone and move the clone to the root</vh></v>
<v t="ekr.20080503082625.3"><vh>@test delete node</vh></v>
<v t="ekr.20080423110627.13"><vh>@test deleting the root should select another node</vh></v>
<v t="ekr.20080503082625.5"><vh>@test demote</vh></v>
<v t="ekr.20080501121449.3"><vh>@test insert node</vh></v>
<v t="ekr.20080423110627.11"><vh>@test move-outline-down &amp; undo/redo</vh></v>
<v t="ekr.20080503073030.1"><vh>@test move-outline-left</vh></v>
<v t="ekr.20080503073030.2"><vh>@test move-outline-right</vh></v>
<v t="ekr.20080423110627.12"><vh>@test move-outline-up</vh></v>
<v t="ekr.20080423110627.5"><vh>@test paste-node</vh></v>
<v t="ekr.20080423110627.8"><vh>@test paste-retaining-clones</vh></v>
<v t="ekr.20080503082625.4"><vh>@test promote</vh></v>
</v>
<v t="ekr.20081001094920.2"><vh>tests for p.textOffset()</vh>
<v t="ekr.20081001094920.3"><vh>@test node that doesn't belong to a derived file</vh></v>
<v t="ekr.20081001094920.4"><vh>@test root of a derived file</vh></v>
<v t="ekr.20081001094920.5"><vh>@test organizer node</vh></v>
<v t="ekr.20081001094920.6"><vh>@test section node</vh></v>
<v t="ekr.20081001094920.7"><vh>@test "others" directive</vh></v>
</v>
</v>
<v t="ekr.20071113193729"><vh>leoUndo (not valid when run externally)</vh>
<v t="ekr.20040712101754.37"><vh>@suite Edit body tests</vh>
<v t="ekr.20040712101754.38"><vh>editBodyTests</vh>
<v t="ekr.20060127120604"><vh>tempNode</vh></v>
<v t="ekr.20050417202713"><vh>addComments</vh>
<v t="ekr.20050417202713.1"><vh>before</vh></v>
<v t="ekr.20050417202713.2"><vh>after</vh></v>
<v t="ekr.20050417202713.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417204940"><vh>convertAllBlanks</vh>
<v t="ekr.20050417204940.1"><vh>before</vh></v>
<v t="ekr.20050417204940.2"><vh>after</vh></v>
<v t="ekr.20050417204940.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417205012"><vh>convertAllTabs</vh>
<v t="ekr.20050417205012.1"><vh>before</vh></v>
<v t="ekr.20050417205012.2"><vh>after</vh></v>
<v t="ekr.20050417205012.3"><vh>selection</vh></v>
</v>
<v t="ekr.20050417203114"><vh>convertBlanks</vh>
<v t="ekr.20050417203310"><vh>before</vh></v>
<v t="ekr.20050417203310.1"><vh>after</vh></v>
<v t="ekr.20050417203336"><vh>selection</vh></v>
</v>
<v t="ekr.20050417203114.1"><vh>convertTabs</vh>
<v t="ekr.20050417204834"><vh>before</vh></v>
<v t="ekr.20050417204830"><vh>after</vh></v>
<v t="ekr.20050417204901"><vh>selection</vh></v>
</v>
<v t="ekr.20040712101754.49"><vh>dedentBody</vh>
<v t="ekr.20040712101754.50"><vh>before</vh></v>
<v t="ekr.20040712101754.51"><vh>after</vh></v>
<v t="ekr.20040712101754.52"><vh>selection</vh></v>
</v>
<v t="ekr.20050417202817"><vh>deleteComments</vh>
<v t="ekr.20050417202817.1"><vh>before</vh></v>
<v t="ekr.20050417202817.2"><vh>after</vh></v>
<v t="ekr.20050417202817.3"><vh>selection</vh></v>
</v>
<v t="ekr.20111112211307.3910"><vh>deleteComments</vh>
<v t="ekr.20111112211307.3911"><vh>before</vh></v>
<v t="ekr.20111112211307.3912"><vh>after</vh></v>
<v t="ekr.20111112211307.3913"><vh>selection</vh></v>
</v>
<v t="ekr.20050417201845"><vh>extract test1</vh>
<v t="ekr.20050417201845.1"><vh>before</vh></v>
<v t="ekr.20050417201845.2"><vh>after</vh>
<v t="ekr.20050417201845.3"><vh>&lt;&lt; section &gt;&gt; @nonl</vh></v>
</v>
<v t="ekr.20050417201845.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518070540"><vh>extract test2</vh>
<v t="ekr.20050518070540.1"><vh>before</vh></v>
<v t="ekr.20050518070545"><vh>after</vh></v>
<v t="ekr.20050518070540.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518070927"><vh>extractSection test1</vh>
<v t="ekr.20050518070927.1"><vh>before</vh></v>
<v t="ekr.20050518070927.2"><vh>after</vh>
<v t="ekr.20050518070927.3"><vh>&lt;&lt; section &gt;&gt; @nonl</vh></v>
</v>
<v t="ekr.20050518070927.4"><vh>selection</vh></v>
</v>
<v t="ekr.20050518071251"><vh>extractSection test2</vh>
<v t="ekr.20050518071251.1"><vh>before</vh></v>
<v t="ekr.20050518071258"><vh>after</vh></v>
<v t="ekr.20050518071251.4"><vh>selection</vh></v>
</v>
</v>
</v>
<v t="ekr.20071113202510"><vh>@test zz restore the screen</vh></v>
</v>
</v>
<v t="ville.20090312195309.2"></v>
</vnodes>
<tnodes>
<t tx="bwmulder.20050108100437.1">@killcolor

Running unit tests from test.leo is easy, provided you have enabled the
Scripting plugin. When this plugin is enabled Leo will create a blue 'script
button' in the icon bar called 'unit test'. 

- To run all unit tests, select the node in test.leo called 'Unit tests...',
then do &lt;alt-4&gt; 

- To run a single test, select an @test node and do &lt;alt-4&gt;.

- To run a suite of tests, select an @suite node and do &lt;alt-4&gt;.

- To run any other collection of tests, create an outline containing those @test
or @suite nodes, select the root of that tree and do &lt;alt-4&gt; .

Several nodes in the tree @thin ../src/leoTest.py (in test.leo) contain support
code for @test, @suite, etc. so if you want all the gory details you can read
the code. It's not complicated: Leo creates UnitTest classes automatically whose
run method is the body of the @suite or @test node.
</t>
<t tx="ekr.20040707141957.12">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20040707141957.13">Line 1

@last last line 1: no newline
</t>
<t tx="ekr.20040707141957.14">#@+leo-ver=5-thin
#@+node:ekr.20040707141957.13: * #@thin
Line 1

#@@last
#@-leo
last line 1: no newline
</t>
<t tx="ekr.20040712101754.100">v1 = [p.v for p in c.all_positions()]
v2 = [v for v in c.all_nodes()]
for v in v2: assert(v in v1)
for v in v1: assert(v in v2)

# print("coverage tests pass")
</t>
<t tx="ekr.20040712101754.101">nodes = []
for v in c.all_unique_nodes():
    assert v not in nodes
    nodes.append(v)

# print("duplicate tests pass")
</t>
<t tx="ekr.20040712101754.103">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20040712101754.104">Line 1

@last last line 1: no newline
</t>
<t tx="ekr.20040712101754.105">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@nonl
#@-node:#@file
#@-leo
last line 1: no newline
</t>
<t tx="ekr.20040712101754.106">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20040712101754.107">Line 1

@last last line 1: newline
</t>
<t tx="ekr.20040712101754.108">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@-node:#@file
#@-leo
last line 1: newline
</t>
<t tx="ekr.20040712101754.109">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20040712101754.110">Line 1

@last last line 1: two trailing newlines
</t>
<t tx="ekr.20040712101754.111">#@+leo-ver=4
#@+node:#@file
Line 1

#@@last
#@-node:#@file
#@-leo
last line 1: two trailing newlines
</t>
<t tx="ekr.20040712101754.175"># p.__getattr__ must be enabled for this test to work.

for p in c.all_positions():
    assert(p.t == p.v)
</t>
<t tx="ekr.20040712101754.177">p = p.firstChild()
assert(p.h=="File Conversion")
p.convertTreeToString()
</t>
<t tx="ekr.20040712101754.178">@
- convertTreeToString and moreHead can't be vnode methods because they uses level().
- moreBody could be anywhere: it may as well be a postion method.
</t>
<t tx="ekr.20040712101754.179">def moreHead (self, firstLevel,useVerticalBar=False):

    """Return the headline string in MORE format."""

    p = self

    level = self.level() - firstLevel
    plusMinus = g.choose(p.hasChildren(), "+", "-")

    return "%s%s %s" % ('\t'*level,plusMinus,p.h)
</t>
<t tx="ekr.20040712101754.180">@ 
    + test line
    - test line
    \ test line
    test line +
    test line -
    test line \
    More lines...
@c

def moreBody (self):

    """Returns the body string in MORE format.  

    Inserts a backslash before any leading plus, minus or backslash."""

    p = self ; list = []

    # Only escape the first non-blank character of the line.
    s =  p.b ; result = []
    lines = string.split(s,'\n')
    for s in lines:
        i = g.skip_ws(s,0)
        if i &lt; len(s):
            ch = s[i]
            if ch == '+' or ch == '-' or ch == '\\':
                s = s[:i] + '\\' + s[i:]
        result.append(s)
    return string.join(result,'\n')
</t>
<t tx="ekr.20040712101754.181"># The actual test is in a child node.
</t>
<t tx="ekr.20040712101754.182"></t>
<t tx="ekr.20040712101754.183">try:
    for p in c.all_positions():
        if 0: # Check all ancestors.  This is tricky and doesn't work yet.
            parents1 = [parent.v for parent in p.parents_iter()]
            parents2 = []
            parent2 = p.v.directParents()
            while parent2:
                v = parent2[0]
                parents2.append(v)
                parent2 = v.directParents()
        else:
            parents1 = p.v.parents
            parents2 = p.v.directParents()

        assert len(parents1) == len(parents2), "length mismatch: %s" % (p)
        for parent in parents1:
            assert parent in parents2, "%s not in %s" % (parent,parent1)
        for parent in parents2:
            assert parent in parents1, "%s not in %s" % (parent,parent2)

except AssertionError:
    print("parents1")
    for parent in parents1: print(parent)
    print("parents2")
    for parent in parents2: print(parent)
    raise
</t>
<t tx="ekr.20040712101754.188">import leo.core.leoNodes as leoNodes

current = c.p
child = current.firstChild()

allList = [p.v for p in c.all_positions_iter()]
vList1 = [v for v in c.p.vnodes_iter()]
vList2 = [v for v in c.p.unique_vnodes_iter()]

if 0:
    for v in vList1: print(v)
    for v in vList2: print(v)

if 0:
    print(len(allList),len(vList1),len(vList2))

if 0: # v.iters no longer exist.
    &lt;&lt; tests of consistency of p and v iters &gt;&gt;
&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;
&lt;&lt; print nodes returned by iterators &gt;&gt;
</t>
<t tx="ekr.20040712101754.189"></t>
<t tx="ekr.20040712101754.190"></t>
<t tx="ekr.20040712101754.191"></t>
<t tx="ekr.20040712101754.192"></t>
<t tx="ekr.20040712101754.193"></t>
<t tx="ekr.20040712101754.194"></t>
<t tx="ekr.20040712101754.195"></t>
<t tx="ekr.20040712101754.196">try:
    tag = "test1"
    list1 = [v for v in current.vnodes_iter()]
    list2 = [v for v in current.v.self_and_subtree_iter()]
    assert(list1==list2)

    tag = "test2"
    list1 = [p.v for p in c.all_positions_iter()]
    list2 = [v   for v in c.all_vnodes_iter()]
    assert(list1==list2)

    # print("consistency tests pass")

except AssertionError:
    print(tag)
    print("list1")
    for v in list1: print(v)
    print("list2")
    for v in list2: print(v)
    raise
</t>
<t tx="ekr.20040712101754.197">nodes = []
for v in current.unique_vnodes_iter():
    assert v not in nodes
    nodes.append(v)

nodes = []
for t in current.unique_tnodes_iter():
    assert t not in nodes
    nodes.append(t)

# print("duplicate tests pass")
</t>
<t tx="ekr.20040712101754.198">if 0:
    for v in current.vnodes_iter(): print(v)
    for v in current.unique_vnodes_iter(): print(v)

if 0: # subtree of root node:
    root = c.rootPosition()
    for v in root.vnodes_iter(): print(v)
    for t in root.tnodes_iter(): print(t)

if 0: # child1's tree.  child2 should not be included.
    for v in child.vnodes_iter(): print(v)
    for t in child.tnodes_iter(): print(t)
</t>
<t tx="ekr.20040712101754.199">copy = p.copy()
assert(p == copy)
assert(p != p.threadNext())

root = c.rootPosition()
# assert p.equal(p.copy()) is True
# assert p.equal(root) is False
assert p.__eq__(copy) is True
assert p.__ne__(copy) is False
assert p.__eq__(root) is False
assert p.__ne__(root) is True
</t>
<t tx="ekr.20040712101754.200">for p in c.all_positions():
    if p.isCloned() and p.hasChildren():
        childv = p.firstChild().v
        firstChild = p.v.children[0]
        assert childv == firstChild
</t>
<t tx="ekr.20040712101754.201">p2 = c.rootPosition()
for p in c.all_positions():
    assert p==p2, "%s != %s" % (p,p2)
    p2.moveToThreadNext()

assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.202">for p in c.all_positions():
    p2 = p.firstChild()
    for p3 in p.children_iter():
        assert p3==p2, "%s != %s" % (p3,p2)
        p2.moveToNext()

assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.203">for p in c.all_positions():

    if p.hasParent():
        assert(p.parent().level() == p.level() - 1)

    if p.hasChildren():
        assert(p.firstChild().level() == p.level() + 1)

    if p.hasNext():
        assert(p.next().level() == p.level())

    if p.hasBack():
        assert(p.back().level() == p.level())
</t>
<t tx="ekr.20040712101754.204">for p in c.all_positions():

    back = p.back()
    next = p.next()
    if back: assert(back.getNext() == p)
    if next: assert(next.getBack() == p)
</t>
<t tx="ekr.20040712101754.205">for p in c.all_positions():
    p2 = p.parent()
    for p3 in p.parents_iter():
        assert p3==p2, "%s != %s" % (p3,p2)
        p2.moveToParent()

    assert not p2, repr(p2)
</t>
<t tx="ekr.20040712101754.206"># Test consistency of p.parent, p.next, p.back and p.firstChild.
for p in c.all_positions():

    if p.hasParent():
        n = p.childIndex()
        assert(p == p.parent().moveToNthChild(n))

    for child in p.children_iter():
        assert(p == child.parent())

    if p.hasNext():
        assert(p.next().parent() == p.parent())

    if p.hasBack():
        assert(p.back().parent() == p.parent())
</t>
<t tx="ekr.20040712101754.207">for p in c.all_positions():

    threadBack = p.threadBack()
    threadNext = p.threadNext()

    if threadBack:
        assert(p == threadBack.getThreadNext())

    if threadNext:
        assert(p == threadNext.getThreadBack())
</t>
<t tx="ekr.20040712101754.209">for p in c.all_positions():

    back = p.back()
    next = p.next()

    assert(
        (back and p.hasBack()) or
        (not back and not p.hasBack()))

    assert(
        (next and p.hasNext()) or
        (not next and not p.hasNext()))
</t>
<t tx="ekr.20040712101754.210">for p in c.all_positions():

    child = p.firstChild()
    parent = p.parent()

    assert(
        (child and p.hasFirstChild()) or
        (not child and not p.hasFirstChild()))

    assert(
        (parent and p.hasParent()) or
        (not parent and not p.hasParent()))
</t>
<t tx="ekr.20040712101754.211">for p in c.all_positions():

    threadBack = p.getThreadBack()
    threadNext = p.getThreadNext()

    assert(
        (threadBack and p.hasThreadBack()) or
        (not threadBack and not p.hasThreadBack()))

    assert(
        (threadNext and p.hasThreadNext()) or
        (not threadNext and not p.hasThreadNext()))
</t>
<t tx="ekr.20040712101754.37"># Create unit tests in g.app.scriptDict["suite"]

import leo.core.leoTest as leoTest

g.app.enableUnitTest = True

suite = leoTest.makeEditBodySuite(c,p)

g.app.scriptDict['suite'] = suite
</t>
<t tx="ekr.20040712101754.38">@language plain
@

The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two or more children:

- a "before" node
- an "after" node
- an optional selection node containing two lines giving the selection range in Tk coordinates.
- An optional insert node containing one line giving the insert point in Tk coordinates.
</t>
<t tx="ekr.20040712101754.49"></t>
<t tx="ekr.20040712101754.50">line 1
    line 2
    line 3
line 4
</t>
<t tx="ekr.20040712101754.51">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20040712101754.52">2.0
3.5
</t>
<t tx="ekr.20040712101754.99">&lt;&lt; coverage tests &gt;&gt;
&lt;&lt; duplicate tests &gt;&gt;

if 0:
    print("vnodes",len([v for v in c.all_vnodes_iter()]),len([v for v in c.all_unique_vnodes_iter()]))
    print("tnodes",len([t for t in c.all_tnodes_iter()]),len([t for t in c.all_unique_tnodes_iter()]))

if 0: # all nodes
    for v in c.all_vnodes_iter(): print(v)
    for t in c.all_tnodes_iter(): print(t)

if 0: # unique nodes
    for v in c.all_unique_vnodes_iter(): print(v)
    for t in c.all_unique_tnodes_iter(): print(t)
</t>
<t tx="ekr.20040722055040">for p in c.all_positions():

    child = p.firstChild()
    while child:
        for parent in p.self_and_parents_iter():
            assert parent.isAncestorOf(child)
        child.moveToNext()

    next = p.next()
    assert not p.isAncestorOf(next)
</t>
<t tx="ekr.20040802071519"># Tests that c.setBodyString works immediately.
h = p.h

try:
    child = p.firstChild()
    before = child.b
    after = "after"
    c.setBodyString(child,"after")
    c.selectPosition(child)
    t = c.frame.body.bodyCtrl
    s = t.get("1.0","end")
    assert s.rstrip() == after.rstrip(), \
        "c.setBodyString failed: %s, %s" % (repr(s),repr(after))
finally:
    c.setBodyString(child,before)
    c.selectPosition(p)
</t>
<t tx="ekr.20040802071519.1">after
</t>
<t tx="ekr.20041013062906"># This hack is needed only for tkinter gui.
if g.app.gui.guiName() == 'tkinter':
    p.OnHyperLinkControlClick(event=None)
</t>
<t tx="ekr.20041021065844">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20041021065844.1"># Test that @nosent generates no sentinels

&lt;&lt; section &gt;&gt;

@others

last line
section line 1
unnamed node line 1
</t>
<t tx="ekr.20041021065903"># Test that @nosent generates no sentinels

&lt;&lt; section &gt;&gt;

@others

last line
</t>
<t tx="ekr.20041021065903.1">section line 1
</t>
<t tx="ekr.20041021065903.2">unnamed node line 1
</t>
<t tx="ekr.20041121151002"></t>
<t tx="ekr.20050105093136">import os

at = c.atFileCommands
exists = g.os_path_exists

path = g.os_path_join(g.app.testDir,'xyzzy')
if exists(path):
    os.remove(path)

assert not exists(path)
assert not at.remove(path,verbose=False)

f = open(path,'w')
f.write('test')
f.close()

assert exists(path)
assert at.remove(path)
assert not exists(path)
</t>
<t tx="ekr.20050105093524">import os

at = c.atFileCommands
exists = g.os_path_exists
path = g.os_path_join(g.app.testDir,'xyzzy')
path2 = g.os_path_join(g.app.testDir,'xyzzy2')

# Create both paths.
for p in (path,path2):
    if exists(p):
        os.remove(p)
    assert not exists(p)
    f = open(p,'w')
    f.write('test %s' % p)
    f.close()
    assert exists(p)

assert at.rename(path,path2,verbose=True)
assert exists(path2)
f = open(path2)
s = f.read()
f.close()
# print('Contents of %s: %s' % (path2,s))
assert s == 'test %s' % path
os.remove(path2)
assert not exists(path)
</t>
<t tx="ekr.20050105094311">import os

at = c.atFileCommands
exists = g.os_path_exists

at.outputFileName = g.os_path_join(g.app.testDir,'xyzzy1')
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2')

# Create both paths (different contents)
for p in (at.outputFileName,at.targetFileName):
    if exists(p):
        os.remove(p)
    assert not exists(p)
    f = open(p,'w')
    s = 'test %s' % p
    # print(repr(p),repr(s))
    f.write(s)
    f.close()
    assert exists(p) # , '%s does not exist' % repr(p)

at.toString = False # Set by execute script stuff.
at.shortFileName = at.targetFileName
root = at.root
assert at.replaceTargetFileIfDifferent(root), 'replaceTargetFileIfDifferent returns False'
if 0:
    print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
    print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
assert not exists(at.outputFileName), 'oops, output file exists'
assert exists(at.targetFileName), 'oops, target file does not exist'
f = open(at.targetFileName)
s = f.read()
f.close()
# print('Contents of %s: %s' % (at.targetFileName,s))
assert s == 'test %s' % at.outputFileName, 'unexpected contents of target file'
os.remove(at.targetFileName)
</t>
<t tx="ekr.20050105095743">import os

at = c.atFileCommands
exists = g.os_path_exists

at.outputFileName = g.os_path_join(g.app.testDir,'xyzzy1')
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2')

# Create both paths (identical contents)
for p in (at.outputFileName,at.targetFileName):
    if exists(p):
        os.remove(p)
    assert not exists(p)
    f = open(p,'w')
    s = 'test %s' % at.outputFileName
    # print(repr(p),repr(s))
    f.write(s)
    f.close()
    assert exists(p)

at.toString = False # Set by execute script stuff.
at.shortFileName = at.targetFileName
root = at.root
assert not at.replaceTargetFileIfDifferent(root), 'replaceTargetFileIfDifferent returns True'
if 0:
    print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
    print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
assert not exists(at.outputFileName), 'oops, output file exists'
assert exists(at.targetFileName), 'oops, target file does not exist'
f = open(at.targetFileName)
s = f.read()
f.close()
# print('Contents of %s: %s' % (at.targetFileName,s))
assert s == 'test %s' % at.outputFileName, 'unexpected contents of target file'
os.remove(at.targetFileName)
</t>
<t tx="ekr.20050105100227">import os

at = c.atFileCommands
exists = g.os_path_exists

at.outputFileName = g.os_path_join(g.app.testDir,'xyzzy1')
at.targetFileName = g.os_path_join(g.app.testDir,'xyzzy2')

# Remove both files, then create only the output file
for p in (at.outputFileName,at.targetFileName):
    if exists(p):
        os.remove(p)

for p in (at.outputFileName,):
    assert not exists(p)
    f = open(p,'w')
    s = 'test %s' % at.outputFileName
    # print(repr(p),repr(s))
    f.write(s)
    f.close()
    assert exists(p)

at.toString = False # Set by execute script stuff.
at.shortFileName = at.targetFileName
root = at.root
assert not at.replaceTargetFileIfDifferent(root), 'replaceTargetFileIfDifferent returns True'
if 0:
    print('%s exists %s' % (at.outputFileName,exists(at.outputFileName)))
    print('%s exists %s' % (at.targetFileName,exists(at.targetFileName)))
assert not exists(at.outputFileName), 'oops, output file exists'
assert exists(at.targetFileName), 'oops, target file does not exist'
f = open(at.targetFileName)
s = f.read()
f.close()
# print('Contents of %s: %s' % (at.targetFileName,s))
assert s == 'test %s' % at.outputFileName, 'unexpected contents of target file'
os.remove(at.targetFileName)
</t>
<t tx="ekr.20050112095306.1"></t>
<t tx="ekr.20050328101834"></t>
<t tx="ekr.20050328101834.1"></t>
<t tx="ekr.20050328101834.2"></t>
<t tx="ekr.20050328101834.3"></t>
<t tx="ekr.20050417201845"></t>
<t tx="ekr.20050417201845.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050417201845.2">before
&lt;&lt; section &gt;&gt;
after
</t>
<t tx="ekr.20050417201845.3">sec line 1
    sec line 2 indented
sec line 3
</t>
<t tx="ekr.20050417201845.4">2.0
5.10
</t>
<t tx="ekr.20050417202713"></t>
<t tx="ekr.20050417202713.1">@language python

def addCommentTest():

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20050417202713.2">@language python

def addCommentTest():

#     if 1:
#         a = 2
#         b = 3

    pass
</t>
<t tx="ekr.20050417202713.3">5.0
7.8
</t>
<t tx="ekr.20050417202817"># created by new add-comments
</t>
<t tx="ekr.20050417202817.1">@language python

def deleteCommentTest():

#     if 1:
#         a = 2
#         b = 3

    pass
</t>
<t tx="ekr.20050417202817.2">@language python

def deleteCommentTest():

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20050417202817.3">5.0
7.8
</t>
<t tx="ekr.20050417203114"></t>
<t tx="ekr.20050417203114.1"></t>
<t tx="ekr.20050417203310">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417203310.1">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417203336">1.0
6.5
</t>
<t tx="ekr.20050417204830">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417204834">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417204901">1.0
6.5
</t>
<t tx="ekr.20050417204940"></t>
<t tx="ekr.20050417204940.1">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417204940.2">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417204940.3">1.0
6.5
</t>
<t tx="ekr.20050417205012"></t>
<t tx="ekr.20050417205012.1">@tabwidth -4

line 1
	line 2
	  line 3
line4
</t>
<t tx="ekr.20050417205012.2">@tabwidth -4

line 1
    line 2
      line 3
line4
</t>
<t tx="ekr.20050417205012.3">1.0
6.5
</t>
<t tx="ekr.20050518070540"></t>
<t tx="ekr.20050518070540.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070540.4">2.0
2.16
</t>
<t tx="ekr.20050518070545">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070927"></t>
<t tx="ekr.20050518070927.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518070927.2">before
&lt;&lt; section &gt;&gt;
after
</t>
<t tx="ekr.20050518070927.3">sec line 1
    sec line 2 indented
sec line 3
</t>
<t tx="ekr.20050518070927.4">2.0
5.10
</t>
<t tx="ekr.20050518071251"></t>
<t tx="ekr.20050518071251.1">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050518071251.4">2.0
2.16
</t>
<t tx="ekr.20050518071258">before
    &lt;&lt; section &gt;&gt;
    sec line 1
        sec line 2 indented
sec line 3
after
</t>
<t tx="ekr.20050618061835">@killcolor

Here is a tutorial written by Roger Erens.

Version Date        LeoID       Remarks
------- ----        -----       -------
0.1     20050519    rogererens  Initial version</t>
<t tx="ekr.20050618061835.1">So you think "Well, since I've written this piece of funky Python software, and everybody keeps saying how useful unit testing is, I really ought to start using unit tests." And since Leo's creator has said countless times in the Leo forums how easy unit testing in Leo is, a few uncomplicated examples might help convince you that he's not spamming.

Beware: this How-To should be the last time that you write tests AFTER having written your funky software! Test Driven Development dictates that tests have to be prepared BEFORE you get down to writing your actual code. See a nice tutorial on O'Reilly's website (url given in the descendant node).</t>
<t tx="ekr.20050618061835.10">Start of Do @test
F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\Documents and Settings\re1705\My Documents\PythonStuff\leo\src\leoTes
t.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.010s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.11">A real fun feature of Leo is that Leo saves you from having to select each and single @test node and press the 'Do @test' button to obtain testing results. Just collecting the @test nodes under an organizing node, selecting that organizing node, and pressing the 'Do @test' button will suffice.
Of course, this was one of the key ideas of unit testing, but it's nice to see it being implemented by Leo so smoothly!

So, press the button while having this node selected, and see if your console's output matches the third child node more or less. </t>
<t tx="ekr.20050618061835.12">Start of Do @test
.F
======================================================================
FAIL: @test my second Leo test

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 3, in ?
AssertionError

----------------------------------------------------------------------
Ran 2 tests in 0.040s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.13">Okay: so you've seen now some simple stand-alone tests to get your toes wet.
Now, we get to the 'grande finale' and see real-life usage of the @test nodes.

The @test child node below illustrates the following points:

1.  The node imports the module to test (and keeps it up to date by reloading it).
2.  It also obtains data to use as input and referral. This is what you might call
    the setUp methods in traditional unit tests. If more tests need the same data,
    you can put the nodes in a central place where all the @test nodes can find
    them. Likewise, common code for several unit tests might be collected in a
    central place.
3.  Comparable with the traditional unit tests' tearDown method, some statements
    can follow the test itself, if neccessary. You might also consider using a
    try/finally construct.
4.  I have used g.es() statements instead of print statements, since the latter
    clutter the console. Try replacing the g.es() statements by corresponding
    print statements to see what I mean. With more than one @test node being tested,
    this will give quite a dreadful look.</t>
<t tx="ekr.20050618061835.14">@color

try:
    # SETUP
    import koekiemonster # this module defines a function want() which we want to test
    reload(koekiemonster) # changes in koekiemonster need to propagate to the test

    # obtaining the input parameter for the function
    inputNode = p.firstChild()
    inputData = inputNode.b
    
    # obtaining the expected result from the function with above input parameter
    expectedResultNode = inputNode.next()
    expected = expectedResultNode.b
    
    # execute the function with above input parameter
    result = koekiemonster.wants(inputData)
    
    # TEST
    assert(result == expected)
    
    # TEARDOWN
    g.es("Now it's time to clean up")

except AssertionError:
    # TEARDOWN
    g.es("Oh oh! %s failed:" % p.h.strip())
    g.es("koekiemonster.wants(%s)==%s" % (inputData, result))
    g.es("Expected: %s" % expected)
    raise # pass the exception on to the unit test machinery</t>
<t tx="ekr.20050618061835.15">vegetables</t>
<t tx="ekr.20050618061835.16">Yuck!</t>
<t tx="ekr.20050618061835.17">Start of Do @test
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.070s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.18">Start of Do @test
Oh oh: @test koekiemonster.wants() failed:
koekiemonster.wants(vegetables)=Yack!
Expected: Yuck!
F
======================================================================
FAIL: @test koekiemonster.wants()

----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\leo\src\leoTest.py", line 148, in runTest
    exec script + '\n' in {'c':c,'g':g,'p':p}
  File "&lt;string&gt;", line 22, in ?
AssertionError

----------------------------------------------------------------------
Ran 1 test in 0.051s

FAILED (failures=1)
End of Do @test</t>
<t tx="ekr.20050618061835.19">With the aforementioned possibilities of running all @test nodes in a subtree with a single click on a button, the sharing of input/expected data, and the sharing of setUp/tearDown code, there hardly seems a need for the @suite nodes.

On Leo's website (http://webpages.charter.net/edreamleo/scripting.html#unit-testing-with-test-and-suite) I could still find some extra info on @suite nodes, not found in LeoDocs.leo:

&lt;quote&gt;

Using @suite nodes

Such nodes create a suite of tests. Leo executes the script in these nodes similar to @test nodes, but Leo assumes that the script in an @suite node will do the following:

    * Create a suite of unit tests
    * Put the suite in g.app.scriptDict["suite"]

The difference between @test and @suite is:

    * Leo creates a unit test from script in an @test node by creating an instance of generalTestCase, a subclass of unittest.TestCase.
    * The script in an @suite node creates the test suite.

An @suite nodes allows us to create "legacy" unit tests simply. For example, rather than rewriting all the reformatParagraph unit tests to use @test nodes, I simply wrote an @suite node with the following body.
import leoGlobals as g
import leoTest ; reload(leoTest)
suite = leoTest.makeReformatParagraphSuite()
g.app.scriptDict['suite'] = suite

&lt;/quote&gt;

Well, that's almost, but not quite completely, totally incomprehensible to me. Fortunately, since Leo's creator removed most of this quote from LeoDocs.leo and test.leo, this information appears to be outdated.</t>
<t tx="ekr.20050618061835.2"></t>
<t tx="ekr.20050618061835.20">Don't forget to read the node
Users Guide--&gt;Chapter 7: Scripting Leo with Python--&gt;Unit testing with @test, @suite
in LeoDocs.leo, especially the final notes. Also investigate a little further in test.leo to see some heavy weight lifting.

This concludes my How-To on using @test. It was not written by an expert on (unit) testing;
it is more or less the result of keeping notes on my way to find out how I could get started
with unit tests in Leo. Maybe it's useful for other newbies as well.

Please post any remarks on one of the Leo Fora, and if deemed helpful, I'll be glad to incorporate them into a next version.

Happy testing!</t>
<t tx="ekr.20050618061835.3">Comment by EKR: There is no need to do this if you use test.leo for your unit tests:  just use the unit test button.

From the console, start up a Leo instance. On MS Windows: go to the folder in which you installed Leo 4.3, open up the 'src' folder and double click the 'leo.py' file. Opening a command window, and typing "python leo.py" may be another way.

Use the File--&gt;Open... menu item to open the outline containing your code.

Choose a good-looking position to insert a new node called 'Test zone'. Copy the child node of the node you're reading right now, and paste it as a child node of 'Test zone'. The code it contains is essentially the same as found in the node
Unit tests...--&gt;Do @test
in the file 'test.leo' in the 'test' folder. I just added my 0.2 cents by adding some starting and finishing remarks. Remove them if they clutter your console too much.

Also, make sure that you have an entry 'Scripting' in the 'Plugins' menu (enable the plugin if neccessary). Now is a good time to save your leo file.

With the 'Scripting' plugin (also known as the 'mod_scripting' plugin) enabled, the net effect will be that the next time you open your outline, a blue button with the caption 'Do @test' shows up in the tool bar of Leo, if your screen is wide enough.
To get the button right away in the tool bar, I have to assume that you started Leo with the scripting plugin enabled. In this case, a yellow button with the caption 'script Button' can be pressed while having the node '@button Do @test' selected. Note: the resulting button will not be blue, but pink. Removing a button from the tool bar can be done by right-clicking it.

We'll see the use of this added button soon, but before that, read up on the 'assert' function in the Python manuals, since it is used a lot in testing. It won't be long before you're back here!</t>
<t tx="ekr.20050618061835.4">@color

import leoTest

g.pr("\nStart of Do @test")
leoTest.doTests(c,all=False)
g.pr("End of Do @test")</t>
<t tx="ekr.20050618061835.5">The first child node of the node you're reading right now, contains the simplest succeeding test possible.
Select it, and press the button 'Do @test'.
You can find the verbatim result as it got sent to my console in the second child node.

A few things are worth noting here:

1.  The node containing the test must have its headline start with '@test'.
2.  Whenever the 'assert' statement finds out that the expression given to it
    is 'True', a test passes successfully. There are more ways to pass a test, but
    for now, let us stick to the use of assert functions.
3.  A passed test is denoted with a single dot in the output. See the line between
    'Start of Do @test' and the line filled with dashes. This is compatible with the
    way traditional unit testing shows its progress.
4.  Below the dashed line in the output, a summary is printed. This one surely gives
    us a reason to lean back for a moment, and congratualate ourselves with another
    piece of robust, funky code!</t>
<t tx="ekr.20050618061835.6">@color
assert(True)</t>
<t tx="ekr.20050618061835.7">Start of Do @test
.
----------------------------------------------------------------------
Ran 1 test in 0.010s

OK
End of Do @test</t>
<t tx="ekr.20050618061835.8">Now that you've seen a passing test, it should be obvious to imagine how a failing test would look like. See the first child node, and then run it by pressing the 'Do @test' button as before.

Instead of a dot denoting success, we get an 'F' denoting a failure on the line following 'Start of Do @test'. When running a lot of tests, the next part, following the lines filled with '='s, helps to identify which test failed.
It also includes a trace back, but for AssertionErrors, it does not seem to offer much added value to me right now. On second thought: when you have multiple asserts in a test, the trace back can tell you which assert function failed. Still, I would choose for only one assert function per test and get rid of this trace back altogether. This would keep the console much cleaner, IMHO.</t>
<t tx="ekr.20050618061835.9">@color
assert('Spam' == 'Ham')</t>
<t tx="ekr.20051012104957"></t>
<t tx="ekr.20051013162226"></t>
<t tx="ekr.20051107115231"># These are mysteriously fragile tests, so they go first
</t>
<t tx="ekr.20051107115231.13"></t>
<t tx="ekr.20051107115231.14">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)

h = '@test return ends editing of headline'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
guiName = g.app.gui.guiName()
wName = g.app.gui.widget_name(w)
assert wName.startswith('head'),'w.name:%s' % wName
g.app.gui.event_generate(c,'\n','Return',w)
c.outerUpdate()
assert w != c.get_focus(),'oops2: focus in headline'
</t>
<t tx="ekr.20051107115231.15">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)

k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = '@test editLabel selects entire headline'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
assert w
s = w.getAllText()
selectAll = c.config.getBool('select_all_text_when_editing_headlines')
# g.trace('editLabel selects entire headline',selectAll)
i,j = w.getSelectionRange()
if selectAll:
    assert i == 0 and j == len(s),'oops1: i: %d, j: %d' % (i,j)
else:
    assert i == len(s) and j == len(s),'oops2: i: %d, j: %d' % (i,j)
</t>
<t tx="ekr.20051107115231.16">trace = False ; verbose = False
import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
if trace: print('='*20)
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
g.app.gui.set_focus(c,w)
w2 = g.app.gui.get_focus(c)
if trace: print('focus 1',w2)
if trace: print('*** w ***',w)
if 0: # The tkGui.set_focus now does an update to force the focus.
    w2 = g.app.gui.get_focus(c)
    if w != w2:
        print('*** FAIL ***\nw: %s\nw2: %s' % (w,w2))
    assert w == w2 or hasattr(w,'widget') and w.widget == w2,'w: %s\nw2: %s' % (w,w2)
    if trace: print('focus',w2)
# For the qt gui w is a wrapper and w.widget is the actual widget.

try:
    assert w
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    g.app.gui.set_focus(c,w)
    w2 = g.app.gui.get_focus(c)
    if trace: print('focus 1',w2)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    w.update()
    if 1:
        assert p.h == h + paste,'Expected: %s, got %s' % (
            h + paste,p.h)
finally:
    if trace: print('-'*20)
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.17">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.k

if k.defaultUnboundKeyAction == 'insert':
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = u.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redrawAndEdit(p) # To make the node visible.
    w = c.edit_widget(p)
    # print('guiName',g.app.gui.guiName())
    try:
        assert w, 'oops1'
        wName = g.app.gui.widget_name(w)
        assert wName.startswith('head'),'w.name:%s' % wName
        w.setSelectionRange('end','end')
        g.app.gui.event_generate(c,'X','Shift+X',w)
        g.app.gui.event_generate(c,'Y','Shift+Y',w)
        g.app.gui.event_generate(c,'Z','Shift+Z',w)
        g.app.gui.event_generate(c,'\n','Return',w)
        assert p.h == h + 'XYZ',(
            'oops2: expected: %s, got: %s' % (
                h + 'XYZ',p.h))
        if g.app.gui.guiName() != 'nullGui':
            assert c.undoer.undoMenuLabel == 'Undo Typing','oops3: %s' % (
                c.undoer.undoMenuLabel)
        k.manufactureKeyPressForCommandName(w,'undo')
        if g.app.gui.guiName() != 'nullGui':
            assert c.undoer.redoMenuLabel == 'Redo Typing','oops4'
        assert p.h == h,'oops5 got: %s, expected: %s' % (
            p.h,h)
    finally:
        if 1:
            c.setHeadString(p,h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.18">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redrawAndEdit(p) # To make node visible
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h + paste,'oops2 got: %s' % p.h
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h,'oops3 got: %s' % p.h
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.20">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w, 'Null w'
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('1.1','1.2')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    g.app.gui.event_generate(c,'\n','Return',w)
    assert p.h == h[0] + paste + h[2:]
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h, 'head mismatch'
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.21">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.k

if k.defaultUnboundKeyAction == 'insert':
    frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
    h = 'Test headline abc'
    p = u.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p) # To make node visible
    tree.editLabel(p)
    w = c.edit_widget(p)
    try:
        assert w
        w.setSelectionRange('end','end')
        g.app.gui.event_generate(c,'X','Shift+X',w)
        g.app.gui.event_generate(c,'Y','Shift+Y',w)
        g.app.gui.event_generate(c,'Z','Shift+Z',w)
        g.app.gui.event_generate(c,'\n','Return',w)
        assert p.h == h + 'XYZ'
        k.manufactureKeyPressForCommandName(w,'undo')
        assert p.h == h
    finally:
        if 1:
            c.setHeadString(p,h) # Essential
            c.redraw(p)
</t>
<t tx="ekr.20051107115231.24"># Should be a comment# Should be a comment# Should be a comment# Should be a comment
import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.bodyWantsFocus()
paste = '# Should be a comment'
g.app.gui.replaceClipboardWith(paste)
c.outerUpdate()
n = c.frame.body.colorizer.count
event = g.app.gui.create_key_event(c,None,None,c.frame.body.bodyCtrl)
c.frame.pasteText(event)

# Move around and and make sure it doesn't change.
try:
    # There is no colorizer to test for wx.
    if g.app.gui.guiName() == 'tkinter':
        c.outerUpdate() # Force the coloring before doing the test.
        assert c.frame.body.colorizer.count &gt; n, 'did not recolor text'
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.25">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    g.app.gui.set_focus(c,w)
    w2 = g.app.gui.get_focus(c)
    # assert w == w2 or hasattr(w,'widget') and w.widget == w2,'w: %s\nw2: %s' % (w,w2)
    w.setSelectionRange('end','end')
    n = w.getWidth()
    g.app.gui.event_generate(c,'X','Shift+X',w)
    g.app.gui.event_generate(c,'Y','Shift+Y',w)
    g.app.gui.event_generate(c,'Z','Shift+Z',w)
    g.app.gui.event_generate(c,'\n','Return',w)
    w.update()
    assert w, 'fail 2'
    # n2 = w.getWidth()
    # if g.app.gui.guiName() == 'tkinter':
        # assert n2 &gt; n, '%s %s' % (n2,n)
    # g.trace(n,n2)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.28">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
k = c.keyHandler
frame = c.frame ; tree = frame.tree ; canvas = tree.canvas
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w,'oops1'
    w.setSelectionRange('end','end')
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    w.setSelectionRange('end','end')
    k.manufactureKeyPressForCommandName(w,'paste-text')
    c.selectPosition(p.visBack(c))
    assert p.h == h + paste
    k.manufactureKeyPressForCommandName(w,'undo')
    assert p.h == h,'expected: %s, got: %s' % (
        h,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051107115231.29">import leo.core.leoEditCommands as leoEditCommands
s = 'foo' ; bodyCtrl = c.frame.body.bodyCtrl

c.searchCommands.openFindTab()
h = c.searchCommands.findTabHandler
w = h.find_ctrl
w.setAllText(s)
c.bodyWantsFocus()
bodyCtrl.setInsertPoint(0)
c.searchCommands.findTabFindNext()
w = c.get_focus()
wName = g.app.gui.widget_name(w)

# in wxPython w != bodyCtrl (it's a proxy)
assert 'body' in wName, 'focus: %s = %s, expected %s = %s' % (
    w,wName,bodyCtrl,g.app.gui.widget_name(bodyCtrl))
</t>
<t tx="ekr.20051109091333"># Not ready yet: generating a backspace seems impossible!

import leo.core.leoTest as leoTest
u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.setBodyString(p,'a')
c.redraw_now() # To make node visible and to set the icon.
try:
    c.bodyWantsFocus()
    n = c.frame.tree.redrawCount
    w = c.frame.body.bodyCtrl
    w.setInsertPoint('end')
    g.app.gui.event_generate(c,'\b','BackSpace',w)
    n2 = c.frame.tree.redrawCount
    assert n2 == n + 1,'too many or too few redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw_now()
</t>
<t tx="ekr.20051109091731">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)

h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.setBodyString(p,'a')
c.redraw(p) # To make node visible
# print('after redraw_now')
c.bodyWantsFocus()
n = c.frame.tree.redrawCount
try:
    w = c.frame.body.bodyCtrl
    g.app.gui.event_generate(c,'a','a',w)
    n2 = c.frame.tree.redrawCount
    assert n2 == n,'too many redraws: %d' % (n2-n)
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20051109143831"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractAllHeadlines()
g.app.unitTestDict['restoreSelectedNode']=False


</t>
<t tx="ekr.20051120110335">u = c.undoer
c.insertHeadline()
assert u.undoMenuLabel == 'Undo Insert Node',repr(c.undoMenuLabel)
c.undoer.undo()
assert u.redoMenuLabel == 'Redo Insert Node',repr(u.undoMenuLabel)
</t>
<t tx="ekr.20051120115046">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
body = 'This is a test'
c.setBodyString(p,body)

try:
    assert p.b == body
    c.insertHeadline()
    c.undoer.undo()
    assert p.b == body
finally:
    c.setBodyString(p,'')
</t>
<t tx="ekr.20051122095426"></t>
<t tx="ekr.20051125155134">n = c.frame.tree.redrawCount
# print('before')
c.insertHeadline()
c.outerUpdate() # Not actually needed, but should not matter.
# print('after')

try:
    n2 = c.frame.tree.redrawCount
    assert n2 == n + 1,'redraws: %d' % (n2 - n)
finally:
    c.undoer.undo()
</t>
<t tx="ekr.20051125170139">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.redraw(p) # To make node visible
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
try:
    assert w
    w.setSelectionRange('end','end')
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20051216171321"></t>
<t tx="ekr.20060106211922">n = g.app.positions
assert c.isCurrentPosition(None) is False
assert c.isCurrentPosition(p) is True
assert g.app.positions == n
</t>
<t tx="ekr.20060106211922.1">assert not c.isRootPosition(None),'fail 1'
assert not c.isRootPosition(p),'fail 2'
</t>
<t tx="ekr.20060127120604"></t>
<t tx="ekr.20060130151716.1">table = (
    # 'toggle-find-clone-find-all-option',
    'toggle-find-ignore-case-option',
    'toggle-find-in-body-option',
    'toggle-find-in-headline-option',
    'toggle-find-mark-changes-option',
    'toggle-find-mark-finds-option',
    'toggle-find-regex-option',
    # 'toggle-find-reverse-option',
    'toggle-find-word-option',
    'toggle-find-wrap-around-option',
)

for command in table:
    c.k.simulateCommand(command)
    c.k.simulateCommand(command)

</t>
<t tx="ekr.20060130151716.2">table = (
    'set-find-everywhere',
    'set-find-node-only',
    'set-find-suboutline-only',
)

# show-find-tab-options     = Ctrl-o
# show-find-options         = o

for command in table:
    c.k.simulateCommand(command)
</t>
<t tx="ekr.20060130151716.3">table = (
    're-search-forward',
    're-search-backward',
    'search-forward',
    'search-backward',
    'word-search-forward',
    'word-search-backward',
)

for command in table:
    # This is not a full test.  We must use keyboardQuit here!
    c.k.simulateCommand(command)
    c.k.keyboardQuit(None)
</t>
<t tx="ekr.20060130151716.4">c.k.simulateCommand('show-find-options')
</t>
<t tx="ekr.20060131102450">print('\nEnd of typing and undo tests')
</t>
<t tx="ekr.20060208072307">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)

if c.k.defaultUnboundKeyAction == 'insert':
    h = 'Test headline abc'
    p = u.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.redraw(p)
    c.bodyWantsFocus()
    paste = 'ABC'
    g.app.gui.replaceClipboardWith(paste)
    event = g.app.gui.create_key_event(c,None,None,c.frame.body.bodyCtrl)
    c.frame.pasteText(event)
    
    # Move around and and make sure it doesn't change.
    try:
        assert p.b == paste, 'paste1 failed'
        c.selectPosition(p.threadBack())
        assert p.b == paste, 'stick failed'
        c.selectPosition(p)
        assert p.b == paste, 'revisit failed'
    finally:
        if 1:
            c.setBodyString(p,'')
            c.redraw(p)
</t>
<t tx="ekr.20060208072331">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
c.frame.tree.editLabel(p)
w = c.edit_widget(p)
w.setSelectionRange('end','end',insert='end')
paste = 'ABC'
g.app.gui.replaceClipboardWith(paste)
event = g.app.gui.create_key_event(c,None,None,w)
c.frame.pasteText(event)
# Move around and and make sure it doesn't change.
try:
    # g.trace('before select',w,w.getAllText())
    c.selectPosition(p.threadBack())
    assert p.h == h + paste,'oops1: expected: %s, got %s' % (h + paste,p.h)
    c.selectPosition(p)
    assert p.h == h + paste,'oops2: expected: %s, got %s' % (h + paste,p.h)
finally:
    if 1:
        c.setHeadString(p,h) # Essential
        c.redraw(p)
</t>
<t tx="ekr.20060208072358"># This test is too flaky for Tk.
if g.app.gui.guiName() != 'tkinter':

    import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)

    h = 'Test headline abc'
    p = u.findNodeAnywhere(h)
    assert p,'node not found: %s' % h
    c.selectPosition(p)
    c.bodyWantsFocus()
    c.redraw(p) # To make node visible
    n = c.frame.tree.redrawCount
    assert not p.b, 'oops1'
    try:
        # print('before insert a',c.p)
        assert p == c.p,'position has changed!'
        w = c.frame.body.bodyCtrl
        g.app.gui.event_generate(c,'a','a',w)
        assert p.b == 'a', 'expected "a", got: %s' % repr(p.b)
        if g.app.gui.guiName() != 'nullGui':
            n2 = c.frame.tree.redrawCount
            c.outerUpdate() # Force the coloring before doing the test.
            assert n2 == n + 1,'too many or too few redraws: expected 1: got: %d' % (n2-n)
    finally:
        if 1:
            c.setBodyString(p,'')
            c.redraw(p)
</t>
<t tx="ekr.20060208072415">import leo.core.leoTest as leoTest ; u = leoTest.testUtils(c)
h = 'Test headline abc'
p = u.findNodeAnywhere(h)
assert p,'node not found: %s' % h
c.selectPosition(p)
s = 'ABC'
c.setBodyString(p,s)
try:
    c.bodyWantsFocus()
    w = c.frame.body.bodyCtrl
    w.setInsertPoint(2)
    c.outerUpdate() # This fixed the problem.
    g.app.gui.event_generate(c,'Delete','Delete',w) # Calls c.outerUpdate()
    assert p.b == s[:-1],'oops1: expected "AB", got %s' % p.b
    c.selectPosition(p.threadBack())
    c.selectPosition(p)
    assert p.b == s[:-1],'oops2: expected "AB", got %s' % p.b
finally:
    if 1:
        c.setBodyString(p,'')
        c.redraw(p)
</t>
<t tx="ekr.20060602195313">at = c.atFileCommands
child = p.firstChild()
child2 = child.next()
result = str(child2.b)
at.write(child,nosentinels=False,thinFile=False,scriptWrite=False,toString=True)
s = str(at.stringOutput)

if s != result:
    print('-' * 30)
    print(s)
    print('-' * 30)
    print(result)

assert s == result
</t>
<t tx="ekr.20060602195313.2">@language c
#ifdef COMMENT
@comment /* */ 
#endif
@tabwidth 4
@lineending crlf

@others

&lt;&lt; Get LRR Task &gt;&gt;
&lt;&lt; Start LRR &gt;&gt;
</t>
<t tx="ekr.20060602195313.3"></t>
<t tx="ekr.20060602195313.4"></t>
<t tx="ekr.20060602195914">/*@+leo-ver=5*/
/*@+node:root*/
/*@@language c*/
#ifdef COMMENT
/*@@comment /* */ */
#endif
/*@@tabwidth 4*/
/*@@lineending crlf*/

/*@+others*/
/*@-others*/

/*@+&lt;&lt; Get LRR Task &gt;&gt;*/
/*@+node:&lt;&lt; Get LRR Task &gt;&gt;*/
/*@-&lt;&lt; Get LRR Task &gt;&gt;*/
/*@+&lt;&lt; Start LRR &gt;&gt;*/
/*@+node:&lt;&lt; Start LRR &gt;&gt;*/
/*@-&lt;&lt; Start LRR &gt;&gt;*/
/*@-leo*/
</t>
<t tx="ekr.20060912091510.1">import time

c.frame.body.addEditor()

time.sleep(0.5)

c.frame.body.deleteEditor()

time.sleep(0.5)
</t>
<t tx="ekr.20060913084600">import leo.core.leoNodes as leoNodes

if leoNodes.use_zodb:
    p.v.__hash__()
</t>
<t tx="ekr.20061101121602.100">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.101">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.102">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.103">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.104">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.105">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.106">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.107">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.108">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.109">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.110">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.111">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.112">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.113">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.114">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.115">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.116">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.117">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.118">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.119">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.120">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.121">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.122">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.123">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.124">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.125">first lie
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.126">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.127">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.128">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.129">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.130">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.131">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.132">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.133">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.134">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.135">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.136">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.137">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.138">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.139">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.140">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.141">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.142">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.143">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.144">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.145">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.146">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.147">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.148">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.149">first line
line 1
    Line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.150">@pagewidth 70 # Required for unit test.

import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.151">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.152">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.153">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.154">@pagewidth 70 # Required for unit test.

import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.155">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.156">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.157">Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly $14 billion in damage.
         StormReady, a program started in 1999 in Tulsa, OK,
  helps arm America's communities with the communication and safety
skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.
</t>
<t tx="ekr.20061101121602.158">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.159">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.160">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.161">first line
line    line b
line c
last line
</t>
<t tx="ekr.20061101121602.162">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.163">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.164">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.165">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.166">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.167">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.168">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.169">firstline
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.170">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.171">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.172">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.173">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.174">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.175">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.176">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.177">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. stormready, a program started in 1999 in tulsa, ok, helps arm america's communities with the communication and safety skills needed to save lives and property– before and during the event. stormready helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.178">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.179">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.180">XYZZY line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.181">xyzzy line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.182">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.183">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.184">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.185">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.186">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.187">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.188">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.189">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.190">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.191">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.192">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.193">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.194">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.195">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.196">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.197">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.198">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.199">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.200">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.201">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.202">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.203">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.204">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.205">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.206">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.207">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.208">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.209">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.210">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.211">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.212">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.213">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.214">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.215">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.216">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.217">first line
line 1
    line_24a a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.218">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.219">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.220">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage.
StormReady, a program started in 1999 in Tulsa, OK,
helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.221">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.222">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.223">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.224">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.225">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.226">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.227">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.228">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.229">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.230">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.231">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.232">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.233">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.234">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.235">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.236">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.237">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.238">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.239">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.240">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.241">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.242">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.243">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.244">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.245">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.246">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.247">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.248">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.249">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.250">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.251">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.252">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.253">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.254">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.255">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.256">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.257">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.258">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.259">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.260">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.261">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.262">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.263">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.264">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.265">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.266">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.267">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.268">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.269">first line
line 1
    line a
        line b
        line c
last line
</t>
<t tx="ekr.20061101121602.270">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.271">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.272">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.273">first line
	line 1
	    line a
	        line b
	line c
last line
</t>
<t tx="ekr.20061101121602.274">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.275">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.276">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.277">first li
ne
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.278">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.279">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.280">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.281">first() line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.282">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.283">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.284">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.



StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.285">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.286">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.287">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.288">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.289">first line
line 1
line c
    line a
        line b
last line
</t>
<t tx="ekr.20061101121602.290">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.291">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.292">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.293">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.294">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.295">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.296">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.297">first (line)
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.298">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.299">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.300">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.301">first line
line 1
    (line )a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.302">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.303">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.304">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.305">first line
line 1
    
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.306">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.307">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.308">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.309">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.310">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.311">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.312">first line

line 1
    line a
        line b

line c
last line
</t>
<t tx="ekr.20061101121602.313">first line

line 1
   line a
       line b

line c
last line
</t>
<t tx="ekr.20061101121602.314">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.315">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.316">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.317">first line
line 1
line a
    line b
line c
last line
</t>
<t tx="ekr.20061101121602.318">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.319">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.320">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.321">
last line
line c
        line b
    line a
line 1
first line
</t>
<t tx="ekr.20061101121602.322">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.323">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.324">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.325">        line b
    line a
first line
last line
line 1
line c
</t>
<t tx="ekr.20061101121602.326">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.327">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.328">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.329">first line
        line b
    line a
line 1
line c
last line
</t>
<t tx="ekr.20061101121602.330">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.331">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.332">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.333">first
 line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.334">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.335">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.336">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.337">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.338">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.339">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.340">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.341">frist line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.342">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.343">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.344">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.345">line 1
first line
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.346">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.347">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.348">first line
line 1
	line a
		line b
line c
last line
</t>
<t tx="ekr.20061101121602.349">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.350">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.351">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.352">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.353">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

SOME 90% OF ALL PRESIDENTIALLY DECLARED DISASTERS ARE WEATHER RELATED, LEADING TO AROUND 500 DEATHS PER YEAR AND NEARLY $14 BILLION IN DAMAGE. STORMREADY, A PROGRAM STARTED IN 1999 IN TULSA, OK, HELPS ARM AMERICA'S COMMUNITIES WITH THE COMMUNICATION AND SAFETY SKILLS NEEDED TO SAVE LIVES AND PROPERTY– BEFORE AND DURING THE EVENT. STORMREADY HELPS COMMUNITY LEADERS AND EMERGENCY MANAGERS STRENGTHEN LOCAL SAFETY PROGRAMS.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20061101121602.354">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
assert g.app.unitTestDict.get('colorized')
</t>
<t tx="ekr.20061101121602.355">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.356">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.357">first line
line 1
    LINE a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.78">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.79">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.80">first line
line 1
    line a
line b
last line
</t>
<t tx="ekr.20061101121602.81">first line
 line 1
     line a
 line b
last line
</t>
<t tx="ekr.20061101121602.82">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.83">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.84">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.85">first line
    line 1
        line a
            line b
    line c
last line
</t>
<t tx="ekr.20061101121602.86">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.87">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.88">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.89">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.90">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.91">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.92">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.93">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061101121602.94">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.95">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.96">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.97">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061101121602.98">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061101121602.99">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20061104172236.1"></t>
<t tx="ekr.20061104172236.2"># targetWord

e = c.editCommands
k = c.k ; w = c.frame.body.bodyCtrl
w.setInsertPoint(0)
k.arg = 't' # 'targetWord'
k.setState('find-word',1)
for val in (True,False):
    e.oneLineFlag = val
    f = e.findWordInLine(event=None)
    i,j = w.getSelectionRange()
    assert i == 2, 'expected 2, got' % (i)
    # s = w.getAllText()
    # ch = s[i]
    # assert word == 'targetWord', 'got: %s' % word

</t>
<t tx="ekr.20061104172236.22"># target.

try:
    w = c.frame.body.bodyCtrl
    s = w.getAllText()
    w.setInsertPoint(len(s))
    c.k.previousSelection = 2,8
    event = g.app.gui.create_key_event(c,None,None,w)
    c.frame.pasteText(event=event,middleButton=True)
    s2 = w.getAllText()
    assert len(s2) == len(s) + len('target')
finally:
    w.setAllText(s)
    p.setBodyString(s)
    # g.trace(repr(s))
    c.recolor()

# end
</t>
<t tx="ekr.20061104172236.23">w = c.frame.body.bodyCtrl
y = 10
for x in range(0,100,10):
    event = g.app.gui.create_key_event(c,None,None,w,x=x,y=y)
    c.frame.body.onClick(event)
</t>
<t tx="ekr.20061104172236.3"># TARGETWORD

w = c.frame.body.bodyCtrl

for (which,result) in (('cap','Targetword'),('low','targetword'),('up','TARGETWORD')):
    w.setInsertPoint(5)
    c.editCommands.capitalizeHelper(event=None,which=which,undoType=None)
    s = w.getAllText()
    word = s[2:12]
    assert word == result, 'Expected %s, got: %s' % (result,repr(word))
    i = w.getInsertPoint()
    assert i == 5, 'Expected 5, got: %d' % i
</t>
<t tx="ekr.20061104172236.4">w = c.frame.body.bodyCtrl
ec = c.editCommands

for spot,result in (('1.0',0),(5,5)):
    ec.setMoveCol(w,spot)
    assert ec.moveSpot == result
    assert ec.moveCol == result
</t>
<t tx="ekr.20061104172236.5">ec = c.editCommands ; w = c.frame.body.bodyCtrl

for i,j,python in (
    # ('1.0','4.5',False),
    (5,50,True),
):
    extend = True
    ec.moveSpot = None # It's hard to init this properly.
    ec.extendHelper(w,extend,j)
    i2,j2 = w.getSelectionRange()
    # print(i2,j2)
    #assert 0==i2, 'Expected i=%s, got %s' % (repr(i),repr(i2))
    #assert j==j2, 'Expected j=%s, got %s' % (repr(j),repr(j2))
</t>
<t tx="ekr.20061104172236.6">ec = c.editCommands ; w = c.frame.body.bodyCtrl

for i,j,python in (
    #('1.0','4.5',False),
    (5,50,True),
):
    event = None ; extend = True ; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveToHelper (event,j,extend)
    i2,j2 = w.getSelectionRange()
    assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
    assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
    w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061104172236.7">ec = c.editCommands
w = c.frame.body.bodyCtrl

for direction in ('up','down'):
    for distance in ('line','page','half-page'):
        event = g.app.gui.create_key_event(c,None,None,w)
        ec.scrollHelper(event,direction,distance)
</t>
<t tx="ekr.20061106201509.6"># line 1
# line 2
# line 3

w = c.frame.body.bodyCtrl
index = 11 # in the second line.
w.setInsertPoint(index)
before,ins,after = c.frame.body.getInsertLines()
assert before == '# line 1\n','Got %s' % repr(before)
assert ins    == '# line 2\n','Got %s' % repr(ins)
assert after.startswith('# line 3\n'),'line3'
assert after.endswith('# end.\n'),'end'

# end.
</t>
<t tx="ekr.20061106201509.7"># line 1
# line 2
# line 3

w = c.frame.body.bodyCtrl
s = w.getAllText()
start,end = 11,15
w.setSelectionRange(start,end)
before,ins,after = c.frame.body.getSelectionAreas()
assert before == s[0:start],'Got %s' % repr(before)
assert ins    == s[start:end],'Got %s' % repr(ins)
assert after == s[end:]

# end.
</t>
<t tx="ekr.20061110094226">ec = c.editCommands ; w = c.frame.body.bodyCtrl

for i,result,direction in (('5.8','4.8','up'),('5.8','6.8','down')):
    event = None ; extend = False; ec.moveSpot = None
    w.setInsertPoint(i)
    ec.moveUpOrDownHelper (event,direction,extend)
    i2,j2 = w.getSelectionRange()
    if 1:
        break
    else:
        assert i==i2, 'Expected %s, got %s' % (repr(i),repr(i2))
        assert j==j2, 'Expected %s, got %s' % (repr(j),repr(j2))
        w.setSelectionRange(0,0,insert=None)
</t>
<t tx="ekr.20061128082002">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061128082002.1">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128082002.3">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20061128090021">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061128090021.1">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090021.2">line 1
line 2
line 3
line 4
</t>
<t tx="ekr.20061128090021.3">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061128090147.1">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090147.2">line 1
line 2

line 4
</t>
<t tx="ekr.20061128090147.3">line 1
line 2
line 4
</t>
<t tx="ekr.20061128090338">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061128090338.1">line 1
line 2

</t>
<t tx="ekr.20061128090338.2">line 1
line 2
line 3
</t>
<t tx="ekr.20061128090338.3">line 1
line 2

</t>
<t tx="ekr.20061128090441">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20061128090441.1">line 1
line 2
</t>
<t tx="ekr.20061128090441.2">line 1
line 2
</t>
<t tx="ekr.20061128090441.3">line 1
line 2
</t>
<t tx="ekr.20070113145100"># Not part of cvs distributions, but needed for two unit tests.

dir = g.os_path_join(g.app.loadDir,'..','test','unittest',g.u('chinese\u8116folder'),encoding='utf-8')
s   = g.os_path_join(dir,g.u('chinese\u8116test.leo'),encoding='utf-8')
    
if not g.os_path_exists(dir):
    import os
    os.mkdir(dir)
    g.pr('created chinese folder')
    
if not g.os_path_exists(s):
    f = file(s,'w')
    f.close()
    g.pr('created chinese file')
    
</t>
<t tx="ekr.20070131162935">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070131162935.1">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20070131162935.3">first line
line 1
line a
        line b
line c
last line
</t>
<t tx="ekr.20070131171218.1"></t>
<t tx="ekr.20070131171218.2">first line
line 1
    line a
        line b
line c
last line
</t>
<t tx="ekr.20070131172706">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070131172706.1">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131172706.3">This is the first sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070131173932.1">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131173932.2">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20070131173932.3">This is the first sentence.  This
is the second sentence.
</t>
<t tx="ekr.20070131175538"></t>
<t tx="ekr.20070131175538.1"></t>
<t tx="ekr.20070131175646"></t>
<t tx="ekr.20070217065840">@nocolor-node

@
To make unit tests, do the following:
    
- Use the make-test script (Alt-5) to create a suboutline for a unit test.
- Put text in the before node, selected desired text, then do the do-before script (Alt-6).
- Execute the command, then do the do-after script (Alt-7).
</t>
<t tx="ekr.20070217065840.1">try:
    p1 = p.insertAfter()
    c.setHeadString(p1,'@test ')
    body = 'import leoTest\nleoTest.runEditCommandTest(c,p)'
    c.setBodyString(p1,body)
    for s in ('work','before','after'):
        p2 = p1.insertAsLastChild()
        c.setHeadString(p2,s)
    p1.expand()
finally:
    c.redraw()
    c.editPosition(p1)</t>
<t tx="ekr.20070217065840.2">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. The work node should have body text. If all is as expected,
copy the body text the work node to the before node, and represent the selection
range of the work in the headline of the before node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top and work.b:

    c.setBodyString(before,work.b)
    c.setBodyString(after,'')
    putSelectionInHeadline(c,before,'before',sel)
    c.redraw()
else:
    g.es_print('do-before: not in a proper @test tree')</t>
<t tx="ekr.20070217065840.3">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070217065840.4">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild() 
    before = work and work.next()     
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.5">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))

    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217065840.6">@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. If all is as expected, copy the work node to the after node,
and represent the selection range of the work node in the headline of the after node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top:
    c.setBodyString(after,work.b)
    putSelectionInHeadline(c,after,'after',sel)
    c.redraw()
else:
    g.es_print('do-after: not in @test tree')</t>
<t tx="ekr.20070217065840.8">def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild()
    before = work and work.next()
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None</t>
<t tx="ekr.20070217065840.9">def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))
    
    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
</t>
<t tx="ekr.20070217071121.1">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.10">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.11">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.12">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.13">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.14">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.15">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.16">before
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
aaa   xxxbbb
after
</t>
<t tx="ekr.20070217071121.17">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.18">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.19">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.2">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.20">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.21">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.22">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.23">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.24">before
aaas...sbbb
aaas...sbbb
aaas...sbbb
aaas...sbbb
after
</t>
<t tx="ekr.20070217071121.25">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.26">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.27">before
aaaY1Ybbb
aaaY2Ybbb
aaaY3Ybbb
aaaY4Ybbb
after
</t>
<t tx="ekr.20070217071121.28">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.3">before
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
aaaxxxbbb
after
</t>
<t tx="ekr.20070217071121.4">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.5">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217071121.6">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.7">before
aaa   bbb
aaa   bbb
aaa   bbb
aaa   bbb
after
</t>
<t tx="ekr.20070217071121.8">before
aaabbb
aaabbb
aaabbb
aaabbb
after
</t>
<t tx="ekr.20070217071121.9">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070217072822">def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j</t>
<t tx="ekr.20070305095401">p = c.p.copy()
c.selectPosition(p.threadBack())
p1 = c.p
# print(p1)
c.goPrevVisitedNode()
p2 = c.p
# print(p2)
c.goNextVisitedNode()
p3 = c.p
# print(p3)
# assert p == p3
</t>
<t tx="ekr.20070306091949"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoEditCommands tests.')
</t>
<t tx="ekr.20070315065720">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070315065720.1">a

b
</t>
<t tx="ekr.20070315065720.2">a

b
</t>
<t tx="ekr.20070315065720.3">a

b
</t>
<t tx="ekr.20070315065849">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20070315065849.1">a

b
</t>
<t tx="ekr.20070315065849.2">a

b
</t>
<t tx="ekr.20070315065849.3">a

b
</t>
<t tx="ekr.20070417092935" str_leo_pos="7"></t>
<t tx="ekr.20070503064257"></t>
<t tx="ekr.20070528100318"># Required to make a typing test work.
</t>
<t tx="ekr.20070611071101">p1 = p.copy()
a = p.firstChild()
b = a.firstChild()
c2 = b.firstChild()
limit = a.next()
d = limit.firstChild()
e = limit.next()
assert e.h == 'e'
for p2,h in ((a,'a'),(b,'b'),(c2,'c2'),(d,'d'),(limit,'limit')):
    p2.expand()
    assert p2.h==h,'headString mismatch'

try: # Tests without hoist...
    p1.expand()
    assert not c.hoistStack
    c.selectPosition(limit)
    result = limit.copy().moveToVisBack(c)
    assert result==c2,'visBack != c2: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'visNext != d: %s' % result
finally:
    p1.contract()

try: # Tests with hoist.
    p1.expand()
    c.selectPosition(limit)
    c.hoist()
    result = limit.copy().moveToVisBack(c)
    assert not result,'limited visBack: %s' % result
    #
    result = limit.copy().moveToVisNext(c)
    assert result==d,'limited visNext !=d: %s' % result
finally:
    c.dehoist()
    c.selectPosition(p1)
    p1.contract()
    c.redraw_now()

</t>
<t tx="ekr.20070611071101.1"></t>
<t tx="ekr.20070611071101.2"></t>
<t tx="ekr.20070611071101.3"></t>
<t tx="ekr.20070611071101.4"></t>
<t tx="ekr.20070611071101.5"></t>
<t tx="ekr.20070611071954"></t>
<t tx="ekr.20071007120750.3">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007120750.4">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007120750.5">import leo.core.leoTest as leoTest
c.editCommands.ccolumn = 4 # Set the comment column
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007120750.6"># xxxx.yyyy

s = p.b
w = c.frame.body.bodyCtrl
w.setSelectionRange(2,11)
c.editCommands.setFillPrefix(event=None)
assert c.editCommands.fillPrefix == 'xxxx.yyyy'
</t>
<t tx="ekr.20071007120947">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007120947.6">first line
last lin
</t>
<t tx="ekr.20071007120947.7">first line
last line
</t>
<t tx="ekr.20071007120947.8">first line
last lin
</t>
<t tx="ekr.20071007121115.1">first line
line 1
last line
</t>
<t tx="ekr.20071007121115.2">first line
    line 1
last line
</t>
<t tx="ekr.20071007121115.3">first line
line 1
last line
</t>
<t tx="ekr.20071007121312.1">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.2">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms,
2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes.
Potentially deadly
weather impacts every American.
Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.3">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007121312.5">first line
    line b
last line
</t>
<t tx="ekr.20071007121312.6">first line
line b
last line
</t>
<t tx="ekr.20071007121312.7">first line
    line b
last line
</t>
<t tx="ekr.20071007121529">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007121529.1">firstline
last line
</t>
<t tx="ekr.20071007121529.2">first line
last line
</t>
<t tx="ekr.20071007121529.3">firstline
last line
</t>
<t tx="ekr.20071007124202">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071007124202.1">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20071007124202.2">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms,
2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes.
Potentially deadly
weather impacts every American.
Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related,
leading to around 500 deaths per year and nearly
$14 billion in damage.
StormReady, a program started in 1999 in Tulsa,
OK, helps arm America's communities with the communication
and safety skills needed to save lives and property– before and during the event.
StormReady helps community leaders
and emergency managers strengthen local safety programs.

StormReady communities are better prepared
to save lives from the onslaught of severe
weather through better planning, education, and awareness.
No community is storm proof,
but
StormReady can help communities save lives. Does StormReady make a difference?
</t>
<t tx="ekr.20071007124202.3">Americans live in the most severe weather-prone country on Earth. Each year,
Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000
tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly
weather impacts every American. Communities can now rely on the National Weather
Service’s StormReady program to help them guard against the ravages of Mother
Nature.

Some 90% of all presidentially declared disasters are weather related, leading
to around 500 deaths per year and nearly $14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK, helps arm America's communities with the
communication and safety skills needed to save lives and property– before and
during the event. StormReady helps community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of
severe weather through better planning, education, and awareness. No community
is storm proof, but StormReady can help communities save lives. Does StormReady
make a difference?
</t>
<t tx="ekr.20071113081247">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071113081247.1">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.10">x
z
A
c
B
</t>
<t tx="ekr.20071113081247.11">A
B
c
x
z
</t>
<t tx="ekr.20071113081247.2">a
d
e
z
x
</t>
<t tx="ekr.20071113081247.3">z
x
e
d
a
</t>
<t tx="ekr.20071113081247.8">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071113081247.9">A
B
c
x
z
</t>
<t tx="ekr.20071113082531">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20071113082531.1">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113082531.2">c
A
z
X
Y
b
</t>
<t tx="ekr.20071113082531.3">z
Y
X
c
b
A
</t>
<t tx="ekr.20071113090055.4"># This will work regardless of where this method is.
@language python
@tabwidth -4
# @path xyzzy # Creates folder called xyzzy: interferes with other unit tests.
@pagewidth 120

d = c.atFileCommands.scanAllDirectives(p)

assert d.get('language') == 'python'
assert d.get('tabwidth') == -4
# assert d.get('path').endswith('xyzzy')
assert d.get('pagewidth') == 120
</t>
<t tx="ekr.20071113140035">fileName = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','src','leoPy.leo'))
flag,frame2 = g.openWithFileName(fileName,old_c=None,enableLog=False)
c.frame.bringToFront()
g.app.setLog(c.frame.log)
c2 = frame2.c
c1 = c

d1 = {} ; d2 = {}
for c,d in ( (c1,d1),(c2,d2)):
    for t in c.all_unique_tnodes_iter():
        h = t.h
        if h.startswith('@test'):
            d[h]=h

d1.keys().sort() ; d2.keys().sort()

if 0: # not important
    g.pr()
    g.pr('----- Only in unitTest.leo')
    for h in d1.keys():
        if not d2.get(h):
            g.pr(h)

g.pr('\n----- Only in leoPy.leo')
for h in d2.keys():
    if not d1.get(h):
        g.pr(h)</t>
<t tx="ekr.20071113143844.5">assert c.atFileCommands.isSignificantTree(p)

</t>
<t tx="ekr.20071113145804.15">c.helpCommands.helpForMinibuffer()
</t>
<t tx="ekr.20071113145804.16">c.helpCommands.aproposBindings()
</t>
<t tx="ekr.20071113145804.17">c.helpCommands.aproposFindCommands()
</t>
<t tx="ekr.20071113145804.32"># line 1
# line 2
# line 3

w = c.frame.body.bodyCtrl
s = w.getAllText()
start,end = 11,15
w.setSelectionRange(start,end)
before,ins,after = c.frame.body.getSelectionAreas()
assert before == s[0:start],'Got %s' % repr(before)
assert ins    == s[start:end],'Got %s' % repr(ins)
assert after == s[end:]

# end.
</t>
<t tx="ekr.20071113145804.33"># target

try:
    w = c.frame.body.bodyCtrl
    # print((w))
    s2 = p.b
    s = w.getAllText()
    assert s == s2, 'w.getAllText() != p.b: len(w)=%d, len(p)=%d' % (len(s),len(s2))
    w.setInsertPoint(len(s))
    c.k.previousSelection = 2,8
    event = g.app.gui.create_key_event(c,None,None,w)
    c.frame.pasteText(event=event,middleButton=True)
    s2 = w.getAllText()
    assert len(s2) == len(s) + len('target')
finally:
    w.setAllText(s)
    p.setBodyString(s)
    # g.trace(repr(s))
    c.recolor()

# end5targettargettargettargettargettargettargettargettargettargettargettargettargettargettargettarget
</t>
<t tx="ekr.20071113145804.4">@first # -*- coding: utf-8 -*-
@language python

try:
    ec = c.editCommands ; w = c.frame.body.bodyCtrl
    s = w.getAllText()

    # This strings tests unicode, paren matching, and auto-indentation.
    u = g.u('(a\u00c9\u03a9B\u3045\u4e7cz):\n') # '(aÉΩBぅ乼cz):\n'
    u = g.u('(pdq):\n')
    w.setInsertPoint(len(s))
    for char in u:
        stroke = g.choose(char=='\n','Return',char)
        event = g.app.gui.create_key_event(c,char,stroke,w)
        ec.selfInsertCommand(event)
    result = w.getAllText()
    #g.trace('result',repr(result))
    assert result.endswith('    '),'result:\n%s' % result
    # Test of autocompleter.
finally:
    if 1:
        w.setAllText(s)
        p.setBodyString(s)
        # g.trace(repr(s))
        c.recolor()

# end:
</t>
<t tx="ekr.20071113145804.5">@language python
@tabwidth -4

try:
    ec = c.editCommands ; w = c.frame.body.bodyCtrl
    s = w.getAllText()
    w.setSelectionRange(len(s)-9,len(s)-6)
    event = g.app.gui.create_key_event(c,'\t','Tab',w)
    ec.selfInsertCommand(event)
    result = w.getAllText()
    # print('result %s' % result)
    assert result.endswith('\n    ###abcdef\n'),'result\n%s' % (repr(result))
finally:
    w.setAllText(s)
    p.setBodyString(s)
    c.recolor_now()

###abcdef
</t>
<t tx="ekr.20071113145804.7">s1 = '#@+leo-ver=4-thin-encoding=utf-8,.'  # 4.2 format.
s2 = '#@+leo-ver=4-thin-encoding=utf-8.' # pre-4.2 format.

at=c.atFileCommands # Self is a dummy argument.

for s in (s1,s2):
    valid,new_df,start,end,isThinDerivedFile = at.parseLeoSentinel(s)
    # g.trace('start',start,'end',repr(end),'len(s)',len(s))
    assert valid, 'not valid'
    assert new_df, 'not new_df'
    assert isThinDerivedFile, 'not thin'
    assert end == '', 'invalid end: %s' % repr(end)
    assert at.encoding == 'utf-8', 'bad encoding: %s' % repr(at.encoding)
</t>
<t tx="ekr.20071113145804.8">at=c.atFileCommands
table = [
    ('@=',0,at.noDirective),
    ('@',0,at.atDirective),
    ('@ ',0,at.atDirective),
    ('@\t',0,at.atDirective),
    ('@\n',0,at.atDirective),
    ('@all',0,at.allDirective),
    ('    @all',4,at.allDirective),
    ("@c",0,at.cDirective),
    ("@code",0,at.codeDirective),
    ("@doc",0,at.docDirective),
    ("@end_raw",0,at.endRawDirective),
    ('@others',0,at.othersDirective),
    ('    @others',4,at.othersDirective),
    ("@raw",0,at.rawDirective),
]
for name in g.globalDirectiveList:
    # Note: entries in g.globalDirectiveList do not start with '@'
    if name not in ('all','c','code','doc','end_raw','others','raw',):
        table.append(('@' + name,0,at.miscDirective),)

for s,i,expected in table:
    result = at.directiveKind4(s,i)
    assert result == expected, '%d %s result: %s expected: %s' % (
        i,repr(s),at.sentinelName(result),at.sentinelName(expected))
</t>
<t tx="ekr.20071113192611"># 24 failures, 2 errors with Alt-5
</t>
<t tx="ekr.20071113193527"># 4 failures with Alt-5
</t>
<t tx="ekr.20071113193729">@

9 failures with Alt-5.

Any unit test that changes the structure of the outline should do the
following:

- The setUp method should do
    self.undoMark = c.undoer.getMark()
before altering the outline.

- The tearDown method should do
    c.undoer.rollBackToMark(self.undoMark)
after restoring the outline.

u.rollBackToMark deletes all entries in the undo stack following the saved mark.
This eliminates references to nodes that no longer exist in the present outline.
</t>
<t tx="ekr.20071113194424"># 3 failures with Alt-5
</t>
<t tx="ekr.20071113194424.1"># 4 failures with Alt-5
</t>
<t tx="ekr.20071113201736"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoAtFile tests')
</t>
<t tx="ekr.20071113202153"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoFind tests.')
</t>
<t tx="ekr.20071113202153.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

# print('\nEnd of leoFrame tests.')
</t>
<t tx="ekr.20071113202452"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoNodes tests.')
</t>
<t tx="ekr.20071113202510"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

print('\nEnd of leoUndo tests.')
</t>
<t tx="ekr.20071113203234"></t>
<t tx="ekr.20080310073711.1">gnx = g.app.nodeIndices.toString(None)
assert(gnx not in (None,'None'))
assert(len(gnx) &gt; 1)
</t>
<t tx="ekr.20080324133327.2">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.
</t>
<t tx="ekr.20080408094623.1"># start
# targetWord

e = c.editCommands
k = c.k ; w = c.frame.body.bodyCtrl
w.setInsertPoint(0)
k.arg = 't' # 'targetWord'
k.setState('find-word',1)
e.oneLineFlag = False
f = e.findWord(event=None)
i,j = w.getSelectionRange()
assert i == 10, 'expected 15, got %s' % (i)
</t>
<t tx="ekr.20080423110627.11">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p3)
    c.moveOutlineDown()
    moved = c.p
    assert moved.h == 'B',          'fail 1: %s' % moved.h
    assert moved.back().h == 'C',   'fail 2'
    assert moved.next().h == 'D',   'fail 3'
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    # assert moved.back() == p4, 'fail 4: %s != %s' % (moved.back(),p4)
    assert moved.next() == p5,      'fail 5: %s != %s' % (moved.next(),p5)
    c.undoer.undo()
    moved = c.p
    assert moved.back() == p2,      'fail 4'
    assert moved.next() == p4,      'fail 5'
    c.undoer.redo()
    moved = c.p
    assert moved.h == 'B',          'fail 1-2: %s' % moved.h
    assert moved.back().h == 'C',   'fail 2-2'
    assert moved.next().h == 'D',   'fail 3-2'
    c.undoer.undo()
    moved = c.p
    assert moved.back() == p2,      'fail 4-2'
    assert moved.next() == p4,      'fail 5-2'
    c.undoer.redo()
    moved = c.p
    assert moved.h == 'B',          'fail 1-3'
    assert moved.back().h == 'C',   'fail 2-3'
    assert moved.next().h == 'D',   'fail 3-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080423110627.12">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p4)
    c.moveOutlineUp()
    moved = c.p
    assert moved.h == 'C',          'fail 1'
    assert moved.back().h == 'A',   'fail 2'
    assert moved.next().h == 'B',   'fail 3'
    assert moved.back() == p2,      'fail 4: %s != %s' % (moved.back(),p2)
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    # assert moved.next() == p3,    'fail 5: %s != %s' % (moved.next(),p3)
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.13">import leo.core.leoNodes as leoNodes

while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
child.setHeadString('child')

try:
    oldRoot = c.rootPosition()
    child.moveToRoot(oldRoot=oldRoot) # Does not change child position.
    c.setRootPosition(child)
    assert c.positionExists(child)
    assert c.rootPosition().h == 'child', 'fail 1'
    next = c.rootPosition().next()
    assert next.h == 'Startup', 'fail 2: next: %s' % next
    c.rootPosition().doDelete(newNode=next)
    c.setRootPosition(next)
finally:
    while p.hasChildren():
        p.firstChild().doDelete(newNode=None)
    # c.selectPosition(p)
    c.redraw_now()
</t>
<t tx="ekr.20080423110627.2">n = 0
for v in c.all_unique_vnodes_iter():
    if hasattr(v,'unknownAttributes'):
        d = v.unknownAttributes
        if d.get('str_leo_pos'):
            n += 1

# print(n)
assert n &lt; 2
</t>
<t tx="ekr.20080423110627.3"># Delete all children.
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
c.setHeadString(child,'child') # Force the headline to update.

try:
    assert child, 'no child'
    c.selectPosition(child)
    clone = c.clone()
    assert clone == c.p
    assert clone.h == 'child','fail headstring: %s' % clone.h
    assert child.isCloned(), 'fail 1'
    assert clone.isCloned(), 'fail 2'
    assert child.isCloned(), 'fail 3'
    assert clone.isCloned(), 'fail 4'
    c.undoer.undo()
    assert not child.isCloned(), 'fail 1-a'
    c.undoer.redo()
    assert child.isCloned(),    'fail 1-b'
    c.undoer.undo()
    assert not child.isCloned(), 'fail 1-c'
    c.undoer.redo()
    assert child.isCloned(),    'fail 1-d'
    oldRoot = c.rootPosition()
    clone.moveToRoot(oldRoot=oldRoot) # Does not change child position.
    assert child.isCloned(),    'fail 3-2'
    assert clone.isCloned(),    'fail 4-2'
    assert not clone.parent(),  'fail 5'
    assert not clone.back(),    'fail 6'
    clone.doDelete()
    assert not child.isCloned(), 'fail 7'
finally:
    # Delete all children.
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.5">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
child.setHeadString('child')
child2 = p.insertAsNthChild(1)
child2.setHeadString('child2')
grandChild = child.insertAsNthChild(0)
grandChild.setHeadString('grand child')
c.selectPosition(grandChild)
c.clone()
c.selectPosition(child)

try:
    p.expand()
    c.selectPosition(child)
    assert c.p.h == 'child','fail 1'
    c.copyOutline()
    oldVnodes = [p2.v for p2 in child.self_and_subtree()]
    c.selectPosition(child)
    c.p.contract() # Essential
    c.pasteOutline()
    assert c.p != child, 'fail 2'
    assert c.p.h == 'child','fail 3'
    newVnodes = [p2.v for p2 in c.p.self_and_subtree()]
    for v in newVnodes:
        assert v not in oldVnodes, 'fail 4'
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()

finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080423110627.8">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

child = p.insertAsNthChild(0)
child.setHeadString('child')
assert child, 'no child'
grandChild = child.insertAsNthChild(0)
grandChild.setHeadString('grand child')

try:
    c.selectPosition(child)
    c.copyOutline()
    oldVnodes = [p2.v for p2 in child.self_and_subtree()]
    c.p.contract() # Essential
    c.pasteOutlineRetainingClones()
    assert c.p != child, 'fail 2'
    newVnodes = [p2.v for p2 in c.p.self_and_subtree()]
    for v in newVnodes:
        assert v in oldVnodes, 'fail 3'
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080501121449.1"></t>
<t tx="ekr.20080501121449.3">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p.expand()
    c.setCurrentPosition(p2)
    c.insertHeadline()
    p = c.p
    p.setHeadString('inserted')
    assert p.back().h == 'A', 'fail 1'
    assert p.next().h == 'B', 'fail 2'
    c.undoer.undo()
    p = c.p
    assert p == p2,         'fail 3'
    assert p.next() == p3,  'fail 4'
    c.undoer.redo()
    p = c.p
    assert p.back().h == 'A', 'fail 1-2'
    assert p.next().h == 'B', 'fail 2-2'
    c.undoer.undo()
    p = c.p
    assert p == p2,         'fail 3-2'
    assert p.next() == p3,  'fail 3-2'
    c.undoer.redo()
    p = c.p
    assert p.back().h == 'A', 'fail 1-3'
    assert p.next().h == 'B', 'fail 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503073030.1">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p.expand()
    c.setCurrentPosition(p2)
    c.moveOutlineLeft()
    moved = c.p
    assert moved.h == 'A','fail 1'
    # This assert fails because p4._childIndex != moved.back()._childIndex.
    assert moved.back() == p, 'fail 2: %s != %s' % (moved.back(),p4)
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()

    moved.doDelete(newNode=p)

finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
        c.redraw_now(p)
</t>
<t tx="ekr.20080503073030.2">while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p.expand()
    c.setCurrentPosition(p3)
    c.moveOutlineRight()
    moved = c.p
    assert moved.h == 'B', 'fail 1'
    assert moved.parent() == p2
    c.undoer.undo()
    c.undoer.redo()
    c.undoer.undo()
    c.undoer.redo()
finally:
    if 1:
        while p.hasChildren():
            p.firstChild().doDelete(newNode=None)
    if 1:
        c.redraw_now(p)
</t>
<t tx="ekr.20080503082625.3">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p.expand()
    c.selectPosition(p3)
    c.deleteOutline()
    c.redraw_now()
    p = c.p
    assert p.h == 'A', 'fail 1: got %s' % p.h
    assert p.next().h == 'C', 'fail 2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2, 'fail 4 %s' % p.back()
    assert p.next() == p4, 'fail 5'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-2'
    assert p.next().h == 'C',   'fail 2-2'
    c.undoer.undo()
    c.outerUpdate()
    p = c.p
    assert p.back() == p2,  'fail 4-2'
    assert p.next() == p4,  'fail 5-2'
    c.undoer.redo()
    c.outerUpdate()
    p = c.p
    assert p.h == 'A',          'fail 1-3'
    assert p.next().h == 'C',   'fail 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503082625.4">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p3.insertAsNthChild(0)
    p4.setHeadString('child 1')
    p5 = p3.insertAsNthChild(1)
    p5.setHeadString('child 2')
    p.expand()
    p6 = p.insertAsNthChild(2)
    p6.setHeadString('C')
    c.setCurrentPosition(p3)
    c.promote()
    p = c.p
    assert p == p3,         'fail 1'
    assert p.h == 'B',      'fail 2'
    assert p.next().h=='child 1',            'fail 3'
    assert p.next().next().h == 'child 2',   'fail child 1'
    assert p.next().next().next().h == 'C',  'fail child 2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2,  'fail 5'
    assert p.next() == p6,  'fail 6'
    assert p.firstChild().h=='child 1',          'fail child 3'
    assert p.firstChild().next().h == 'child 2', 'fail child 4'
    c.undoer.redo()
    p = c.p
    assert p == p3,         'fail 1-2'
    assert p.h == 'B',      'fail 2-2'
    assert p.next().h=='child 1',            'fail 3-2'
    assert p.next().next().h == 'child 2',   'fail child 1-2'
    assert p.next().next().next().h == 'C',  'fail child 2-2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2,                      'fail 5-2'
    assert p.next() == p6,                      'fail 6-2'
    assert p.firstChild().h=='child 1',         'fail child 3-2'
    assert p.firstChild().next().h == 'child 2','fail child 4-2'
    c.undoer.redo()
    p = c.p
    assert p == p3,     'fail 1-3'
    assert p.h == 'B',  'fail 2-3'
    assert p.next().h=='child 1',            'fail 3-3'
    assert p.next().next().h == 'child 2',   'fail child 1-3'
    assert p.next().next().next().h == 'C',  'fail child 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080503082625.5">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode=None)

try:
    p2 = p.insertAsNthChild(0)
    p2.setHeadString('A')
    p3 = p.insertAsNthChild(1)
    p3.setHeadString('B')
    p4 = p.insertAsNthChild(2)
    p4.setHeadString('C')
    p5 = p.insertAsNthChild(3)
    p5.setHeadString('D')
    p.expand()
    c.setCurrentPosition(p3)
    c.demote()
    p = c.p
    assert p == p3,         'fail 1'
    assert p.h == 'B',      'fail 2'
    assert not p.next(),    'fail 3'
    assert p.firstChild().h == 'C',          'fail child 1'
    assert p.firstChild().next().h == 'D',   'fail child 2'
    c.undoer.undo()
    p = c.p
    assert p == p3
    assert p.back() == p2, 'fail 5'
    assert p.next() == p4, 'fail 6'
    c.undoer.redo()
    assert p == p3,         'fail 1-2'
    assert p.h == 'B',      'fail 2-2'
    assert not p.next(),    'fail 3-2'
    assert p.firstChild().h == 'C',         'fail child 1-2'
    assert p.firstChild().next().h == 'D',  'fail child 2-2'
    c.undoer.undo()
    p = c.p
    assert p.back() == p2, 'fail 4-2'
    assert p.next() == p4, 'fail 5-2'
    c.undoer.redo()
    assert p == p3,         'fail 1-3'
    assert p.h == 'B',      'fail 2-3'
    assert not p.next(),    'fail 3-3'
    assert p.firstChild().h == 'C',         'fail child 1-3'
    assert p.firstChild().next().h == 'D',  'fail child 2-3'

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode=None)
    c.redraw_now(root)
</t>
<t tx="ekr.20080907123324.2">@language python
@tabwidth -4
@others
</t>
<t tx="ekr.20080907123324.3">def child():
    pass

#
#
#
#
#
#
</t>
<t tx="ekr.20081001094920.2"></t>
<t tx="ekr.20081001094920.3">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    assert p1.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.4">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    assert p1.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.5">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    p2 = p1.insertAsLastChild()
    assert p1.textOffset() == 0
    assert p2.textOffset() == 0

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.6">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    body = '''   %s
    ''' % (g.angleBrackets(' section '))
    p1.setBodyString(body)
    p2 = p1.insertAsLastChild()
    head = g.angleBrackets(' section ')
    p2.setHeadString(head)
    assert p1.textOffset() == 0
    assert p2.textOffset() == 3

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081001094920.7">root = p.copy()
while p.hasChildren():
    p.firstChild().doDelete(newNode = None)

try:

    p1 = p.insertAsLastChild()
    p1.setHeadString('@file zzz')
    body = '''     %s
    ''' % (chr(64) + 'others') # ugly hack
    p1.setBodyString(body)
    p2 = p1.insertAsLastChild()
    assert p1.textOffset() == 0
    assert p2.textOffset() == 5
    root.firstChild().doDelete(newNode = None)

finally:
    if 1:
        while root.hasChildren():
            root.firstChild().doDelete(newNode = None)
    c.redraw_now()
</t>
<t tx="ekr.20081111082931.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20081111084046.1"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

</t>
<t tx="ekr.20081111084046.2"></t>
<t tx="ekr.20081111084046.3"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20081111084046.4"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False

</t>
<t tx="ekr.20081215084144.10">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.2">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20081215084144.3">This is the first sentence.  This
is the second sentence.  And
 is the last sentence.
</t>
<t tx="ekr.20081215084144.4">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.5">This is the first sentence.  This
is the second sentence.  And
 is the last sentence.
</t>
<t tx="ekr.20081215084144.7">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20081215084144.8">This is the first sentence.  This
is the  sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20081215084144.9">This is the first sentence.  This
is the second sentence.  And
this is the last sentence.
</t>
<t tx="ekr.20090102061858.2">child = p.insertAsLastChild()
assert c.positionExists(child)
child.doDelete()
assert not c.positionExists(child)

# also check the same on root level
child = c.rootPosition().insertAfter()
assert c.positionExists(child)
child.doDelete()
assert not c.positionExists(child)
</t>
<t tx="ekr.20090102062037.2">root = c.rootPosition()

for p in c.all_positions():
    assert c.positionExists(p,root)
</t>
<t tx="ekr.20090128184952.3"></t>
<t tx="ekr.20090130133404.2">v = p.v
b = p.b
p.b = b
assert p.b == b
v.b = b
assert v.b == b

h = p.h
p.h = h
assert p.h == h
v.h = h
assert v.h == h

for p in c.all_positions():
    assert p.b == p.bodyString()
    assert p.v.b == p.v.bodyString()
    assert p.h == p.headString()
    assert p.v.h == p.v.headString()
</t>
<t tx="ekr.20090225102051.2">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20090225102051.3">Line 1

Last line: no newline
</t>
<t tx="ekr.20090225102051.4">Line 1

Last line: no newline
</t>
<t tx="ekr.20090427104851.10">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.11">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20090427104851.12">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.13">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.14">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.15">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20090427104851.16">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.17">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.18">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.7">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20090427104851.8">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090427104851.9">if a:
    b = 'xyz'
</t>
<t tx="ekr.20090529115704.4562">at = c.atFileCommands

# at.toString is set by the execute-script command.

f = at.openStringFile('abc')

assert f.__class__.__name__ == 'fileLikeObject'

s = 'abc'
f.write(s)
s2 = at.closeStringFile(f)

assert s == s2

# assert at.toString

</t>
<t tx="ekr.20090529115704.4563">at = c.atFileCommands
x = c.shadowController

filename = x.pathName('xyzzy')
assert not g.os_path_exists(filename)

try:
    kind,theFile = at.openForWrite(filename)
    assert kind == 'check'
    # print(repr(theFile))
    if theFile: theFile.close()

finally:
    if g.os_path_exists(filename):
        x.unlink(filename)
        assert not g.os_path_exists(filename)
</t>
<t tx="ekr.20090529115704.4564">at = c.atFileCommands
x = c.shadowController

changed = c.changed
child = p.firstChild()
s = child.b

try:
    fn = 'unittest/read_test.py'
    child.setHeadString('@shadow %s' % fn)
    # shadow_fn = x.shadowPathName(fn)
    at.writeOneAtShadowNode(child,toString=False,force=True)
    at.readOneAtShadowNode(fn,child)
finally:
    child.setHeadString('@@shadow %s' % fn)
    c.setChanged(changed)
    # c.redraw_now()
</t>
<t tx="ekr.20090529115704.4565">@language python
@tabwidth -4
@others
# body of @shadow test node
# The last line.
</t>
<t tx="ekr.20090529115704.4566">import os
s = 'abc'
fn = 'unitTestFile.py'
path = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','test','unittest',fn))
try:
    c.atFileCommands.replaceFileWithString(path,s)
    f = open(path)
    s2 = f.read()
    f.close()
    assert s == s2
finally:
    if g.os_path_exists(path):
        os.unlink(path)
</t>
<t tx="ekr.20090529115704.4567">at = c.atFileCommands
x = c.shadowController
changed = c.changed
child = p.firstChild()
s = child.b

try:
    child.setHeadString('@shadow unittest/test_1.py')
    fn = 'unittest/test_1.py'
    shadow_fn = x.shadowPathName(fn)
    shadow_dir = x.shadowDirName(fn)
    x.makeShadowDirectory(shadow_dir)
    if g.os_path_exists(shadow_fn):
        g.utils_remove(shadow_fn,verbose=True)
    at.writeOneAtShadowNode(child,toString=True,force=True)
    assert at.startSentinelComment == '#','startSentinelComment: %s' % (
        repr(at.startSentinelComment))
    assert at.endSentinelComment == '','endSentinelComment: %s' % (
        repr(at.endSentinelComment))
    if 0:
        print('public...\n',at.public_s)
        print('private...\n',at.private_s)
    at.writeOneAtShadowNode(child,toString=False,force=True)
    assert g.os_path_exists(shadow_fn),'not found: %s' % shadow_fn
    # No need to remove this: it's in the unittest directory.
    # g.utils_remove(shadow_fn,verbose=True)
finally:

    child.setHeadString('@@shadow unittest/test_1.py')
    c.setChanged(changed)
    # c.redraw_now()
</t>
<t tx="ekr.20090529115704.4568"># body of @shadow test node
# The last line.
</t>
<t tx="ekr.20090608174319.4791"># This causes trouble if executed quickly after the add-editor command.
# Presumably this is a timing condition that will never happen in practice.

if 0:
    c.frame.body.deleteEditor()
</t>
<t tx="ekr.20090627070131.4971">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20090627070131.4975">@language python
@tabwidth -4
@others
#end
</t>
<t tx="ekr.20090627070131.4976">def spam(cheese):

    print(cheese)
</t>
<t tx="ekr.20090627070131.4977">def cheese():

    pass
</t>
<t tx="ekr.20090627070131.4978">def spam(cheese):

    print(cheese)
def cheese():

    pass
#end
</t>
<t tx="ekr.20090704085350.5007">@language python
@others</t>
<t tx="ekr.20090704085350.5010">h = '@file ../test/unittest/at-file-test.py'
p = g.findNodeAnywhere(c,h)
assert p
assert not p.isDirty(),p.h # Do not ignore this failure!

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

for p2,h2 in table:
    assert p2.h == h2
    assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5018">h = '@shadow ../test/unittest/at-shadow-test.py'
p = g.findNodeAnywhere(c,h)
assert p

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

assert not p.isDirty(),p.h # Do not ignore this failure!

for p2,h2 in table:
    assert len(p2.h) == len(h2)
</t>
<t tx="ekr.20090704085350.5028">@language python
@others</t>
<t tx="ekr.20090704085350.5029">def spam():
    pass</t>
<t tx="ekr.20090704085350.5030">def eggs():
    pass</t>
<t tx="ekr.20090704085350.5034">@language python
@others</t>
<t tx="ekr.20090704085350.5035">def spam():
    pass</t>
<t tx="ekr.20090704085350.5036">def eggs():
    pass</t>
<t tx="ekr.20090704085350.5040">@language python
@others</t>
<t tx="ekr.20090704085350.5044">h = '@asis ../test/unittest/at-asis-test.py'
p = g.findNodeAnywhere(c,h)
assert p

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

assert not p.isDirty(),p.h # Do not ignore this failure!

for p2,h2 in table:
    assert p2.h == h2
    assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5046">h = '@thin ../test/unittest/at-thin-test.py'
p = g.findNodeAnywhere(c,h)
assert p

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

assert not p.isDirty(),p.h # Do not ignore this failure!

for p2,h2 in table:
    assert p2.h == h2
    assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20090704085350.5052">h = '@auto ../test/unittest/at-auto-test.py'
p = g.findNodeAnywhere(c,h)
assert p

table = (
    (p.firstChild(),'spam'),
    (p.firstChild().next(),'eggs')
)

assert not p.isDirty(),p.h # Do not ignore this failure!

for p2,h2 in table:
    assert p2.h == h2
    assert len(p2.b) &gt; 10
</t>
<t tx="ekr.20091206090247.5060"># Use these with caution.</t>
<t tx="ekr.20091206090247.5061">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print(s) ; g.es(s)</t>
<t tx="ekr.20091206090247.5062"># About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

if 0: # This is usually a very bad idea.

    for p in c.all_positions():
        p.v.fileIndex = None

    g.es("all timestamps cleared")</t>
<t tx="ekr.20091206090247.5063">doDelete = False
put = g.es_print
for p in c.all_positions():
    if p.v.u:
        put("found v.u:",p.h,
            g.listToString(p.v.u.keys()))
        if doDelete:
            p.v.u = None
put('done') 
c.redraw()</t>
<t tx="ekr.20100102164959.5088">nodes = 0 ; lines = 0
for p in c.all_unique_positions():
    nodes += 1
    lines += len(g.splitLines(p.b))

pages = ((nodes * 10) + lines) / 50
s = "%d nodes,  %d lines, %d pages" % (nodes,lines,pages)
print(s); g.es(s)</t>
<t tx="ekr.20100119102849.5108"># backward-find-character and find-character
# can't be tested this way because they require k.getarg.
# They pass hand tests.

&lt;&lt; define table &gt;&gt;

w = c.frame.body.bodyCtrl
child = g.findNodeInChildren(c,p,'work')
assert child
c.selectPosition(child)

for commandName in table:
    # Put the cursor in the middle of the middle line
    # so all cursor moves will actually do something.
    w.setInsertPoint(15) # for move-past-close
    try:
        c.editCommands.extendMode = True
        c.keyHandler.simulateCommand(commandName)
        i,j = w.getSelectionRange()
        assert i != j,'i == j: %s %s' % (i,commandName)
    finally:
        c.editCommands.extendMode = False

</t>
<t tx="ekr.20100119102849.5109"># Cursor movement commands affected by extend mode.
# The x-extend-selection commands are not so affected.
table = (
    'back-to-indentation',
    'back-to-home',
    'back-char',
    'back-page',
    'back-paragraph',
    'back-sentence',
    'back-word',
    'beginning-of-buffer',
    'beginning-of-line',
    'end-of-buffer',
    'end-of-line',
    'forward-char',
    'forward-page',
    'forward-paragraph',
    'forward-sentence',
    'forward-end-word',
    'forward-word',
    'move-past-close',
    'next-line',
    'previous-line',
)
</t>
<t tx="ekr.20100119102849.5110">line 1.
line 2(xxx).
line 3.
</t>
<t tx="ekr.20100123093044.5115">def spam():
    pass</t>
<t tx="ekr.20100123093044.5117">def eggs():
    pass</t>
<t tx="ekr.20100123172713.5114"></t>
<t tx="ekr.20100123172713.5116">count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList"): # and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print s ; g.es(s)</t>
<t tx="ekr.20100131180007.5359">c.frame.tree.OnIconDoubleClick(p)
</t>
<t tx="ekr.20100131180007.5369">table = (
    '1',
    '1-1','1-1-1','1-1-2',
    '1-2','1-2-1','1-2-2',
    '2',
    '2-1','2-1-1','2-1-2',
    '2-2','2-2-1','2-2-2',
    '3',
    '3-1','3-1-1','3-1-2',
    '3-2','3-2-1','3-2-2',
)

for suffix in table:
    h = 'node %s' % suffix
    p2 = g.findNodeInTree(c,p,h)
    assert p2,h

table2 = (
    ('2-1-2','2-1-1','2-1-1'),
    ('3','2','2'),
)  

for h1,h2,h3 in table2:
    p1 = g.findNodeInTree(c,p,'node %s' % h1)
    p2 = g.findNodeInTree(c,p,'node %s' % h2)
    p3 = g.findNodeInTree(c,p,'node %s' % h3)
    p1._adjustPositionBeforeUnlink(p2)
    result = p1
    assert result.stack == p3.stack,'expected %s got %s' % (
        p3.h,result and result.h or '&lt;none&gt;')

# Data.
@others
</t>
<t tx="ekr.20100131180007.5370"># Node 1
</t>
<t tx="ekr.20100131180007.5371"># node 1-1
</t>
<t tx="ekr.20100131180007.5372"># node 1-1-1
</t>
<t tx="ekr.20100131180007.5373"># node 1-1-2
</t>
<t tx="ekr.20100131180007.5374"># node 1-2
</t>
<t tx="ekr.20100131180007.5375"># node 1-2-1
</t>
<t tx="ekr.20100131180007.5376"># node 1-2-2
</t>
<t tx="ekr.20100131180007.5377"># node 2
</t>
<t tx="ekr.20100131180007.5378"># node 2-1
</t>
<t tx="ekr.20100131180007.5379"># node 2-1-1
</t>
<t tx="ekr.20100131180007.5380"># node 2-1-2
</t>
<t tx="ekr.20100131180007.5381"># node 2-2
</t>
<t tx="ekr.20100131180007.5382"># node 2-2-1
</t>
<t tx="ekr.20100131180007.5383"># node 2-2-2
</t>
<t tx="ekr.20100131180007.5384"># node 3
</t>
<t tx="ekr.20100131180007.5385"># node 3-1
</t>
<t tx="ekr.20100131180007.5386"># node 3-1-1
</t>
<t tx="ekr.20100131180007.5387"># node 3-1-2
</t>
<t tx="ekr.20100131180007.5388"># node 3-2
</t>
<t tx="ekr.20100131180007.5389"># node 3-2-1
</t>
<t tx="ekr.20100131180007.5390"># node 3-2-2
</t>
<t tx="ekr.20100131180007.5391">table = (
    ('@auto-rst rst-file','rst-file','rst-file'),
    ('@auto x','x',''),
    ('xyz','',''),
)

for s,expected1,expected2 in table:
    result1 = p.v.atAutoNodeName(h=s)
    result2 = p.v.atAutoRstNodeName(h=s)
    assert result1 == expected1,'fail1: given %s expected %s got %s' % (
        repr(s),repr(expected1),repr(result1))
    assert result2 == expected2,'fail2: given %s expected %s got %s' % (
        repr(s),repr(expected2),repr(result2))
</t>
<t tx="ekr.20100131180007.5453"># A totally wimpy test.
c.abbrevCommands.dynamicExpandHelper(event=None,prefix='',rlist=None,w=None)
</t>
<t tx="ekr.20100131180007.5454">at = c.atFileCommands

at.setPathUa(p,'abc')
d = p.v.tempAttributes
d2 = d.get('read-path')
val1 = d2.get('path')
val2 = at.getPathUa(p)

table = (
    ('d2.get',val1),
    ('at.getPathUa',val2),
)
for kind,val in table:
    assert val == 'abc','kind %s expected %s got %s' % (
        kind,'abc',val)
</t>
<t tx="ekr.20100131180007.5455">at = c.atFileCommands

p2 = p.firstChild().firstChild()
path = at.fullPath(p2,simulate=True)
end = g.os_path_normpath('abc/xyz')
assert path.endswith(end),repr(path)
</t>
<t tx="ekr.20100131180007.5456"></t>
<t tx="ekr.20100131180007.5457"></t>
<t tx="ekr.20100131180007.5458">at = c.atFileCommands
d = at.scanAllDirectives(p)
</t>
<t tx="ekr.20100131180007.5461">at = c.atFileCommands

fn = 'does/not/exist'
assert not g.os_path_exists(fn)
assert not at.replaceFileWithString (fn,'abc')
</t>
<t tx="ekr.20100131180007.5462"># Here is something that should generate a verbtim sentinel::

#@+leo-encoding=iso-8859-1.

# The length of this node should remain constant.

assert len(p.b) == 175,len(p.b)
</t>
<t tx="ekr.20100204165850.5371"># These tests will be important when revising config code.
</t>
<t tx="ekr.20100204165850.5373">k = c.k
colorizer = c.frame.body.getColorizer()
ed = c.editCommands

# These don't set ivars
    # 'toggle-active-pane'),
    # 'toggle-angle-brackets',
    # 'toggle-input-state'),
    # 'toggle-mini-buffer'),
    # 'toggle-split-direction'),

table = (
    (k,'abbrevOn','toggle-abbrev-mode'),
    (k,'enable_autocompleter','toggle-autocompleter'),
    (k,'enable_calltips','toggle-calltips'),
    (ed,'extendMode','toggle-extend-mode'),
    (c,'sparse_find','toggle-find-collapses-nodes'),
    (colorizer,'showInvisibles','toggle-invisibles'),
    (c,'sparse_move','toggle-sparse-move'),
)

for obj,ivar,command in table:
    val1 = getattr(obj,ivar)
    try:
        k.simulateCommand(command)
        val2 = getattr(obj,ivar)
        assert val2 == (not val1),'failed 1 %s' % command
        k.simulateCommand(command)
        val3 = getattr(obj,ivar)
        assert val3 == val1,'failed 2 %s' % command
        # print('pass',command)
    finally:
        setattr(obj,ivar,val1)
</t>
<t tx="ekr.20100204173354.5375">table = (
    ('ignore_case','toggle-find-ignore-case-option'),
    ('search_body','toggle-find-in-body-option'),
    ('search_headline','toggle-find-in-headline-option'),
    ('mark_changes','toggle-find-mark-changes-option'),
    ('mark_finds','toggle-find-mark-finds-option'),
    ('pattern_match','toggle-find-regex-option'),
    # ('reverse','toggle-find-reverse-option'),
    ('whole_word','toggle-find-word-option'),
    ('wrap','toggle-find-wrap-around-option'),
)

finder = c.searchCommands.getHandler().finder
for ivar,command in table:
    val1 = finder.getOption(ivar)
    try:
        c.k.simulateCommand(command)
        val2 = finder.getOption(ivar)
        assert val2 == (not val1),'failed 1 %s' % command
        c.k.simulateCommand(command)
        val3 = finder.getOption(ivar)
        assert val3 == val1,'failed 2 %s' % command
    finally:
        finder.setOption(ivar,val1)
</t>
<t tx="ekr.20100212104817.5346">c.sortRecentFiles()
</t>
<t tx="ekr.20100212104817.5347">child = p.firstChild()
assert child.h == 'b','fail 1'
try:
    c.selectPosition(child)
    c.sortSiblings()
    c.redraw_now()
    child = p.firstChild()
    assert child.h == 'a'
    child = child.next()
    assert child.h == 'b'
    child = child.next()
    assert child.h == 'c'
    assert not child.next()
finally:
    c.undoer.undo()
    p.contract()
    c.redraw(p)
</t>
<t tx="ekr.20100212104817.5348"></t>
<t tx="ekr.20100212104817.5349"></t>
<t tx="ekr.20100212104817.5350"></t>
<t tx="ekr.20100212104817.5351">result = c.helpCommands.getBindingsForCommand('help-for-command')
assert result.strip().lower()=='f1'
</t>
<t tx="ekr.20100225094004.5385">s1 = '''
#@+leo-ver=4
#@+node:#@file
Line 1
#@-node:#@file
#@-leo
'''

s2 = '''
#@+leo-ver=4-thin
#@+node:ekr.20040707141957.13:#@thin
#@-node:ekr.20040707141957.13:#@thin
#@-leo
'''

at = c.atFileCommands
assert at.isFileLike(s1),'fail1'
assert not at.isFileLike(s2),'fail2'
</t>
<t tx="ekr.20100731163237.5778">@language python

# html uses block comments.  This is an important test.

h = '@thin ../test/unittest/at-thin-html-test.html'
p = g.findNodeAnywhere(c,h)
assert p

s = (
'@language html\n\n&lt;&lt; ' +
'a section reference &gt;&gt;\n\n' +
'after.\n')

# print(repr(p.b)) ; print(repr(s))

assert p.b == s,'body failure'
</t>
<t tx="ekr.20100801125533.5787">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20100801125533.5788">@language python
@tabwidth -4
@others
#end
</t>
<t tx="ekr.20100801125533.5789">def spam(cheese):

    print(cheese)
</t>
<t tx="ekr.20100801125533.5790">def cheese():

    pass
</t>
<t tx="ekr.20100801125533.5791">def spam(cheese):

    print(cheese)
def cheese():

    pass
#end
</t>
<t tx="ekr.20100802220019.5795">def clone (p,parent,n):
    p2 = p.clone()
    p2.moveToNthChildOf(parent,n)
    return p2

def make (parent,n,h):
    child = parent.insertAsNthChild(n)
    child.h = h
    return child

def delete_r():
    '''Delete all 'Resurrected Nodes' nodes.'''
    while True:
        r = g.findNodeAnywhere(c,'Resurrected Nodes')
        if r: r.doDelete(newNode=p)
        else: break

def delete_children():
    # Delete all children of p.
    while p.hasChildren():
        p.firstChild().doDelete(newNode=p)

def test(p,h,tag):
    assert p,'p'
    assert p.h == 'From root','p.h %s' % tag
    assert p.numberOfChildren() == 1,'number of children %s' % tag
    assert p.firstChild().h == h,'child.h %s' % tag

delete_r()
delete_children()

# Create some children.
root = make(p,0,'root')
child1 = make(root,0,'child1')
child2 = make(root,1,'child2')
child3 = make(root,2,'child3')
child11 = make(child1,0,'child11')
child21 = make(child2,0,'child21')
child31 = make(child3,0,'child31')
# Create some clones.
child4 = clone(child31,root,3)

for z in root.self_and_subtree():
    z.setVisited()
for z in child2,child31: # These should be moved.
    z.clearVisited()

c.atFileCommands.deleteUnvisitedNodes(root)

if 1:
    r = g.findNodeAnywhere(c,'Resurrected Nodes')
    assert r,'r'
    r1 = r.firstChild()
    r2 = r1.next()
    r3 = r2.next()
    test(r1,'child2','r1')
    test(r2,'child31','r2')
    assert root.numberOfChildren() == 3,'root.n'
if 1:
    delete_r()
    delete_children()

c.redraw_now()
</t>
<t tx="ekr.20100817131738.5886">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20100817131738.5887">aaaacccc dddd
</t>
<t tx="ekr.20100817131738.5888">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5889">aaaacccc dddd
</t>
<t tx="ekr.20100817131738.5894">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20100817131738.5895">aaaa bbcc dddd
</t>
<t tx="ekr.20100817131738.5896">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100817131738.5897">aaaa bbcc dddd
</t>
<t tx="ekr.20100830113702.5969">if g.app.gui.guiName() == 'qt':
    exec(g.findTestScript(c,'@common leoEditCommands test code'))
    runEditCommandTest(c,p,inHeadline=False)
    runEditCommandTest(c,p,inHeadline=True)
</t>
<t tx="ekr.20100830113702.5970">aaaa bbbb dddd
</t>
<t tx="ekr.20100830113702.5971">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100830113702.5972">aaaa bbbb dddd
</t>
<t tx="ekr.20100830113702.5977">if g.app.gui.guiName() == 'qt':

    exec(g.findTestScript(c,'@common leoEditCommands test code'))
    runEditCommandTest(c,p,inHeadline=False)
    runEditCommandTest(c,p,inHeadline=True)
</t>
<t tx="ekr.20100830113702.5978">aaaa bbcc dddd
</t>
<t tx="ekr.20100830113702.5979">aaaa bbbb cccc dddd
</t>
<t tx="ekr.20100830113702.5980">aaaa bbcc dddd
</t>
<t tx="ekr.20100902074747.5970">f = c.abbrevCommands.addAbbrevHelper
d = c.abbrevCommands.abbrevs

table = (
    ('ut1','ut1=aa','aa'),
    ('ut2','ut2 =bb','bb'),
    ('ut3','ut3=cc=dd','cc=dd'),
    ('ut4','ut4= ee',' ee'),
    ('ut5','ut5= ff = gg',' ff = gg'),
    ('ut6','ut6= hh==ii',' hh==ii'),
    ('ut7','ut7=j=k','j=k'),
    ('ut8','ut8=l==m','l==m'),
    ('@ut1','@ut1=@a','@a'),
)

for name,s,expected in table:
    for s2,kind in ((s,'(no nl)'),(s+'\n','(nl)')):
        f(s2,tag='unit-test')
        result,tag = d.get(name,(None,None),)
        assert result==expected, '%s expected &lt;%s&gt;, got &lt;%s&gt;' % (
            kind,expected,result)
</t>
<t tx="ekr.20101009105124.6195">True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
</t>
<t tx="ekr.20101021205258.6011"></t>
<t tx="ekr.20101021210253.6018"></t>
<t tx="ekr.20101220161557.6013"></t>
<t tx="ekr.20101220161557.6016"># 770 tests with Python 3.x.  A few less with Python 2.x.</t>
<t tx="ekr.20110118082508.3729">@language plain
@pagewidth 40
@tabwidth 8
</t>
<t tx="ekr.20110118082508.3730">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3745">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3746">Honor this line that has a hanging indentation, please.  Hanging
  indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3747">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3748">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3754">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3755">Honor this line that has
  a hanging indentation, please.  Hanging
    indentation is valuable for lists of all kinds.  But it is tricky to get right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3756">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next paragraph.
</t>
<t tx="ekr.20110118082508.3757">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3763">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3764">Honor this line that 
  has a hanging indentation, 
  please.  Hanging
   indentation is valuable
    for lists of all kinds.  But 
    it is tricky to get right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3765">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.

Next Paragraph.
</t>
<t tx="ekr.20110118082508.3766">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3772">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3773">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3779">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3780">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3781">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3782">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3787">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3788">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3789">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3790">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3792">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?

Last paragraph.
</t>
<t tx="ekr.20110118082508.3793">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3799">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3800">This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3803">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3808">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3809">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3810">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3811">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3816">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3817">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3818">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3819">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3824">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3825">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3826">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3827">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3832">import leo.core.leoTest as leoTest
leoTest.runEditCommandTest(c,p)
</t>
<t tx="ekr.20110118082508.3833">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110118082508.3834">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.
</t>
<t tx="ekr.20110118082508.3835">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.
</t>
<t tx="ekr.20110502130500.3471">aList = [z for z in p.unique_nodes()]
assert len(aList) == 3,len(aList)
v1,v2,v3 = aList
assert v1.h == p.h,p.h
assert v2.h == 'node 1',v2.h
assert v3.h == 'node 2',v3.h
</t>
<t tx="ekr.20110502130500.3472"># Node 1
</t>
<t tx="ekr.20110502130500.3473"># node 3
</t>
<t tx="ekr.20110521073115.3494"></t>
<t tx="ekr.20110521073115.3495">builtins, including cython builtins
</t>
<t tx="ekr.20110521073115.3496">cython keywords
</t>
<t tx="ekr.20110524091618.3488">at = c.atFileCommands

# A mininimal test.

at.startSentinelComment = '&lt;!--'
at.endSentinelComment = '--&gt;'

s1 = '&lt;!--\nline 2.\n--&gt;\n'
s2 = at.massageAtDocPart(s1)

assert s2 == 'line 2.\n',repr(s2)
</t>
<t tx="ekr.20110524120515.3489">import leo.core.leoTest as leoTest

leoTest.runAtFileTest(c,p)
</t>
<t tx="ekr.20110524120515.3490"># before

@raw

@c

&lt;&lt; ref &gt;&gt;

@end_raw

#after
</t>
<t tx="ekr.20110524120515.3491">#@+leo-ver=5
#@+node:#@file
# before

#@@raw

@c

&lt;&lt; ref &gt;&gt;

#@@end_raw

#after
#@-leo
</t>
<t tx="ekr.20110610122533.3369"></t>
<t tx="ekr.20110610122533.3388"></t>
<t tx="ekr.20110610122533.3389">root = p.parent().parent()
h = '@auto unittest/at-auto-line-number-test.py'
target = g.findNodeAnywhere(c,h)
assert target,'no @auto node'

p,n,found = c.goToLineNumber(c).countLines(target,2)
assert found,'not found'
assert n == 1,'n: %s' % (n)
assert p.h == 'at_auto_child',p.h
</t>
<t tx="ekr.20110610122533.3390">h = '@auto unittest/at-auto-line-number-test.py'
root = g.findNodeAnywhere(c,h)
assert root,'no root'
p,n,found = c.goToLineNumber(c).countLines(root,20)
assert not found,'not found'
</t>
<t tx="ekr.20110610122533.3391">h = '@auto unittest/at-auto-line-number-test.py'
root1 = g.findNodeAnywhere(c,h)
assert root1
assert root1.isAnyAtFileNode()

fileName,lines,n,root = c.goToLineNumber(c).setup_file(n=3,p=root1)
assert fileName == h[6:],'fileName: %s' % (fileName)
assert root == root1,'root: %s, root1: %s' % (root and root.h,root1 and root1.h)

if 0:
    print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
        root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3392">h = '@auto unittest/at-auto-line-number-test.py'
root1 = g.findNodeAnywhere(c,h)
assert root1
assert root1.isAnyAtFileNode()

scriptData = {'p':root1.copy(),'lines':['a','b','c']}
fileName,lines2,p2,root2 = c.goToLineNumber(c).setup_script(scriptData)

assert fileName == h[6:],'fileName'
assert lines2 == scriptData.get('lines'),'lines'
assert p2 == root1,'p'
assert root2 == root1,'root'

if 0:
    print('root:%s, n:%s, len(lines): %s' % (
        root and root.h,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3393"></t>
<t tx="ekr.20110610122533.3394">root = p.parent().parent()
h = '@file unittest/at-file-line-number-test.py'
target = g.findNodeAnywhere(c,h)
assert target,'no target'

gnx = g.app.nodeIndices.toString(target.v.fileIndex)
assert gnx,'no gnx'

delim = '#'
found = c.goToLineNumber(c).findGnx(delim,root,gnx,h)
assert found,'not found'
</t>
<t tx="ekr.20110610122533.3395">root = p.parent().parent()
h = '@file unittest/at-file-line-number-test.py'
target = g.findNodeAnywhere(c,h)
assert target,'no target'

n = 2
fileName,lines,n,root = c.goToLineNumber(c).setup_file(n,p=target)
assert fileName == h[6:]
# print('lines\n%s' % g.listToString(lines))
assert root == target

ignoreSentinels = True
vnodeName,gnx,offset,delim = c.goToLineNumber(c).findVnode(root,lines,n,ignoreSentinels)

assert lines,'no lines'
assert offset is not None,repr(offset)
assert vnodeName,repr(vnodeName)
</t>
<t tx="ekr.20110610122533.3396"></t>
<t tx="ekr.20110610122533.3397">h = '@shadow unittest/at-shadow-line-number-test.py'
root1 = g.findNodeAnywhere(c,h)
assert root1
assert root1.isAnyAtFileNode()

fileName,lines,n,root2 = c.goToLineNumber(c).setup_file(n=6,p=root1)
assert fileName == h[8:],'fileName'
assert root2 == root1

if 0:
    print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
        root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3398"></t>
<t tx="ekr.20110610122533.3399">h = '@nosent unittest/at-nosent-line-number-test.py'
root1 = g.findNodeAnywhere(c,h)
assert root1
assert root1.isAnyAtFileNode()

fileName,lines,n,root2 = c.goToLineNumber(c).setup_file(n=6,p=root1)
assert fileName == h[8:],'fileName'
assert root2 == root1

if 0:
    print('root:%s, isRaw:%s, n:%s, len(lines): %s' % (
        root and root.h,isRaw,n,len(lines)))
</t>
<t tx="ekr.20110610122533.3401">root = p.parent().parent()
h = '@auto unittest/at-auto-line-number-test.py'
target = g.findNodeAnywhere(c,h)
assert target,'no target'
child = target.firstChild()
assert child.h == 'at_auto_child','child.h'

p,found = c.goToLineNumber(c).findRoot(child)

assert p == target,'p' #p and p.h
assert found,'not found'
</t>
<t tx="ekr.20110610122533.3404">c.goToLineNumber(c).showResults(
    found=False,p=p,n=3,n2=3,lines=['a','b'])



</t>
<t tx="ekr.20110610122533.3405"># This is **not** a real unit test.
# It simply restores the screen to a more convenient state.

c.contractParent()
g.app.unitTestDict['restoreSelectedNode']=False
</t>
<t tx="ekr.20110610122533.3406"># The @auto node must be a child of this node
# for findNodeAnywhere to succeed with Alt-6.
fn = '../test/at-auto-unit-test.py'
root = g.findNodeAnywhere(c,'@auto %s' % (fn))
assert root,'no root'

child1 = root.firstChild()
assert child1,'no child1'
grand11 = child1.firstChild()
assert grand11,'no grand11'
grand12 = grand11.next()
assert grand12,'no grand12'

child2 = child1.next()
assert child2,'no child2'
grand21 = child2.firstChild()
assert grand21,'no grand21'
grand22 = grand21.next()
assert grand22,'no grand22'

def oops(found,p2,node,n,n2):
    result = [' ']
    result.append('goto-global-line test failed at line %s' % (n))
    if not found:
        result.append('line %s not found',n)
    else:
        result.append('got node "%s", expected "%s"' % (p2.h,node.h))
        result.append('got offset %s, expected %s' % (n2,n))
    return '\n'.join(result)

table = (
    # Use 1-based numbers externally.
    # countLines converts to zero-based numbers.
    (1, child1,  0),
    (2, grand11, 0),
    (3, grand11, 1),
    (4, grand12, 0),
    (5, grand12, 1),
    (6, child1,  2),
    (7, child2,  0),
    (8, grand21, 0),
    (9, grand21, 1),
    (10,grand22, 0),
    (11,grand22, 1),
    (12,root,    3),
)

# Test against actual lines of the file.
path = g.os_path_finalize_join(g.app.loadDir,'..','test',fn)
f = open(path,'r') ; s = f.read() ; f.close()
lines = g.splitLines(s) # The lines from the file.
for n,node,index in table:
    goto = c.goToLineNumber(c)
    p2,n2,found = goto.countLines(root,n)
        # n, the argument to countLines, is 1-based
        # n2, the returned index into p2.b, is zero-based
    n -= 1
        # Convert n to zero-based for the comparisons below.
    lines2 = g.splitLines(p2.b)
    if 0:
        print('%2d %s' % (n,repr(lines[n])))
    else:
        ok = lines2[n2].lstrip() == lines[n].lstrip() 
        if not ok:
            i = 0
            for z in lines:
                print('%2d %s' % (i,repr(z)))
                i += 1
        if not ok:
            print('at line %s, index %s, node %s\ngot line %s\nexpected %s' % (
                n,n2,p2.h,repr(lines2[n2].lstrip()),repr(lines[n].lstrip())))
        assert ok
</t>
<t tx="ekr.20110615130436.3317">@language rest

This file is part of a unit test that ensures that orphan bits are retained when
writing .leo files.

The path is **supposed** not to exist.
</t>
<t tx="ekr.20110615130436.3318">Child content goes here.</t>
<t tx="ekr.20110615130436.3319"># Writing a .leo file must retain orphan bits of erroneous external files.

h = '@file nonexistent-directory/orphan-bit-test.txt'
p2 = g.findNodeAnywhere(c,h)
assert p2,'not found: %s' % (h)
assert p2.isOrphan(),'not an orphan originally'

# It's dangerous to do the write, but this does test the bug fix.
c.atFileCommands.clearAllOrphanBits(p2)
assert p2.isOrphan(),'not an orphan after calling at.clearAllOrphanBits'
</t>
<t tx="ekr.20111006064419.3491">exec(g.findTestScript(c,'@common x-marked-nodes test code'))

def test(p):
    setup_test(p)
    c.deleteMarked()
    n = p.numberOfChildren()
    assert n == 2 ,'delete: children: %s' % (n)
    c.undoer.undo()
    n = p.numberOfChildren()
    assert n == 4,'undo: children: %s' % (n)
    c.undoer.redo()
    n = p.numberOfChildren()
    assert n == 2 ,'delete: children: %s' % (n)
try:
    test(p)
finally:
    tear_down(p)
</t>
<t tx="ekr.20111006064419.3493">exec(g.findTestScript(c,'@common x-marked-nodes test code'))

def test(p):
    setup_test(p)
    c.moveMarked()
    root = c.rootPosition()
    assert root.h == 'Moved marked nodes',root.h
    n = p.numberOfChildren()
    assert n == 2 ,'delete: children: %s' % (n)
    c.undoer.undo()
    n = p.numberOfChildren()
    assert n == 4,'undo: children: %s' % (n)
    c.undoer.redo()
    n = p.numberOfChildren()
    assert n == 2 ,'delete: children: %s' % (n)

try:
    test(p)
finally:
    tear_down(p,'Moved marked nodes')
</t>
<t tx="ekr.20111006105711.3544">exec(g.findTestScript(c,'@common x-marked-nodes test code'))

def test(p):
    setup_test(p)
    c.cloneMarked()
    h = 'Clones of marked nodes'
    assert c.p.h == h,c.p.h
    c.undoer.undo()
    assert not g.findNodeAnywhere(c,h)
    c.undoer.redo()
    assert c.p.h == h,c.p.h
try:
    test(p)
finally:
    tear_down(p,'Clones of marked nodes')
</t>
<t tx="ekr.20111021115306.3696">p = g.findNodeAnywhere(c,"@file ../test/unittest/tex-error.tex")
assert(p)

s1 = r"""\begin{document}
&lt;&lt; Document """

s2 = r"""&gt;&gt;
% hidden comment
\end{document}
"""

s = s1 + s2

# print(repr(s))
# print(repr(p.b))
assert p.b == s
</t>
<t tx="ekr.20111026111009.3972"># lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
</t>
<t tx="ekr.20111112092813.4154">g.cls()</t>
<t tx="ekr.20111112093605.4679">run-selected-unit-tests-externally = Alt-5</t>
<t tx="ekr.20111112211307.3910"># created by old and new add-comments.
</t>
<t tx="ekr.20111112211307.3911">@language python

def deleteCommentTest():

#     if 1:
#         a = 2
#         b = 3

    # if 1:
        # a = 2
        # b = 3

    pass
</t>
<t tx="ekr.20111112211307.3912">@language python

def deleteCommentTest():

    if 1:
        a = 2
        b = 3

    if 1:
        a = 2
        b = 3

    pass
</t>
<t tx="ekr.20111112211307.3913">5.0
12.8
</t>
<t tx="ekr.20111113073542.3982"></t>
<t tx="ville.20090312195309.2">#if this starts failing due to much refacting in unitTest.leo,
# adjust accordingly

# These seem to fail if various nodes are cloned.
import random,fnmatch

all_h = [z.copy().h for z in c.find_h('.')]

assert len(all_h) &gt; 1000,'fail 1'

sample = random.sample(all_h, 20)    

# Test that all nodes are found at least once.
for h in sample:
    pat = fnmatch.translate(h)
    pl = c.find_h(pat)
    assert len(pl) &gt; 0 and len(pl) &lt; len(all_h),'fail 2'

tests = c.find_h('@test(.*)')

bm = tests.filter_b('(.*)all_positions')
forloops = 0
for node in bm:   
    # many of these are for loops
    for m in node.matchiter:
        if 'for' in m.group(1):
            forloops += 1

assert forloops &gt; 10,'fail for'

# all of these should also be found by find_b
all_bm = c.find_b('(.*)all_positions')
assert len(all_bm) &gt;= len(bm),'fail len'

assert set(el.h for el in bm).issubset(set(el.h for el in all_bm)),'fail set'

itertest = c.find_h('@test p.iters and v.iters')
assert len(itertest) &gt;= 1,'fail 3'
tn = itertest[0]
assert tn.h == '@test p.iters and v.iters','fail h'
assert len(itertest.filter_b('notfound, really')) == 0,'fail 4'
assert len(itertest.filter_b('leoNodes')) == 1,'fail 5'
chi = itertest.children().filter_h('child?')
assert chi[0].h == 'child1','fail 6'
assert chi[1].h == 'child2','fail 7'
# twice, in clones
chi_b = chi.children().filter_h('a').children().filter_h('b')

if 0:
    assert len(chi_b) == 2,'fail len 2: %s: %s' % (chi_b,len(chi_b))
    assert chi_b[0].h == chi_b[1].h == 'b'
    chi_e = chi.children().filter_h('d').children().filter_h('e')
    assert len(chi_e) == 1,'fail 8'
    assert chi_e[0].h == 'e','fail 9'

</t>
</tnodes>
</leo_file>
