#@+leo-ver=5-thin
#@+node:ekr.20101220161557.6011: * @file unitTestStartup.txt
#@@language python
#@+all
#@+node:ekr.20070515150433: ** @chapters
#@+node:ekr.20111015113758.3721: *3* @chapter aaa
#@+node:ekr.20111015113758.3722: *4* aaa node 1
#@+node:ekr.20150216110251.11: ** @persistence
# Do not delete this node.
# It is used by unit tests.
#@+node:ekr.20041121151002: ** @settings
#@+node:ekr.20080324133327.2: *3* @bool allow_middle_button_paste = True
True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.
#@+node:ekr.20161011095551.1: *3* @bool allow_section_references_in_at_auto = True
True: (Experimental): The @auto write code expands section references.
False: (Legacy):      The @auto write code ignores section references.
#@+node:ekr.20101009105124.6195: *3* @bool put_expansion_bits_in_leo_files = True
True (recommended):
    Write "E" attribute bits in <v> elements.
    Leo outlines will record the expansion state of all nodes.

False:
    (Good for files like unitTest.leo)
    Suppress "E" attribute bits in <v> elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.
#@+node:ekr.20140902101931.4478: *3* @bool qt-use-scintilla = False
#@+node:ekr.20161129030232.1: *3* @bool run-pyflakes-on-write = False
#@+node:ekr.20140217055617.4231: *3* @bool scriptingatscriptnodes = True
# For a unit test.
#@+node:ekr.20051013162226: *3* @bool test_setting = True
#@+node:ekr.20150602215639.1: *3* @bool tidy_autobeautify = False
True: Automatically beautify all @<file> nodes when saving an outline.

# This *must* be False in unitTest.leo!
#@+node:ekr.20070503064257: *3* @bool use_chapters = True
#@+node:ekr.20150321155210.11: *3* @bool verbose_check_outline = False
#@+node:ekr.20070528100318: *3* @bool write_strips_blank_lines = False
# Required to make a typing test work.
#@+node:ekr.20170415084531.1: *3* @data import_html_tags
# lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
#@+node:ekr.20111026111009.3972: *3* @data import_xml_tags
# lowercase xml tags, one per line.

html
body
head
div
table
nodeA
nodeB
#@+node:ekr.20111123042627.6654: *3* @enabled-plugins
# Leo loads plugins in the order they appear here.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:
plugins_menu.py
free_layout.py # needs to be early
viewrendered.py

# Recommended plugins:
### contextmenu.py
# leo_to_html.py
mod_scripting.py
# nav_qt.py
# quicksearch.py
# stickynotes.py
# todo.py
#@+node:ekr.20050328101834: *3* @page http plugin
#@+node:ekr.20050328101834.1: *4* @bool http_active = False
#@+node:ekr.20050328101834.2: *4* @int  port = 8080
#@+node:ekr.20050328101834.3: *4* @string rst_http_attributename = ''
#@+node:ekr.20111112093605.4679: *3* @shortcuts
# leoSettings.leo no longer sets any bindings for run-xxx-unit-test.
# These are now EKR's preferred settings everywhere:
# there should be little need to run unit tests externally.

run-selected-unit-tests-locally     = Alt-4
run-marked-unit-tests-locally       = Alt-5
run-all-unit-tests-locally          = Alt-6

# Important: Alt-9 is used by a unit test
#@+node:ekr.20110521073115.3494: *3* colorizer colors
#@+node:ekr.20110521073115.3495: *4* @@color keyword3_color = orange
builtins, including cython builtins
#@+node:ekr.20110521073115.3496: *4* @@color keyword4_color = pink
cython keywords
#@+node:ekr.20111124094121.3941: *3* Empty @buttons and @commands nodes
# These exist for a unit test.
#@+node:ekr.20111124094121.3942: *4* @buttons
#@+node:ekr.20111124094121.3943: *4* @commands
#@+node:ekr.20131111155830.4249: *3* Vim settings
#@+node:ekr.20131111155830.4250: *4* @@@data vim-control-character-commands
# Not yet...

    <BS>        delete the character in front of the cursor
N   <Del>       delete N characters under and after the cursor
    <Del>       delete the character under the cursor
    <Del>       while entering a count: delete last character
    <Down>      recall newer command-line that starts with current command
    <Esc>       abandon command-line (if 'wildchar' is <Esc>, type it twice)
    <Left>      (motion) cursor left
    <Right>     (motion) cursor right
    <S-Down>    recall newer command-line from history
    <S-Left>    (motion) cursor one word left
    <S-Right>   (motion) cursor one word right
    <S-Up>      recall older command-line from history
    <Up>        recall older command-line that starts with current command

N   CTRL-^                  Edit alternate file N (equivalent to ":e #N").
N   CTRL-A                  add N to the number at or after the cursor
N   CTRL-B                  window N pages Backwards (upwards)
    CTRL-B                  (motion?) cursor to beginning of command-line
    CTRL-BREAK              MS-DOS: during searches: interrupt the search
    CTRL-C                  during searches: interrupt the search
N   CTRL-D                  window N lines Downwards (default: 1/2 window)
N   CTRL-E                  window N lines downwards (default: 1)
    CTRL-E                  (motion?) cursor to end of command-line
N   CTRL-F                  (motion) window N pages Forwards (downwards)
    CTRL-G                  show current file name (with path) and cursor position
N   CTRL-I                  (motion) go to Nth newer position in jump list
    CTRL-K {char1} {char2}  enter digraph
    CTRL-L                  Clear and redraw the screen.
N   CTRL-O                  (motion) go to Nth older position in jump list
N   CTRL-R                  redo last N undone changes
    CTRL-R <0-9a-z"%:->     insert contents of register <0-9a-z"%:->
N   CTRL-T                  (motion) Jump back from Nth older tag in tag list
N   CTRL-U                  window N lines Upwards (default: 1/2 window)
    CTRL-U                  remove all characters
    CTRL-V                  highlight blockwise or stop highlighting
    CTRL-V                  start highlighting blockwise   }  highlighted text
    CTRL-V {char}           insert {char} literally
    CTRL-V {number}         enter decimal value of character (up to three digits)
    CTRL-W                  delete the word in front of the cursor
    CTRL-W +                Increase current window height
    CTRL-W -                Decrease current window height
    CTRL-W =                Make all windows equal height
    CTRL-W CTRL-W           Move cursor to window below (wrap)
    CTRL-W CTRL-^           Split window and edit alternate file
    CTRL-W R                Rotate windows upwards
    CTRL-W W                Move cursor to window above (wrap)
    CTRL-W ]                Split window and jump to tag under cursor
    CTRL-W _                Set current window height (default: very high)
    CTRL-W b                Move cursor to bottom window
    CTRL-W c  or :cl[ose]   Make buffer hidden and close window
    CTRL-W f                Split window and edit file name under the cursor
    CTRL-W j                Move cursor to window below
    CTRL-W k                Move cursor to window above
    CTRL-W n  or :new       Create new empty window
    CTRL-W o  or :on[ly]    Make current window only one on the screen
    CTRL-W p                Move cursor to previous active window
    CTRL-W q  or :q[uit]    Quit editing and close window
    CTRL-W r                Rotate windows downwards
    CTRL-W s                Split window into two parts
    CTRL-W t                Move cursor to top window
    CTRL-W x                Exchange current window with next one
N   CTRL-X                  subtract N from the number at or after the cursor
N   CTRL-Y                  window N lines upwards (default: 1)
    CTRL-Z                  Same as ":stop!"
    CTRL-]                  Jump to the tag under cursor, unless changes have been made
#@+node:ekr.20131111155830.4251: *4* @data vim-command-tails
char F
char T
char f
char r
char t
letter m
letter q
motion <
motion >
motion c
motion d
motion gU
motion gq
motion gu
motion g~
motion y
pattern /
pattern ?
register @
#@+node:ekr.20131111155830.4252: *4* @data vim-commands
# http://tnerual.eriogerg.free.fr/vimqrc.html
vim_0 0
vim_tilda ~
vim_plus +
vim_underscore _
vim_minus -
vim_comma ,
vim_dot .
vim_semicolon ;
vim_lparen (
vim_rparen )
vim_lcurly {
vim_rcurly }
vim_vertical |
vim_backtick `
vim_dollar $
vim_caret ^
vim_percent %
vim_langle <
vim_langle <<
vim_rangle >
vim_rangle >>
vim_pound #
vim_star *
vim_slash /\\n
vim_slash /
vim_question ?\\n
vim_question ?
vim_at @
vim_at @@
vim_dquote "
vim_lsquare [#
vim_lsquare [(
vim_lsquare [*
vim_lsquare [[
vim_lsquare []
vim_lsquare [p
vim_lsquare [{
vim_rsquare ]#
vim_rsquare ])
vim_rsquare ]*
vim_rsquare ][
vim_rsquare ]]
vim_rsquare ]p
vim_rsquare ]}
vim_A A
vim_B B
vim_C C
vim_D D
vim_E E
vim_F F
vim_G G
vim_H H
vim_I I
vim_J J
vim_K K
vim_M M
vim_L L
vim_N N
vim_O O
vim_P P
vim_R R
vim_S S
vim_T T
vim_U U
vim_V V
vim_W W
vim_X X
vim_Y Y
vim_Z ZQ
vim_Z ZZ
vim_a a
vim_b b
vim_c c
vim_d dd
vim_d d
vim_g g~
vim_g g^
vim_g g#
vim_g g$
vim_g g*
vim_g g0
vim_g gD
vim_g gE
vim_g gI
vim_g gU
vim_g ga
vim_g gd
vim_g ge
vim_g gf
vim_g gg
vim_g gj
vim_g gk
vim_g gq
vim_g gs
vim_g gu
vim_g gv
vim_h h
vim_i i
vim_j j
vim_k k
vim_l l
vim_n n
vim_m m
vim_o o
vim_p p
vim_q q
vim_r r
vim_s s
vim_t t
vim_u u
vim_v v
vim_w w
vim_x x
vim_y y
vim_y yy
vim_z z-
vim_z z.
vim_z z<CR>
vim_z zb
vim_z zh
vim_z zl
vim_z zt
vim_z zz
#@+node:ekr.20131111155830.4253: *4* @data vim-motions
# CR
# Ctrl-End
# Ctrl-Home
# Ctrl-Left
# Ctrl-M
# Ctrl-N
# Ctrl-P
# Ctrl-Right
# End
# Home
# Shift-Left
# Shift-Right

( 	
)
{
}
[[
[]
][
]]
$
^	
+
,
-
;
_
0
B
E
F
G
T
W
b
e
f
g$
g^
g0
gE
# gEnd
# gHome	
ge
gg
h
j
k
t
w
#@+node:ekr.20131111155830.4254: *4* @data vim-motion-tails
char F
char T
char f
char t
#@+node:ekr.20041001211817: ** Buttons & commands
#@+node:ekr.20070926090757: *3* @ignore Disabled buttons
#@+node:ekr.20110617104931.3322: *4* @button print isOrphan
print(p.v.isOrphan(),p.h)
#@+node:ekr.20140716121225.4354: *4* @button print-gnx
print(p.v.gnx)
#@+node:ekr.20080529114722.1: *3* @button timeit
c.testManager.runTimerOnNode(p,count=100)
#@+node:ekr.20080529115911.1: *3* @button profile
c.testManager.runProfileOnNode(p,outputPath=None)
    # Defaults to leo\test\profileStats.txt
#@+node:ekr.20161123080832.1: *3* @button make-table
'''
Create a table of expected headlines in a unit test.

Usage: select the desired subnode of an @test node.
'''
g.cls()
# Proper escapes are tricky.
if p.parent() and p.parent().h.startswith('@test'):
    table = [
        '(%s, "%s"),' % (
            p.level()-c.p.level(),
            p.h.replace('\\', '\\\\').replace('"', '\\"'),
        )
            for p in p.subtree()
    ]
    print("table = (\n    %s\n)" % '\n    '.join(table))
else:
    print('select a child of an @test node node')
#@+node:ekr.20111112092813.4154: *3* @command cls
g.cls()
#@+node:ekr.20100123172713.5114: ** Scripts
#@+node:ekr.20100102164959.5088: *3* Count pages
nodes = 0 ; lines = 0
for p in c.all_unique_positions():
    nodes += 1
    lines += len(g.splitLines(p.b))

pages = ((nodes * 10) + lines) / 50
s = "%d nodes,  %d lines, %d pages" % (nodes,lines,pages)
print(s); g.es(s)
#@+node:ekr.20100123172713.5116: *3* Clean all tnodeLists
count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList"): # and len(v.tnodeList) > 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print s ; g.es(s)
#@+node:ekr.20070217065840: *3* Scripts that make unit tests
@nocolor-node

@
To make unit tests, do the following:
    
- Use the make-test script (Alt-5) to create a suboutline for a unit test.
- Put text in the before node, selected desired text, then do the do-before script (Alt-6).
- Execute the command, then do the do-after script (Alt-7).
#@+node:ekr.20070217065840.1: *4* @@command make-test @key = Alt-5
try:
    p1 = p.insertAfter()
    c.setHeadString(p1,'@test ')
    body = 'c.testManager.runEditCommandTest(c,p)'
    c.setBodyString(p1,body)
    for s in ('work','before','after'):
        p2 = p1.insertAsLastChild()
        c.setHeadString(p2,s)
    p1.expand()
finally:
    c.redraw()
    c.editPosition(p1)
#@+node:ekr.20070217065840.2: *4* @@command do-before @key = Alt-6
@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. The work node should have body text. If all is as expected,
copy the body text the work node to the before node, and represent the selection
range of the work in the headline of the before node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top and work.b:

    c.setBodyString(before,work.b)
    c.setBodyString(after,'')
    putSelectionInHeadline(c,before,'before',sel)
    c.redraw()
else:
    g.es_print('do-before: not in a proper @test tree')
#@+node:ekr.20070217065840.3: *5* getSel
def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j
#@+node:ekr.20070217065840.4: *5* findNodes
def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild() 
    before = work and work.next()     
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None
#@+node:ekr.20070217065840.5: *5* putSelectionInHeadline
def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))

    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
#@+node:ekr.20070217065840.6: *4* @@command do-after @key = Alt-7
@
p should be in tree whose root is a @test node containing 'work', 'before' and
'after' children. If all is as expected, copy the work node to the after node,
and represent the selection range of the work node in the headline of the after node.
@c

@others

sel = getSel(c)
top,work,before,after = findNodes(p)
if top:
    c.setBodyString(after,work.b)
    putSelectionInHeadline(c,after,'after',sel)
    c.redraw()
else:
    g.es_print('do-after: not in @test tree')
#@+node:ekr.20070217072822: *5* getSel
def getSel(c):
    
    w = c.frame.body.bodyCtrl
    i,j= w.getSelectionRange()
    if i == j:
        i = j = w.getInsertPoint()
        sel = (i,i)
    return i,j
#@+node:ekr.20070217065840.8: *5* findNodes
def findNodes(p):
    
    '''Find the top, work, before and after nodes.
    p should be in tree whose root is a @test node containing
    'work', 'before' and 'after' children.'''
    
    for p in p.self_and_parents_iter():
        if p.h.startswith('@test '):
            break
    top    = p and p.copy()
    work   = top and top.firstChild()
    before = work and work.next()
    after  = before and before.next()
    if (
        work   and work.h.startswith('work') and
        before and before.h.startswith('before') and
        after  and after.h.startswith('after')
    ):
        return top,work,before,after
    else:
        return None,None,None,None
#@+node:ekr.20070217065840.9: *5* putSelectionInHeadline
def putSelectionInHeadline (c,p,prefix,sel):
    
    # g.trace(p.h,repr(sel))
    
    w = c.frame.body.bodyCtrl
    i,j = sel
    i,j = w.toGuiIndex(i),w.toGuiIndex(j)
    s = '%s sel=%s,%s' % (prefix,i,j)
    c.setHeadString(p,s)
#@+node:ekr.20070113145100: *3* Create chinese folder
# Not part of cvs distributions, but needed for two unit tests.

dir = g.os_path_join(g.app.loadDir,'..','test','unittest',g.u('chinese\u8116folder'),encoding='utf-8')
s   = g.os_path_join(dir,g.u('chinese\u8116test.leo'),encoding='utf-8')
    
if not g.os_path_exists(dir):
    import os
    os.mkdir(dir)
    g.pr('created chinese folder')
    
if not g.os_path_exists(s):
    f = file(s,'w')
    f.close()
    g.pr('created chinese file')
    
#@+node:ekr.20071113140035: *3* Find unique @ test nodes
fn = g.os_path_abspath(g.os_path_join(g.app.loadDir,'..','core','leoPy.leo'))
assert g.os_path_exists(fn),fn
c1 = c
c2 = g.openWithFileName(fn,old_c=None,enableLog=False)
assert c2
c.frame.bringToFront()
g.app.setLog(c.frame.log)

d1 = {} ; d2 = {}
for c,d in ( (c1,d1),(c2,d2)):
    for p in c.all_unique_positions():
        if p.h.startswith('@test'):
            d[p.h]=p.h

if 0: # not important
    g.pr()
    g.pr('----- Only in unitTest.leo')
    for h in sorted(d1.keys()):
        if not d2.get(h):
            print(h)

print('\n----- Only in leoPy.leo')
for h in sorted(d2.keys()):
    if not d1.get(h):
        print(h)
#@+node:ekr.20091206090247.5060: *3* Clear all uA's, tnodeLists, etc.
# Use these with caution.
#@+node:ekr.20091206090247.5061: *4* Clean unused tnodeLists
count = 0
for p in c.all_unique_positions():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) > 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print(s) ; g.es(s)
#@+node:ekr.20091206090247.5062: *4* Clear all timestamps
# About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

if 0: # This is usually a very bad idea.

    for p in c.all_positions():
        p.v.fileIndex = None

    g.es("all timestamps cleared")
#@+node:ekr.20091206090247.5063: *4* Clear all uAs (unknown attributes)
doDelete = False
put = g.es_print
for p in c.all_positions():
    if p.v.u:
        put("found v.u:",p.h,
            g.listToString(p.v.u.keys()))
        if doDelete:
            p.v.u = None
put('done') 
c.redraw()
#@-all
#@-leo
