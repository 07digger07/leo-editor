<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_test?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="bobjack.20080329075629.2"><vh>Startup</vh>
<v t="bobjack.20080324163716.1"><vh>@chapters</vh>
<v t="bobjack.20080413203125.1"><vh>@chapter three</vh>
<v t="bobjack.20080413203125.2"><vh>three node 1</vh></v>
</v>
<v t="bobjack.20080402160713.6"><vh>@chapter two</vh>
<v t="bobjack.20080402160713.7"><vh>two node 1</vh></v>
</v>
<v t="bobjack.20080402160713.8"><vh>@chapter one</vh>
<v t="bobjack.20080402160713.9"><vh>one node 1</vh></v>
</v>
</v>
<v t="bobjack.20080324164314.1"><vh>@settings</vh>
<v t="bobjack.20080415093045.2"><vh>@bool fixedWindow = True</vh></v>
<v t="bobjack.20080402071100.2"><vh>@string rclick-show-help = print log  browser</vh></v>
</v>
</v>
<v t="bobjack.20080412154131.2"><vh>Buttons</vh>
<v t="bobjack.20080329063457.1"><vh>@button show-menu-tables</vh></v>
<v t="bobjack.20080404113810.1"><vh>@button show button events</vh></v>
<v t="bobjack.20080405081601.2"><vh>@button show-button-data</vh></v>
<v t="bobjack.20080414080643.1"><vh>@button Do Unit Tests</vh></v>
</v>
<v t="bobjack.20080329075629.3"><vh>Notes</vh>
<v t="bobjack.20080414143159.5"><vh>&lt;&lt; description of menu_table format &gt;&gt;</vh></v>
</v>
<v t="bobjack.20080414143159.2"><vh>Howto . . . </vh>
<v t="bobjack.20080414143159.3"><vh>. . . Write Generator Commands 1</vh>
<v t="bobjack.20080414143159.4"><vh>&lt;&lt;description of the contents of keywords&gt;&gt;</vh></v>
<v t="bobjack.20080414143159.5"><vh>&lt;&lt; description of menu_table format &gt;&gt;</vh></v>
</v>
<v t="bobjack.20080415130112.2"><vh>. . . Write Generator Commands 2</vh></v>
<v t="bobjack.20080414155140.2"><vh>. . . Use Radio Buttons</vh></v>
<v t="bobjack.20080415090247.2"><vh>. . . Use Check Buttons</vh></v>
</v>
<v t="bobjack.20080329075629.4"><vh>Experiments</vh>
<v t="bobjack.20080330095006.2" lineYOffset="4b002e"><vh>Replacing the log menu</vh></v>
<v t="bobjack.20080330095006.3" lineYOffset="4b002e"><vh>Editing the 'edit-menu' fragment</vh></v>
</v>
<v t="bobjack.20080329070612.1"><vh>Test context sesitive items</vh>
<v t="bobjack.20080329070612.2"><vh>&lt;&lt; test 'Help on: ...' &gt;&gt;	</vh></v>
<v t="bobjack.20080416183608.1"><vh>&lt;&lt;test having a &lt; or &gt; in the section headline &gt;&gt;</vh></v>
<v t="bobjack.20080329070612.3"><vh>&lt;&lt; test 'Open URL: ...'&gt;&gt;</vh></v>
</v>
<v t="bobjack.20080427183647.1"><vh>Local Popup Menus</vh>
<v t="bobjack.20080329054053.1"><vh>Popup fragments for use in other menus</vh>
<v t="bobjack.20080329053100.1"><vh>@popup find change fragment</vh>
<v t="bobjack.20080326150321.6"><vh>@item find-next</vh></v>
<v t="bobjack.20080326150321.7"><vh>@item find-prev</vh></v>
<v t="bobjack.20080326150321.8"><vh>@item change</vh></v>
<v t="bobjack.20080326150321.9"><vh>@item change-then-find</vh></v>
</v>
</v>
<v t="bobjack.20080329062304.13"><vh>Popup Menus For ...</vh>
<v t="bobjack.20080329054053.2"><vh>... the log pane</vh>
<v t="bobjack.20080326150321.5"><vh>@popup log</vh>
<v t="bobjack.20080329051459.3"><vh>column one</vh>
<v t="bobjack.20080329043447.3"><vh>@item &amp;</vh></v>
</v>
<v t="bobjack.20080329051459.7"><vh>Test Radio Groups</vh>
<v t="bobjack.20080329043447.2"><vh>@item |</vh></v>
<v t="bobjack.20080404054928.7"><vh>@item Radio</vh></v>
<v t="bobjack.20080403171532.7"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080403171532.8"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080404111009.1"><vh>@item -</vh></v>
<v t="bobjack.20080403171532.9"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080403171532.11"><vh>@item rclick-button</vh></v>
</v>
<v t="bobjack.20080404054928.8"><vh>Test Check Buttons</vh>
<v t="bobjack.20080404054928.9"><vh>@item |</vh></v>
<v t="bobjack.20080404054928.10"><vh>@item Check</vh></v>
<v t="bobjack.20080404054928.6"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080404054928.11"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080404054928.12"><vh>@item rclick-button</vh></v>
<v t="bobjack.20080404054928.13"><vh>@item rclick-button</vh></v>
</v>
<v t="bobjack.20080329051459.4"><vh>column four</vh>
<v t="bobjack.20080329052834.1"><vh>@item |</vh></v>
<v t="bobjack.20080329053100.2"><vh>@item &amp;</vh></v>
</v>
</v>
</v>
<v t="bobjack.20080329054053.3"><vh>... the body pane</vh>
<v t="bobjack.20080329054053.4"><vh>@popup body</vh>
<v t="bobjack.20080329061920.1"><vh>@item undo</vh></v>
<v t="bobjack.20080329061920.2"><vh>@item -</vh></v>
<v t="bobjack.20080329054053.5"><vh>@item cut-text</vh></v>
<v t="bobjack.20080329054053.6"><vh>@item copy-text</vh></v>
<v t="bobjack.20080329054053.7"><vh>@item paste-text</vh></v>
<v t="bobjack.20080329054053.8"><vh>@item -</vh></v>
<v t="bobjack.20080329054053.9"><vh>@item select-all</vh></v>
<v t="bobjack.20080329054053.10"><vh>@item -</vh></v>
<v t="bobjack.20080329054053.11"><vh>@menu Block Ops</vh>
<v t="bobjack.20080329054053.12"><vh>@item indent-region</vh></v>
<v t="bobjack.20080329054053.13"><vh>@item unindent-region</vh></v>
</v>
<v t="bobjack.20080329054053.15"><vh>@menu Find Change</vh>
<v t="bobjack.20080329054053.16"><vh>@item &amp;</vh></v>
</v>
<v t="bobjack.20080329061442.1"><vh>another pre-defined fragment</vh>
<v t="bobjack.20080329061442.2"><vh>@item &amp;</vh></v>
</v>
<v t="bobjack.20080329054053.17"><vh>@item -</vh></v>
<v t="bobjack.20080402175002.5"><vh>@item *add-editor</vh></v>
<v t="bobjack.20080402175002.6"><vh>@item *delete-editor</vh></v>
<v t="bobjack.20080329054053.18"><vh>@item *execute-script</vh></v>
<v t="bobjack.20080329054053.19"><vh>@item *</vh></v>
</v>
</v>
<v t="bobjack.20080329062304.14"><vh>... the find-text entry</vh>
<v t="bobjack.20080401213500.1"><vh>@popup find_change_text_menu</vh>
<v t="bobjack.20080329062304.2"><vh>column one</vh>
<v t="bobjack.20080329062304.3"><vh>@item &amp;</vh></v>
</v>
<v t="bobjack.20080329062304.10"><vh>column two</vh>
<v t="bobjack.20080329062304.11"><vh>@item |</vh></v>
<v t="bobjack.20080329062304.12"><vh>@item &amp;</vh></v>
</v>
</v>
<v t="bobjack.20080329062304.1"><vh>@popup find-text</vh>
<v t="bobjack.20080401213339.1"><vh>@item label for menu</vh></v>
<v t="bobjack.20080401213339.2"><vh>@item -</vh></v>
<v t="bobjack.20080401213500.2"><vh>@item &amp;</vh></v>
</v>
</v>
<v t="bobjack.20080329062304.15"><vh>... the change-text entry</vh>
<v t="bobjack.20080329062956.1"><vh>@popup change-text</vh>
<v t="bobjack.20080401213023.1"><vh>@item label for menu</vh></v>
<v t="bobjack.20080401213339.3"><vh>@item -</vh></v>
<v t="bobjack.20080402160713.11"><vh>@item &amp;</vh></v>
</v>
</v>
<v t="bobjack.20080401143613.2"><vh>... the tree canvas</vh>
<v t="bobjack.20080401113850.2"><vh>@popup canvas</vh>
<v t="bobjack.20080401113850.3"><vh>@item label for menu</vh></v>
<v t="bobjack.20080402154726.5"><vh>@item -</vh></v>
<v t="bobjack.20080402172239.2"><vh>@menu Clone To Chapter</vh>
<v t="bobjack.20080402160713.10"><vh>@item *</vh></v>
</v>
<v t="bobjack.20080402172239.3"><vh>@menu Copy To Chapter</vh>
<v t="bobjack.20080402172239.4"><vh>@item *</vh></v>
</v>
<v t="bobjack.20080402172239.5"><vh>@menu Move To Chapter</vh>
<v t="bobjack.20080402172239.6"><vh>@item *</vh></v>
</v>
<v t="bobjack.20080414164823.2"><vh>@menu  Goto To Chapter</vh>
<v t="bobjack.20080414164823.1"><vh>@item *</vh></v>
</v>
<v t="bobjack.20080402175002.3"><vh>@item -</vh></v>
<v t="bobjack.20080402175002.2"><vh>@item create-chapter</vh></v>
<v t="bobjack.20080402175002.4"><vh>@item remove-chapter</vh></v>
</v>
</v>
<v t="bobjack.20080401143954.2"><vh>... the plus box</vh>
<v t="bobjack.20080401143954.3"><vh>@popup plusbox</vh>
<v t="bobjack.20080401143954.4"><vh>@item label for menu</vh></v>
</v>
</v>
<v t="bobjack.20080401143613.3"><vh>... headlines</vh>
<v t="bobjack.20080401143613.4"><vh>@popup headline</vh>
<v t="bobjack.20080401143613.5"><vh>@item label for menu</vh></v>
<v t="bobjack.20080420083100.85"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.86"><vh>@item cut-node</vh></v>
<v t="bobjack.20080420083100.87"><vh>@item copy-node</vh></v>
<v t="bobjack.20080420083100.89"><vh>@item clone-node</vh></v>
<v t="bobjack.20080420083100.88"><vh>@item paste-node</vh></v>
<v t="bobjack.20080420083100.6"><vh>@item paste-retaining-clones</vh></v>
<v t="bobjack.20080420083100.90"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.7"><vh>@item delete-node</vh></v>
<v t="bobjack.20080420085604.1"><vh>@item -</vh></v>
<v t="bobjack.20080420084658.1"><vh>@menu Sort Nodes</vh>
<v t="bobjack.20080420084658.2"><vh></vh></v>
<v t="bobjack.20080420083100.12"><vh>@item *sort-childre&amp;n</vh></v>
<v t="bobjack.20080420083100.13"><vh>@item *&amp;sort-siblings</vh></v>
</v>
<v t="bobjack.20080420083100.2"><vh>@menu &amp;Outline</vh>
<v t="bobjack.20080420083100.9"><vh>@item *&amp;insert-node</vh></v>
<v t="bobjack.20080420083100.10"><vh>@item *insert-child</vh></v>
<v t="bobjack.20080420083100.14"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.15"><vh>@item *&amp;hoist</vh></v>
<v t="bobjack.20080420083100.16"><vh>@item de-hoist</vh></v>
<v t="bobjack.20080420083100.17"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.18"><vh>@menu Chec&amp;k...</vh>
<v t="bobjack.20080420083100.19"><vh>@item *check-&amp;outline</vh></v>
<v t="bobjack.20080420083100.20"><vh>@item *&amp;dump-outline</vh></v>
<v t="bobjack.20080420083100.21"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.22"><vh>@item *check-&amp;all-python-code</vh></v>
<v t="bobjack.20080420083100.23"><vh>@item *&amp;check-python-code</vh></v>
</v>
<v t="bobjack.20080420083100.24"><vh>@menu E&amp;xpand/Contract...</vh>
<v t="bobjack.20080420083100.25"><vh>@item *&amp;contract-all</vh></v>
<v t="bobjack.20080420083100.26"><vh>@item *contract-&amp;node</vh></v>
<v t="bobjack.20080420083100.27"><vh>@item *contract-&amp;parent</vh></v>
<v t="bobjack.20080420083100.28"><vh>@item *contract-or-go-&amp;left</vh></v>
<v t="bobjack.20080420083100.29"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.30"><vh>@item *expand-p&amp;rev-level</vh></v>
<v t="bobjack.20080420083100.31"><vh>@item *expand-n&amp;ext-level</vh></v>
<v t="bobjack.20080420083100.32"><vh>@item *expand-and-go-right</vh></v>
<v t="bobjack.20080420083100.33"><vh>@item *expand-or-go-right</vh></v>
<v t="bobjack.20080420083100.34"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.35"><vh>@item *expand-to-level-&amp;1</vh></v>
<v t="bobjack.20080420083100.36"><vh>@item *expand-to-level-&amp;2</vh></v>
<v t="bobjack.20080420083100.37"><vh>@item *expand-to-level-&amp;3</vh></v>
<v t="bobjack.20080420083100.38"><vh>@item *expand-to-level-&amp;4</vh></v>
<v t="bobjack.20080420083100.39"><vh>@item *expand-to-level-&amp;5</vh></v>
<v t="bobjack.20080420083100.40"><vh>@item *expand-to-level-&amp;6</vh></v>
<v t="bobjack.20080420083100.41"><vh>@item *expand-to-level-&amp;7</vh></v>
<v t="bobjack.20080420083100.42"><vh>@item *expand-to-level-&amp;8</vh></v>
<v t="bobjack.20080420083100.43"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.44"><vh>@item *expand-&amp;all</vh></v>
<v t="bobjack.20080420083100.45"><vh>@item *expand-n&amp;ode</vh></v>
</v>
<v t="bobjack.20080420083100.46"><vh>@menu &amp;Move...</vh>
<v t="bobjack.20080420083100.47"><vh>@item move-outline-down</vh></v>
<v t="bobjack.20080420083100.48"><vh>@item move-outline-left</vh></v>
<v t="bobjack.20080420083100.49"><vh>@item move-outline-right</vh></v>
<v t="bobjack.20080420083100.50"><vh>@item move-outline-up</vh></v>
<v t="bobjack.20080420083100.51"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.52"><vh>@item *&amp;promote</vh></v>
<v t="bobjack.20080420083100.53"><vh>@item *&amp;demote</vh></v>
</v>
<v t="bobjack.20080420083100.54"><vh>@menu M&amp;ark...</vh>
<v t="bobjack.20080420083100.55"><vh>@item *&amp;mark</vh></v>
<v t="bobjack.20080420083100.56"><vh>@item *mark-&amp;subheads</vh></v>
<v t="bobjack.20080420083100.57"><vh>@item *mark-changed-&amp;items</vh></v>
<v t="bobjack.20080420083100.58"><vh>@item *mark-changed-&amp;roots</vh></v>
<v t="bobjack.20080420083100.59"><vh>@item *mark-&amp;clones</vh></v>
<v t="bobjack.20080420083100.60"><vh>@item *&amp;unmark-all</vh></v>
</v>
<v t="bobjack.20080420083100.61"><vh>@menu &amp;Go To...</vh>
<v t="bobjack.20080420083100.62"><vh>@item find-next-clone</vh></v>
<v t="bobjack.20080420083100.63"><vh>@item goto-first-node</vh></v>
<v t="bobjack.20080420083100.64"><vh>@item goto-first-visible-node</vh></v>
<v t="bobjack.20080420083100.65"><vh>@item goto-first-sibling</vh></v>
<v t="bobjack.20080420083100.66"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.67"><vh>@item goto-next-changed</vh></v>
<v t="bobjack.20080420083100.68"><vh>@item goto-next-clone</vh></v>
<v t="bobjack.20080420083100.69"><vh>@item goto-next-marked</vh></v>
<v t="bobjack.20080420083100.70"><vh>@item goto-next-node</vh></v>
<v t="bobjack.20080420083100.71"><vh>@item goto-next-sibling</vh></v>
<v t="bobjack.20080420083100.72"><vh>@item goto-next-visible</vh></v>
<v t="bobjack.20080420083100.73"><vh>@item go-forward</vh></v>
<v t="bobjack.20080420083100.74"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.75"><vh>@item goto-parent</vh></v>
<v t="bobjack.20080420083100.76"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.77"><vh>@item goto-prev-node</vh></v>
<v t="bobjack.20080420083100.78"><vh>@item goto-prev-sibling</vh></v>
<v t="bobjack.20080420083100.79"><vh>@item goto-prev-visible</vh></v>
<v t="bobjack.20080420083100.80"><vh>@item go-back</vh></v>
<v t="bobjack.20080420083100.81"><vh>@item -</vh></v>
<v t="bobjack.20080420083100.82"><vh>@item goto-last-node</vh></v>
<v t="bobjack.20080420083100.83"><vh>@item goto-last-sibling</vh></v>
<v t="bobjack.20080420083100.84"><vh>@item goto-last-visible-node</vh></v>
</v>
</v>
</v>
</v>
<v t="bobjack.20080401214039.1"><vh>... the icon box</vh>
<v t="bobjack.20080401214039.2"><vh>@popup iconbox</vh>
<v t="bobjack.20080401214039.3"><vh>@item label for menu</vh></v>
</v>
</v>
</v>
<v t="bobjack.20080413173856.2"><vh>Unit Test Stuff - Do Not Change</vh>
<v t="bobjack.20080413173856.3"><vh>@popup unit-test-one</vh>
<v t="bobjack.20080413173856.4"><vh>@item -</vh></v>
<v t="bobjack.20080413173856.5"><vh>@item |</vh></v>
<v t="bobjack.20080413173856.6"><vh>@item "</vh></v>
<v t="bobjack.20080413191217.3"><vh>@item *</vh></v>
<v t="bobjack.20080413191217.4"><vh>@item &amp;</vh></v>
</v>
<v t="bobjack.20080413191217.5"><vh>@popup unit-test-two</vh>
<v t="bobjack.20080413191217.6"><vh>@item *rclick-unit-&amp;test-invoke-one</vh></v>
<v t="bobjack.20080413191217.7"><vh>@item     *rclick-&amp;unit-test-&amp;invoke-two  </vh></v>
<v t="bobjack.20080413194942.2"><vh>@item rclick-unit-test-invoke-three</vh></v>
<v t="bobjack.20080413194942.3"><vh>@item     rclick-unit-test-invoke-four  </vh></v>
<v t="bobjack.20080413200228.1"><vh>@item rclick-unit-&amp;test-invoke-five</vh></v>
<v t="bobjack.20080413200228.4"><vh>@item     rclick-&amp;unit-test-&amp;invoke-six  </vh></v>
</v>
<v t="bobjack.20080413203324.2"><vh>@popup unit-test-three</vh>
<v t="bobjack.20080413203324.3"><vh>@menu unit-test-submenu-one</vh></v>
<v t="bobjack.20080413203324.4"><vh>@menu unit-test-submenu-two</vh>
<v t="bobjack.20080413203324.5"><vh>@menu   unit-test-submenu-three   </vh>
<v t="bobjack.20080413203324.6"><vh>@item first place holder</vh></v>
<v t="bobjack.20080413203324.7"><vh>@item second place holder</vh></v>
</v>
</v>
</v>
<v t="bobjack.20080413211455.1"><vh>@popup unit-test-four</vh>
<v t="bobjack.20080413211455.4"><vh>@item rclick-button</vh></v>
</v>
<v t="bobjack.20080416154107.7"><vh>@popup unit-test-five</vh></v>
</v>
</v>
<v t="bobjack.20080413173856.7"><vh>Unit Tests</vh>
<v t="bobjack.20080424054748.5"><vh>@test announce testAtPopup</vh></v>
<v t="bobjack.20080413173856.9"><vh>@test c.context_menus exists and is well formed</vh></v>
<v t="bobjack.20080413200905.1"><vh>Test @popup to rclick format</vh>
<v t="bobjack.20080413173856.10"><vh>@test single character items translate correctly</vh></v>
<v t="bobjack.20080413191217.8"><vh>@test minbuffer command items translate correctly</vh></v>
<v t="bobjack.20080413203324.8"><vh>@test @menu items translate correctly</vh></v>
<v t="bobjack.20080413210035.1"><vh>@test key value pairs in the body</vh></v>
</v>
<v t="bobjack.20080423221422.1"><vh>Test ContextMenuController</vh>
<v t="bobjack.20080424195922.95"><vh>@test module has required functions</vh></v>
<v t="bobjack.20080424055945.1"><vh>@test ivars exist and have correct type</vh></v>
<v t="bobjack.20080424073616.7"><vh>@test Controller Methods</vh>
<v t="bobjack.20080424073616.16"><vh>@test add_menu_item</vh></v>
<v t="bobjack.20080424073616.17"><vh>@test add_optional_args</vh></v>
<v t="bobjack.20080424073616.13"><vh>@test chapter_menu_helper</vh></v>
<v t="bobjack.20080424073616.20"><vh>@test copyMenuDict</vh></v>
<v t="bobjack.20080420051406.4"><vh>@test copyMenuTable</vh></v>
<v t="bobjack.20080424195922.8"><vh>@test createCommandCallbacks</vh></v>
<v t="bobjack.20080424073616.15"><vh>@test do_check_button_event</vh></v>
<v t="bobjack.20080424073616.14"><vh>@test do_radio_button_event</vh></v>
<v t="bobjack.20080420051406.3"><vh>@test getBodyData</vh></v>
<v t="bobjack.20080424073616.10"><vh>@test getButtonHandlers</vh></v>
<v t="bobjack.20080424195922.96"><vh>@test getCommandList</vh></v>
<v t="bobjack.20080424073616.21"><vh>@test getImage</vh></v>
<v t="bobjack.20080424073616.19"><vh>@test init_default_menus</vh></v>
<v t="bobjack.20080424073616.8"><vh>@test onClose</vh></v>
<v t="bobjack.20080424195922.6"><vh>@test onCreate</vh></v>
<v t="bobjack.20080424073616.18"><vh>@test rClicker</vh></v>
<v t="bobjack.20080424195922.97"><vh>@test registerCommands</vh></v>
<v t="bobjack.20080424073616.12"><vh>@test rejoin</vh></v>
<v t="bobjack.20080424073616.11"><vh>@test rSetupMenus</vh></v>
<v t="bobjack.20080420051406.2"><vh>@test split_cmd</vh></v>
</v>
<v t="bobjack.20080423221422.2"><vh>@test commands have methods and are registered</vh></v>
</v>
<v t="bobjack.20080416154107.4"><vh>Test generators</vh>
<v t="bobjack.20080416154107.8"><vh>@test generator functions and methods</vh>
<v t="bobjack.20080419045546.3"><vh>&lt;&lt; def do_demo_editor_items &gt;&gt;</vh></v>
<v t="bobjack.20080419045546.7"><vh>&lt;&lt; test function generator &gt;&gt;</vh></v>
<v t="bobjack.20080419045546.8"><vh>&lt;&lt; test minibuffer command generator &gt;&gt;</vh></v>
</v>
</v>
<v t="bobjack.20080424054748.6"><vh>@test announce end of tests</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="bobjack.20080324163716.1"></t>
<t tx="bobjack.20080324164314.1"></t>
<t tx="bobjack.20080326150321.5"></t>
<t tx="bobjack.20080326150321.6"></t>
<t tx="bobjack.20080326150321.7"></t>
<t tx="bobjack.20080326150321.8"></t>
<t tx="bobjack.20080326150321.9"></t>
<t tx="bobjack.20080329043447.2"></t>
<t tx="bobjack.20080329043447.3">edit-menu</t>
<t tx="bobjack.20080329051459.3">Example of using a pre-defined fragment.</t>
<t tx="bobjack.20080329051459.4">Example of using a user defined fragment.</t>
<t tx="bobjack.20080329051459.7">These do nothing! but could be made
to do something if you want.</t>
<t tx="bobjack.20080329052834.1"></t>
<t tx="bobjack.20080329053100.1">Example of a user defined fragment for inclusion
in other menus.</t>
<t tx="bobjack.20080329053100.2">find change fragment</t>
<t tx="bobjack.20080329054053.1"></t>
<t tx="bobjack.20080329054053.2"></t>
<t tx="bobjack.20080329054053.3"></t>
<t tx="bobjack.20080329054053.4"></t>
<t tx="bobjack.20080329054053.5">Cut

icon = Tango/16x16/actions/editcut.png
</t>
<t tx="bobjack.20080329054053.6">Copy

icon = Tango/16x16/actions/editcopy.png</t>
<t tx="bobjack.20080329054053.7">Paste

icon = Tango/16x16/actions/editpaste.png</t>
<t tx="bobjack.20080329054053.8"></t>
<t tx="bobjack.20080329054053.9"></t>
<t tx="bobjack.20080329054053.10">this is an optional label</t>
<t tx="bobjack.20080329054053.11"></t>
<t tx="bobjack.20080329054053.12">Indent</t>
<t tx="bobjack.20080329054053.13">Dedent</t>
<t tx="bobjack.20080329054053.15">
bg = cyan
fg = red

icon = Tango\16x16\actions\search.png</t>
<t tx="bobjack.20080329054053.16">find change fragment</t>
<t tx="bobjack.20080329054053.17"></t>
<t tx="bobjack.20080329054053.18"></t>
<t tx="bobjack.20080329054053.19">rclick-gen-context-sensitive-commands</t>
<t tx="bobjack.20080329061442.1"></t>
<t tx="bobjack.20080329061442.2">recent-files-menu</t>
<t tx="bobjack.20080329061920.1">
icon = Tango\16x16\actions\undo.png</t>
<t tx="bobjack.20080329061920.2"></t>
<t tx="bobjack.20080329062304.1"></t>
<t tx="bobjack.20080329062304.2">Example of using a pre-defined fragment.</t>
<t tx="bobjack.20080329062304.3">edit-menu</t>
<t tx="bobjack.20080329062304.10">Example of using a user defined fragment.</t>
<t tx="bobjack.20080329062304.11"></t>
<t tx="bobjack.20080329062304.12">find change fragment</t>
<t tx="bobjack.20080329062304.13"></t>
<t tx="bobjack.20080329062304.14"></t>
<t tx="bobjack.20080329062304.15">Set this to use the same menu as the find-text entry</t>
<t tx="bobjack.20080329062956.1"></t>
<t tx="bobjack.20080329063457.1">from pprint import pformat

g.es_print(pformat(c.context_menus))</t>
<t tx="bobjack.20080329070612.1">
# Here is a couple of tests you might like to try out:

    &lt;&lt; test 'Help on: ...' &gt;&gt;

    &lt;&lt; test having a &lt; or &gt; in the section headline &gt;&gt;

    &lt;&lt; test 'Open URL: ...'&gt;&gt;

#    http://localhost/

#Select all the text above then right click.
</t>
<t tx="bobjack.20080329070612.2">@
Hello,why don't you right click on

leoGlobals

then click on 'Help on: leoGlobals'</t>
<t tx="bobjack.20080329070612.3">@
Place the cursor in the url below, then right click.

    http://code.launchpad.net/leo-editor/

    http://localhost/
</t>
<t tx="bobjack.20080329075629.2">@
The Howtos, Experiments etc in this file are part of the testing regime for rClick.  Feel free to add more but think carefully before changing those that already exist.
</t>
<t tx="bobjack.20080329075629.3">@
@popup &lt;name&gt; menus are converted to a list of two tuples and stored in::

     c.context_menus[&lt;name&gt;]

Some of these names are special, like 'body', 'log', 'find-text', 'change-text'
'headline', 'canvas', 'plusbox', 'clickbox'.


Other names are not special. Menus with these names are 'fragments', that is
they are not meant to be full menus (although they could be used as such) but
are there to be included in other menus.

These fragments can be included in other menus by using ('&amp;','&lt;name&gt;') tuples in
a menu list or an '@item &amp;' node with the name of the fragment to be included as
the body text of the node.

&lt;&lt; description of menu_table format &gt;&gt;

Widgets may be given a context_menu attribute, eg

    w.context_menu = 'my special menu' | [&lt;menu list&gt;]

in which case the menu table in c.context_menus['my special menu'] will be used
as the popup if a string is provided, or if a list is provided that list will
be used as the menu table.  So each widget can have an individual menu.


Widgets must have &lt;Button-3&gt; bound to a callback that eventually raises either
a 'bodyrclick1' hook, such as c.frame.OnBodyRClick or a 'rclick-popup' hook.

Any keyword arguments included in the doHook call will be passed to generator
callbacks and invocation callbacks in 'keywords'.

Menu tables in c.context_menus are live, they can be manipulated by scripts and
the changes will show up immediately.  See 'experiments' and 'Howto ...'.

Changes to a fragment that is included in other menus will likewise show up
immediately in all those menus.


To get a right click menu for a widget use::

    g.doHook('rclick-popup', c=c, event=event, context_menu='&lt;default menu name&gt;', &lt;any key=value pairs...&gt;)

The context_menu will only be used if the event.widget does not have a
context_menu attribute. Normally the widget does NOT have such an attribute.

Make sure the event has passed through the master rclick handlers (if required)
before using the hook.
</t>
<t tx="bobjack.20080329075629.4"># Experiment with using scripts to create or manipulate menu tables.





</t>
<t tx="bobjack.20080330095006.2">def cb( x=None):

    def testMenuCallback(c, keywords, x=x):

        event = keywords.get('event')
        if x is None:
            x = keywords.get('rc_label')
        g.es('%s in %s' %(x,c.widget_name(event.widget)), color='blue')

    return testMenuCallback

c.context_menus['log'] = [

    ('11', cb()),
    ('12', cb('12')),
    ('13', cb('13')),
    ('14', cb('14')),
    ('|', ''),
    ('xone', cb('one')),
    ('xtwo', cb()),
    ('xthree', cb('three')),
    ('xfour', cb('four')),
    ('|', ''),    
    ('&amp;', 'edit-menu'),
]
g.es('replaced log menu', color='blue')
</t>
<t tx="bobjack.20080330095006.3">"""This change will be reflected in all menus that use the 'edit-menu'
fragment. Check before and after in the log and find and change text boxes. """

et = c.context_menus['edit-menu'] 
c.context_menus['edit-menu'] = et[:-2]
g.es('removed select-all from ALL edit-menus', color='blue')</t>
<t tx="bobjack.20080401113850.2"></t>
<t tx="bobjack.20080401113850.3">Canvas Menu</t>
<t tx="bobjack.20080401143613.2"></t>
<t tx="bobjack.20080401143613.3"></t>
<t tx="bobjack.20080401143613.4">@
Remove the '@item headline menu' node to leave an '@popup headline' node with no children to restore the standard tree popup menu.
 
Alternatively, setting

    c.context_menus['headline'] = []
    
will also restore the leo standard popup menu. Highlight the code above and execute it to see the effect.</t>
<t tx="bobjack.20080401143613.5">Headline Menu</t>
<t tx="bobjack.20080401143954.2"></t>
<t tx="bobjack.20080401143954.3"></t>
<t tx="bobjack.20080401143954.4">Plus Box Menu</t>
<t tx="bobjack.20080401213023.1">Change Text Menu</t>
<t tx="bobjack.20080401213339.1">Find Text Menu</t>
<t tx="bobjack.20080401213339.2"></t>
<t tx="bobjack.20080401213339.3"></t>
<t tx="bobjack.20080401213500.1"></t>
<t tx="bobjack.20080401213500.2">find_change_text_menu</t>
<t tx="bobjack.20080401214039.1"></t>
<t tx="bobjack.20080401214039.2">@
Icon box menus will be disabled by cleo or other plugins using the same hook.

Remove the '@item iconbox menu' node to leave an '@popup iconbox' node with no children to restore the standard tree popup menu.
 
Alternatively, setting

    c.context_menus['iconbox'] = []
    
will also restore the leo standard popup menu. Highlight the code above and execute it to see the effect.</t>
<t tx="bobjack.20080401214039.3">Icon Box Menu</t>
<t tx="bobjack.20080402071100.2">@
This setting determines where the output of rclick's "Help on: ...""
menu item goes.

The setting can contain a list of words which may include 'print', 'log', 'browser' or 'all'.

if 'log' appears in the list, output will go to the log pane.
if 'print' appears in the list, output will be sent to standard out.

if 'browser' appears in the list then a browser will be launched and the output will be displayed as a web page.

If 'all' appears in the list, output will go to all these destinations
regardless of what else is in the list.

Example::
    
    @string rclick-show-help = print log
    </t>
<t tx="bobjack.20080402154726.5"></t>
<t tx="bobjack.20080402160713.6"></t>
<t tx="bobjack.20080402160713.7"></t>
<t tx="bobjack.20080402160713.8"></t>
<t tx="bobjack.20080402160713.9"></t>
<t tx="bobjack.20080402160713.10">clone-node-to-chapter-menu</t>
<t tx="bobjack.20080402160713.11">find_change_text_menu</t>
<t tx="bobjack.20080402172239.2"></t>
<t tx="bobjack.20080402172239.3"></t>
<t tx="bobjack.20080402172239.4">copy-node-to-chapter-menu</t>
<t tx="bobjack.20080402172239.5"></t>
<t tx="bobjack.20080402172239.6">move-node-to-chapter-menu</t>
<t tx="bobjack.20080402175002.2"></t>
<t tx="bobjack.20080402175002.3"></t>
<t tx="bobjack.20080402175002.4"></t>
<t tx="bobjack.20080402175002.5"></t>
<t tx="bobjack.20080402175002.6"></t>
<t tx="bobjack.20080403171532.7">1
kind = radio
group = test1
name = test-one-one

selected-bg = yellow

</t>
<t tx="bobjack.20080403171532.8">2
kind = radio
group = test1
name = test-one-two

selected-bg = yellow</t>
<t tx="bobjack.20080403171532.9">3
kind = radio
group = test2
name = test-two-three

selected-bg = pink
selected-fg = red</t>
<t tx="bobjack.20080403171532.11">4
kind = radio
group = test2
name = test-two-four

selected-bg = pink
selected-fg = red</t>
<t tx="bobjack.20080404054928.6">1
kind = check
name = check-one
fg = magenta
bg = green

</t>
<t tx="bobjack.20080404054928.7"></t>
<t tx="bobjack.20080404054928.8">Although the general purpose rclick-check-button is used here
which emits </t>
<t tx="bobjack.20080404054928.9"></t>
<t tx="bobjack.20080404054928.10">
fg= blue
bg = white
</t>
<t tx="bobjack.20080404054928.11">2
kind = check
name = check-two

fg = red
bg = yellow

</t>
<t tx="bobjack.20080404054928.12">3
kind = check
name = check-three

fg = white
bg = magenta</t>
<t tx="bobjack.20080404054928.13">4
kind = check
name = check-four


fg = darkred
bg = lightblue</t>
<t tx="bobjack.20080404111009.1"></t>
<t tx="bobjack.20080404113810.1"># Run this as a script to enable reporting of changes
# to the check/radio menu items in the log panel menu.

# Example: how to initialize/modify item settings

cm = c.theContextMenuController

groups = cm.radio_group_data
checks = cm.check_button_data

groups['test1'] = 'test-one-two'
groups['test2'] = 'test-two-one'
checks['check-two'] = True

def report_item_clicked(tag, keywords):

    """
    Note: This keywords is different from the the

        c.theContextMenuControler.mb_keywords

    which contains all the information about the right click
    that posted the menu that this event derives from.

    mb_keywords tells which widget the right click occurred in,
    among other things.
    """

    kind, selected, name, group = \
        [keywords.get(v) for v in (
            'kind', 'selected', 'name', 'group')]

    if kind == 'radio':
         g.es("Rclick Test Radio Group['%s'] Selected['%s']"%(
            group, selected))

    if kind == 'check':
        g.es("Rclick Test Check Button Name['%s']  Checked:[%s]"% (
            name, bool(selected)))

import leoPlugins
leoPlugins.registerHandler("rclick-button-clicked", report_item_clicked)

g.es('registered to receive radio/check button events', color='blue')
</t>
<t tx="bobjack.20080405081601.2">cm = c.theContextMenuController

groups = cm.radio_group_data
checks = cm.check_button_data

g.es('\ngroups\n======', color='blue')

for group, selected in sorted(groups.iteritems()):
    g.es("'%s' -&gt; '%s'"%(group, selected), color='blue')

g.es("\nchecks\n======", color = 'blue')

for check, selected in sorted(checks.iteritems()):
    g.es("'%s' -&gt; %s"%(check, selected), color='blue')

</t>
<t tx="bobjack.20080412154131.2">@
The following button are provided:

    show-menu-tables:

        This button pretty prints the rclick menu tables in
        c.context_menus to the log panel.

    show-button-events:

        After clicking this button, all clicks to the radio and
        check button menu items will be reported in the log
        panel.


    show-button-data:

        This button prints the status of the radio groups and check
        buttons that are used in the menus.

    do-unit-tests:

        This button runs all the unit tests for the rClick
        plugin.  There are not many of them yet but that will
        change over time.

</t>
<t tx="bobjack.20080413173856.2"></t>
<t tx="bobjack.20080413173856.3">Test that single character items translate correctly.</t>
<t tx="bobjack.20080413173856.4">separator</t>
<t tx="bobjack.20080413173856.5">column break</t>
<t tx="bobjack.20080413173856.6">comment</t>
<t tx="bobjack.20080413173856.7">@
NOTE:

    After doing unit tests the headline and plusbox menus stop working!
</t>
<t tx="bobjack.20080413173856.9">@
This test checks the integrity of the rClick menu tables stored in
c.context_menus. It can be copied to other leo files and used to check
that scripts which modify the menus are at least producing valid menus.

This node can be run using execute-script as well as the unit test command.
@c
assert hasattr(c, 'context_menus'), \
    'c has no context menus'

menus = c.context_menus
assert isinstance(menus, dict), \
    'c.context_menus must be a dictionary'

def test_menu_list(menu_table):

     for item in menu_table:

        assert isinstance(item, tuple) and len(item)==2,\
            'items in menu_tables must be tuples of length two'

        label, cmd = item

        assert isinstance(label, basestring),\
            'the label for a menu_table item must be a string'

        if isinstance(cmd, list):
            test_menu_list(cmd)

        #cmd can be ANY object for '-', '|' or '"'
        elif label in ('-', '|', '"'):
            pass

        else:
            assert isinstance(cmd, basestring) \
                or callable(cmd) or cmd is None, \
            'the command for a mentu_table item  other than  - | and " must ' + \
            'be a list, a string, or a callable object.'


for key, value in menus.iteritems():

    assert isinstance(key, basestring),\
        'keys for c.context_menus must be strings'

    assert isinstance(value, list),\
        'values for c.context_menus must be lists'

    test_menu_list(value)





</t>
<t tx="bobjack.20080413173856.10">menu_name = u'unit-test-one'

assert menu_name in c.context_menus, \
    '%s is not in context_menus' % menu_name

menu_table = c.context_menus[menu_name]

assert len(menu_table) == 5, \
    "wrong number of items in menu_table"

for kind, argument, item in zip(
        ('-', '|', '"', '*', '&amp;'),
        ('separator', 'column break', 'comment',
          'rclick-unit-test-generator', 'rclick-unit-test-include'),
        menu_table ):

    assert kind == item[0], \
        "Wrong marker"

    #print 'argument', item[1]    
    assert  item[1] == argument, \
        "Wrong argument"




</t>
<t tx="bobjack.20080413191217.3">rclick-unit-test-generator</t>
<t tx="bobjack.20080413191217.4">rclick-unit-test-include
</t>
<t tx="bobjack.20080413191217.5">Test @item *minibuffer-command-items translate correctly.

If there are spaces before and after the text in the headline, then this
is deliberate, do not remove theme.</t>
<t tx="bobjack.20080413191217.6">bad</t>
<t tx="bobjack.20080413191217.7">bad



</t>
<t tx="bobjack.20080413191217.8">menu_name = u'unit-test-two'

assert menu_name in c.context_menus, \
    '%s is not in context_menus' % menu_name

menu_table = c.context_menus[menu_name]

nItems = 6
assert len(menu_table) == nItems, \
    "wrong number of items in menu_table"

labels = (
    'Rclick Unit Test Invoke One',
    'Rclick Unit Test Invoke Two',
    'three',
    'four',
    'Rclick Unit Test Invoke Five',
    'Rclick Unit Test Invoke Six',
)

commands = (
    'rclick-unit-test-invoke-one',
    'rclick-unit-test-invoke-two',
    'rclick-unit-test-invoke-three',
    'rclick-unit-test-invoke-four',
    'rclick-unit-test-invoke-five',
    'rclick-unit-test-invoke-six',
)

assert len(labels)==nItems and len(commands)==nItems, \
    "Wrong number of items in test tables."

for label, command, item in zip(labels, commands, menu_table):

    assert label == item[0], \
        "Wrong label"

    assert  item[1] == command, \
        "Wrong command\n\tGot: %s\n\tExpected: %s" % (item[1], command)
</t>
<t tx="bobjack.20080413194942.2">three</t>
<t tx="bobjack.20080413194942.3">f&amp;our


</t>
<t tx="bobjack.20080413200228.1"></t>
<t tx="bobjack.20080413200228.4">



</t>
<t tx="bobjack.20080413200905.1"></t>
<t tx="bobjack.20080413203125.1"></t>
<t tx="bobjack.20080413203125.2"></t>
<t tx="bobjack.20080413203324.2"></t>
<t tx="bobjack.20080413203324.3"></t>
<t tx="bobjack.20080413203324.4"></t>
<t tx="bobjack.20080413203324.5"></t>
<t tx="bobjack.20080413203324.6">first


</t>
<t tx="bobjack.20080413203324.7">second

</t>
<t tx="bobjack.20080413203324.8">menu_name = u'unit-test-three'

assert menu_name in c.context_menus, \
    '%s is not in context_menus' % menu_name

menu_table = c.context_menus[menu_name]

assert len(menu_table) == 2, \
    "wrong number of items in menu_table"


item = menu_table[0]
assert item[0] == 'unit-test-submenu-one', 'Wrong Label'

# Test empty menu item produces an empty list
submenu_table = item[1]
assert isinstance(submenu_table, list), 'Expecting a list'
assert not submenu_table, 'submenu table should be empty'


item = menu_table[1]
assert item[0] == 'unit-test-submenu-two'

submenu_table = item[1]
assert isinstance(submenu_table, list), 'Expecting a list'
assert len(submenu_table) == 1, 'submenu table should be of length one'

item = submenu_table[0]
assert item[0] == 'unit-test-submenu-three'

submenu_table = item[1]
assert isinstance(submenu_table, list), 'Expecting a list'
assert len(submenu_table) == 2, 'submenu table should of length two'

</t>
<t tx="bobjack.20080413210035.1">menu_name = u'unit-test-four'

assert menu_name in c.context_menus, \
    '%s is not in context_menus' % menu_name

menu_table = c.context_menus[menu_name]

assert len(menu_table) == 1, \
    "wrong number of items in menu_table"

item = menu_table[0]

expected = """Rclick Unit Test One
kind=radio
group=rclick_unit_test_group
name=rclick_unit_test_one
test=this has an = sign"""

expected = '\n'.join(expected.strip().splitlines())

#print 'label', item[0]

assert item[0] == expected, \
    "wrong label"

#print 'cmd', item[1]


assert item[1] ==  'rclick-button', "cmd string is wrong" 
</t>
<t tx="bobjack.20080413211455.1">Test </t>
<t tx="bobjack.20080413211455.4">Rclick Unit Test One

# this is a comment because it starts with #
and this is a comment because it does not contain an equal sign

kind = radio
group =   rclick_unit_test_group
name = rclick_unit_test_one

test = this has an = sign


#

</t>
<t tx="bobjack.20080414080643.1">@color

import leoTest
leoTest.doTests(c,all=True)
</t>
<t tx="bobjack.20080414143159.2"></t>
<t tx="bobjack.20080414143159.3">@
How to write generator commands version 1.
==========================================

After reading this node you can use Execute Script on it to see the example code
in action.

A generator command is a minibuffer command that is used to add items to a right
click menu at the time it is being created. They are only of use in @popup trees
and rClick menu tables.

A generator command can be used in @popup trees like this::

    @popup some-menu
        @item *   (body: my-cool-command)

Notice there is only a single * after the @item in the headline, and the name of
the command is in the first line of the body.

We will now write a simple minibuffer command 'demo-editor-items' which will add
menu items to add a new editor and delete an editor preceded by a separator. Of
course we wouldn't want to write a command to do this normally but we have to
start somewhere.

First of all define the function that will be used for the command.

@c
def do_demo_editor_items(event):

    # get the keywords dictionary that the rClick menu has prepared for us

    controller = c.theContextMenuController

    keywords = controller.mb_keywords

    &lt;&lt; description of the contents of keywords &gt;&gt;

    # for this exercise we only need the table of items yet to be converted

    menu_table = keywords['rc_menu_table']

    &lt;&lt; description of menu_table format &gt;&gt;

    new_items = [
        ('-', ''),
        ('Add Editor Test', 'add-editor'),
        ('Delete Editor Test', 'delete-editor'),
    ]

    # insert the new items at the top of the menu_table which is the table of items waiting
    # to be converted into real menu items.

    # menu_table must be altered in situ you can NOT do keyword['rc_menu_table'] = new_menu.

    menu_table[:0] = new_items

    # We do not need really to do this as mb_retval is set to None before we are called

    controller.mb_retval = None

@
Now we have a function lets register it as a minibuffer command
@c

c.k.registerCommand('demo-editor-items', shortcut=None, func=do_demo_editor_items)

@
Our command has to be inserted into a menu to be of any use, so here we insert it into
the second position of the body menu.
@c

c.context_menus['body'][1:1] = [('*', 'demo-editor-items')]

@
All that is left to do is for you to execute this node as a script, do that now.

Right click the body pane to see the new menu items appear.











</t>
<t tx="bobjack.20080414143159.4">@

keywords['event']:

    The event object obtain from the right click event.

    keywords['event'].widget:

         The widget in which the right click was detected.


keywords['rc_rmenu']:

     The gui menu widget that has been generated from previous items.

     This menu may be changed.


keywords['rc_menu_table']:

    The list of menu items that have yet to be converted into gui menu
    items. 

    This list may be manipulated or extended at will or even replaced
    entirely.

    The list must be manipulated in-situ, you can not replace it.

</t>
<t tx="bobjack.20080414143159.5">@

Generate custom menu items.
@item *  (body: generator-command)  or ('*', 'generator-command')

Include another menu in this menu.
@item &amp;  (body: menu name)          or ('&amp;', 'menu name')

Start another column in a menu.
@item |  (body: a comment)          or ('|', 'a comment')

Insert a separator.
@item  -  (body: a comment)         or ('-', 'a comment')

Comment - this item is ignored.
@item  "  (body: a comment)         or ('"', 'a comment')

Minibuffer Command with label.
@item mini-buffer-command (body: menu label)    or ('menu label', mini-buffer-command)

Minibuffer Command with no label.
@item mini-buffer-command (body: empty)    or ('Mini Buffer Command', mini-buffer-command)
@item *mini-buffer-command (body: empty)   or ('Mini Buffer Command', mini-buffer-command)

Submenu.
@menu menu label (body: &lt;empty&gt;     or ('menu label', [ &lt;menu_list&gt; ])


</t>
<t tx="bobjack.20080414155140.2">@
How to use radio buttons.
=========================

After reading this node you can use Execute Script on it to see the example code
in action.

Radio buttons can be placed in @popup menus using the following form::

    @popup some-menu
        @item rclick-button  body:  Demo Radio One
                                    kind = radio
                                    group = demo-group
                                    name = demo-radio-button-one

Notice that 'Demo Radio One' which is the first line of the body is used as the
label for the radio button. The second line of the body identifies this as a
radio button, the third line says which group the button belongs too and the
fourth line identifies this button uniquely within the group 'demo-group'.

The three lines with '=' in can appear in any order, space around the '=' will
be deleted. Any other text such as comments may appear in the body, any line
without an '=' will be ignored as will any line with '#' as the first character.

Button belonging to the same radio group can be appear in many different menus.
Button having the same name and belonging to the same group are effectively the
same button, regardless of what menu or how many menus they appear in.

Here we will insert three radio buttons into the second position of the body menu.

Notice that in the menu tables the label is the first item of the tuple and the
minibuffer command 'rclick' button is the first line of the second item of the
tuple, which may be the opposite of what you expect.

@c
new_items = [

('-', ''), #separator

("""Demo Radio One
    kind = radio
    group = demo-group
    name = demo-radio-one

    selected-bg = lightblue
    selected-fg = yellow
""", 'rclick-button'),

("""Demo Radio Two
    kind = radio
    group = demo-group
    name = demo-radio-two

    selected-bg = lightblue
    selected-fg = yellow
""", 'rclick-button'),

("""Demo Radio Three
    kind = radio
    group = demo-group
    name = demo-radio-three

    selected-bg = lightblue
    selected-fg = yellow
""", 'rclick-button')

]

# Insert the menu items into the second position of the 'body' menu.
# Notice we must change the menu in situ.

c.context_menus['body'][1:1] = new_items

# Choose the button we want selected initially

cm = c.theContextMenuController
cm.radio_group_data['demo-group'] = 'demo-radio-two'

#define a callback so we can print a message when one of our buttons is clicked

def demo_radio_callback(self, keywords):

    kind, selected, name, group = \
        [keywords.get(v) for v in (
            'kind', 'selected', 'name', 'group')]

    if kind == 'radio' and group=='demo-group':
         g.es("Demo Radio Group Selected['%s']"%selected)

# register the callback to receive notification of rclick button events

import leoPlugins
leoPlugins.registerHandler("rclick-button-clicked", demo_radio_callback)

@
Execute this node as a script and right click the body to see the results.

Notice that if you execute this script twice you will get two sets of buttons but if select a button in one group, then right click again you will see that the selection in the other group has changed also.  This is intentional behavior.

A radio button with the same group name and the same name is effectively the same button.  It can appear in the menu many times or in many different menus.

Radio buttons with the same name but in different groups are unrelated.























</t>
<t tx="bobjack.20080414164823.1">select-chapter-menu</t>
<t tx="bobjack.20080414164823.2"></t>
<t tx="bobjack.20080415090247.2">@
How to use check buttons.
=========================

After reading this node you can use Execute Script on it to see the example code in action.

Check buttons can be placed in @popup menus using the following form::

    @popup some-menu
        @item rclick-button  body:  Demo Check One
                                    kind = check
                                    name = demo-check-button-one

Notice that 'Demo Check One' which is the first line of the body is used as the label
for the check button. The second line of the body identifies this as a check
button, the third line says which group the button belongs too and the fourth line
identifies this button uniquely within the group 'demo-group'.

The lines with '=' in can appear in any order, space around the '=' will
be deleted. Any other text such as comments may appear in the body, any line
without an '=' will be ignored as will any line with '#' as the first character.

rclick-button check buttons with the same name are effectively the same button, any number
of identical buttons can appear in any number of menus and submenus.

Here we will insert two check buttons into the second position of the body menu.

Notice that in the menu tables the label is the first item of the tuple and the
minibuffer command 'rclick' button  is the first line of the second item of the tuple.
This is done so that @item in @popup menus are compatible with @item in @menus.

@c
new_items = [
('-', ''),

("""Demo Check One
    kind = check
    name = demo-check-one

    selected-bg = yellow
""", 'rclick-button'),

("""Demo Check Two
    kind = check
    name = demo-check-two

    selected-bg = lightgreen
""", 'rclick-button'),

]

# Insert the menu items into the second position of the 'body' menu.
# Notice we must change the menu in situ.

c.context_menus['body'][1:1] = new_items


# Choose the button we want selected initially

cm = c.theContextMenuController
btns = ('demo-check-one', 'demo-check-two')
for btn in btns:
    cm.check_button_data[btn] = True

#define a callback so we can print a message when one of our buttons is clicked

def demo_check_callback(self, keywords):

    kind, selected, name = \
        [keywords.get(v) for v in (
            'kind', 'selected', 'name')]

    if kind == 'check' and name in btns:
         g.es("Demo Check Button[%s] Selected[%s]"%(name, selected))

# register the callback to receive notification of rclick button events

import leoPlugins
leoPlugins.registerHandler("rclick-button-clicked", demo_check_callback)

@
Execute this node as a script and right click the body to see the results.

Notice that if you execute this script twice you will get two sets of buttons but if select a button in one group, then right click again you will see that the selection in the other group has changed also.  This is intentional behavior.

All check buttons with the same name are effectively the same button.  It can appear in the menu many times or in many different menus.




















</t>
<t tx="bobjack.20080415093045.2"></t>
<t tx="bobjack.20080415130112.2">@
How to write generator commands version 2.
==========================================

This is an alternative method of writing generator commands. 

The advantage of using this method is that the do_demo_editor_items function can
be used directly in rclick menu tables as well as being accessed through the
minibuffer command.

First define the base function.
@c

def do_demo_editor_items(keywords):

    menu_table = keywords['rc_menu_table']

    new_items = [
        ('-', ''),
        ('Add Editor Test', 'add-editor'),
        ('Delete Editor Test', 'delete-editor'),
    ]

    menu_table[:0] = new_items

# Now define a wrapper to convert the minibuffer command event.

def demo_editor_items(event):

    cm = c.theContextMenuController
    cm.mb_retval = do_demo_editor_items(cm.mb_keywords)

c.k.registerCommand('demo-editor-items', shortcut=None, func=demo_editor_items)

c.context_menus['body'][1:1] = [
    ('*', do_demo_editor_items), # do it once using the function directly
    ('*', 'demo-editor-items')   # do it again using minbuffer command
]


@


Execute this node as a script.

Right click the body pane to see the new menu items appear.











</t>
<t tx="bobjack.20080416154107.4"></t>
<t tx="bobjack.20080416154107.7"></t>
<t tx="bobjack.20080416154107.8">call_status = 'not called'

&lt;&lt; def do_demo_editor_items &gt;&gt;

def xtest(value, expected, msg):
    assert value == expected, \
        'The %s was "%s", expected "%s"' % (msg, value, expected)

call_status = 'not called'
&lt;&lt; test function generator &gt;&gt;

call_status = 'not called'
&lt;&lt; test minibuffer command generator &gt;&gt;


</t>
<t tx="bobjack.20080416183608.1">@
The old re wouldn't recognize this section headline

hopefully the new one does.</t>
<t tx="bobjack.20080419045546.3">def do_demo_editor_items(*args, **kw):

    """A sample menu generator function.

    Check that all required parameters are supplied and have the
    correct form.

    """

    global call_status, test_menu_table
    call_status = 'error'

    assert len(args) == 1 and not kw, \
        "Expected one and only one argument and no keyword arguments."

    keywords = args[0]

    assert isinstance(keywords, dict), \
        "Expected the argument to be a dictionary."

    for key, value in (
        ('event', None),
        ('testOne', 'test one'),
        ('testTwo', 'test two'),
        ('rc_phase', 'generate'),
        ('rc_label', '*'),
    ):
        assert key in keywords, \
            'Expected key %s to be in keywords' % key

        assert keywords[key] == value, \
            'Expected keywords[%s] == %s' %(key, value)

    for key in (
        'rc_rmenu',
        'rc_menu_table',
        'rc_label', 
        'rc_item_data',
    ):
        assert key in keywords, \
            'Expected key %s to be in keywords' % key

    msg = 'Expected keywords[%s] %s'

    key = 'rc_rmenu'
    menu = keywords[key]
    new_menu = c.frame.menu.new_menu(None)

    assert isinstance(menu, new_menu.__class__), \
        msg % (key, 'to be a gui menu class %s' % new_menu.__class__.__name__)

    key = 'rc_menu_table'
    menu_table = keywords[key]
    assert isinstance(menu_table, list), \
        msg % (key, 'to be a list.')

    key = 'rc_item_data'
    item_data = keywords[key]
    assert isinstance(item_data, dict) and not item_data, \
        msg % (key, 'to be an empty dictionary')

    menu_table = keywords['rc_menu_table']

    new_items = [
        ('-', ''),
        ('Add Editor Test', 'add-editor'),
        ('Delete Editor Test', 'delete-editor'),
    ]

    menu_table[:0] = new_items

    test_menu_table = keywords['rc_menu_table']
    call_status = 'done'
    return 'hello'
</t>
<t tx="bobjack.20080419045546.7">
menu = [('*', do_demo_editor_items)]

result = g.doHook('rclick-popup',
    c=c, event=None, context_menu = menu,
    testOne='test one', testTwo='test two'
)

retval = c.theContextMenuController.mb_retval


xtest(call_status, 'done', 'function call status')
xtest(retval, 'hello', 'function return value')
xtest(result, None, 'function hook result')

</t>
<t tx="bobjack.20080419045546.8">
def demo_editor_items(event):

    cm = c.theContextMenuController
    cm.mb_retval = do_demo_editor_items(cm.mb_keywords)

c.k.registerCommand('demo-editor-items', shortcut=None, func=demo_editor_items)


menu = [('*', 'demo-editor-items')]

result = g.doHook('rclick-popup',
    c=c, event=None, context_menu = menu,
    testOne='test one', testTwo='test two'
)

retval = c.theContextMenuController.mb_retval

xtest(call_status, 'done', 'minibuffer call status')
xtest(retval, 'hello', 'minibuffer return value')
xtest(result, None, 'minibuffer hook result')
</t>
<t tx="bobjack.20080420051406.2">cm = c.theContextMenuController

def testRetval(t, r1, r2, name):

    xp = 'in %s expected ' % name

    assert isinstance(t, tuple), \
        xp +'result to be a tuple, got %s' % type(t)

    assert len(t) == 2, \
        xp + '2 items in result, got %s' % len(t)

    x, y = t

    assert isinstance(x, basestring), \
        xp + 'first value to be a string, got %s' % type(x)

    assert isinstance(y, dict), \
        xp + 'second value to be a dict, got %s' % type(x)

    assert x == r1, \
        xp + 'first value\n\tto be: %r\n\tgot:%r' % (r1, x)

    assert y == r2, \
        xp + 'second value\n\tto be: %r\n\tgot:%r' % (r2, y)


tests = ( 
 u'  win 100 if this is unchanged  ',
 ' ignore lines with no equal signs ',
 'test1=one',
 '    \t  \t  ',
 '# this is a comment',
 u' test 2 =  two three   ',
 ' ',
 '# comment with = sign',
 ' test 3 \t  =  three \t= four',
)

spaces = '   \t          '

# test empty string input
testRetval(cm.split_cmd(''), '', {}, 'test(blank)')

# test single line input
testRetval(
    cm.split_cmd(' one=1 '),
    ' one=1 ', {}, 'test(single line)'
)

xpect1 = tests[0]
xpect2 = {
    'test1': 'one',
    'test 2': 'two three',
    'test 3': 'three \t= four'
}

for ending in ('\n', '\r', '\r\n'):
    testRetval(
        cm.split_cmd(ending.join(tests)),
        xpect1, xpect2, 'test(%r)'%ending
    )
</t>
<t tx="bobjack.20080420051406.3">cm = c.theContextMenuController

def testRetval(t, r1, r2, name):

    xp = 'in %s expected ' % name

    assert isinstance(t, tuple), \
        xp +'result to be a tuple, got %s' % type(t)

    assert len(t) == 2, \
        xp + '2 items in result, got %s' % len(t)

    x, y = t

    assert isinstance(x, basestring), \
        xp + 'first value to be a string, got %s' % type(x)

    assert isinstance(y, basestring), \
        xp + 'second value to be a string, got %s' % type(x)

    assert x == r1, \
        xp + 'first value\n\tto be: %r\n\tgot:%r' % (r1, x)

    assert y == r2, \
        xp + 'second value\n\tto be: %r\n\tgot:%r' % (r2, y)


tests = ( 
 u'  win 100 if this is unchanged  ',
 ' ignore lines with no equal signs ',
 'test1=one',
 '    \t  \t  ',
 '# this is a comment',
 u' test 2 =  two three   ',
 ' ',
 '# comment with = sign',
 ' test 3 \t  =  three \t= four',
)

spaces = '   \t          '

# test empty string input
testRetval(cm.getBodyData(''), '', '', 'test(blank)')

# test single line input
testRetval(
    cm.getBodyData(' one=1 '),
    ' one=1 ', '', 'test(single line)'
)

xpect1 = tests[0]
xpect2 = 'test1=one\ntest 2=two three\ntest 3=three \t= four'

for ending in ('\n', '\r', '\r\n'):
    testRetval(
        cm.getBodyData(ending.join(tests)),
        xpect1, xpect2, 'test(%r)'%ending
    )








</t>
<t tx="bobjack.20080420051406.4">cm = c.theContextMenuController

class myclass(object):
    pass

o1 = myclass()
o2 = myclass()

menu = [

    ('1', [
        ('1.1', [
            ('1.1.1', [ ('1.1.1.2', o1), ('1.1.1.2', o1)]),
            ('1.1.2', [ ('1.1.2.2', o1), ('1.1.2.2', o2)])
        ]),
        ('1.2', [
            ('1.2.1', [ ('1.2.1.2', o1), ('1.2.1.2', o1)]),
            ('1.2.2', [ ('1.2.2.2', o1), ('1.2.2.2', o2)])
        ])
    ]),  

    ('2', [      
        ('2.1', [
            ('2.1.1', [ ('2.1.1.2', o1), ('2.1.1.2', o1)]),
            ('2.1.2', [ ('2.1.2.2', o1), ('2.1.2.2', o2)])
        ]),
        ('2.2', [
            ('2.2.1', [ ('2.2.1.2', o1), ('2.2.1.2', o1)]),
            ('2.2.2', [ ('2.2.2.2', o1), ('2.2.2.2', o2)])
        ]),
    ])
]     

emptyMenu = []
retval = cm.copyMenuTable(emptyMenu)

assert isinstance(retval, list), \
    'Expected a list got %s' % type(retval)

assert retval == emptyMenu, \
    'Expected an empty list'

assert retval is not emptyMenu, \
    'Returned list object is identical to input object!'

retval = cm.copyMenuTable(menu)

def testlists(xx, rr):

    for c in (0, 1):

        x, r = xx[c], rr[c]

        assert x[0] == r[0], \
            'menu labels have been changed'

        if  isinstance(x[1], myclass):

            assert x[1] is r[1], \
                'Embedded object should be identical'
            continue

        assert isinstance(r[1], list), \
            'Expected a list got %s\n\t%s' % (type(r[1]), r[1])

        assert x[1] is not r[1], \
            'Returned list object is identical to input'

        assert x[1] == r[1], \
            'Expected input == output'

        testlists(x[1], r[1])

testlists(menu, retval)
</t>
<t tx="bobjack.20080420083100.2"></t>
<t tx="bobjack.20080420083100.6">Pas&amp;te Node As Clone</t>
<t tx="bobjack.20080420083100.7"></t>
<t tx="bobjack.20080420083100.9"></t>
<t tx="bobjack.20080420083100.10"></t>
<t tx="bobjack.20080420083100.12"></t>
<t tx="bobjack.20080420083100.13"></t>
<t tx="bobjack.20080420083100.14"></t>
<t tx="bobjack.20080420083100.15"></t>
<t tx="bobjack.20080420083100.16">D&amp;e-Hoist</t>
<t tx="bobjack.20080420083100.17"></t>
<t tx="bobjack.20080420083100.18"></t>
<t tx="bobjack.20080420083100.19"></t>
<t tx="bobjack.20080420083100.20"></t>
<t tx="bobjack.20080420083100.21"></t>
<t tx="bobjack.20080420083100.22"></t>
<t tx="bobjack.20080420083100.23"></t>
<t tx="bobjack.20080420083100.24"></t>
<t tx="bobjack.20080420083100.25"></t>
<t tx="bobjack.20080420083100.26"></t>
<t tx="bobjack.20080420083100.27"></t>
<t tx="bobjack.20080420083100.28"></t>
<t tx="bobjack.20080420083100.29"></t>
<t tx="bobjack.20080420083100.30"></t>
<t tx="bobjack.20080420083100.31"></t>
<t tx="bobjack.20080420083100.32"></t>
<t tx="bobjack.20080420083100.33"></t>
<t tx="bobjack.20080420083100.34"></t>
<t tx="bobjack.20080420083100.35"></t>
<t tx="bobjack.20080420083100.36"></t>
<t tx="bobjack.20080420083100.37"></t>
<t tx="bobjack.20080420083100.38"></t>
<t tx="bobjack.20080420083100.39"></t>
<t tx="bobjack.20080420083100.40"></t>
<t tx="bobjack.20080420083100.41"></t>
<t tx="bobjack.20080420083100.42"></t>
<t tx="bobjack.20080420083100.43"></t>
<t tx="bobjack.20080420083100.44"></t>
<t tx="bobjack.20080420083100.45"></t>
<t tx="bobjack.20080420083100.46"></t>
<t tx="bobjack.20080420083100.47">Move &amp;Down</t>
<t tx="bobjack.20080420083100.48">Move &amp;Left</t>
<t tx="bobjack.20080420083100.49">Move &amp;Right</t>
<t tx="bobjack.20080420083100.50">Move &amp;Up</t>
<t tx="bobjack.20080420083100.51"></t>
<t tx="bobjack.20080420083100.52"></t>
<t tx="bobjack.20080420083100.53"></t>
<t tx="bobjack.20080420083100.54"></t>
<t tx="bobjack.20080420083100.55"></t>
<t tx="bobjack.20080420083100.56"></t>
<t tx="bobjack.20080420083100.57"></t>
<t tx="bobjack.20080420083100.58"></t>
<t tx="bobjack.20080420083100.59"></t>
<t tx="bobjack.20080420083100.60"></t>
<t tx="bobjack.20080420083100.61"></t>
<t tx="bobjack.20080420083100.62"></t>
<t tx="bobjack.20080420083100.63">Go To &amp;First Node</t>
<t tx="bobjack.20080420083100.64">Go To First V&amp;isible</t>
<t tx="bobjack.20080420083100.65">Go To First Si&amp;bling</t>
<t tx="bobjack.20080420083100.66"></t>
<t tx="bobjack.20080420083100.67">Go To Next C&amp;hanged</t>
<t tx="bobjack.20080420083100.68">Go To Next &amp;Clone</t>
<t tx="bobjack.20080420083100.69">Go To Next &amp;Marked</t>
<t tx="bobjack.20080420083100.70">Go To Next N&amp;ode</t>
<t tx="bobjack.20080420083100.71">Go To Next &amp;Sibling</t>
<t tx="bobjack.20080420083100.72">Go To Next Visibl&amp;e</t>
<t tx="bobjack.20080420083100.73">Go To Next Visite&amp;d</t>
<t tx="bobjack.20080420083100.74"></t>
<t tx="bobjack.20080420083100.75">Go To P&amp;arent</t>
<t tx="bobjack.20080420083100.76"></t>
<t tx="bobjack.20080420083100.77">Go To &amp;Prev Node</t>
<t tx="bobjack.20080420083100.78">Go To P&amp;rev Sibling</t>
<t tx="bobjack.20080420083100.79">Go To Pre&amp;v Visible</t>
<t tx="bobjack.20080420083100.80">Go To Prev Visi&amp;ted</t>
<t tx="bobjack.20080420083100.81"></t>
<t tx="bobjack.20080420083100.82">Go To Last Node</t>
<t tx="bobjack.20080420083100.83">Go To Last Siblin&amp;g</t>
<t tx="bobjack.20080420083100.84">Go To &amp;Last Visible</t>
<t tx="bobjack.20080420083100.85"></t>
<t tx="bobjack.20080420083100.86">
icon = Tango/16x16/actions/editcut.png</t>
<t tx="bobjack.20080420083100.87">
icon = Tango/16x16/actions/editcopy.png</t>
<t tx="bobjack.20080420083100.88">
icon = Tango/16x16/actions/editpaste.png</t>
<t tx="bobjack.20080420083100.89"></t>
<t tx="bobjack.20080420083100.90"></t>
<t tx="bobjack.20080420084658.1"></t>
<t tx="bobjack.20080420084658.2"></t>
<t tx="bobjack.20080420085604.1"></t>
<t tx="bobjack.20080423221422.1"></t>
<t tx="bobjack.20080423221422.2">
cm = c.theContextMenuController

commands = cm.commandList

for command in commands:
    
    assert isinstance(command, basestring), \
        "Command must be a sring. Got type: %s" % type(command)
    
    method_name = command.replace('-', '_')
    
    assert hasattr(cm, method_name), \
        "No method for command %s" % command
        
    function = c.commandsDict.get(command)
    
    assert function, \
        "command '%s' has not been registered." % command 
        
    assert callable(function), \
        "function registered for '%s' is not callable" % command</t>
<t tx="bobjack.20080424054748.5">print 
print 'Starting testAtPopup (rClick) tests.'
print</t>
<t tx="bobjack.20080424054748.6">print
print
print 'End of testAtPoupup (rClick) tests.'
</t>
<t tx="bobjack.20080424055945.1">import rClick
plugin = rClick

testController = tc = plugin.pluginController(c)

liveController = lc = plugin.controllers.get('c')

ivars = plugin.requiredIvars

for ivar, kind in ivars:
    
    if lc:
        assert hasattr(lc, ivar), \
            "Live controller does not have attribute: %s" % ivar
    
    assert hasattr(tc, ivar), \
        "Test controller does not have attribute: %s" % ivar
    
    if not kind:
        continue
        
    if lc:
        val = getattr(lc, ivar)
        assert isinstance(val, kind), \
            "Live Controller has ivar of wrong type\n\tGot type: %s\n\tExpected: %s" %(
                type(val), kind)
    
       
    val = getattr(tc, ivar)
    assert isinstance(val, kind), \
        "Test Controller has ivar of wrong type\n\tGot type: %s\n\tExpected: %s" %(
            type(val), kind)</t>
<t tx="bobjack.20080424073616.7">
from rClick import ContextMenuController

       
cm = ContextMenuController

    
headlines = [p.headString() for p in p.children_iter()]

for h in headlines:
    if h.startswith('@test'):
        h = h[5:].strip()
        
        assert hasattr(cm, h), \
            "Controller has no method %s" % h
</t>
<t tx="bobjack.20080424073616.8"></t>
<t tx="bobjack.20080424073616.10">method = c.theContextMenuController.getButtonHandlers

result = method()

assert isinstance(result, dict) and \
    'radio' in result and 'check' in result, \
        "Expected a dictionary with at least 'radio' an 'check' keys."

for k, v in result.iteritems():
    
    assert isinstance(k, basestring), \
        'keys must be strings not type %s' % type(k)
        
    assert callable(v), \
        'values must be callable'</t>
<t tx="bobjack.20080424073616.11"></t>
<t tx="bobjack.20080424073616.12">rejoin = c.theContextMenuController.rejoin

assert rejoin('a', '') == 'a', 'Fails when second argument is empty second argument.' 
assert rejoin('a', 'b') == 'a\nb'
</t>
<t tx="bobjack.20080424073616.13"></t>
<t tx="bobjack.20080424073616.14"></t>
<t tx="bobjack.20080424073616.15"></t>
<t tx="bobjack.20080424073616.16"></t>
<t tx="bobjack.20080424073616.17"></t>
<t tx="bobjack.20080424073616.18"></t>
<t tx="bobjack.20080424073616.19"></t>
<t tx="bobjack.20080424073616.20"></t>
<t tx="bobjack.20080424073616.21"></t>
<t tx="bobjack.20080424195922.6"></t>
<t tx="bobjack.20080424195922.8"></t>
<t tx="bobjack.20080424195922.95">import rClick
plugin = rClick

for name in (
    'init',
    'onCreate',
    'onClose',
    'pluginController',
):
    assert hasattr(plugin, name), \
        "%s is missing"
</t>
<t tx="bobjack.20080424195922.96"></t>
<t tx="bobjack.20080424195922.97"></t>
<t tx="bobjack.20080427183647.1"></t>
</tnodes>
</leo_file>
