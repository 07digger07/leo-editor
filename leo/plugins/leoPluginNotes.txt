#@+leo-ver=5-thin
#@+node:ekr.20090430075506.3: * @file leoPluginNotes.txt
#@+all
#@+node:ekr.20100909111553.5583: ** Unit tests
#@+node:ekr.20100909121239.5797: *3* @ignore
#@+node:ekr.20100909121239.5670: *4* @test get_directive_path
# Works in external unit tests.
g.loadOnePlugin(c,'screenshots')
sc = c.screenshotController
assert sc

fn = sc.get_directive_path(p)
assert fn
#@+node:ekr.20100909121239.5951: *4* @test find_at_screenshot_tree_node
g.loadOnePlugin(c,'screenshots')
sc = c.screenshotController

h = 'Headline and body text'
p2 = g.findNodeAnywhere(c,h)
assert p2

root,h = sc.find_at_screenshot_tree_node(p2)
assert root
assert h == 'Urgent'

#@+node:ekr.20100909193419.5596: *4* set g.app.unitTestGui
if 0: # Doesn't work well.
    g.app.unitTestGui = 'qt'
#@+node:ekr.20100909111553.5588: *3* @mark-for-unit-tests
# Add the tree to the external unit test
#@+node:ekr.20071113084440.1: ** @@file test/syntax_error_plugin.py
# pylint: disable=syntax-error

'''
This plugin intentially has a syntax error.
It is used for testing Leo's plugin loading logic.
'''

a = # This is the syntax error

def init ():
    '''Return True if the plugin has loaded successfully.'''
    return True
#@+node:ekr.20161003204921.1: ** old code in mod_http.py
#@+node:EKR.20040517080250.24: *3* format_leo_node (old)
def format_leo_node(self, f, window, node):
    """
    Given a node 'node', return the contents of that node as html text.

    Include some navigational references too
    """
    if node:
        headString = node.h
        bodyString = node.b
        format_info = get_http_attribute(node)
    else:
        headString, bodyString = "Top level", ""
        format_info = None
    self.write_head(f, headString, window)
    # write navigation
    self.add_leo_links(window, node, f)
    # write path
    self.write_path(node, f)
    f.write("<hr />\n") # horizontal rule
    # f.write('<span style="font-family: monospace;">')
    if format_info:
        f.write("<p>\n")
        html_lines = reconstruct_html_from_attrs(format_info, 3)
        for line in html_lines:
            f.write(line)
        f.write("\n</p>\n")
    else:
        if (bodyString):
            f.write("<p>\n")
        f.write(escape(bodyString))
        if (bodyString):
            f.write("\n</p>\n")
    # f.write("</span>\n")
    f.write("\n</body>\n</html>\n")
    # return f
#@+node:EKR.20040517080250.25: *3* get_leo_nameparts
def get_leo_nameparts(self, node):
    """
    Given a 'node', construct a list of sibling numbers to get to that node.
    """
    result = []
    if node:
        cnode = node
        parent = cnode.parent()
        while parent:
            i = 0
            child = parent.firstChild()
            while child != cnode:
                child = child.next()
                i += 1
            result.append(str(i))
            cnode = parent
            parent = cnode.parent()
        i = 0
        previous = cnode.back()
        while previous:
            i += 1
            previous = previous.back()
        result.append(str(i))
        result.reverse()
    return result
#@+node:ekr.20161003205045.1: *3* from leo_interface
#@+node:EKR.20040517080250.21: *4* add_leo_links
def add_leo_links(self, window, node, f):
    """
    Given a node 'node', add links to:
        The next sibling, if any.
        the next node.
        the parent.
        The children, if any.
    """
    # Collecting the navigational links.
    if node:
        nodename = node.h
        threadNext = node.threadNext()
        sibling = node.next()
        parent = node.parent()
        f.write("<p>\n")
        children = []
        firstChild = node.firstChild()
        if firstChild:
            child = firstChild
            while child:
                children.append(child)
                child = child.next()
        if threadNext is not None:
            self.create_leo_reference(window, threadNext, "next", f)
        f.write("<br />")
        if sibling is not None:
            self.create_leo_reference(window, sibling, "next Sibling", f)
        f.write("<br />")
        if parent is None:
            self.create_href("/", "Top level", f)
        else:
            self.create_leo_reference(window, parent, "Up", f)
        f.write("<br />")
        f.write("\n</p>\n")
    else:
        # top level
        child = window.c.rootPosition()
        children = [child]
        next = child.next()
        while next:
            child = next
            children.append(child)
            next = child.next()
        nodename = window.shortFileName()
    if children:
        f.write("\n<h2>")
        f.write("Children of ")
        f.write(escape(nodename))
        f.write("</h2>\n")
        f.write("<ol>\n")
        for child in children:
            f.write("<li>\n")
            self.create_leo_reference(window, child, child.h, f)
            f.write("</li>\n")
        f.write("</ol>\n")
#@+node:EKR.20040517080250.22: *4* create_href
def create_href(self, href, text, f):
    f.write('<a href="%s">' % href)
    f.write(escape(text))
    f.write("</a>\n")
#@+node:bwmulder.20050319134815: *4* create_leo_h_reference
def create_leo_h_reference(self, window, node):
    parts = [window.shortFileName()] + self.get_leo_nameparts(node)
    href = '/' + '/'.join(parts)
    return href
#@+node:EKR.20040517080250.23: *4* create_leo_reference
def create_leo_reference(self, window, node, text, f):
    """
    Create a reference to 'node' in 'window', displaying 'text'
    """
    href = self.create_leo_h_reference(window, node)
    self.create_href(href, text, f)
#@+node:bwmulder.20050319135316: *4* node_reference
def node_reference(self, vnode):
    """
    Given a position p, return the name of the node.
    """
    # 1. Find the root
    root = vnode
    parent = root.parent()
    while parent:
        root = parent
        parent = root.parent()
    while root.v._back:
        root.moveToBack()
    # 2. Return the window
    window = [w for w in g.app.windowList if w.c.rootVnode().v == root.v][0]
    result = self.create_leo_h_reference(window, vnode)
    return result
#@+node:EKR.20040517080250.28: *4* write_path
def write_path(self, node, f):
    result = []
    while node:
        result.append(node.h)
        node = node.parent()
    result.reverse()
    if result:
        result2 = result[: -1]
        if result2:
            result2 = ' / '.join(result2)
            f.write("<p>\n")
            f.write("<br />\n")
            f.write(escape(result2))
            f.write("<br />\n")
            f.write("</p>\n")
        f.write("<h2>")
        f.write(escape(result[-1]))
        f.write("</h2>\n")
#@-all
#@@killbeautify
# This file contains unused plugins and code
#@@language python

#@-leo
