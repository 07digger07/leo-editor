<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20160122104302.1"><vh>Startup</vh>
<v t="ekr.20160122104400.1"><vh>@settings</vh>
<v t="ekr.20160122104357.1"><vh>@data history-list</vh></v>
</v>
</v>
<v t="ekr.20090430075506.4"><vh>Notes</vh>
<v t="ekr.20090430075506.3"><vh>@file leoPluginNotes.txt</vh></v>
</v>
<v t="edream.110203113231.618"><vh>Plugins</vh>
<v t="EKR.20040517090508"><vh>  Enable plugins using @enabled-plugins nodes</vh></v>
<v t="ekr.20050303051035"><vh>  Templates</vh>
<v t="ekr.20041114102139"><vh>Notes for plugin writers</vh></v>
<v t="ekr.20050306071629"><vh>Template for plugins that override commander methods</vh>
<v t="ekr.20050306071629.1"><vh>&lt;&lt; docstring &gt;&gt;</vh></v>
<v t="ekr.20050306071629.3"><vh>&lt;&lt; imports &gt;&gt;</vh></v>
<v t="ekr.20050306071629.4"><vh>init</vh></v>
<v t="ekr.20050306071540"><vh>onStart2</vh></v>
</v>
<v t="ekr.20050303051035.2"><vh>Template for plugins with per-commander controller class</vh>
<v t="ekr.20050303051035.5"><vh>&lt;&lt; imports &gt;&gt;</vh></v>
<v t="ekr.20050303051101"><vh>init</vh></v>
<v t="ekr.20050303051150"><vh>onCreate</vh></v>
<v t="ekr.20050303051222"><vh>class pluginController</vh>
<v t="ekr.20050303051222.1"><vh>__init__</vh></v>
</v>
</v>
</v>
<v t="ekr.20101110150056.9453"><vh> Qt only plugins</vh>
<v t="tbrown.20091029123555.5319" descendentVnodeUnknownAttributes="7d71005803000000302e3371017d710258040000007465737471037d710458050000005f6564697471057d7106580400000074686973710758120000006f6b20686f77206120626f757420746869737108737373732e"><vh>@file attrib_edit.py</vh></v>
<v t="ville.20090310191936.10"><vh>@file colorize_headlines.py</vh></v>
<v t="ekr.20090701111504.5294"><vh>@file contextmenu.py</vh></v>
<v t="ville.20090518182905.5419"><vh>@file nav_qt.py</vh></v>
<v t="ville.20120604212857.4215"><vh>@file notebook.py</vh></v>
<v t="ekr.20090622063842.5264"><vh>@file projectwizard.py</vh></v>
<v t="ville.20090314215508.4"><vh>@file quicksearch.py</vh></v>
<v t="ville.20090815203828.5235"><vh>@file spydershell.py</vh></v>
<v t="ekr.20100103093121.5329"><vh>@file stickynotes.py</vh></v>
<v t="tbrown.20090119215428.2"><vh>@file todo.py</vh></v>
<v t="tbrown.20100318101414.5990"><vh>@file viewrendered.py</vh></v>
<v t="ekr.20140225222704.16748"><vh>@file viewrendered2.py</vh></v>
<v t="ekr.20160331123847.1"><vh>@file viewrendered3.py</vh></v>
<v t="tbrown.20090206153748.1"><vh>@file graphcanvas.py</vh></v>
<v t="ville.20110403115003.10348"><vh>@file valuespace.py</vh></v>
<v t="tbrown.20130420091241.44181"><vh>@file screen_capture.py</vh></v>
</v>
<v t="ekr.20100103093121.5365"><vh>Auto completion</vh>
<v t="ekr.20091118065749.5261"><vh>@file ctagscompleter.py</vh></v>
<v t="ville.20091204224145.5355"><vh>@file codewisecompleter.py</vh></v>
</v>
<v t="edream.110203113231.667"><vh>Commands &amp; directives</vh>
<v t="edream.110203113231.741"><vh>@file add_directives.py</vh></v>
<v t="ekr.20101110084839.5682"><vh>@file bzr_qcommands.py</vh></v>
<v t="EKR.20040517080049.1"><vh>@file empty_leo_file.py</vh></v>
<v t="edream.110203113231.669"><vh>@file import_cisco_config.py</vh></v>
<v t="ekr.20101110092851.5812"><vh>@file initinclass.py</vh></v>
<v t="ekr.20101110091234.5700"><vh>@file leo_interface.py</vh></v>
<v t="ekr.20040419105219"><vh>@file lineNumbers.py</vh></v>
<v t="ekr.20040916084945"><vh>@file macros.py</vh></v>
<v t="edream.110203113231.724"><vh>@file mod_autosave.py</vh></v>
<v t="ekr.20050301083306"><vh>@file mod_read_dir_outline.py</vh></v>
<v t="edream.110203113231.727"><vh>@file mod_timestamp.py</vh></v>
<v t="TL.20090225102340.32"><vh>@file nodeActions.py</vh></v>
<v t="edream.110203113231.720"><vh>@file outline_export.py</vh></v>
<v t="danr7.20060912105041.1"><vh>@file paste_as_headlines.py</vh></v>
<v t="ekr.20041021120118"><vh>@file pretty_print.py</vh></v>
<v t="tbrown.20070117104409"><vh>@file quickMove.py</vh></v>
<v t="ekr.20081214160729.1"><vh>@file setHomeDirectory.py</vh></v>
<v t="danr7.20061010105952.1"><vh>@file word_count.py</vh></v>
</v>
<v t="edream.110203113231.729"><vh>Debugging</vh>
<v t="ekr.20101110091234.5689"><vh>@file debugger_pudb.py</vh></v>
<v t="edream.110203113231.730"><vh>@file dump_globals.py</vh></v>
<v t="edream.110203113231.732"><vh>@file enable_gc.py</vh></v>
<v t="edream.110203113231.734"><vh>@file quit_leo.py</vh></v>
<v t="edream.110203113231.735"><vh>@file trace_gc_plugin.py</vh></v>
<v t="edream.110203113231.736"><vh>@file trace_keys.py</vh></v>
<v t="edream.110203113231.738"><vh>@file trace_tags.py</vh></v>
</v>
<v t="ekr.20041030092101"><vh>Dyna plugins by e</vh></v>
<v t="ekr.20040722141148"><vh>Examples</vh>
<v t="edream.110203113231.916"><vh>@file examples/override_classes.py</vh></v>
<v t="edream.110203113231.919"><vh>@file examples/override_commands.py</vh></v>
<v t="edream.110203113231.921"><vh>@file examples/redefine_put.py</vh></v>
<v t="ekr.20060621123339"><vh>@file examples/print_cp.py</vh></v>
<v t="ekr.20040828105233"><vh>@file examples/chinese_menu.py</vh></v>
<v t="EKR.20040517080202.3"><vh>@file examples/french_fm.py</vh></v>
</v>
<v t="ekr.20101110150056.9457"><vh>Experimental</vh>
<v t="danr7.20060902083957"><vh>@file leo_to_rtf.py</vh></v>
<v t="ekr.20040205071616"><vh>@file mnplugins.py</vh></v>
<v t="ekr.20101110094759.5843"><vh>@file mod_speedups.py</vh></v>
<v t="ekr.20040910070811.1"><vh>@file run_nodes.py</vh></v>
<v t="ekr.20100103093121.5339"><vh>@file stickynotes_plus.py</vh></v>
<v t="ekr.20040331071919"><vh>Leo to AsciiDoc</vh>
<v t="ekr.20101110093449.5822"><vh>@file mod_leo2ascd.py</vh></v>
<v t="ekr.20101110150056.9445"><vh>@file mod_leo2ascd.txt</vh></v>
</v>
</v>
<v t="EKR.20040517075715"><vh>External programs</vh>
<v t="ekr.20110125103904.12504"><vh>@file gitarchive.py</vh></v>
<v t="EKR.20040517080049.4"><vh>@file open_shell.py</vh></v>
<v t="ville.20090503124249.1"><vh>@file tomboy_import.py</vh></v>
<v t="EKR.20040517075715.10"><vh>@file vim.py</vh></v>
<v t="EKR.20040517075715.12"><vh>@file xemacs.py</vh></v>
<v t="EKR.20040517075715.13"><vh>Word export</vh>
<v t="EKR.20040517075715.14"><vh>@file word_export.py</vh></v>
<v t="EKR.20040517075715.20"><vh>@file-nosent word_export.ini</vh></v>
</v>
</v>
<v t="edream.110203113231.872"><vh>Files and nodes</vh>
<v t="tbrown.20080613095157.2"><vh>@file active_path.py</vh></v>
<v t="edream.110203113231.873"><vh>@file at_folder.py</vh></v>
<v t="ekr.20040915085351"><vh>@file at_produce.py</vh></v>
<v t="ktenney.20041211072654.1"><vh>@file at_view.py</vh></v>
<v t="tbrown.20081223111325.3"><vh>@file backlink.py</vh></v>
<v t="tbrown.20070322113635"><vh>@file bookmarks.py</vh></v>
<v t="ekr.20060807103814.1"><vh>@file datenodes.py</vh></v>
<v t="ajones.20070122153625"><vh>@file expfolder.py</vh></v>
<v t="ekr.20040915105758.13"><vh>@file FileActions.py</vh></v>
<v t="ekr.20110110105526.5463"><vh>@file ftp.py</vh></v>
<v t="tbrown.20091214233510.5347"><vh>@file geotag.py</vh></v>
<v t="tbrown.20100228141752.5691"><vh>@file leocursor.py</vh></v>
<v t="ville.20120503224623.3574"><vh>@file leomylyn.py</vh></v>
<v t="ekr.20101110092851.5742"><vh>@file leoOPML.py</vh></v>
<v t="dan.20090217132953.1"><vh>@file mime.py</vh></v>
<v t="mork.20041018204908.1"><vh>@file multifile.py</vh></v>
<v t="ekr.20040331151007"><vh>@file niceNosent.py</vh></v>
<v t="edream.110203113231.876"><vh>@file read_only_nodes.py</vh></v>
<v t="ekr.20040828103325"><vh>@file startfile.py</vh></v>
<v t="ekr.20130808211520.15893"><vh>@file timestamp.py</vh></v>
<v t="tbrown.20110428144124.29061"><vh>@file xml_edit.py</vh></v>
<v t="mork.20041010095009"><vh>@file xsltWithNodes.py</vh></v>
</v>
<v t="ekr.20081121105001.2080"><vh>Gui plugins</vh>
<v t="ekr.20150107090324.1"><vh>@file cursesGui.py</vh></v>
</v>
<v t="ekr.20140723122936.17925"><vh>Importer plugins</vh>
<v t="ekr.20140723122936.18139"><vh>@file importers/__init__.py</vh></v>
<v t="ekr.20140727075002.18109"><vh>@file importers/basescanner.py</vh></v>
<v t="ekr.20140723122936.17926"><vh>@file importers/c.py</vh></v>
<v t="ekr.20140723122936.18140"><vh>@file importers/csharp.py</vh></v>
<v t="tbrown.20140801105909.47549"><vh>@file importers/ctext.py</vh></v>
<v t="ekr.20140723122936.18141"><vh>@file importers/elisp.py</vh></v>
<v t="ekr.20140723122936.18138"><vh>@file importers/html.py</vh></v>
<v t="ekr.20140723122936.18142"><vh>@file importers/ini.py</vh></v>
<v t="ekr.20140723122936.18143"><vh>@file importers/java.py</vh></v>
<v t="ekr.20140723122936.18144"><vh>@file importers/javascript.py</vh></v>
<v t="ekr.20140725190808.18066"><vh>@file importers/markdown.py</vh></v>
<v t="ekr.20140723122936.18146"><vh>@file importers/org.py</vh></v>
<v t="ekr.20140723122936.18150"><vh>@file importers/otl.py</vh></v>
<v t="ekr.20140723122936.18147"><vh>@file importers/pascal.py</vh></v>
<v t="ekr.20140723122936.18148"><vh>@file importers/php.py</vh></v>
<v t="ekr.20140723122936.18149"><vh>@file importers/python.py</vh></v>
<v t="ekr.20140723122936.18151"><vh>@file importers/leo_rst.py</vh></v>
<v t="ekr.20140723122936.18152"><vh>@file importers/typescript.py</vh></v>
<v t="ekr.20140723122936.18137"><vh>@file importers/xml.py</vh></v>
</v>
<v t="ekr.20130927050813.13031"><vh>Obsolete</vh>
<v t="ajones.20070122160142"><vh>@file textnode.py</vh></v>
<v t="ekr.20050817132814"><vh>rst3</vh>
<v t="ekr.20090704103932.5160"><vh>@file leo_pdf.py</vh></v>
<v t="ekr.20050805162550"><vh>@file rst3.py</vh></v>
</v>
</v>
<v t="ekr.20041001210557"><vh>Scripting</vh>
<v t="tbrown.20100226095909.12777"><vh>@file leoscreen.py</vh></v>
<v t="tbrown.20140806084727.30174"><vh>@file livecode.py</vh></v>
<v t="ekr.20060328125248"><vh>@file mod_scripting.py</vh></v>
<v t="edream.110203113231.925"><vh>@file script_io_to_body.py</vh></v>
</v>
<v t="ekr.20120309073937.9878"><vh>Searching</vh>
<v t="ekr.20120309073748.9872"><vh>@file bigdash.py</vh></v>
<v t="peckj.20140804114520.9427"><vh>@file nodetags.py</vh></v>
<v t="peckj.20131130132659.5964"><vh>@file nodewatch.py</vh></v>
</v>
<v t="ekr.20050111122605"><vh>Servers &amp; web stuff</vh>
<v t="ville.20110206142055.10640"><vh>@file leofeeds.py</vh></v>
<v t="ville.20091009202416.10040"><vh>@file leoremote.py</vh></v>
<v t="EKR.20040517080250.1"><vh>@file mod_http.py</vh></v>
<v t="ekr.20131004162848.11444"><vh>@file rss.py</vh></v>
<v t="peckj.20140811080604.9496"><vh>@file sftp.py</vh></v>
<v t="ville.20110125222411.10536"><vh>@file leomail.py</vh></v>
</v>
<v t="ekr.20101004082701.5674"><vh>Slideshows, screencasts &amp; screenshots</vh>
<v t="ekr.20120913110135.10579"><vh>@file screencast.py</vh></v>
<v t="ekr.20101121031443.5330"><vh>@file screenshots.py</vh></v>
<v t="ekr.20060831165821"><vh>@file slideshow.py</vh></v>
</v>
<v t="ekr.20071113084440"><vh>Testing</vh>
<v t="ekr.20080214092357"><vh>@file test/ekr_test.py</vh></v>
<v t="ekr.20050130120433"><vh>@file test/failed_import.py</vh></v>
<v t="ekr.20071113085315"><vh>@file test/failed_to_load_plugin.py</vh></v>
<v t="ekr.20051016160700"><vh>@file testRegisterCommand.py</vh></v>
</v>
<v t="ekr.20050306081349"><vh>Text formatting</vh>
<v t="timo.20050213160555"><vh>@file bibtex.py</vh></v>
<v t="ekr.20070119094733.1"><vh>@file dtest.py</vh></v>
<v t="ville.20110409151021.5699"><vh>@file jinjarender.py</vh></v>
<v t="danr7.20060902215215.1"><vh>@file leo_to_html.py</vh></v>
<v t="peckj.20140113150237.7083"><vh>@file nodediff.py</vh></v>
<v t="tbrown.20130813134319.11942"><vh>@file richtext.py</vh></v>
</v>
<v t="ekr.20121126102050.10134"><vh>Threading</vh>
<v t="ekr.20121126095734.12418"><vh>@file threadutil.py</vh></v>
</v>
<v t="ekr.20040915073259"><vh>User interface</vh>
<v t="ekr.20061023142737"><vh> UNL plugin</vh>
<v t="ekr.20061023142737.1"><vh>Tests</vh>
<v t="rogererens.20041130095659"><vh>@url 'file: ./../../plugins/leoPlugins.leo#Plugins--&gt;UNL plugin--&gt;To do'</vh></v>
<v t="ekr.20061023141638"><vh>@url 'file:./../doc/leoDocs.leo#Users Guide--&gt;Basics--&gt;Customizing Leo'</vh></v>
</v>
</v>
<v t="ekr.20060328125925"><vh>@file chapter_hoist.py</vh></v>
<v t="tbrown.20090513125417.5244"><vh>@file interact.py</vh></v>
<v t="ekr.20040915073259.1"><vh>@file maximizeNewWindows.py</vh></v>
<v t="ekr.20101110093301.5818"><vh>@file mod_framesize.py</vh></v>
<v t="EKR.20040517080555.2"><vh>@file plugins_menu.py</vh></v>
<v t="peckj.20150428142633.1"><vh>@file python_terminal.py</vh></v>
<v t="edream.110203113231.924"><vh>@file redirect_to_log.py</vh></v>
<v t="EKR.20040517080555.36"><vh>@file scripts_menu.py</vh></v>
<v t="tbrown.20141101114322.1"><vh>@file wikiview.py</vh></v>
<v t="ekr.20101110095202.5882"><vh>@file zenity_file_dialogs.py</vh></v>
</v>
<v t="ekr.20140726091031.18071"><vh>Writer plugins</vh>
<v t="ekr.20140726091031.18152"><vh>@file writers/__init__.py</vh></v>
<v t="ekr.20140726091031.18143"><vh>@file writers/basewriter.py</vh></v>
<v t="ekr.20140726091031.18079"><vh>@file writers/org.py</vh></v>
<v t="ekr.20140726091031.18078"><vh>@file writers/otl.py</vh></v>
<v t="ekr.20140726091031.18073"><vh>@file writers/markdown.py</vh></v>
<v t="ekr.20140726091031.18080"><vh>@file writers/leo_rst.py</vh></v>
</v>
</v>
<v t="ekr.20160325140307.1"><vh>** Clean up ifQt5</vh></v>
<v t="ekr.20160331124135.1"><vh>** Clean up Provider</vh>
<v t="ekr.20160326041335.1"><vh>Found:class .*Provider</vh>
<v t="tbrown.20110712121053.19746"><vh>class BookMarkDisplayProvider</vh>
<v t="tbrown.20110712121053.19747"><vh>__init__</vh></v>
<v t="tbrown.20110712121053.19748"><vh>ns_provides</vh></v>
<v t="tbrown.20110712121053.19749"><vh>ns_provide</vh></v>
</v>
<v t="tbrown.20130813134319.5694"><vh>class CKEPaneProvider</vh></v>
<v t="tbrown.20140806084727.30203"><vh>class LiveCodeDisplayProvider</vh>
<v t="tbrown.20140806084727.30204"><vh>__init__</vh></v>
<v t="tbrown.20140806084727.30205"><vh>ns_provides</vh></v>
<v t="tbrown.20140806084727.30206"><vh>ns_provide</vh></v>
</v>
<v t="tbrown.20110629084915.35149"><vh>class ViewRenderedProvider</vh>
<v t="tbrown.20110629084915.35154"><vh>__init__</vh></v>
<v t="tbrown.20110629084915.35150"><vh>ns_provides</vh></v>
<v t="tbrown.20110629084915.35151"><vh>ns_provide</vh></v>
</v>
<v t="ekr.20140226074510.4207"><vh>class ViewRenderedProvider</vh>
<v t="ekr.20140226074510.4208"><vh>__init__</vh></v>
<v t="ekr.20140226074510.4209"><vh>ns_provides</vh></v>
<v t="ekr.20140226074510.4210"><vh>ns_provide</vh></v>
</v>
</v>
<v t="ekr.20160326060559.1"><vh>Found:.(.*)Provider</vh>
<v t="tbrown.20130813134319.14339"><vh>onCreate</vh></v>
<v t="tbrown.20110712121053.19751"><vh>onCreate</vh></v>
<v t="ekr.20110317024548.14376"><vh>onCreate</vh></v>
<v t="ekr.20140226074510.4193"><vh>onCreate</vh></v>
<v t="tbrown.20140806084727.30179"><vh>onCreate</vh></v>
</v>
</v>
<v t="ekr.20140226125539.16818"><vh>viewrendered3 notes</vh>
<v t="ekr.20140226125539.16819"><vh>Intro post</vh></v>
<v t="ekr.20160325193645.1"><vh>docstring differences</vh></v>
<v t="ekr.20160331131256.2"><vh>Add QWebView &amp; OpenGl support to viewrendered.py</vh></v>
<v t="ekr.20160331162149.1"><vh>posts</vh>
<v t="ekr.20160331154806.1"><vh>singleton post</vh></v>
</v>
</v>
<v t="ekr.20160331123847.1"></v>
</vnodes>
<tnodes>
<t tx="EKR.20040517075715"></t>
<t tx="EKR.20040517075715.13"></t>
<t tx="EKR.20040517075715.20">[Main]
use_styles = Yes
use_section_numbers = Yes
use_current_document = Yes
max_headings = 6
header_style = Heading
</t>
<t tx="EKR.20040517090508">@nocolor-node

Enable plugins by creating@enabled-plugins nodes in leoSettings files,
typically myLeoSettings.leo.See the node

Users Guide-- &gt; Chapter 8: Customizing Leo-- &gt;@rst
html\customizing.html-- &gt; Specifying settings-- &gt; Complex settings nodes

in LeoDocs.leo for full details.

**Important**: Leo no longer uses pluginsManager.txt to enable or disable plugins.
</t>
<t tx="edream.110203113231.618" _bklnk="7d71002858010000007871014b00580400000074797065710258080000006e6f646552656374710358010000007971044b0058050000006c696e6b7371055d7106752e">@language python
@tabwidth -4
@pagewidth 80
</t>
<t tx="edream.110203113231.667"></t>
<t tx="edream.110203113231.729"></t>
<t tx="edream.110203113231.872">@nocolor-node

These plugins create new kinds of nodes, some of which affect the file system.</t>
<t tx="ekr.20040331071919"></t>
<t tx="ekr.20040722141148">@nocolor-node
@

You would typically not enable any of the following "plugins".

These plugins contain example code only.
</t>
<t tx="ekr.20040915073259">@nocolor-node

These plugins add buttons and other widgets to the icon area or
affect Leo's panes and windows in various ways.

</t>
<t tx="ekr.20041001210557"></t>
<t tx="ekr.20041030092101">@Notes by EKR: The dyna plugin is a remarkable body of work by 'e'.Have fun with it.

You may download the latest version at: http: // rclick.netfirms.com / dyna_menu.py.html
</t>
<t tx="ekr.20041114102139">@nocolor

Comments
--------

Most of the comments in the style guide are comments*about*the style guide.
You would replace these comments with your own, or eliminate them entirely in
your plugin.

Docstrings
----------

Several plugins show the docstring, so please take care to do a good job of
describing what the plugin does and how to use it.

Directives
----------

Please put the following at the end of the plugin's top-level node.

    @language python
    @tabwidth-4

Imports
-------

-Do* not*assume that modules like Qt are always available.

-Do* not*use from m import*

-Your code should test whether modules have been imported only if those modules
  may not be available on all platforms.

-To fail gracefully if the Qt gui is not in effect, put the following at
  the top level::

      g.assertUi('qt')

Exceptions
----------

It is usually best* not*to catch exceptions in plugins: doHook catches all
exceptions and disables further calls to plugins.

If a plugin catches exceptions during startup it should do either raise the
exception again or provide an init function at the top level that reports the
failure by returning False.

Use separate nodes
------------------

**Please**define each class, function or method in a separate node!To
make this work, just put@others in the root of your plugin as shown.Note
that@others may be nested, as shown in class myClass.
</t>
<t tx="ekr.20050111122605"></t>
<t tx="ekr.20050303051035">@nocolor-node

The following nodes show recommended style when writing plugins.</t>
<t tx="ekr.20050303051035.2">'''
A docstring describing your plugin and how to use it.
If it's long, you might put it in a separate section.
'''
&lt;&lt; imports &gt;&gt;
@others
@language python
@tabwidth-4
</t>
<t tx="ekr.20050303051035.5">import leo.core.leoGlobals as g

# Whatever other imports your plugins uses.
</t>
<t tx="ekr.20050303051101">def init():
    '''Return True if the plugin has loaded successfully.'''
    ok=g.app.gui.guiName() in('qt','qttabs')
    if ok:
        if 1: # Use this if you want to create the commander class before the frame is fully created.
            g.registerHandler('before-create-leo-frame',onCreate)
        else: # Use this if you want to create the commander class after the frame is fully created.
            g.registerHandler('after-create-leo-frame',onCreate)
    return ok</t>
<t tx="ekr.20050303051150">def onCreate(tag, keys):

    c=keys.get('c')
    if not c: return

    thePluginController=pluginController(c)
</t>
<t tx="ekr.20050303051222">class pluginController:

    @others</t>
<t tx="ekr.20050303051222.1">def __init__(self,c):

    self.c=c
    # Warning: hook handlers must use keywords.get('c'), NOT self.c.
</t>
<t tx="ekr.20050306071540">def onStart2(tag, keywords):

    """
    Showing how to define a global hook that affects all commanders.
    """

    log=c.frame.log.__class__

    # Replace frame.put with newPut (not shown).
    g.funcToMethod(newPut,log,"put")</t>
<t tx="ekr.20050306071629">'''
A docstring describing your plugin and how to use it.
If it's long, you might put it in a separate section.
'''
&lt;&lt; imports &gt;&gt;
@others
@language python
@tabwidth-4</t>
<t tx="ekr.20050306071629.1">'''This docstring should be a clear, concise description of
what the plugin does and how to use it.
'''
</t>
<t tx="ekr.20050306071629.3">import leo.core.leoGlobals as g

# Whatever other imports your plugins uses.
</t>
<t tx="ekr.20050306071629.4">def init():
    '''Return True if the plugin has loaded successfully.'''
    ok=True # This might depend on imports, etc.
    if ok:
        g.registerHandler('start2',onStart2)
    return ok</t>
<t tx="ekr.20050306081349"></t>
<t tx="ekr.20050817132814">@nocolor-node

Important: the rst3 plugin has largely been superceded by similar
commands built into Leo's core.

To activate the rst3 plugin, do the following:

1. Go to http://silvercity.sourceforge.net/.
- Follow the link 'SilverCity Releases'.
- Download the release that fits to your Python version.
- Double-klick on the downloaded file.

2. Go to http://docutils.sourceforge.net/.
- Have a look for item 'Download'
- Get, as the editor says, the latest snapshot by following the link
  'docutils-snapshot.tgz'.
- Make sure you have a application that can handle this format. 7zip is doing this great.
- Unpack it to a temporary folder.
- Open a console window, go to the temporary folder and type 'setup.py install'
  or '&lt;path_to_python.exe&gt;\python setup.py install'.

3. Start up Leo
- Check in the menu 'Edit' for item 'Write-Restructured-Text'.
</t>
<t tx="ekr.20061023141638"></t>
<t tx="ekr.20061023142737"></t>
<t tx="ekr.20061023142737.1"></t>
<t tx="ekr.20071113084440"># These plugins are for testing Leo's own plugin loading logic.
# There is no reason ever to enable these plugins.</t>
<t tx="ekr.20081121105001.2080"># Most other gui plugins are now in leoGuiPluginsRef.leo</t>
<t tx="ekr.20090430075506.4"></t>
<t tx="ekr.20100103093121.5365"># These are experimental plugins.
</t>
<t tx="ekr.20101004082701.5674"></t>
<t tx="ekr.20101110150056.9453"># Some of the most important recent plugins work only with the Qt gui.
</t>
<t tx="ekr.20101110150056.9457"></t>
<t tx="ekr.20110317024548.14376">def onCreate(tag, keys):
    c = keys.get('c')
    if c:
        ViewRenderedProvider(c)
    return
</t>
<t tx="ekr.20120309073937.9878"></t>
<t tx="ekr.20121126102050.10134"></t>
<t tx="ekr.20130927050813.13031"></t>
<t tx="ekr.20140226074510.4193">def onCreate(tag, keys):
    c = keys.get('c')
    if c:
        ViewRenderedProvider(c)
    return
</t>
<t tx="ekr.20140226074510.4207">class ViewRenderedProvider:
    @others
</t>
<t tx="ekr.20140226074510.4208">def __init__(self, c):
    self.c = c
    # Careful: we may be unit testing.
    if hasattr(c, 'free_layout'):
        splitter = c.free_layout.get_top_splitter()
        if splitter:
            splitter.register_provider(self)
</t>
<t tx="ekr.20140226074510.4209">def ns_provides(self):
    return [('Viewrendered2', '_leo_viewrendered')]
</t>
<t tx="ekr.20140226074510.4210">def ns_provide(self, id_):
    global controllers
    if id_ == '_leo_viewrendered':
        c = self.c
        vr = controllers.get(c.hash()) or ViewRenderedController(c)
        # return ViewRenderedController(self.c)
        return vr
</t>
<t tx="ekr.20140226125539.16818">@language rest
@

Posts:
- https://groups.google.com/forum/#!topic/leo-editor/BDzmytlSegw viewrendered2 plugin
- https://groups.google.com/forum/#!topic/leo-editor/l7jzwNxGN_U Working on the VR2 plugin
- http://mail.google.com/mail/u/0/#search/label%3Aleo+viewrendered2/14478384d1662417
    Re: viewrendered2 plugin - Manual and support files

- Every render exports leo.html in the local directory.

- You can simply cut and paste from the VR2 pane to your word processor etc.

- You can also use the export button to push it to your browser, from which
  you can save in (typically many formats).

- Google "restructuredtext screen shots"

</t>
<t tx="ekr.20140226125539.16819">@nocolor-node
@

https://groups.google.com/forum/#!topic/leo-editor/BDzmytlSegw

Why a better viewrendered plugin?
---------------------------------

I like to use reStructuredText (reST) for all of my note-taking, idea
development, project and task management and automation of desktop
activities (e.g. initiating a backup). You could say it is the control
centre of my daily activities, including calculating and showing dashboards
of where I am and where I'm going.

This means I need a tool which seamlessly shows me the full-fidelity
browser-rendered version of what I am writing and be able to print my notes
for meetings, cut and paste nicely formatted output to my office e-mails
and documents, as well as show some of the material as a slideshow.

The existing *viewrendered* plugin couldn't seem to do what I needed. I
created the viewrendered2 (VR2) plugin that rendered, on demand, to my
normal web browser. This worked well, but I really thought live rendering
like "viewrendered" would be better, and for that I needed close control
over scroll positions etc. that I couldn't get with an external browser. So
the plugin became much more complex as I merged it with the existing
viewrendered plugin, but was ultimately more powerful and useful to me.

Objectives
----------

* Show a "full" html representation of any reST node or tree, without an
  @rst root node, including more features than the existing viewrendered plugin:

  - proper html layout
  - math (mathjax, etc.)
  - clickable URLs
  - clickable hyperlinks within the page (e.g. TOC)
  - good quality zoom
  - cut and paste html with ctl-C
  - s5 slideshows
  - javascript
  - svg images
  - configurable css

* Allow showing of node tree rather than just the current node.  This can give
  a better overview perspective of the tree contents.

* Be able to lock the rendering on the root node of a tree, to view the effect
  editing a sub-node within the larger html document.

* Provide proper rendering of any combination of node types in a tree, so long as
  they have been properly designated by @language directives (i.e. reST, text,
  code, css, ...).

* Allow viewing (and printing) of an entire source file from an @file type root node.

* Be able to *export* any of these renderings to a full web-browser to take advantage
  of the large rendering window (especially for slideshows, as well as printing, saving output.

* Be able to integrate automatically executed code nodes intermingled with
  reST nodes to provide an automatic calculation-based "Notebook" or "Report"
  type output.

* Don't increase the dependencies of Leo.

Implementation
----------------------

VR2 is implemented mostly as an ~600 line expansion of the update_rst
method in the viewrendered.py plugin. The text-oriented class used for
rendering in VR1 has been replaced by the QWebView class which provides the
full rendering functionality of a real web-browser. To make this flexible,
a toolbar has been attached to the top with a few controls.

Because I wanted to retain compatibility with VR1, I created the
viewrendered2.py plugin, but retained all the class naming which occurred
within VR1. This means that it remains compatible with the existing
mechanisms (like free_layout) of showing and creating panes for VR1. I
tried this with an expectation that it would fail, but it appears to work
without any unintended side-effects.

Tooltips have been added where Qt allows, with the philosophy that a user
shouldn't need a manual to use this pane.

VR2 has been used a lot under Windows 7 and a little under Ubuntu 13.10.

Issues / Limitations
----------------------------

I use VR2 every few minutes every working day. However, VR2 is likely to
still have a lot of rough edges and, in particular, bugs that show up with
different work flows or css folder layouts etc. In fact, VR2 is still a
work in progress and therefore still being fiddled with, so bugs creep in
regularly.

But overall, my perception of its deficiencies are:

* Does not handle reST headings within the node bodies well (sometimes very slow
  render, blocking Leo).

  - VR2 attempts to reconcile reST headings that originate from explicit
    headings within the nodes against reST headings that are automatically
    generated by the node hierarchy.  In many cases, this is impossible,
    resulting in many errors which drastically slows down rendering.
  - Recommend not using headings within the nodes themselves, leaving the node
    hierarchy to do this automatically.

* If the node triggers one of the special viewrendered node header types  (@md,
  @image, @movie, @html) VR2 simply defaults to the old handlers for those
  types.  This means it jumps back to whatever pane type VR1 uses, so the
  features of VR2 disappear.  I suspect that VR2 could incorporate these types
  into the new version and retain these new features.  I should look at that.

* Doesn't integrate with rst3 plugin, especially honouring @others etc.
  There are some conflicts in objectives, so this may never be fully resolved.
  It would probably make sense for rst3 settings to get used for VR2 as well,
  along with additional VR2 specific settings.  Currently, VR2 has its own
  @settings-style settings.  The rst3 code is not used.

* For slideshow purposes, a patch to docutils s5_writer is required to be able
  to handle an arbitrary hierarchy of nodes (forces all headings to start a new
  slide).  Otherwise, only the 2nd level nodes (from the root) force a new slide.

* The integration of VR2 code into the existing viewrendered plugin code is
  rudimentary.  I took the shortcut of not trying to understand this code well
  and confining my integration to the rst rendering only.  Better integration
  would be a good future step.

With the plugin being able to execute javascript etc. there may be some form
of security issue, but I can't see it myself (given that Leo can execute
arbitrary python code anyway).  Any thoughts?

Future?
-----------
* Expand the export button if pandoc is installed, adding optional
  output formats such as docx, odt, plus additional slideshow formats.
* Use new reST functionality to replace other media viewrendered methods
  for images, svg, movies, etc.
* Integrate better with rst3?

Conclusion
----------------
* I've attached the source as well as a bunch of screenshots.  Feel free to try out the source by putting viewrendered2 into your @enabled-plugins instead of the usual viewrendered.  I'd be interested in whether it works or not - expect bugs to show up!
* I'm looking for feedback on whether this appears useful to others and not just me.  If so, it should probably be polished a bit more before being used widely.  Perhaps greater understanding of the existing viewrendered plugin operation would help me here.

Feedback is welcome.
</t>
<t tx="ekr.20140723122936.17925"># These plugins now contain the importer code for all kinds of @auto nodes.
# Each plugin must define a top-level importer_dict dictionary describing the plugin.
</t>
<t tx="ekr.20140726091031.18071"># These plugins now contain the write code for all kinds special @auto nodes.
# Each plugin must define a top-level writer_dict dictionary describing the plugin.
</t>
<t tx="ekr.20160122104302.1"></t>
<t tx="ekr.20160122104357.1">run-pylint
beautify-node
beautify-tree
cfa-code
</t>
<t tx="ekr.20160122104400.1"></t>
<t tx="ekr.20160325140307.1"></t>
<t tx="ekr.20160325193645.1">@nocolor-node

The following settings are new in the viewrendered2.py plugin:

These settings directly override the corresponding docutils settings:

- ``@string vr-stylesheet-path``
- ``@int vr-halt-level = 6``
- ``@string vr-math-output = mathjax``
- ``@bool vr-smart-quotes = True``
- ``@bool vr-embed_stylesheet = True``
- ``@bool vr-xml-declaration', False``

The following settings override viewrendered2.py internal settings:

- ``@bool vr-verbose = False``
- ``@bool vr-tree_mode = False``
- ``@bool vr-auto_update = True``
- ``@bool vr-lock_node = False``
- ``@bool vr-slideshow = False``
- ``@bool vr-visible_code = True``
- ``@bool vr-execute_code = False``
- ``@bool vr-rest_code_output = False``</t>
<t tx="ekr.20160326041335.1"># flattened, ignore-case, regex, head, body</t>
<t tx="ekr.20160326060559.1"># flattened, ignore-case, regex, head, body</t>
<t tx="ekr.20160331124135.1"></t>
<t tx="ekr.20160331131256.2">@language rest
@wrap

QWebView
http://doc.qt.io/qt-5/qwebview.html

http://doc.qt.io/qt-4.8/graphicsview.html

http://groups.google.com/group/leo-editor/browse_thread/thread/4ea2d3f7d2c68106#
Ville

Create one QWebView window. zoom it in to have large fonts.

Create @button that converts current node containing restructuredtext to html, and pushes that html to QWebView.

Voila', instant presentation tool. The webview window would be on projector, and leo would be in your private computer. You can easily edit the text, or find new interesting slides to present in privacy of your own screen.
</t>
<t tx="ekr.20160331154806.1">Another Engineering Notebook post.

While merging VR and VR2, it has become clear that the present approach to having multiple VR panes has no chance of working.

Indeed, there is a global controllers dict, but the keys are Commanders.  This means that there can not be more than one VR pane per Commander. Yes, we could imagine that values in the controllers dict would be lists of VR controllers, but that hardly helps. 

Instead, we must have a way of associating VR controllers with panes. Then, when an event is received, we must get the pane (not just the controller).

At present, most commands contain code such as this:

vr = c.frame.top.findChild(
    QtWidgets.QWidget, vr3_pane_name)

I think now you can see the problem.  This searches the entire outline for a match. Instead, we must associate vr (a VR controller) with the presently active Leo pane. It had better be a VR pane ;-)  It's not rocket science, but the global controllers dict must go (or be rethought), and all the code that uses it must be revised.

EKR</t>
<t tx="ekr.20160331162149.1"></t>
<t tx="rogererens.20041130095659">@ It is possible to link to nodes within the same file.  However clones might be better.
</t>
<t tx="tbrown.20110629084915.35149">class ViewRenderedProvider:
    @others
</t>
<t tx="tbrown.20110629084915.35150">def ns_provides(self):
    return [('Viewrendered', '_leo_viewrendered')]
</t>
<t tx="tbrown.20110629084915.35151">def ns_provide(self, id_):
    global controllers
    if id_ == '_leo_viewrendered':
        c = self.c
        vr = controllers.get(c.hash()) or ViewRenderedController(c)
        # return ViewRenderedController(self.c)
        return vr
</t>
<t tx="tbrown.20110629084915.35154">def __init__(self, c):
    self.c = c
    # Careful: we may be unit testing.
    if hasattr(c, 'free_layout'):
        splitter = c.free_layout.get_top_splitter()
        if splitter:
            splitter.register_provider(self)
</t>
<t tx="tbrown.20110712121053.19746">class BookMarkDisplayProvider:
    @others
</t>
<t tx="tbrown.20110712121053.19747">def __init__(self, c):
    self.c = c

    # if hasattr(c, 'free_layout') and hasattr(c.free_layout, 'get_top_splitter'):
        # Second hasattr temporary until free_layout merges with trunk

    splitter = c.free_layout.get_top_splitter()
    # Careful: we could be unit testing.
    if splitter:
        splitter.register_provider(self)
</t>
<t tx="tbrown.20110712121053.19748">def ns_provides(self):
    return[('Bookmarks', '_leo_bookmarks_show')]
</t>
<t tx="tbrown.20110712121053.19749">def ns_provide(self, id_):
    if id_.startswith('_leo_bookmarks_show'):

        c = self.c
        v = None

        if ':' in id_:
            gnx = id_.split(':')[1]
            if not gnx and '_leo_bookmarks_show' in c.db:
                gnx = c.db['_leo_bookmarks_show']
            # first try old style local gnx lookup
            for i in c.all_nodes():
                if str(i.gnx) == gnx:
                    v = i
                    break
            else:  # use UNL lookup
                if '#' in gnx:
                    file_, UNL = gnx.split('#', 1)
                    other_c = g.openWithFileName(file_, old_c=c)
                else:
                    file_, UNL = None, gnx
                    other_c = c
                if other_c != c:
                    # don't use c.bringToFront(), it breaks --minimize
                    if hasattr(g.app.gui,'frameFactory'):
                        factory = g.app.gui.frameFactory
                        if factory and hasattr(factory,'setTabForCommander'):
                            factory.setTabForCommander(c)

                    g.es("NOTE: bookmarks for this outline\nare in a different outline:\n  '%s'"%file_)

                ok, depth, other_p = g.recursiveUNLFind(UNL.split('--&gt;'), other_c)
                if ok:
                    v = other_p.v
                else:
                    g.es("Couldn't find '%s'"%gnx)

        if v is None:
            v = c.p.v

        bmd = BookMarkDisplay(self.c, v=v)
        return bmd.w
</t>
<t tx="tbrown.20110712121053.19751">def onCreate(tag, keys):

    c = keys.get('c')

    BookMarkDisplayProvider(c)
</t>
<t tx="tbrown.20130813134319.14339">def onCreate (tag,key):

    c = key.get('c')

    CKEPaneProvider(c)
</t>
<t tx="tbrown.20130813134319.5694">class CKEPaneProvider:
    ns_id = '_add_cke_pane'
    def __init__(self, c):
        self.c = c
        # Careful: we may be unit testing.
        if hasattr(c, 'free_layout'):
            splitter = c.free_layout.get_top_splitter()
            if splitter:
                splitter.register_provider(self)
    def ns_provides(self):
        return[('Rich text CKE editor', self.ns_id)]
    def ns_provide(self, id_):
        if id_ == self.ns_id:
            w = CKEEditor(c=self.c)
            return w
    def ns_provider_id(self):
        # used by register_provider() to unregister previously registered
        # providers of the same service
        return self.ns_id
</t>
<t tx="tbrown.20140806084727.30179">def onCreate(tag, keys):

    c = keys.get('c')

    LiveCodeDisplayProvider(c)
</t>
<t tx="tbrown.20140806084727.30203">class LiveCodeDisplayProvider:
    @others
</t>
<t tx="tbrown.20140806084727.30204">def __init__(self, c):
    self.c = c

    splitter = c.free_layout.get_top_splitter()
    if splitter:
        splitter.register_provider(self)
</t>
<t tx="tbrown.20140806084727.30205">def ns_provides(self):
    return[('Live Code', '_leo_livecode_show')]
</t>
<t tx="tbrown.20140806084727.30206">def ns_provide(self, id_):
    if id_.startswith('_leo_livecode_show'):
        c = self.c
        if not hasattr(c, '_livecode'):
            c._livecode = LiveCodeDisplay(self.c)
        return c._livecode.w
</t>
</tnodes>
</leo_file>
