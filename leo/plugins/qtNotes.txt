#@+leo-ver=4-thin
#@+node:ekr.20081121105001.147:@thin qtNotes.txt
#@+all
#@+node:ekr.20081121105001.148: qt To do
#@+node:ekr.20100223114506.3699:Support cascade menu
leoQtFrame.cascade.
#@nonl
#@+node:ekr.20081121105001.306:cascade
def cascade (self,event=None):

    '''Cascade all Leo windows.'''

    # x,y,delta = 10,10,10
    # for frame in g.app.windowList:
        # top = frame.top

        # # Compute w,h
        # top.update_idletasks() # Required to get proper info.
        # geom = top.geometry() # geom = "WidthxHeight+XOffset+YOffset"
        # dim,junkx,junky = geom.split('+')
        # w,h = dim.split('x')
        # w,h = int(w),int(h)

        # # Set new x,y and old w,h
        # frame.setTopGeometry(w,h,x,y,adjustSize=False)

        # # Compute the new offsets.
        # x += 30 ; y += 30
        # if x > 200:
            # x = 10 + delta ; y = 40 + delta
            # delta += 10
#@-node:ekr.20081121105001.306:cascade
#@-node:ekr.20100223114506.3699:Support cascade menu
#@+node:ekr.20100223114506.3698:Should leoQtMenu.index do something?
#@-node:ekr.20100223114506.3698:Should leoQtMenu.index do something?
#@+node:ekr.20090429101847.10:Support canvas widgets in all panes
@nocolor-node

http://groups.google.com/group/leo-editor/browse_thread/thread/9ac06147e75fc042

add-canvas: Like add-editor, but it creates a canvas area, not a text area.
#@nonl
#@-node:ekr.20090429101847.10:Support canvas widgets in all panes
#@+node:ekr.20081215074704.21:Add drag and drop
#@-node:ekr.20081215074704.21:Add drag and drop
#@+node:ekr.20090418064921.12:Qt, vim bindings
http://groups.google.com/group/leo-editor/browse_thread/thread/7285ac185355efb1
#@nonl
#@-node:ekr.20090418064921.12:Qt, vim bindings
#@+node:ekr.20081215162017.4:Allow coloring of script buttons
@nocolor-node

Use @string qt-button-color = lightSteelBlue

The following does *not* work in @data qt-gui-plugin-style-sheet::

    QPushButton {
        background-color: red;
    }
#@-node:ekr.20081215162017.4:Allow coloring of script buttons
#@+node:ekr.20081124094918.1:Fix problems with scim
@nocolor-node

http://groups.google.com/group/leo-editor/browse_thread/thread/59c1e5d6acaf4de0

I've some more information about the problems with accent previously
reported:
- I can confirm that they are caused by the interaction scim+leo (with
and without the qt plugin). If scim is not started leo works fine. If
scim is running the problems appear and are slightly different with
and without the qt plugin. The workaround is obvious: don't use leo
and scim at the same time :-)
- accents are not working in the qt plugin when scintilla is used. If
qt-use-scintilla=False I can write this:

àáä (the same for the rest of vowels)

but if qt-use-scintilla=True when I enter the same sequence in the
keyboard I get:

`aaa (the same for the rest of vowels)

- the problem with the ñ character (reported previously too) is only
present in the qt plugin (both with and without scintilla)
#@-node:ekr.20081124094918.1:Fix problems with scim
#@-node:ekr.20081121105001.148: qt To do
#@+node:ekr.20100223114506.3701:Leo 4.8 devel projects
#@+node:ekr.20100223114506.3700:Fixed expand/contract-pane commands
#@+node:ekr.20081121105001.297:Minibuffer commands... (qtFrame)
#@+node:ekr.20081121105001.298:contractPane
def contractPane (self,event=None):

    '''Contract the selected pane.'''

    f = self ; c = f.c

    w = c.get_requested_focus() or g.app.gui.get_focus(c)
    wname = c.widget_name(w)

    # g.trace(wname)
    if not w: return

    if wname.startswith('body'):
        f.contractBodyPane()
        c.bodyWantsFocusNow()
    elif wname.startswith('log'):
        f.contractLogPane()
        c.logWantsFocusNow()
    else:
        for z in ('head','canvas','tree'):
            if wname.startswith(z):
                f.contractOutlinePane()
                c.treeWantsFocusNow()
                break
#@-node:ekr.20081121105001.298:contractPane
#@+node:ekr.20081121105001.299:expandPane
def expandPane (self,event=None):

    '''Expand the selected pane.'''

    f = self ; c = f.c

    w = c.get_requested_focus() or g.app.gui.get_focus(c)
    wname = c.widget_name(w)

    # g.trace(wname)
    if not w: return

    if wname.startswith('body'):
        f.expandBodyPane()
        c.bodyWantsFocusNow()
    elif wname.startswith('log'):
        f.expandLogPane()
        c.logWantsFocusNow()
    else:
        for z in ('head','canvas','tree'):
            if wname.startswith(z):
                f.expandOutlinePane()
                c.treeWantsFocusNow()
                break
#@-node:ekr.20081121105001.299:expandPane
#@+node:ekr.20081121105001.300:fullyExpandPane
def fullyExpandPane (self,event=None):

    '''Fully expand the selected pane.'''

    f = self ; c = f.c

    w = c.get_requested_focus() or g.app.gui.get_focus(c)
    wname = c.widget_name(w)

    # g.trace(wname)
    if not w: return

    if wname.startswith('body'):
        f.fullyExpandBodyPane()
        c.treeWantsFocusNow()
    elif wname.startswith('log'):
        f.fullyExpandLogPane()
        c.bodyWantsFocusNow()
    else:
        for z in ('head','canvas','tree'):
            if wname.startswith(z):
                f.fullyExpandOutlinePane()
                c.bodyWantsFocusNow()
                break
#@-node:ekr.20081121105001.300:fullyExpandPane
#@+node:ekr.20081121105001.301:hidePane
def hidePane (self,event=None):

    '''Completely contract the selected pane.'''

    f = self ; c = f.c

    w = c.get_requested_focus() or g.app.gui.get_focus(c)
    wname = c.widget_name(w)

    # g.trace(wname)
    if not w: return

    if wname.startswith('body'):
        f.hideBodyPane()
        c.treeWantsFocusNow()
    elif wname.startswith('log'):
        f.hideLogPane()
        c.bodyWantsFocusNow()
    else:
        for z in ('head','canvas','tree'):
            if wname.startswith(z):
                f.hideOutlinePane()
                c.bodyWantsFocusNow()
                break
#@-node:ekr.20081121105001.301:hidePane
#@+node:ekr.20081121105001.302:expand/contract/hide...Pane
@ The first arg to divideLeoSplitter means the following:

    f.splitVerticalFlag: use the primary   (tree/body) ratio.
not f.splitVerticalFlag: use the secondary (tree/log) ratio.
@c

def contractBodyPane (self,event=None):
    '''Contract the body pane.'''
    f = self ; r = min(1.0,f.ratio+0.1)
    f.divideLeoSplitter(f.splitVerticalFlag,r)

def contractLogPane (self,event=None):
    '''Contract the log pane.'''
    f = self ; r = min(1.0,f.secondary_ratio+0.1) # 2010/02/23: was f.ratio
    f.divideLeoSplitter(not f.splitVerticalFlag,r)

def contractOutlinePane (self,event=None):
    '''Contract the outline pane.'''
    f = self ; r = max(0.0,f.ratio-0.1)
    f.divideLeoSplitter(f.splitVerticalFlag,r)

def expandBodyPane (self,event=None):
    '''Expand the body pane.'''
    self.contractOutlinePane()

def expandLogPane(self,event=None):
    '''Expand the log pane.'''
    f = self ; r = max(0.0,f.secondary_ratio-0.1) # 2010/02/23: was f.ratio
    f.divideLeoSplitter(not f.splitVerticalFlag,r)

def expandOutlinePane (self,event=None):
    '''Expand the outline pane.'''
    self.contractBodyPane()
#@-node:ekr.20081121105001.302:expand/contract/hide...Pane
#@+node:ekr.20081121105001.303:fullyExpand/hide...Pane
def fullyExpandBodyPane (self,event=None):
    '''Fully expand the body pane.'''
    f = self
    f.divideLeoSplitter(f.splitVerticalFlag,0.0)

def fullyExpandLogPane (self,event=None):
    '''Fully expand the log pane.'''
    f = self
    f.divideLeoSplitter(not f.splitVerticalFlag,0.0)

def fullyExpandOutlinePane (self,event=None):
    '''Fully expand the outline pane.'''
    f = self
    f.divideLeoSplitter(f.splitVerticalFlag,1.0)

def hideBodyPane (self,event=None):
    '''Completely contract the body pane.'''
    f = self
    f.divideLeoSplitter(f.splitVerticalFlag,1.0)

def hideLogPane (self,event=None):
    '''Completely contract the log pane.'''
    f = self
    f.divideLeoSplitter(not f.splitVerticalFlag,1.0)

def hideOutlinePane (self,event=None):
    '''Completely contract the outline pane.'''
    f = self
    f.divideLeoSplitter(f.splitVerticalFlag,0.0)
#@-node:ekr.20081121105001.303:fullyExpand/hide...Pane
#@-node:ekr.20081121105001.297:Minibuffer commands... (qtFrame)
#@-node:ekr.20100223114506.3700:Fixed expand/contract-pane commands
#@-node:ekr.20100223114506.3701:Leo 4.8 devel projects
#@-all
#@nonl
#@-node:ekr.20081121105001.147:@thin qtNotes.txt
#@-leo
