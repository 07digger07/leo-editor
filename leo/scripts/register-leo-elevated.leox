#@+leo-ver=5-thin
#@+node:maphew.20130612230051.2796: * @file register-leo-elevated.leox
#@@language python
#@@tabwidth -4
''' Build a command line similar to the following, and pass it on to UAC Elevation for execution
   
  python "B:\apps\leo\trunk\launchLeo.py" --script "b:\apps\leo\trunk\leo\scripts\register-leo.leox"

'''
import os
import sys

d = c.scanAllDirectives(p)

path = d.get('path')
launcher = g.os_path_finalize_join(g.computeLeoDir(), '../launchLeo.py')
script = g.os_path_finalize_join(path, 'register-leo.leox')

# we pass -i to ask python interpreter to stay open when done, to see messages
params = r'-i "{0}" --script "{1}" '.format(launcher, script)
# print(params)
# g.es(params)

#@+others
#@+node:maphew.20130608014320.1745: ** UAC Elevation
import ctypes
import tempfile

hwnd = 0                # parent window
lpOperation = 'runas'   # force elevated UAC prompt
lpFile = sys.executable # path to python
lpFile = lpFile.replace('pythonw.exe', 'python.exe') # force console python, only way to see messages
lpParameters = params   # arguments to pass to python
lpDirectory = tempfile.gettempdir() # working dir
nShowCmd = 1            # window visibility, must be 1 for Leo.

print(lpFile, lpParameters)
g.es(lpFile, lpParameters)
retcode = ctypes.windll.shell32.ShellExecuteA(hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd)
msg = 'Exit code: {0} - {1}'.format(retcode, ctypes.FormatError(retcode))
print(msg)
g.es(msg)

#@+at
# Full command executed when script is complete will resemble:
# 
# C:\Python27\python.exe -ic "import \ntestfile = 'foo'\n...\n#end of file"
#@-others
#@-leo
