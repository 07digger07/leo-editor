<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://leoeditor.com/leo_toc.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="ekr.20070622214401"><vh>Startup</vh>
<v t="ekr.20060112110750"><vh>Local buttons</vh>
<v t="ekr.20090203131919.1"><vh>@button check-menus-cmds</vh></v>
<v t="ekr.20111006212449.11850"><vh>@button check-settings</vh>
<v t="ekr.20111006212449.11851"><vh>ctor</vh></v>
<v t="ekr.20111006212449.11852"><vh>check &amp; helper</vh>
<v t="ekr.20111007043902.15697"><vh>print_missing</vh></v>
</v>
<v t="ekr.20111006212449.11853"><vh>error</vh></v>
<v t="ekr.20111006212449.11854"><vh>get_commanders</vh></v>
<v t="ekr.20111006212449.11855"><vh>get_configs &amp; helpers</vh>
<v t="ekr.20111006212449.11856"><vh>get_configs_from_outline &amp; helper</vh>
<v t="ekr.20111006212449.11857"><vh>scan_for_configs</vh></v>
</v>
</v>
<v t="ekr.20111006212449.11858"><vh>get_settings &amp; helper</vh>
<v t="ekr.20111006212449.11859"><vh>is_setting</vh></v>
<v t="ekr.20111006212449.11860"><vh>parse_setting</vh></v>
</v>
<v t="ekr.20111006212449.11861"><vh>munge</vh></v>
<v t="ekr.20111006212449.11862"><vh>run</vh></v>
</v>
<v t="ekr.20060112103537.17"><vh>@button check-bindings</vh>
<v t="ekr.20060112104119"><vh>defineSetNames</vh></v>
<v t="ekr.20060112104333"><vh>doSet</vh></v>
<v t="ekr.20060112105523"><vh>doShortcuts</vh></v>
<v t="ekr.20060112104333.1"><vh>checkSets</vh></v>
<v t="ekr.20060112104823"><vh>main</vh></v>
</v>
<v t="ekr.20111017082630.16086"><vh>Disabled/old</vh>
<v t="ekr.20111017082630.16080"><vh>@@button check-bindings</vh>
<v t="ekr.20111017082630.16081"><vh>defineSetNames</vh></v>
<v t="ekr.20111017082630.16082"><vh>doSet</vh></v>
<v t="ekr.20111017082630.16083"><vh>doShortcuts</vh></v>
<v t="ekr.20111017082630.16084"><vh>checkSets</vh></v>
<v t="ekr.20111017082630.16085"><vh>main</vh></v>
</v>
<v t="ekr.20110612074140.16414"><vh>@@button check-core-settings (OlD)</vh>
<v t="ekr.20110612074140.16417"><vh>ctor</vh></v>
<v t="ekr.20110612074140.16419"><vh>get_settings</vh></v>
<v t="ekr.20110612074140.16478"><vh>get_settings_nodes</vh></v>
<v t="ekr.20110612074140.16416"><vh>init</vh></v>
<v t="ekr.20110612074140.16415"><vh>run</vh></v>
</v>
</v>
</v>
<v t="ekr.20111026083456.16490"><vh>Local commands</vh>
<v t="ekr.20111026083456.16491"><vh>@command print-all-plugins</vh></v>
</v>
</v>
<v t="ekr.20041119035137"><vh>About this file</vh>
<v t="ekr.20041122163623"><vh>About settings names</vh></v>
<v t="ekr.20041119035704"><vh> Basic setting nodes</vh>
<v t="ekr.20041119042929"><vh>@bool</vh></v>
<v t="ekr.20041119042929.1"><vh>@color</vh></v>
<v t="ekr.20041119044139"><vh>@directory</vh></v>
<v t="ekr.20041119042929.3"><vh>@encoding</vh></v>
<v t="ekr.20041119042929.4"><vh>@int</vh></v>
<v t="ekr.20061002115414"><vh>@float</vh></v>
<v t="ekr.20111003130143.15561"><vh>@font</vh></v>
<v t="ekr.20041120181045"><vh>@ratio</vh></v>
<v t="ekr.20041119042929.2"><vh>@path</vh></v>
<v t="ekr.20041119042929.7"><vh>@string</vh></v>
</v>
<v t="ekr.20041119035704.1"><vh> Organizer nodes</vh></v>
<v t="ekr.20071217093419"><vh>\@data</vh></v>
<v t="ekr.20080312071248.25"><vh>\@buttons</vh></v>
<v t="ekr.20080312071248.19"><vh>\@button name [@key=value]</vh></v>
<v t="ekr.20080312071248.26"><vh>\@commands</vh></v>
<v t="ekr.20080312071248.20"><vh>\@command name [@key=value]</vh></v>
<v t="ekr.20070224073109"><vh>\@enabled-plugins</vh></v>
<v t="ekr.20060913144412"><vh>\@keys keyset-name</vh></v>
<v t="ekr.20041119035931"><vh>\@if expression</vh></v>
<v t="ekr.20041119110141"><vh>\@ifplatform platform-name</vh></v>
<v t="ekr.20041119035704.2"><vh>\@ignore comment</vh></v>
<v t="ekr.20130503155210.16364"><vh>\@menuat</vh></v>
<v t="ekr.20070411172718"><vh>\@openwith name = shortcut</vh></v>
<v t="ekr.20131115075142.18226"><vh>\@outline-data setting-name</vh></v>
<v t="ekr.20041119105509"><vh>\@set name = value</vh></v>
<v t="ekr.20041120155431.1"><vh>\@shortcuts</vh></v>
<v t="ekr.20041119035704.3"><vh>\@type type-name: base-type = [list of valid values]</vh></v>
<v t="ekr.20041120155431.2"><vh>\@type type-name: script: script-name</vh></v>
</v>
<v t="ekr.20061011082224"><vh>About myLeoSettings.leo</vh></v>
<v t="ekr.20041119034357.1"><vh>@settings</vh>
<v t="ekr.20100904134301.11000"><vh>Abbreviations</vh>
<v t="ekr.20100904134301.11006"><vh>@bool enable-abbreviations = False</vh></v>
<v t="ekr.20130924110246.13745"><vh>@bool scripting-abbreviations = False</vh></v>
<v t="ekr.20100904134301.11004"><vh>@data abbreviations</vh></v>
<v t="tbrown.20120820202856.25330"><vh>@data abbreviations-subst-env</vh></v>
<v t="ekr.20100904134301.11002"><vh>@data global-abbreviations</vh></v>
<v t="tbrown.20120821183537.18662"><vh>@string abbreviations-place-end = |&gt;</vh></v>
<v t="tbrown.20120821183537.18663"><vh>@string abbreviations-place-start = &lt;|</vh></v>
<v t="tbrown.20120820202856.25329"><vh>@string abbreviations-subst-end = }|}</vh></v>
<v t="tbrown.20120820202856.25328"><vh>@string abbreviations-subst-start = None</vh></v>
</v>
<v t="ekr.20110510071925.14588"><vh>Autocompleter</vh>
<v t="ekr.20110512085854.14461"><vh>@bool auto_tab_complete = False</vh></v>
<v t="ekr.20051027175030"><vh>@bool autocomplete-brackets = False</vh></v>
<v t="ekr.20060216170801"><vh>@bool enable_calltips_initially = False</vh></v>
<v t="ekr.20110617081407.14760"><vh>@bool forbid_invalid_completions = False</vh></v>
<v t="ekr.20110510071925.14590"><vh>@@@bool use_codewise = False</vh></v>
<v t="ekr.20110510071925.14589"><vh>@bool use_qcompleter = True</vh></v>
</v>
<v t="ekr.20110611092035.16489"><vh>Chapters</vh>
<v t="ekr.20070604075218"><vh>@bool use_chapter_tabs = True</vh></v>
<v t="ekr.20070318065601"><vh>@bool use_chapters = True</vh></v>
</v>
<v t="ekr.20041119034357.10"><vh>Command options</vh>
<v t="ekr.20131112150804.18737"><vh>@bool force_execute_entire_body = False</vh></v>
<v t="ekr.20111115083813.12518"><vh>@bool indent_added_comments = True</vh></v>
<v t="ekr.20041119041019.1"><vh>@string remove_sentinels_extension = .txt</vh></v>
<v t="ekr.20110611092035.16488"><vh>Bracket matching</vh>
<v t="ekr.20060804095015.1"><vh>@string close_flash_brackets = )]}</vh></v>
<v t="ekr.20060804095015"><vh>@string open_flash_brackets = ([{</vh></v>
</v>
<v t="ekr.20110917104720.9414"><vh>c-to-python settings</vh>
<v t="ekr.20110917104720.9415"><vh>@data c-to-python-class-list</vh></v>
<v t="ekr.20110917104720.9416"><vh>@data c-to-python-type-list</vh></v>
<v t="ekr.20110917104720.9417"><vh>@data c-to-python-ivars-dict</vh></v>
</v>
<v t="ekr.20110611092035.16479"><vh>Emacs-like commands</vh>
<v t="ekr.20071006153053"><vh>@bool add_ws_to_kill_ring = False</vh></v>
<v t="ekr.20070531103454"><vh>@bool globalDynamicAbbrevs = True</vh></v>
</v>
<v t="ekr.20110611092035.16482"><vh>Headline commands</vh>
<v t="ekr.20041119050749.11"><vh>@string headline_gmt_time = None</vh></v>
<v t="ekr.20041119050749.10"><vh>@string headline_time_format_string = %m/%d</vh></v>
</v>
<v t="ekr.20110611092035.16478"><vh>Tangle/Untange</vh>
<v t="ekr.20041119034357.14"><vh>@bool at_root_bodies_start_in_doc_mode = True</vh></v>
<v t="ekr.20041119034357.29"><vh>@directory default_tangle_directory = None</vh></v>
</v>
<v t="ekr.20110611092035.16477"><vh>Undo</vh>
<v t="ekr.20060127050605"><vh>@int max_undo_stack_size = 0</vh></v>
<v t="ekr.20041119041019.2"><vh>@bool save_clears_undo_buffer = False</vh></v>
<v t="ekr.20050126083026"><vh>@string undo_granularity = None</vh></v>
</v>
</v>
<v t="ekr.20070926132045"><vh>Common @button nodes</vh>
<v t="ekr.20070926082407"><vh>@buttons</vh></v>
</v>
<v t="ekr.20080312075451.1"><vh>Common @command nodes</vh>
<v t="ekr.20080312075451.2"><vh>@commands</vh></v>
</v>
<v t="ekr.20041119034357.16"><vh>Compare panel</vh>
<v t="ekr.20041119034357.17"><vh>files &amp; directories</vh>
<v t="ekr.20041119043902"><vh>@string compare_file_1 = None</vh></v>
<v t="ekr.20041119043902.1"><vh>@string compare_file_2 = None</vh></v>
<v t="ekr.20041119043902.2"><vh>@string output_file = None</vh></v>
<v t="ekr.20041119043902.3"><vh>@bool append_output_to_output_file = False</vh></v>
<v t="ekr.20041119034357.18"><vh>@string limit_directory_search_extension = .py</vh></v>
</v>
<v t="ekr.20041119034357.19"><vh>file compare options</vh>
<v t="ekr.20041119043902.4"><vh>@bool ignore_blank_lines = True</vh></v>
<v t="ekr.20041119043902.5"><vh>@bool ignore_first_line_of_file_1 = False</vh></v>
<v t="ekr.20041119043902.6"><vh>@bool ignore_first_line_of_file_2 = False</vh></v>
<v t="ekr.20041119043902.7"><vh>@bool ignore_interior_whitespace = False</vh></v>
<v t="ekr.20041119043902.8"><vh>@bool ignore_leading_whitespace = False</vh></v>
<v t="ekr.20041119043902.9"><vh>@bool ignore_sentinel_lines = False</vh></v>
</v>
<v t="ekr.20041119050105"><vh>output options</vh>
<v t="ekr.20041119043902.10"><vh>@int limit_count = 9</vh></v>
<v t="ekr.20041119043902.11"><vh>@bool make_whitespace_visible = False</vh></v>
<v t="ekr.20041119043902.12"><vh>@bool print_both_lines_for_matches = False</vh></v>
<v t="ekr.20041119043902.13"><vh>@bool print_matching_lines = False</vh></v>
<v t="ekr.20041119043902.14"><vh>@bool print_mismatching_lines = True</vh></v>
<v t="ekr.20041119043902.15"><vh>@bool print_trailing_lines = True</vh></v>
</v>
</v>
<v t="ekr.20060524151415"><vh>Debugger</vh>
<v t="ekr.20070115134125"><vh>@bool write_script_file = True</vh></v>
<v t="ekr.20070115134125.1"><vh>@@string script_file_path = ../test/scriptFile.py</vh></v>
<v t="ekr.20060524151415.1"><vh>@string debugger_kind = winpdb</vh></v>
<v t="ekr.20060521132401"><vh>@string debugger_path = None</vh></v>
</v>
<v t="ekr.20051126062243"><vh>Debugging</vh>
<v t="ekr.20060408090018"><vh>@bool added_setting = True</vh></v>
<v t="ekr.20060212101234"><vh>@bool gc_before_redraw = True</vh></v>
<v t="ekr.20060202113731"><vh>@bool show_tree_stats = False</vh></v>
<v t="ekr.20060114073238"><vh>@bool trace_bindings = False</vh></v>
<v t="ekr.20060616172614"><vh>@bool trace_bindings_verbose = False</vh></v>
<v t="ekr.20060425124142"><vh>@bool trace_color_parser = True</vh></v>
<v t="ekr.20060309022759"><vh>@bool trace_colorizer = False</vh></v>
<v t="ekr.20060204093736"><vh>@bool trace_doCommand = False</vh></v>
<v t="ekr.20060204102644"><vh>@bool trace_f.set_focus = False</vh></v>
<v t="ekr.20060207142012"><vh>@bool trace_focus = False</vh></v>
<v t="ekr.20051126062830"><vh>@bool trace_g.app.gui.set_focus = False</vh></v>
<v t="ekr.20060126075152"><vh>@bool trace_gc = False</vh></v>
<v t="ekr.20060212103826"><vh>@bool trace_gc_calls = False</vh></v>
<v t="ekr.20060126083715"><vh>@bool trace_gc_verbose = False</vh></v>
<v t="ekr.20070729101310"><vh>@bool trace_import = False</vh></v>
<v t="ekr.20060215054710"><vh>@bool trace_key_event= False</vh></v>
<v t="ekr.20051126062525"><vh>@bool trace_masterCommand = False</vh></v>
<v t="ekr.20060209045356"><vh>@bool trace_masterFocusHandler = False</vh></v>
<v t="ekr.20060131071612"><vh>@bool trace_masterKeyHandler = False</vh></v>
<v t="ekr.20060216091239"><vh>@bool trace_minibuffer = False</vh></v>
<v t="ekr.20060121102627"><vh>@bool trace_modes = False</vh></v>
<v t="ekr.20060306031258"><vh>@bool trace_onBodyChanged = False</vh></v>
<v t="ekr.20070417071249"><vh>@bool trace_plugins = False</vh></v>
<v t="ekr.20060210105437"><vh>@bool trace_select = False</vh></v>
<v t="ekr.20060216130607"><vh>@bool trace_status_line = False</vh></v>
<v t="ekr.20060202092911"><vh>@bool trace_tree = False</vh></v>
<v t="ekr.20060206155101"><vh>@bool trace_tree_alloc = False</vh></v>
<v t="ekr.20060206161839"><vh>@bool trace_tree_edit = False</vh></v>
<v t="ekr.20070503080312"><vh>@bool trace_tree_gc = False</vh></v>
<v t="ekr.20051126062243.1"><vh>@bool trace_tree_redraw = False</vh></v>
<v t="ekr.20060425125015"><vh>@bool verbose_trace_color_parser = False</vh></v>
<v t="ekr.20060323131801"><vh>@bool warn_about_missing_settings = False</vh></v>
<v t="ekr.20060521134125"><vh>@string debugger_default_target = None</vh></v>
<v t="ekr.20060521134125.1"><vh>@string debugger_force_target = None</vh></v>
<v t="ekr.20060114082205"><vh>@string trace_bindings_filter = </vh></v>
<v t="ekr.20060114083009"><vh>@string trace_bindings_pane_filter =</vh></v>
<v t="ekr.20060325071916"><vh>For unit tests</vh>
<v t="ekr.20060325071042"><vh>@ifplatform win32</vh>
<v t="ekr.20060325071042.1"><vh>@bool test_win32_setting = True</vh></v>
</v>
<v t="ekr.20060325071042.2"><vh>@ifplatform darwin</vh>
<v t="ekr.20060325071042.3"><vh>@bool test_darwin_setting = True</vh></v>
</v>
</v>
</v>
<v t="ekr.20061003173413"><vh>Files &amp; directories</vh>
<v t="ekr.20071110153046"><vh>@bool at_auto_warns_about_leading_whitespace = True</vh></v>
<v t="ekr.20061210091932"><vh>@bool chdir_to_relative_path = False</vh></v>
<v t="ekr.20090514111518.8379"><vh>@bool check_python_code_on_write = True</vh></v>
<v t="ekr.20041119041304"><vh>@bool create_nonexistent_directories = False</vh></v>
<v t="ekr.20041119034357.5"><vh>@bool read_only = False</vh></v>
<v t="ekr.20041119041304.1"><vh>@string relative_path_base_directory = .</vh></v>
<v t="ekr.20041119034357.12"><vh>External files</vh>
<v t="ekr.20070419103554"><vh>@bool force_newlines_in_at_nosent_bodies = True</vh></v>
<v t="ekr.20041119041747.4"><vh>@bool write_strips_blank_lines = True</vh></v>
<v t="ekr.20041119041747"><vh>@string output_newline = nl</vh></v>
<v t="ekr.20041119041747.1"><vh>@string trailing_body_newlines = one</vh></v>
<v t="ekr.20081216090156.5"><vh>@string underindent-escape-string = \\-</vh></v>
</v>
<v t="ekr.20041119034357.7"><vh>Leo files</vh>
<v t="ekr.20101009103953.8642"><vh>@bool put_expansion_bits_in_leo_files = True</vh></v>
<v t="ekr.20041119034357.8"><vh>@string output_initial_comment = None</vh></v>
<v t="ekr.20041119034357.9"><vh>@string stylesheet = ekr_test</vh></v>
<v t="ekr.20080921060401.3"><vh>@string default_leo_file = ~/.leo/workbook.leo</vh></v>
</v>
<v t="ekr.20110611092035.16474"><vh>Recent files</vh>
<v t="tbrown.20081003103821.1"><vh>@bool recent_files_group = False</vh></v>
<v t="tbrown.20081003103821.2"><vh>@bool recent_files_group_always = False</vh></v>
<v t="ekr.20061009190510"><vh>@bool write_recent_files_as_needed = True</vh></v>
</v>
<v t="ekr.20060730101451"><vh>Shadow files</vh>
<v t="ekr.20060730101451.3"><vh>@string shadow_prefix = x</vh></v>
<v t="ekr.20060730101451.5"><vh>@string shadow_subdir = .leo_shadow</vh></v>
</v>
</v>
<v t="ekr.20041119034357.20"><vh>Find/replace options</vh>
<v t="ekr.20131119143342.20107"><vh>@bool minibuffer_find_mode = False</vh></v>
<v t="ekr.20060204124608"><vh>@bool minibufferSearchesShowFindTab = True</vh></v>
<v t="ekr.20041120152900.2"><vh>@bool script_search = None</vh></v>
<v t="ekr.20060125104049"><vh>@bool show_only_find_tab_options = True</vh></v>
<v t="ekr.20041119050105.1"><vh>@string change_text = None</vh></v>
<v t="ekr.20041119050105.2"><vh>@string find_text = None</vh></v>
<v t="ekr.20131119143342.20108"><vh>Find panel defaults</vh>
<v t="ekr.20041119050105.3"><vh>Checkboxes in the Find panel</vh>
<v t="ekr.20041119050105.4"><vh>@bool batch = False</vh></v>
<v t="ekr.20041119050105.5"><vh>@bool ignore_case = True</vh></v>
<v t="ekr.20041119050105.6"><vh>@bool mark_changes = False</vh></v>
<v t="ekr.20041119050105.7"><vh>@bool mark_finds = False</vh></v>
<v t="ekr.20041119050105.9"><vh>@bool reverse = False</vh></v>
<v t="ekr.20041119050105.8"><vh>@bool pattern_match = False</vh></v>
<v t="ekr.20041120152657"><vh>@bool script_change = None</vh></v>
<v t="ekr.20041119050105.14"><vh>@bool search_body = True</vh></v>
<v t="ekr.20041119050105.15"><vh>@bool search_headline = True</vh></v>
<v t="ekr.20041119050105.10"><vh>@bool whole_word = False</vh></v>
<v t="ekr.20041119050105.11"><vh>@bool wrap = False</vh></v>
</v>
<v t="ekr.20110611092035.16476"><vh>Radio buttons in the Find panel</vh>
<v t="ekr.20041119050105.12"><vh>@bool node_only = False</vh></v>
<v t="ekr.20041119050105.16"><vh>@bool suboutline_only = False</vh></v>
</v>
</v>
</v>
<v t="ekr.20110611092035.16480"><vh>Import options</vh>
<v t="ekr.20101104191857.8345"><vh>@bool at_auto_separate_non_def_nodes = False</vh></v>
<v t="ekr.20070803082435"><vh>@bool full_import_checks = True</vh></v>
<v t="ekr.20080811105020.2"><vh>@bool suppress_import_parsing = False</vh></v>
<v t="ekr.20111029055127.16616"><vh>@data import_html_tags</vh></v>
<v t="ekr.20111029055127.16614"><vh>@data import_xml_tags</vh></v>
</v>
<v t="ekr.20060122105527.3"><vh>Keyboard and minibuffer options</vh>
<v t="ekr.20120205022040.15410"><vh>@bool enable_alt_ctrl_bindings = True</vh></v>
<v t="ekr.20131007055150.13034"><vh>@bool ignore_unbound_non_ascii_keys = False</vh></v>
<v t="ekr.20060122105527.8"><vh>@bool showHelpWhenEnteringModes = False</vh></v>
<v t="ekr.20120205022040.15411"><vh>@bool swap_mac_keys = False</vh></v>
<v t="ekr.20060627065953"><vh>@bool trace_bind_key_exceptions = True</vh></v>
<v t="ekr.20131112161153.4420"><vh>@bool vim-mode = False</vh></v>
<v t="ekr.20060926161207.1"><vh>@bool warn_about_redefined_shortcuts = True</vh></v>
<v t="ekr.20060926161207.2"><vh>@strings  [command,insert, overwrite] top_level_unbound_key_action = insert</vh></v>
</v>
<v t="ekr.20051007200824"><vh>Keyboard shortcuts</vh>
<v t="ekr.20051101160257"><vh>About keyboard shortcuts</vh>
<v t="ekr.20051007200824.1"><vh>About shortcut specifiers</vh></v>
<v t="ekr.20060116090646"><vh>Reference for function keys</vh></v>
</v>
<v t="ekr.20060117092249"><vh>About modes</vh></v>
<v t="ekr.20080514065934.1"><vh>About vim-like bindings</vh></v>
<v t="ekr.20060303075452"><vh>Commands for mouseless Leo</vh></v>
<v t="ekr.20060603215208"><vh>@keys EKR bindings</vh>
<v t="ekr.20080510121331.16"><vh>@@shortcuts  Vim plain keys</vh></v>
<v t="ekr.20080513095644.1"><vh>@mode quick-command :: quick command</vh></v>
<v t="ekr.20080512082834.1"><vh>@shortcuts Arrow keys and the &lt;return&gt; key</vh></v>
<v t="ekr.20080510072134.2"><vh>@shortcuts Changes</vh></v>
<v t="ekr.20060925060533.1"><vh>@shortcuts Cursor Moves</vh></v>
<v t="ville.20090701225947.3902"><vh>@shortcuts Default plugins</vh></v>
<v t="ekr.20090408091222.1"><vh>@shortcuts Duplicate bindings for Qt</vh></v>
<v t="ekr.20120305084218.11271"><vh>@shortcuts F-Keys</vh></v>
<v t="ekr.20060925061845"><vh>@shortcuts File commands</vh></v>
<v t="ekr.20060603215208.19"><vh>@shortcuts Find commands</vh></v>
<v t="ekr.20060925060533.2"><vh>@shortcuts Gui operations</vh></v>
<v t="ekr.20080204124255"><vh>@shortcuts IPython commands</vh></v>
<v t="ekr.20070613133747"><vh>@shortcuts Menu commands</vh></v>
<v t="ekr.20060603215208.20"><vh>@shortcuts Minibuffer commands</vh></v>
<v t="ekr.20060925061845.1"><vh>@shortcuts Other commands</vh></v>
<v t="ekr.20060925060533.3"><vh>@shortcuts Outline operations</vh></v>
<v t="ekr.20131003040744.17561"><vh>@shortcuts Plugin-related commands </vh></v>
<v t="ekr.20060925060533.4"><vh>@shortcuts Text operations</vh></v>
</v>
</v>
<v t="ekr.20110611092035.16491"><vh>Leo Directives</vh>
<v t="ekr.20041119034357.32"><vh>@int page_width = 80</vh></v>
<v t="ekr.20041119034357.31"><vh>@int tab_width = -4</vh></v>
</v>
<v t="ekr.20070925144552"><vh>Menus</vh>
<v t="ekr.20071010123015"><vh>@@menu 文件</vh>
<v t="ekr.20071010123015.1"><vh>@item new</vh></v>
<v t="ekr.20071010123223.1"><vh>@item open-outline</vh></v>
</v>
<v t="ekr.20070925144534"><vh>@menus</vh>
<v t="ekr.20070925144534.1"><vh>@menu &amp;File</vh>
<v t="ekr.20070925144534.2"><vh>@item *&amp;new</vh></v>
<v t="ekr.20070925144534.3"><vh>@item open-outline</vh></v>
<v t="ekr.20070925144534.4"><vh>@menu Open &amp;With</vh></v>
<v t="ekr.20070927173324"><vh>@menu Recent &amp;Files</vh></v>
<v t="ekr.20070925144534.5"><vh>@item -</vh></v>
<v t="ekr.20070925144534.6"><vh>@item close-window</vh></v>
<v t="ekr.20070925144534.7"><vh>@item save-file</vh></v>
<v t="ekr.20070925144534.8"><vh>@item save-file-as</vh></v>
<v t="ekr.20070925144534.9"><vh>@item save-file-as-unzipped</vh></v>
<v t="ekr.20070925144534.10"><vh>@item save-file-as-zipped</vh></v>
<v t="ekr.20070925144534.11"><vh>@item save-file-to</vh></v>
<v t="ekr.20070925144534.12"><vh>@item revert</vh></v>
<v t="ekr.20070927051742"><vh>@item -</vh></v>
<v t="ekr.20070925144534.13"><vh>@menu &amp;Read/Write</vh>
<v t="ekr.20071001120755"><vh>@item *check-derived-file</vh></v>
<v t="ekr.20071001120755.1"><vh>@item *check-leo-file</vh></v>
<v t="ekr.20071001121059"><vh>@item file-compare-leo-files</vh></v>
<v t="ekr.20071001120755.2"><vh>@item -</vh></v>
<v t="ekr.20070925144534.14"><vh>@item *read-outline-only</vh></v>
<v t="ekr.20071001120755.3"><vh>@item *read-file-into-node</vh></v>
<v t="ekr.20070925144534.17"><vh>@item read-at-auto-nodes</vh></v>
<v t="ekr.20070925144534.21"><vh>@item read-at-file-nodes</vh></v>
<v t="ekr.20080801104153.2"><vh>@item read-at-shadow-nodes</vh></v>
<v t="ekr.20071001123216"><vh>@item -</vh></v>
<v t="ekr.20070925144534.15"><vh>@item *write-outline-only</vh></v>
<v t="ekr.20071001120755.4"><vh>@item *write-file-from-node</vh></v>
<v t="ekr.20070925144534.18"><vh>@item write-at-auto-nodes</vh></v>
<v t="ekr.20070925144534.24"><vh>@item write-at-file-nodes</vh></v>
<v t="ekr.20080801104153.3"><vh>@item write-at-shadow-nodes</vh></v>
<v t="ekr.20070925144534.16"><vh>@item -</vh></v>
<v t="ekr.20070925144534.19"><vh>@item write-dirty-at-auto-nodes</vh></v>
<v t="ekr.20070925144534.22"><vh>@item write-dirty-at-file-nodes</vh></v>
<v t="ekr.20080801104153.4"><vh>@item write-dirty-at-shadow-nodes</vh></v>
<v t="ekr.20070925144534.23"><vh>@item write-missing-at-file-nodes</vh></v>
</v>
<v t="ekr.20110530124245.18246"><vh>@item import-file</vh></v>
<v t="ekr.20070925144534.40"><vh>@menu &amp;Export...</vh>
<v t="ekr.20070925144534.41"><vh>@item export-headlines</vh></v>
<v t="ekr.20070925144534.44"><vh>@item flatten-outline</vh></v>
<v t="ekr.20070925144534.42"><vh>@item outline-to-cweb</vh></v>
<v t="ekr.20070925144534.43"><vh>@item outline-to-noweb</vh></v>
<v t="ekr.20070925144534.45"><vh>@item remove-sentinels</vh></v>
<v t="ekr.20070925144534.46"><vh>@item weave</vh></v>
</v>
<v t="ekr.20070927051856"><vh>@item -</vh></v>
<v t="ekr.20070925144534.47"><vh>@item exit-leo</vh></v>
</v>
<v t="ekr.20070925144534.48"><vh>@menu &amp;Edit</vh>
<v t="ekr.20070925144534.49"><vh>@item undo</vh></v>
<v t="ekr.20070925144534.50"><vh>@item redo</vh></v>
<v t="ekr.20070925144534.51"><vh>@item -</vh></v>
<v t="ekr.20070925144534.52"><vh>@item cut-text</vh></v>
<v t="ekr.20070925144534.53"><vh>@item copy-text</vh></v>
<v t="ekr.20070925144534.54"><vh>@item paste-text</vh></v>
<v t="ekr.20070925144534.55"><vh>@item backward-delete-char</vh></v>
<v t="ekr.20070925144534.56"><vh>@item select-all</vh></v>
<v t="ekr.20070925144534.57"><vh>@item -</vh></v>
<v t="ekr.20070925144534.58"><vh>@menu Edit &amp;Body</vh>
<v t="ekr.20070925144534.60"><vh>@item *extract-&amp;names</vh></v>
<v t="ekr.20070925144534.61"><vh>@item *&amp;extract</vh></v>
<v t="ekr.20070925144534.62"><vh>@item -</vh></v>
<v t="ekr.20070925144534.63"><vh>@item *convert-all-b&amp;lanks</vh></v>
<v t="ekr.20070925144534.64"><vh>@item *convert-all-t&amp;abs</vh></v>
<v t="ekr.20070925144534.65"><vh>@item *convert-&amp;blanks</vh></v>
<v t="ekr.20070925144534.66"><vh>@item *convert-&amp;tabs</vh></v>
<v t="ekr.20070925144534.67"><vh>@item *insert-body-&amp;time</vh></v>
<v t="ekr.20070925144534.68"><vh>@item *&amp;reformat-paragraph</vh></v>
<v t="ekr.20070925144534.69"><vh>@item -</vh></v>
<v t="ekr.20070925144534.70"><vh>@item *&amp;indent-region</vh></v>
<v t="ekr.20070925144534.71"><vh>@item *&amp;unindent-region</vh></v>
<v t="ekr.20070925144534.72"><vh>@item *&amp;match-brackets</vh></v>
<v t="ekr.20070925144534.73"><vh>@item *&amp;add-comments</vh></v>
<v t="ekr.20070925144534.74"><vh>@item *&amp;delete-comments</vh></v>
</v>
<v t="ekr.20070925144534.75"><vh>@menu Edit &amp;Headline</vh>
<v t="ekr.20070925144534.76"><vh>@item *edit-&amp;headline</vh></v>
<v t="ekr.20070925144534.77"><vh>@item *&amp;end-edit-headline</vh></v>
<v t="ekr.20070925144534.78"><vh>@item *&amp;abort-edit-headline</vh></v>
<v t="ekr.20070925144534.79"><vh>@item *insert-headline-&amp;time</vh></v>
<v t="ekr.20070925144534.80"><vh>@item *toggle-&amp;angle-brackets</vh></v>
</v>
<v t="ekr.20070925144534.105"><vh>@item *&amp;goto-global-line</vh></v>
<v t="ekr.20070925144534.106"><vh>@item *&amp;execute-script</vh></v>
<v t="ekr.20070925144534.107"><vh>@item toggle-invisibles</vh></v>
<v t="ekr.20070925144534.108"><vh>@item open-leoSettings-leo</vh></v>
</v>
<v t="ekr.20131117052950.18283"><vh>@menu Search</vh>
<v t="ekr.20131117052950.18285"><vh>@item *help-for-find-commands</vh></v>
<v t="ekr.20131119060731.22451"><vh>@item *start-search</vh></v>
<v t="ekr.20070925144534.83"><vh>@@@item find-tab-hide</vh></v>
<v t="ekr.20131119060731.22454"><vh>@item -</vh></v>
<v t="ekr.20070925144534.86"><vh>@item *find-&amp;next</vh></v>
<v t="ekr.20070925144534.87"><vh>@item *find-&amp;prev</vh></v>
<v t="ekr.20130807090137.20911"><vh>@item *&amp;replace</vh></v>
<v t="ekr.20130807090137.20912"><vh>@item *replace-&amp;then-find</vh></v>
<v t="ekr.20131117053425.19894"><vh>@item -</vh></v>
<v t="ekr.20070925144534.89"><vh>@item *find-&amp;all</vh></v>
<v t="ekr.20070925144534.90"><vh>@item *clone-fi&amp;nd-all</vh></v>
<v t="ekr.20070925144534.91"><vh>@item *replace-a&amp;ll</vh></v>
<v t="ekr.20131121211048.17576"><vh>@item -</vh></v>
<v t="ekr.20131121211048.17566"><vh>@item toggle-find-ignore-case-option</vh></v>
<v t="ekr.20131121211048.17568"><vh>@item toggle-find-mark-changes-option</vh></v>
<v t="ekr.20131121211048.17569"><vh>@item toggle-find-mark-finds-option</vh></v>
<v t="ekr.20131121211048.17570"><vh>@item toggle-find-regex-option</vh></v>
<v t="ekr.20131121211048.17571"><vh>@item toggle-find-word-option</vh></v>
<v t="ekr.20131121211048.17572"><vh>@item toggle-find-wrap-around-option</vh></v>
<v t="ekr.20070925144534.92"><vh>@item -</vh></v>
<v t="ekr.20131121211048.17573"><vh>@item set-find-everywhere</vh></v>
<v t="ekr.20131121211048.17567"><vh>@item set-find-node-only</vh></v>
<v t="ekr.20131121211048.17575"><vh>@item set-find-suboutline-only</vh></v>
<v t="ekr.20131121211048.17577"><vh>@item -</vh></v>
<v t="ekr.20070925144534.93"><vh>@item *&amp;find-character</vh></v>
<v t="ekr.20070925144534.94"><vh>@item find-character-extend-&amp;selection</vh></v>
<v t="ekr.20070925144534.95"><vh>@item backward-find-character</vh></v>
<v t="ekr.20070925144534.96"><vh>@item backward-find-character-&amp;extend-selection</vh></v>
<v t="ekr.20070925144534.97"><vh>@item -</vh></v>
<v t="ekr.20070925144534.98"><vh>@item *&amp;isearch-forward</vh></v>
<v t="ekr.20070925144534.99"><vh>@item *isea&amp;rch-backward</vh></v>
<v t="ekr.20070925144534.100"><vh>@item *isearch-forward-rege&amp;xp</vh></v>
<v t="ekr.20070925144534.101"><vh>@item *isearch-backward-regex&amp;p</vh></v>
<v t="ekr.20070925144534.102"><vh>@item -</vh></v>
<v t="ekr.20070925144534.103"><vh>@@item *&amp;query-replace</vh></v>
<v t="ekr.20070925144534.104"><vh>@@item *q&amp;uery-replace-regex</vh></v>
<v t="ekr.20131121211048.17574"><vh>Proper names</vh></v>
</v>
<v t="ekr.20070925144534.109"><vh>@menu &amp;Outline</vh>
<v t="ekr.20070925144534.110"><vh>@item *c&amp;ut-node</vh></v>
<v t="ekr.20070925144534.111"><vh>@item *c&amp;opy-node</vh></v>
<v t="ekr.20070925144534.112"><vh>@item *&amp;paste-node</vh></v>
<v t="ekr.20070925144534.113"><vh>@item paste-retaining-clones</vh></v>
<v t="ekr.20070925144534.114"><vh>@item *&amp;delete-node</vh></v>
<v t="ekr.20070925144534.115"><vh>@item -</vh></v>
<v t="ekr.20070925144534.116"><vh>@item *&amp;insert-node</vh></v>
<v t="ekr.20071005173455"><vh>@item *insert-child</vh></v>
<v t="ekr.20070925144534.117"><vh>@item *&amp;clone-node</vh></v>
<v t="ekr.20070925144534.118"><vh>@item *sort-childre&amp;n</vh></v>
<v t="ekr.20070925144534.119"><vh>@item *&amp;sort-siblings</vh></v>
<v t="ekr.20070925144534.120"><vh>@item -</vh></v>
<v t="ekr.20070925144534.121"><vh>@item *&amp;hoist</vh></v>
<v t="ekr.20070925144534.122"><vh>@item de-hoist</vh></v>
<v t="ekr.20070925144534.123"><vh>@item -</vh></v>
<v t="ekr.20070925144534.124"><vh>@menu Chec&amp;k</vh>
<v t="ekr.20070925144534.125"><vh>@item *check-&amp;outline</vh></v>
<v t="ekr.20070925144534.126"><vh>@item *&amp;dump-outline</vh></v>
<v t="ekr.20070925144534.127"><vh>@@item -</vh></v>
<v t="ekr.20070925144534.128"><vh>@@item *check-&amp;all-python-code</vh></v>
<v t="ekr.20070925144534.129"><vh>@@item *&amp;check-python-code</vh></v>
</v>
<v t="ekr.20070925144534.130"><vh>@menu E&amp;xpand/Contract</vh>
<v t="ekr.20080819075811.5"><vh>Accel: a,c,d,e,n,o,p,l,r,t,x</vh></v>
<v t="ekr.20070925144534.131"><vh>@item *&amp;contract-all</vh></v>
<v t="ekr.20080819075811.6"><vh>@item *contract-all-o&amp;ther-nodes</vh></v>
<v t="ekr.20070925144534.132"><vh>@item *contract-&amp;node</vh></v>
<v t="ekr.20070925144534.133"><vh>@item *contract-&amp;parent</vh></v>
<v t="ekr.20070925144534.134"><vh>@item *contract-or-go-&amp;left</vh></v>
<v t="ekr.20070925144534.135"><vh>@item -</vh></v>
<v t="ekr.20070925144534.136"><vh>@item *expand-p&amp;rev-level</vh></v>
<v t="ekr.20070925144534.137"><vh>@item *expand-n&amp;ext-level</vh></v>
<v t="ekr.20070925144534.138"><vh>@item *e&amp;xpand-and-go-right</vh></v>
<v t="ekr.20070925144534.139"><vh>@item *expan&amp;d-or-go-right</vh></v>
<v t="ekr.20070925144534.140"><vh>@item -</vh></v>
<v t="ekr.20070925144534.141"><vh>@item *expand-to-level-&amp;1</vh></v>
<v t="ekr.20070925144534.142"><vh>@item *expand-to-level-&amp;2</vh></v>
<v t="ekr.20070925144534.143"><vh>@item *expand-to-level-&amp;3</vh></v>
<v t="ekr.20070925144534.144"><vh>@item *expand-to-level-&amp;4</vh></v>
<v t="ekr.20070925144534.145"><vh>@item *expand-to-level-&amp;5</vh></v>
<v t="ekr.20070925144534.146"><vh>@item *expand-to-level-&amp;6</vh></v>
<v t="ekr.20070925144534.147"><vh>@item *expand-to-level-&amp;7</vh></v>
<v t="ekr.20070925144534.148"><vh>@item *expand-to-level-&amp;8</vh></v>
<v t="ekr.20070925144534.149"><vh>@item -</vh></v>
<v t="ekr.20070925144534.150"><vh>@item *expand-&amp;all</vh></v>
<v t="ekr.20070925144534.151"><vh>@item *expand-n&amp;ode</vh></v>
</v>
<v t="ekr.20070925144534.152"><vh>@menu &amp;Move</vh>
<v t="ekr.20070925144534.153"><vh>@item move-outline-down</vh></v>
<v t="ekr.20070925144534.154"><vh>@item move-outline-left</vh></v>
<v t="ekr.20070925144534.155"><vh>@item move-outline-right</vh></v>
<v t="ekr.20070925144534.156"><vh>@item move-outline-up</vh></v>
<v t="ekr.20070925144534.157"><vh>@item -</vh></v>
<v t="ekr.20070925144534.158"><vh>@item *&amp;promote</vh></v>
<v t="ekr.20070925144534.159"><vh>@item *&amp;demote</vh></v>
</v>
<v t="ekr.20070925144534.160"><vh>@menu M&amp;ark</vh>
<v t="ekr.20090905151712.8546"><vh>@item *clone-marked-nodes</vh></v>
<v t="ekr.20070925144534.161"><vh>@item *&amp;mark</vh></v>
<v t="ekr.20070925144534.162"><vh>@item *mark-&amp;subheads</vh></v>
<v t="ekr.20070925144534.163"><vh>@item *mark-changed-&amp;items</vh></v>
<v t="ekr.20070925144534.166"><vh>@item *&amp;unmark-all</vh></v>
</v>
<v t="ekr.20070925144534.167"><vh>@menu &amp;Go To</vh>
<v t="ekr.20071213190345"><vh>@item find-next-clone</vh></v>
<v t="ekr.20070925144534.168"><vh>@item goto-first-node</vh></v>
<v t="ekr.20070925144534.169"><vh>@item goto-first-visible-node</vh></v>
<v t="ekr.20070925144534.170"><vh>@item goto-first-sibling</vh></v>
<v t="ekr.20070925144534.171"><vh>@item -</vh></v>
<v t="ekr.20070925144534.172"><vh>@item goto-next-changed</vh></v>
<v t="ekr.20070925144534.173"><vh>@item goto-next-clone</vh></v>
<v t="ekr.20070925144534.174"><vh>@item goto-next-marked</vh></v>
<v t="ekr.20070925144534.175"><vh>@item goto-next-node</vh></v>
<v t="ekr.20070925144534.176"><vh>@item goto-next-sibling</vh></v>
<v t="ekr.20070925144534.177"><vh>@item goto-next-visible</vh></v>
<v t="ekr.20070925144534.178"><vh>@item go-forward</vh></v>
<v t="ekr.20070925144534.179"><vh>@item -</vh></v>
<v t="ekr.20070925144534.180"><vh>@item goto-parent</vh></v>
<v t="ekr.20070925144534.181"><vh>@item -</vh></v>
<v t="ekr.20070925144534.182"><vh>@item goto-prev-node</vh></v>
<v t="ekr.20070925144534.183"><vh>@item goto-prev-sibling</vh></v>
<v t="ekr.20070925144534.184"><vh>@item goto-prev-visible</vh></v>
<v t="ekr.20070925144534.185"><vh>@item go-back</vh></v>
<v t="ekr.20070925144534.186"><vh>@item -</vh></v>
<v t="ekr.20070925144534.187"><vh>@item goto-last-node</vh></v>
<v t="ekr.20070925144534.188"><vh>@item goto-last-sibling</vh></v>
<v t="ekr.20070925144534.189"><vh>@item goto-last-visible-node</vh></v>
</v>
</v>
<v t="ekr.20070925144534.190"><vh>@menu &amp;Plugins</vh>
<v t="ekr.20090203134354.2"><vh>@@item xyzzy</vh></v>
</v>
<v t="ekr.20070925144534.191"><vh>@menu &amp;Cmds</vh>
<v t="ekr.20070925144534.192"><vh>@menu &amp;Abbrev</vh>
<v t="ekr.20070925144534.193"><vh>@item &amp;toggle-abbrev-mode</vh></v>
<v t="ekr.20070925144534.194"><vh>@item -</vh></v>
<v t="ekr.20070925144534.195"><vh>@item abbrev-&amp;list</vh></v>
<v t="ekr.20070925144534.196"><vh>@item abbrev-&amp;read</vh></v>
<v t="ekr.20070925144534.197"><vh>@item abbrev-&amp;write</vh></v>
<v t="ekr.20070925144534.198"><vh>@item -</vh></v>
<v t="ekr.20070925144534.199"><vh>@item abbrev-&amp;add-global</vh></v>
<v t="ekr.20070925144534.200"><vh>@item abbrev-&amp;inverse-add-global</vh></v>
<v t="ekr.20070925144534.201"><vh>@item abbrev-&amp;kill-all</vh></v>
</v>
<v t="ekr.20070925144534.204"><vh>@menu &amp;Body Editors</vh>
<v t="ekr.20070925144534.205"><vh>@item &amp;add-editor</vh></v>
<v t="ekr.20070925144534.206"><vh>@item &amp;cycle-editor-focus</vh></v>
<v t="ekr.20070925144534.207"><vh>@item &amp;delete-editor</vh></v>
</v>
<v t="ekr.20070925144534.208"><vh>@menu Buffers</vh>
<v t="ekr.20070925144534.209"><vh>@item buffer-&amp;append-to</vh></v>
<v t="ekr.20070925144534.210"><vh>@item buffer-&amp;kill</vh></v>
<v t="ekr.20070925144534.213"><vh>@item buffer-&amp;prepend-to</vh></v>
<v t="ekr.20070925144534.215"><vh>@item buffer-&amp;switch-to</vh></v>
<v t="ekr.20110607054506.16793"><vh>@item -</vh></v>
<v t="ekr.20070925144534.211"><vh>@item &amp;buffers-list</vh></v>
<v t="ekr.20070925144534.212"><vh>@item buffers-&amp;list-alphabetically</vh></v>
</v>
<v t="ekr.20070925144534.216"><vh>@menu &amp;Chapters</vh>
<v t="ekr.20070925144534.217"><vh>@item chapter-&amp;clone-node-to</vh></v>
<v t="ekr.20070925144534.218"><vh>@item chapter-c&amp;opy-node-to</vh></v>
<v t="ekr.20070925144534.219"><vh>@item chapter-c&amp;reate</vh></v>
<v t="ekr.20070925144534.220"><vh>@item chapter-&amp;move-node-to</vh></v>
<v t="ekr.20070925144534.221"><vh>@item chapter-&amp;remove</vh></v>
<v t="ekr.20070925144534.222"><vh>@item chapter-&amp;select</vh></v>
</v>
<v t="ekr.20070925144534.223"><vh>@menu Cursor/Selection</vh>
<v t="ekr.20070925144534.224"><vh>@menu Cursor &amp;Back</vh>
<v t="ekr.20070925144534.225"><vh>@item back-&amp;char</vh></v>
<v t="ekr.20070925144534.226"><vh>@item back-&amp;paragraph</vh></v>
<v t="ekr.20070925144534.227"><vh>@item back-&amp;sentence</vh></v>
<v t="ekr.20070925144534.228"><vh>@item back-&amp;word</vh></v>
<v t="ekr.20070925144534.229"><vh>@item -</vh></v>
<v t="ekr.20070925144534.230"><vh>@item beginning-of-&amp;buffer</vh></v>
<v t="ekr.20070925144534.231"><vh>@item beginning-of-&amp;line</vh></v>
<v t="ekr.20070925144534.232"><vh>@item -</vh></v>
<v t="ekr.20070925144534.233"><vh>@item pre&amp;vious-line</vh></v>
</v>
<v t="ekr.20070925144534.234"><vh>@menu Cursor Back &amp;Extend Selection</vh>
<v t="ekr.20070925144534.235"><vh>@item back-&amp;char-extend-selection</vh></v>
<v t="ekr.20070925144534.236"><vh>@item back-&amp;paragraph-extend-selection</vh></v>
<v t="ekr.20070925144534.237"><vh>@item back-&amp;sentence-extend-selection</vh></v>
<v t="ekr.20070925144534.238"><vh>@item back-&amp;word-extend-selection</vh></v>
<v t="ekr.20070925144534.239"><vh>@item -</vh></v>
<v t="ekr.20070925144534.240"><vh>@item beginning-of-&amp;buffer-extend-selection</vh></v>
<v t="ekr.20070925144534.241"><vh>@item beginning-of-&amp;line-extend-selection</vh></v>
<v t="ekr.20070925144534.242"><vh>@item -</vh></v>
<v t="ekr.20070925144534.243"><vh>@item pre&amp;vious-line-extend-selection</vh></v>
</v>
<v t="ekr.20070925144534.244"><vh>@menu Cursor Back Extend &amp;to</vh>
<v t="ekr.20070925144534.245"><vh>@item extend-to-&amp;line</vh></v>
<v t="ekr.20070925144534.246"><vh>@item extend-to-&amp;paragraph</vh></v>
<v t="ekr.20070925144534.247"><vh>@item extend-to-&amp;sentence</vh></v>
<v t="ekr.20070925144534.248"><vh>@item extend-to-&amp;word</vh></v>
</v>
<v t="ekr.20070925144534.249"><vh>@menu Cursor &amp;Forward</vh>
<v t="ekr.20070925144534.250"><vh>@item end-of-&amp;buffer</vh></v>
<v t="ekr.20070925144534.251"><vh>@item end-of-&amp;line</vh></v>
<v t="ekr.20070925144534.252"><vh>@item -</vh></v>
<v t="ekr.20070925144534.253"><vh>@item forward-&amp;char</vh></v>
<v t="ekr.20070925144534.254"><vh>@item forward-&amp;paragraph</vh></v>
<v t="ekr.20070925144534.255"><vh>@item forward-&amp;sentence</vh></v>
<v t="ekr.20070925144534.256"><vh>@item forward-&amp;end-word</vh></v>
<v t="ekr.20070925144534.257"><vh>@item forward-&amp;word</vh></v>
<v t="ekr.20070925144534.258"><vh>@item -</vh></v>
<v t="ekr.20070925144534.259"><vh>@item &amp;next-line</vh></v>
</v>
<v t="ekr.20070925144534.260"><vh>@menu Cursor Forward E&amp;xtend Selection</vh>
<v t="ekr.20070925144534.261"><vh>@item end-of-&amp;buffer-extend-selection</vh></v>
<v t="ekr.20070925144534.262"><vh>@item end-of-&amp;line-extend-selection</vh></v>
<v t="ekr.20070925144534.263"><vh>@item -</vh></v>
<v t="ekr.20070925144534.264"><vh>@item forward-&amp;char-extend-selection</vh></v>
<v t="ekr.20070925144534.265"><vh>@item forward-&amp;paragraph-extend-selection</vh></v>
<v t="ekr.20070925144534.266"><vh>@item forward-&amp;sentence-extend-selection</vh></v>
<v t="ekr.20070925144534.267"><vh>@item forward-&amp;end-word-extend-selection</vh></v>
<v t="ekr.20070925144534.268"><vh>@item forward-&amp;word-extend-selection</vh></v>
<v t="ekr.20070925144534.269"><vh>@item -</vh></v>
<v t="ekr.20070925144534.270"><vh>@item &amp;next-line-extend-selection</vh></v>
</v>
</v>
<v t="ekr.20110607054506.16794"><vh>@menu &amp;Debugging</vh>
<v t="ekr.20110607054506.16795"><vh>@item &amp;debug</vh></v>
<v t="ekr.20110607054506.16796"><vh>@item &amp;pdb</vh></v>
<v t="ekr.20110607054506.16797"><vh>@item -</vh></v>
<v t="ekr.20110607054506.16798"><vh>@item gc-&amp;collect-garbage</vh></v>
<v t="ekr.20110607054506.16799"><vh>@item gc-dump-&amp;all-objects</vh></v>
<v t="ekr.20110607054506.16800"><vh>@item gc-dump-&amp;new-objects</vh></v>
<v t="ekr.20110607054506.16801"><vh>@item gc-dump-objects-&amp;verbose</vh></v>
<v t="ekr.20110607054506.16802"><vh>@item gc-print-&amp;summary</vh></v>
<v t="ekr.20110607054506.16803"><vh>@item gc-&amp;trace-disable</vh></v>
<v t="ekr.20110607054506.16804"><vh>@item gc-&amp;trace-enable</vh></v>
</v>
<v t="ekr.20110607054506.16805"><vh>@menu &amp;Files and Directories</vh>
<v t="ekr.20110607054506.16806"><vh>@item directory-&amp;make</vh></v>
<v t="ekr.20110607054506.16807"><vh>@item directory-&amp;remove</vh></v>
<v t="ekr.20110607054506.16808"><vh>@item -</vh></v>
<v t="ekr.20110607054506.16809"><vh>@item file-&amp;compare-leo-files</vh></v>
<v t="ekr.20110607054506.16810"><vh>@item file-&amp;delete</vh></v>
<v t="ekr.20110607054506.16811"><vh>@item file-diff-&amp;files</vh></v>
<v t="ekr.20110607054506.16812"><vh>@item file-&amp;insert</vh></v>
<v t="ekr.20110607054506.16813"><vh>@item file-&amp;open-by-name</vh></v>
<v t="ekr.20110607054506.16814"><vh>@item file-&amp;save</vh></v>
</v>
<v t="ekr.20070925144534.271"><vh>@menu &amp;Focus</vh>
<v t="ekr.20070925144534.272"><vh>@item &amp;cycle-all-focus</vh></v>
<v t="ekr.20070925144534.273"><vh>@item focus-to-&amp;body</vh></v>
<v t="ekr.20070925144534.274"><vh>@item focus-to-&amp;log</vh></v>
<v t="ekr.20070925144534.275"><vh>@item focus-to-&amp;minibuffer</vh></v>
<v t="ekr.20070925144534.276"><vh>@item focus-to-&amp;tree</vh></v>
</v>
<v t="ekr.20110607054506.16815"><vh>@menu &amp;Help commands</vh>
<v t="ekr.20130412173637.11774"><vh>@item help</vh></v>
<v t="ekr.20110607054506.16816"><vh>@item help-for-abbreviations</vh></v>
<v t="ekr.20110607054506.16817"><vh>@item help-for-autocompletion</vh></v>
<v t="ekr.20110607054506.16818"><vh>@item help-for-bindings</vh></v>
<v t="ekr.20110607054506.16821"><vh>@item help-for-command</vh></v>
<v t="ekr.20110607054506.16819"><vh>@item help-for-find-commands</vh></v>
<v t="ekr.20110607054506.16822"><vh>@item help-for-minibuffer</vh></v>
<v t="ekr.20110607054506.16823"><vh>@item help-for-python</vh></v>
<v t="ekr.20110607054506.16824"><vh>@item -</vh></v>
<v t="ekr.20110607054506.16826"><vh>@item print-bindings</vh></v>
<v t="ekr.20110607054506.16827"><vh>@item print-commands</vh></v>
<v t="ekr.20110607054506.16828"><vh>@item print-plugins-info</vh></v>
<v t="ekr.20110607054506.16825"><vh>@item print-settings</vh></v>
</v>
<v t="ekr.20071114081712"><vh>@menu &amp;Icons</vh>
<v t="ekr.20071114084709"><vh>@item delete-&amp;first-icon</vh></v>
<v t="ekr.20071114084709.1"><vh>@item delete-&amp;last-icon</vh></v>
<v t="ekr.20071114081712.3"><vh>@item delete-&amp;node-icons</vh></v>
<v t="ekr.20071114081712.4"><vh>@item -</vh></v>
<v t="ekr.20071114081712.5"><vh>@item &amp;insert-icon</vh></v>
</v>
<v t="ekr.20070925144534.277"><vh>@menu &amp;Macros</vh>
<v t="ekr.20070925144534.284"><vh>@item macro-start-&amp;recording</vh></v>
<v t="ekr.20110607054506.16830"><vh>@item macro-&amp;end-recording</vh></v>
<v t="ekr.20070925144534.282"><vh>@item macro-&amp;name-last</vh></v>
<v t="ekr.20110607054506.16831"><vh>@item -</vh></v>
<v t="ekr.20070925144534.279"><vh>@item macro-&amp;call</vh></v>
<v t="ekr.20070925144534.278"><vh>@item macro-call-&amp;last</vh></v>
<v t="ekr.20110607054506.16832"><vh>@item -</vh></v>
<v t="ekr.20070925144534.280"><vh>@item macro-&amp;load-&amp;all</vh></v>
<v t="ekr.20070925144534.281"><vh>@item macro-&amp;print-all</vh></v>
<v t="ekr.20070925144534.283"><vh>@item macro-&amp;save-all</vh></v>
</v>
<v t="ekr.20070925144534.286"><vh>@menu Minibuffer</vh>
<v t="ekr.20070925144534.287"><vh>@item &amp;full-command</vh></v>
<v t="ekr.20070925144534.288"><vh>@item keyboard-&amp;quit</vh></v>
<v t="ekr.20070925144534.289"><vh>@item &amp;repeat-complex-command</vh></v>
<v t="ekr.20070925144534.290"><vh>@item &amp;view-lossage</vh></v>
<v t="ekr.20070925144534.294"><vh>@item -</vh></v>
<v t="ekr.20070925144534.295"><vh>@item &amp;help-for-minibuffer</vh></v>
</v>
<v t="ekr.20070925144534.296"><vh>@menu &amp;Pickers</vh>
<v t="ekr.20070925144534.297"><vh>@item show-&amp;colors</vh></v>
<v t="ekr.20070925144534.298"><vh>@item show-find-&amp;options</vh></v>
<v t="ekr.20070925144534.299"><vh>@item show-&amp;fonts</vh></v>
</v>
<v t="ekr.20070925144534.300"><vh>@menu &amp;Rectangles</vh>
<v t="ekr.20070925144534.301"><vh>@item rectangle-&amp;clear</vh></v>
<v t="ekr.20070925144534.302"><vh>@item rectangle-&amp;close</vh></v>
<v t="ekr.20070925144534.303"><vh>@item rectangle-&amp;delete</vh></v>
<v t="ekr.20070925144534.304"><vh>@item rectangle-&amp;kill</vh></v>
<v t="ekr.20070925144534.305"><vh>@item rectangle-&amp;open</vh></v>
<v t="ekr.20070925144534.306"><vh>@item rectangle-&amp;string</vh></v>
<v t="ekr.20070925144534.307"><vh>@item rectangle-&amp;yank</vh></v>
</v>
<v t="ekr.20070925144534.308"><vh>@menu Registers</vh>
<v t="ekr.20070925144534.309"><vh>@item register-&amp;append-to</vh></v>
<v t="ekr.20070925144534.310"><vh>@item register-&amp;copy-to</vh></v>
<v t="ekr.20110607054506.16833"><vh>@item register-copy-&amp;rectangle-to</vh></v>
<v t="ekr.20070925144534.312"><vh>@item register-&amp;increment</vh></v>
<v t="ekr.20070925144534.313"><vh>@item register-&amp;insert</vh></v>
<v t="ekr.20070925144534.314"><vh>@item register-&amp;jump-to</vh></v>
<v t="ekr.20070925144534.315"><vh>@item register-&amp;point-to</vh></v>
<v t="ekr.20070925144534.316"><vh>@item register-&amp;prepend-to</vh></v>
<v t="ekr.20070925144534.317"><vh>@item register-&amp;view</vh></v>
</v>
<v t="ekr.20110406082808.18152"><vh>@menu Rst commands</vh>
<v t="ekr.20110406082808.18154"><vh>@item &amp;code-to-rst</vh></v>
<v t="ekr.20110406082808.18153"><vh>@item &amp;rst3</vh></v>
</v>
<v t="ekr.20070925144534.318"><vh>@menu Run Script/Tests</vh>
<v t="ekr.20070925144534.319"><vh>@item &amp;execute-script</vh></v>
<v t="ekr.20110607054506.16837"><vh>@item -</vh></v>
<v t="ekr.20110607054506.16834"><vh>@item run-&amp;all-unit-tests-locally</vh></v>
<v t="ekr.20110607054506.16835"><vh>@item run-&amp;marked-unit-tests-locally</vh></v>
<v t="ekr.20110607054506.16836"><vh>@item run-&amp;selected-unit-tests-locally</vh></v>
<v t="ekr.20110607054506.16838"><vh>@item -</vh></v>
<v t="ekr.20111031083623.13745"><vh>@item run-&amp;all-unit-tests-externally</vh></v>
<v t="ekr.20111031083623.13744"><vh>@item run-&amp;marked-unit-tests-externally</vh></v>
<v t="ekr.20070925144534.320"><vh>@item run-&amp;selected-unit-tests-externally</vh></v>
</v>
<v t="ekr.20070925144534.321"><vh>@menu &amp;Scrolling</vh>
<v t="ekr.20070925144534.322"><vh>@item scroll-outline-down-&amp;line</vh></v>
<v t="ekr.20070925144534.323"><vh>@item scroll-outline-down-&amp;page</vh></v>
<v t="ekr.20070925144534.324"><vh>@item scroll-outline-le&amp;ft</vh></v>
<v t="ekr.20070925144534.325"><vh>@item scroll-outline-&amp;right</vh></v>
<v t="ekr.20070925144534.326"><vh>@item s&amp;croll-outline-up-line</vh></v>
<v t="ekr.20070925144534.327"><vh>@item scr&amp;oll-outline-up-page</vh></v>
<v t="ekr.20070925144534.328"><vh>@item -</vh></v>
<v t="ekr.20090531084727.10893"><vh>@item scroll-down-half-page</vh></v>
<v t="ekr.20090531084727.10895"><vh>@item scroll-down-line</vh></v>
<v t="ekr.20070925144534.329"><vh>@item scroll-&amp;down-page</vh></v>
<v t="ekr.20090531084727.10894"><vh>@item scroll-up-half-page</vh></v>
<v t="ekr.20090531084727.10896"><vh>@item scroll-up-line</vh></v>
<v t="ekr.20070925144534.330"><vh>@item scroll-&amp;up-page</vh></v>
</v>
<v t="ekr.20111010200020.15684"><vh>@menu Shell</vh>
<v t="ekr.20111010200020.15685"><vh>@item shell-command</vh></v>
<v t="ekr.20111010200020.15686"><vh>@item shell-command-on-region</vh></v>
</v>
<v t="ekr.20070925144534.334"><vh>@menu Spell C&amp;heck</vh>
<v t="ekr.20070925144534.335"><vh>@item &amp;open-spell-tab</vh></v>
<v t="ekr.20070925144534.336"><vh>@item spell-&amp;change</vh></v>
<v t="ekr.20070925144534.337"><vh>@item spell-change-&amp;then-find</vh></v>
<v t="ekr.20070925144534.338"><vh>@item spell-&amp;find</vh></v>
<v t="ekr.20070925144534.339"><vh>@item spell-&amp;ignore</vh></v>
</v>
<v t="ekr.20070925144534.340"><vh>@menu &amp;Text Commands</vh>
<v t="ekr.20070925144534.341"><vh>@item &amp;beautify</vh></v>
<v t="ekr.20070925144534.342"><vh>@item beautify-&amp;all</vh></v>
<v t="ekr.20070925144534.343"><vh>@item -</vh></v>
<v t="ekr.20070925144534.344"><vh>@item center-&amp;line</vh></v>
<v t="ekr.20070925144534.345"><vh>@item center-&amp;region</vh></v>
<v t="ekr.20070925144534.346"><vh>@item -</vh></v>
<v t="ekr.20070925144534.347"><vh>@item &amp;capitalize-word</vh></v>
<v t="ekr.20070925144534.348"><vh>@item &amp;downcase-word</vh></v>
<v t="ekr.20070925144534.349"><vh>@item &amp;upcase-word</vh></v>
<v t="ekr.20070925144534.350"><vh>@item -</vh></v>
<v t="ekr.20070925144534.351"><vh>@item d&amp;owncase-region</vh></v>
<v t="ekr.20070925144534.352"><vh>@item u&amp;pcase-region</vh></v>
<v t="ekr.20070925144534.353"><vh>@item -</vh></v>
<v t="ekr.20070925144534.354"><vh>@item &amp;indent-region</vh></v>
<v t="ekr.20070925144534.355"><vh>@item indent-r&amp;elative</vh></v>
<v t="ekr.20070925144534.356"><vh>@item indent-ri&amp;gidly</vh></v>
<v t="ekr.20070925144534.357"><vh>@item u&amp;nindent-region</vh></v>
<v t="ekr.20070925144534.358"><vh>@item -</vh></v>
<v t="ekr.20070925144534.359"><vh>@item sort-colu&amp;mns</vh></v>
<v t="ekr.20070925144534.360"><vh>@item sort-&amp;fields</vh></v>
<v t="ekr.20070925144534.361"><vh>@item &amp;sort-lines</vh></v>
</v>
<v t="ekr.20070925144534.362"><vh>@menu Toggle Settings</vh>
<v t="ekr.20070925144534.363"><vh>@item toggle-a&amp;utocompleter</vh></v>
<v t="ekr.20070925144534.364"><vh>@item toggle-call&amp;tips</vh></v>
<v t="ekr.20070925144534.365"><vh>@item toggle-&amp;extend-mode</vh></v>
<v t="ekr.20070925144534.366"><vh>@item toggle-input-&amp;state</vh></v>
<v t="ekr.20070925144534.367"><vh>@item toggle-in&amp;visibles</vh></v>
<v t="ekr.20070925144534.369"><vh>@item toggle-split-&amp;direction</vh></v>
<v t="ekr.20071213190345.1"><vh>@item toggle-s&amp;parse-move</vh></v>
<v t="ekr.20070925144534.370"><vh>@item -</vh></v>
<v t="ekr.20070925144534.371"><vh>@item toggle-find-&amp;ignore-case-option</vh></v>
<v t="ekr.20070925144534.372"><vh>@item toggle-find-in-&amp;body-option</vh></v>
<v t="ekr.20070925144534.373"><vh>@item toggle-find-in-&amp;headline-option</vh></v>
<v t="ekr.20070925144534.374"><vh>@item toggle-find-mark-&amp;changes-option</vh></v>
<v t="ekr.20070925144534.375"><vh>@item toggle-find-mark-&amp;finds-option</vh></v>
<v t="ekr.20070925144534.376"><vh>@item toggle-find-rege&amp;x-option</vh></v>
<v t="ekr.20070925144534.377"><vh>@@item toggle-find-&amp;reverse-option</vh></v>
<v t="ekr.20070925144534.378"><vh>@item toggle-find-&amp;word-option</vh></v>
<v t="ekr.20070925144534.379"><vh>@item toggle-find-wrap-&amp;around-option</vh></v>
</v>
<v t="ekr.20071004121248"><vh>@menu &amp;Yank And Kill</vh>
<v t="ekr.20071004121328"><vh>@item &amp;buffer-kill</vh></v>
<v t="ekr.20071004121401"><vh>@item &amp;rectangle-kill</vh></v>
<v t="ekr.20071004121248.5"><vh>@item r&amp;ectangle-yank</vh></v>
<v t="ekr.20110607080101.16563"><vh>@item -</vh></v>
<v t="ekr.20071004121840"><vh>@item kill-&amp;line</vh></v>
<v t="ekr.20071004121840.1"><vh>@item kill-re&amp;gion</vh></v>
<v t="ekr.20071004121840.2"><vh>@item kill-region-s&amp;ave</vh></v>
<v t="ekr.20071004121248.2"><vh>@item kill-&amp;sentence</vh></v>
<v t="ekr.20071006153725"><vh>@item kill-ws</vh></v>
<v t="ekr.20071004121248.1"><vh>@item kill-&amp;word</vh></v>
<v t="ekr.20071004121248.3"><vh>@item -</vh></v>
<v t="ekr.20071004121248.4"><vh>@item &amp;yank</vh></v>
<v t="ekr.20071004121619"><vh>@item yank-&amp;pop</vh></v>
</v>
</v>
<v t="ekr.20070925144534.380"><vh>@menu &amp;Window</vh>
<v t="ekr.20070925144534.381"><vh>@item *&amp;equal-sized-panes</vh></v>
<v t="ekr.20070925144534.382"><vh>@item *&amp;toggle-active-pane</vh></v>
<v t="ekr.20070925144534.383"><vh>@item *toggle-&amp;split-direction</vh></v>
<v t="ekr.20070925144534.384"><vh>@item -</vh></v>
<v t="ekr.20070925144534.385"><vh>@item *contract-&amp;body-pane</vh></v>
<v t="ekr.20070925144534.386"><vh>@item *contract-&amp;log-pane</vh></v>
<v t="ekr.20070925144534.387"><vh>@item *contract-&amp;outline-pane</vh></v>
<v t="ekr.20070925144534.388"><vh>@item *contract-&amp;pane</vh></v>
<v t="ekr.20070925144534.389"><vh>@item -</vh></v>
<v t="ekr.20070925144534.390"><vh>@item *expand-bo&amp;dy-pane</vh></v>
<v t="ekr.20070925144534.391"><vh>@item *expand-lo&amp;g-pane</vh></v>
<v t="ekr.20070925144534.392"><vh>@item *expand-o&amp;utline-pane</vh></v>
<v t="ekr.20070925144534.393"><vh>@item *expand-pa&amp;ne</vh></v>
<v t="ekr.20070925144534.394"><vh>@item -</vh></v>
<v t="ekr.20070925144534.395"><vh>@item *&amp;fully-expand-body-pane</vh></v>
<v t="ekr.20070925144534.396"><vh>@item *full&amp;y-expand-log-pane</vh></v>
<v t="ekr.20070925144534.397"><vh>@item *fully-e&amp;xpand-outline-pane</vh></v>
<v t="ekr.20070925144534.398"><vh>@item *fully-exp&amp;and-pane</vh></v>
<v t="ekr.20070925144534.399"><vh>@item -</vh></v>
<v t="ekr.20070925144534.400"><vh>@item *&amp;resize-to-screen</vh></v>
<v t="ekr.20070925144534.401"><vh>@item *&amp;cascade-windows</vh></v>
<v t="ekr.20070925144534.402"><vh>@item *&amp;minimize-all</vh></v>
<v t="ekr.20070925144534.403"><vh>@item -</vh></v>
<v t="ekr.20070925144534.404"><vh>@@item *open-compare-window</vh></v>
<v t="ekr.20070925144534.405"><vh>@item *open-python-&amp;window</vh></v>
</v>
<v t="ekr.20070925144534.406"><vh>@menu &amp;Help</vh>
<v t="ekr.20070925144534.407"><vh>@item about-leo</vh></v>
<v t="ekr.20070925144534.408"><vh>@item open-online-home</vh></v>
<v t="ekr.20070925144534.409"><vh>@@@item *open-online-&amp;tutorial</vh></v>
<v t="ekr.20070925144534.410"><vh>@item *open-&amp;users-guide</vh></v>
<v t="ekr.20070925144534.411"><vh>@item -</vh></v>
<v t="ekr.20131028155339.18637"><vh>@item open-cheat-sheet-leo</vh></v>
<v t="ekr.20070925144534.412"><vh>@item open-leoDocs-leo</vh></v>
<v t="ekr.20070925144534.413"><vh>@item open-leoPlugins-leo</vh></v>
<v t="ekr.20070925144534.414"><vh>@item open-leoSettings-leo</vh></v>
<v t="ekr.20070925144534.415"><vh>@item open-myLeoSettings-leo</vh></v>
<v t="ekr.20090628075121.8432"><vh>@item open-quickstart-leo</vh></v>
<v t="ekr.20070925144534.416"><vh>@item open-scripts-leo</vh></v>
<v t="ekr.20070925144534.417"><vh>@item -</vh></v>
<v t="ekr.20130412173637.11776"><vh>@item *help</vh></v>
<v t="ekr.20070925144534.421"><vh>@item *help-for-autocompletion</vh></v>
<v t="ekr.20070925144534.422"><vh>@item *help-for-&amp;bindings</vh></v>
<v t="ekr.20070925144534.419"><vh>@item *help-for-&amp;command</vh></v>
<v t="ekr.20070925144534.423"><vh>@item *help-for-&amp;debugging-commands</vh></v>
<v t="ekr.20070925144534.424"><vh>@item *help-for-&amp;find-commands</vh></v>
<v t="ekr.20070925144534.418"><vh>@item *help-for-&amp;minibuffer</vh></v>
<v t="ekr.20070925144534.425"><vh>@item -</vh></v>
<v t="ekr.20070925144534.426"><vh>@item *pri&amp;nt-bindings</vh></v>
<v t="ekr.20070925144534.427"><vh>@item *print-c&amp;ommands</vh></v>
<v t="ekr.20090630073313.8521"><vh>@item *print-&amp;plugins-info</vh></v>
<v t="ekr.20090630073313.8522"><vh>@item *print-&amp;settings</vh></v>
</v>
</v>
<v t="ekr.20080515053412.3"><vh>@popup_menus</vh>
<v t="ekr.20080515053412.4"><vh>Main Context Menus</vh>
<v t="ekr.20080515053412.5"><vh>@popup body</vh>
<v t="ekr.20080515053412.6"><vh>@item &amp;</vh></v>
<v t="ekr.20080515053412.7"><vh>@item -</vh></v>
<v t="ekr.20080515053412.8"><vh>@menu Block Operations</vh>
<v t="ekr.20080515053412.9"><vh>@item indent-region</vh></v>
<v t="ekr.20080515053412.10"><vh>@item dedent-region</vh></v>
<v t="ekr.20080515053412.11"><vh>@item -</vh></v>
<v t="ekr.20080515053412.12"><vh>@item add-comments</vh></v>
<v t="ekr.20080515053412.13"><vh>@item delete-comments</vh></v>
</v>
<v t="ekr.20080515053412.14"><vh>@item &amp;</vh></v>
<v t="ekr.20080515053412.15"><vh>@item -</vh></v>
<v t="ekr.20080515053412.16"><vh>@item match-brackets</vh></v>
<v t="ekr.20080515053412.17"><vh>@item execute-script</vh></v>
<v t="ekr.20080515053412.18"><vh>@item *</vh></v>
</v>
<v t="ekr.20080515053412.19"><vh>@popup log</vh>
<v t="ekr.20080515053412.20"><vh>@item &amp;</vh></v>
</v>
<v t="ekr.20080515053412.21"><vh>@popup find-text</vh>
<v t="ekr.20080515053412.22"><vh>@item &amp;</vh></v>
</v>
<v t="ekr.20080515053412.23"><vh>@popup change-text</vh>
<v t="ekr.20080515053412.24"><vh>@item &amp;</vh></v>
</v>
<v t="ekr.20080515053412.25"><vh>@popup canvas</vh>
<v t="ekr.20080515053412.26"><vh>@item &amp;</vh></v>
<v t="ekr.20080515053412.27"><vh>@item -</vh></v>
<v t="ekr.20080515053412.28"><vh>@item *create-chapter</vh></v>
<v t="ekr.20080515053412.29"><vh>@item *remove-chapter</vh></v>
</v>
<v t="ekr.20080515053412.30"><vh>@popup headline</vh></v>
<v t="ekr.20080515053412.31"><vh>@popup iconbox</vh></v>
<v t="ekr.20080515053412.32"><vh>@popup plusbox</vh></v>
</v>
<v t="ekr.20080515053412.33"><vh>Fragments</vh>
<v t="ekr.20080515053412.34"><vh>@popup edit-menu</vh>
<v t="ekr.20080515053412.35"><vh>@item rclick-cut-text</vh></v>
<v t="ekr.20080515053412.36"><vh>@item rclick-copy-text</vh></v>
<v t="ekr.20080515053412.37"><vh>@item rclick-paste-text</vh></v>
<v t="ekr.20080515053412.38"><vh>@item -</vh></v>
<v t="ekr.20080515053412.39"><vh>@item rclick-select-all</vh></v>
</v>
<v t="ekr.20080515053412.40"><vh>@popup recent-files-menu</vh>
<v t="ekr.20080515053412.41"><vh>@menu Recent Files</vh>
<v t="ekr.20080515053412.42"><vh>@item *</vh></v>
</v>
</v>
<v t="ekr.20080515053412.43"><vh>@popup to-chapter-fragment</vh>
<v t="ekr.20080515053412.44"><vh>@menu Clone to Chapter</vh>
<v t="ekr.20080515053412.45"><vh>@item *</vh></v>
</v>
<v t="ekr.20080515053412.46"><vh>@menu Copy to Chapter</vh>
<v t="ekr.20080515053412.47"><vh>@item *</vh></v>
</v>
<v t="ekr.20080515053412.48"><vh>@menu Move to Chapter</vh>
<v t="ekr.20080515053412.49"><vh>@item *</vh></v>
</v>
<v t="ekr.20080515053412.50"><vh>@menu Select Chapter</vh>
<v t="ekr.20080515053412.51"><vh>@item *</vh></v>
</v>
</v>
</v>
</v>
<v t="ville.20091008201813.3909"><vh>Qt context menu</vh>
<v t="ville.20091008201813.3911"><vh>@data contextmenu_commands</vh></v>
</v>
<v t="ekr.20070411101857"><vh>Open With menu</vh>
<v t="ekr.20070411101857.1"><vh>@openwith Idle = Alt+Shift+Ctrl+I</vh></v>
<v t="ekr.20070411101857.2"><vh>@openwith Word = Alt+Shift+Ctrl+W </vh></v>
<v t="ekr.20070411101857.3"><vh>@@openwith Wordpad = Alt+Shift+Ctrl+T</vh></v>
<v t="TL.20080702085131.2"><vh>@bool open_with_save_on_update = False</vh></v>
<v t="TL.20080702085131.3"><vh>@bool open_with_goto_node_on_update = True</vh></v>
<v t="TL.20080702085131.4"><vh>@bool open_with_clean_filenames = False</vh></v>
<v t="TL.20080702085131.5"><vh>@bool open_with_uses_derived_file_extensions = False</vh></v>
</v>
</v>
<v t="ekr.20110611092035.16492"><vh>Mouse</vh>
<v t="ekr.20080324105006.6"><vh>@bool allow_middle_button_paste = False</vh></v>
</v>
<v t="ekr.20051123100536"><vh>Plugins</vh>
<v t="ekr.20041119034357.13"><vh>@bool use_plugins = True</vh></v>
<v t="ekr.20071113084330"><vh>@bool warn_when_plugins_fail_to_load = True</vh></v>
<v t="ekr.20070224073109.1"><vh>@enabled-plugins</vh></v>
<v t="tbrown.20091129085043.11789"><vh>active_path plugin</vh>
<v t="tbrown.20091129085043.11790"><vh>@string active_path_attype = auto</vh></v>
<v t="tbrown.20091129085043.11792"><vh>@string active_path_event = icondclick1</vh></v>
<v t="tbrown.20091129085043.11793"><vh>@data active_path_ignore</vh></v>
<v t="tbrown.20111114201921.23020"><vh>@data active_path_bin_open</vh></v>
<v t="tbrown.20091129085043.11795"><vh>@data active_path_autoload</vh></v>
<v t="tbrown.20100304170159.5189"><vh>@bool active_path_load_docstring = False</vh></v>
<v t="tbrown.20100401100336.16108"><vh>@float active_path_timeout_seconds = 10.</vh></v>
<v t="tbrown.20100401100336.31583"><vh>@int active_path_max_size = 1000000</vh></v>
</v>
<v t="vitalije.20100306144625.8944"><vh>autosave plugin</vh>
<v t="vitalije.20100306144625.8945"><vh>@bool mod_autosave_active = True</vh></v>
<v t="vitalije.20100306144625.8946"><vh>@int mod_autosave_interval = 300</vh></v>
</v>
<v t="tbrown.20110430104941.30247"><vh>backlink</vh>
<v t="tbrown.20110430104941.30250"><vh>@int backlink_name_levels = 0</vh></v>
</v>
<v t="ekr.20060807103220"><vh>datenodes plugin</vh>
<v t="ekr.20060807103220.1"><vh>@string datenodes_body_text = To do...</vh></v>
<v t="ekr.20060807103220.2"><vh>@string datenodes_day_node_headline = %Y-%m-%d</vh></v>
<v t="ekr.20060807103220.3"><vh>@string datenodes_month_node_day_headline = %d: %A</vh></v>
<v t="ekr.20060807103220.4"><vh>@string datenodes_month_node_month_headline = %B %Y</vh></v>
<v t="ekr.20060807103220.5"><vh>@bool datenodes_month_node_omit_saturdays = True</vh></v>
<v t="ekr.20060807103220.6"><vh>@bool datenodes_month_node_omit_sundays = True</vh></v>
<v t="ekr.20060807103220.7"><vh>@string datenodes_year_node_day_headline = %d: %A</vh></v>
<v t="ekr.20060807103220.8"><vh>@string datenodes_year_node_month_headline = %B</vh></v>
<v t="ekr.20060807103220.9"><vh>@string datenodes_year_node_year_headline = %Y</vh></v>
<v t="ekr.20060807103220.10"><vh>@bool datenodes_year_node_omit_saturdays = True</vh></v>
<v t="ekr.20060807103220.11"><vh>@bool datenodes_year_node_omit_sundays = True</vh></v>
</v>
<v t="ekr.20100907092300.6957"><vh>Inkscape options</vh>
<v t="ekr.20100907092300.6958"><vh>@string inkscape-template = ../docs/inkscape-template.svg</vh></v>
<v t="ekr.20100907092300.6959"><vh>@string inkscape-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20111003085631.15488"><vh>mod_http plugin</vh>
<v t="ekr.20111003085631.15489"><vh>@bool http_active = True</vh></v>
<v t="btheado.20131124162237.2493"><vh>@string http_ip = 127.0.0.1</vh></v>
<v t="ekr.20111003085631.15490"><vh>@int http_port = 8130</vh></v>
<v t="ekr.20111003104518.15499"><vh>@@string http_bookmark_unl = Bookmarks</vh></v>
</v>
<v t="ekr.20110611092035.16483"><vh>mod_scripting plugin</vh>
<v t="tbrown.20100524101550.4704"><vh>@string mod_scripting_subtext = ▼</vh></v>
</v>
<v t="TL.20090225102340.33"><vh>nodeActions plugin</vh>
<v t="TL.20090225102340.34"><vh>@bool nodeActions_save_atFile_nodes = False</vh></v>
<v t="TL.20090303191843.1"><vh>@int nodeActions_message_level = 1</vh></v>
</v>
<v t="peckj.20131101143409.5814"><vh>nodewatch plugin</vh>
<v t="peckj.20131101143409.5816"><vh>@bool nodewatch_autoexecute_scripts = False</vh></v>
</v>
<v t="ekr.20060919171527"><vh>opml plugin</vh>
<v t="ekr.20060921080239"><vh>@bool opml_read_derived_files = True</vh></v>
<v t="ekr.20060919171527.1"><vh>@bool opml_use_outline_elements = True</vh></v>
<v t="ekr.20060919195145"><vh>@string opml_version = 2.0</vh></v>
<v t="ekr.20060919181622"><vh>@bool opml_write_body_text = True</vh></v>
<v t="ekr.20060921080239.1"><vh>@bool opml_write_derived_files = True</vh></v>
<v t="ekr.20060919173031"><vh>@bool opml_write_leo_details = True</vh></v>
<v t="ekr.20060919173031.1"><vh>@bool opml_write_leo_globals_attributes = True</vh></v>
<v t="ekr.20060922110220"><vh>@bool opml_write_uAs = True</vh></v>
<v t="ekr.20060919171527.2"><vh>@string opml_namespace = leo:com:leo-opml-version-1</vh></v>
</v>
<v t="peckj.20130514082859.5599"><vh>printing plugin</vh>
<v t="peckj.20130514082859.5600"><vh>@string printing-font-size = 12</vh></v>
<v t="peckj.20130514082859.5601"><vh>@string printing-font-family = DejaVu Sans Mono</vh></v>
</v>
<v t="tbrown.20130813134319.7223"><vh>richtext plugin</vh>
<v t="tbrown.20130813134319.7224"><vh>@bool richtext_cke_autosave = False</vh></v>
<v t="tbrown.20130813181208.23979"><vh>@data richtext_cke_config</vh></v>
</v>
<v t="peckj.20131012154112.5294"><vh>rss plugin</vh>
<v t="peckj.20131012154112.5295"><vh>@string rss-headline-format = [&lt;date&gt;] &lt;title&gt;</vh></v>
<v t="peckj.20131012154112.5296"><vh>@data rss-body-format</vh></v>
<v t="peckj.20131012154112.5297"><vh>@string rss-date-format = %Y-%m-%d %I:%M %p</vh></v>
<v t="peckj.20131012154112.5298"><vh>@bool rss-sort-newest-first = True</vh></v>
</v>
<v t="ekr.20071213060239"><vh>rst3 plugin</vh>
<v t="ekr.20071213060239.1"><vh>rst3 http options</vh>
<v t="ekr.20071213061454"><vh>@bool rst3_clear_http_attributes = False</vh></v>
<v t="ekr.20071213061454.1"><vh>@bool rst3_http_server_support = False</vh></v>
<v t="ekr.20071213061454.2"><vh>@string rst3_http_attributename = rst_http_attribute</vh></v>
<v t="ekr.20071213061454.3"><vh>@string rst3_node_begin_marker = http-node-marker-</vh></v>
</v>
<v t="ekr.20071213060239.2"><vh>rst3 path options</vh>
<v t="ekr.20131027064821.18683"><vh>@string rst3_write_intermediate_extension = .txt</vh></v>
<v t="ekr.20071213061504"><vh>@string rst3_default_path = None</vh></v>
<v t="ekr.20071213061504.1"><vh>@string rst3_stylesheet_name = default.css</vh></v>
<v t="ekr.20071213061504.2"><vh>@string rst3_stylesheet_path = None</vh></v>
<v t="ekr.20071213061504.3"><vh>@string rst3_publish_argv_for_missing_stylesheets = None</vh></v>
</v>
<v t="ekr.20071213060514"><vh>rst3 global options</vh>
<v t="ekr.20131009050634.17656"><vh>@bool rst3_call_docutils = True</vh></v>
<v t="ekr.20080916092417.1"><vh>@string rst3_default_encoding = uTf-8</vh></v>
<v t="ekr.20071213061811"><vh>@bool rst3_number_code_lines = True</vh></v>
<v t="ekr.20071213061811.1"><vh>@string rst3_underline_characters = #=+*^~"'`-:&gt;&lt;_</vh></v>
<v t="ekr.20071213061811.2"><vh>@bool rst3_verbose = True</vh></v>
<v t="ekr.20071213061811.3"><vh>@bool rst3_write_intermediate_file = True</vh></v>
</v>
<v t="ekr.20071213060514.1"><vh>rst3 mode options</vh>
<v t="ekr.20071213061923"><vh>@bool rst3_code_mode = False</vh></v>
<v t="ekr.20071213061923.1"><vh>@bool rst3_doc_only_mode = False</vh></v>
<v t="ekr.20071213061923.2"><vh>@bool rst3_generate_rst = True</vh></v>
<v t="ekr.20090430075506.7"><vh>@bool rst3_generate_rst_header_comment = True</vh></v>
</v>
<v t="ekr.20071213060514.2"><vh>rst3 formatting options</vh>
<v t="ekr.20071213061930.1"><vh>@bool rst3_show_headlines = True</vh></v>
<v t="ekr.20071213061930.2"><vh>@bool rst3_show_organizer_nodes = True</vh></v>
<v t="ekr.20071213061930.3"><vh>@bool rst3_show_options_nodes = False</vh></v>
<v t="ekr.20071213061930.4"><vh>@bool rst3_strip_at_file_prefixes = True</vh></v>
</v>
<v t="ekr.20071213061923.3"><vh>rst3 formatting options (code mode only)</vh>
<v t="ekr.20071213062019"><vh>@bool rst3_show_doc_parts_as_paragraphs = False</vh></v>
<v t="ekr.20071213062019.1"><vh>@bool rst3_show_leo_directives = True</vh></v>
<v t="ekr.20071213062019.2"><vh>@bool rst3_show_markup_doc_parts = False</vh></v>
<v t="ekr.20071213062019.3"><vh>@bool rst3_show_options_doc_parts = False</vh></v>
<v t="ekr.20090430173906.1"><vh>@@string rst3_code_block_string = \n.. class:: code\n..\n\n::\n</vh></v>
</v>
<v t="ekr.20071213060607"><vh>rst3 options: names of headline commands</vh>
<v t="ekr.20071213062019.4"><vh>@string rst3_code_prefix = @rst-code</vh></v>
<v t="ekr.20071213062019.5"><vh>@string rst3_doc_only_prefix = @rst-doc-only</vh></v>
<v t="ekr.20080916094157.1"><vh>@string rst3_default_encoding_prefix = @rst-default-encoding</vh></v>
<v t="ekr.20071213062019.6"><vh>@string rst3_rst_prefix = @rst</vh></v>
<v t="ekr.20071213062019.7"><vh>@string rst3_ignore_headline_prefix = @rst-no-head</vh></v>
<v t="ekr.20071213062019.8"><vh>@string rst3_ignore_headlines_prefix = @rst-no-headlines</vh></v>
<v t="ekr.20071213062019.9"><vh>@string rst3_ignore_node_prefix = @rst-ignore-node</vh></v>
<v t="ekr.20071213062019.10"><vh>@string rst3_ignore_prefix = @rst-ignore</vh></v>
<v t="ekr.20071213062019.11"><vh>@string rst3_ignore_tree_prefix = @rst-ignore-tree</vh></v>
<v t="ekr.20071213062019.12"><vh>@string rst3_option_prefix = @rst-option</vh></v>
<v t="ekr.20071213062019.13"><vh>@string rst3_options_prefix = @rst-options</vh></v>
<v t="ekr.20071213062019.14"><vh>@string rst3_preformat_prefix = @rst-preformat</vh></v>
<v t="ekr.20071213062019.15"><vh>@string rst3_show_headline_prefix = @rst-head</vh></v>
</v>
</v>
<v t="ekr.20100910115903.8297"><vh>screenshot settings</vh>
<v t="ekr.20100910115903.8299"><vh>@string screenshot-bin = "c:\Program Files (x86)\Inkscape\inkscape.exe"</vh></v>
</v>
<v t="ekr.20060930111325"><vh>scripting plugin</vh>
<v t="ekr.20060930111325.2"><vh>@bool scripting-at-button-nodes = True</vh></v>
<v t="peckj.20131113130420.8678"><vh>@bool scripting-at-rclick-nodes = False</vh></v>
<v t="ekr.20060930111325.3"><vh>@bool scripting-at-commands-nodes = True</vh></v>
<v t="ekr.20060930111325.4"><vh>@bool scripting-at-plugin-nodes = False</vh></v>
<v t="ekr.20060930111325.5"><vh>@bool scripting-at-script-nodes = False</vh></v>
<v t="ekr.20060930111325.6"><vh>@bool scripting-create-debug-button = False</vh></v>
<v t="ekr.20060930111325.7"><vh>@bool scripting-create-run-script-button = False</vh></v>
<v t="ekr.20060930112030"><vh>@bool scripting-create-script-button-button = True</vh></v>
<v t="ekr.20060930111325.1"><vh>@int scripting-max-button-size = 18</vh></v>
</v>
<v t="tbrown.20130310101647.34743"><vh>valuespace plugin</vh>
<v t="tbrown.20130310101647.34744"><vh>@bool valuespace_vs_eval_redirect = True</vh></v>
</v>
<v t="ekr.20051123100536.1"><vh>vim plugin</vh>
<v t="ekr.20051123100536.2"><vh>@@string vim_cmd = c:\Program Files\vim\vim63\gvim --servername LEO</vh></v>
<v t="ekr.20051123100536.3"><vh>@@string vim_exe = c:\Program Files\vim\vim63\gvim</vh></v>
<v t="ekr.20071114072753"><vh>@bool vim_plugin_opens_url_nodes = False</vh></v>
</v>
<v t="ekr.20090202191501.10"><vh>xemacs plugin</vh>
<v t="ekr.20090202191501.11"><vh>@string xemacs_exe = c:\XEmacs\XEmacs-21.4.21\i586-pc-win32\xemacs.exe</vh></v>
</v>
<v t="ekr.20060904211808"><vh>zodb plugin</vh>
<v t="ekr.20060904211808.1"><vh>@string zodb_storage_file = c:\prog\zopeTemp\leo.fs</vh></v>
</v>
</v>
<v t="ekr.20131119143342.18879"><vh>Qt Gui (appearance)</vh>
<v t="tbrown.20131122091143.23828"><vh>Color definitions</vh>
<v t="tbrown.20131122091143.23830"><vh>@color MistyRose1 = #FFE4E1</vh></v>
<v t="tbrown.20131122091143.23831"><vh>@color LightSteelBlue1 = #CAE1FF</vh></v>
<v t="tbrown.20131122091143.23832"><vh>@color LightBlue = #ADD8E6</vh></v>
</v>
<v t="tbrown.20131122091143.23829"><vh>Colors</vh>
<v t="tbrown.20131122094200.2523"><vh>@color text-foreground = black</vh></v>
<v t="tbrown.20131122094200.2524"><vh>@color text-foreground-body = @text-foreground</vh></v>
<v t="tbrown.20131122094200.2526"><vh>@color text-foreground-tree = @text-foreground</vh></v>
<v t="tbrown.20131122094200.2528"><vh>@color text-foreground-log = @text-foreground</vh></v>
<v t="tbrown.20131122104251.2537"><vh>@color minibuffer-background-color = lightblue</vh></v>
<v t="tbrown.20131122104251.2538"><vh>@color minibuffer-error-color = red</vh></v>
<v t="tbrown.20131122104251.2539"><vh>@color minibuffer-foreground-color = black</vh></v>
<v t="tbrown.20131122104251.2540"><vh>@color minibuffer-warning-color = lightgrey</vh></v>
<v t="tbrown.20131122091143.23833"><vh>@color run-script-btn-bg = @MistyRose1</vh></v>
<v t="tbrown.20131122091143.23834"><vh>@color debug-script-btn-bg = @MistyRose1</vh></v>
<v t="tbrown.20131122091143.23835"><vh>@color script-button-button-btn-bg = #ffffcc</vh></v>
<v t="tbrown.20131122091143.23836"><vh>@color script-button-btn-bg = @MistyRose1</vh></v>
<v t="tbrown.20131122091143.23837"><vh>@color generic-button-btn-bg = @LightSteelBlue1</vh></v>
<v t="tbrown.20131122091143.23838"><vh>@color quick-move-btn-bg = @LightSteelBlue1</vh></v>
<v t="tbrown.20131122091143.23839"><vh>@color interact-btn-bg = @LightBlue</vh></v>
<v t="tbrown.20131122091143.23840"><vh>@color at-button-btn-bg = @LightSteelBlue1</vh></v>
</v>
<v t="tbrown.20131122094200.2511"><vh>Fonts</vh>
<v t="tbrown.20131122094200.2520"><vh>@string font-family = Droid Sans Mono, DejaVu Sans Mono</vh></v>
<v t="tbrown.20131122094200.2518"><vh>@string font-size = 12pt</vh></v>
<v t="tbrown.20131122094200.2512"><vh>@string font-size-body = @font-size</vh></v>
<v t="tbrown.20131122094200.2514"><vh>@string font-size-tree = @font-size</vh></v>
<v t="tbrown.20131122094200.2517"><vh>@string font-size-log = @font-size</vh></v>
</v>
<v t="ekr.20131115092802.18224"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="ekr.20100507153425.8304"><vh>@string qt-toolbar-location=top</vh></v>
<v t="ekr.20081018053140.11"><vh>For developers only</vh>
<v t="tbrown.20131122094200.2515"><vh>@int qt-rich-text-zoom-in = 10</vh></v>
<v t="ekr.20081023060109.14"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="ekr.20081022181056.10"><vh>@data qt-scintilla-styles</vh></v>
<v t="ekr.20081020075840.10"><vh>@int qt-scintilla-zoom-in = 6</vh></v>
<v t="leohag.20081204085551.13"><vh>@string qt-ui-file-name = qt_main.ui</vh></v>
</v>
<v t="tbrown.20131122091143.22659"><vh>@button reload-styles</vh></v>
</v>
<v t="ekr.20110611092035.16481"><vh>Scripting</vh>
<v t="ekr.20041119041019"><vh>@bool redirect_execute_script_output_to_log_pane = False</vh></v>
<v t="ekr.20061029091403"><vh>@bool show_full_tracebacks_in_scripts = False</vh></v>
</v>
<v t="ekr.20051025084017"><vh>Spell checking</vh>
<v t="ekr.20100904095239.8440"><vh>@string enchant_language = en_US</vh></v>
<v t="ekr.20100904095239.8441"><vh>@string enchant_local_dictionary = None</vh></v>
</v>
<v t="ekr.20041119034357.70"><vh>Syntax coloring</vh>
<v t="ekr.20060828110551"><vh>Default colors, used if no language-specific color are in effect</vh>
<v t="ekr.20111024091133.16650"><vh>Colors for Leo constructs</vh>
<v t="ekr.20111004182631.15542"><vh>@color doc_part_color = firebrick3</vh></v>
<v t="ekr.20111004182631.15546"><vh>@color leo_keyword_color = #00aa00</vh></v>
<v t="ekr.20111004182631.15548"><vh>@color section_name_color = red</vh></v>
<v t="ekr.20111004182631.15549"><vh>@color show_invisibles_space_color = #E5E5E5</vh></v>
<v t="ekr.20111004182631.15550"><vh>@color show_invisibles_tab_color = #CCCCCC</vh></v>
<v t="ekr.20111004182631.15552"><vh>@color undefined_section_name_color = red</vh></v>
<v t="ekr.20111024091133.16671"><vh>@color url_color = purple</vh></v>
</v>
<v t="ekr.20111024091133.16651"><vh>Colors for standard jEdit tags</vh>
<v t="ekr.20060504140351"><vh>@color comment1_color = firebrick3</vh></v>
<v t="ekr.20060504140408"><vh>@color comment2_color = firebrick3</vh></v>
<v t="ekr.20060504140408.1"><vh>@color comment3_color = plum3</vh></v>
<v t="ekr.20060504140408.2"><vh>@color comment4_color = orchid1</vh></v>
<v t="ekr.20060504131831.1"><vh>@color keyword1_color = blue</vh></v>
<v t="ekr.20060827102902"><vh>@color keyword2_color = blue</vh></v>
<v t="ekr.20060827102902.1"><vh>@color keyword3_color = blue</vh></v>
<v t="ekr.20060827102902.2"><vh>@color keyword4_color = blue</vh></v>
<v t="ekr.20060704090341"><vh>@color label_color = red</vh></v>
<v t="ekr.20060504131831.2"><vh>@color literal1_color = #00aa00</vh></v>
<v t="ekr.20060504134056"><vh>@color literal2_color = #00aa00</vh></v>
<v t="ekr.20060504134056.1"><vh>@color literal3_color = #00aa00</vh></v>
<v t="ekr.20060504134056.2"><vh>@color literal4_color = #00aa00</vh></v>
<v t="ekr.20060826152759"><vh>@color markup_color = blue</vh></v>
<v t="ekr.20060713101831"><vh>@color operator_color = None</vh></v>
</v>
</v>
<v t="ekr.20060828110551.1"><vh>Language-specific colors</vh>
<v t="ekr.20060828110551.2"><vh>php</vh>
<v t="ekr.20060828110551.3"><vh>@color php_operator_color = DodgerBlue1</vh></v>
<v t="ekr.20060828145228.1"><vh>@font php keyword fonts</vh></v>
</v>
<v t="ekr.20080703111151.18"><vh>Forth fonts, colors &amp; settings</vh>
<v t="ekr.20080703111151.21"><vh>@color forth_keyword3_color = black</vh></v>
<v t="ekr.20080703111151.22"><vh>@color forth_keyword4_color = black</vh></v>
<v t="ekr.20080703111151.23"><vh>@color forth_keyword5_color = black</vh></v>
<v t="ekr.20080705064822.2"><vh>@data forth-bold-italic-words</vh></v>
<v t="ekr.20080705064822.3"><vh>@data forth-bold-words</vh></v>
<v t="ekr.20080705064822.1"><vh>@data forth-defwords</vh></v>
<v t="ekr.20080705064822.4"><vh>@data forth-delimiter-pairs</vh></v>
<v t="ekr.20080705064822.6"><vh>@data forth-italic-words</vh></v>
<v t="ekr.20080705064822.7"><vh>@data forth-string-word-pairs</vh></v>
<v t="ekr.20080705064822.5"><vh>@data forth-words</vh></v>
<v t="ekr.20080703111151.17"><vh>@font forth keyword2_font</vh></v>
<v t="ekr.20080703111151.12"><vh>@font forth keyword3_font</vh></v>
<v t="ekr.20080703111151.14"><vh>@font forth keyword4_font</vh></v>
<v t="ekr.20080703111151.15"><vh>@font forth keyword5_font</vh></v>
</v>
</v>
<v t="ekr.20111004182631.15533"><vh>Options</vh>
<v t="ekr.20111004182631.15534"><vh>@bool color_cweb_comments_with_latex = True</vh></v>
<v t="ekr.20111004182631.15535"><vh>@bool color_cweb_doc_parts_with_latex = True</vh></v>
<v t="ekr.20111004182631.15536"><vh>@bool color_directives_in_plain_text = True</vh></v>
<v t="ekr.20100102121150.6344"><vh>@bool show-invisibles-by-default = False</vh></v>
<v t="ekr.20111004182631.15537"><vh>@bool underline_undefined_section_names = True</vh></v>
<v t="ekr.20111004182631.15538"><vh>@bool use_hyperlinks = False</vh></v>
<v t="ekr.20060201111002"><vh>@bool use_syntax_coloring = True</vh></v>
<v t="ekr.20090724102842.2492"><vh>@int qt_max_colorized_chars = 0</vh></v>
</v>
</v>
<v t="ekr.20110611092035.16463"><vh>Tree operation</vh>
<v t="ekr.20041119050749.3"><vh>@bool allow_clone_drags = False</vh></v>
<v t="nh910.20110621123823.3423"><vh>@bool collapse_nodes_after_move = True</vh></v>
<v t="ekr.20060930085532"><vh>@bool collapse_nodes_during_finds = True</vh></v>
<v t="ekr.20080315083057.7"><vh>@bool collapse_nodes_while_spelling = True</vh></v>
<v t="ekr.20111109104336.12503"><vh>@bool collapse_on_lt_arrow = True</vh></v>
<v t="ekr.20070615094204"><vh>@bool contractVisitedNodes = True</vh></v>
<v t="ekr.20041119050749.4"><vh>@bool enable_drag_messages = False</vh></v>
<v t="ekr.20131008181812.17533"><vh>@bool enable_tree_dragging = True</vh></v>
<v t="ekr.20061012122620"><vh>@bool insert_new_nodes_at_end = False</vh></v>
<v t="tbrown.20110212091818.20118"><vh>@bool inter_outline_drag_moves = False</vh></v>
<v t="ekr.20100107060708.6390"><vh>@bool qt-tree-multiple-selection = True</vh></v>
<v t="ekr.20110601103939.19339"><vh>@bool single_click_auto_edits_headline = False</vh></v>
<v t="ekr.20061007211759"><vh>@bool sparse_move_outline_left = True</vh></v>
<v t="ekr.20060926160657"><vh>@bool stayInTreeAfterEditHeadline = False</vh></v>
<v t="ekr.20060122105527.7"><vh>@bool stayInTreeAfterSelect = True</vh></v>
<v t="ekr.20061002115414.1"><vh>@float outline_nav_extend_delay = 2.0</vh></v>
</v>
<v t="ekr.20041119034357.15"><vh>Unicode options</vh>
<v t="ekr.20080212084020"><vh>@string default_at_auto_file_encoding = utf-8</vh></v>
<v t="ekr.20041119042929.9"><vh>@string default_derived_file_encoding = utf-8</vh></v>
<v t="ekr.20041119042929.10"><vh>@string new_leo_file_encoding = utf-8</vh></v>
<v t="ekr.20090620112052.9070"><vh>@string qt-default-encoding = UTF-8</vh></v>
</v>
<v t="ekr.20050203090810"><vh>Unit test option</vh>
<v t="ekr.20050203085250"><vh>@int global_setting_for_unit_tests = 132</vh></v>
</v>
<v t="ekr.20110611092035.16471"><vh>Widget colors</vh>
<v t="ekr.20041119034357.67"><vh>@color split_bar_color = LightSteelBlue2</vh></v>
<v t="ekr.20130705090546.10663"><vh>@int colorer_delay = 200</vh></v>
<v t="ekr.20130705090546.10662"><vh>@int colorer_max_lines = 100</vh></v>
<v t="ekr.20080326060254.3"><vh>@string target_language = plain</vh></v>
<v t="ekr.20041213105007.2"><vh>Body pane colors (deprecated)</vh>
<v t="ekr.20041119034357.41"><vh>@color body_cursor_background_color = None</vh></v>
<v t="ekr.20041119034357.40"><vh>@color body_cursor_foreground_color = None</vh></v>
<v t="ekr.20041119034357.50"><vh>@color body_insertion_cursor_color = None</vh></v>
<v t="ekr.20041119034357.49"><vh>@color body_text_background_color = None</vh></v>
<v t="ekr.20041119034357.48"><vh>@color body_text_foreground_color = None</vh></v>
<v t="ekr.20060605081712"><vh>@color command_mode_bg_color = #f2fdff</vh></v>
<v t="ekr.20060822101942.1"><vh>@color command_mode_fg_color = None</vh></v>
<v t="ekr.20080514082950.2"><vh>@color insert_mode_bg_color = #fdf5f5</vh></v>
<v t="ekr.20060605081712.3"><vh>@color insert_mode_fg_color = black</vh></v>
<v t="ekr.20060606085536"><vh>@color overwrite_mode_bg_color = azure2</vh></v>
<v t="ekr.20060606085536.1"><vh>@color overwrite_mode_fg_color = black</vh></v>
<v t="ekr.20080511041907.1"><vh>@color unselected_body_bg_color = #ffffef</vh></v>
<v t="ekr.20080511041907.2"><vh>@color unselected_body_fg_color = black</vh></v>
</v>
<v t="ekr.20041213105007.3"><vh>Log pane colors</vh>
<v t="ekr.20041119052015"><vh>@color log_error_color = red</vh></v>
<v t="ekr.20120928142052.11488"><vh>@color log_warning_color = blue</vh></v>
<v t="ekr.20041119052015.2"><vh>@color log_text_foreground_color = None</vh></v>
<v t="ekr.20041119053445"><vh>@color log_text_background_color = None</vh></v>
<v t="ekr.20041217184352.2"><vh>@color log_pane_background_color = #f2fdff</vh></v>
<v t="ekr.20051020125928"><vh>@color log_pane_Find_tab_background_color = #d6c7d3</vh></v>
<v t="ekr.20051025070845"><vh>@color log_pane_Spell_tab_background_color = MistyRose1</vh></v>
</v>
<v t="ekr.20100313080341.8368"><vh>Minibuffer background colors</vh>
<v t="ekr.20100313080341.8369"><vh>@color minibuffer-background-color = lightblue</vh></v>
<v t="ekr.20100313080341.8370"><vh>@color minibuffer-error-color = red</vh></v>
<v t="ekr.20120926072255.11432"><vh>@color minibuffer-foreground-color = black</vh></v>
<v t="ekr.20100313080341.8371"><vh>@color minibuffer-warning-color = lightgrey</vh></v>
</v>
</v>
<v t="ekr.20041213105954"><vh>Windows</vh>
<v t="ekr.20100929121021.8511"><vh>@bool fixedwindow = False</vh></v>
<v t="ekr.20080412115752.1"><vh>@data fixedWindowPosition</vh></v>
<v t="ekr.20041119034357.38"><vh>Body pane options</vh>
<v t="ekr.20061010111324"><vh>@bool select_all_text_when_editing_headlines = False</vh></v>
<v t="ekr.20060531094310"><vh>@bool autoindent_in_nocolor_mode = True</vh></v>
<v t="ekr.20041119034357.43"><vh>@bool body_gmt_time = False</vh></v>
<v t="ekr.20041119034357.39"><vh>@bool body_pane_wraps = True</vh></v>
<v t="ekr.20060216135834"><vh>@bool enable_autocompleter_initially = False</vh></v>
<v t="ekr.20060603070801"><vh>@bool enable_calltips_initially = False</vh></v>
<v t="ekr.20060627084739"><vh>@bool flash_matching_brackets = True</vh></v>
<v t="ekr.20060627121646"><vh>@color flash_brackets_background_color = DodgerBlue1</vh></v>
<v t="ekr.20060627121646.1"><vh>@color flash_brackets_foreground_color = white</vh></v>
<v t="ekr.20060627121646.2"><vh>@int flash_brackets_count = 2</vh></v>
<v t="ekr.20060627121646.3"><vh>@int flash-brackets-delay = 75</vh></v>
<v t="ekr.20041119034357.44"><vh>@bool smart_auto_indent = False</vh></v>
<v t="ekr.20090213065933.11"><vh>@bool smart_tab = True</vh></v>
<v t="ekr.20041119034357.53"><vh>@@@int additional_body_text_border = 0</vh></v>
<v t="ekr.20041119034357.42"><vh>@string body_time_format_string = %m/%d/%Y %H:%M:%S</vh></v>
<v t="ekr.20060620085654"><vh>@string editor_orientation = horizontal</vh></v>
</v>
<v t="ekr.20111023095357.16693"><vh>Focus border settings</vh>
<v t="ekr.20111023095357.16694"><vh>@@bool use_focus_border = True</vh></v>
<v t="ekr.20111103073536.16580"><vh>@@bool use_body_focus_border = True</vh></v>
<v t="ekr.20111023095357.16695"><vh>@@int focus_border_width = 1</vh></v>
<v t="ekr.20111023095357.16696"><vh>@@color focus_border_color = blue</vh></v>
<v t="ekr.20120519193555.11830"><vh>@@color focus_border_command_state_color = red</vh></v>
<v t="ekr.20120520053551.11241"><vh>@@color focus_border_overwrite_state_color = green</vh></v>
</v>
<v t="ekr.20080930072519.3"><vh>Icon bar options</vh>
<v t="ekr.20080930072519.4"><vh>@int icon_bar_widgets_per_row = 20</vh></v>
</v>
<v t="ekr.20041213105954.1"><vh>Log pane options</vh>
<v t="ekr.20041119052015.1"><vh>@bool log_pane_wraps = False</vh></v>
</v>
<v t="ekr.20041119034357.56"><vh>Options for new windows</vh>
<v t="ekr.20071024145953"><vh>@bool big_outline_pane = False</vh></v>
<v t="ekr.20060930085332"><vh>@bool outline_pane_has_initial_focus = False</vh></v>
<v t="ekr.20041119034357.57"><vh>@ratio initial_horizontal_ratio = 0.4</vh></v>
<v t="ekr.20041119034357.58"><vh>@ratio initial_horizontal_secondary_ratio = 0.8</vh></v>
<v t="ekr.20041119034357.60"><vh>@ratio initial_vertical_ratio = 0.5</vh></v>
<v t="ekr.20041119034357.61"><vh>@ratio initial_vertical_secondary_ratio = 0.65</vh></v>
<v t="ekr.20041119034357.62"><vh>@int initial_window_height = 600</vh></v>
<v t="ekr.20041119034357.63"><vh>@int initial_window_left =  20</vh></v>
<v t="ekr.20041119034357.64"><vh>@int initial_window_top = 20</vh></v>
<v t="ekr.20041119034357.65"><vh>@int initial_window_width = 800</vh></v>
</v>
<v t="ekr.20041213105954.2"><vh>Splitter options</vh>
<v t="ekr.20041119034357.69"><vh>@int split_bar_width = 6</vh></v>
<v t="edward.20081129091117.12"><vh>@string initial_split_orientation = vertical</vh></v>
<v t="ekr.20041119034357.68"><vh>@string split_bar_relief = groove</vh></v>
<v t="tbrown.20130916082438.55678"><vh>@string status_line_split_sizes = 1 2</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="TL.20080702085131.2">If True: Save the Leo file and all modified derived files every time the external editor saves a modified file.

If False: Don't save the Leo file or any derived files when the external editor saves a file.</t>
<t tx="TL.20080702085131.3">If True: When a file is saved by the external editor the node associated with that file is becomes that selected node in Leo.

If False: The current node remains selected when a file, associated with a different node, is saved by the external editor.</t>
<t tx="TL.20080702085131.4">Only supported with the mod_tempfname.py plugin.

True: The plugin will store temporary files utilizing cleaner
file names (no unique number is appended to the node's headline text).
Unique temporary directory paths are used to insure unique files are
created by creating temporary directories reflecting each node's ancestor
nodes in the Leo outline. Note: Do not have multiple sibling nodes (nodes
having the same parent node) in Leo with the same headline text. There will
be a conflict if both are opened in an external editor at the same time.

False: The plugin will store temporary files with an appended
unique number to insure unique temporary filenames.
</t>
<t tx="TL.20080702085131.5">Only supported with the mod_tempfname.py plugin.

True: The open-with command will use the file extension of the node's
derived file for the extension of the temporary file passed to the external
editor. This can be useful for external editors that are providing text
highlighting or other file type specific capabilities.

False or no derived file exists for that node: The open-with command will
use the file extension of the node's default language (set by the @language
command) or '.txt' if none exists.</t>
<t tx="TL.20090225102340.33"></t>
<t tx="TL.20090225102340.34">If set to True then if a match occurs on an @file type node the nodeActions plugin will save the clicked @file type node (and any other @file type nodes) to disk, if modified, before running the script.
</t>
<t tx="TL.20090303191843.1">Specifies the type of messages to be sent to the log pane.	Specifying a
higher message level will display that level and all lower levels.
The following integer values are supported:

0 = no messages
1 = Plugin triggered and the patterns that were matched (default)
2 = Double-click event passed or not to next plugin
3 = Patterns that did not match
4 = Code debugging messages
</t>
<t tx="btheado.20131124162237.2493"></t>
<t tx="edward.20081129091117.12">horizontal: body pane to the right
vertical: body pane on the botton
</t>
<t tx="ekr.20041119034357.1">@language rest

This @settings tree contains all active settings.

Settings outside this tree have no effect.
</t>
<t tx="ekr.20041119034357.10">See the "Tree Operation" node for settings that affect how the tree pane works.</t>
<t tx="ekr.20041119034357.12"></t>
<t tx="ekr.20041119034357.13">True: Leo loads plugins on startup.

Warnings:

- This is a global option ONLY. It can only be set in the leoSettings.leo files
that Leo reads during startup. Changing this option in other Leo files will have
NO effect.

- When this option is enabled, plugins could potentially execute HOSTILE CODE
contained in Leo files. See further warnings in LeoDocs.leo.</t>
<t tx="ekr.20041119034357.14">This option affects how Leo treats body text in @root trees.

True:    Body text in @root trees start in doc mode.

This is the way @root trees always worked prior to version 3.10.

False:    Body text in @root trees start in code mode.

This way makes @root trees more compatible with @file trees.</t>
<t tx="ekr.20041119034357.15"></t>
<t tx="ekr.20041119034357.16"></t>
<t tx="ekr.20041119034357.17"></t>
<t tx="ekr.20041119034357.18">Limit directory searches to files with the given file extension.

None  Compares all files when comparing directories.
.py   Compares only .py files when comparing directories.</t>
<t tx="ekr.20041119034357.19">These options have no effect when comparing directories.</t>
<t tx="ekr.20041119034357.20">
</t>
<t tx="ekr.20041119034357.29">DEPRECATED

The default directory used if no directory specified in @path, @root or @file directives.

</t>
<t tx="ekr.20041119034357.31">The width of tabs on the screen.  This setting is also used when writing doc parts.

Valid values: Any nonzero integer.

Negative tab widths (recommended) cause Leo to convert tabs to blanks when typing.</t>
<t tx="ekr.20041119034357.32">The page width for wrapping doc parts in derived files.

Valid values: any nonzero positive integer.</t>
<t tx="ekr.20041119034357.38"></t>
<t tx="ekr.20041119034357.39">True: Wrap body text.

</t>
<t tx="ekr.20041119034357.40">

Foreground color for the cursor in body text.

</t>
<t tx="ekr.20041119034357.41">Background color for the cursor in body text.

</t>
<t tx="ekr.20041119034357.42">The format string used when creating the Time/Date string for the Insert Time/Date command.
See the Python documentation for time.strftime for full details.

Examples:

1/30/2003 8:31:55
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S</t>
<t tx="ekr.20041119034357.43">True:  use gmt time.
False: use local time.</t>
<t tx="ekr.20041119034357.44">True:  auto-indent aligns with open ({[ brackets

False: auto-indent increases indentation by one tab for Python only.</t>
<t tx="ekr.20041119034357.48">Foreground color of body text.  This setting *is* used in the QtGui.

Note: this setting can be overridden by the x_mode_fg_color settings.</t>
<t tx="ekr.20041119034357.49">Background color of body text.  This setting *is* used in the QtGui.

#ffecea

Note: this setting can be overridden by the x_mode_bg_color settings.</t>
<t tx="ekr.20041119034357.5">False: Leo writes leoSettings.leo files.</t>
<t tx="ekr.20041119034357.50">Color of insertion cursor

</t>
<t tx="ekr.20041119034357.53">Additional border in body text pane, in pixels.</t>
<t tx="ekr.20041119034357.56">These options apply only to windows opened with the New command.

**Important**: When using the qttabs gui, these options have no effect.
That is, opening a new "window" means opening a new tab.</t>
<t tx="ekr.20041119034357.57">The ratio of tree pane size to body pane size when splitting primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="ekr.20041119034357.58">The ratio of outline (tree) pane size to log pane size when splitting the primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split horizontally.</t>
<t tx="ekr.20041119034357.60">The ratio of tree pane size to body pane size when splitting primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="ekr.20041119034357.61">The ratio of outline (tree) pane size to log pane size when splitting the primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split vertically.</t>
<t tx="ekr.20041119034357.62">Height of window in pixels.
    
</t>
<t tx="ekr.20041119034357.63">Distance from left of screen of window, in pixels.
</t>
<t tx="ekr.20041119034357.64">Distance from top of screen of window, in pixels.</t>
<t tx="ekr.20041119034357.65">Width window in pixels.

</t>
<t tx="ekr.20041119034357.67">The color of the split bar. gray90 also looks good.</t>
<t tx="ekr.20041119034357.68">The -relief option for the split bar.</t>
<t tx="ekr.20041119034357.69">The width of the split bar, in pixels (must be an integer).</t>
<t tx="ekr.20041119034357.7"></t>
<t tx="ekr.20041119034357.70">@nocolor-node

These are the settings used by Leo's Qt syntax colorer.

Syntax colors may be any valid Tk color name or color value.

For example, "00aa00" is the dark green used by IDLE.

See http://www.tcl.tk/man/tcl8.3/TkCmd/colors.htm for a list of valid color
names. These names are case sensitive, for example: BlanchedAlmond.</t>
<t tx="ekr.20041119034357.8">Example:

"Created by Leo at @date"

A comment to be iserted in derived files just after the initial @+leo line.
The comment will appear in an @comment sentinel.
Notes:
1. Leo replaces @date with the date and time that the derived file was created.
2. Use \n to separate lines.
3. This must be empty for compatibility with older versions of Leo.
4. Please use an empty comment when updating to CVS!</t>
<t tx="ekr.20041119034357.9">A string, s.  If present, .leo files will contain an xml-stylesheet line following
the opening xml line. 
For example:
  &lt;?xml ....?&gt; 
  &lt;?xml-stylesheet ekr_stylesheet?&gt;
  
Notes:
- The string s should contain any needed XML escapes.
- Leo writes the line &lt;?xml-stylesheet s ?&gt;
  where s is the value of this setting.
- Please set this field empty when uploading to CVS.
- Very old versions of Leo did not support reading files containing xml-stylesheet lines.</t>
<t tx="ekr.20041119035137">@language rest
@pagewidth 80

This is Leo's main settings file.  It specifies settings used to customize Leo.

@settings trees are composed of various kinds of nodes.

The headline of each node indicates its type.

The body text of most nodes contain comments. However, the body text of @font
and @shortcuts nodes contain settings. See the children of this node for
details.
</t>
<t tx="ekr.20041119035704">These nodes describe the type, name and value of a single setting. Their
headlines have the form::

    @type-name setting-name = value

The basic types are: @bool, @color, @directory, @encoding, @font, @int, @path,
and @string.

None is a valid value for all types, indicating that the setting node has no
effect.
</t>
<t tx="ekr.20041119035704.1">Organizer nodes have headlines that do **not** start with @.

Organizer nodes may be inserted freely without changing the meaning of an @setting tree.</t>
<t tx="ekr.20041119035704.2">Leo ignores subtrees of @settings trees whose headline starts with @ignore.</t>
<t tx="ekr.20041119035704.3">Not implemented yet.

Creates a user-defined type. For example:

@type relief: string = [raised, sunken, flat, ridge, solid, groove]

This is much better than using a base type because the dialog creator can
present the user with a listbox containing only the valid options.</t>
<t tx="ekr.20041119035931">Acts like an organizer node if the expression evaluates to True, otherwise acts
like an @ignore node. If the expression is empty thebody text should contain a
script that will be evaluated (in an empty context).
</t>
<t tx="ekr.20041119041019">False: Print sends its output to stdout (console) when doing Execute Script command.
True:  Print redirected to Leo's log pane when doing Execute Script command.
</t>
<t tx="ekr.20041119041019.1">The string to be appended to file names resulting from the Remove Sentinels command.
If the value starts with . the extension is appended to the original file name.
Otherwise, the extension is appended before the file extension.
Example 1:
  File name x.y
  remove_sentinels_extension = _ns
  Result: x_ns.y
Example 2:
  File name x.y
  remove_sentinels_extension = .txt
  Result: x.y.txt

</t>
<t tx="ekr.20041119041019.2">True:  The Save command clears undo buffer.
False: The undo buffer persists across saves.</t>
<t tx="ekr.20041119041304">This option applies to directories specified in filenames in all kinds of @file trees, and to filenames specified in the @path directive.

True:  Leo attempts to create directories if they do not exist.
False: Leo never attempts to create directories.</t>
<t tx="ekr.20041119041304.1">This option specifies the directory to be used as a prefix for &lt;filename&gt; in

@path &lt;filename&gt;
@file &lt;filename&gt;
@root &lt;filename&gt;

when &lt;filename&gt; is a relative path.

Valid values for this option:

'!' means relative to the location leo.py (recommended).
'.' means relative to the location of the .leo file in the top window.

An absolute path (in platform-dependent format).

Relative paths are not allowed because their meaning would depend on the changing value of the current working directory.</t>
<t tx="ekr.20041119041747">nl or lf: (recommended) All lines end with "\n"
cr:       All lines end with "\r"
crlf:     All lines end with "\r\n"
platform: Lines end in platform-specific way.

With platform Leo opens output files in "w" mode rather than "wb" mode and writes '\n'

Please specify nl when uploading files to Leo's CVS site.</t>
<t tx="ekr.20041119041747.1">The number of trailing newlines Leo retains at the end of each body text.

asis: Leo retains the number of newlines contained in each body text.
      
    Warning: Leo sometimes has problems determining which ending newlines are "real".

zero: Leo removes all trailing whitespace from body text.

one:  Leo ends each non-empty body text with exactly one trailing newline.</t>
<t tx="ekr.20041119041747.4">
True:  Leo strips blanks and tabs from otherwise blank lines.
False: Leo retains whitespace even in otherwise blank lines.</t>
<t tx="ekr.20041119042929"></t>
<t tx="ekr.20041119042929.1"></t>
<t tx="ekr.20041119042929.10">The encoding specified in the following line of new .leo files:

&lt;?xml version="1.0" encoding="UTF-8"&gt;

The recommended value is UTF-8 (upper case for compatibility for old versions of Leo).

iso-8859-1 would be a popular alternative.

Important: Once a .leo file is created the &lt;?xml..."&gt; line can only be changed by hand.  Alas, changing the &lt;?xml..."&gt; line by hand may cause unicode errors the next time the .leo file is loaded.  Therefore, you should change the &lt;?xml..."&gt; line by hand only when first creating a .leo file.</t>
<t tx="ekr.20041119042929.2">Same as @directory.</t>
<t tx="ekr.20041119042929.3"></t>
<t tx="ekr.20041119042929.4"></t>
<t tx="ekr.20041119042929.7"></t>
<t tx="ekr.20041119042929.9">The encoding used for derived files if no @encoding directive is in effect.
This setting is also used to encode files created by the Tangle commands.
Default is UTF-8 (case not important).</t>
<t tx="ekr.20041119043902">The path to the first file or directory to be compared.

Directory compares ignore a filename part of the path, if present.

E.g., c:/directory2/spam.py is valid for directory compares</t>
<t tx="ekr.20041119043902.1">The path to the second file or directory to be compared.

Directory compares ignore a filename part of the path, if present.

E.g., c:/directory2/spam.py is valid for directory compares</t>
<t tx="ekr.20041119043902.10">0: Show lines regardless of the number of mismatches.

n: Stop showing lines after n mismatches.

</t>
<t tx="ekr.20041119043902.11">
1: Show blanks as [ ] and tabs as [t]

</t>
<t tx="ekr.20041119043902.12">True:  Print lines of both files when showing matching lines.

False: Print only the line of compare_file_1 when showing matching lines.

</t>
<t tx="ekr.20041119043902.13">True: Print lines that match using the print_both_lines_for_matches option.

</t>
<t tx="ekr.20041119043902.14">True: Print lines that do not compare equal to each other.

</t>
<t tx="ekr.20041119043902.15">True: Print lines all lines in one file after an end-of-file is seen on the other file.</t>
<t tx="ekr.20041119043902.2">The path to the output file.

Leo will silently write to this file, regardless of whether it already exists, creating the file if needed.

Leo will write to the log pane if this path is empty or invalid.</t>
<t tx="ekr.20041119043902.3">True:  Append output to output file.

False: Replace output file with results of compare.</t>
<t tx="ekr.20041119043902.4">True: Ignore blanks lines when comparing files.

</t>
<t tx="ekr.20041119043902.5">True: Ignore the first line of compare_file_1 when comparing files.

</t>
<t tx="ekr.20041119043902.6">True: Ignore the first line of compare_file_2 when comparing files.</t>
<t tx="ekr.20041119043902.7">True: Ignore whitespace after the leading whitespace of a line when comparing files.</t>
<t tx="ekr.20041119043902.8">True:  Ignore leading whitespace of each line when comparing files.

False: The recommended setting when comparing Python source files.

</t>
<t tx="ekr.20041119043902.9">True: Ignore sentinel lines when comparing files.

Leo sets sentinel comment delimiters from the first line of each file.  This option has no effect if the first line is not a @+leo line.</t>
<t tx="ekr.20041119044139"></t>
<t tx="ekr.20041119050105">These options affecting how Leo shows the results of file compares.

Leo gathers statistics regardless of these options.</t>
<t tx="ekr.20041119050105.1">The change string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.</t>
<t tx="ekr.20041119050105.10"></t>
<t tx="ekr.20041119050105.11"></t>
<t tx="ekr.20041119050105.12"></t>
<t tx="ekr.20041119050105.14">When checked, the Find and Change commands search body text.
</t>
<t tx="ekr.20041119050105.15">When checked, the Find and Change commands search headline text.
</t>
<t tx="ekr.20041119050105.16">When checked, the Find and Change commands search only the currently selected headline and its offspring.
</t>
<t tx="ekr.20041119050105.2">The find string (without the quotes unless quotes are part of the string).

N.B. Leo requires utf-8 encoding for any non-ascii characters.

</t>
<t tx="ekr.20041119050105.3">These settings determine whether the corresponding checkbox is checked by default.</t>
<t tx="ekr.20041119050105.4">Despite its name, this setting affects the default value of the Show Context checkbox.</t>
<t tx="ekr.20041119050105.5">When checked, the Find and Change commands ignore the case of alphabetic characters when determining matches.
</t>
<t tx="ekr.20041119050105.6">When checked, the Change command marks all headlines whose headline or body text are changed by the command.
</t>
<t tx="ekr.20041119050105.7">When checked, the Find and Change commands mark all headlines in which a match is found with the pattern.
</t>
<t tx="ekr.20041119050105.8">When checked, the Find and Change commands treat several characters specially in
the find pattern. The '*' character matches any sequence of zero or more
characters. The '.' character matches any single character. The '^' character at
the start of a pattern, or a '$' character at the end of a pattern matches a
newline.

Examples:

The pattern "^abc$" matches lines that only contain "abc".
The pattern "^a" matches any line starting with "A".
The pattern "a$" matches any line ending with "a".
The pattern "^*$" matches any line at all.</t>
<t tx="ekr.20041119050105.9"></t>
<t tx="ekr.20041119050749.10">The format string used when creating the Time/Date string for the Insert Time/Date command.

See the Python documentation for time.strftime for full details.

Examples:
1/30
%m/%d

1/30/03 8:31:02
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S
</t>
<t tx="ekr.20041119050749.11">True:  use gmt time when inserting time into headlines.

False: use local time.</t>
<t tx="ekr.20041119050749.3">True:  Allows control-dragging to create clones.
False: All drags move nodes.

Setting this setting to False allows Leo to be used on Aqua.</t>
<t tx="ekr.20041119050749.4">True:  Tell whether drags will move nodes or clone nodes.
False: Don't issue such messages.

</t>
<t tx="ekr.20041119052015">Color for error messages written to the log window.</t>
<t tx="ekr.20041119052015.1">True: Wrap body text.

</t>
<t tx="ekr.20041119052015.2">Foreground color of log text.

</t>
<t tx="ekr.20041119053445">Background color of log text.</t>
<t tx="ekr.20041119105509">**Not implemented**.

Creates a permanent value that can be tested later with @if. That is, it alters
the environment in which @if code is executed.</t>
<t tx="ekr.20041119110141">Same as:

@if sys.platform == "platform-name":

except that it isn't necessary to import sys.

This would be the natural way to implement platform-dependent settings.</t>
<t tx="ekr.20041120152657"></t>
<t tx="ekr.20041120152900.2">When the Script Search radio button is selected Leo treats the contents of the
Search Text as a script to execute whenever any kind of Find command is
executed. Similarly, when the Script Change checkbox is selected Leo treats the
context of the Change Text as a script to execute whenever any kind of Change
command is executed. See below for just how this works.

Script-based find-change is extremely powerful. In effect, Leo's Find/Change
panel becomes a new platform for running scripts interactively. Leo now has all
the find/change capability of pattern matching languages like Snobol and Icon,
just by using the capabilities of the plain Python language. Moreover, Leo can
deliver these capabilities interactively or not depending which buttons you push
in Leo's Find/Change panel.

Script-based find/change frees the user from having to control script-based
searches interactively. Rather than forcing find/change scripts to implement
their own interactive controls, it is much easier to use what Leo already has.

HOW IT WORKS

Leo dedicates a Python dictionary called app.searchDict for communication
between Leo and the search and change scripts. The search and change scripts may
also use app.searchDict for communication between themselves. Leo sets
app.searchDict["type"] to "find", "change", "findAll" or "changeAll" to indicate
the kind of command being executed. Scripts may use all other entries in
app.searchDict as they please.

Leo executes the find script once when you press the Find button (or the Change
then Find button) in Leo's Find/Change dialog. Typically, the find script would
traversing the tree and highlight the found text or otherwise indicate to the
user that the find operation has succeeded. However, the script can do anything
it pleases.

Leo executes the the find script repeatedly when you press the Find All button.
Leo keeps executing the find script until app.searchDict["continue"] evaluates
to false. Initially there is no entry for app.searchDict["continue"], so the
find script must set app.searchDict["continue"] = true if it wants Leo to keep
executing it.

Leo executes the change script once when you press the Change button. Typically,
the change script would change the selected text. Usually the change script will
compute the new value of body text and call v.setBodyStringOrPane(newText) to
make that change permanent. 

The change script also may handle undo, typically by calling
c.frame.onBodyChanged(v,"Change",oldText=oldText). Leo does not handle undo
automatically. Indeed, Leo makes no assumptions whatever about what the change
script really does.

Leo executes the the change script repeatedly when you press the Change All
button. Just as with the Find All command, Leo keeps executing the change script
until app.searchDict["continue"] evaluates to false.

Most find and change scripts will ignore settings in the Find Panel like "whole
word", "pattern match", and "reverse". However, these settings are available to
the scripts via ivars such as c.whole_word_flag, etc. if desired.

For examples, see the node called 'Script Find and Script Change' in leoDocs.leo.</t>
<t tx="ekr.20041120155431.1">The body text of @shortcut nodes contain the specification for zero or more shortcuts.

Lines starting with # are ignored.

All other non-blank lines should have the form:

commandName = shortcut specifier.</t>
<t tx="ekr.20041120155431.2">Not implemented yet.

Autments the settings parser and the dialog creator with scripts.</t>
<t tx="ekr.20041120181045">A float value restricted to the range 0.0 to 1.0.</t>
<t tx="ekr.20041122163623">When looking for @whatever, Leo converts whatever to lower case and removes
minus signs. For example, the following are equivalent::

    @if-platform
    @ifPlatform
    @ifplatform
</t>
<t tx="ekr.20041213105007.2"></t>
<t tx="ekr.20041213105007.3"></t>
<t tx="ekr.20041213105954">Options that require pixel values can be any Python expression that yields an int.
Warning: the number of pixels per inch varies...</t>
<t tx="ekr.20041213105954.1"></t>
<t tx="ekr.20041213105954.2"></t>
<t tx="ekr.20041217184352.2">LightYellow1

#f2fdff</t>
<t tx="ekr.20050126083026">node granularity: start a new undo unit when typing moves to a new node.
line granularity: start a new undo unit when typing moves to new line.
word granularity: start a new undo unit when typing starts a new word.
char granularity: start a new undo unit for each character typed.

'line' granularity is the default used if no valid setting is specified.

Leo used char granularity for all version prior to 4.3. char granularity is not
recommended; it is clumsy and wasteful of computer memory.</t>
<t tx="ekr.20050203085250">This is not used in Leo, except in unit tests.

Please do not change this; it would make a unit test fail.</t>
<t tx="ekr.20050203090810">Please do not change any of these settings.

Doing so would make unit tests fail.
</t>
<t tx="ekr.20051007200824">This node contains sets of key bindings and settings.

These sets should have headlines starting with @keys so that the Check Bindings
script can find them.

- The *inactive* sets should be children of the node '@ignore Unused key bindings'

- The *active* set should be *outside* of the @ignore and its descendants.
</t>
<t tx="ekr.20051007200824.1">The following special single characters may be used in the tails of shortcuts.
They are listed along with their associated Tk binding value. Leo contains
special code to handle these characters. No other single characters may be
specified.

For example, you could specify Ctrl+! as a shortcut, and Leo will create a
binding for &lt;Control+exclam&gt;. Some of these values may be invalid on some
machines.

The full list is at http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm

! exclam
" quotedbl
# numbersign
$ dollar
% percent
&amp; ampersand
' quoteright
( parenleft
) parenright
* asterisk
+ plus
, comma
- minus
. period
/ slash
: colon
; semicolon
&lt; less
= equal
&gt; greater
? question
@ at
[ bracketleft
\ backslash
] bracketright
^ asciicircum
_ underscore
` quoteleft
{ braceleft
| bar
} braceright
~ asciitilde

Leo recognizes the following mult-character names, and translates the indicated
strings in the menu items:
    
"bksp"     : "BkSp"
"dnarrow"  : "DnArrow"
"ltarrow"  : "LtArrow"
"rtarrow"  : "RtArrow"
"uparrow"  : "UpArrow"
"pageup"   : "PgUp"),
"pagedn"   : "PgDn")

For example, "Ctrl-uparrow"  will appear as "Ctrl+UpArrow" in the menu.

Leo passes all other mult-character names verbatim to Qt, so on some platforms
you may be able to use any of the following. Most appear on the numeric keypad.
For example, the following may work on some systems:
    
"Ctrl+BackSpace"

Don't use these if you want to be sure that the binding work on all platforms.
The complete list of names may be found at:
http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm.
    
F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
BackSpace, Break, Clear, Delete, Escape, Linefeed, Return, Tab, 
Down, Left, Right, Up,
Begin, End, Home, Next, Prior,
Num_Lock, Pause, Scroll_Lock, Sys_Req,
KP_Add, KP_Decimal, KP_Divide, KP_Enter, KP_Equal,
KP_Multiply, KP_Separator, KP_Space, KP_Subtract, KP_Tab,
KP_F1, KP_F2, KP_F3, KP_F4,
KP_0, KP_1, KP_2, KP_3, KP_4, KP_5, KP_6, KP_7, KP_8, KP_9</t>
<t tx="ekr.20051020125928">#d6c7d3
#d2cad0
#c6d3d7</t>
<t tx="ekr.20051025070845">#d6c7d3
#d2cad0
#c6d3d7
#ffffec # Same as outline.</t>
<t tx="ekr.20051025084017">Leo's spell checker requires PyEnchant to be installed.
See: http://www.rfk.id.au/software/pyenchant/tutorial.html#installation</t>
<t tx="ekr.20051027175030">True: When typing an opening bracket '(','[' or '{', immediately type the
corresponding closing bracket.  To move past the closing bracket, just type it.</t>
<t tx="ekr.20051101160257">A shortcut specification has the form:

command-name = shortcutSpecifier

or

command-name ! pane = shortcutSpecifier

The first form creates a binding for all panes except the minibuffer. The second
form creates a binding for one or more panes. The possible values for 'pane'
are:

pane    bound panes
----    -----------
all     body,log,tree
body    body
log     log
mini    minibuffer
text    body,log
tree    tree
    
You may use None as the specifier. Otherwise, a shortcut specifier consists of a
head followed by a tail. The head may be empty, or may be a concatenation of the
following: (All entries in each row are equivalent).
    
Shift+ Shift-
Alt+ or Alt-
Control+, Control-, Ctrl+ or Ctrl-

Notes:

1. The case of plain letters is significant:  a is not A.

2. The Shift- (or Shift+) prefix can be applied *only* to letters or
multi-letter tails. Leo will ignore (with a warning) the shift prefix applied to
other single letters, e.g., Ctrl-Shift-(

3. The case of letters prefixed by Ctrl-, Alt-, Key- or Shift- is *not*
significant.

The following table illustrates these rules.  In each row, the first entry is the key (for k.bindingsDict) and the other entries are equivalents that the user may specify in leoSettings.leo:

a, Key-a, Key-A
A, Shift-A
Alt-a, Alt-A
Alt-A, Alt-Shift-a, Alt-Shift-A
Ctrl-a, Ctrl-A
Ctrl-A, Ctrl-Shift-a, Ctrl-Shift-A
!, Key-!,Key-exclam,exclam
    
See "About shortcut specifiers" for a full discussion of what may appear in the tail of a shortcut.</t>
<t tx="ekr.20051123100536">Note: These settings have effect only if the corresponding plugin has been enabled.</t>
<t tx="ekr.20051123100536.1">For MacOS X (darwin) the following are typical defaults:

vim_cmd = /Applications/gvim.app/Contents/MacOS/gvim --servername LEO
vim_exe = /Applications/gvim.app/Contents/MacOS/gvim
</t>
<t tx="ekr.20051123100536.2"></t>
<t tx="ekr.20051123100536.3"></t>
<t tx="ekr.20051126062243"></t>
<t tx="ekr.20051126062243.1"></t>
<t tx="ekr.20051126062525"></t>
<t tx="ekr.20051126062830">This is the most useful focus trace: it tells what really is happening.</t>
<t tx="ekr.20060112103537.17">'''This script reports commands that exist in some but not all key- binding
sets. setNames is a list of the roots of all such sets.'''

import leo.core.leoConfig as leoConfig
import leo.core.leoTest as leoTest

# u = leoTest.testUtils(c)
parser = leoConfig.SettingsTreeParser(c)
# Add these as required to handle commands defined by plugins.
optionalCommandPrefixes = ['group-operations']
optionalCommandNames = [
    # These are the command names as defined by plugins.
    # LeoSlideShows.leo defines buttons whose commands do not end in '-command'.
    'next-slide-command','next-slide-show-command',
    'prev-slide-command','prev-slide-show-command',
    # The ipython plugin.
    'start-ipython','get-ipython-results','push-to-ipython',
]

setNames = []
setsDict = {} # keys are set names, values are dicts of command names.
shortcutsDict = {}

@others

main()
</t>
<t tx="ekr.20060112104119">def defineSetNames():
    global setNames
    if 1:
        setNames = []
        for p in c.allNodes_iter():
            h = p.headString()
            if h.startswith('@keys'):
                h = h[5:].strip()
                if h not in setNames:
                    setNames.append(h)
        g.es('Found these sets...')
        for setName in setNames:
            g.es_print('  %s' % str(setName))
    else:
        setNames = [
            'Default Emacs shortcuts',
            'Legacy Leo bindings',
            'Legacy Leo shortcuts with important Emacs bindings',
            'No bindings',
            'EKR bindings: a mix',
            'EKR bindings: Mode-oriented',
        ]

    setNames.sort()
</t>
<t tx="ekr.20060112104333">def doSet(p,name):

    global shortcutsDict

    shortcutsDict = {}

    for p in p.subtree_iter():
        if p.headString().startswith('@shortcuts'):
            doShortcuts(p,name)
</t>
<t tx="ekr.20060112104333.1">def checkSets():

    global setNames, optionalCommandPrefixes, optionalCommandNames
    # Compute the union of all the command names.
    allNames = {}
    for setName in setNames:
        d = setsDict.get(setName)
        if d:
            for key in d.keys():
                allNames[key] = key
        else:
            g.es_print('No setsDict for %s' % (repr(setName)),color='red')
    k = c.keyHandler
    keys = sorted(allNames.keys())
    # Warn about missing names.
    for setName in ('No bindings',): # setNames:
        d = setsDict.get(setName)
        if d:
            for key in keys:
                if key not in ('none','None',None) and key not in d.keys():
                    # Don't warn about missing 'enter-xxx-mode' commands.
                    if (
                        not (key.startswith('enter-') and key.endswith('-mode')) and
                        not (key.startswith('press-') and key.endswith('-button'))
                    ):
                        g.es_print('%s is missing %-35s = None' % (setName,repr(key)))
        else:
            g.es_print("'@keys No bindings' not found",color='blue')
    # Warn about undefined commands.
    for key in keys:
        if not c.commandsDict.get(key):
            ok = False
            # full-command and quick command are weird special cases.
            if key not in ('None',None,'full-command','quick-command'):
                # Don't warn about missing 'enter-xxx-mode' commands.
                if key.startswith('enter-') and key.endswith('-mode'):
                    ok = True
                elif key.startswith('press-') and key.endswith('-button'):
                    ok = True
                for prefix in optionalCommandPrefixes:
                    if key.startswith(prefix):
                        ok = True
                for optionalCommand in optionalCommandNames:
                    if key == optionalCommand:
                        ok = True
                if not ok:
                    g.es_print('Undefined command name: %s' % (key))
</t>
<t tx="ekr.20060112104823">def main ():

    global setNames
    defineSetNames()

    g.es_print('-' * 40)
    seen = {}
    for p in c.allNodes_iter():
        h = p.headString()
        if h.startswith('@keys'):
            h = h[5:].strip()
            if not seen.get(h):
                seen[h] = True
                doSet(p,h)
    checkSets()
    g.es('Check Bindings done')
</t>
<t tx="ekr.20060112105523">def doShortcuts(p,setName):

    global parser,setsDict,shortcutsDict

    d = setsDict.get(setName,{})
    s = p.bodyString()
    lines = g.splitLines(s)
    for line in lines:
        line = line.strip()
        if line and not line.startswith('#'):
            commandName,si = parser.parseShortcutLine('test',line)
            if not si:
                g.es_print('In %s:\nmissing "=" in shortcut line:%s' % (
                    p.headString(),repr(line)),color='red')
            else:
                # Having multiple shortcuts for a command if fine,
                # But having multiple commands for a shortcut is not.
                shortcut = si.stroke
                pane = si.pane
                if shortcut not in (None,'None','none'):
                    aList = shortcutsDict.get(shortcut,[])
                    if aList:
                        for commandName2,pane2 in aList:
                            if pane == pane2:
                                g.es_print('duplicate shortcut %s in set %s: previous command: %s' % (
                                    shortcut,setName,commandName2),color='red')
                        else:
                            aList.append((commandName,pane),)
                    else:
                        shortcutsDict [shortcut] = [(commandName,pane),]

                data = d.get(commandName)
                if data:
                    shortcut2,pane2 = data
                    if shortcut == shortcut2 and pane == pane2:
                        g.es_print('duplicate %s in set %s' % (
                            commandName,setName),color='red')
                else:
                    data = shortcut,pane
                    d[commandName] = data

    setsDict[setName] = d
</t>
<t tx="ekr.20060112110750"></t>
<t tx="ekr.20060114073238">If True, Leo will report to the console which bindings have been created.

Thus, you must be running from a console window for this setting to be useful.</t>
<t tx="ekr.20060114082205">If this setting is non-empty the trace_bindings setting will report only
bindings that match the string (ignoring case).

For this setting to be useful the following must be true:

- you must be running from a console window.

- @bool trace_bindings must be True.</t>
<t tx="ekr.20060114083009">If this setting is non-empty the trace_bindings setting will report only bindings for matching panes.  For example, to see all ! text bindings, set this setting to text.

For this setting to be useful the following must be true:

- you must be running from a console window.

- @bool trace_bindings must be True.</t>
<t tx="ekr.20060116090646">@nocolor

Standard keys (Windows defaults in parens)

F1 help
Windows key + F1 Windows Help
F2 find-prev (Rename)
F3 find-next (Find Files)
F4 None (Address bar in Windows Explorer)
F5 None (Refresh, Reload in Windows Explorer)
F6 None (Should cycle from window to window)
F7 open-spell-tab (Spell in Word)
Shift-F7 None (Thesaurus in Word)
F8 None (Safe mode)
F9 None
F10 None (Activate menu bar in many programs)
F11 None (Toggle full screen mode in explorer)
F12 None

You can use F10 to highlight the first menu choice, and then use the arrow keys to move around the menus. Pressing the Shift key while pressing F10 will bring up the shortcut menu. This is similar to right-clicking on an object.</t>
<t tx="ekr.20060117092249">A mode is a temporary set of key bindings. Modes are created by nodes whose
headline has the form:

@mode &lt;mode name&gt;

The body text contains a list of shortcut specifiers. @mode nodes work just like
@shortcuts, but as a side effect they create the enter-&lt;mode name&gt;-mode
command.  For example, 

@mode quick-commands

creates the enter-quick-commands command. You can bind keys to such commands in
@shortcut nodes as usual.

Notes:

- If the @mode headline contains ::, everything following the :: is the
  mode prompt. For example::
    
    @mode abc :: xyz
    
creates the enter-abc-mode command, but the prompt for the command is xyz.

- Pane specifiers are ignored in @mode nodes. Bindings apply only to a single
mode.

- @shortcuts nodes specify the bindings in effect for the 'default' or
'top-level' mode. The keyboard-quit command always set the mode to the top-level
mode.

- The top_level_unbound_key_action setting determines what happens to unbound
keys *only* for the top-level mode.

- A mode contains *only* the key bindings explicitly specified in the @mode
node. The only default key binding is the binding for the keyboard-quit command
(usually Control-g). Thus, all modes except the top-level mode act as if
top_level_unbound_key_action = 'ignore'. In particular, the set-command-state,
set-insert-state and set-overwrite-state commands affect only the top-level mode.

- The mode-help command (recommend binding is Tab) lists all bound keystrokes in
a mode.

- ** New in 4.4.1: In @mode nodes, shortcut specifier lines of the form::

    --&gt; command-name
    
Specify that the named command will be executed before entering the mode. More
than one such **mode-entry commands may appear.

- In @mode nodes, shortcut specifier lines of the form:

    command-name -&gt; mode-name = binding

specify that Leo will enter the named mode after executing the command. As a
special case,

    command-name -&gt; same = binding

will cause the command to be executed without changing mode.</t>
<t tx="ekr.20060121102627"></t>
<t tx="ekr.20060122105527.3"></t>
<t tx="ekr.20060122105527.7">True: (Recommended) Selecting an outline node leaves the focus in the outline pane.

If this is False it will be harder to use the arrow keys in the headline.
    
False: (Legacy) Selecting an outline node transfers focus to the body pane.</t>
<t tx="ekr.20060122105527.8"></t>
<t tx="ekr.20060125104049">True: (recommended) The Find tab shows only options, not text or buttons.
False: (legacy)     The Find tab shows text, options and buttons.</t>
<t tx="ekr.20060126075152"># True: calls to the garbage collector.</t>
<t tx="ekr.20060126083715"># True: verbose trace the garbage collector.</t>
<t tx="ekr.20060127050605">Zero (recommended): unlimited stack size.
Non-zero: limit the maximum stack size to the given number.</t>
<t tx="ekr.20060131071612">
</t>
<t tx="ekr.20060201111002"></t>
<t tx="ekr.20060202092911"></t>
<t tx="ekr.20060202113731"></t>
<t tx="ekr.20060204093736"></t>
<t tx="ekr.20060204102644"></t>
<t tx="ekr.20060204124608">True: minibuffer commands show the Find Tab.
False: minibuffer commands hide the Find Tab.

Important: the Find Tab always exists regardless of this setting.</t>
<t tx="ekr.20060206155101"></t>
<t tx="ekr.20060206161839"></t>
<t tx="ekr.20060207142012"></t>
<t tx="ekr.20060209045356"></t>
<t tx="ekr.20060210105437"></t>
<t tx="ekr.20060212101234"># True: call Python's garbage collector before every screen redraw.
# There used to be a warning about this slowing Leo, but I seen now problem with it at present.</t>
<t tx="ekr.20060212103826"># True (recommended): print a message when Leo calls gc.collect explicitly.</t>
<t tx="ekr.20060215054710"></t>
<t tx="ekr.20060216091239">True: trace all changes to the minibuffer</t>
<t tx="ekr.20060216130607">True: trace all changes to the status line.</t>
<t tx="ekr.20060216135834">True:  enable autocompletion initially.
False: disable autocomopletion initially.

You can use the enable-autocompleter and disable-autocompleter
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-autocompleter command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="ekr.20060216170801"></t>
<t tx="ekr.20060303075452">The following commands are will be useful for operating Leo without a mouse.

Clicks

click-headline
click-icon-box
double-click-headline
double-click-icon-box

Cursor moves and selection (Basic Emacs commands)

back-char
back-char-extend-selection
back-paragraph
back-paragraph-extend-selection
back-sentence
back-sentence-extend-selection
back-to-indentation
back-word
back-word-extend-selection
backward-delete-char
backward-kill-paragraph
backward-kill-sentence
backward-kill-word
beginning-of-buffer
beginning-of-buffer-extend-selection
beginning-of-line
beginning-of-line-extend-selection
buffer-prepend-to
delete-char
end-of-buffer
end-of-buffer-extend-selection
end-of-line
end-of-line-extend-selection
exchange-point-mark
forward-char
forward-char-extend-selection
forward-paragraph
forward-paragraph-extend-selection
forward-sentence
forward-sentence-extend-selection
forward-word
forward-word-extend-selection
insert-newline
kill-line
kill-to-end-of-line
kill-paragraph
kill-region
kill-region-save
kill-sentence
kill-word
move-past-close
move-past-close-extend-selection
newline-and-indent 
next-line
next-line-extend-selection
paste-text
previous-line
previous-line-extend-selection
rectangle-kill
register-point-to
scroll-down-half-page
scroll-down-line
scroll-down-page
scroll-up-line
scroll-up-page
yank
yank-pop  
zap-to-character

Focus

abort-edit-headline
cycle-focus
edit-headline
end-edit-headline
focus-to-body
focus-to-log
focus-to-minibuffer
focus-to-tree

Menus

activate-cmds-menu
activate-edit-menu
activate-file-menu
activate-help-menu
activate-outline-menu
activate-plugins-menu
activate-window-menu

Nodes: selecting, expanding and contracting

contract-all
contract-node
contract-or-go-left
contract-parent
equal-sized-panes
expand-all
expand-and-go-right
expand-next-level
expand-node
expand-or-go-right
expand-prev-level
go-back
go-forward
goto-char
goto-first-node
goto-first-sibling
goto-first-visible-node
goto-last-node
goto-last-sibling
goto-last-visible-node
goto-next-node
goto-next-sibling
goto-next-visible
goto-parent
goto-prev-node
goto-prev-sibling
goto-prev-visible

Panes

contract-body-pane
contract-log-pane
contract-outline-pane
contract-pane
expand-body-pane
expand-log-pane
expand-outline-pane
expand-pane
find-tab-hide
fully-expand-body-pane
fully-expand-log-pane
fully-expand-outline-pane
fully-expand-pane
hide-body-pane
hide-log-pane
hide-pane
hide-outline-pane
hide-spell-tab

Furthermore, the find commands are a good tool for using Leo without a mouse
(More commands are coming)

replace
replace-all
replace-then-find
find-next
find-all
find-prev
isearch-backward
isearch-backward-regexp
isearch-forward
isearch-forward-regexp
find-tab-open
# query-replace
# query-replace-regex
replace-string
search-again
search-backward
search-forward
search-with-present-options
set-replace-string

Setting find options:

enter-find-options-mode
set-find-everywhere
set-find-node-only
set-find-suboutline-only
show-find-options
toggle-find-ignore-case-option
toggle-find-in-body-option
toggle-find-in-headline-option
toggle-find-mark-changes-option
toggle-find-mark-finds-option
toggle-find-regex-option
# toggle-find-reverse-option
toggle-find-word-option
toggle-find-wrap-around-option
word-search-backward
word-search-forward</t>
<t tx="ekr.20060306031258"></t>
<t tx="ekr.20060309022759"></t>
<t tx="ekr.20060323131801">True: warn if a command has no setting.</t>
<t tx="ekr.20060325071042"></t>
<t tx="ekr.20060325071042.1"></t>
<t tx="ekr.20060325071042.2"></t>
<t tx="ekr.20060325071042.3"></t>
<t tx="ekr.20060325071916"></t>
<t tx="ekr.20060408090018"></t>
<t tx="ekr.20060425124142"></t>
<t tx="ekr.20060425125015"></t>
<t tx="ekr.20060504131831.1"></t>
<t tx="ekr.20060504131831.2"></t>
<t tx="ekr.20060504134056"></t>
<t tx="ekr.20060504134056.1"></t>
<t tx="ekr.20060504134056.2"></t>
<t tx="ekr.20060504140351"></t>
<t tx="ekr.20060504140408"></t>
<t tx="ekr.20060504140408.1"></t>
<t tx="ekr.20060504140408.2"></t>
<t tx="ekr.20060521132401">c:\Python24\Scripts\_winpdb.py</t>
<t tx="ekr.20060521134125">The debug target to use if no target is specified otherwise.

c:\prog\tigris-cvs\leo\src\leo.py
</t>
<t tx="ekr.20060521134125.1">The debug target to use regardless of the selected node or other settings.</t>
<t tx="ekr.20060524151415"></t>
<t tx="ekr.20060524151415.1">idle: use Python's standard Idle debugger.

winpdb: (recommended) use winpdb debugger.

To use winpdb you must download and install winpdb from:
http://www.digitalpeers.com/pythondebugger/

There is no special support for Idle, so you may as well open Idle using Leo's
open-python-window command.</t>
<t tx="ekr.20060531094310">True:  auto-indent regardless of how text is colored.
False: suppress auto-indenting if in range @nocolor or @kill.</t>
<t tx="ekr.20060603070801">True:  enable calltip expansion initially.
False: disable calltip expansion initially.

You can use the enable-calltips and disable-calltips
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-calltips command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="ekr.20060603215208"># These bindings are a mixture of emacs bindings, windows bindings and vim bindings.</t>
<t tx="ekr.20060603215208.19"># Quick finds
backward-find-character                     = Alt-Q
backward-find-character-extend-selection    = Alt-Shift-Q
find-character                              = None ### = Alt-P
find-character-extend-selection             = None ### = Alt-Shift-P

# To start finds and changes...
start-search                        = Ctrl-f
search-with-present-options         = None # Ctrl-f
set-replace-string                  = None # Ctrl-Shift-r
find-tab-hide                       = None
find-tab-open                       = None

clone-find-all                      = None
isearch-backward                    = Alt-R
isearch-backward-regexp             = None
isearch-forward                     = Alt-S
isearch-forward-regexp              = None
# isearch-with-present-options      = Alt-i
# query-replace                       = None
# query-replace-regex                 = None
search-backward                     = None
search-forward                      = None
word-search-backward                = None 
word-search-forward                 = None

# To coninue finds and changes...
find-next                           = F3
find-all                            = None
find-prev                           = F2
replace                              = Ctrl-=
replace-all                         = None  # Not recommended to bind this to a shortcut.
replace-then-find                   = Ctrl--

set-find-everywhere                 = Alt-Ctrl-e
set-find-node-only                  = Alt-Ctrl-n
set-find-suboutline-only            = Alt-Ctrl-s
toggle-find-ignore-case-option      = Alt-Ctrl-i
toggle-find-in-body-option          = Alt-Ctrl-b
toggle-find-in-headline-option      = Alt-Ctrl-h
toggle-find-mark-changes-option     = Alt-Ctrl-c
toggle-find-mark-finds-option       = Alt-Ctrl-f
toggle-find-regex-option            = Alt-Ctrl-x
# toggle-find-reverse-option          = Alt-Ctrl-r
toggle-find-word-option             = Alt-Ctrl-w
toggle-find-wrap-around-option      = Alt-Ctrl-a</t>
<t tx="ekr.20060603215208.20">full-command            = Alt-x
negative-argument       = None      # Alt-minus conflicts with contract-all.
repeat-complex-command  = Ctrl-P
universal-argument      = Alt-u     # Usually Ctrl-u, conflicts with move-outline-up.



</t>
<t tx="ekr.20060605081712">Recommended:
    
white                   if top_level_unbound_key_action is command
a color like MistyRose1 if top_level_unbound_key_action is insert or overwrite.

#f2fdff</t>
<t tx="ekr.20060605081712.3">Overrides body_text_foreground_color.</t>
<t tx="ekr.20060606085536">Overrides body_text_background_color.

wheat1
PeachPuff1
LemonChiffon1
cornsilk1
honeydew1
LavenderBlush1
azure2
aquamarine1</t>
<t tx="ekr.20060606085536.1">Overrides body_text_foreground_color.</t>
<t tx="ekr.20060616172614"></t>
<t tx="ekr.20060620085654">vertical:   pack body-pane editors vertically.
horizontal: pack body-pane editors horizontally.</t>
<t tx="ekr.20060627065953"></t>
<t tx="ekr.20060627084739">True: flash matching bracket when typing (, ), [, ], { or }.</t>
<t tx="ekr.20060627121646"></t>
<t tx="ekr.20060627121646.1"></t>
<t tx="ekr.20060627121646.2">The number of times to flash matching brackets.</t>
<t tx="ekr.20060627121646.3">One half the total cycle time of bracket flashes, in milliseconds.</t>
<t tx="ekr.20060704090341"></t>
<t tx="ekr.20060713101831"># Support for solozized colors requires black.</t>
<t tx="ekr.20060730101451"></t>
<t tx="ekr.20060730101451.3"></t>
<t tx="ekr.20060730101451.5"></t>
<t tx="ekr.20060804095015">Important: the order the open_flash_brackets and close_flash_brackets settings must be consistent.</t>
<t tx="ekr.20060804095015.1">Important: the order the open_flash_brackets and close_flash_brackets settings must be consistent.</t>
<t tx="ekr.20060807103220"></t>
<t tx="ekr.20060807103220.1">This is the body text of a single day node.</t>
<t tx="ekr.20060807103220.10">True: Omit saturdays if a whole year is inserted</t>
<t tx="ekr.20060807103220.11">True: Omit sundays if a whole year is inserted</t>
<t tx="ekr.20060807103220.2">This is the format of the headline if a single day node is inserted.</t>
<t tx="ekr.20060807103220.3">This is the format of day node headline if a whole month is inserted.</t>
<t tx="ekr.20060807103220.4">This is the format of the month node headline if a whole month is inserted.</t>
<t tx="ekr.20060807103220.5">True: Omit saturdays if a whole month is inserted.</t>
<t tx="ekr.20060807103220.6">True: Omit sundays if a whole month is inserted.</t>
<t tx="ekr.20060807103220.7">This is the format of the day node headline if a whole year is inserted.</t>
<t tx="ekr.20060807103220.8">This is the format of the month node headline if a whole year is inserted.</t>
<t tx="ekr.20060807103220.9">This is the format of the year node headline if a whole year is inserted.</t>
<t tx="ekr.20060822101942.1">Overrides body_text_foreground_color.</t>
<t tx="ekr.20060826152759"></t>
<t tx="ekr.20060827102902"></t>
<t tx="ekr.20060827102902.1"></t>
<t tx="ekr.20060827102902.2"></t>
<t tx="ekr.20060828110551"></t>
<t tx="ekr.20060828110551.1">Valid settings for _style strings are None, normal, bold, italic, bold-italic.</t>
<t tx="ekr.20060828110551.2"></t>
<t tx="ekr.20060828110551.3"></t>
<t tx="ekr.20060828145228.1"># php_keyword1_font_family = None
php_keyword1_font_size = None
php_keyword1_font_slant = roman
    # roman, italic
php_keyword1_font_weight = normal
    # normal, bold</t>
<t tx="ekr.20060904211808"></t>
<t tx="ekr.20060904211808.1">The path to the zodb storage.</t>
<t tx="ekr.20060913144412">@keys nodes mark as set of @shortcuts nodes.  @keys nodes are used only by the script in the node:
    
    @button Check Bindings
    
in this file.  This makes it possible for the script to produce better error messages.</t>
<t tx="ekr.20060919171527"></t>
<t tx="ekr.20060919171527.1">True:  Use &lt;:body&gt; elements to hold body text in &lt;outline&gt; elements.
False: Use :body attributes to hold body text in &lt;outline&gt; elements.</t>
<t tx="ekr.20060919171527.2">The namespace urn for the xmlns attribute of &lt;opml&gt; elements.
This value typically is not used, but it should refer to Leo in some way.</t>
<t tx="ekr.20060919173031">True: Write (as attributes of the opml &lt;outline&gt; elements) the Leo-specific
      attributes written in Leo's &lt;v&gt; elements, namely 'a',
      'descendentTnodeUnknownAttributes', 'expanded', 'marks','t', and
      'tnodeList' elements.
    
False: Do not write such attributes.</t>
<t tx="ekr.20060919173031.1">True:  Write (as attributes of the opml &lt;head&gt; element) the attributes in Leo's &lt;globals&gt; element.
False: Do not write such attributes.</t>
<t tx="ekr.20060919181622">True:  Write body text in either &lt;:body&gt; elements or :body attributes,
       depending on the opml_use_outline_elements setting.

False: Write only outlines.</t>
<t tx="ekr.20060919195145">This should be either 2.0 or 1.0.
Version 2.0 is more flexible, and should be used unless there are problems.</t>
<t tx="ekr.20060921080239">True:  Read derived files referenced from @file and @thin nodes when reading .opml files.

False: Do not read derived when reading .opml files.</t>
<t tx="ekr.20060921080239.1">True:  Write derived files when writing .opml files.

False: Do not write derived when reading .opml files.</t>
<t tx="ekr.20060922110220">True:  Write unknown attributes (uA's) in either &lt;:uA&gt; sub-elements of &lt;outline&gt; elements.

False: Do not write uA's.</t>
<t tx="ekr.20060925060533.1"># Important: arrow keys also move the cursor: all arrow keys are handled elsewhere.

back-word                           = Alt-b  
back-word-extend-selection          = Alt-Shift-b
back-to-indentation                 = None # Ctrl-space
beginning-of-line                   = None # Ctrl-a
beginning-of-line-extend-selection  = Ctrl-Shift-a
end-of-line                         = Ctrl-e
exchange-point-mark                 = Alt-M     # Should be Ctrl-X Ctrl-X.
end-of-line-extend-selection        = Ctrl-Shift-e
extend-to-line                      = Alt-L
extend-to-word                      = Ctrl-W # Alt-W
forward-paragraph                   = Alt-braceright
forward-paragraph-extend-selection  = Alt-Shift-braceright
forward-sentence                    = None # Alt-e
forward-sentence-extend-selection   = None # Alt-Shift-e
forward-word                        = None # Alt-f
forward-word-extend-selection       = None # Alt-Shift-f
goto-global-line                    = Alt-g
# match-brackets                    = Ctrl-K    # kill-line
move-past-close                     = Alt-parenright # Same as Alt-shift-parenright
move-past-close-extend-selection    = None
# next-line                         = Ctrl-N
# next-line-extend-selection        = Ctrl-Shift-N
# previous-line                     = Ctrl-P
# previous-line-extend-selection    = Ctrl-Shift-P
select-all                          = Ctrl-a</t>
<t tx="ekr.20060925060533.2">contract-pane       = Alt-Ctrl--
expand-pane         = Alt-Ctrl-=
focus-to-body       = Alt-d
focus-to-tree       = Alt-t
toggle-active-pane  = Ctrl-t
keyboard-quit       = Ctrl-g

tab-cycle-previous  = Ctrl-Prior
tab-cycle-next      = Ctrl-Next

# Possible alternatives.
# keyboard-quit     = Escape # Hard to type, interferes with dismissing dialogs.
# focus-to-tree     = Ctrl-T</t>
<t tx="ekr.20060925060533.3">clone-node                  = Ctrl-`
chapter-clone-node-to       = None
chapter-copy-node-to        = None
chapter-create              = None
chapter-move-node-to        = None
chapter-remove              = None
chapter-select              = None
contract-node               = None
copy-node                   = Shift-Ctrl-c
cut-node                    = Shift-Ctrl-x
contract-all                = Alt--
edit-headline               = Ctrl-h
delete-node                 = None
demote                      = Ctrl-}
demote                      = Ctrl-]
expand-next-level           = None
expand-node                 = Alt-]
extract                     = Shift-Ctrl-D
extract-names               = Shift-Ctrl-N
# extract-python-method       = None
# extract-section             = Shift-Ctrl-S
goto-next-clone             = Alt-N
insert-child                = Ctrl-Insert
insert-node                 = Ctrl-I
insert-node                 = Insert
insert-node                 = Shift-Insert
mark                        = Ctrl-M
move-outline-down           = Ctrl-D
move-outline-left           = Ctrl-L
move-outline-right          = Ctrl-R
move-outline-up             = Ctrl-U
paste-node                  = Shift-Ctrl-V
promote                     = Ctrl-{
promote                     = Ctrl-[</t>
<t tx="ekr.20060925060533.4">add-comments                        = Ctrl-parenleft
backward-delete-char                = BackSpace
backward-delete-char                = Shift-BackSpace
backward-delete-word                = Ctrl-BackSpace
backward-kill-word                  = Alt-BackSpace
copy-text                           = Ctrl-c        # Conflicts with Emacs ctrl-c
cut-text                            = Ctrl-x
delete-char                         = Delete
delete-char                         = Shift-Delete
delete-comments                     = Ctrl-parenright
# delete-comments                   = Shift-Ctrl-0 # Set elsewhere.
delete-word                         = Ctrl-Delete
delete-spaces                       = None
kill-line                           = Ctrl-k
kill-to-end-of-line                 = None
newline-and-indent                  = Ctrl-j # same as tab.
newline-and-indent                  = Tab
paste-text                          = Ctrl-v
reformat-paragraph                  = Shift-Ctrl-p
split-line                          = None
unindent-region                     = Shift-tab
yank                                = Ctrl-Y
yank-pop                            = Alt-Y
zap-to-character                    = Alt-z</t>
<t tx="ekr.20060925061845">close-window                = Ctrl-F4   # (was Alt-F4) Fixes bug 824087: Alt-F4 is not the same as Alt-F, c
exit-leo                    = Ctrl-q
new                         = Ctrl-n    # Ctrl-n conflicts with next-line.
open-outline                = Ctrl-o
save-file                   = Ctrl-s
write-at-file-nodes         = Shift-Ctrl-W
write-dirty-at-file-nodes   = Shift-Ctrl-Q
</t>
<t tx="ekr.20060925061845.1">auto-complete-force         = Ctrl-space
auto-complete               = period
debug                       = None
execute-script              = Ctrl-B
redo                        = Shift-Ctrl-Z

dabbrev-completion  = Alt-Ctrl-slash
dabbrev-expands     = Alt-slash
macro-call-last     = Alt-Ctrl-M

run-all-unit-tests-externally       = None
run-all-unit-tests-locally          = None
run-marked-unit-tests-externally    = Alt-4 # The new standard
run-marked-unit-tests-locally       = None
run-selected-unit-tests-externally  = Alt-5 # The new standard
run-selected-unit-tests-locally     = None

show-calltips               = parenleft
show-calltips-force         = None # This command needs work before it is useful. Alt-parenleft
sort-siblings               = Alt-A
toggle-autocompleter        = Alt-1
toggle-calltips             = Alt-2
toggle-extend-mode          = Alt-3
undo                        = Ctrl-Z</t>
<t tx="ekr.20060926160657">True: Focus moves to outline pane after editing a headline.

False: (legacy operation) Focus moves to body pane after editing a headline.
       </t>
<t tx="ekr.20060926161207.1"></t>
<t tx="ekr.20060926161207.2">@nocolor

This setting determines the initial binding for otherwise-unbound keystrokes
when no mode is in effect.  Note: the keyboard-quit command exits all modes.

The valid values are::

command:  Leo ignores the key (like Vim).
insert:  Leo inserts the key at the cursor (like Emacs)
overwrite: Leo replaces the character at the cursor.</t>
<t tx="ekr.20060930085332">True: Outline gets focus when a new window is opened.
False Body pane gets focus when a new window is opened.</t>
<t tx="ekr.20060930085532">True: (Recommended) The find commands collapse all nodes that are not ancestors of the node containing the match.
False: The find command expands nodes needed to show the match, but does not collapse any nodes.</t>
<t tx="ekr.20060930111325"></t>
<t tx="ekr.20060930111325.1">The maximum length of button names.
</t>
<t tx="ekr.20060930111325.2">True: adds a button for every @button node.
</t>
<t tx="ekr.20060930111325.3">True: define a minibuffer command for every @command node.
</t>
<t tx="ekr.20060930111325.4">True: dynamically loads plugins in @plugins nodes when a window is created.
</t>
<t tx="ekr.20060930111325.5">True: dynamically executes script in @script nodes when a window is created.  DANGEROUS!
</t>
<t tx="ekr.20060930111325.6">True: create Debug Script button.
</t>
<t tx="ekr.20060930111325.7">True: create Run Script button.

Note: The plugin creates the press-run-script-button command regardless of this setting.</t>
<t tx="ekr.20060930112030">True: create Script Button button in icon area.

Note: The plugin creates the press-script-button-button regardless of this setting.</t>
<t tx="ekr.20061002115414"></t>
<t tx="ekr.20061002115414.1">The time (in seconds) that controls how handles keystrokes when the outline pane has focus.

When two keystrokes are separated by less than this time, Leo will attempt to
find the next headline that starts with the previous match, extended by the key
just typed. Otherwise, Leo will find the next headline that starts with the key
just typed.

The outline nav search reverts to a single-character search if the extended
search fails, so in practice everything works well without thinking about what
is happening.
</t>
<t tx="ekr.20061003173413"></t>
<t tx="ekr.20061007211759">True: collapse the parent of the moved node when moving a node left.</t>
<t tx="ekr.20061009190510">True: update .leoRecentFiles.txt, creating it if if does not exist.
False: don't update .leoRecentFiles and don't create it.</t>
<t tx="ekr.20061010111324">True: (legacy) Select all headline text when editing a headline.
False: Put the cursor at the end of the headline text.</t>
<t tx="ekr.20061011082224">@language rest

myLeoSettings.leo contains your personal settings.

Settings in myLeoSettings.leo override the settings in this file.

Put myLeoSettigns.leo in your home (~) directory or in the ~/.leo directory.

Distributions of Leo do not contain myLeoSettings.leo.

Leo never changesyour personal myLeoSettings.leo file.
</t>
<t tx="ekr.20061012122620">True:  When a node is expanded, insert new nodes as the last child.
False: (legacy &amp; recommended) When a node is expanded, insert new nodes as the first child.</t>
<t tx="ekr.20061029091403"></t>
<t tx="ekr.20061210091932">True: call os.chdir(base) when handling a relative path.
      as specified by the @string relative_path_base_directory setting.
      
False: Do not call os.chdir(base) when handing a relative path.</t>
<t tx="ekr.20070115134125">True: (Recommended) The execute script command writes the script to be executed
      to a file, then executes the script using Python's execFile function. The
      script_file_path setting specifies the path to this file.
      
False (legacy): The execute script command uses Python's exec command to execute the script. </t>
<t tx="ekr.20070115134125.1">The path to the file to be written by the execute-script command.

The default path is home/.leo/scriptFile.py if no path is given.
  
Notes:
    
- This setting has effect only if the write_script_file setting is True.
- Use / to as the path delimiter, regardless of platform.
- The filename should end in .py.
</t>
<t tx="ekr.20070224073109">@enabled-plugins nodes contain the list of enabled plugins, one per line.

Comment lines starting with '#' are ignored.

Leo loads plugins in the order they appear.

There has been considerable confusion in the past about just how this works.
Please read the following carefully.

Let us distinguish two different situations.
First, what Leo does when loading a file, say x.leo initially.
Second, what Leo does when loading a second file, say y.leo, *from x.leo*.

In the first case, Leo will use the *last* found @enabled-plugins node from
the list list of settings files.  As always, the search order for settings is:

1. leo/config/leoSettings.leo
2. ~/.leo/leoSettings.leo
3. leo/config/myLeoSettings.leo
4. ~/.leo/myLeoSettings.leo
5.  x.leo

In the first case, it *is* possible to disable any or all plugins.
For example, you could put an empty @enabled-plugins node in x.leo.
If x.leo contains no @enabled-plugins node,
you could put an empty @enabled-plugins node in myLeoSettings.leo.

In the second case, plugins have *already* been loaded and enabled.
In this case, there is *no way* to disable already-loaded-and-enabled plugins.
All you can do is enable more plugins.

y.leo can enable more plugins if it contains an @enabled-plugins node that mentions more plugins.
If y.leo contains no @enabled-plugins node,
loading y.leo might cause myLeoSettings.leo to enable more plugins if

a) x.leo contained an @enabled-plugins node and
b) myLeoSettings.leo mentions plugins not mentioned x.leo

To summarize, Leo enables plugins in a (relatively) straightforward way when it loads x.leo.
Leo also enables plugins (in the same way) when loading y.leo.
But things might get confusing, depending on whether x.leo or y.leo (or both or neither)
contain @enabled-plugins nodes.
This simply can't be helped, and it is emphatically *not* a bug in Leo.

Leo acts in a reasonable manner, but it is still possible to get confused even if you know the rules.
This suggests that you refrain from putting @enabled-plugins nodes in any .leo file except myLeoSettings.leo.
That way all your .leo files will use the same plugins.
If you do put @enabled-plugins nodes in x.leo, be prepared for confusion from time to time. </t>
<t tx="ekr.20070224073109.1"># Leo loads plugins in the order they appear here.

# This node *MUST* be a child of the @settings node to take effect.

# **Important**: to change these defaults, put
# an @enabled-plugins node in myLeoSettings.leo.

# Highly-recommended plugins:

plugins_menu.py
# free_layout.py
    # Now loaded automatically.
    # needs to be early

# Recommended plugins:

contextmenu.py
    # This is required by the vim.py and xemacs.py plugins.
leo_to_html.py
mod_scripting.py
nav_qt.py
quicksearch.py
stickynotes.py
todo.py
viewrendered.py
printing.py

# Alphabetical list of all Leo plugins.

# active_path.py
# add_directives.py
# at_folder.py
# at_produce.py
# at_view.py
# attrib_edit.py
# backlink.py
# bibtex.py
# bookmarks.py
# bzr_qcommands.py
# chapter_hoist.py
# codewisecompleter.py
# colorize_headlines.py
# contextmenu.py
# ctagscompleter.py
# cursesGui.py
# datenodes.py
# debugger_pudb.py
# detect_urls.py
# dragdropgoodies.py
# dtest.py
# dump_globals.py
# empty_leo_file.py
# enable_gc.py
# expfolder.py
# FileActions.py
# free_layout.py
# ftp.py
# geotag.py
# gitarchive.py
# graphcanvas.py
# import_cisco_config.py
# initinclass.py
# interact.py
# jinjarender.py
# leo_interface.py
# leo_pdf.py
# leo_to_html.py
# leo_to_rtf.py
# leocursor.py
# leofeeds.py
# leomail.py
# leomylyn.py
# leoOPML.py
# leoremote.py
# leoscreen.py
# lineNumbers.py
# macros.py
# maximizeNewWindows.py
# mime.py
# mnplugins.py
# mod_autosave.py
# mod_framesize.py
# mod_http.py
# mod_leo2ascd.py
# mod_read_dir_outline.py
# mod_scripting.py
# mod_speedups.py
# mod_tempfname.py
# mod_timestamp.py
# multifile.py
# nav_qt.py
# nested_splitter.py
# niceNosent.py
# nodeActions.py
# nodewatch.py
# notebook.py
# open_shell.py
# outline_export.py
# paste_as_headlines.py
# plugins_menu.py
# pluginsTest.py
# pretty_print.py
# projectwizard.py
# qt_quicksearch.py
# qtframecommands.py
# quickMove.py
# quicksearch.py
# quit_leo.py
# read_only_nodes.py
# redirect_to_log.py
# rss.py
# rst3.py
# run_nodes.py
# screen_capture.py
# screencast.py
# screenshots.py
# script_io_to_body.py
# scripts_menu.py
# setHomeDirectory.py
# slideshow.py
# spydershell.py
# startfile.py
# stickynotes.py
# stickynotes_plus.py
# systray.py
# testRegisterCommand.py
# textnode.py
# todo.py
# tomboy_import.py
# trace_gc_plugin.py
# trace_keys.py
# trace_tags.py
# valuespace.py
# viewrendered.py
# vim.py
# word_count.py
# word_export.py
# xemacs.py
# xml_edit.py
# xsltWithNodes.py
# zenity_file_dialogs.py
</t>
<t tx="ekr.20070318065601">True:  Chapter commands are functional.
False: Chapter commands do not exists.</t>
<t tx="ekr.20070411101857">The body of @openwith nodes contains one or more lines of the following
form::

   tag: value

The possible tags are be::

    kind: &lt;a string&gt;

The value specifies the **opener logic**, that is, the method used to
launch the external editor, one of 'subprocess.Popen', 'os.startfile',
'os.spawnl', 'os.spawnv', 'exec'.

    arg: &lt;a string&gt;

There may be many such arg lines. Each line will be a string to be passed
as an argument to the opener logic.

Quotes in &lt;a string&gt; will be *retained*, allowing the user to specify
exactly the arguments to be passed to opener logic.</t>
<t tx="ekr.20070411101857.1"># 'subprocess.Popen',['pythonw','C:/Python24/Lib/idlelib/idle.pyw'],'.py'

ext:    .py
kind:   subprocess.Popen
arg:    pythonw
arg:    "%PYTHONHOME%/Lib/idlelib/idle.pyw"
</t>
<t tx="ekr.20070411101857.2"># 'subprocess.Popen','C:/Program Files/Microsoft Office/Office/WINWORD.exe',None

ext:    
kind:   subprocess.Popen
arg:    "C:/Program Files/Microsoft Office/Office/WINWORD.exe"</t>
<t tx="ekr.20070411101857.3"># 'subprocess.Popen','C:/Program Files/Windows NT/Accessories/wordpad.exe',None

ext:    
kind:   subprocess.Popen
arg:    "%ProgramFiles%/Windows NT/Accessories/wordpad.exe"</t>
<t tx="ekr.20070411172718">@openwith nodes in @settings trees create menu items. The openWith
plugin must be active for these settings to have any effect.

The headline of an @openwith node has the form::

    @openwith name = shortcut
    
name is name of the menu item. shortcut specifies the shortcut used to invoke
the menu item. shortcut may be None.

The body text @openwith nodes should contain a single line contain a tuple of the form::

    command,arg,ext

For example::
    
    'subprocess.Popen',['pythonw','C:/Python24/Lib/idlelib/idle.pyw'],'.py'
    
When the user selects this menu item Leo executes command(arg+path) where path
is the full path to the temp file. The ext argument specifies the extension of
the temp file. Notes:

- command is a string.  Valid values are::
    
  'subprocess.Popen'
  'os.system'
  'os.startfile'
  'os.spawnl'
  'os.spawnv'
  'exec'
  
- arg is either a single string or a list of strings.

- ext is a string or None. If None, Leo computes a file extension base on what
  @language directive is in effect.
  
- If the .leo file being loaded contains @openwith nodes, the File:Open With
menu contains only the items created by those nodes. Similarly, @openwith nodes
in myLeoSettings.leo override entries in leoSettings.leo.
</t>
<t tx="ekr.20070417071249">True: show info as plugins are loaded.</t>
<t tx="ekr.20070419103554">True:  Leo ensures that non-empty body text ends in a newline in @nosent trees.
False: Leo leaves body text alone when writing @nosent trees.</t>
<t tx="ekr.20070503080312">True: trace storage allocation in Leo's tree.</t>
<t tx="ekr.20070531103454"></t>
<t tx="ekr.20070604075218">True:  Chapter tabs appear in the outline pane.
False: Chapter tabs do not appear.</t>
<t tx="ekr.20070613133747">#propagate-key-event = Alt-C
#propagate-key-event = Alt-E
#propagate-key-event = Alt-F
#propagate-key-event = Alt-H
#propagate-key-event = Alt-P
#propagate-key-event = Alt-O
#propagate-key-event = Alt-W
</t>
<t tx="ekr.20070615094204">True: goto-next-node and goto-prev-node commands contract the selected node.</t>
<t tx="ekr.20070622214401">@nocolor-node

Please don't change this node and its descendants; they are for Leo's
developers.
</t>
<t tx="ekr.20070729101310">True: trace import commands and @auto imports.</t>
<t tx="ekr.20070803082435">True: import commands (including @auto nodes) do full checks.</t>
<t tx="ekr.20070925144534"></t>
<t tx="ekr.20070925144534.1"></t>
<t tx="ekr.20070925144534.10">Save As &amp;Zipped...</t>
<t tx="ekr.20070925144534.100"></t>
<t tx="ekr.20070925144534.101"></t>
<t tx="ekr.20070925144534.102"></t>
<t tx="ekr.20070925144534.103"></t>
<t tx="ekr.20070925144534.104"></t>
<t tx="ekr.20070925144534.105"></t>
<t tx="ekr.20070925144534.106"></t>
<t tx="ekr.20070925144534.107">Show In&amp;visibles</t>
<t tx="ekr.20070925144534.108">Setti&amp;ngs</t>
<t tx="ekr.20070925144534.109"></t>
<t tx="ekr.20070925144534.11">Save &amp;To...</t>
<t tx="ekr.20070925144534.110"></t>
<t tx="ekr.20070925144534.111"></t>
<t tx="ekr.20070925144534.112"></t>
<t tx="ekr.20070925144534.113">Pas&amp;te Node As Clone</t>
<t tx="ekr.20070925144534.114"></t>
<t tx="ekr.20070925144534.115"></t>
<t tx="ekr.20070925144534.116"></t>
<t tx="ekr.20070925144534.117"></t>
<t tx="ekr.20070925144534.118"></t>
<t tx="ekr.20070925144534.119"></t>
<t tx="ekr.20070925144534.12">Re&amp;vert To Saved</t>
<t tx="ekr.20070925144534.120"></t>
<t tx="ekr.20070925144534.121"></t>
<t tx="ekr.20070925144534.122">D&amp;e-Hoist</t>
<t tx="ekr.20070925144534.123"></t>
<t tx="ekr.20070925144534.124"></t>
<t tx="ekr.20070925144534.125"></t>
<t tx="ekr.20070925144534.126"></t>
<t tx="ekr.20070925144534.127"></t>
<t tx="ekr.20070925144534.128"></t>
<t tx="ekr.20070925144534.129"></t>
<t tx="ekr.20070925144534.13"></t>
<t tx="ekr.20070925144534.130"></t>
<t tx="ekr.20070925144534.131"></t>
<t tx="ekr.20070925144534.132"></t>
<t tx="ekr.20070925144534.133"></t>
<t tx="ekr.20070925144534.134"></t>
<t tx="ekr.20070925144534.135"></t>
<t tx="ekr.20070925144534.136"></t>
<t tx="ekr.20070925144534.137"></t>
<t tx="ekr.20070925144534.138"></t>
<t tx="ekr.20070925144534.139"></t>
<t tx="ekr.20070925144534.14"></t>
<t tx="ekr.20070925144534.140"></t>
<t tx="ekr.20070925144534.141"></t>
<t tx="ekr.20070925144534.142"></t>
<t tx="ekr.20070925144534.143"></t>
<t tx="ekr.20070925144534.144"></t>
<t tx="ekr.20070925144534.145"></t>
<t tx="ekr.20070925144534.146"></t>
<t tx="ekr.20070925144534.147"></t>
<t tx="ekr.20070925144534.148"></t>
<t tx="ekr.20070925144534.149"></t>
<t tx="ekr.20070925144534.15"></t>
<t tx="ekr.20070925144534.150"></t>
<t tx="ekr.20070925144534.151"></t>
<t tx="ekr.20070925144534.152"></t>
<t tx="ekr.20070925144534.153">Move &amp;Down</t>
<t tx="ekr.20070925144534.154">Move &amp;Left</t>
<t tx="ekr.20070925144534.155">Move &amp;Right</t>
<t tx="ekr.20070925144534.156">Move &amp;Up</t>
<t tx="ekr.20070925144534.157"></t>
<t tx="ekr.20070925144534.158"></t>
<t tx="ekr.20070925144534.159"></t>
<t tx="ekr.20070925144534.16"></t>
<t tx="ekr.20070925144534.160"></t>
<t tx="ekr.20070925144534.161"></t>
<t tx="ekr.20070925144534.162"></t>
<t tx="ekr.20070925144534.163"></t>
<t tx="ekr.20070925144534.166"></t>
<t tx="ekr.20070925144534.167"></t>
<t tx="ekr.20070925144534.168">Go To &amp;First Node</t>
<t tx="ekr.20070925144534.169">Go To First V&amp;isible</t>
<t tx="ekr.20070925144534.17">Read @auto Nodes</t>
<t tx="ekr.20070925144534.170">Go To First Si&amp;bling</t>
<t tx="ekr.20070925144534.171"></t>
<t tx="ekr.20070925144534.172">Go To Next C&amp;hanged</t>
<t tx="ekr.20070925144534.173">Go To Next &amp;Clone</t>
<t tx="ekr.20070925144534.174">Go To Next &amp;Marked</t>
<t tx="ekr.20070925144534.175">Go To Next N&amp;ode</t>
<t tx="ekr.20070925144534.176">Go To Next &amp;Sibling</t>
<t tx="ekr.20070925144534.177">Go To Next Visibl&amp;e</t>
<t tx="ekr.20070925144534.178">Go To Next Visite&amp;d</t>
<t tx="ekr.20070925144534.179"></t>
<t tx="ekr.20070925144534.18">Write @auto Nodes</t>
<t tx="ekr.20070925144534.180">Go To P&amp;arent</t>
<t tx="ekr.20070925144534.181"></t>
<t tx="ekr.20070925144534.182">Go To &amp;Prev Node</t>
<t tx="ekr.20070925144534.183">Go To P&amp;rev Sibling</t>
<t tx="ekr.20070925144534.184">Go To Pre&amp;v Visible</t>
<t tx="ekr.20070925144534.185">Go To Prev Visi&amp;ted</t>
<t tx="ekr.20070925144534.186"></t>
<t tx="ekr.20070925144534.187">Go To Last Node</t>
<t tx="ekr.20070925144534.188">Go To Last Siblin&amp;g</t>
<t tx="ekr.20070925144534.189">Go To &amp;Last Visible</t>
<t tx="ekr.20070925144534.19">Write Dirty @auto Nodes</t>
<t tx="ekr.20070925144534.190"></t>
<t tx="ekr.20070925144534.191"></t>
<t tx="ekr.20070925144534.192"></t>
<t tx="ekr.20070925144534.193"></t>
<t tx="ekr.20070925144534.194"></t>
<t tx="ekr.20070925144534.195"></t>
<t tx="ekr.20070925144534.196"></t>
<t tx="ekr.20070925144534.197"></t>
<t tx="ekr.20070925144534.198"></t>
<t tx="ekr.20070925144534.199"></t>
<t tx="ekr.20070925144534.2"></t>
<t tx="ekr.20070925144534.200"></t>
<t tx="ekr.20070925144534.201"></t>
<t tx="ekr.20070925144534.204"></t>
<t tx="ekr.20070925144534.205"></t>
<t tx="ekr.20070925144534.206"></t>
<t tx="ekr.20070925144534.207"></t>
<t tx="ekr.20070925144534.208"></t>
<t tx="ekr.20070925144534.209"></t>
<t tx="ekr.20070925144534.21">Read @&lt;file&gt; Nodes</t>
<t tx="ekr.20070925144534.210"></t>
<t tx="ekr.20070925144534.211"></t>
<t tx="ekr.20070925144534.212"></t>
<t tx="ekr.20070925144534.213"></t>
<t tx="ekr.20070925144534.215"></t>
<t tx="ekr.20070925144534.216"></t>
<t tx="ekr.20070925144534.217"></t>
<t tx="ekr.20070925144534.218"></t>
<t tx="ekr.20070925144534.219"></t>
<t tx="ekr.20070925144534.22">Write Dirty @&lt;file&gt; Nodes</t>
<t tx="ekr.20070925144534.220"></t>
<t tx="ekr.20070925144534.221"></t>
<t tx="ekr.20070925144534.222"></t>
<t tx="ekr.20070925144534.223"></t>
<t tx="ekr.20070925144534.224"></t>
<t tx="ekr.20070925144534.225"></t>
<t tx="ekr.20070925144534.226"></t>
<t tx="ekr.20070925144534.227"></t>
<t tx="ekr.20070925144534.228"></t>
<t tx="ekr.20070925144534.229"></t>
<t tx="ekr.20070925144534.23">Write Missing @&lt;file&gt; Nodes</t>
<t tx="ekr.20070925144534.230"></t>
<t tx="ekr.20070925144534.231"></t>
<t tx="ekr.20070925144534.232"></t>
<t tx="ekr.20070925144534.233"></t>
<t tx="ekr.20070925144534.234"></t>
<t tx="ekr.20070925144534.235"></t>
<t tx="ekr.20070925144534.236"></t>
<t tx="ekr.20070925144534.237"></t>
<t tx="ekr.20070925144534.238"></t>
<t tx="ekr.20070925144534.239"></t>
<t tx="ekr.20070925144534.24">Write @&lt;file&gt; Nodes</t>
<t tx="ekr.20070925144534.240"></t>
<t tx="ekr.20070925144534.241"></t>
<t tx="ekr.20070925144534.242"></t>
<t tx="ekr.20070925144534.243"></t>
<t tx="ekr.20070925144534.244"></t>
<t tx="ekr.20070925144534.245"></t>
<t tx="ekr.20070925144534.246"></t>
<t tx="ekr.20070925144534.247"></t>
<t tx="ekr.20070925144534.248"></t>
<t tx="ekr.20070925144534.249"></t>
<t tx="ekr.20070925144534.250"></t>
<t tx="ekr.20070925144534.251"></t>
<t tx="ekr.20070925144534.252"></t>
<t tx="ekr.20070925144534.253"></t>
<t tx="ekr.20070925144534.254"></t>
<t tx="ekr.20070925144534.255"></t>
<t tx="ekr.20070925144534.256"></t>
<t tx="ekr.20070925144534.257"></t>
<t tx="ekr.20070925144534.258"></t>
<t tx="ekr.20070925144534.259"></t>
<t tx="ekr.20070925144534.260"></t>
<t tx="ekr.20070925144534.261"></t>
<t tx="ekr.20070925144534.262"></t>
<t tx="ekr.20070925144534.263"></t>
<t tx="ekr.20070925144534.264"></t>
<t tx="ekr.20070925144534.265"></t>
<t tx="ekr.20070925144534.266"></t>
<t tx="ekr.20070925144534.267"></t>
<t tx="ekr.20070925144534.268"></t>
<t tx="ekr.20070925144534.269"></t>
<t tx="ekr.20070925144534.270"></t>
<t tx="ekr.20070925144534.271"></t>
<t tx="ekr.20070925144534.272"></t>
<t tx="ekr.20070925144534.273"></t>
<t tx="ekr.20070925144534.274"></t>
<t tx="ekr.20070925144534.275"></t>
<t tx="ekr.20070925144534.276"></t>
<t tx="ekr.20070925144534.277"></t>
<t tx="ekr.20070925144534.278"></t>
<t tx="ekr.20070925144534.279"></t>
<t tx="ekr.20070925144534.280"></t>
<t tx="ekr.20070925144534.281"></t>
<t tx="ekr.20070925144534.282"></t>
<t tx="ekr.20070925144534.283"></t>
<t tx="ekr.20070925144534.284"></t>
<t tx="ekr.20070925144534.286"></t>
<t tx="ekr.20070925144534.287"></t>
<t tx="ekr.20070925144534.288"></t>
<t tx="ekr.20070925144534.289"></t>
<t tx="ekr.20070925144534.290"></t>
<t tx="ekr.20070925144534.294"></t>
<t tx="ekr.20070925144534.295"></t>
<t tx="ekr.20070925144534.296"></t>
<t tx="ekr.20070925144534.297"></t>
<t tx="ekr.20070925144534.298"></t>
<t tx="ekr.20070925144534.299"></t>
<t tx="ekr.20070925144534.3">&amp;Open</t>
<t tx="ekr.20070925144534.300"></t>
<t tx="ekr.20070925144534.301"></t>
<t tx="ekr.20070925144534.302"></t>
<t tx="ekr.20070925144534.303"></t>
<t tx="ekr.20070925144534.304"></t>
<t tx="ekr.20070925144534.305"></t>
<t tx="ekr.20070925144534.306"></t>
<t tx="ekr.20070925144534.307"></t>
<t tx="ekr.20070925144534.308"></t>
<t tx="ekr.20070925144534.309"></t>
<t tx="ekr.20070925144534.310"></t>
<t tx="ekr.20070925144534.312"></t>
<t tx="ekr.20070925144534.313"></t>
<t tx="ekr.20070925144534.314"></t>
<t tx="ekr.20070925144534.315"></t>
<t tx="ekr.20070925144534.316"></t>
<t tx="ekr.20070925144534.317"></t>
<t tx="ekr.20070925144534.318"></t>
<t tx="ekr.20070925144534.319"></t>
<t tx="ekr.20070925144534.320"></t>
<t tx="ekr.20070925144534.321"></t>
<t tx="ekr.20070925144534.322"></t>
<t tx="ekr.20070925144534.323"></t>
<t tx="ekr.20070925144534.324"></t>
<t tx="ekr.20070925144534.325"></t>
<t tx="ekr.20070925144534.326"></t>
<t tx="ekr.20070925144534.327"></t>
<t tx="ekr.20070925144534.328"></t>
<t tx="ekr.20070925144534.329"></t>
<t tx="ekr.20070925144534.330"></t>
<t tx="ekr.20070925144534.334"></t>
<t tx="ekr.20070925144534.335"></t>
<t tx="ekr.20070925144534.336"></t>
<t tx="ekr.20070925144534.337"></t>
<t tx="ekr.20070925144534.338"></t>
<t tx="ekr.20070925144534.339"></t>
<t tx="ekr.20070925144534.340"></t>
<t tx="ekr.20070925144534.341"></t>
<t tx="ekr.20070925144534.342"></t>
<t tx="ekr.20070925144534.343"></t>
<t tx="ekr.20070925144534.344"></t>
<t tx="ekr.20070925144534.345"></t>
<t tx="ekr.20070925144534.346"></t>
<t tx="ekr.20070925144534.347"></t>
<t tx="ekr.20070925144534.348"></t>
<t tx="ekr.20070925144534.349"></t>
<t tx="ekr.20070925144534.350"></t>
<t tx="ekr.20070925144534.351"></t>
<t tx="ekr.20070925144534.352"></t>
<t tx="ekr.20070925144534.353"></t>
<t tx="ekr.20070925144534.354"></t>
<t tx="ekr.20070925144534.355"></t>
<t tx="ekr.20070925144534.356"></t>
<t tx="ekr.20070925144534.357"></t>
<t tx="ekr.20070925144534.358"></t>
<t tx="ekr.20070925144534.359"></t>
<t tx="ekr.20070925144534.360"></t>
<t tx="ekr.20070925144534.361"></t>
<t tx="ekr.20070925144534.362"># accel: a,b,c,d,e,f,h,i,m,p,r,s,t,u,v,w,x</t>
<t tx="ekr.20070925144534.363"></t>
<t tx="ekr.20070925144534.364"></t>
<t tx="ekr.20070925144534.365"></t>
<t tx="ekr.20070925144534.366"></t>
<t tx="ekr.20070925144534.367"></t>
<t tx="ekr.20070925144534.369"></t>
<t tx="ekr.20070925144534.370"></t>
<t tx="ekr.20070925144534.371"></t>
<t tx="ekr.20070925144534.372"></t>
<t tx="ekr.20070925144534.373"></t>
<t tx="ekr.20070925144534.374"></t>
<t tx="ekr.20070925144534.375"></t>
<t tx="ekr.20070925144534.376"></t>
<t tx="ekr.20070925144534.377"></t>
<t tx="ekr.20070925144534.378"></t>
<t tx="ekr.20070925144534.379"></t>
<t tx="ekr.20070925144534.380"></t>
<t tx="ekr.20070925144534.381"></t>
<t tx="ekr.20070925144534.382"></t>
<t tx="ekr.20070925144534.383"></t>
<t tx="ekr.20070925144534.384"></t>
<t tx="ekr.20070925144534.385"></t>
<t tx="ekr.20070925144534.386"></t>
<t tx="ekr.20070925144534.387"></t>
<t tx="ekr.20070925144534.388"></t>
<t tx="ekr.20070925144534.389"></t>
<t tx="ekr.20070925144534.390"></t>
<t tx="ekr.20070925144534.391"></t>
<t tx="ekr.20070925144534.392"></t>
<t tx="ekr.20070925144534.393"></t>
<t tx="ekr.20070925144534.394"></t>
<t tx="ekr.20070925144534.395"></t>
<t tx="ekr.20070925144534.396"></t>
<t tx="ekr.20070925144534.397"></t>
<t tx="ekr.20070925144534.398"></t>
<t tx="ekr.20070925144534.399"></t>
<t tx="ekr.20070925144534.4"></t>
<t tx="ekr.20070925144534.40"></t>
<t tx="ekr.20070925144534.400"></t>
<t tx="ekr.20070925144534.401"></t>
<t tx="ekr.20070925144534.402"></t>
<t tx="ekr.20070925144534.403"></t>
<t tx="ekr.20070925144534.404"></t>
<t tx="ekr.20070925144534.405"></t>
<t tx="ekr.20070925144534.406"></t>
<t tx="ekr.20070925144534.407">&amp;About Leo</t>
<t tx="ekr.20070925144534.408">Online &amp;Home Page</t>
<t tx="ekr.20070925144534.409">The online tutorial no longer exists.</t>
<t tx="ekr.20070925144534.41">Export &amp;Outline...</t>
<t tx="ekr.20070925144534.410"></t>
<t tx="ekr.20070925144534.411"></t>
<t tx="ekr.20070925144534.412">Open Leo&amp;Docs.leo</t>
<t tx="ekr.20070925144534.413">Open leo&amp;Plugins.leo</t>
<t tx="ekr.20070925144534.414">Open leo&amp;Settings.leo</t>
<t tx="ekr.20070925144534.415">Open &amp;myLeoSettings.leo</t>
<t tx="ekr.20070925144534.416">Open scr&amp;ipts.leo</t>
<t tx="ekr.20070925144534.417"></t>
<t tx="ekr.20070925144534.418"></t>
<t tx="ekr.20070925144534.419"></t>
<t tx="ekr.20070925144534.42">Outline To &amp;CWEB...</t>
<t tx="ekr.20070925144534.421"></t>
<t tx="ekr.20070925144534.422"></t>
<t tx="ekr.20070925144534.423"></t>
<t tx="ekr.20070925144534.424"></t>
<t tx="ekr.20070925144534.425"></t>
<t tx="ekr.20070925144534.426"></t>
<t tx="ekr.20070925144534.427"></t>
<t tx="ekr.20070925144534.43">Outline To &amp;Noweb...</t>
<t tx="ekr.20070925144534.44">&amp;Flatten Selected Outline...</t>
<t tx="ekr.20070925144534.45">&amp;Remove Sentinels...</t>
<t tx="ekr.20070925144534.46">&amp;Weave...</t>
<t tx="ekr.20070925144534.47">E&amp;xit</t>
<t tx="ekr.20070925144534.48"></t>
<t tx="ekr.20070925144534.49">Can't Undo</t>
<t tx="ekr.20070925144534.5"></t>
<t tx="ekr.20070925144534.50">Can't Redo</t>
<t tx="ekr.20070925144534.51"></t>
<t tx="ekr.20070925144534.52">Cu&amp;t</t>
<t tx="ekr.20070925144534.53">Cop&amp;y</t>
<t tx="ekr.20070925144534.54">&amp;Paste</t>
<t tx="ekr.20070925144534.55">&amp;Delete</t>
<t tx="ekr.20070925144534.56">Select &amp;All</t>
<t tx="ekr.20070925144534.57"></t>
<t tx="ekr.20070925144534.58"></t>
<t tx="ekr.20070925144534.6">&amp;Close</t>
<t tx="ekr.20070925144534.60"></t>
<t tx="ekr.20070925144534.61"></t>
<t tx="ekr.20070925144534.62"></t>
<t tx="ekr.20070925144534.63"></t>
<t tx="ekr.20070925144534.64"></t>
<t tx="ekr.20070925144534.65"></t>
<t tx="ekr.20070925144534.66"></t>
<t tx="ekr.20070925144534.67"></t>
<t tx="ekr.20070925144534.68"></t>
<t tx="ekr.20070925144534.69"></t>
<t tx="ekr.20070925144534.7">&amp;Save...</t>
<t tx="ekr.20070925144534.70"></t>
<t tx="ekr.20070925144534.71"></t>
<t tx="ekr.20070925144534.72"></t>
<t tx="ekr.20070925144534.73"></t>
<t tx="ekr.20070925144534.74"></t>
<t tx="ekr.20070925144534.75"></t>
<t tx="ekr.20070925144534.76"></t>
<t tx="ekr.20070925144534.77"></t>
<t tx="ekr.20070925144534.78"></t>
<t tx="ekr.20070925144534.79"></t>
<t tx="ekr.20070925144534.8">Save &amp;As...</t>
<t tx="ekr.20070925144534.80"></t>
<t tx="ekr.20070925144534.83">Hide Find Tab
</t>
<t tx="ekr.20070925144534.86"></t>
<t tx="ekr.20070925144534.87"></t>
<t tx="ekr.20070925144534.89"></t>
<t tx="ekr.20070925144534.9">Save As &amp;Unzipped...</t>
<t tx="ekr.20070925144534.90"></t>
<t tx="ekr.20070925144534.91"></t>
<t tx="ekr.20070925144534.92"></t>
<t tx="ekr.20070925144534.93"></t>
<t tx="ekr.20070925144534.94">Find Char Extend &amp;Sel</t>
<t tx="ekr.20070925144534.95">&amp;Back Find Char</t>
<t tx="ekr.20070925144534.96">Back Find Char Extend Sel</t>
<t tx="ekr.20070925144534.97"></t>
<t tx="ekr.20070925144534.98"></t>
<t tx="ekr.20070925144534.99"></t>
<t tx="ekr.20070925144552">New in Leo 4.4.4. Leo creates its menus using @menus trees. Within @menus trees,
@menu nodes create menus and @item nodes create menu items.

Notes:

- The menu name always follows @menu. If the menu name is 'Plugins', Leo will
create the Plugins menu and populate the menu by calling the
'create-optional-menus' hook. This creates the Plugins menu as usual.

- Nested @menu nodes contain submenus.

- The command name follows @item. If the body text of an @item node exists, this
body text is the menu name. Otherwise, the menu name is the command name.
However, if the command name starts with a '*', hyphens are removed from the
menu name.

- Menu names and command names may contain a single ampersand (&amp;). If present,
the following character is underlined in the name.

- If the command name in an @item node is just a hyphen (-), the item represents
a menu separator.</t>
<t tx="ekr.20070926082407">@language rest

All @button nodes in the @buttons tree define **global buttons** that appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this outline.

@language python
</t>
<t tx="ekr.20070926132045">@language rest

All @button nodes in the @buttons tree define **global buttons** that
appear in all Leo outlines.

All other @button nodes define **local buttons** that appear only in this
outline.

@language python
</t>
<t tx="ekr.20070927051742"></t>
<t tx="ekr.20070927051856"></t>
<t tx="ekr.20070927173324">A placeholder for the actual menu.
Leo's init code populates this menu as a special case.</t>
<t tx="ekr.20071001120755"></t>
<t tx="ekr.20071001120755.1"></t>
<t tx="ekr.20071001120755.2"></t>
<t tx="ekr.20071001120755.3"></t>
<t tx="ekr.20071001120755.4"></t>
<t tx="ekr.20071001121059">&amp;Compare Leo Files...</t>
<t tx="ekr.20071001123216"></t>
<t tx="ekr.20071004121248"></t>
<t tx="ekr.20071004121248.1"></t>
<t tx="ekr.20071004121248.2"></t>
<t tx="ekr.20071004121248.3"></t>
<t tx="ekr.20071004121248.4"></t>
<t tx="ekr.20071004121248.5"></t>
<t tx="ekr.20071004121328"></t>
<t tx="ekr.20071004121401"></t>
<t tx="ekr.20071004121619"></t>
<t tx="ekr.20071004121840"></t>
<t tx="ekr.20071004121840.1"></t>
<t tx="ekr.20071004121840.2"></t>
<t tx="ekr.20071005173455"></t>
<t tx="ekr.20071006153053">True: add stuff consisting only of whitespace to the kill ring.</t>
<t tx="ekr.20071006153725"></t>
<t tx="ekr.20071010123015">文件</t>
<t tx="ekr.20071010123015.1">新建</t>
<t tx="ekr.20071010123223.1">打开</t>
<t tx="ekr.20071024145953">False (legacy): Top pane contains outline and log panes.
True: Top pane contains only outline.  Bottom pane contains body and log panes.</t>
<t tx="ekr.20071110153046">This option has effect only when importing so-called non-strict languages,
for which leading whitespace is not terribly significant.

True: @auto warns about mismatches that occur solely in leading whitespace.</t>
<t tx="ekr.20071113084330"></t>
<t tx="ekr.20071114072753">True: the vim plugin will open @url nodes when they are double clicked.</t>
<t tx="ekr.20071114081712"></t>
<t tx="ekr.20071114081712.3"></t>
<t tx="ekr.20071114081712.4"></t>
<t tx="ekr.20071114081712.5"></t>
<t tx="ekr.20071114084709"></t>
<t tx="ekr.20071114084709.1"></t>
<t tx="ekr.20071213060239">@color</t>
<t tx="ekr.20071213060239.1"></t>
<t tx="ekr.20071213060239.2"></t>
<t tx="ekr.20071213060514"></t>
<t tx="ekr.20071213060514.1"></t>
<t tx="ekr.20071213060514.2"># Formatting options that apply to both code and rst modes....</t>
<t tx="ekr.20071213060607">rst3_code_prefix =             @rst-code     # Enter code mode.
rst3_doc_only_prefix =         @rst-doc-only # Enter doc-only mode.
rst3_rst_prefix =              @rst          # Enter rst mode.
rst3_ignore_headline_prefix =  @rst-no-head
rst3_ignore_headlines_prefix = @rst-no-headlines
rst3_ignore_node_prefix =      @rst-ignore-node
rst3_ignore_prefix =           @rst-ignore
rst3_ignore_tree_prefix =      @rst-ignore-tree
rst3_option_prefix =           @rst-option
rst3_options_prefix =          @rst-options
rst3_preformat_prefix =        @rst-preformat
rst3_show_headline_prefix =    @rst-head</t>
<t tx="ekr.20071213061454"></t>
<t tx="ekr.20071213061454.1"></t>
<t tx="ekr.20071213061454.2"></t>
<t tx="ekr.20071213061454.3"></t>
<t tx="ekr.20071213061504"></t>
<t tx="ekr.20071213061504.1"></t>
<t tx="ekr.20071213061504.2"></t>
<t tx="ekr.20071213061504.3"></t>
<t tx="ekr.20071213061811"></t>
<t tx="ekr.20071213061811.1"></t>
<t tx="ekr.20071213061811.2"></t>
<t tx="ekr.20071213061811.3">Required if using Sphinx markup.</t>
<t tx="ekr.20071213061923"># True: generate rst markup from @code and @doc parts.</t>
<t tx="ekr.20071213061923.1"># True: generate only from @doc parts.</t>
<t tx="ekr.20071213061923.2"># True: generate rst markup. False: generate plain text.</t>
<t tx="ekr.20071213061923.3"></t>
<t tx="ekr.20071213061930.1"># Can be set by @rst-no-head headlines.</t>
<t tx="ekr.20071213061930.2"></t>
<t tx="ekr.20071213061930.3"></t>
<t tx="ekr.20071213061930.4"></t>
<t tx="ekr.20071213062019"></t>
<t tx="ekr.20071213062019.1"></t>
<t tx="ekr.20071213062019.10"></t>
<t tx="ekr.20071213062019.11"></t>
<t tx="ekr.20071213062019.12"></t>
<t tx="ekr.20071213062019.13"></t>
<t tx="ekr.20071213062019.14"></t>
<t tx="ekr.20071213062019.15"></t>
<t tx="ekr.20071213062019.2"></t>
<t tx="ekr.20071213062019.3"></t>
<t tx="ekr.20071213062019.4"># Enter code mode.</t>
<t tx="ekr.20071213062019.5"># Enter doc-only mode.</t>
<t tx="ekr.20071213062019.6"># Enter rst mode.</t>
<t tx="ekr.20071213062019.7"></t>
<t tx="ekr.20071213062019.8"></t>
<t tx="ekr.20071213062019.9"></t>
<t tx="ekr.20071213190345"></t>
<t tx="ekr.20071213190345.1"></t>
<t tx="ekr.20071217093419">The body text should contain the data, one string per line.
Comments lines starting with '#' are ignored.</t>
<t tx="ekr.20080204124255"># For testing only.

start-ipython           = Alt-Shift-i
push-to-ipython         = Alt-i
</t>
<t tx="ekr.20080212084020">The encoding used for files imported by @auto if no @encoding directive is in effect.
Default is UTF-8 (case not important).</t>
<t tx="ekr.20080312071248.19">The headline contains the button name, optionally followed by an @key=val field indicating a shortcut.

The body text contains the script associated with the button.</t>
<t tx="ekr.20080312071248.20">The headline contains the command name, optionally followed by an @key=val field indicating a shortcut.

The body text contains the script associated with the command.</t>
<t tx="ekr.20080312071248.25">Denotes the tree containing active @button nodes.
@button nodes outside this tree are ignored.</t>
<t tx="ekr.20080312071248.26">Denotes the tree containing active @command nodes.
@command nodes outside this tree are ignored.</t>
<t tx="ekr.20080312075451.1">@language rest

All @command nodes in the @commands tree define **global commands** that
appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in
this outline.
</t>
<t tx="ekr.20080312075451.2">@language python
@nocolor-node

All @command nodes in the @commands tree define **global commands** that appear in all Leo outlines.

All other @command nodes define **local commands** that are defined only in this outline.
</t>
<t tx="ekr.20080315083057.7">True: (Recommended) The spell commands collapse all nodes that are not ancestors of the node containing the match.
False: The spell commands do not collapse any nodes.</t>
<t tx="ekr.20080324105006.6">True: allow linux-like pastes using a mouse's middle button.

Important: this may cause crashes on some platforms.</t>
<t tx="ekr.20080326060254.3">The default language if no @language or @comment is in effect.

Valid values are (case is ignored):

actionscript,c,csharp,css,cweb,elisp,html,java,latex,
pascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.</t>
<t tx="ekr.20080412115752.1"># Must be four entries: width,height,left,top.
# Put this in myLeoSettings.leo, **not** in individual .leo files.
# This setting has no effect unless @bool fixed_window = True

1200
800
50
50</t>
<t tx="ekr.20080510072134.2">cycle-focus                         = None # Ctrl-tab: now tab-cycle-next
cycle-all-focus                     = Ctrl-Shift-tab

back-word                           = Ctrl-LtArrow
back-word-extend-selection          = Ctrl-Shift-LtArrow
beginning-of-buffer                 = Ctrl-Home
beginning-of-buffer-extend-selection= Ctrl-Shift-Home
end-of-buffer                       = Ctrl-End
end-of-buffer-extend-selection      = Ctrl-Shift-End
forward-word                        = Ctrl-RtArrow
forward-word-extend-selection       = Ctrl-Shift-RtArrow

# beginning-of-line                   = Home
back-to-home                        = Home
beginning-of-line-extend-selection  = Shift-Home
end-of-line                         = End
end-of-line-extend-selection        = Shift-End

</t>
<t tx="ekr.20080510121331.16"># Must keep all these bindings for basic vim compatibility.

beginning-of-line           = a
# unused                    = b
# unused                    = c
enter-d-mode                = d
end-of-line                 = e
find-character              = f
# find-word                 = Shift-f
# unused                    = g
# unused                    = h
set-insert-state            = i
# unused                    = j
kill-line                   = k
select-all                  = l
# unused                    = m
# unused                    = n
focus-to-tree               = o
# unused                    = p
enter-quick-command-mode    = q
# unused                    = r
search-with-present-options = s
# toggle-from-minibuffer    = t
# unused                    = u
toggle-extend-mode          = v
forward-word                = w
back-word                   = Shift-w
delete-char                 = x
yank                        = y
undo                        = z
redo                        = Shift-z
full-command                = :
# enter-newline-insert-mode   ! body = Return

# cursor movement keys...
    # back-char           = h
    # forward-char        = l
    # next-line           = j
    # previous-line       = k
    
    # A 	Append to the end of the current line.
    # C 	Change the rest of the current line.
    # H 	To the first line of the screen.
    # I 	Insert to the start of the current line. (first non-whitespace char)
    # L 	To the the last line of the screen.
    # M 	To the middle line of the screen.
    # N 	Scan for next search match but opposite direction.
    # O 	Open a new line above and insert.
    # P 	Put characters before the cursor. Put lines above the current line.
    # V 	Start highlighting lines.
    # U 	Undo all the latest changes that were made to the current line.
    # X 	Delete characters before the cursor.
    # ^ 	Move to the first non-whitespace character of a line.
    # $ 	Move to the end of a line.
    # Ctrl + r 	Redo.
    
    # a 	Append after cursor.
    # b 	Move to the beginning of a word.
    # d6  Delete 6 lines.
    # dd  Delete the current line.
    # e  	Move to the end of a word.
    # i  	Insert before cursor.
    # o 	Open a new line below and insert.
    # n 	Scan for next search match in the same direction.
    # p 	Put (paste) the text you yanked or deleted.
        # Put characters after the cursor. Put lines below the current line.
    # r 	Overwrite one character. After overwriting the single character, go back to command mode.
    # v  	Start highlighting characters. Use the normal movement keys and commands to select text for highlighting.
        # Then use any other command, like d, on the region.
    # u  	Undo the last action.
    # x  	Delete characters under the cursor.
    # /pattern Incremental search for pattern.
    
    # # Commands for visual mode
    # &gt; Shift right.
    # &lt; Shift left.
    # c Change the highlighted text.
    # yy or Y Yank the highlighted text and copy to clipboard.
    # d Delete the highlighted text and copy to clipboar.
    
    # # Perhaps less useful
    # # ~  	Change the case of characters.
    # #   - In visual mode, change the case of highlighted characters.
    # #   - In command mode, change the case of the character uder cursor.
    # # R 	Enter insert mode but replace characters rather than inserting.
    # # E 	To the end of a whitespace-delimited word.
    # # B 	To the beginning of a whitespace-delimited word.
    
    # # Commands...
    # . repeat last complete editing command.
    # % match paren
    # : enter file (command?) mode
    # :42&lt;return&gt; go to line 42
    # :d Delete the current line.
    
    # :s/foo/bar 	Substitute foo with bar on current line
    # :s/foo/bar c Confirm each substitution. y: make match, n: skip match, a: all remaining, q: quit.
    # :s/foo/bar/g Substitute all occurances on current line.
    # :s/foo/bar/i Ignore case
    # :s/foo/bar/gi (combination of arguments)
    # :s/foo/bar/I Do not ignore case
    # :42s/foo/bar Substitute on line 42
    # :%s/foo/bar Substitute on entire file.
    # :y Yank the current line.
</t>
<t tx="ekr.20080511041907.1">#f9f0f4 light pink
#fbfdfd very light blue

For some reason, colors in the text widget do not match the colors in the canvas widget.</t>
<t tx="ekr.20080511041907.2"></t>
<t tx="ekr.20080512082834.1"># Now that we know what commands are single-line editing commands,
# Only &lt;return&gt; and arrow keys need per-pane bindings.

# These all cause problems on Ubuntu...
do-nothing  = Ctrl-DnArrow  
do-nothing  = Ctrl-UpArrow
# do-nothing  = Ctrl-PageUp  # 20130210 - TNB - defined for tab-flipping,
# do-nothing  = Ctrl-PageDn  # working in Xfce at least

end-edit-headline           ! tree = Return # Escape is also possible.
# end-edit-headline           ! tree = Escape # May interfere with dismissing dialogs.
insert-newline              ! body = Return
# enter-newline-insert-mode ! body = Return

back-char                   ! text = LtArrow
forward-char                ! text = RtArrow
next-line                   ! text = DnArrow
previous-line               ! text = UpArrow

back-char-extend-selection      ! text = Shift-LtArrow
forward-char-extend-selection   ! text = Shift-RtArrow
next-line-extend-selection      ! text = Shift-DnArrow
previous-line-extend-selection  ! text = Shift-UpArrow

contract-or-go-left         ! tree = LtArrow
expand-and-go-right         ! tree = RtArrow
goto-next-visible           ! tree = DnArrow
goto-prev-visible           ! tree = UpArrow
move-outline-down           ! tree = Shift-DnArrow
move-outline-left           ! tree = Shift-LtArrow
move-outline-right          ! tree = Shift-RtArrow
move-outline-up             ! tree = Shift-UpArrow

# These cause problems with editing headlines.
# goto-first-visible-node     ! tree= Home
# goto-last-visible-node      ! tree= End

contract-or-go-left         = Alt-LtArrow
expand-and-go-right         = Alt-RtArrow
goto-next-visible           = Alt-DnArrow
goto-prev-visible           = Alt-UpArrow
move-outline-down           = Alt-Shift-DnArrow
move-outline-left           = Alt-Shift-LtArrow
move-outline-right          = Alt-Shift-RtArrow
move-outline-up             = Alt-Shift-UpArrow
  
goto-first-visible-node     = Alt-Home
goto-last-visible-node      = Alt-End

back-page                       ! text = PageUp
back-page-extend-selection      ! text = Shift-PageUp
forward-page                    ! text = PageDn
forward-page-extend-selection   ! text = Shift-PageDn

scroll-down-half-page   ! tree = Shift-PageDn
scroll-down-page        ! tree = PageDn
scroll-up-half-page     ! tree = Shift-PageUp
scroll-up-page          ! tree = PageUp         
</t>
<t tx="ekr.20080513095644.1"># q in vim bindings.
# The mode prompt is everything following the ::
# Allows temporary rebindings without interfering with typical bindings.

--&gt; set-silent-mode
--&gt; mode-help

keyboard-quit           = Ctrl-g # not needed, but a good reminder
keyboard-quit           = Return
keyboard-quit           = Escape

rectangle-close         = c
convert-blanks          = b
convert-tabs            = t
execute-script          = e
rectangle-open          = o
repeat-complex-command  = a
reformat-paragraph      = r
remove-blank-lines      = Shift-B
sort-lines              = l
sort-siblings           = s

# enter-emacs-mode        = space
# enter-buttons-mode      = b
# enter-commands-mode     = c
# enter-edit-mode         = e
# enter-file-mode         = f
# enter-gui-mode          = g
# enter-help-mode         = h
# enter-kill-mode         = k
# enter-modes-mode        = m
# enter-outline-mode      = o
# enter-move-outline-mode = Shift-o
# enter-toggle-find-mode  = t
# enter-extract-mode      = x</t>
<t tx="ekr.20080514065934.1">- To enable vim-like bindings, put the following in the @settings tree in
  myLeoSettings.leo:

    @strings [command,insert, overwrite] top_level_unbound_key_action = command

- I like the following setting even in "legacy" operation, and I especially
recommend it, or something like it, for when using vim-like bindings:

    @color insert_mode_bg_color = #fdf5f5

It's a soft pink that contrasts nicely with the soft yellow color gets shown in
the body pane when the body pane does *not* have focus.

- *Important*: the new default setting for @bool stayInTreeAfterEditHeadline is False.
  This allows the &lt;Return&gt; key to switch into the body pane anywhere in the outline.

- vim-like bindings are defined in leoSettings.leo in the node:

    @shortcuts Vim plain keys

Play with these as you will. For multi-key sequences, like 'dd', you would have
to define a 'd' mode that handles the follow-on characters after the first d. On
my list: munge mode names so they make pleasing prompts in the minibuffer. Maybe
today.

I'd like to offer a $100 prize for the best vim simulation. This would require
modes for all plain keys that have more than one continuation. I might be
tempted to add more vim-like features, especially support for vim '.', if I knew
that people were really using heavy-duty vim bindings.

If you define your own key bindings in myLeoSettings.leo, I highly recommend
basing them on the new bindings in the '@keys EKR bindings' tree. You will
probably find that your bindings are much easier to understand.
</t>
<t tx="ekr.20080514082950.2">Overrides body_text_background_color.

#fdf5f5 A light pink.
#f0fde1 A light green.
#f9e6dd A light orange.</t>
<t tx="ekr.20080515053412.10">Dedent</t>
<t tx="ekr.20080515053412.11"></t>
<t tx="ekr.20080515053412.12"></t>
<t tx="ekr.20080515053412.13"></t>
<t tx="ekr.20080515053412.14">recent-files-menu

# This will include a copy of @popup recent-files-menu</t>
<t tx="ekr.20080515053412.15"></t>
<t tx="ekr.20080515053412.16"></t>
<t tx="ekr.20080515053412.17"></t>
<t tx="ekr.20080515053412.18">rclick-gen-context-sensitive-commands

# This is an example of a menu generator command. It will scan the
body text for
# occuurances of hyperlinks, or section headings in the current line
- Hide quoted text -
or in the
# selected text and append items to the menu that will invoke a
webbrowser or
# jump to the section as appropriate.
</t>
<t tx="ekr.20080515053412.19">@popup log is the default menu for
right clicks in the log pane.</t>
<t tx="ekr.20080515053412.20">edit-menu</t>
<t tx="ekr.20080515053412.21">@popup find-text is the default menu
for right clicks in the find text entry in the find panel.</t>
<t tx="ekr.20080515053412.22">edit-menu</t>
<t tx="ekr.20080515053412.23">@popup change-text is the default
menu for right clicks in the change text entry in the find panel.</t>
<t tx="ekr.20080515053412.24">find-text</t>
<t tx="ekr.20080515053412.25">@popup canvas is the default menu
for right clicks in the tree canvas that occur outside any other tree
widget.</t>
<t tx="ekr.20080515053412.26">to-chapter-fragment</t>
<t tx="ekr.20080515053412.27"></t>
<t tx="ekr.20080515053412.28"></t>
<t tx="ekr.20080515053412.29"></t>
<t tx="ekr.20080515053412.3"></t>
<t tx="ekr.20080515053412.30">@popup headline is the default menu
for right clicks in the text part of the headline.</t>
<t tx="ekr.20080515053412.31">@popup iconbox is the default menu
for right clicks in the icon box pane.  This will normally be
overridden by the cleo menu.</t>
<t tx="ekr.20080515053412.32">@popup plusbox is the default menu
for right clicks on the plusbox.</t>
<t tx="ekr.20080515053412.33"></t>
<t tx="ekr.20080515053412.34"></t>
<t tx="ekr.20080515053412.35">Cut

icon = Tango/16x16/actions/editcut.png</t>
<t tx="ekr.20080515053412.36">Copy

icon = Tango/16x16/actions/editcopy.png</t>
<t tx="ekr.20080515053412.37">Paste

icon = Tango/16x16/actions/editpaste.png</t>
<t tx="ekr.20080515053412.38"></t>
<t tx="ekr.20080515053412.39">Select All
#First line must be blank as we want to work out the
#label based on the command, key = value pairs may follow.</t>
<t tx="ekr.20080515053412.4"></t>
<t tx="ekr.20080515053412.40">@popup recent-files-menu is a
fragment meant to be included in other menus.

It consists of a single cascade menu which opens to show a list of
recent files. </t>
<t tx="ekr.20080515053412.41"></t>
<t tx="ekr.20080515053412.42">rclick-gen-recent-files-list</t>
<t tx="ekr.20080515053412.43"></t>
<t tx="ekr.20080515053412.44"></t>
<t tx="ekr.20080515053412.45">clone-node-to-chapter-menu</t>
<t tx="ekr.20080515053412.46"></t>
<t tx="ekr.20080515053412.47">copy-node-to-chapter-menu</t>
<t tx="ekr.20080515053412.48"></t>
<t tx="ekr.20080515053412.49">move-node-to-chapter-menu</t>
<t tx="ekr.20080515053412.5">@popup body is the default menu for
right clicks in the body pane.
</t>
<t tx="ekr.20080515053412.50">chapter-select</t>
<t tx="ekr.20080515053412.51">select-chapter-menu</t>
<t tx="ekr.20080515053412.6">edit-menu

# This will include the contents of @popup edit-text </t>
<t tx="ekr.20080515053412.7"></t>
<t tx="ekr.20080515053412.8"></t>
<t tx="ekr.20080515053412.9">Indent</t>
<t tx="ekr.20080703111151.12"># bold words in forth

forth_keyword3_family = None
forth_keyword3_font_size = None
forth_keyword3_font_slant = roman
forth_keyword3_font_weight = bold
</t>
<t tx="ekr.20080703111151.14"># bold-italic words in forth

forth_keyword4_family = None
forth_keyword4_size = None
forth_keyword4_slant = slant
forth_keyword4_weight = bold
</t>
<t tx="ekr.20080703111151.15"># italic words in forth

forth_keyword5_family = None
forth_keyword5_size = None
forth_keyword5_slant = slant
forth_keyword5_weight = normal
</t>
<t tx="ekr.20080703111151.17"># defining words in forth

forth_keyword2_family = None
forth_keyword2_size = None
forth_keyword2_slant = None
forth_keyword2_weight = None
</t>
<t tx="ekr.20080703111151.18">@language text</t>
<t tx="ekr.20080703111151.21"># bold keywords defined in forth-bold-words</t>
<t tx="ekr.20080703111151.22"># bold-italic keywords defined in @data forth-bold-italic-words</t>
<t tx="ekr.20080703111151.23"># italic keywords defined in forth-italic-words</t>
<t tx="ekr.20080705064822.1">:
variable
constant
code
</t>
<t tx="ekr.20080705064822.2"></t>
<t tx="ekr.20080705064822.3"></t>
<t tx="ekr.20080705064822.4">\Delimiter pairs for forth colorizing, one per line

[ ]
{ }
asm[ ]asm
</t>
<t tx="ekr.20080705064822.5">\ lines beginning with '\' are comments, and ignored.
\ declare any supplementary forth words you want coloured, one per line, below

\ asm[ ]asm     now string delims.
\ :             now a defining word.

!
&lt;
'
+
,
-
1+
2&gt;r
2r&gt;
2drop
2dup
2swap
::
::code
;
&lt;=
=
&gt;
&gt;=
&gt;r
r&gt;
&gt;w
w&gt;
[']
again
and
begin
code
constant
drop
dup
else
end-code
exit
host
if
include
invert
label:
macro
meta
needs
or 
picasm
repeat
return-in-w
swap
target
then
until
v-for
v-next
variable
while
@</t>
<t tx="ekr.20080705064822.6"></t>
<t tx="ekr.20080705064822.7">\ List of supplementary tokens to be syntax-coloured by Leo as Forth 'string words'.
\ Each line contains a pair of tokens.
\ Lines beginning with '\' are comments, and ignored.

" "
c" "
." "
s" "
.( )

abort" "
tty" "
ttyl" "
lcd1" "
lcd2" "
lcd1c" "
lcd2c" "
</t>
<t tx="ekr.20080801104153.2">Read @shadow Nodes</t>
<t tx="ekr.20080801104153.3">Write @shadow Nodes</t>
<t tx="ekr.20080801104153.4">Write Dirty @shadow Nodes</t>
<t tx="ekr.20080811105020.2">False: (recommended) Enable import parsing for @shadow and @auto
True: @shadow and @auto create a single node for the entire file.</t>
<t tx="ekr.20080819075811.5">This node just keeps track of the accelerators in the siblings.</t>
<t tx="ekr.20080819075811.6"></t>
<t tx="ekr.20080916092417.1"></t>
<t tx="ekr.20080916094157.1"></t>
<t tx="ekr.20080921060401.3"></t>
<t tx="ekr.20080930072519.3"></t>
<t tx="ekr.20080930072519.4">The number of buttons or widget in any one row of icons in the icon area.
If there are more than this number, a new row is created.</t>
<t tx="ekr.20081018053140.11">Don't change these unless you know what you are doing.</t>
<t tx="ekr.20081020075840.10">Argument to QSciScintilla.zoomIn method.
This allows you to increase the font size.</t>
<t tx="ekr.20081022181056.10"># Lines have the form: color, style
# color may be any kind of Qt color specifier
# The valid sytles are as follows: (capitalization is significant).
# Default Comment Number Keyword
# DoubleQuotedString SingleQuotedString
# TripleSingleQuotedString TripleDoubleQuotedString
# ClassName FunctionMethodName
# Operator Identifier
# CommentBlock UnclosedString
# HighlightedIdentifier Decorator

 red,   Comment
 green, SingleQuotedString
 green, DoubleQuotedString
 green, TripleSingleQuotedString
 green, TripleDoubleQuotedString
 green, UnclosedString
 green, Decorator
 blue,  Keyword</t>
<t tx="ekr.20081023060109.14"></t>
<t tx="ekr.20081216090156.5">The escape string that Leo inserts to represent underindented lines.

If a line starts with \\-N, Leo will write the line with N fewer spaces
than expected.

An **underindented line** is a line of body text that is indented less then
the starting line of the class, method or function in which it appears. Leo
outlines can not represent such lines exactly: every line in an external
file will have at least the indentation of any unindented line of the
corresponding node in the outline. Leo will issue a warning (not an error)
for underindented Python comment lines. Such lines can not change the
meaning of Python programs.
</t>
<t tx="ekr.20090202191501.10"></t>
<t tx="ekr.20090202191501.11"># Not used yet.</t>
<t tx="ekr.20090203131919.1">'''Check all commands mentioned in the @menus tree
   to ensure that they exist.'''

def checkMenu (p):
    for p2 in p.subtree_iter():
        if p2.h.startswith('@item'):
            checkItem(p.h,p2)

def checkItem (menuName,p):
    h = p.h[len('@item'):].replace('&amp;','').replace('*','').strip()
    if h != '-' and h not in c.commandsDict:
        print ('command not found: %s: %s' % (menuName,p.h))

menus = g.findNodeAnywhere(c,'@menus')
assert menus, 'no @menus tree'
for p in menus.subtree_iter():
    if p.h.startswith('@menu'):
        checkMenu(p.copy())

print ('done')
</t>
<t tx="ekr.20090203134354.2"></t>
<t tx="ekr.20090213065933.11"></t>
<t tx="ekr.20090408091222.1"># These are needed because Qt reports Ctrl-( as Ctrl-Shift-9, etc.

add-comments        = Ctrl-Shift-9  # Ctrl-parenleft
delete-comments     = Ctrl-Shift-0  # Ctrl-parenright
demote              = Ctrl-Shift-]  # Ctrl-}
move-past-close     = Alt-Shift-0   # Alt-parenright
promote             = Ctrl-Shift-[  # Ctrl-{
</t>
<t tx="ekr.20090430075506.7">True: write comment line of the form:
    
.. rst3: filename: &lt;filename&gt;

at start of intermediate file. Requires rst3_generate_rst and
rst3_write_intermediate_file options both to be true.</t>
<t tx="ekr.20090430173906.1">@nocolor-node

The rST markup string preceding code parts.

The default for the C, Perl, Python and Ruby languages is: 

'**code**:\n\n.. code-block:: %s\n' % language.title()

The default for all other languages is:
    
'**code**:\n\n.. class:: code\n..\n\n::\n'

A reasonable alternative would be:
    
'\n.. class:: code\n..\n\n::\n'</t>
<t tx="ekr.20090514111518.8379"></t>
<t tx="ekr.20090531084727.10893"></t>
<t tx="ekr.20090531084727.10894"></t>
<t tx="ekr.20090531084727.10895"></t>
<t tx="ekr.20090531084727.10896"></t>
<t tx="ekr.20090620112052.9070">@nocolor

The encoding assumed for strings used by the Qt plugin.
UTF-8 is a reasonable default.
Change to your Python's default encoding if you have unicode problems.</t>
<t tx="ekr.20090628075121.8432">Open &amp;quickstart.leo</t>
<t tx="ekr.20090630073313.8521"></t>
<t tx="ekr.20090630073313.8522"></t>
<t tx="ekr.20090724102842.2492">If zero, all nodes are colorized, regardless of length of body text.
If &gt; 0, only nodes whose body text are smaller than this limit are colorized.

200000</t>
<t tx="ekr.20090905151712.8546"></t>
<t tx="ekr.20100102121150.6344">
</t>
<t tx="ekr.20100107060708.6390"></t>
<t tx="ekr.20100313080341.8368"></t>
<t tx="ekr.20100313080341.8369"></t>
<t tx="ekr.20100313080341.8370"></t>
<t tx="ekr.20100313080341.8371"></t>
<t tx="ekr.20100507153425.8304">Valid values are top,bottom,left,right</t>
<t tx="ekr.20100904095239.8440">The language code for Enchant.

See http://www.rfk.id.au/software/pyenchant/tutorial.html#installation-dicts
for information about supported languages.</t>
<t tx="ekr.20100904095239.8441">Defaults to leo/plugins/spellpyx.txt</t>
<t tx="ekr.20100904134301.11000"></t>
<t tx="ekr.20100904134301.11002"># Comments lines (lines starting with '#') are ignored.
# Non-comment lines should have the form::
#
#    name=definition

# Definitions in @data abbreviation nodes override definitions in @data
# global-abbreviation nodes. Typically you would define @data abbreviation nodes
# in myLeoSettings.leo
</t>
<t tx="ekr.20100904134301.11004"># Comments lines (lines starting with '#') are ignored.
# Non-comment lines should have the form::
#
#    name=definition

# Definitions in @data abbreviation nodes override definitions in @data
# global-abbreviation nodes. Typically you would define @data abbreviation nodes
# in myLeoSettings.leo
</t>
<t tx="ekr.20100904134301.11006">True: enable abbreviations
False disable abbreviations

Typically you would enable abbreviations in myLeoSettings.leo or in individual
.leo files.</t>
<t tx="ekr.20100907092300.6957"></t>
<t tx="ekr.20100907092300.6958">Path to inkscape template file
</t>
<t tx="ekr.20100907092300.6959">Path to Inkscape executable</t>
<t tx="ekr.20100910115903.8297"></t>
<t tx="ekr.20100910115903.8299"></t>
<t tx="ekr.20100929121021.8511"></t>
<t tx="ekr.20101009103953.8642">True (recommended):
    Write "E" attribute bits in &lt;v&gt; elements.
    Leo outlines will record the expansion state of all nodes.
    
False: (Good for files like unitTest.leo)
    Suppress "E" attribute bits in &lt;v&gt; elements.
    Only the ancestors of the presently selected node will
    be expanded when Leo opens an outline.</t>
<t tx="ekr.20101104191857.8345">True:  put non-definition code in separate nodes.
False: put trailing non-definition code at the start of the next node.</t>
<t tx="ekr.20110406082808.18152"></t>
<t tx="ekr.20110406082808.18153"></t>
<t tx="ekr.20110406082808.18154"></t>
<t tx="ekr.20110510071925.14588"></t>
<t tx="ekr.20110510071925.14589">True:  show completions in a QCompleter popup.
False: show completions in Leo's Completions tab.

**Note**: this option has effect only when using the qt or qttabs gui's.
</t>
<t tx="ekr.20110510071925.14590">True: use codewise completions.
False: use leo-specific completions.

This setting is no longer used!</t>
<t tx="ekr.20110512085854.14461">True: Automatically extend the completed text to the longest common prefix of all completions.</t>
<t tx="ekr.20110530124245.18246">&amp;Import File...</t>
<t tx="ekr.20110601103939.19339">True: A *single* click in an already selected node begins editing of the headline.</t>
<t tx="ekr.20110607054506.16793"></t>
<t tx="ekr.20110607054506.16794"></t>
<t tx="ekr.20110607054506.16795"></t>
<t tx="ekr.20110607054506.16796"></t>
<t tx="ekr.20110607054506.16797"></t>
<t tx="ekr.20110607054506.16798"></t>
<t tx="ekr.20110607054506.16799"></t>
<t tx="ekr.20110607054506.16800"></t>
<t tx="ekr.20110607054506.16801"></t>
<t tx="ekr.20110607054506.16802"></t>
<t tx="ekr.20110607054506.16803"></t>
<t tx="ekr.20110607054506.16804"></t>
<t tx="ekr.20110607054506.16805"></t>
<t tx="ekr.20110607054506.16806"></t>
<t tx="ekr.20110607054506.16807"></t>
<t tx="ekr.20110607054506.16808"></t>
<t tx="ekr.20110607054506.16809"></t>
<t tx="ekr.20110607054506.16810"></t>
<t tx="ekr.20110607054506.16811"></t>
<t tx="ekr.20110607054506.16812"></t>
<t tx="ekr.20110607054506.16813"></t>
<t tx="ekr.20110607054506.16814"></t>
<t tx="ekr.20110607054506.16815"></t>
<t tx="ekr.20110607054506.16816"></t>
<t tx="ekr.20110607054506.16817"></t>
<t tx="ekr.20110607054506.16818"></t>
<t tx="ekr.20110607054506.16819"></t>
<t tx="ekr.20110607054506.16821"></t>
<t tx="ekr.20110607054506.16822"></t>
<t tx="ekr.20110607054506.16823"></t>
<t tx="ekr.20110607054506.16824"></t>
<t tx="ekr.20110607054506.16825"></t>
<t tx="ekr.20110607054506.16826"></t>
<t tx="ekr.20110607054506.16827"></t>
<t tx="ekr.20110607054506.16828"></t>
<t tx="ekr.20110607054506.16830"></t>
<t tx="ekr.20110607054506.16831"></t>
<t tx="ekr.20110607054506.16832"></t>
<t tx="ekr.20110607054506.16833"></t>
<t tx="ekr.20110607054506.16834"></t>
<t tx="ekr.20110607054506.16835"></t>
<t tx="ekr.20110607054506.16836"></t>
<t tx="ekr.20110607054506.16837"></t>
<t tx="ekr.20110607054506.16838"></t>
<t tx="ekr.20110607080101.16563"></t>
<t tx="ekr.20110611092035.16463"></t>
<t tx="ekr.20110611092035.16471"></t>
<t tx="ekr.20110611092035.16474"></t>
<t tx="ekr.20110611092035.16476">If neither is checked, Leo searches the entire outline.</t>
<t tx="ekr.20110611092035.16477"></t>
<t tx="ekr.20110611092035.16478">These commands are deprecated</t>
<t tx="ekr.20110611092035.16479"></t>
<t tx="ekr.20110611092035.16480"></t>
<t tx="ekr.20110611092035.16481"></t>
<t tx="ekr.20110611092035.16482"></t>
<t tx="ekr.20110611092035.16483"></t>
<t tx="ekr.20110611092035.16488"></t>
<t tx="ekr.20110611092035.16489"></t>
<t tx="ekr.20110611092035.16491"></t>
<t tx="ekr.20110611092035.16492"></t>
<t tx="ekr.20110612074140.16414">'''Check that all settings in leoPy.leo are defined here, and vice versa.'''

import os

class CheckSettings:
    @others

CheckSettings(c).run()
</t>
<t tx="ekr.20110612074140.16415">def run (self):
    
    verbose = False
    settings_node = g.findNodeAnywhere(self.c,'@settings')

    if not self.core_c:
        return g.error('leoPy.leo must be open')

    if not settings_node:
        return g.error('no @settings node in leoPy.leo')
    
    # Step 1: compute aList1, the list of all settings in Leo's core.
    aList1 = []
    for p in self.core_c.all_positions():
        self.get_settings(aList1,p)
        aList1 = list(set(aList1))
        aList1.sort()
        
    # Step 2: compute aList2, the list of all settings nodes in leoSettings.leo.
    aList2 = []
    for p in settings_node.subtree():
        self.get_settings_nodes(aList2,p)
        aList2 = list(set(aList2))
        aList2.sort()
        
    if verbose:
        os.system('cls')
    else:
        print('-'*10)
    
    for aList,tag in ((aList1,'leoPy.leo'),(aList2,'leoSettings.leo')):
        nl = g.choose(verbose,'\n','')
        end = g.choose(verbose,'...','')
        print('%s%s unique settings in %s%s%s' % (
            nl,len(aList),tag,end,nl))
        if verbose:
            for z in aList:
                print(z.strip())
        
    if verbose: g.es_print('done')</t>
<t tx="ekr.20110612074140.16416">def init (self):
    
    # leoPy.leo must be available.
    for f in g.app.windowList:
        c = f.c
        fn = c.shortFileName()
        if fn == 'leoPy.leo':
            self.core_c = c
            return
    else:
        self.core_c = None
</t>
<t tx="ekr.20110612074140.16417">def __init__ (self,c):

    self.c = c
    self.core_c = None
    self.settingsNames =  (
        # 'getAbbrevDict','getCommonCommands',
        # 'getDirectory',
        # 'getEnabledPlugins','getLanguage',
        # 'getMenusList','getOpenWith',
        # 'getRecentFiles','getShortcut',
        'getBool','getColor','getData',
        'getFloat','getFontFromParams',
        'getInt','getRatio','getString',
    )
    self.settingsAtNames = (
        '@bool','@color','@data','@float',
        '@int','@ratio','@strings','@string',
    )

    self.init()
</t>
<t tx="ekr.20110612074140.16419">def get_settings (self,aList,p):
    
    '''Append all settings names in position p to aList'''
        
    names = self.settingsNames
    for s in g.splitLines(p.b):
        for s2 in names:
            pat = 'config.%s' % (s2)
            i = s.find(pat)
            if i &gt; -1:
                i = g.skip_ws(s,i+len(pat))
                if g.match(s,i,'('):
                    i += 1
                    s3 = s[i:].strip()
                    for delim in ('"',"'"):
                        if s3.startswith(delim):
                            j = s3.find(delim,1)
                            if j &gt; -1:
                                s4 = s3[1:j]
                                if not s4.startswith('%'):
                                    aList.append(s4)
                                    break
                break
            i = s.find('config.get(')
            if i &gt; -1:
                break # Ignore this.
            i = s.find('config.get(')
            if i &gt; -1:
                aList.append('*** %s' % (s))
                break
</t>
<t tx="ekr.20110612074140.16478">def get_settings_nodes (self,aList,p):
    
    '''Append all settings names in position p to aList'''

    s = p.h
    for s2 in self.settingsAtNames:
        if s.startswith(s2):
            i = g.skip_ws(s,len(s2))
            if s2 == '@strings':
                j = s.find('=')
                if j &gt; -1:
                    aList.append(s[:j].strip().replace(' ',''))
            else:
                j = g.skip_id(s,i)
                if j &gt; 0:
                    word = s[i:j]
                    # aList.append(word)
                    # aList.append(s.strip())
                    if word:
                        aList.append(s[:j].strip())
                    break
            break
        i = s.find('config.get(')
        if i &gt; -1:
            break # Ignore this.
        i = s.find('config.get(')
        if i &gt; -1:
            aList.append('*** %s' % (s))
            break
</t>
<t tx="ekr.20110617081407.14760">True: Don't add characters during autocompletion that are not part of any computed completion.</t>
<t tx="ekr.20110917104720.9414"></t>
<t tx="ekr.20110917104720.9415"># The names of your classes, one per line.

Commands
vnode
position
</t>
<t tx="ekr.20110917104720.9416"># The names of your typedef types and standard types, one per line.
#
# c-to-python converts::
#
#   new aType(...)
#
# to::
#
#   aType(...)

char
void
short
long
int
double
float
unsigned</t>
<t tx="ekr.20110917104720.9417"># The instance variables (ivars) used by your programs classes.
# This creates a dictionary.  Keys are class names, values are lists of ivars.

# Lines ending with a colon specify keys.
# All other lines are comma-delimited lists of ivars for the last-seen key.
# Trailing commas are ignored.

atFile:
    mCommands, mErrors, mStructureErrors,
    mTargetFileName, mOutputFileName, mOutputStream,
    mStartSentinelComment, mEndSentinelComment, mRoot

vnode:
    mCommands, mJoinList, mIconVal, mTreeID, mT, mStatusBits

tnode:
    mBodyString, mBodyRTF, mJoinHead, mStatusBits, mFileIndex,
    mSelectionStart, mSelectionLength, mCloneIndex,

LeoFrame:
    mNextFrame, mPrevFrame, mCommands,

Commands:
# public
    mCurrentVnode, mLeoFrame, mInhibitOnTreeChanged, mMaxTnodeIndex,
    mTreeCtrl, mBodyCtrl, mFirstWindowAndNeverSaved,
#private
    mTabWidth, mChanged, mOutlineExpansionLevel, mUsingClipboard,
    mFileName, mMemoryInputStream, mMemoryOutputStream, mFileInputStream,
    mInputFile, mFileOutputStream, mFileSize, mTopVnode, mTagList,
    mMaxVnodeTag,
    mUndoType, mUndoVnode, mUndoParent, mUndoBack, mUndoN,
    mUndoDVnodes, mUndoLastChild, mUndoablyDeletedVnode,
</t>
<t tx="ekr.20111003085631.15488"></t>
<t tx="ekr.20111003085631.15489"></t>
<t tx="ekr.20111003085631.15490"></t>
<t tx="ekr.20111003104518.15499"></t>
<t tx="ekr.20111003130143.15561">**Important**: these nodes **only** specify fonts used by Leo's syntax colorizer.

To set fonts in Leo's widgets, change Leo's master sytle sheet::
    
    @data qt-gui-plugin-style-sheet 

Valid values for the body of @font nodes::
    
    weight: bold, normal, None
    slant: roman, italic, None

Use the show-fonts command to pick fonts, then copy the values shown by the
show-fonts command to the values here.
</t>
<t tx="ekr.20111004182631.15533"></t>
<t tx="ekr.20111004182631.15534">True:  Leo colors C language comments in cweb mode as black with LaTeX keywords highlighted.
Flase: Leo colors C language comments in cweb mode as comments (default red).

Note: this setting does not affect how Leo colors noweb section references and defintions.
</t>
<t tx="ekr.20111004182631.15535">True:  Leo colors @space, @* and @** sections in cweb mode as black with LaTeX keywords highlighted.
False: Leo colors @space, @* and @** sections in cweb mode as comments (default is red).

Note: this setting does not affect how Leo colors noweb section references and defintions.
</t>
<t tx="ekr.20111004182631.15536">True:  Leo colors @directives when @language plain is in effect.
False: Leo colors everything black when @language plain is in effect.
</t>
<t tx="ekr.20111004182631.15537">True: Underline undefined section names

Only functional if use_hyperlinks = 0

</t>
<t tx="ekr.20111004182631.15538">True:  underline "live" links.
False: (recommended): Underline undefined section names.
</t>
<t tx="ekr.20111004182631.15542">The color of text in doc parts.
</t>
<t tx="ekr.20111004182631.15546">The color of Leo keywords such as @ignore, @color, etc.
</t>
<t tx="ekr.20111004182631.15548">The color of name in &lt; &lt; name &gt; &gt; when name is defined.
</t>
<t tx="ekr.20111004182631.15549">The background color that represents spaces when Show Invisibles mode is in effect.

gray80: #CCCCCC
gray90: #E5E5E5
</t>
<t tx="ekr.20111004182631.15550">The foreground color that represents tabs when Show Invisibles mode is in effect.

gray80: #CCCCCC
gray90: #E5E5E5
</t>
<t tx="ekr.20111004182631.15552">The color of name in &lt;&lt; name &gt;&gt; when name is undefined.
</t>
<t tx="ekr.20111006212449.11850">class Controller:
    @others
    
Controller(c).run()</t>
<t tx="ekr.20111006212449.11851">def __init__ (self,c):
    self.c = c
    
    self.errors = 0
    
    # Commanders.
    self.core = None # Commander for leoPy.leo.
    self.plugins = None # Commander for leoPlugins.leo.
    self.settings = None # Commander for leoSettings.leo.
</t>
<t tx="ekr.20111006212449.11852">def check (self,configs_d,settings_d):
    
    table = ('Bool','Color','Int','Float',# 'Font',
        'Ratio','Path','String',
    )
    format = '%40s %s'
    
    if 1: # Less important: print missing settings.
        for kind in table:
            config_key = 'get%s' % kind
            settings_key = '@%s' % kind.lower()
            config_list = configs_d.get(config_key,[])
            settings_list = settings_d.get(settings_key,[])
            munged_config_list =   [self.munge(s) for s in config_list]
            munged_settings_list = [self.munge(s) for s in settings_list]
            print('\nmissing %s settings...' % settings_key)
            missing = set()
            for s in munged_config_list:
                # Ignore plugins settings.
                if s not in munged_settings_list:
                    missing.add(s)
            if missing:
                print(format % ('Canonical','Actual'))
                print(format % ('=' * len('Canonical'),'=' * len('Actual')))
                for s in sorted(list(missing)):
                    self.print_missing(format,s,
                        config_list,settings_list,
                        munged_config_list,munged_settings_list)
    # More important: print missing calls to c.config.getX
    if 1:
        for kind in table:
            config_key = 'get%s' % kind
            settings_key = '@%s' % kind.lower()
            config_list = configs_d.get(config_key,[])
            settings_list = settings_d.get(settings_key,[])
            munged_config_list =   [self.munge(s) for s in config_list]
            munged_settings_list = [self.munge(s) for s in settings_list]
            print('\nmissing config.%s calls...' % config_key)
            missing = set()
            for s in munged_settings_list:
                if s not in munged_config_list:
                    missing.add(s)
            if missing:
                print(format % ('Canonical','Actual'))
                print(format % ('=' * len('Canonical'),'=' * len('Actual')))
                for s in sorted(list(missing)):
                    self.print_missing(format,s,
                        settings_list,config_list,
                        munged_settings_list,munged_config_list)</t>
<t tx="ekr.20111006212449.11853">def error (self,s):
    
    print(s)
    self.errors += 1
</t>
<t tx="ekr.20111006212449.11854">def get_commanders (self):
    
    '''Open files as needed and set the commander ivars.'''
    
    def open_commander(fn):
        c = g.openWithFileName(fn,old_c=self.c,gui=g.app.nullGui)
        if c: return c
        else:
            self.error('not found: %s' % fn)
            
    self.core = open_commander(
        g.os_path_join(g.app.loadDir,'..','core','leoPy.leo'))
            
    self.plugins = open_commander(
        g.os_path_join(g.app.loadDir,'..','plugins','leoPlugins.leo'))
        
    self.settings = open_commander(
        g.os_path_join(g.app.loadDir,'..','config','leoSettings.leo'))
        
    # g.trace('\n%s\n%s\n%s' % (self.core,self.plugins,self.settings))
</t>
<t tx="ekr.20111006212449.11855">def get_configs(self):
    
    '''Return a dict containing a representation
    of all calls to x.config.getX.
    '''
    
    d = {}
    
    for c in (self.core,self.plugins):
        print('scanning: %s' % c.shortFileName())
        self.get_configs_from_outline(c,d)
    
    return d</t>
<t tx="ekr.20111006212449.11856">def get_configs_from_outline (self,c,d):
    
    '''Scan the outline for all calls to x.config.getX
    and add items to d.
    '''
    
    trace = True
    for p in c.all_positions():
        self.scan_for_configs(p,d)
    if trace:
        for key in sorted(list(d.keys())):
            print(key)
            aList = d.get(key)
            for name in sorted(aList):
                print('  ' + name)
    return d</t>
<t tx="ekr.20111006212449.11857">def scan_for_configs (self,p,d):
    
    '''Scan the body text of p, finding all calls to getX.'''
    kinds = ('getBool','getColor','getInt','getFloat',
        # '@font', # special case.
        'getRatio','getPath','getString',
    )
    i,s = 0,p.b
    while i &lt; len(s):
        progress = i
        ch = s[i]
        if (
            ch == '@' and
            (g.match(s,i,'@ ') or g.match(s,i,'@\n')) and 
            (i == 0 or s[i-1] == '\n')
        ):
            i = s.find('\n@c',i)
            if i == -1: break
        elif ch == '#':
            i = g.skip_to_end_of_line(s,i)
        elif ch in ('"',"'"):
            i = g.skip_string(s,i,verbose=False)
        elif ch == '_' or ch.isalpha():
            j = g.skip_id(s,i)
            kind = s[i:j]
            if kind in kinds:
                i = g.skip_ws(s,j)
                if g.match(s,i,'('):
                    i = g.skip_ws(s,i+1)
                    if g.match(s,i,'"') or g.match(s,i,"'"):
                        j = g.skip_string(s,i)
                        name = s[i+1:j-1]
                        aList = d.get(kind,[])
                        if name not in aList:
                            aList.append(name)
                        d [kind] = aList
            i = j
        else:
            i += 1
        assert progress &lt; i
    return d</t>
<t tx="ekr.20111006212449.11858">def get_settings (self):
    
    '''Return a dict containing a representation
    of all settings in leoSettings.leo.
    '''
    
    trace = False
    c,d = self.settings,{}
    
    print('scanning: %s' % c.shortFileName())

    settings_node = g.findNodeAnywhere(c,'@settings')
    if not settings_node:
        return self.error('no @settings node')
        
    for p in settings_node.subtree():
        if self.is_setting(p):
            kind,name = self.parse_setting(p)
            if name:
                # name = self.munge(name)
                aList = d.get(kind,[])
                if name not in aList:
                    aList.append(name)
                d [kind] = aList
            else:
                self.error('no name for %s' % (kind))
                
    if trace:
        keys = list(d.keys())
        for key in sorted(keys):
            print(key)
            aList = d.get(key)
            for name in sorted(aList):
                print('  ' + name)

    return d</t>
<t tx="ekr.20111006212449.11859">def is_setting (self,p):
    
    # For now, these are enough
    table = (
        '@bool','@color','@int','@float',
        # '@font', # special case.
        '@ratio','@path','@string',
    )
    
    for s in table:
        if g.match_word(p.h,0,s):
            return True
    return False</t>
<t tx="ekr.20111006212449.11860">def parse_setting (self,p):
    
    s = p.h
    assert s[0] == '@'
    i = g.skip_id(s,1)
    kind = s[:i]
    assert kind
    i = g.skip_ws(s,i)
    j = g.skip_id(s,i,chars='-')
    name = s[i:j]
    return kind,name</t>
<t tx="ekr.20111006212449.11861">def munge (self,s):
    
    '''Return the canonicalized name for settings and arguments to c.config.getX.'''
    
    s = s.replace('-','').replace('_','').lower()
    return g.toUnicode(s)
</t>
<t tx="ekr.20111006212449.11862">def run(self):
    
    import os ; os.system('cls')
    
    self.get_commanders()
    configs = self.get_configs()
    settings = self.get_settings()
    
    if self.errors == 0:
        self.check(configs,settings)
        
    g.trace('done')</t>
<t tx="ekr.20111007043902.15697">def print_missing(self,format,munged_s,in_list,out_list,munged_in_list,munged_out_list):
    
    '''Print the canonical name, followed by the list of names that match.'''
    assert munged_s in munged_in_list,munged_s
    assert munged_s not in munged_out_list,munged_s
    if 0: # These should not be necessary.  Something is wrong.
        # Ignore plugins settings and global switches.
        for prefix in ('color','datenodes','http','opml','rst3','todo','trace','vim','zodb'):
            if munged_s.startswith(prefix):
                return  
    # Ignore color settings.  They are handled differently...
    for suffix in ('color',):
        if munged_s.endswith(suffix):
            return
    match_list = [s for s in in_list if self.munge(s) == munged_s]
    print(format % (munged_s,match_list))</t>
<t tx="ekr.20111010200020.15684"></t>
<t tx="ekr.20111010200020.15685"></t>
<t tx="ekr.20111010200020.15686"></t>
<t tx="ekr.20111017082630.16080">'''This script reports commands that exist in some but not all key- binding
sets. setNames is a list of the roots of all such sets.'''

import leoConfig
import leoTest

parser = leoConfig.SettingsTreeParser(c)

# Add these as required to handle commands defined by plugins.
optionalCommandPrefixes = ['group-operations']
optionalCommandNames = [
    # These are the command names as defined by plugins.
    # LeoSlideShows.leo defines buttons whose commands do not end in '-command'.
    'next-slide-command','next-slide-show-command',
    'prev-slide-command','prev-slide-show-command',
    # The ipython plugin.
    'start-ipython','get-ipython-results','push-to-ipython',
]

setNames = []
setsDict = {} # keys are set names, values are dicts of command names.
shortcutsDict = {}

@others

main()
</t>
<t tx="ekr.20111017082630.16081">def defineSetNames():

    global setNames

    if 1:
        setNames = []
        for p in c.allNodes_iter():
            h = p.headString()
            if h.startswith('@keys'):
                h = h[5:].strip()
                if h not in setNames:
                    setNames.append(h)
        g.es('Found these sets...')
        for setName in setNames:
            g.es_print('  %s' % str(setName))
    else:
        setNames = [
            'Default Emacs shortcuts',
            'Legacy Leo bindings',
            'Legacy Leo shortcuts with important Emacs bindings',
            'No bindings',
            'EKR bindings: a mix',
            'EKR bindings: Mode-oriented',
        ]

    setNames.sort()
</t>
<t tx="ekr.20111017082630.16082">def doSet(p,name):

    global shortcutsDict

    shortcutsDict = {}

    for p in p.subtree_iter():
        if p.headString().startswith('@shortcuts'):
            doShortcuts(p,name)
</t>
<t tx="ekr.20111017082630.16083">def doShortcuts(p,setName):

    global parser,setsDict,shortcutsDict

    d = setsDict.get(setName,{})
    s = p.bodyString()
    lines = g.splitLines(s)
    for line in lines:
        line = line.strip()
        if line and not line.startswith('#'):
            commandName,bunch = parser.parseShortcutLine('test',line)
            if not bunch:
                g.es_print('In %s:\nmissing "=" in shortcut line:%s' % (
                    p.headString(),repr(line)),color='red')
            else:
                # Having multiple shortcuts for a command if fine,
                # But having multiple commands for a shortcut is not.
                shortcut = bunch and bunch.val
                pane = bunch and bunch.pane
                if shortcut not in (None,'None','none'):
                    aList = shortcutsDict.get(shortcut,[])
                    if aList:
                        for commandName2,pane2 in aList:
                            if pane == pane2:
                                g.es_print('duplicate shortcut %s in set %s: previous command: %s' % (
                                    shortcut,setName,commandName2),color='red')
                        else:
                            aList.append((commandName,pane),)
                    else:
                        shortcutsDict [shortcut] = [(commandName,pane),]

                data = d.get(commandName)
                if data:
                    shortcut2,pane2 = data
                    if shortcut == shortcut2 and pane == pane2:
                        g.es_print('duplicate %s in set %s' % (
                            commandName,setName),color='red')
                else:
                    data = shortcut,pane
                    d[commandName] = data

    setsDict[setName] = d
</t>
<t tx="ekr.20111017082630.16084">def checkSets():

    global setNames, optionalCommandPrefixes, optionalCommandNames

    # Compute the union of all the command names.
    allNames = {}
    for setName in setNames:
        d = setsDict.get(setName)
        if d:
            for key in d.keys():
                allNames[key] = key
        else:
            g.es_print('No setsDict for %s' % (repr(setName)),color='red')

    k = c.keyHandler
    keys = allNames.keys()
    keys.sort()

    # Warn about missing names.
    for setName in ('No bindings',): # setNames:
        d = setsDict.get(setName)
        if not d:
            g.es_print("'@keys No bindings' not found",color='red')
        for key in keys:
            if key not in ('none','None',None) and key not in d.keys():
                # Don't warn about missing 'enter-xxx-mode' commands.
                if (
                    not (key.startswith('enter-') and key.endswith('-mode')) and
                    not (key.startswith('press-') and key.endswith('-button'))
                ):
                    g.es_print('%s is missing %-35s = None' % (setName,repr(key)))

    # Warn about undefined commands.
    for key in keys:
        if not c.commandsDict.get(key):
            ok = False
            # full-command and quick command are weird special cases.
            if key not in ('None',None,'full-command','quick-command'):
                # Don't warn about missing 'enter-xxx-mode' commands.
                if key.startswith('enter-') and key.endswith('-mode'):
                    ok = True
                elif key.startswith('press-') and key.endswith('-button'):
                    ok = True
                for prefix in optionalCommandPrefixes:
                    if key.startswith(prefix):
                        ok = True
                for optionalCommand in optionalCommandNames:
                    if key == optionalCommand:
                        ok = True
                if not ok:
                    g.es_print('Undefined command name: %s' % (key))
</t>
<t tx="ekr.20111017082630.16085">def main ():

    global setNames
    defineSetNames()

    g.es_print('-' * 40)
    seen = {}
    for p in c.allNodes_iter():
        h = p.headString()
        if h.startswith('@keys'):
            h = h[5:].strip()
            if not seen.get(h):
                seen[h] = True
                doSet(p,h)
    checkSets()
    g.es('Check Bindings done')
</t>
<t tx="ekr.20111017082630.16086"></t>
<t tx="ekr.20111023095357.16693">These setting no longer do anything...
Instead, please edit::

  @data qt-gui-plugin-style-sheet

and change::

  @focused-border-style = none

to::

  @focused-border-style = solid

for the default theme.

If you're using the dark theme, now known as leo_dark_0, same deal but
after editing as above remember to select and run the 'stylesheet &amp; source'
node of that theme.</t>
<t tx="ekr.20111023095357.16694"></t>
<t tx="ekr.20111023095357.16695"></t>
<t tx="ekr.20111023095357.16696"></t>
<t tx="ekr.20111024091133.16650"></t>
<t tx="ekr.20111024091133.16651"></t>
<t tx="ekr.20111024091133.16671"></t>
<t tx="ekr.20111026083456.16490"></t>
<t tx="ekr.20111026083456.16491">import glob

path = g.os_path_finalize_join(
    g.app.loadDir,'..','plugins','*.py')
    
aList = glob.glob(path)
aList.sort()

for fn in aList:
    print(g.shortFileName(fn))</t>
<t tx="ekr.20111029055127.16614"># lowercase xml tags, one per line.

html
body
head
div
table
</t>
<t tx="ekr.20111029055127.16616"># lowercase html tags, one per line.

a
abbr
acronym
address
applet
area
b
base
basefont
bdo
big
blockquote
body
br
button
caption
center
cite
code
col
colgroup
dd
del
dfn
dir
div
dl
dt
em
fieldset
font
form
frame
frameset
head
h1
h2
h3
h4
h5
h6
hr
html
i
iframe
img
input
ins
kbd
label
legend
li
link
map
menu
meta
noframes
noscript
object
ol
optgroup
option
p
param
pre
q
s
samp
script
select
small
span
strike
strong
style
sub
sup
table
tbody
td
textarea
tfoot
th
thead
title
tr
tt
u
ul
var</t>
<t tx="ekr.20111031083623.13744"></t>
<t tx="ekr.20111031083623.13745"></t>
<t tx="ekr.20111103073536.16580"></t>
<t tx="ekr.20111109104336.12503">New in Leo 4.9.1.

True (Recommended): The contract-or-goto-parent (Alt-RtArrow) contracts all
children of the to-be-selected parent.
</t>
<t tx="ekr.20111115083813.12518"></t>
<t tx="ekr.20120205022040.15410">These are needed to handle shortcuts for the find panel!</t>
<t tx="ekr.20120205022040.15411">This setting has effect only on MacOS.

When True, bindings that appear to specify the control key actually specify the command (clover) key.</t>
<t tx="ekr.20120305084218.11271"># Unbound F-Keys cause problems on Ubuntu
help            = F1
# find-prev     = F2    # Set elsewhere
# find-next     = F3    # Set elsewhere
do-nothing      = F4
do-nothing      = F5
do-nothing      = F6
open-spell-tab  = F7
do-nothing      = F8
do-nothing      = F9
do-nothing      = F10
help-for-command= F11
help-for-python = F12

do-nothing              = Ctrl-F1
do-nothing              = Ctrl-F2
double-click-icon-box   = Ctrl-F3
# close-window          = Ctrl-F4 # Set in File Commands.
do-nothing              = Ctrl-F5
do-nothing              = Ctrl-F6
do-nothing              = Ctrl-F7
do-nothing              = Ctrl-F8
do-nothing              = Ctrl-F9
do-nothing              = Ctrl-F10
do-nothing              = Ctrl-F11
do-nothing              = Ctrl-F12

do-nothing = Shift-F1
do-nothing = Shift-F2
do-nothing = Shift-F3
do-nothing = Shift-F4
do-nothing = Shift-F5
do-nothing = Shift-F6
do-nothing = Shift-F7
do-nothing = Shift-F8
do-nothing = Shift-F9
do-nothing = Shift-F10
do-nothing = Shift-F11
do-nothing = Shift-F12</t>
<t tx="ekr.20120519193555.11830"></t>
<t tx="ekr.20120520053551.11241"></t>
<t tx="ekr.20120926072255.11432"></t>
<t tx="ekr.20120928142052.11488"></t>
<t tx="ekr.20130412173637.11774"></t>
<t tx="ekr.20130412173637.11776"></t>
<t tx="ekr.20130503155210.16364">\@menuat modifies the menu tree created by \@menus. This allows settings in
myLeoSettings.leo to change menues without copying the entire menu tree from
leoSettings.leo. This ensures you don’t miss out when new things are added in
the @menus in leoSettings.leo, as you would if you replaced the @menus in
leoSettings.leo with one in myLeoSettings.leo.

\@menuat should occur in a \@settings tree, but not as a descendant of a \@menus
tree. Its children are \@menu and \@item nodes as for the
@menu setting.

The @menuat setting has 2-3 parameters in its head text.

    @menuat *&lt;path&gt;* *&lt;action&gt;* *[clipboard]*

The path argument specifies a **target** in the menu tree as defined by
\@menus and modified by earlier @menuat settings. The path takes the form::

    /entry1/entry2/entry3
    
Each entry is the **cleaned** name of a menu or item. Cleaned names are a
name with all text except a-z and 0-9 removed and upper case letters converted
to lower case. For example, specify::

    Outline-&gt;Move-&gt;Move Down
    
as::
    
     /outline/move/movedown

The action argument specifies what the menu item does. There are 5 available
actions:

- before: Insert items and sub menus immediately before the target.
- after:  Insert items and sub menus immediately after the target.
- append: Append items and sub menus at the end of the target menu or item.
- cut:    Remove the target from the menu tree and save it to an internal clipboard.
- copy:   Copy the target to an internal clipboard. Descendants of the @menuat setting are ignored.

The cut and copy arguments ignore descendants of the @menuat setting .

The optional clipboard argument modifies the action of the before, after, and
append actions. By default these actions insert the menus and items supplied as
descendants of the @menuat setting. If you specify “clipboard” (without the
quotes) as the source, the contents of the clipboard from a previous cut or copy
action will be used instead.</t>
<t tx="ekr.20130705090546.10662">The maximum number of lines to color at once, when NEW_COLORER is True</t>
<t tx="ekr.20130705090546.10663">The delay, in milliseconds, to wait before resuming recoloring, when NEW_COLORER is True.</t>
<t tx="ekr.20130807090137.20911"></t>
<t tx="ekr.20130807090137.20912"></t>
<t tx="ekr.20130924110246.13745">Scripting abbreviations will be enabled if:
    
1. @bool enable-abbreviations = True
2. *either* this setting or @bool scripting-at-script-nodes = True</t>
<t tx="ekr.20131003040744.17561">vr-toggle = Alt-0</t>
<t tx="ekr.20131007055150.13034"></t>
<t tx="ekr.20131008181812.17533">False: disable all drag and drop operations in the outline.</t>
<t tx="ekr.20131009050634.17656"></t>
<t tx="ekr.20131027064821.18683"></t>
<t tx="ekr.20131028155339.18637">Open &amp;CheatSheet.leo</t>
<t tx="ekr.20131112150804.18737">True: the execute-script command executes the entire body, even if text is selected.</t>
<t tx="ekr.20131112161153.4420">True: use built-in vim emulation.</t>
<t tx="ekr.20131115075142.18226">\@outline-data nodes and their descendants create settings whose values are
entire trees. Here's how it works:

The *value* returned by c.config.getOutlineData is the xml string created when
Leo pastes the @outline-data node to the clipboard. As a result, Leo can use all
the standard configuration code for @outline-data! Settings in a local file
override myLeoSettings.leo settings, which override settings in leoSettings.leo.

To retrive the value of an @outline-data setting::

    s = c.config.getOutlineData(setting-name)
    c.fileCommands.leo_file_encoding='utf-8' p =
    c.pasteOutline(s=tree_s,redrawFlag=False,undoFlag=False)
    
This makes the outline available for further processing.

For example, to handle tree-valued abbreviations, the inint code in the
abbrevCommandsClass pastes the outline into the present outline, uses the pasted
outline to discover tree-valued abbreviations, and then *deletes* the tree.

</t>
<t tx="ekr.20131115092802.18224">/* Documentation of Qt stylesheets at http://qt-project.org/doc/qt-4.8/stylesheet.html */

/* 
   Buttons may be styled by name:
      QPushButton#&lt;button text&gt;-button { &lt;style&gt; }
   or by kind:
      QPushButton[button_kind="&lt;button kind&gt;"] { &lt;style&gt; }
   Button kinds are:
   'run-script' (the singleton run-script button),
   'debug-script',
   'script-button-button' (the singleton script-button button), 
   'script-button' (buttons created by the script-button button),
   'generic-button' (default), 
   'quick-move' from the quickMove plugin,
   'interact' from the interact plugin,
   'at-button' (created from @button nodes)
   Search 'button_kind' below for button styling examples.
   
*/

/* Valid color names: http://www.w3.org/TR/SVG/types.html#ColorKeywords */

/*
    Important: this stylesheets is responsible for most, but *not* all, of Leos appearance.
    See also settings in "Colorizer and colors" 
*/

QScrollArea {
    background-color: white;
}

/* Components of the Find Tab */

QWidget#findTab {
    background-color: white;
}

QLabel#findHeading {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel#findLabel {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel#changeLabel {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel#findHelp {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLineEdit#findPattern {
    font-family: DejaVu Sans Mono;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLineEdit#findChange {
    font-family: DejaVu Sans Mono;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* A QWidget: supports only background attributes.*/

QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    color: @text-foreground-tree;
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    font-family: @font-family;
    font-size: @font-size-tree;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
    show-decoration-selected: 1 /* 1: select entire row */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    font-family: @font-family;
    font-size: @font-size-tree;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: white; /* #f2fdff; */
    color: @text-foreground-log;
    selection-color: white;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family: @font-family;
    font-size: @font-size-log;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: white; /* #fdf5f5; A kind of pink. */
    color: @text-foreground-body;
    selection-color: white;
    selection-background-color: lightgrey;
    font-family: @font-family;
    /* font-family: Courier New; */
    font-size: @font-size-body;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}

/* The text "Minibuffer" in the minibuffer area.

Do not overide QLabel directly.  It is used for dialog text.
*/

QLabel#minibufferLabel {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal;
    font-style: normal;
}

/* 
QLabel {
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal;
    font-style: normal;
    border: 2px;
    margin: 2px;
}
*/


/* The mini-buffer

**Important**: Because Leo changes the color of the minibuffer dynamically,
stylesheets can not be used. Instead, set the desired colors using one of the
following settings, with defaults as shown::

    @color minibuffer-background-color = lightblue
    @color minibuffer-error-color = red
    @color minibuffer-foreground-color = black
    @color minibuffer-warning-color = lightgrey
*/

QLineEdit#lineEdit {
    color: @minibuffer_foreground_color;
    background-color: @minibuffer_background_color;
}

QLineEdit#lineEdit[style_class ~= 'minibuffer_warning'] {
    background-color: @minibuffer_warning_color;
}

QLineEdit#lineEdit[style_class ~= 'minibuffer_error'] {
    color: @minibuffer_error_color;
    background-color: @minibuffer_warning_color;
}


QLineEdit#lineEdit {
    selection-color: white;
    selection-background-color: lightgrey;
    font-family: @font-family;
    font-size: 10pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLineEdit#status1 {
    background-color: lightgrey;
    border-width: 1px;
    border-style: solid;
    border-color: darkgrey;
    font-size: 10pt;
}

QLineEdit#status2 {
    background-color: lightgrey;
    border-width: 1px;
    border-style: solid;
    border-color: darkgrey;
    font-size: 10pt;
}

/* button_kind based button coloring */
QPushButton[button_kind="run-script"] { 
    background-color: @run-script-btn-bg; }
QPushButton[button_kind="debug-script"] { 
    background-color: @debug-script-btn-bg; }
QPushButton[button_kind="generic-button"] { 
    background-color: @generic-button-btn-bg; }
QPushButton[button_kind="quick-move"] { 
    background-color: @quick-move-btn-bg; }
QPushButton[button_kind="interact"] { 
    background-color: @interact-btn-bg; }
QPushButton[button_kind="at-button"] { 
    background-color: @at-button-btn-bg; }
QPushButton[button_kind="script-button"] { 
    background-color: @script-button-btn-bg; }
/* example of name based button coloring.  Coincidentally, the
   name and button_kind of this button are the same */
QPushButton#script-button-button { 
    background-color: @script-button-button-btn-bg; }

QPlainTextEdit#screencastcaption {
    background-color: yellow;
    font-family: @font-family; /* Times New Roman; */
    font-size: 18pt;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* focused pane border highlight */
QTextEdit#log-widget, LeoQTreeWidget#treeWidget, QTextEdit#richTextEdit { 
  border-style: @focused-border-style;
  border-width: @focused-border-width; 
  border-color: @focused-border-unfocus-color; 
}
QTextEdit:focus#log-widget, LeoQTreeWidget:focus#treeWidget, QTextEdit:focus#richTextEdit { 
  border-style: @focused-border-style;
  border-width: @focused-border-width; 
  border-color: @focused-border-focus-color; 
}
</t>
<t tx="ekr.20131117052950.18283"></t>
<t tx="ekr.20131117052950.18285"></t>
<t tx="ekr.20131117053425.19894"></t>
<t tx="ekr.20131119060731.22451"></t>
<t tx="ekr.20131119060731.22454"></t>
<t tx="ekr.20131119143342.18879">This is the "default" theme.</t>
<t tx="ekr.20131119143342.20107">True: start-find command puts focus in minibuffer.
False: start-find commands puts focus in Find panel.</t>
<t tx="ekr.20131119143342.20108"></t>
<t tx="ekr.20131121211048.17566">Toggle &amp;Ignore Case




</t>
<t tx="ekr.20131121211048.17567">Find In &amp;Node</t>
<t tx="ekr.20131121211048.17568">Toggle Mark &amp;Changes</t>
<t tx="ekr.20131121211048.17569">Toggle Mark &amp;Finds</t>
<t tx="ekr.20131121211048.17570">Toggle Regular E&amp;xpression</t>
<t tx="ekr.20131121211048.17571">Toggle &amp;Whole Word</t>
<t tx="ekr.20131121211048.17572">Toggle Wrap &amp;Around</t>
<t tx="ekr.20131121211048.17573">Find &amp;Everywhere</t>
<t tx="ekr.20131121211048.17574">Alt+Ctrl+E set-find-everywhere
Alt+Ctrl+N set-find-node-only
Alt+Ctrl+S set-find-suboutline-only</t>
<t tx="ekr.20131121211048.17575">Find In &amp;Suboutline</t>
<t tx="ekr.20131121211048.17576"></t>
<t tx="ekr.20131121211048.17577"></t>
<t tx="leohag.20081204085551.13"></t>
<t tx="nh910.20110621123823.3423"></t>
<t tx="peckj.20130514082859.5599"></t>
<t tx="peckj.20130514082859.5600">This defines the font size for body text in print outs.

Size is in px.  Default 12.</t>
<t tx="peckj.20130514082859.5601">This determines the font family for print outs.  It's highly recommended
to choose a monospaced font.

Default: DejaVu Sans Mono</t>
<t tx="peckj.20131012154112.5294">Settings for the rss.py plugin.</t>
<t tx="peckj.20131012154112.5295">Format for headlines of RSS feed entries.  Valid tokens are:

&lt;date&gt; - the date, formatted according to `@string rss-date-format`
&lt;title&gt; - the entry title
&lt;link&gt; - the entry link (not recommended in headline)
&lt;summary&gt; - the entry summary (extremely not recommeded in headline)</t>
<t tx="peckj.20131012154112.5296">@url &lt;link&gt;
\n
&lt;title&gt;
&lt;date&gt;
\n
&lt;summary&gt;</t>
<t tx="peckj.20131012154112.5297">A valid string to act as the `fmt` string datetime.time.strftime().</t>
<t tx="peckj.20131012154112.5298">If True, newer entries are on top.
If False, older entries are on top.</t>
<t tx="peckj.20131101143409.5814"></t>
<t tx="peckj.20131101143409.5816">@
Default False

If True, all @settings-&gt;@nodewatch nodes in the current outline are executed when the outline loads.

@c</t>
<t tx="peckj.20131113130420.8678">@killcolor 

True: create minibuffer commands for each @rclick node.
Default False.</t>
<t tx="tbrown.20081003103821.1">True: if the same file (basename) occurs more than once in the recent files
list, i.e. on two different paths it will appear as a submenu with the basename
as its heading, and the two (or more) paths as its entries.  This is easier to
scan visually than multiple full paths.  If recent_files_omit_directories is
True this setting has no effect.

False: don't use submenus for multiple path entries, unless recent_files_group_always
is true (and recent_files_omit_directories is False)
</t>
<t tx="tbrown.20081003103821.2">True: same as recent_files_group, except that even files (basenames) which are unique
have their containing path listed in the submenu - so visual clutter is reduced
but you can still see where things come from before you load them.

False: don't use submenus for multiple path entries, unless recent_files_group
is true (and recent_files_omit_directories is False)
</t>
<t tx="tbrown.20091129085043.11789"></t>
<t tx="tbrown.20091129085043.11790">file type (auto, shadow, etc.) without the '@', to use when
loading files</t>
<t tx="tbrown.20091129085043.11792">event hook used by active_path, icondclick1 is probably best</t>
<t tx="tbrown.20091129085043.11793"># regular expressions (case insensitive) for files/directories
# active_path won't list, one per line.
#
# NOTE: directory names are always wrapped in '/', so write a
# pattern to target '/.svn/' (e.g. "^/\.bzr/$"), not '.svn'.
#
# e.g.
#
#   ^/\.bzr/$    - ignore directories called '.bzr'
#   \.pyc$     -ignore files ending in '.pyc'
</t>
<t tx="tbrown.20091129085043.11795"># regular expressions (case insensitive) for files/directories
# active_path loads automatically
# e.g.
#
#   ^readme    - load any file starting with 'readme'
</t>
<t tx="tbrown.20100304170159.5189">Should active_path load docstrings for python files?</t>
<t tx="tbrown.20100401100336.16108">controls the maximum time active_path will spend on a recursive operation.</t>
<t tx="tbrown.20100401100336.31583">controls the maximum size file active_path will open without query.</t>
<t tx="tbrown.20100524101550.4704">@wrap

This setting specifies **indicator text** that indicates that an @button button has right-click menu items created by @rclick nodes.

Unicode chars like ▼ ▾ and … are typical choices for this text.

For each @button node, Leo adds right-click menu items for:

- @rclick nodes directly *following* the @button.

- @rclick nodes that are *children* of the @button node, provided that the @button node has no ``@others`` directive.

**Important**: Leo adds two standard right-click menu items for each @button node: ``Remove Button`` and ``Goto Script``. Leo adds the indicator text **only** to buttons that contain right-click menu items in addition to these two standard right-click menu items.</t>
<t tx="tbrown.20110212091818.20118">Set to False, dragging nodes between different outlines
creates copies.  Set to True, the node is moved and no
longer exists in the source outline.</t>
<t tx="tbrown.20110430104941.30247"></t>
<t tx="tbrown.20110430104941.30250">When displaying the other end of a link in the list of links
backlink uses the headline of the other node.  This setting
prepends (negative values) or appends (positive values) the
required number of parent names to the other nodes name.

So for example, you may see links listed as:
    
    &lt;- taxa
    &lt;- taxa
    &lt;- taxa

which is not helpful.  By setting this value to 1, you would see

    &lt;- taxa &lt; source_field
    &lt;- taxa &lt; observation
    &lt;- taxa &lt; record

where the extra information is the name of the linked node's parent.
</t>
<t tx="tbrown.20111114201921.23020"># extensions for files/directories
# active_path will load as binary, i.e. using external software
# use lower case only
.pdf
</t>
<t tx="tbrown.20120820202856.25328">If this @string is set to something other than None, *and*
@bool scripting-at-script-nodes = True, then substitutions
will be made when abbreviations are inserted.  For example
set abbreviations-subst-start to ``{|{`` and
abbreviations-subst-end to ``}|}`` and an abbreviation
like::

    date;;={|{import time;x=time.asctime()}|}

will expand to something like "Mon Aug 20 22:00:40 2012"

See also abbreviations-subst-env.
</t>
<t tx="tbrown.20120820202856.25329">See abbreviations-subst-start.  This setting,
abbreviations-subst-end, has no effect if
abbreviations-subst-start is not set.</t>
<t tx="tbrown.20120820202856.25330"># Modified by EKR 2013/09/25: revised docstring and improved get_user().

"""

**Important**: scripting abbreviations are in effect only if the following
settings are in effect::
    
    @bool enable-abbreviations = True
    @bool abbreviations-subst-start = True
    
and one (or both) of the following are in effect::
    
    @bool scripting-at-script-nodes = True
    @bool scripting-abbreviations = True

This node defines the environment in which substitution scripts are
evaluated. For example, if this node contains `import time`, then an
abbreviation like::

    date;;={|{import time;x=time.asctime()}|}

can be written more simply as::

    date;;={|{x=time.asctime()}|}

The environment will contain the following pre-defined values:

- `c` and `g`, as usual.
- `values`: a dict. see ask() and get() below.
- `_abr`, the abbreviation being expanded.

"""

# helpful imports
import os
import sys
import time
import datetime

# Helpers for the class, def etc. template abbreviations in @data abbreviations-examples.

try:
    import pwd  # for full name of user in templates
except:
    pwd = None

def ask(s, default=""):
    """Ask, always, for a value for template field 's'"""
    x = g.app.gui.runAskOkCancelStringDialog(c, s, s, default=default)
    _values[s] = x
    return x

def get(s, default=""):
    """Ask for template field 's' only if not already known"""
    if s in _values:
        return _values[s]
    else:
        return ask(s, default=default)
  
# EKR: don't crash if os.environ['LOGNAME'] does not exist.
try:
    _user_name = os.environ['LOGNAME']
    if pwd and _user_name:
        _user_name = pwd.getpwnam(_user_name).pw_gecos.rstrip(',')
except KeyError:
    _user_name = None

def user_name():
    """get user's full name if available"""
    global _user_name
    if not _user_name:
        _user_name = ask('LOGNAME','LOGNAME')
    return _user_name

def file_name():
    """dafault name of this file if implied by headline"""
    if c.p.h.endswith(".py"):
        return g.os_path_split(c.p.h)[-1]
    return ".py"

def in_class():  # return "self, " if in a class definition
    """return "self" if in a class definition (from headline)"""
    for nd in c.p.self_and_parents_iter():
        if nd.h.startswith('class'):
            return "self, "
    return ""

def param_doc(k=None):
    """make an epydoc / rst style parameter documentation block"""
    if not k:
        k = "Params, comma sep."
        indent = '    '
    else:  # assume in an __init__ def'n
        indent = '        '
    if k in _values and _values[k]:
        return "\n\n%s:Parameters:\n%s" % (indent, '\n'.join(
            ["%s- `%s`: &lt;|describe %s|&gt;" % (
                indent, i.split('=',1)[0].strip(), i.split('=',1)[0].strip()
             ) for i in _values[k].split(',')]))
    return ""

def long_word():
    """example of an abbreviation substitution which inspects
    the current content of the body text, see `;;;` example
    in @@data abbreviations-examples
    """
    words = c.p.b.split()
    w = c.frame.body.bodyCtrl
    i = w.getInsertPoint() - len(_abr)
    b = c.p.b
    s = []
    while i and b[i].isalpha():
        s[0:0] = b[i]
        i -= 1
    s = ''.join(s)
    for i in words:
        if i.startswith(s) and i != s:
            return i[len(s):]
    return ''

def close_xml():
    """simple, but usually right, code to close open XML tags"""
    w = c.frame.body.bodyCtrl
    i = w.getInsertPoint() - len(_abr)
    b = c.p.b
    skips = 1
    while i and skips:
        s = []
        while i and b[i] != '&gt;':
            i -= 1
        i -= 1
        while i and (b[i] != '&lt;' or (s and b[i] == '&lt;' and s[0] == '/')):
            s[0:0] = b[i]
            i -= 1
            if s and s[0] == '&lt;' and len(s) &gt; 1 and s[1] == '/':
                skips += 1  # a closed tag indicates search one more tag
        skips -= 1
    s = ''.join([i if i.isalpha() else ' ' for i in s])
    if s.strip():
        return "&lt;/%s&gt;" % (s.split(None, 1)[0])
    else:
        return "&lt;/"

def django_tag():
    """expand {block content} to 
       {% block content %}\n{% end_block content %} with proper
       indentation (for Django web templates)"""
    from PyQt4 import QtCore
    w = c.frame.body.bodyCtrl
    i = w.getInsertPoint() - len(_abr)
    b = c.p.b
    s = []
    while i and b[i] != '{':
        s[0:0] = b[i]
        i -= 1
    start = i
    s = ''.join(s)
    indent = 0
    while i and b[i] != '\n':
        indent += 1
        i -= 1
    if indent:
        indent -= 1
    def later(c=c, indent=indent, b=b, s=s, _abr=_abr):
        c.p.b = "%s{%% %s %%}\n    %s\n%s{%% end%s %%}%s" % (
            b[:start], s, ' '*indent, ' '*indent, s, b[start+len(s)+len(_abr):]
        )
    QtCore.QTimer.singleShot(0, later)
</t>
<t tx="tbrown.20120821183537.18662">The end of a placeholder for template expansions, e.g.
`|&gt;`. See @string abbreviations-place-start.</t>
<t tx="tbrown.20120821183537.18663">Start of a placeholder for template expansions.  E.g.
the ``&lt;|`` in::

    w;;=while &lt;|condition|&gt;:
    \:    &lt;|code|&gt;

This would expand with the ``&lt;|condition|&gt;`` selected, and ``,,``,
if that's an abbreviation linked to next_place(), see 
``@@data abbreviations examples``, would select ``&lt;|code|&gt;``.</t>
<t tx="tbrown.20130310101647.34743"></t>
<t tx="tbrown.20130310101647.34744"># if set to True, g.redirectStdout/err will be used to
# redirect stdout and stderr to the log pane when vs-eval is used</t>
<t tx="tbrown.20130813134319.7223"></t>
<t tx="tbrown.20130813134319.7224">Set this to True for rich text edits to be saved automatically.

BE CAREFUL - plain-text nodes will be converted to rich text
without confirmation if you edit them in rich text mode when
this is True.</t>
<t tx="tbrown.20130813181208.23979"># This node's non-"#" content should be valid java-script.  This is
# a toolbar configuration for CKEditor 4.2.
# 
# To enable all CKE features, clear this setting, i.e. remove
# everything below these "#" lines in your myLeoSettings.leo

{toolbar: [ 
   	{ name: 'document', groups: [ 'mode', 'document', 'doctools' ], items: [ 'Source' ] },
	{ name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },
	{ name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ], items: [ 'Scayt' ] },
	{ name: 'styles', items: [ 'Styles', 'Format' ] },
	{ name: 'tools', items: [ 'Maximize' ] },
	{ name: 'others', items: [ '-' ] },
	{ name: 'about', items: [ 'About' ] },
	'/',
	{ name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat', "TextColor", "BGColor" ] },
     { name: 'justification', items: ["JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock" ] },
	{ name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote' ] },
	{ name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },
	{ name: 'insert', items: [ 'Image', 'Table', 'HorizontalRule', 'SpecialChar' ] }
]}
</t>
<t tx="tbrown.20130916082438.55678">Sizes for the status bar splitter. The status bar shows "line: 1, col:
35, fcol: 35" on the left and the path to the current node on the right.

The default value "1 2" gives one third for the line number etc., and 2
thirds for node path.  You may find "1 4" or "1 5" makes it easier to see
all the relevant components of the node path without having to move the
splitter.

The string must be only two integers, separated by spaces and or commas.

Dev. note: this setting is new (201309) and can't be replaced by the
stylesheet, the other settings in this group should probably be handled
by the stylesheet and could be considered for removal.</t>
<t tx="tbrown.20131122091143.22659"># this @button script should be included in any file containing @settings
# and being used to set styles related to appearance

# remember where we are
current_v = c.p.v

if c.font_size_delta:
    # doesn't make a lot of sense to edit font size settings while
    # font zooming is in effect
    g.es("NOTE: font size adjustment currently %+d"%c.font_size_delta)

# first, rebuild the stylesheet template from the tree, if
# the stylesheet source is in tree form, .e.g. dark themes, currently the
# default light theme uses a single @data qt-gui-plugin-style-sheet node
nd = g.findNodeAnywhere(c, '@settings')
if nd:
    nd = g.findNodeInTree(c, nd, 'stylesheet &amp; source')
if nd:
    c.selectPosition(nd)  # needs to be the selected node
    exec(g.findTestScript(c,'stylesheet &amp; source', where='@settings'))
    # this executes the node `nd`, finding it a second time

# then, reload settings from this file
shortcuts, settings = g.app.loadManager.createSettingsDicts(c, True)
c.config.settingsDict.update(settings)

# apply the stylesheet
c.frame.top.setStyleSheets()

# go back where we started
c.selectPosition(c.vnode2position(current_v))
</t>
<t tx="tbrown.20131122091143.23828">These are definitions of colors not defined by default, so
you can refer to "solarized-red" as "@solarized-red" instead
of "#dc322f".  You probably don't need to touch these, although
you could add new color names of your own.</t>
<t tx="tbrown.20131122091143.23829">Here you can edit the colors by Leo, just edit the
node headings, and click the reload-style button.

Examples:
    
    @color text-foreground = white
    
    @color text-foreground = #ffffff
    
    @color text-foreground = @solarized-red

Most common color names are recognized.  The #RRGGBB format works, and
you can use reference to @settings defined elsehere, starting with an
'@', e.g. @solarized-red if a color called @solarized-red is defined
by a setting somewhere else.

Config. menu entry: Styles / Colors
</t>
<t tx="tbrown.20131122091143.23830"></t>
<t tx="tbrown.20131122091143.23831"></t>
<t tx="tbrown.20131122091143.23832"></t>
<t tx="tbrown.20131122091143.23833"></t>
<t tx="tbrown.20131122091143.23834"></t>
<t tx="tbrown.20131122091143.23835"></t>
<t tx="tbrown.20131122091143.23836"></t>
<t tx="tbrown.20131122091143.23837"></t>
<t tx="tbrown.20131122091143.23838"></t>
<t tx="tbrown.20131122091143.23839"></t>
<t tx="tbrown.20131122091143.23840"></t>
<t tx="tbrown.20131122094200.2511">You can change all font sizes at once by changing @font-size, or set -body,
-tree and -log settings to individual 'XXpt' values.</t>
<t tx="tbrown.20131122094200.2512">This setting must exists for Ctrl-mousewheel font zooming to work.</t>
<t tx="tbrown.20131122094200.2514"></t>
<t tx="tbrown.20131122094200.2515">See /mnt/usr1/usr1/home/tbrown/Package/leo/bzr/leo.repo/top_style/leo/core/LeoPyRef.leo#Code--&gt;Qt gui--&gt;@file ../plugins/qtGui.py--&gt; &lt;&lt; define text widget classes &gt;&gt;--&gt; &lt;&lt; define leoQTextEditWidget class &gt;&gt;--&gt;Birth (leoQTextEditWidget)--&gt;setConfig

apparently this only works when there's no stylesheet, so probably not at all now.</t>
<t tx="tbrown.20131122094200.2517"></t>
<t tx="tbrown.20131122094200.2518">Size for primary text windows.</t>
<t tx="tbrown.20131122094200.2520">test text</t>
<t tx="tbrown.20131122094200.2523"></t>
<t tx="tbrown.20131122094200.2524"></t>
<t tx="tbrown.20131122094200.2526"></t>
<t tx="tbrown.20131122094200.2528">Doesn't work just at the moment.</t>
<t tx="tbrown.20131122104251.2537"></t>
<t tx="tbrown.20131122104251.2538"></t>
<t tx="tbrown.20131122104251.2539"></t>
<t tx="tbrown.20131122104251.2540"></t>
<t tx="ville.20090701225947.3902"># Open current node in external editor. 'v' is mnemonic for 'vi', because vi users request this most
# cm-external-editor = Alt-v</t>
<t tx="ville.20091008201813.3909">Qt ui uses a different (simpler) setup for creating context menus,
a single @data contextmenu_commands node. </t>
<t tx="ville.20091008201813.3911"># Important: the contextmenu.py plugin must be enabled
# for these settings to take effect.

# Add commands to contextmenu
# The format is &lt;command&gt; SPACE &lt;description&gt;

# stickynote Create a sticky note
# read-at-file-nodes Read in file nodes

copy-node Copy Node
cut-node Cut Node
paste-node Paste Node</t>
<t tx="vitalije.20100306144625.8944"></t>
<t tx="vitalije.20100306144625.8945"></t>
<t tx="vitalije.20100306144625.8946"># Time between saves in seconds</t>
</tnodes>
</leo_file>
